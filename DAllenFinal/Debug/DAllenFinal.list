
DAllenFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006298  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012d4  08006444  08006444  00007444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007718  08007718  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007718  08007718  00008718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007720  08007720  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007720  08007720  00008720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007724  08007724  00008724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08007728  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000901c  2**0
                  CONTENTS
 10 .bss          00025db8  2000001c  2000001c  0000901c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025dd4  20025dd4  0000901c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013479  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fa0  00000000  00000000  0001c4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  0001f468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f26  00000000  00000000  00020800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026f74  00000000  00000000  00021726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019045  00000000  00000000  0004869a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e29b1  00000000  00000000  000616df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00144090  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000529c  00000000  00000000  001440d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00149370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800642c 	.word	0x0800642c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	0800642c 	.word	0x0800642c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f003 fa4d 	bl	800397e <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f001 fe06 	bl	80020f4 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f001 fdc3 	bl	8002074 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f001 fec9 	bl	8002288 <LCD_Clear>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}

080004fa <Application_game_inst>:
{
	//visualDemo();
}

void Application_game_inst(void)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	af00      	add	r7, sp, #0
	game_init();
 80004fe:	f001 ff9b 	bl	8002438 <game_init>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}

08000506 <map_draw>:
#include "BlockDriver.h"

static RNG_HandleTypeDef *hrng;

void map_draw()
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b088      	sub	sp, #32
 800050a:	af00      	add	r7, sp, #0
	//uint16_t y_len = LCD_PIXEL_HEIGHT;
	uint16_t x_len = LCD_PIXEL_WIDTH;
 800050c:	23f0      	movs	r3, #240	@ 0xf0
 800050e:	80fb      	strh	r3, [r7, #6]
	//edges of 5 pixels in width
	//lines at 0-5, 26, 47, 68, 89, 110, 131, 152, 173, 194, 215, 236-240
	uint16_t x = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	80bb      	strh	r3, [r7, #4]
	//uint16_t y = 0;
	//VERTICAL
	for(int i = 1; i<LCD_PIXEL_WIDTH; i+=BLOCK_WIDTH)
 8000514:	2301      	movs	r3, #1
 8000516:	61fb      	str	r3, [r7, #28]
 8000518:	e00d      	b.n	8000536 <map_draw+0x30>
	{
		LCD_Draw_Vertical_Line(EDGE_WIDTH+i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 800051a:	69fb      	ldr	r3, [r7, #28]
 800051c:	b29b      	uxth	r3, r3
 800051e:	3304      	adds	r3, #4
 8000520:	b298      	uxth	r0, r3
 8000522:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000526:	f240 1235 	movw	r2, #309	@ 0x135
 800052a:	210b      	movs	r1, #11
 800052c:	f001 fe5e 	bl	80021ec <LCD_Draw_Vertical_Line>
	for(int i = 1; i<LCD_PIXEL_WIDTH; i+=BLOCK_WIDTH)
 8000530:	69fb      	ldr	r3, [r7, #28]
 8000532:	3317      	adds	r3, #23
 8000534:	61fb      	str	r3, [r7, #28]
 8000536:	69fb      	ldr	r3, [r7, #28]
 8000538:	2bef      	cmp	r3, #239	@ 0xef
 800053a:	ddee      	ble.n	800051a <map_draw+0x14>
	}
	for(int i = 1; i<=EDGE_WIDTH; i++)
 800053c:	2301      	movs	r3, #1
 800053e:	61bb      	str	r3, [r7, #24]
 8000540:	e00b      	b.n	800055a <map_draw+0x54>
	{
		LCD_Draw_Vertical_Line(i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 8000542:	69bb      	ldr	r3, [r7, #24]
 8000544:	b298      	uxth	r0, r3
 8000546:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800054a:	f240 1235 	movw	r2, #309	@ 0x135
 800054e:	210b      	movs	r1, #11
 8000550:	f001 fe4c 	bl	80021ec <LCD_Draw_Vertical_Line>
	for(int i = 1; i<=EDGE_WIDTH; i++)
 8000554:	69bb      	ldr	r3, [r7, #24]
 8000556:	3301      	adds	r3, #1
 8000558:	61bb      	str	r3, [r7, #24]
 800055a:	69bb      	ldr	r3, [r7, #24]
 800055c:	2b04      	cmp	r3, #4
 800055e:	ddf0      	ble.n	8000542 <map_draw+0x3c>
	}
	for(int i = LCD_PIXEL_WIDTH-EDGE_WIDTH; i<=LCD_PIXEL_WIDTH; i++)
 8000560:	23ec      	movs	r3, #236	@ 0xec
 8000562:	617b      	str	r3, [r7, #20]
 8000564:	e00b      	b.n	800057e <map_draw+0x78>
	{
		LCD_Draw_Vertical_Line(i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	b298      	uxth	r0, r3
 800056a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800056e:	f240 1235 	movw	r2, #309	@ 0x135
 8000572:	210b      	movs	r1, #11
 8000574:	f001 fe3a 	bl	80021ec <LCD_Draw_Vertical_Line>
	for(int i = LCD_PIXEL_WIDTH-EDGE_WIDTH; i<=LCD_PIXEL_WIDTH; i++)
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	3301      	adds	r3, #1
 800057c:	617b      	str	r3, [r7, #20]
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	2bf0      	cmp	r3, #240	@ 0xf0
 8000582:	ddf0      	ble.n	8000566 <map_draw+0x60>
	}

	//HORIZONTAL
	for(int i = 1; i<MAP_HEIGHT; i+=BLOCK_WIDTH)
 8000584:	2301      	movs	r3, #1
 8000586:	613b      	str	r3, [r7, #16]
 8000588:	e00c      	b.n	80005a4 <map_draw+0x9e>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+EDGE_WIDTH+i, x_len, LCD_COLOR_WHITE);
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	b29b      	uxth	r3, r3
 800058e:	330f      	adds	r3, #15
 8000590:	b299      	uxth	r1, r3
 8000592:	88fa      	ldrh	r2, [r7, #6]
 8000594:	88b8      	ldrh	r0, [r7, #4]
 8000596:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800059a:	f001 fe4e 	bl	800223a <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<MAP_HEIGHT; i+=BLOCK_WIDTH)
 800059e:	693b      	ldr	r3, [r7, #16]
 80005a0:	3317      	adds	r3, #23
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80005aa:	ddee      	ble.n	800058a <map_draw+0x84>
	}
	for(int i = 0; i<=EDGE_WIDTH; i++)
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	e00c      	b.n	80005cc <map_draw+0xc6>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+i, x_len, LCD_COLOR_WHITE);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	330b      	adds	r3, #11
 80005b8:	b299      	uxth	r1, r3
 80005ba:	88fa      	ldrh	r2, [r7, #6]
 80005bc:	88b8      	ldrh	r0, [r7, #4]
 80005be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005c2:	f001 fe3a 	bl	800223a <LCD_Draw_Horizontal_Line>
	for(int i = 0; i<=EDGE_WIDTH; i++)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	3301      	adds	r3, #1
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	2b04      	cmp	r3, #4
 80005d0:	ddef      	ble.n	80005b2 <map_draw+0xac>
	}
	for(int i = MAP_HEIGHT-EDGE_WIDTH; i<=MAP_HEIGHT; i++)
 80005d2:	f240 1331 	movw	r3, #305	@ 0x131
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	e00c      	b.n	80005f4 <map_draw+0xee>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+i, x_len, LCD_COLOR_WHITE);
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	b29b      	uxth	r3, r3
 80005de:	330b      	adds	r3, #11
 80005e0:	b299      	uxth	r1, r3
 80005e2:	88fa      	ldrh	r2, [r7, #6]
 80005e4:	88b8      	ldrh	r0, [r7, #4]
 80005e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005ea:	f001 fe26 	bl	800223a <LCD_Draw_Horizontal_Line>
	for(int i = MAP_HEIGHT-EDGE_WIDTH; i<=MAP_HEIGHT; i++)
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	3301      	adds	r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 80005fa:	dbee      	blt.n	80005da <map_draw+0xd4>
	}
}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <start_screen>:

void start_screen()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
	//uint16_t play_x = 68; //to 172
	uint16_t play_y = 106; //to 184
 800060e:	236a      	movs	r3, #106	@ 0x6a
 8000610:	80fb      	strh	r3, [r7, #6]
	//uint16_t button_height = 48;
	uint16_t button_width = 120;
 8000612:	2378      	movs	r3, #120	@ 0x78
 8000614:	80bb      	strh	r3, [r7, #4]

	for(int i = 1; i<button_width/2; i++)
 8000616:	2301      	movs	r3, #1
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	e014      	b.n	8000646 <start_screen+0x3e>
	{
		LCD_Draw_Horizontal_Line(120-i, play_y+i, 2*i, LCD_COLOR_WHITE);
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	b29b      	uxth	r3, r3
 8000620:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 8000624:	b298      	uxth	r0, r3
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	b29a      	uxth	r2, r3
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	4413      	add	r3, r2
 800062e:	b299      	uxth	r1, r3
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	b29b      	uxth	r3, r3
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	b29a      	uxth	r2, r3
 8000638:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800063c:	f001 fdfd 	bl	800223a <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<button_width/2; i++)
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	3301      	adds	r3, #1
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	88bb      	ldrh	r3, [r7, #4]
 8000648:	085b      	lsrs	r3, r3, #1
 800064a:	b29b      	uxth	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	4293      	cmp	r3, r2
 8000652:	dbe3      	blt.n	800061c <start_screen+0x14>
	}
	for(int i = button_width/2; i>0; i--)
 8000654:	88bb      	ldrh	r3, [r7, #4]
 8000656:	085b      	lsrs	r3, r3, #1
 8000658:	b29b      	uxth	r3, r3
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	e020      	b.n	80006a0 <start_screen+0x98>
	{
		LCD_Draw_Horizontal_Line(i+button_width/2, play_y + i + (button_width/2) - 1, button_width-(2*i), LCD_COLOR_WHITE);
 800065e:	88bb      	ldrh	r3, [r7, #4]
 8000660:	085b      	lsrs	r3, r3, #1
 8000662:	b29a      	uxth	r2, r3
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	b29b      	uxth	r3, r3
 8000668:	4413      	add	r3, r2
 800066a:	b298      	uxth	r0, r3
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	b29a      	uxth	r2, r3
 8000670:	88fb      	ldrh	r3, [r7, #6]
 8000672:	4413      	add	r3, r2
 8000674:	b29a      	uxth	r2, r3
 8000676:	88bb      	ldrh	r3, [r7, #4]
 8000678:	085b      	lsrs	r3, r3, #1
 800067a:	b29b      	uxth	r3, r3
 800067c:	4413      	add	r3, r2
 800067e:	b29b      	uxth	r3, r3
 8000680:	3b01      	subs	r3, #1
 8000682:	b299      	uxth	r1, r3
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	b29b      	uxth	r3, r3
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	b29b      	uxth	r3, r3
 800068c:	88ba      	ldrh	r2, [r7, #4]
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	b29a      	uxth	r2, r3
 8000692:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000696:	f001 fdd0 	bl	800223a <LCD_Draw_Horizontal_Line>
	for(int i = button_width/2; i>0; i--)
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	3b01      	subs	r3, #1
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	dcdb      	bgt.n	800065e <start_screen+0x56>
	}
	for(int i = 1; i<button_width/2 -2; i++)
 80006a6:	2301      	movs	r3, #1
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e015      	b.n	80006d8 <start_screen+0xd0>
	{
		LCD_Draw_Horizontal_Line(120-i, play_y+i +2 , 2*i, LCD_COLOR_BLACK);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 80006b4:	b298      	uxth	r0, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	4413      	add	r3, r2
 80006be:	b29b      	uxth	r3, r3
 80006c0:	3302      	adds	r3, #2
 80006c2:	b299      	uxth	r1, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	2300      	movs	r3, #0
 80006ce:	f001 fdb4 	bl	800223a <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<button_width/2 -2; i++)
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	88bb      	ldrh	r3, [r7, #4]
 80006da:	085b      	lsrs	r3, r3, #1
 80006dc:	b29b      	uxth	r3, r3
 80006de:	3b02      	subs	r3, #2
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	dbe2      	blt.n	80006ac <start_screen+0xa4>
	}
	for(int i = button_width/2 -2; i>0; i--)
 80006e6:	88bb      	ldrh	r3, [r7, #4]
 80006e8:	085b      	lsrs	r3, r3, #1
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	3b02      	subs	r3, #2
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	e023      	b.n	800073a <start_screen+0x132>
	{
		LCD_Draw_Horizontal_Line(i+button_width/2+1, play_y + i + (button_width/2) - 2, button_width-(2*i)-2, LCD_COLOR_BLACK);
 80006f2:	88bb      	ldrh	r3, [r7, #4]
 80006f4:	085b      	lsrs	r3, r3, #1
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	4413      	add	r3, r2
 80006fe:	b29b      	uxth	r3, r3
 8000700:	3301      	adds	r3, #1
 8000702:	b298      	uxth	r0, r3
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	b29a      	uxth	r2, r3
 8000708:	88fb      	ldrh	r3, [r7, #6]
 800070a:	4413      	add	r3, r2
 800070c:	b29a      	uxth	r2, r3
 800070e:	88bb      	ldrh	r3, [r7, #4]
 8000710:	085b      	lsrs	r3, r3, #1
 8000712:	b29b      	uxth	r3, r3
 8000714:	4413      	add	r3, r2
 8000716:	b29b      	uxth	r3, r3
 8000718:	3b02      	subs	r3, #2
 800071a:	b299      	uxth	r1, r3
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	b29b      	uxth	r3, r3
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	b29b      	uxth	r3, r3
 8000724:	88ba      	ldrh	r2, [r7, #4]
 8000726:	1ad3      	subs	r3, r2, r3
 8000728:	b29b      	uxth	r3, r3
 800072a:	3b02      	subs	r3, #2
 800072c:	b29a      	uxth	r2, r3
 800072e:	2300      	movs	r3, #0
 8000730:	f001 fd83 	bl	800223a <LCD_Draw_Horizontal_Line>
	for(int i = button_width/2 -2; i>0; i--)
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	3b01      	subs	r3, #1
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	2b00      	cmp	r3, #0
 800073e:	dcd8      	bgt.n	80006f2 <start_screen+0xea>
	}

	LCD_SetFont(&Font16x24);
 8000740:	4815      	ldr	r0, [pc, #84]	@ (8000798 <start_screen+0x190>)
 8000742:	f001 fdd3 	bl	80022ec <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_RED);
 8000746:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800074a:	f001 fdbf 	bl	80022cc <LCD_SetTextColor>
	LCD_DisplayChar(76, 154, 0x50); //0x4c 0x41 0x59
 800074e:	2250      	movs	r2, #80	@ 0x50
 8000750:	219a      	movs	r1, #154	@ 0x9a
 8000752:	204c      	movs	r0, #76	@ 0x4c
 8000754:	f001 fe48 	bl	80023e8 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000758:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 800075c:	f001 fdb6 	bl	80022cc <LCD_SetTextColor>
	LCD_DisplayChar(100, 154, 0x4c); //0x4c 0x41 0x59
 8000760:	224c      	movs	r2, #76	@ 0x4c
 8000762:	219a      	movs	r1, #154	@ 0x9a
 8000764:	2064      	movs	r0, #100	@ 0x64
 8000766:	f001 fe3f 	bl	80023e8 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_BLUE2);
 800076a:	f240 501f 	movw	r0, #1311	@ 0x51f
 800076e:	f001 fdad 	bl	80022cc <LCD_SetTextColor>
	LCD_DisplayChar(124, 154, 0x41); //0x4c 0x41 0x59
 8000772:	2241      	movs	r2, #65	@ 0x41
 8000774:	219a      	movs	r1, #154	@ 0x9a
 8000776:	207c      	movs	r0, #124	@ 0x7c
 8000778:	f001 fe36 	bl	80023e8 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_GREEN);
 800077c:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000780:	f001 fda4 	bl	80022cc <LCD_SetTextColor>
	LCD_DisplayChar(148, 154, 0x59); //0x4c 0x41 0x59
 8000784:	2259      	movs	r2, #89	@ 0x59
 8000786:	219a      	movs	r1, #154	@ 0x9a
 8000788:	2094      	movs	r0, #148	@ 0x94
 800078a:	f001 fe2d 	bl	80023e8 <LCD_DisplayChar>
}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000004 	.word	0x20000004

0800079c <block_drop>:
		APPLICATION_ASSERT(1);
	}
}

block_t block_drop(block_t *block)
{
 800079c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800079e:	b091      	sub	sp, #68	@ 0x44
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
	//when timer reaches ARR and enters IRQ handler, call this function
	volatile block_t temp_tetromino = *block;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	461c      	mov	r4, r3
 80007aa:	f107 0608 	add.w	r6, r7, #8
 80007ae:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80007b2:	4635      	mov	r5, r6
 80007b4:	4623      	mov	r3, r4
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	6859      	ldr	r1, [r3, #4]
 80007ba:	689a      	ldr	r2, [r3, #8]
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007c0:	3410      	adds	r4, #16
 80007c2:	3610      	adds	r6, #16
 80007c4:	4564      	cmp	r4, ip
 80007c6:	d1f4      	bne.n	80007b2 <block_drop+0x16>
 80007c8:	4633      	mov	r3, r6
 80007ca:	4622      	mov	r2, r4
 80007cc:	6810      	ldr	r0, [r2, #0]
 80007ce:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < 4; i++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80007d4:	e013      	b.n	80007fe <block_drop+0x62>
	{
		temp_tetromino.y[i] += BLOCK_WIDTH;
 80007d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007d8:	3314      	adds	r3, #20
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	3340      	adds	r3, #64	@ 0x40
 80007de:	443b      	add	r3, r7
 80007e0:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	3317      	adds	r3, #23
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007ec:	3314      	adds	r3, #20
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	3340      	adds	r3, #64	@ 0x40
 80007f2:	443b      	add	r3, r7
 80007f4:	f823 2c34 	strh.w	r2, [r3, #-52]
	for(int i = 0; i < 4; i++)
 80007f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007fa:	3301      	adds	r3, #1
 80007fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80007fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000800:	2b03      	cmp	r3, #3
 8000802:	dde8      	ble.n	80007d6 <block_drop+0x3a>
	}
	*block = temp_tetromino;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	f107 0408 	add.w	r4, r7, #8
 800080a:	469c      	mov	ip, r3
 800080c:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8000810:	4665      	mov	r5, ip
 8000812:	4626      	mov	r6, r4
 8000814:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000816:	6028      	str	r0, [r5, #0]
 8000818:	6069      	str	r1, [r5, #4]
 800081a:	60aa      	str	r2, [r5, #8]
 800081c:	60eb      	str	r3, [r5, #12]
 800081e:	3410      	adds	r4, #16
 8000820:	f10c 0c10 	add.w	ip, ip, #16
 8000824:	4574      	cmp	r4, lr
 8000826:	d1f3      	bne.n	8000810 <block_drop+0x74>
 8000828:	4663      	mov	r3, ip
 800082a:	4622      	mov	r2, r4
 800082c:	6810      	ldr	r0, [r2, #0]
 800082e:	6018      	str	r0, [r3, #0]
	return temp_tetromino;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f107 0408 	add.w	r4, r7, #8
 8000836:	469c      	mov	ip, r3
 8000838:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 800083c:	4665      	mov	r5, ip
 800083e:	4626      	mov	r6, r4
 8000840:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000842:	6028      	str	r0, [r5, #0]
 8000844:	6069      	str	r1, [r5, #4]
 8000846:	60aa      	str	r2, [r5, #8]
 8000848:	60eb      	str	r3, [r5, #12]
 800084a:	3410      	adds	r4, #16
 800084c:	f10c 0c10 	add.w	ip, ip, #16
 8000850:	4574      	cmp	r4, lr
 8000852:	d1f3      	bne.n	800083c <block_drop+0xa0>
 8000854:	4663      	mov	r3, ip
 8000856:	4622      	mov	r2, r4
 8000858:	6810      	ldr	r0, [r2, #0]
 800085a:	6018      	str	r0, [r3, #0]
}
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	3744      	adds	r7, #68	@ 0x44
 8000860:	46bd      	mov	sp, r7
 8000862:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000864 <block_create>:

block_t block_create(uint8_t num)
{
 8000864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000866:	b0b3      	sub	sp, #204	@ 0xcc
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	70fb      	strb	r3, [r7, #3]
	volatile block_t block = {0};
 8000870:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000874:	2234      	movs	r2, #52	@ 0x34
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f005 fd9d 	bl	80063b8 <memset>
	//evaluate rng for color
	//set pos_x, pos_y
	//return the block

	//uint32_t rand = HAL_RNG_GetRandomNumber(hrng);
	uint32_t rand = num;
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	66fb      	str	r3, [r7, #108]	@ 0x6c
	uint8_t name = rand & 0b111;
 8000882:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000884:	b2db      	uxtb	r3, r3
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
		block.name = name;
 800088e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000892:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	//uint32_t rando = HAL_RNG_GetRandomNumber(hrng);
	uint32_t rando = rand;
 8000896:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000898:	667b      	str	r3, [r7, #100]	@ 0x64
	uint8_t color = rando & 0b111;
 800089a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800089c:	b2db      	uxtb	r3, r3
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	//COLOR
	if(color == BLUE)
 80008a6:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d101      	bne.n	80008b2 <block_create+0x4e>
	{
		block.color = LCD_COLOR_BLUE;
 80008ae:	231f      	movs	r3, #31
 80008b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == RED)
 80008b2:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d102      	bne.n	80008c0 <block_create+0x5c>
	{
		block.color = LCD_COLOR_RED;
 80008ba:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80008be:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == MAGENTA)
 80008c0:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d102      	bne.n	80008ce <block_create+0x6a>
	{
		block.color = LCD_COLOR_MAGENTA;
 80008c8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80008cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == GREEN)
 80008ce:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d102      	bne.n	80008dc <block_create+0x78>
	{
		block.color = LCD_COLOR_GREEN;
 80008d6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80008da:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == CYAN)
 80008dc:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80008e0:	2b04      	cmp	r3, #4
 80008e2:	d102      	bne.n	80008ea <block_create+0x86>
	{
		block.color = LCD_COLOR_CYAN;
 80008e4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80008e8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == YELLOW)
 80008ea:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80008ee:	2b05      	cmp	r3, #5
 80008f0:	d102      	bne.n	80008f8 <block_create+0x94>
	{
		block.color = LCD_COLOR_YELLOW;
 80008f2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80008f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == ORANGE)
 80008f8:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80008fc:	2b06      	cmp	r3, #6
 80008fe:	d102      	bne.n	8000906 <block_create+0xa2>
	{
		block.color = LCD_COLOR_ORANGE;
 8000900:	f64f 33c1 	movw	r3, #64449	@ 0xfbc1
 8000904:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == PURPLE)
 8000906:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800090a:	2b07      	cmp	r3, #7
 800090c:	d102      	bne.n	8000914 <block_create+0xb0>
	{
		block.color = LCD_COLOR_PURPLE;
 800090e:	f647 0318 	movw	r3, #30744	@ 0x7818
 8000912:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	//COORDINATES
	for(int i = 0; i < 4; i++)
 8000914:	2300      	movs	r3, #0
 8000916:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800091a:	e017      	b.n	800094c <block_create+0xe8>
	{
		block.x[i] = BLOCK_START_X + i*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 800091c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000920:	b29b      	uxth	r3, r3
 8000922:	461a      	mov	r2, r3
 8000924:	0052      	lsls	r2, r2, #1
 8000926:	441a      	add	r2, r3
 8000928:	00d2      	lsls	r2, r2, #3
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	b29b      	uxth	r3, r3
 800092e:	334b      	adds	r3, #75	@ 0x4b
 8000930:	b29a      	uxth	r2, r3
 8000932:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000936:	3310      	adds	r3, #16
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	33c8      	adds	r3, #200	@ 0xc8
 800093c:	443b      	add	r3, r7
 800093e:	f823 2c98 	strh.w	r2, [r3, #-152]
	for(int i = 0; i < 4; i++)
 8000942:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000946:	3301      	adds	r3, #1
 8000948:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800094c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000950:	2b03      	cmp	r3, #3
 8000952:	dde3      	ble.n	800091c <block_create+0xb8>
	}

	//BLOCK MATRICES
	if(block.name == O)
 8000954:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d16f      	bne.n	8000a3e <block_create+0x1da>
	{
		uint16_t temp[4][4] =
 800095e:	4bcf      	ldr	r3, [pc, #828]	@ (8000c9c <block_create+0x438>)
 8000960:	f107 040c 	add.w	r4, r7, #12
 8000964:	461d      	mov	r5, r3
 8000966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800096a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800096e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,1},
			{0,0,1,1}};

		for(int i = 0; i < 4; i++)
 8000972:	2300      	movs	r3, #0
 8000974:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000978:	e028      	b.n	80009cc <block_create+0x168>
		{
			for(int j = 0; j < 4; j++)
 800097a:	2300      	movs	r3, #0
 800097c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000980:	e01b      	b.n	80009ba <block_create+0x156>
			{
				block.mat[i][j] = temp[j][i];
 8000982:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000986:	009a      	lsls	r2, r3, #2
 8000988:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800098c:	4413      	add	r3, r2
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	33c8      	adds	r3, #200	@ 0xc8
 8000992:	443b      	add	r3, r7
 8000994:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000998:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800099c:	009a      	lsls	r2, r3, #2
 800099e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80009a2:	4413      	add	r3, r2
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	33c8      	adds	r3, #200	@ 0xc8
 80009a8:	443b      	add	r3, r7
 80009aa:	460a      	mov	r2, r1
 80009ac:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 80009b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80009b4:	3301      	adds	r3, #1
 80009b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80009ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80009be:	2b03      	cmp	r3, #3
 80009c0:	dddf      	ble.n	8000982 <block_create+0x11e>
		for(int i = 0; i < 4; i++)
 80009c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80009c6:	3301      	adds	r3, #1
 80009c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80009cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80009d0:	2b03      	cmp	r3, #3
 80009d2:	ddd2      	ble.n	800097a <block_create+0x116>
			}
		}
		for(int i = 0; i < 4; i++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80009da:	e02c      	b.n	8000a36 <block_create+0x1d2>
		{
			block.x[i] = BLOCK_START_X + (i-1)*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 80009dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80009e0:	3b01      	subs	r3, #1
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	461a      	mov	r2, r3
 80009e6:	0052      	lsls	r2, r2, #1
 80009e8:	441a      	add	r2, r3
 80009ea:	00d2      	lsls	r2, r2, #3
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	334b      	adds	r3, #75	@ 0x4b
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80009f8:	3310      	adds	r3, #16
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	33c8      	adds	r3, #200	@ 0xc8
 80009fe:	443b      	add	r3, r7
 8000a00:	f823 2c98 	strh.w	r2, [r3, #-152]
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000a04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000a08:	3b02      	subs	r3, #2
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	0052      	lsls	r2, r2, #1
 8000a10:	441a      	add	r2, r3
 8000a12:	00d2      	lsls	r2, r2, #3
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	3311      	adds	r3, #17
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000a20:	3314      	adds	r3, #20
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	33c8      	adds	r3, #200	@ 0xc8
 8000a26:	443b      	add	r3, r7
 8000a28:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000a2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000a30:	3301      	adds	r3, #1
 8000a32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	ddce      	ble.n	80009dc <block_create+0x178>
		}
	}
	if(block.name == L)
 8000a3e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d16f      	bne.n	8000b28 <block_create+0x2c4>
	{
		uint16_t temp[4][4] =
 8000a48:	4b95      	ldr	r3, [pc, #596]	@ (8000ca0 <block_create+0x43c>)
 8000a4a:	f107 040c 	add.w	r4, r7, #12
 8000a4e:	461d      	mov	r5, r3
 8000a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,1,0},
			{0,0,1,0},
			{0,0,1,1}};
		for(int i = 0; i < 4; i++)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000a62:	e028      	b.n	8000ab6 <block_create+0x252>
		{
			for(int j = 0; j < 4; j++)
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a6a:	e01b      	b.n	8000aa4 <block_create+0x240>
			{
				block.mat[i][j] = temp[j][i];
 8000a6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000a70:	009a      	lsls	r2, r3, #2
 8000a72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000a76:	4413      	add	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	33c8      	adds	r3, #200	@ 0xc8
 8000a7c:	443b      	add	r3, r7
 8000a7e:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000a82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000a86:	009a      	lsls	r2, r3, #2
 8000a88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000a8c:	4413      	add	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	33c8      	adds	r3, #200	@ 0xc8
 8000a92:	443b      	add	r3, r7
 8000a94:	460a      	mov	r2, r1
 8000a96:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000a9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000aa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000aa8:	2b03      	cmp	r3, #3
 8000aaa:	dddf      	ble.n	8000a6c <block_create+0x208>
		for(int i = 0; i < 4; i++)
 8000aac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000ab6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	ddd2      	ble.n	8000a64 <block_create+0x200>
			}
		}
		for(int i = 0; i < 4; i++)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000ac4:	e02c      	b.n	8000b20 <block_create+0x2bc>
		{
			block.x[i] = BLOCK_START_X + (i-1)*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000ac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000aca:	3b01      	subs	r3, #1
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	461a      	mov	r2, r3
 8000ad0:	0052      	lsls	r2, r2, #1
 8000ad2:	441a      	add	r2, r3
 8000ad4:	00d2      	lsls	r2, r2, #3
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	334b      	adds	r3, #75	@ 0x4b
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000ae2:	3310      	adds	r3, #16
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	33c8      	adds	r3, #200	@ 0xc8
 8000ae8:	443b      	add	r3, r7
 8000aea:	f823 2c98 	strh.w	r2, [r3, #-152]
			block.y[i] = BLOCK_START_Y + (i-1)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000af2:	3b01      	subs	r3, #1
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	461a      	mov	r2, r3
 8000af8:	0052      	lsls	r2, r2, #1
 8000afa:	441a      	add	r2, r3
 8000afc:	00d2      	lsls	r2, r2, #3
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	3311      	adds	r3, #17
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000b0a:	3314      	adds	r3, #20
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	33c8      	adds	r3, #200	@ 0xc8
 8000b10:	443b      	add	r3, r7
 8000b12:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000b20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	ddce      	ble.n	8000ac6 <block_create+0x262>
		}
	}
	if(block.name == J)
 8000b28:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d16f      	bne.n	8000c12 <block_create+0x3ae>
	{
		uint16_t temp[4][4] =
 8000b32:	4b5c      	ldr	r3, [pc, #368]	@ (8000ca4 <block_create+0x440>)
 8000b34:	f107 040c 	add.w	r4, r7, #12
 8000b38:	461d      	mov	r5, r3
 8000b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,1},
			{0,0,0,1},
			{0,0,1,1}};
		for(int i = 0; i < 4; i++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000b4c:	e028      	b.n	8000ba0 <block_create+0x33c>
		{
			for(int j = 0; j < 4; j++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000b54:	e01b      	b.n	8000b8e <block_create+0x32a>
			{
				block.mat[i][j] = temp[j][i];
 8000b56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000b5a:	009a      	lsls	r2, r3, #2
 8000b5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000b60:	4413      	add	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	33c8      	adds	r3, #200	@ 0xc8
 8000b66:	443b      	add	r3, r7
 8000b68:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000b6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000b70:	009a      	lsls	r2, r3, #2
 8000b72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000b76:	4413      	add	r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	33c8      	adds	r3, #200	@ 0xc8
 8000b7c:	443b      	add	r3, r7
 8000b7e:	460a      	mov	r2, r1
 8000b80:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000b84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000b88:	3301      	adds	r3, #1
 8000b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000b8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000b92:	2b03      	cmp	r3, #3
 8000b94:	dddf      	ble.n	8000b56 <block_create+0x2f2>
		for(int i = 0; i < 4; i++)
 8000b96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ba0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	ddd2      	ble.n	8000b4e <block_create+0x2ea>
			}
		}
		for(int i = 0; i < 4; i++)
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000bae:	e02c      	b.n	8000c0a <block_create+0x3a6>
		{
			block.x[i] = BLOCK_START_X + (i-1)*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000bb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	461a      	mov	r2, r3
 8000bba:	0052      	lsls	r2, r2, #1
 8000bbc:	441a      	add	r2, r3
 8000bbe:	00d2      	lsls	r2, r2, #3
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	334b      	adds	r3, #75	@ 0x4b
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000bcc:	3310      	adds	r3, #16
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	33c8      	adds	r3, #200	@ 0xc8
 8000bd2:	443b      	add	r3, r7
 8000bd4:	f823 2c98 	strh.w	r2, [r3, #-152]
			block.y[i] = BLOCK_START_Y + (i-1)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000bd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	0052      	lsls	r2, r2, #1
 8000be4:	441a      	add	r2, r3
 8000be6:	00d2      	lsls	r2, r2, #3
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	3311      	adds	r3, #17
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000bf4:	3314      	adds	r3, #20
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	33c8      	adds	r3, #200	@ 0xc8
 8000bfa:	443b      	add	r3, r7
 8000bfc:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000c00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000c04:	3301      	adds	r3, #1
 8000c06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000c0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	ddce      	ble.n	8000bb0 <block_create+0x34c>
		}
	}
	if(block.name == S)
 8000c12:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b03      	cmp	r3, #3
 8000c1a:	d164      	bne.n	8000ce6 <block_create+0x482>
	{
		uint16_t temp[4][4] =
 8000c1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ca8 <block_create+0x444>)
 8000c1e:	f107 040c 	add.w	r4, r7, #12
 8000c22:	461d      	mov	r5, r3
 8000c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,1},
			{0,1,1,0}};
		for(int i = 0; i < 4; i++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000c36:	e028      	b.n	8000c8a <block_create+0x426>
		{
			for(int j = 0; j < 4; j++)
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000c3e:	e01b      	b.n	8000c78 <block_create+0x414>
			{
				block.mat[i][j] = temp[j][i];
 8000c40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000c44:	009a      	lsls	r2, r3, #2
 8000c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000c4a:	4413      	add	r3, r2
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	33c8      	adds	r3, #200	@ 0xc8
 8000c50:	443b      	add	r3, r7
 8000c52:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000c56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000c5a:	009a      	lsls	r2, r3, #2
 8000c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000c60:	4413      	add	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	33c8      	adds	r3, #200	@ 0xc8
 8000c66:	443b      	add	r3, r7
 8000c68:	460a      	mov	r2, r1
 8000c6a:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000c6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000c72:	3301      	adds	r3, #1
 8000c74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000c78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000c7c:	2b03      	cmp	r3, #3
 8000c7e:	dddf      	ble.n	8000c40 <block_create+0x3dc>
		for(int i = 0; i < 4; i++)
 8000c80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000c84:	3301      	adds	r3, #1
 8000c86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000c8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	ddd2      	ble.n	8000c38 <block_create+0x3d4>
			}
		}
		for(int i = 0; i < 4; i++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000c98:	e021      	b.n	8000cde <block_create+0x47a>
 8000c9a:	bf00      	nop
 8000c9c:	08006444 	.word	0x08006444
 8000ca0:	08006464 	.word	0x08006464
 8000ca4:	08006484 	.word	0x08006484
 8000ca8:	080064a4 	.word	0x080064a4
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000cac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000cb0:	3b02      	subs	r3, #2
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	0052      	lsls	r2, r2, #1
 8000cb8:	441a      	add	r2, r3
 8000cba:	00d2      	lsls	r2, r2, #3
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	3311      	adds	r3, #17
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000cc8:	3314      	adds	r3, #20
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	33c8      	adds	r3, #200	@ 0xc8
 8000cce:	443b      	add	r3, r7
 8000cd0:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000cd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000cd8:	3301      	adds	r3, #1
 8000cda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000cde:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	dde2      	ble.n	8000cac <block_create+0x448>
		}
	}
	if(block.name == Z)
 8000ce6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b04      	cmp	r3, #4
 8000cee:	d15b      	bne.n	8000da8 <block_create+0x544>
	{
		uint16_t temp[4][4] =
 8000cf0:	4b8f      	ldr	r3, [pc, #572]	@ (8000f30 <block_create+0x6cc>)
 8000cf2:	f107 040c 	add.w	r4, r7, #12
 8000cf6:	461d      	mov	r5, r3
 8000cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cfc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,1,1,0},
			{0,0,1,1}};
		for(int i = 0; i < 4; i++)
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000d0a:	e028      	b.n	8000d5e <block_create+0x4fa>
		{
			for(int j = 0; j < 4; j++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000d12:	e01b      	b.n	8000d4c <block_create+0x4e8>
			{
				block.mat[i][j] = temp[j][i];
 8000d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d18:	009a      	lsls	r2, r3, #2
 8000d1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d1e:	4413      	add	r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	33c8      	adds	r3, #200	@ 0xc8
 8000d24:	443b      	add	r3, r7
 8000d26:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000d2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d2e:	009a      	lsls	r2, r3, #2
 8000d30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d34:	4413      	add	r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	33c8      	adds	r3, #200	@ 0xc8
 8000d3a:	443b      	add	r3, r7
 8000d3c:	460a      	mov	r2, r1
 8000d3e:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d46:	3301      	adds	r3, #1
 8000d48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000d4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	dddf      	ble.n	8000d14 <block_create+0x4b0>
		for(int i = 0; i < 4; i++)
 8000d54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d58:	3301      	adds	r3, #1
 8000d5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000d5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	ddd2      	ble.n	8000d0c <block_create+0x4a8>
			}
		}
		for(int i = 0; i < 4; i++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000d6c:	e018      	b.n	8000da0 <block_create+0x53c>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000d6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000d72:	3b02      	subs	r3, #2
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	461a      	mov	r2, r3
 8000d78:	0052      	lsls	r2, r2, #1
 8000d7a:	441a      	add	r2, r3
 8000d7c:	00d2      	lsls	r2, r2, #3
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	3311      	adds	r3, #17
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000d8a:	3314      	adds	r3, #20
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	33c8      	adds	r3, #200	@ 0xc8
 8000d90:	443b      	add	r3, r7
 8000d92:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000d96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000da0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	dde2      	ble.n	8000d6e <block_create+0x50a>
		}
	}
	if(block.name == T)
 8000da8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b05      	cmp	r3, #5
 8000db0:	d155      	bne.n	8000e5e <block_create+0x5fa>
	{
		uint16_t temp[4][4] =
 8000db2:	4b60      	ldr	r3, [pc, #384]	@ (8000f34 <block_create+0x6d0>)
 8000db4:	f107 040c 	add.w	r4, r7, #12
 8000db8:	461d      	mov	r5, r3
 8000dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dbe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,1,1,1},
			{0,0,1,0}};
		for(int i = 0; i < 4; i++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000dcc:	e028      	b.n	8000e20 <block_create+0x5bc>
		{
			for(int j = 0; j < 4; j++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000dd4:	e01b      	b.n	8000e0e <block_create+0x5aa>
			{
				block.mat[i][j] = temp[j][i];
 8000dd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000dda:	009a      	lsls	r2, r3, #2
 8000ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000de0:	4413      	add	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	33c8      	adds	r3, #200	@ 0xc8
 8000de6:	443b      	add	r3, r7
 8000de8:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000df0:	009a      	lsls	r2, r3, #2
 8000df2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000df6:	4413      	add	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	33c8      	adds	r3, #200	@ 0xc8
 8000dfc:	443b      	add	r3, r7
 8000dfe:	460a      	mov	r2, r1
 8000e00:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000e04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000e08:	3301      	adds	r3, #1
 8000e0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000e0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	dddf      	ble.n	8000dd6 <block_create+0x572>
		for(int i = 0; i < 4; i++)
 8000e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	ddd2      	ble.n	8000dce <block_create+0x56a>
			}
		}
		for(int i = 0; i < 4; i++)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000e2c:	e014      	b.n	8000e58 <block_create+0x5f4>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000e2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e30:	3b02      	subs	r3, #2
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	0052      	lsls	r2, r2, #1
 8000e38:	441a      	add	r2, r3
 8000e3a:	00d2      	lsls	r2, r2, #3
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	3311      	adds	r3, #17
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e46:	3314      	adds	r3, #20
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	33c8      	adds	r3, #200	@ 0xc8
 8000e4c:	443b      	add	r3, r7
 8000e4e:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000e52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e54:	3301      	adds	r3, #1
 8000e56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000e58:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	dde7      	ble.n	8000e2e <block_create+0x5ca>
		}
	}
	if(block.name == I)
 8000e5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b06      	cmp	r3, #6
 8000e66:	d149      	bne.n	8000efc <block_create+0x698>
	{
		uint16_t temp[4][4] =
 8000e68:	4b33      	ldr	r3, [pc, #204]	@ (8000f38 <block_create+0x6d4>)
 8000e6a:	f107 040c 	add.w	r4, r7, #12
 8000e6e:	461d      	mov	r5, r3
 8000e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{1,1,1,1},
			{0,0,0,0}};
		for(int i = 0; i < 4; i++)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000e80:	e01e      	b.n	8000ec0 <block_create+0x65c>
		{
			for(int j = 0; j < 4; j++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	677b      	str	r3, [r7, #116]	@ 0x74
 8000e86:	e015      	b.n	8000eb4 <block_create+0x650>
			{
				block.mat[i][j] = temp[j][i];
 8000e88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000e8a:	009a      	lsls	r2, r3, #2
 8000e8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e8e:	4413      	add	r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	33c8      	adds	r3, #200	@ 0xc8
 8000e94:	443b      	add	r3, r7
 8000e96:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000e9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e9c:	009a      	lsls	r2, r3, #2
 8000e9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ea0:	4413      	add	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	33c8      	adds	r3, #200	@ 0xc8
 8000ea6:	443b      	add	r3, r7
 8000ea8:	460a      	mov	r2, r1
 8000eaa:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000eae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	677b      	str	r3, [r7, #116]	@ 0x74
 8000eb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	dde6      	ble.n	8000e88 <block_create+0x624>
		for(int i = 0; i < 4; i++)
 8000eba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000ec0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	dddd      	ble.n	8000e82 <block_create+0x61e>
			}
		}
		for(int i = 0; i < 4; i++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	673b      	str	r3, [r7, #112]	@ 0x70
 8000eca:	e014      	b.n	8000ef6 <block_create+0x692>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000ecc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ece:	3b02      	subs	r3, #2
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	0052      	lsls	r2, r2, #1
 8000ed6:	441a      	add	r2, r3
 8000ed8:	00d2      	lsls	r2, r2, #3
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	3311      	adds	r3, #17
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ee4:	3314      	adds	r3, #20
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	33c8      	adds	r3, #200	@ 0xc8
 8000eea:	443b      	add	r3, r7
 8000eec:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000ef0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	673b      	str	r3, [r7, #112]	@ 0x70
 8000ef6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	dde7      	ble.n	8000ecc <block_create+0x668>
		}
	}
	return block;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000f02:	469c      	mov	ip, r3
 8000f04:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8000f08:	4665      	mov	r5, ip
 8000f0a:	4626      	mov	r6, r4
 8000f0c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f0e:	6028      	str	r0, [r5, #0]
 8000f10:	6069      	str	r1, [r5, #4]
 8000f12:	60aa      	str	r2, [r5, #8]
 8000f14:	60eb      	str	r3, [r5, #12]
 8000f16:	3410      	adds	r4, #16
 8000f18:	f10c 0c10 	add.w	ip, ip, #16
 8000f1c:	4574      	cmp	r4, lr
 8000f1e:	d1f3      	bne.n	8000f08 <block_create+0x6a4>
 8000f20:	4663      	mov	r3, ip
 8000f22:	4622      	mov	r2, r4
 8000f24:	6810      	ldr	r0, [r2, #0]
 8000f26:	6018      	str	r0, [r3, #0]
}
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	37cc      	adds	r7, #204	@ 0xcc
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f30:	080064c4 	.word	0x080064c4
 8000f34:	080064e4 	.word	0x080064e4
 8000f38:	08006504 	.word	0x08006504

08000f3c <map_init>:

map_t map_init()
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000f48:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000f4c:	6018      	str	r0, [r3, #0]
	volatile map_t map = {0};
 8000f4e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000f52:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8000f56:	4618      	mov	r0, r3
 8000f58:	f240 2336 	movw	r3, #566	@ 0x236
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	f005 fa2a 	bl	80063b8 <memset>
	for(int i = 0; i < 10; i++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8000f6a:	e019      	b.n	8000fa0 <map_init+0x64>
	{
		map.x[i] = LEFT_EDGE + i*BLOCK_WIDTH;
 8000f6c:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	461a      	mov	r2, r3
 8000f74:	0052      	lsls	r2, r2, #1
 8000f76:	441a      	add	r2, r3
 8000f78:	00d2      	lsls	r2, r2, #3
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	3306      	adds	r3, #6
 8000f80:	b299      	uxth	r1, r3
 8000f82:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000f86:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8000f8a:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8000f8e:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8000f92:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 10; i++)
 8000f96:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8000fa0:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000fa4:	2b09      	cmp	r3, #9
 8000fa6:	dde1      	ble.n	8000f6c <map_init+0x30>
	}
	for(int i = 0; i < 13; i++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8000fae:	e01b      	b.n	8000fe8 <map_init+0xac>
	{
		map.y[i] = MAP_DIFFERENCE + EDGE_WIDTH + i*BLOCK_WIDTH + 2;
 8000fb0:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	0052      	lsls	r2, r2, #1
 8000fba:	441a      	add	r2, r3
 8000fbc:	00d2      	lsls	r2, r2, #3
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	3311      	adds	r3, #17
 8000fc4:	b299      	uxth	r1, r3
 8000fc6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000fca:	f5a3 7210 	sub.w	r2, r3, #576	@ 0x240
 8000fce:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8000fd2:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	460a      	mov	r2, r1
 8000fdc:	809a      	strh	r2, [r3, #4]
	for(int i = 0; i < 13; i++)
 8000fde:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8000fe8:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8000fec:	2b0c      	cmp	r3, #12
 8000fee:	dddf      	ble.n	8000fb0 <map_init+0x74>
	}
	return map;
 8000ff0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000ff4:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000ffe:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001002:	4610      	mov	r0, r2
 8001004:	4619      	mov	r1, r3
 8001006:	f240 2336 	movw	r3, #566	@ 0x236
 800100a:	461a      	mov	r2, r3
 800100c:	f005 fa00 	bl	8006410 <memcpy>
}
 8001010:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001014:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001018:	6818      	ldr	r0, [r3, #0]
 800101a:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <rest>:

uint8_t rest(block_t *block, map_t *map)
{
 8001022:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001024:	f5ad 7d3f 	sub.w	sp, sp, #764	@ 0x2fc
 8001028:	af00      	add	r7, sp, #0
 800102a:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800102e:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8001032:	6018      	str	r0, [r3, #0]
 8001034:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001038:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 800103c:	6019      	str	r1, [r3, #0]
	volatile block_t temp_tetromino = *block;
 800103e:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001042:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	461c      	mov	r4, r3
 800104a:	f507 7628 	add.w	r6, r7, #672	@ 0x2a0
 800104e:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8001052:	4635      	mov	r5, r6
 8001054:	4623      	mov	r3, r4
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	6859      	ldr	r1, [r3, #4]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001060:	3410      	adds	r4, #16
 8001062:	3610      	adds	r6, #16
 8001064:	4564      	cmp	r4, ip
 8001066:	d1f4      	bne.n	8001052 <rest+0x30>
 8001068:	4633      	mov	r3, r6
 800106a:	4622      	mov	r2, r4
 800106c:	6810      	ldr	r0, [r2, #0]
 800106e:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 8001070:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001074:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001078:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800107c:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	f240 2336 	movw	r3, #566	@ 0x236
 800108a:	461a      	mov	r2, r3
 800108c:	f005 f9c0 	bl	8006410 <memcpy>

	//evaluate the logical AND between the true blocks in block_t and
	//the next row of map_t (block y_pos + block size)
	uint8_t y_max_index[4] = {0};
 8001090:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001094:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
	uint8_t x_max_index[4] = {0};
 800109c:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80010a0:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
	uint16_t y_max[4] = {0};
 80010a8:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80010ac:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80010b0:	461a      	mov	r2, r3
 80010b2:	2300      	movs	r3, #0
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	6053      	str	r3, [r2, #4]
	uint16_t x_max[4] = {0};
 80010b8:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80010bc:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80010c0:	461a      	mov	r2, r3
 80010c2:	2300      	movs	r3, #0
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	6053      	str	r3, [r2, #4]
	for(int i = 0; i < 4; i++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 80010ce:	e04f      	b.n	8001170 <rest+0x14e>
	{
		for(int j = 0; j < 4; j++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 80010d6:	e036      	b.n	8001146 <rest+0x124>
		{
			if(temp_tetromino.mat[i][j])
 80010d8:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 80010dc:	009a      	lsls	r2, r3, #2
 80010de:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 80010e2:	4413      	add	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 80010ea:	443b      	add	r3, r7
 80010ec:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d019      	beq.n	800112a <rest+0x108>
			{
				if(j > y_max_index[i])
 80010f6:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80010fa:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 80010fe:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8001102:	4413      	add	r3, r2
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 800110c:	4293      	cmp	r3, r2
 800110e:	dd15      	ble.n	800113c <rest+0x11a>
				{
					y_max_index[i] = j;
 8001110:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8001114:	b2d9      	uxtb	r1, r3
 8001116:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800111a:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 800111e:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8001122:	4413      	add	r3, r2
 8001124:	460a      	mov	r2, r1
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	e008      	b.n	800113c <rest+0x11a>
				}
			}
			else
			{
				y_max_index[i] = NO_BLOCK;
 800112a:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800112e:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 8001132:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8001136:	4413      	add	r3, r2
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++)
 800113c:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8001140:	3301      	adds	r3, #1
 8001142:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 8001146:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 800114a:	2b03      	cmp	r3, #3
 800114c:	ddc4      	ble.n	80010d8 <rest+0xb6>
			}
		}
		x_max_index[i] = i;
 800114e:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8001152:	b2d9      	uxtb	r1, r3
 8001154:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001158:	f5a3 7226 	sub.w	r2, r3, #664	@ 0x298
 800115c:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8001160:	4413      	add	r3, r2
 8001162:	460a      	mov	r2, r1
 8001164:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i++)
 8001166:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 800116a:	3301      	adds	r3, #1
 800116c:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 8001170:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8001174:	2b03      	cmp	r3, #3
 8001176:	ddab      	ble.n	80010d0 <rest+0xae>
	}
	for(int i = 0; i < 4; i++)
 8001178:	2300      	movs	r3, #0
 800117a:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 800117e:	e048      	b.n	8001212 <rest+0x1f0>
	{
		if(y_max_index[i] == NO_BLOCK)
 8001180:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001184:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 8001188:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 800118c:	4413      	add	r3, r2
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d109      	bne.n	80011a8 <rest+0x186>
		{
			y_max[i] = NO_BLOCK;
 8001194:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001198:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800119c:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 80011a0:	2100      	movs	r1, #0
 80011a2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80011a6:	e02f      	b.n	8001208 <rest+0x1e6>
		}
		else
		{
			y_max[i] = temp_tetromino.y[y_max_index[i]];
 80011a8:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80011ac:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 80011b0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80011b4:	4413      	add	r3, r2
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	3314      	adds	r3, #20
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 80011c0:	443b      	add	r3, r7
 80011c2:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80011c6:	b299      	uxth	r1, r3
 80011c8:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80011cc:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80011d0:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 80011d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			x_max[i] = temp_tetromino.x[x_max_index[i]];
 80011d8:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80011dc:	f5a3 7226 	sub.w	r2, r3, #664	@ 0x298
 80011e0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80011e4:	4413      	add	r3, r2
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	3310      	adds	r3, #16
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 80011f0:	443b      	add	r3, r7
 80011f2:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80011f6:	b299      	uxth	r1, r3
 80011f8:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80011fc:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8001200:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 8001204:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 4; i++)
 8001208:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 800120c:	3301      	adds	r3, #1
 800120e:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8001212:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8001216:	2b03      	cmp	r3, #3
 8001218:	ddb2      	ble.n	8001180 <rest+0x15e>
		}
	}

	uint8_t map_y_min_index[10] = {UINT8_MAX};
 800121a:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800121e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8001222:	22ff      	movs	r2, #255	@ 0xff
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	3304      	adds	r3, #4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	809a      	strh	r2, [r3, #4]
	uint8_t map_x_min_index[10] = {UINT8_MAX};
 800122e:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001232:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8001236:	22ff      	movs	r2, #255	@ 0xff
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	3304      	adds	r3, #4
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	809a      	strh	r2, [r3, #4]
	uint16_t map_y_min[10];
	uint16_t map_x_min[10];
	for(int i = 0; i < 10; i++)
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 8001248:	e054      	b.n	80012f4 <rest+0x2d2>
	{
		for(int j = 0; j < 13; j++)
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 8001250:	e03b      	b.n	80012ca <rest+0x2a8>
		{
			if(temp_map.map_mat[j][i])
 8001252:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001256:	f5a3 7124 	sub.w	r1, r3, #656	@ 0x290
 800125a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 800125e:	4613      	mov	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	f8d7 22e8 	ldr.w	r2, [r7, #744]	@ 0x2e8
 800126a:	4413      	add	r3, r2
 800126c:	3380      	adds	r3, #128	@ 0x80
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	440b      	add	r3, r1
 8001272:	889b      	ldrh	r3, [r3, #4]
 8001274:	b29b      	uxth	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d019      	beq.n	80012ae <rest+0x28c>
			{
				if(map_y_min_index[i] > j)
 800127a:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800127e:	f5a3 722d 	sub.w	r2, r3, #692	@ 0x2b4
 8001282:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8001286:	4413      	add	r3, r2
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001290:	4293      	cmp	r3, r2
 8001292:	da15      	bge.n	80012c0 <rest+0x29e>
				{
					map_y_min_index[i] = j;
 8001294:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001298:	b2d9      	uxtb	r1, r3
 800129a:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800129e:	f5a3 722d 	sub.w	r2, r3, #692	@ 0x2b4
 80012a2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80012a6:	4413      	add	r3, r2
 80012a8:	460a      	mov	r2, r1
 80012aa:	701a      	strb	r2, [r3, #0]
 80012ac:	e008      	b.n	80012c0 <rest+0x29e>
				}
			}
			else
			{
				map_y_min_index[i] = NO_INDEX;
 80012ae:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80012b2:	f5a3 722d 	sub.w	r2, r3, #692	@ 0x2b4
 80012b6:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80012ba:	4413      	add	r3, r2
 80012bc:	22ff      	movs	r2, #255	@ 0xff
 80012be:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 13; j++)
 80012c0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80012c4:	3301      	adds	r3, #1
 80012c6:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 80012ca:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80012ce:	2b0c      	cmp	r3, #12
 80012d0:	ddbf      	ble.n	8001252 <rest+0x230>
			}
		}
		map_x_min_index[i] = i;
 80012d2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80012d6:	b2d9      	uxtb	r1, r3
 80012d8:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80012dc:	f5a3 7230 	sub.w	r2, r3, #704	@ 0x2c0
 80012e0:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80012e4:	4413      	add	r3, r2
 80012e6:	460a      	mov	r2, r1
 80012e8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++)
 80012ea:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80012ee:	3301      	adds	r3, #1
 80012f0:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 80012f4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80012f8:	2b09      	cmp	r3, #9
 80012fa:	dda6      	ble.n	800124a <rest+0x228>
	}
	for(int i = 0; i < 10; i++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8001302:	e039      	b.n	8001378 <rest+0x356>
		{
			map_y_min[i] = LCD_PIXEL_HEIGHT;
		}
		else
		{
			map_y_min[i] = temp_map.y[map_y_min_index[i]];
 8001304:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001308:	f5a3 722d 	sub.w	r2, r3, #692	@ 0x2b4
 800130c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001310:	4413      	add	r3, r2
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800131a:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 800131e:	f501 7386 	add.w	r3, r1, #268	@ 0x10c
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4413      	add	r3, r2
 8001326:	889b      	ldrh	r3, [r3, #4]
 8001328:	b299      	uxth	r1, r3
 800132a:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800132e:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8001332:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 8001336:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			map_x_min[i] = temp_map.x[map_x_min_index[i]];
 800133a:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800133e:	f5a3 7230 	sub.w	r2, r3, #704	@ 0x2c0
 8001342:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001346:	4413      	add	r3, r2
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001350:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001354:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001358:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800135c:	b299      	uxth	r1, r3
 800135e:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001362:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8001366:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 800136a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 10; i++)
 800136e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001372:	3301      	adds	r3, #1
 8001374:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8001378:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 800137c:	2b09      	cmp	r3, #9
 800137e:	ddc1      	ble.n	8001304 <rest+0x2e2>
		}
	}

	uint8_t overlap_map_x_index[4];
	for(int i = 0; i < 4; i++)
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 8001386:	e02f      	b.n	80013e8 <rest+0x3c6>
	{
		for(int j = 0; j < 10; j++)
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 800138e:	e022      	b.n	80013d6 <rest+0x3b4>
		{
			if(x_max[i] == map_x_min[j])
 8001390:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001394:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8001398:	f8d7 22dc 	ldr.w	r2, [r7, #732]	@ 0x2dc
 800139c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80013a0:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80013a4:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80013a8:	f8d7 12d8 	ldr.w	r1, [r7, #728]	@ 0x2d8
 80013ac:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d10b      	bne.n	80013cc <rest+0x3aa>
			{
				overlap_map_x_index[i] = j;
 80013b4:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 80013b8:	b2d9      	uxtb	r1, r3
 80013ba:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80013be:	f5a3 723b 	sub.w	r2, r3, #748	@ 0x2ec
 80013c2:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80013c6:	4413      	add	r3, r2
 80013c8:	460a      	mov	r2, r1
 80013ca:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 10; j++)
 80013cc:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 80013d0:	3301      	adds	r3, #1
 80013d2:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 80013d6:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 80013da:	2b09      	cmp	r3, #9
 80013dc:	ddd8      	ble.n	8001390 <rest+0x36e>
	for(int i = 0; i < 4; i++)
 80013de:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80013e2:	3301      	adds	r3, #1
 80013e4:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 80013e8:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	ddcb      	ble.n	8001388 <rest+0x366>
			}
		}
	}

	for(int i = 0; i < 4; i++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 80013f6:	e02d      	b.n	8001454 <rest+0x432>
	{
		if(map_y_min[overlap_map_x_index[i]] == y_max[i] + BLOCK_WIDTH || y_max[i] == BOTTOM_ROW)
 80013f8:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80013fc:	f5a3 723b 	sub.w	r2, r3, #748	@ 0x2ec
 8001400:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8001404:	4413      	add	r3, r2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800140e:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8001412:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001416:	4619      	mov	r1, r3
 8001418:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800141c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001420:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 8001424:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001428:	3317      	adds	r3, #23
 800142a:	4299      	cmp	r1, r3
 800142c:	d00b      	beq.n	8001446 <rest+0x424>
 800142e:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001432:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001436:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 800143a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800143e:	f240 1225 	movw	r2, #293	@ 0x125
 8001442:	4293      	cmp	r3, r2
 8001444:	d101      	bne.n	800144a <rest+0x428>
		{
			return 1;
 8001446:	2301      	movs	r3, #1
 8001448:	e009      	b.n	800145e <rest+0x43c>
	for(int i = 0; i < 4; i++)
 800144a:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 800144e:	3301      	adds	r3, #1
 8001450:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 8001454:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8001458:	2b03      	cmp	r3, #3
 800145a:	ddcd      	ble.n	80013f8 <rest+0x3d6>
		}
	}
	return 0;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	f507 773f 	add.w	r7, r7, #764	@ 0x2fc
 8001464:	46bd      	mov	sp, r7
 8001466:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001468 <map_update>:
	//block_t new = block_create();
	//draw_tetromino(new);
}

map_t map_update(block_t *block, map_t* map)
{
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	f5ad 7d2d 	sub.w	sp, sp, #692	@ 0x2b4
 800146e:	af00      	add	r7, sp, #0
 8001470:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001474:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001478:	6018      	str	r0, [r3, #0]
 800147a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800147e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8001482:	6019      	str	r1, [r3, #0]
 8001484:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001488:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800148c:	601a      	str	r2, [r3, #0]
	//append the map array with the new blocks in their respective coordinates
	//create new block
	volatile block_t temp_tetromino = *block;
 800148e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001492:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	461c      	mov	r4, r3
 800149a:	f507 7618 	add.w	r6, r7, #608	@ 0x260
 800149e:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80014a2:	4635      	mov	r5, r6
 80014a4:	4623      	mov	r3, r4
 80014a6:	6818      	ldr	r0, [r3, #0]
 80014a8:	6859      	ldr	r1, [r3, #4]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b0:	3410      	adds	r4, #16
 80014b2:	3610      	adds	r6, #16
 80014b4:	4564      	cmp	r4, ip
 80014b6:	d1f4      	bne.n	80014a2 <map_update+0x3a>
 80014b8:	4633      	mov	r3, r6
 80014ba:	4622      	mov	r2, r4
 80014bc:	6810      	ldr	r0, [r2, #0]
 80014be:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 80014c0:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80014c4:	f5a3 7222 	sub.w	r2, r3, #648	@ 0x288
 80014c8:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80014cc:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f240 2336 	movw	r3, #566	@ 0x236
 80014da:	461a      	mov	r2, r3
 80014dc:	f004 ff98 	bl	8006410 <memcpy>

	uint8_t y_index[4];
	uint8_t x_index[4];
	uint16_t y_coor[4];
	uint16_t x_coor[4];
	uint8_t ind = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f887 32af 	strb.w	r3, [r7, #687]	@ 0x2af

	for(int i = 0; i < 4; i++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 80014ec:	e039      	b.n	8001562 <map_update+0xfa>
	{
		for(int j = 0; j < 4; j++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 80014f4:	e02c      	b.n	8001550 <map_update+0xe8>
		{
			if(temp_tetromino.mat[i][j])
 80014f6:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 80014fa:	009a      	lsls	r2, r3, #2
 80014fc:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8001500:	4413      	add	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8001508:	443b      	add	r3, r7
 800150a:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800150e:	b29b      	uxth	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d018      	beq.n	8001546 <map_update+0xde>
			{
				x_index[ind] = i;
 8001514:	f897 32af 	ldrb.w	r3, [r7, #687]	@ 0x2af
 8001518:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 800151c:	b2d1      	uxtb	r1, r2
 800151e:	f507 722c 	add.w	r2, r7, #688	@ 0x2b0
 8001522:	f5a2 7224 	sub.w	r2, r2, #656	@ 0x290
 8001526:	54d1      	strb	r1, [r2, r3]
				y_index[ind] = j;
 8001528:	f897 32af 	ldrb.w	r3, [r7, #687]	@ 0x2af
 800152c:	f8d7 22a4 	ldr.w	r2, [r7, #676]	@ 0x2a4
 8001530:	b2d1      	uxtb	r1, r2
 8001532:	f507 722c 	add.w	r2, r7, #688	@ 0x2b0
 8001536:	f5a2 7223 	sub.w	r2, r2, #652	@ 0x28c
 800153a:	54d1      	strb	r1, [r2, r3]
				ind++;
 800153c:	f897 32af 	ldrb.w	r3, [r7, #687]	@ 0x2af
 8001540:	3301      	adds	r3, #1
 8001542:	f887 32af 	strb.w	r3, [r7, #687]	@ 0x2af
		for(int j = 0; j < 4; j++)
 8001546:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800154a:	3301      	adds	r3, #1
 800154c:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8001550:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8001554:	2b03      	cmp	r3, #3
 8001556:	ddce      	ble.n	80014f6 <map_update+0x8e>
	for(int i = 0; i < 4; i++)
 8001558:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 800155c:	3301      	adds	r3, #1
 800155e:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8001562:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8001566:	2b03      	cmp	r3, #3
 8001568:	ddc1      	ble.n	80014ee <map_update+0x86>
			}
		}
	}

	for(int i = 0; i < 4; i++)
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8001570:	e034      	b.n	80015dc <map_update+0x174>
	{
		if(x_index[i]>NO_INDEX && y_index[i]>NO_INDEX)
		{
			x_coor[i] = temp_tetromino.x[x_index[i]];
 8001572:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001576:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 800157a:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800157e:	4413      	add	r3, r2
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	3310      	adds	r3, #16
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800158a:	443b      	add	r3, r7
 800158c:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 8001590:	b299      	uxth	r1, r3
 8001592:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001596:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800159a:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 800159e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			y_coor[i] = temp_tetromino.y[y_index[i]];
 80015a2:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80015a6:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 80015aa:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80015ae:	4413      	add	r3, r2
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	3314      	adds	r3, #20
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80015ba:	443b      	add	r3, r7
 80015bc:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 80015c0:	b299      	uxth	r1, r3
 80015c2:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80015c6:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80015ca:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80015ce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 4; i++)
 80015d2:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80015d6:	3301      	adds	r3, #1
 80015d8:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 80015dc:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	ddc6      	ble.n	8001572 <map_update+0x10a>
		}
	}

	//get indices for the map coordinates corresponding to the block coordinates
	//set the map logical matrix, and the color
	uint8_t index = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 329f 	strb.w	r3, [r7, #671]	@ 0x29f
	for(int i = 0; i < 10; i++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 80015f0:	e066      	b.n	80016c0 <map_update+0x258>
	{
		for(int j = 0; j < 13; j++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 80015f8:	e059      	b.n	80016ae <map_update+0x246>
		{
			if(temp_map.x[i] == x_coor[index] && temp_map.y[j] == y_coor[index])
 80015fa:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80015fe:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8001602:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001606:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 800160a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800160e:	b29a      	uxth	r2, r3
 8001610:	f897 129f 	ldrb.w	r1, [r7, #671]	@ 0x29f
 8001614:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001618:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800161c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001620:	429a      	cmp	r2, r3
 8001622:	d13f      	bne.n	80016a4 <map_update+0x23c>
 8001624:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001628:	f5a3 7222 	sub.w	r2, r3, #648	@ 0x288
 800162c:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001630:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	889b      	ldrh	r3, [r3, #4]
 800163a:	b29a      	uxth	r2, r3
 800163c:	f897 129f 	ldrb.w	r1, [r7, #671]	@ 0x29f
 8001640:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001644:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001648:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800164c:	429a      	cmp	r2, r3
 800164e:	d129      	bne.n	80016a4 <map_update+0x23c>
			{
				temp_map.map_mat[j][i] = ON;
 8001650:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001654:	f5a3 7122 	sub.w	r1, r3, #648	@ 0x288
 8001658:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001668:	4413      	add	r3, r2
 800166a:	3380      	adds	r3, #128	@ 0x80
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	440b      	add	r3, r1
 8001670:	2201      	movs	r2, #1
 8001672:	809a      	strh	r2, [r3, #4]
				temp_map.map_color[j][i] = temp_tetromino.color;
 8001674:	f8b7 3262 	ldrh.w	r3, [r7, #610]	@ 0x262
 8001678:	b298      	uxth	r0, r3
 800167a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800167e:	f5a3 7122 	sub.w	r1, r3, #648	@ 0x288
 8001682:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001692:	4413      	add	r3, r2
 8001694:	4602      	mov	r2, r0
 8001696:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				index++;
 800169a:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 800169e:	3301      	adds	r3, #1
 80016a0:	f887 329f 	strb.w	r3, [r7, #671]	@ 0x29f
		for(int j = 0; j < 13; j++)
 80016a4:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 80016a8:	3301      	adds	r3, #1
 80016aa:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 80016ae:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 80016b2:	2b0c      	cmp	r3, #12
 80016b4:	dda1      	ble.n	80015fa <map_update+0x192>
	for(int i = 0; i < 10; i++)
 80016b6:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 80016ba:	3301      	adds	r3, #1
 80016bc:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 80016c0:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 80016c4:	2b09      	cmp	r3, #9
 80016c6:	dd94      	ble.n	80015f2 <map_update+0x18a>
//		for(int j = 0; j < 4; j++)
//		{
//
//		}
//	}
	return temp_map;
 80016c8:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80016cc:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80016d6:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f240 2336 	movw	r3, #566	@ 0x236
 80016e2:	461a      	mov	r2, r3
 80016e4:	f004 fe94 	bl	8006410 <memcpy>
}
 80016e8:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80016ec:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016fc <block_rotate>:

block_t block_rotate(block_t *block)
{
 80016fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fe:	b0a9      	sub	sp, #164	@ 0xa4
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
	block_t temp_block = *block;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	461c      	mov	r4, r3
 800170a:	f107 0640 	add.w	r6, r7, #64	@ 0x40
 800170e:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8001712:	4635      	mov	r5, r6
 8001714:	4623      	mov	r3, r4
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	6859      	ldr	r1, [r3, #4]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001720:	3410      	adds	r4, #16
 8001722:	3610      	adds	r6, #16
 8001724:	4564      	cmp	r4, ip
 8001726:	d1f4      	bne.n	8001712 <block_rotate+0x16>
 8001728:	4633      	mov	r3, r6
 800172a:	4622      	mov	r2, r4
 800172c:	6810      	ldr	r0, [r2, #0]
 800172e:	6018      	str	r0, [r3, #0]
	if(temp_block.name == O)
 8001730:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d116      	bne.n	8001768 <block_rotate+0x6c>
	{
		return temp_block;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001740:	469c      	mov	ip, r3
 8001742:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001746:	4665      	mov	r5, ip
 8001748:	4626      	mov	r6, r4
 800174a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800174c:	6028      	str	r0, [r5, #0]
 800174e:	6069      	str	r1, [r5, #4]
 8001750:	60aa      	str	r2, [r5, #8]
 8001752:	60eb      	str	r3, [r5, #12]
 8001754:	3410      	adds	r4, #16
 8001756:	f10c 0c10 	add.w	ip, ip, #16
 800175a:	4574      	cmp	r4, lr
 800175c:	d1f3      	bne.n	8001746 <block_rotate+0x4a>
 800175e:	4663      	mov	r3, ip
 8001760:	4622      	mov	r2, r4
 8001762:	6810      	ldr	r0, [r2, #0]
 8001764:	6018      	str	r0, [r3, #0]
 8001766:	e15e      	b.n	8001a26 <block_rotate+0x32a>
	{
		temp_block.x[0] = 0;
	}
	*/

	if(temp_block.name == I)
 8001768:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b06      	cmp	r3, #6
 8001770:	d163      	bne.n	800183a <block_rotate+0x13e>
	{
		uint8_t transpose[4][4];
		for(int i = 0; i < 4; i++)
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001778:	e029      	b.n	80017ce <block_rotate+0xd2>
		{
			for(int j = 0; j < 4; j++)
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001780:	e01c      	b.n	80017bc <block_rotate+0xc0>
			{
				transpose[i][j] = temp_block.mat[j][i];
 8001782:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001786:	009a      	lsls	r2, r3, #2
 8001788:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800178c:	4413      	add	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	33a0      	adds	r3, #160	@ 0xa0
 8001792:	443b      	add	r3, r7
 8001794:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8001798:	b29b      	uxth	r3, r3
 800179a:	b2d9      	uxtb	r1, r3
 800179c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	33a0      	adds	r3, #160	@ 0xa0
 80017a4:	19da      	adds	r2, r3, r7
 80017a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017aa:	4413      	add	r3, r2
 80017ac:	3b70      	subs	r3, #112	@ 0x70
 80017ae:	460a      	mov	r2, r1
 80017b0:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 4; j++)
 80017b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017b6:	3301      	adds	r3, #1
 80017b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80017bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	ddde      	ble.n	8001782 <block_rotate+0x86>
		for(int i = 0; i < 4; i++)
 80017c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80017c8:	3301      	adds	r3, #1
 80017ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80017ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	ddd1      	ble.n	800177a <block_rotate+0x7e>
			}
		}
		for(int k = 0; k < 4; k++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80017dc:	e028      	b.n	8001830 <block_rotate+0x134>
		{
			for(int l = 0; l < 4; l++)
 80017de:	2300      	movs	r3, #0
 80017e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80017e4:	e01b      	b.n	800181e <block_rotate+0x122>
			{
				temp_block.mat[k][l] = transpose[k][l];
 80017e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	33a0      	adds	r3, #160	@ 0xa0
 80017ee:	19da      	adds	r2, r3, r7
 80017f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017f4:	4413      	add	r3, r2
 80017f6:	3b70      	subs	r3, #112	@ 0x70
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	4619      	mov	r1, r3
 80017fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001800:	009a      	lsls	r2, r3, #2
 8001802:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001806:	4413      	add	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	33a0      	adds	r3, #160	@ 0xa0
 800180c:	443b      	add	r3, r7
 800180e:	460a      	mov	r2, r1
 8001810:	f823 2c5c 	strh.w	r2, [r3, #-92]
			for(int l = 0; l < 4; l++)
 8001814:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001818:	3301      	adds	r3, #1
 800181a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800181e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001822:	2b03      	cmp	r3, #3
 8001824:	dddf      	ble.n	80017e6 <block_rotate+0xea>
		for(int k = 0; k < 4; k++)
 8001826:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800182a:	3301      	adds	r3, #1
 800182c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001830:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001834:	2b03      	cmp	r3, #3
 8001836:	ddd2      	ble.n	80017de <block_rotate+0xe2>
 8001838:	e0df      	b.n	80019fa <block_rotate+0x2fe>
			}
		}
	}


	else if(temp_block.name != O)
 800183a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80da 	beq.w	80019fa <block_rotate+0x2fe>
	{
		uint8_t transpose_4[3][3];
		uint8_t transformed[3][3];
		uint8_t mirror_identity[3][3] =
 8001846:	4a7a      	ldr	r2, [pc, #488]	@ (8001a30 <block_rotate+0x334>)
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	ca07      	ldmia	r2, {r0, r1, r2}
 800184e:	c303      	stmia	r3!, {r0, r1}
 8001850:	701a      	strb	r2, [r3, #0]
		{{0, 0, 1},
		{0, 1, 0},
		{1, 0, 0}};

		for(int i = 1; i < 4; i++)
 8001852:	2301      	movs	r3, #1
 8001854:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001858:	e02d      	b.n	80018b6 <block_rotate+0x1ba>
		{
			for(int j = 1; j < 4; j++)
 800185a:	2301      	movs	r3, #1
 800185c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001860:	e020      	b.n	80018a4 <block_rotate+0x1a8>
			{
				transpose_4[i-1][j-1] = temp_block.mat[j][i];
 8001862:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001866:	009a      	lsls	r2, r3, #2
 8001868:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800186c:	4413      	add	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	33a0      	adds	r3, #160	@ 0xa0
 8001872:	443b      	add	r3, r7
 8001874:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8001878:	b298      	uxth	r0, r3
 800187a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800187e:	1e5a      	subs	r2, r3, #1
 8001880:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001884:	1e59      	subs	r1, r3, #1
 8001886:	b2c0      	uxtb	r0, r0
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	33a0      	adds	r3, #160	@ 0xa0
 8001890:	443b      	add	r3, r7
 8001892:	440b      	add	r3, r1
 8001894:	3b7c      	subs	r3, #124	@ 0x7c
 8001896:	4602      	mov	r2, r0
 8001898:	701a      	strb	r2, [r3, #0]
			for(int j = 1; j < 4; j++)
 800189a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800189e:	3301      	adds	r3, #1
 80018a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	ddda      	ble.n	8001862 <block_rotate+0x166>
		for(int i = 1; i < 4; i++)
 80018ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018b0:	3301      	adds	r3, #1
 80018b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80018b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	ddcd      	ble.n	800185a <block_rotate+0x15e>
			}
		}

		for(int m = 0; m < 3; m++)
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80018c4:	e05b      	b.n	800197e <block_rotate+0x282>
		{
			for(int n = 0; n < 3; n++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80018cc:	e04e      	b.n	800196c <block_rotate+0x270>
			{
				transformed[m][n] = 0;
 80018ce:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	33a0      	adds	r3, #160	@ 0xa0
 80018da:	19da      	adds	r2, r3, r7
 80018dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018e0:	4413      	add	r3, r2
 80018e2:	3b88      	subs	r3, #136	@ 0x88
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
				for(int p = 0; p < 3; p++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018ec:	e036      	b.n	800195c <block_rotate+0x260>
				{
					transformed[m][n] += (transpose_4[m][p] * mirror_identity[p][n]);
 80018ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80018f2:	4613      	mov	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	33a0      	adds	r3, #160	@ 0xa0
 80018fa:	19da      	adds	r2, r3, r7
 80018fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001900:	4413      	add	r3, r2
 8001902:	3b88      	subs	r3, #136	@ 0x88
 8001904:	7819      	ldrb	r1, [r3, #0]
 8001906:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	33a0      	adds	r3, #160	@ 0xa0
 8001912:	19da      	adds	r2, r3, r7
 8001914:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001916:	4413      	add	r3, r2
 8001918:	3b7c      	subs	r3, #124	@ 0x7c
 800191a:	7818      	ldrb	r0, [r3, #0]
 800191c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	33a0      	adds	r3, #160	@ 0xa0
 8001926:	19da      	adds	r2, r3, r7
 8001928:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800192c:	4413      	add	r3, r2
 800192e:	3b94      	subs	r3, #148	@ 0x94
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	fb10 f303 	smulbb	r3, r0, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	440b      	add	r3, r1
 800193a:	b2d9      	uxtb	r1, r3
 800193c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	33a0      	adds	r3, #160	@ 0xa0
 8001948:	19da      	adds	r2, r3, r7
 800194a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800194e:	4413      	add	r3, r2
 8001950:	3b88      	subs	r3, #136	@ 0x88
 8001952:	460a      	mov	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
				for(int p = 0; p < 3; p++)
 8001956:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001958:	3301      	adds	r3, #1
 800195a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800195c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800195e:	2b02      	cmp	r3, #2
 8001960:	ddc5      	ble.n	80018ee <block_rotate+0x1f2>
			for(int n = 0; n < 3; n++)
 8001962:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001966:	3301      	adds	r3, #1
 8001968:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800196c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001970:	2b02      	cmp	r3, #2
 8001972:	ddac      	ble.n	80018ce <block_rotate+0x1d2>
		for(int m = 0; m < 3; m++)
 8001974:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001978:	3301      	adds	r3, #1
 800197a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800197e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001982:	2b02      	cmp	r3, #2
 8001984:	dd9f      	ble.n	80018c6 <block_rotate+0x1ca>
				}
			}
		}

		for(int k = 0; k < 4; k++)
 8001986:	2300      	movs	r3, #0
 8001988:	67bb      	str	r3, [r7, #120]	@ 0x78
 800198a:	e033      	b.n	80019f4 <block_rotate+0x2f8>
		{
			for(int l = 0; l < 4; l++)
 800198c:	2300      	movs	r3, #0
 800198e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001990:	e02a      	b.n	80019e8 <block_rotate+0x2ec>
			{
				if(k == 0 || l == 0)
 8001992:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <block_rotate+0x2a2>
 8001998:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10a      	bne.n	80019b4 <block_rotate+0x2b8>
				{
					temp_block.mat[k][l] = 0;
 800199e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80019a0:	009a      	lsls	r2, r3, #2
 80019a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019a4:	4413      	add	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	33a0      	adds	r3, #160	@ 0xa0
 80019aa:	443b      	add	r3, r7
 80019ac:	2200      	movs	r2, #0
 80019ae:	f823 2c5c 	strh.w	r2, [r3, #-92]
 80019b2:	e016      	b.n	80019e2 <block_rotate+0x2e6>
				}
				else
				{
					temp_block.mat[k][l] = transformed[k-1][l-1];
 80019b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80019b6:	1e5a      	subs	r2, r3, #1
 80019b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019ba:	1e59      	subs	r1, r3, #1
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	33a0      	adds	r3, #160	@ 0xa0
 80019c4:	443b      	add	r3, r7
 80019c6:	440b      	add	r3, r1
 80019c8:	3b88      	subs	r3, #136	@ 0x88
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80019d0:	009a      	lsls	r2, r3, #2
 80019d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019d4:	4413      	add	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	33a0      	adds	r3, #160	@ 0xa0
 80019da:	443b      	add	r3, r7
 80019dc:	460a      	mov	r2, r1
 80019de:	f823 2c5c 	strh.w	r2, [r3, #-92]
			for(int l = 0; l < 4; l++)
 80019e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019e4:	3301      	adds	r3, #1
 80019e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80019e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	ddd1      	ble.n	8001992 <block_rotate+0x296>
		for(int k = 0; k < 4; k++)
 80019ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80019f0:	3301      	adds	r3, #1
 80019f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80019f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	ddc8      	ble.n	800198c <block_rotate+0x290>
				}
			}
		}
	}
	//draw_tetromino(temp_block);
	return temp_block;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001a00:	469c      	mov	ip, r3
 8001a02:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001a06:	4665      	mov	r5, ip
 8001a08:	4626      	mov	r6, r4
 8001a0a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a0c:	6028      	str	r0, [r5, #0]
 8001a0e:	6069      	str	r1, [r5, #4]
 8001a10:	60aa      	str	r2, [r5, #8]
 8001a12:	60eb      	str	r3, [r5, #12]
 8001a14:	3410      	adds	r4, #16
 8001a16:	f10c 0c10 	add.w	ip, ip, #16
 8001a1a:	4574      	cmp	r4, lr
 8001a1c:	d1f3      	bne.n	8001a06 <block_rotate+0x30a>
 8001a1e:	4663      	mov	r3, ip
 8001a20:	4622      	mov	r2, r4
 8001a22:	6810      	ldr	r0, [r2, #0]
 8001a24:	6018      	str	r0, [r3, #0]
}
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	37a4      	adds	r7, #164	@ 0xa4
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	08006524 	.word	0x08006524

08001a34 <draw_block>:
	*block = temp_tetromino;
	return temp_tetromino;
}

void draw_block(uint16_t x, uint16_t y, uint16_t color)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80fb      	strh	r3, [r7, #6]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	80bb      	strh	r3, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	807b      	strh	r3, [r7, #2]
	for(int i = 0; i < BLOCK_WIDTH-1; i++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	e00c      	b.n	8001a66 <draw_block+0x32>
	{
		LCD_Draw_Horizontal_Line(x, y+i, BLOCK_WIDTH-1, color);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	88bb      	ldrh	r3, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	b299      	uxth	r1, r3
 8001a56:	887b      	ldrh	r3, [r7, #2]
 8001a58:	88f8      	ldrh	r0, [r7, #6]
 8001a5a:	2216      	movs	r2, #22
 8001a5c:	f000 fbed 	bl	800223a <LCD_Draw_Horizontal_Line>
	for(int i = 0; i < BLOCK_WIDTH-1; i++)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3301      	adds	r3, #1
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2b15      	cmp	r3, #21
 8001a6a:	ddef      	ble.n	8001a4c <draw_block+0x18>
	}
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <draw_shapes>:

void draw_shapes()
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b088      	sub	sp, #32
 8001a7a:	af00      	add	r7, sp, #0
	uint16_t block_size = 23;
 8001a7c:	2317      	movs	r3, #23
 8001a7e:	80fb      	strh	r3, [r7, #6]
	uint16_t spacing = 15;
 8001a80:	230f      	movs	r3, #15
 8001a82:	80bb      	strh	r3, [r7, #4]
	uint16_t x_offset = (LCD_PIXEL_WIDTH - (7 * (block_size * 4 + spacing))) / 2;
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	009a      	lsls	r2, r3, #2
 8001a88:	88bb      	ldrh	r3, [r7, #4]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	33f0      	adds	r3, #240	@ 0xf0
 8001a94:	0fda      	lsrs	r2, r3, #31
 8001a96:	4413      	add	r3, r2
 8001a98:	105b      	asrs	r3, r3, #1
 8001a9a:	807b      	strh	r3, [r7, #2]
	//uint16_t y_offset = 50;

	// "I" shape (cyan) //fb3
	for (int i = 0; i < 4; i++)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
 8001aa0:	e012      	b.n	8001ac8 <draw_shapes+0x52>
	{
	   	draw_block(6, 193 + 31 + i*BLOCK_WIDTH, LCD_COLOR_CYAN);
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	0052      	lsls	r2, r2, #1
 8001aaa:	441a      	add	r2, r3
 8001aac:	00d2      	lsls	r2, r2, #3
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	33e0      	adds	r3, #224	@ 0xe0
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001aba:	4619      	mov	r1, r3
 8001abc:	2006      	movs	r0, #6
 8001abe:	f7ff ffb9 	bl	8001a34 <draw_block>
	for (int i = 0; i < 4; i++)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	61fb      	str	r3, [r7, #28]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	dde9      	ble.n	8001aa2 <draw_shapes+0x2c>
	}


	// "L" shape (blue)
	x_offset += block_size * 4 + spacing;
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	88bb      	ldrh	r3, [r7, #4]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	4413      	add	r3, r2
 8001ade:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < 3; i++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	e014      	b.n	8001b10 <draw_shapes+0x9a>
	{
	   	draw_block(80 + i * BLOCK_WIDTH + 88 + 4 - 28, 193 + 31 + block_size, LCD_COLOR_GREEN);
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	0052      	lsls	r2, r2, #1
 8001aee:	441a      	add	r2, r3
 8001af0:	00d2      	lsls	r2, r2, #3
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	3390      	adds	r3, #144	@ 0x90
 8001af8:	b298      	uxth	r0, r3
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	33e0      	adds	r3, #224	@ 0xe0
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7ff ff95 	bl	8001a34 <draw_block>
	for (int i = 0; i < 3; i++)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	61bb      	str	r3, [r7, #24]
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	dde7      	ble.n	8001ae6 <draw_shapes+0x70>
	}
	draw_block(216 - 26, 193 + 31, LCD_COLOR_GREEN);
 8001b16:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001b1a:	21e0      	movs	r1, #224	@ 0xe0
 8001b1c:	20be      	movs	r0, #190	@ 0xbe
 8001b1e:	f7ff ff89 	bl	8001a34 <draw_block>

	// "J" shape (yellow)
	x_offset += block_size * 4 + spacing;
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	88bb      	ldrh	r3, [r7, #4]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	887b      	ldrh	r3, [r7, #2]
 8001b30:	4413      	add	r3, r2
 8001b32:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < 3; i++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	e019      	b.n	8001b6e <draw_shapes+0xf8>
	{
	   	draw_block(145 + i * BLOCK_WIDTH - 39 - block_size*2 - 18 -13, 193 + 31 + block_size, LCD_COLOR_YELLOW);
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	0052      	lsls	r2, r2, #1
 8001b42:	441a      	add	r2, r3
 8001b44:	00d2      	lsls	r2, r2, #3
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	334b      	adds	r3, #75	@ 0x4b
 8001b56:	b298      	uxth	r0, r3
 8001b58:	88fb      	ldrh	r3, [r7, #6]
 8001b5a:	33e0      	adds	r3, #224	@ 0xe0
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7ff ff66 	bl	8001a34 <draw_block>
	for (int i = 0; i < 3; i++)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	dde2      	ble.n	8001b3a <draw_shapes+0xc4>
	}
	draw_block(123 + block_size - 39 - 18 -14, 193 + 31 + 2* block_size, LCD_COLOR_YELLOW);
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	3334      	adds	r3, #52	@ 0x34
 8001b78:	b298      	uxth	r0, r3
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	3370      	adds	r3, #112	@ 0x70
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f7ff ff53 	bl	8001a34 <draw_block>

	// "O" shape (grn)
	x_offset += block_size * 4 + spacing;
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	88bb      	ldrh	r3, [r7, #4]
 8001b96:	4413      	add	r3, r2
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	887b      	ldrh	r3, [r7, #2]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < 2; i++) {
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	e026      	b.n	8001bf4 <draw_shapes+0x17e>
	    for (int j = 0; j < 2; j++) {
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	e01d      	b.n	8001be8 <draw_shapes+0x172>
	       	draw_block(x_offset + i * BLOCK_WIDTH - 7 - 18 -13, 195+75 + j * block_size, LCD_COLOR_ORANGE);
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	0052      	lsls	r2, r2, #1
 8001bb4:	441a      	add	r2, r3
 8001bb6:	00d2      	lsls	r2, r2, #3
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	887b      	ldrh	r3, [r7, #2]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	3b26      	subs	r3, #38	@ 0x26
 8001bc4:	b298      	uxth	r0, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	88fa      	ldrh	r2, [r7, #6]
 8001bcc:	fb12 f303 	smulbb	r3, r2, r3
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	f64f 32c1 	movw	r2, #64449	@ 0xfbc1
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f7ff ff29 	bl	8001a34 <draw_block>
	    for (int j = 0; j < 2; j++) {
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3301      	adds	r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	ddde      	ble.n	8001bac <draw_shapes+0x136>
	for (int i = 0; i < 2; i++) {
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	ddd5      	ble.n	8001ba6 <draw_shapes+0x130>
	    }
	}

	// "S" shape (green)
	x_offset += block_size * 4 + spacing;
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	88bb      	ldrh	r3, [r7, #4]
 8001c02:	4413      	add	r3, r2
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	887b      	ldrh	r3, [r7, #2]
 8001c08:	4413      	add	r3, r2
 8001c0a:	807b      	strh	r3, [r7, #2]
	draw_block(x_offset - 30, 195 + 75 + block_size, LCD_COLOR_MAGENTA);
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	3b1e      	subs	r3, #30
 8001c10:	b298      	uxth	r0, r3
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7ff ff08 	bl	8001a34 <draw_block>
	draw_block(x_offset - 30 + block_size, 195 + 75 + block_size, LCD_COLOR_MAGENTA);
 8001c24:	887a      	ldrh	r2, [r7, #2]
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	4413      	add	r3, r2
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	3b1e      	subs	r3, #30
 8001c2e:	b298      	uxth	r0, r3
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f7ff fef9 	bl	8001a34 <draw_block>
	draw_block(x_offset - 30 + block_size, 195 + 75, LCD_COLOR_MAGENTA);
 8001c42:	887a      	ldrh	r2, [r7, #2]
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	4413      	add	r3, r2
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	3b1e      	subs	r3, #30
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001c52:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff feec 	bl	8001a34 <draw_block>
	draw_block(x_offset - 30 + block_size * 2, 195 + 75, LCD_COLOR_MAGENTA);
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	887b      	ldrh	r3, [r7, #2]
 8001c64:	4413      	add	r3, r2
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	3b1e      	subs	r3, #30
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001c70:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fedd 	bl	8001a34 <draw_block>

	// "T" shape (purple)
	x_offset += block_size * 4 + spacing;
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	88bb      	ldrh	r3, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	887b      	ldrh	r3, [r7, #2]
 8001c88:	4413      	add	r3, r2
 8001c8a:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < 3; i++) {
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	e013      	b.n	8001cba <draw_shapes+0x244>
	   	draw_block(98 + 8 + i * BLOCK_WIDTH - 18 -13, 196 + 97, LCD_COLOR_BLUE2);
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	0052      	lsls	r2, r2, #1
 8001c9a:	441a      	add	r2, r3
 8001c9c:	00d2      	lsls	r2, r2, #3
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	334b      	adds	r3, #75	@ 0x4b
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	f240 521f 	movw	r2, #1311	@ 0x51f
 8001caa:	f240 1125 	movw	r1, #293	@ 0x125
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fec0 	bl	8001a34 <draw_block>
	for (int i = 0; i < 3; i++) {
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	dde8      	ble.n	8001c92 <draw_shapes+0x21c>
	}
	draw_block(98 - 18 + 8 + block_size -13, 194 + 53 + block_size, LCD_COLOR_BLUE2);
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	334b      	adds	r3, #75	@ 0x4b
 8001cc4:	b298      	uxth	r0, r3
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	33f7      	adds	r3, #247	@ 0xf7
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	f240 521f 	movw	r2, #1311	@ 0x51f
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f7ff feaf 	bl	8001a34 <draw_block>

	// "Z" shape (red)
	x_offset += block_size * 4 + spacing;
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	88bb      	ldrh	r3, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	807b      	strh	r3, [r7, #2]
	draw_block(x_offset - 50, 194 + 52, LCD_COLOR_STRAWBERRY);
 8001ce8:	887b      	ldrh	r3, [r7, #2]
 8001cea:	3b32      	subs	r3, #50	@ 0x32
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8001cf2:	21f6      	movs	r1, #246	@ 0xf6
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fe9d 	bl	8001a34 <draw_block>
	draw_block(x_offset - 50 + block_size, 194 + 52, LCD_COLOR_STRAWBERRY);
 8001cfa:	887a      	ldrh	r2, [r7, #2]
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	4413      	add	r3, r2
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	3b32      	subs	r3, #50	@ 0x32
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8001d0a:	21f6      	movs	r1, #246	@ 0xf6
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fe91 	bl	8001a34 <draw_block>
	draw_block(x_offset - 50 + block_size, 194 + 52 + block_size, LCD_COLOR_STRAWBERRY);
 8001d12:	887a      	ldrh	r2, [r7, #2]
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	4413      	add	r3, r2
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	3b32      	subs	r3, #50	@ 0x32
 8001d1c:	b298      	uxth	r0, r3
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	33f6      	adds	r3, #246	@ 0xf6
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f7ff fe83 	bl	8001a34 <draw_block>
	draw_block(x_offset - 50 + block_size * 2, 194 + 52 + block_size, LCD_COLOR_STRAWBERRY);
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	4413      	add	r3, r2
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	3b32      	subs	r3, #50	@ 0x32
 8001d3c:	b298      	uxth	r0, r3
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	33f6      	adds	r3, #246	@ 0xf6
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f7ff fe73 	bl	8001a34 <draw_block>

	// "O" shape (magenta)
	draw_block(x_offset - 50 + block_size, 194 + 52 -9*block_size, LCD_COLOR_MAGENTA);
 8001d4e:	887a      	ldrh	r2, [r7, #2]
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	4413      	add	r3, r2
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	3b32      	subs	r3, #50	@ 0x32
 8001d58:	b298      	uxth	r0, r3
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	0352      	lsls	r2, r2, #13
 8001d60:	1ad2      	subs	r2, r2, r3
 8001d62:	00d2      	lsls	r2, r2, #3
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	33f6      	adds	r3, #246	@ 0xf6
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001d70:	4619      	mov	r1, r3
 8001d72:	f7ff fe5f 	bl	8001a34 <draw_block>
	draw_block(x_offset - 50 , 194 + 52 - 9*block_size, LCD_COLOR_MAGENTA);
 8001d76:	887b      	ldrh	r3, [r7, #2]
 8001d78:	3b32      	subs	r3, #50	@ 0x32
 8001d7a:	b298      	uxth	r0, r3
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	0352      	lsls	r2, r2, #13
 8001d82:	1ad2      	subs	r2, r2, r3
 8001d84:	00d2      	lsls	r2, r2, #3
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	33f6      	adds	r3, #246	@ 0xf6
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001d92:	4619      	mov	r1, r3
 8001d94:	f7ff fe4e 	bl	8001a34 <draw_block>
	draw_block(x_offset - 50 , 194 + 52 + block_size - 9*block_size, LCD_COLOR_MAGENTA);
 8001d98:	887b      	ldrh	r3, [r7, #2]
 8001d9a:	3b32      	subs	r3, #50	@ 0x32
 8001d9c:	b298      	uxth	r0, r3
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	461a      	mov	r2, r3
 8001da2:	0352      	lsls	r2, r2, #13
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	33f6      	adds	r3, #246	@ 0xf6
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001db2:	4619      	mov	r1, r3
 8001db4:	f7ff fe3e 	bl	8001a34 <draw_block>
	draw_block(x_offset - 50 + block_size, 194 + 52 + block_size - 9*block_size, LCD_COLOR_MAGENTA);
 8001db8:	887a      	ldrh	r2, [r7, #2]
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b32      	subs	r3, #50	@ 0x32
 8001dc2:	b298      	uxth	r0, r3
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	0352      	lsls	r2, r2, #13
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	33f6      	adds	r3, #246	@ 0xf6
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f7ff fe2b 	bl	8001a34 <draw_block>
}
 8001dde:	bf00      	nop
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <draw_tetromino>:

void draw_tetromino(block_t block)
{
 8001de6:	b084      	sub	sp, #16
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	f107 0c10 	add.w	ip, r7, #16
 8001df2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i < 4; i++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	e029      	b.n	8001e50 <draw_tetromino+0x6a>
	{
		for(int j = 0; j < 4; j++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	e020      	b.n	8001e44 <draw_tetromino+0x5e>
		{
			if(block.mat[i][j])
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	009a      	lsls	r2, r3, #2
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	4413      	add	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	3310      	adds	r3, #16
 8001e0e:	443b      	add	r3, r7
 8001e10:	889b      	ldrh	r3, [r3, #4]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d012      	beq.n	8001e3e <draw_tetromino+0x58>
			{
				draw_block(block.x[i], block.y[j], block.color);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3310      	adds	r3, #16
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	3310      	adds	r3, #16
 8001e20:	443b      	add	r3, r7
 8001e22:	889b      	ldrh	r3, [r3, #4]
 8001e24:	b298      	uxth	r0, r3
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	3314      	adds	r3, #20
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	3310      	adds	r3, #16
 8001e2e:	443b      	add	r3, r7
 8001e30:	889b      	ldrh	r3, [r3, #4]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	8a7a      	ldrh	r2, [r7, #18]
 8001e36:	b292      	uxth	r2, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f7ff fdfb 	bl	8001a34 <draw_block>
		for(int j = 0; j < 4; j++)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	3301      	adds	r3, #1
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	dddb      	ble.n	8001e02 <draw_tetromino+0x1c>
	for(int i = 0; i < 4; i++)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	ddd2      	ble.n	8001dfc <draw_tetromino+0x16>
			}
		}
	}
}
 8001e56:	bf00      	nop
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e62:	b004      	add	sp, #16
 8001e64:	4770      	bx	lr

08001e66 <clear_tetromino>:

void clear_tetromino(block_t block)
{
 8001e66:	b084      	sub	sp, #16
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	f107 0c10 	add.w	ip, r7, #16
 8001e72:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i < 4; i++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	e028      	b.n	8001ece <clear_tetromino+0x68>
	{
		for(int j = 0; j < 4; j++)
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	e01f      	b.n	8001ec2 <clear_tetromino+0x5c>
		{
			if(block.mat[i][j])
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	009a      	lsls	r2, r3, #2
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	4413      	add	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	3310      	adds	r3, #16
 8001e8e:	443b      	add	r3, r7
 8001e90:	889b      	ldrh	r3, [r3, #4]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d011      	beq.n	8001ebc <clear_tetromino+0x56>
			{
				draw_block(block.x[i], block.y[j], LCD_COLOR_BLACK);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	3310      	adds	r3, #16
 8001ea0:	443b      	add	r3, r7
 8001ea2:	889b      	ldrh	r3, [r3, #4]
 8001ea4:	b298      	uxth	r0, r3
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	3314      	adds	r3, #20
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	3310      	adds	r3, #16
 8001eae:	443b      	add	r3, r7
 8001eb0:	889b      	ldrh	r3, [r3, #4]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f7ff fdbc 	bl	8001a34 <draw_block>
		for(int j = 0; j < 4; j++)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	dddc      	ble.n	8001e82 <clear_tetromino+0x1c>
	for(int i = 0; i < 4; i++)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	ddd3      	ble.n	8001e7c <clear_tetromino+0x16>
			}
		}
	}
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ee0:	b004      	add	sp, #16
 8001ee2:	4770      	bx	lr

08001ee4 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08c      	sub	sp, #48	@ 0x30
 8001ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
 8001eee:	4b5a      	ldr	r3, [pc, #360]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	4a59      	ldr	r2, [pc, #356]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001ef4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ef8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001efa:	4b57      	ldr	r3, [pc, #348]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	4b53      	ldr	r3, [pc, #332]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	4a52      	ldr	r2, [pc, #328]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f16:	4b50      	ldr	r3, [pc, #320]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	4b4c      	ldr	r3, [pc, #304]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	4a4b      	ldr	r2, [pc, #300]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001f2c:	f043 0302 	orr.w	r3, r3, #2
 8001f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f32:	4b49      	ldr	r3, [pc, #292]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b45      	ldr	r3, [pc, #276]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	4a44      	ldr	r2, [pc, #272]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4e:	4b42      	ldr	r3, [pc, #264]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	4b3e      	ldr	r3, [pc, #248]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	4a3d      	ldr	r2, [pc, #244]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001f64:	f043 0308 	orr.w	r3, r3, #8
 8001f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	4b37      	ldr	r3, [pc, #220]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	4a36      	ldr	r2, [pc, #216]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001f80:	f043 0320 	orr.w	r3, r3, #32
 8001f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f86:	4b34      	ldr	r3, [pc, #208]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	f003 0320 	and.w	r3, r3, #32
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	4b30      	ldr	r3, [pc, #192]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a2f      	ldr	r2, [pc, #188]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001f9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b2d      	ldr	r3, [pc, #180]	@ (8002058 <LCD_GPIO_Init+0x174>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001fae:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001fb2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001fc0:	230e      	movs	r3, #14
 8001fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001fc4:	f107 031c 	add.w	r3, r7, #28
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4824      	ldr	r0, [pc, #144]	@ (800205c <LCD_GPIO_Init+0x178>)
 8001fcc:	f001 fe96 	bl	8003cfc <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001fd0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001fd4:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001fd6:	f107 031c 	add.w	r3, r7, #28
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4820      	ldr	r0, [pc, #128]	@ (8002060 <LCD_GPIO_Init+0x17c>)
 8001fde:	f001 fe8d 	bl	8003cfc <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001fe2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001fe6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	4619      	mov	r1, r3
 8001fee:	481d      	ldr	r0, [pc, #116]	@ (8002064 <LCD_GPIO_Init+0x180>)
 8001ff0:	f001 fe84 	bl	8003cfc <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001ff4:	2348      	movs	r3, #72	@ 0x48
 8001ff6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001ff8:	f107 031c 	add.w	r3, r7, #28
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	481a      	ldr	r0, [pc, #104]	@ (8002068 <LCD_GPIO_Init+0x184>)
 8002000:	f001 fe7c 	bl	8003cfc <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002004:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002008:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	4619      	mov	r1, r3
 8002010:	4816      	ldr	r0, [pc, #88]	@ (800206c <LCD_GPIO_Init+0x188>)
 8002012:	f001 fe73 	bl	8003cfc <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002016:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800201a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800201c:	f107 031c 	add.w	r3, r7, #28
 8002020:	4619      	mov	r1, r3
 8002022:	4813      	ldr	r0, [pc, #76]	@ (8002070 <LCD_GPIO_Init+0x18c>)
 8002024:	f001 fe6a 	bl	8003cfc <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002028:	2303      	movs	r3, #3
 800202a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800202c:	2309      	movs	r3, #9
 800202e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002030:	f107 031c 	add.w	r3, r7, #28
 8002034:	4619      	mov	r1, r3
 8002036:	480a      	ldr	r0, [pc, #40]	@ (8002060 <LCD_GPIO_Init+0x17c>)
 8002038:	f001 fe60 	bl	8003cfc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800203c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002040:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002042:	f107 031c 	add.w	r3, r7, #28
 8002046:	4619      	mov	r1, r3
 8002048:	4809      	ldr	r0, [pc, #36]	@ (8002070 <LCD_GPIO_Init+0x18c>)
 800204a:	f001 fe57 	bl	8003cfc <HAL_GPIO_Init>
}
 800204e:	bf00      	nop
 8002050:	3730      	adds	r7, #48	@ 0x30
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	40020000 	.word	0x40020000
 8002060:	40020400 	.word	0x40020400
 8002064:	40020800 	.word	0x40020800
 8002068:	40020c00 	.word	0x40020c00
 800206c:	40021400 	.word	0x40021400
 8002070:	40021800 	.word	0x40021800

08002074 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b090      	sub	sp, #64	@ 0x40
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8002082:	23f0      	movs	r3, #240	@ 0xf0
 8002084:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800208a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800208e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8002090:	2302      	movs	r3, #2
 8002092:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8002094:	23ff      	movs	r3, #255	@ 0xff
 8002096:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800209c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80020a2:	2305      	movs	r3, #5
 80020a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80020ac:	4b0f      	ldr	r3, [pc, #60]	@ (80020ec <LTCD_Layer_Init+0x78>)
 80020ae:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80020b0:	23f0      	movs	r3, #240	@ 0xf0
 80020b2:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80020b4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80020b8:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80020cc:	79fa      	ldrb	r2, [r7, #7]
 80020ce:	f107 030c 	add.w	r3, r7, #12
 80020d2:	4619      	mov	r1, r3
 80020d4:	4806      	ldr	r0, [pc, #24]	@ (80020f0 <LTCD_Layer_Init+0x7c>)
 80020d6:	f002 fb73 	bl	80047c0 <HAL_LTDC_ConfigLayer>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80020e0:	f000 f9a4 	bl	800242c <LCD_Error_Handler>
	}
}
 80020e4:	bf00      	nop
 80020e6:	3740      	adds	r7, #64	@ 0x40
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000114 	.word	0x20000114
 80020f0:	20000038 	.word	0x20000038

080020f4 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80020f8:	4b2a      	ldr	r3, [pc, #168]	@ (80021a4 <LTCD__Init+0xb0>)
 80020fa:	4a2b      	ldr	r2, [pc, #172]	@ (80021a8 <LTCD__Init+0xb4>)
 80020fc:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80020fe:	4b29      	ldr	r3, [pc, #164]	@ (80021a4 <LTCD__Init+0xb0>)
 8002100:	2209      	movs	r2, #9
 8002102:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8002104:	4b27      	ldr	r3, [pc, #156]	@ (80021a4 <LTCD__Init+0xb0>)
 8002106:	2201      	movs	r2, #1
 8002108:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800210a:	4b26      	ldr	r3, [pc, #152]	@ (80021a4 <LTCD__Init+0xb0>)
 800210c:	221d      	movs	r2, #29
 800210e:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8002110:	4b24      	ldr	r3, [pc, #144]	@ (80021a4 <LTCD__Init+0xb0>)
 8002112:	2203      	movs	r2, #3
 8002114:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8002116:	4b23      	ldr	r3, [pc, #140]	@ (80021a4 <LTCD__Init+0xb0>)
 8002118:	f240 120d 	movw	r2, #269	@ 0x10d
 800211c:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800211e:	4b21      	ldr	r3, [pc, #132]	@ (80021a4 <LTCD__Init+0xb0>)
 8002120:	f240 1243 	movw	r2, #323	@ 0x143
 8002124:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8002126:	4b1f      	ldr	r3, [pc, #124]	@ (80021a4 <LTCD__Init+0xb0>)
 8002128:	f240 1217 	movw	r2, #279	@ 0x117
 800212c:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800212e:	4b1d      	ldr	r3, [pc, #116]	@ (80021a4 <LTCD__Init+0xb0>)
 8002130:	f240 1247 	movw	r2, #327	@ 0x147
 8002134:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8002136:	4b1b      	ldr	r3, [pc, #108]	@ (80021a4 <LTCD__Init+0xb0>)
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800213e:	4b19      	ldr	r3, [pc, #100]	@ (80021a4 <LTCD__Init+0xb0>)
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8002146:	4b17      	ldr	r3, [pc, #92]	@ (80021a4 <LTCD__Init+0xb0>)
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800214e:	4b17      	ldr	r3, [pc, #92]	@ (80021ac <LTCD__Init+0xb8>)
 8002150:	2208      	movs	r2, #8
 8002152:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002154:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <LTCD__Init+0xb8>)
 8002156:	22c0      	movs	r2, #192	@ 0xc0
 8002158:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800215a:	4b14      	ldr	r3, [pc, #80]	@ (80021ac <LTCD__Init+0xb8>)
 800215c:	2204      	movs	r2, #4
 800215e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002160:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <LTCD__Init+0xb8>)
 8002162:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002166:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002168:	4810      	ldr	r0, [pc, #64]	@ (80021ac <LTCD__Init+0xb8>)
 800216a:	f003 f983 	bl	8005474 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800216e:	4b0d      	ldr	r3, [pc, #52]	@ (80021a4 <LTCD__Init+0xb0>)
 8002170:	2200      	movs	r2, #0
 8002172:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002174:	4b0b      	ldr	r3, [pc, #44]	@ (80021a4 <LTCD__Init+0xb0>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800217a:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <LTCD__Init+0xb0>)
 800217c:	2200      	movs	r2, #0
 800217e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002180:	4b08      	ldr	r3, [pc, #32]	@ (80021a4 <LTCD__Init+0xb0>)
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8002186:	f7ff fead 	bl	8001ee4 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800218a:	4806      	ldr	r0, [pc, #24]	@ (80021a4 <LTCD__Init+0xb0>)
 800218c:	f002 fa48 	bl	8004620 <HAL_LTDC_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8002196:	f000 f949 	bl	800242c <LCD_Error_Handler>
	 }

	ili9341_Init();
 800219a:	f000 fa84 	bl	80026a6 <ili9341_Init>
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000038 	.word	0x20000038
 80021a8:	40016800 	.word	0x40016800
 80021ac:	200000e0 	.word	0x200000e0

080021b0 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	80fb      	strh	r3, [r7, #6]
 80021ba:	460b      	mov	r3, r1
 80021bc:	80bb      	strh	r3, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80021c2:	88ba      	ldrh	r2, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	461a      	mov	r2, r3
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	4413      	add	r3, r2
 80021d2:	4905      	ldr	r1, [pc, #20]	@ (80021e8 <LCD_Draw_Pixel+0x38>)
 80021d4:	887a      	ldrh	r2, [r7, #2]
 80021d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000114 	.word	0x20000114

080021ec <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4604      	mov	r4, r0
 80021f4:	4608      	mov	r0, r1
 80021f6:	4611      	mov	r1, r2
 80021f8:	461a      	mov	r2, r3
 80021fa:	4623      	mov	r3, r4
 80021fc:	80fb      	strh	r3, [r7, #6]
 80021fe:	4603      	mov	r3, r0
 8002200:	80bb      	strh	r3, [r7, #4]
 8002202:	460b      	mov	r3, r1
 8002204:	807b      	strh	r3, [r7, #2]
 8002206:	4613      	mov	r3, r2
 8002208:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 800220a:	2300      	movs	r3, #0
 800220c:	81fb      	strh	r3, [r7, #14]
 800220e:	e00b      	b.n	8002228 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8002210:	89fa      	ldrh	r2, [r7, #14]
 8002212:	88bb      	ldrh	r3, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	b299      	uxth	r1, r3
 8002218:	883a      	ldrh	r2, [r7, #0]
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ffc7 	bl	80021b0 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8002222:	89fb      	ldrh	r3, [r7, #14]
 8002224:	3301      	adds	r3, #1
 8002226:	81fb      	strh	r3, [r7, #14]
 8002228:	89fa      	ldrh	r2, [r7, #14]
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	429a      	cmp	r2, r3
 800222e:	d3ef      	bcc.n	8002210 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8002230:	bf00      	nop
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	bd90      	pop	{r4, r7, pc}

0800223a <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 800223a:	b590      	push	{r4, r7, lr}
 800223c:	b085      	sub	sp, #20
 800223e:	af00      	add	r7, sp, #0
 8002240:	4604      	mov	r4, r0
 8002242:	4608      	mov	r0, r1
 8002244:	4611      	mov	r1, r2
 8002246:	461a      	mov	r2, r3
 8002248:	4623      	mov	r3, r4
 800224a:	80fb      	strh	r3, [r7, #6]
 800224c:	4603      	mov	r3, r0
 800224e:	80bb      	strh	r3, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
 8002254:	4613      	mov	r3, r2
 8002256:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8002258:	2300      	movs	r3, #0
 800225a:	81fb      	strh	r3, [r7, #14]
 800225c:	e00b      	b.n	8002276 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 800225e:	89fa      	ldrh	r2, [r7, #14]
 8002260:	88fb      	ldrh	r3, [r7, #6]
 8002262:	4413      	add	r3, r2
 8002264:	b29b      	uxth	r3, r3
 8002266:	883a      	ldrh	r2, [r7, #0]
 8002268:	88b9      	ldrh	r1, [r7, #4]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff ffa0 	bl	80021b0 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8002270:	89fb      	ldrh	r3, [r7, #14]
 8002272:	3301      	adds	r3, #1
 8002274:	81fb      	strh	r3, [r7, #14]
 8002276:	89fa      	ldrh	r2, [r7, #14]
 8002278:	887b      	ldrh	r3, [r7, #2]
 800227a:	429a      	cmp	r2, r3
 800227c:	d3ef      	bcc.n	800225e <LCD_Draw_Horizontal_Line+0x24>
  }
}
 800227e:	bf00      	nop
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	bd90      	pop	{r4, r7, pc}

08002288 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	460a      	mov	r2, r1
 8002292:	71fb      	strb	r3, [r7, #7]
 8002294:	4613      	mov	r3, r2
 8002296:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10e      	bne.n	80022bc <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	e007      	b.n	80022b4 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80022a4:	4908      	ldr	r1, [pc, #32]	@ (80022c8 <LCD_Clear+0x40>)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	88ba      	ldrh	r2, [r7, #4]
 80022aa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3301      	adds	r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80022ba:	d3f3      	bcc.n	80022a4 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	20000114 	.word	0x20000114

080022cc <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80022d6:	4a04      	ldr	r2, [pc, #16]	@ (80022e8 <LCD_SetTextColor+0x1c>)
 80022d8:	88fb      	ldrh	r3, [r7, #6]
 80022da:	8013      	strh	r3, [r2, #0]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	20000000 	.word	0x20000000

080022ec <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80022f4:	4a04      	ldr	r2, [pc, #16]	@ (8002308 <LCD_SetFont+0x1c>)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6013      	str	r3, [r2, #0]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000110 	.word	0x20000110

0800230c <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	603a      	str	r2, [r7, #0]
 8002316:	80fb      	strh	r3, [r7, #6]
 8002318:	460b      	mov	r3, r1
 800231a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	2300      	movs	r3, #0
 8002322:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	e04c      	b.n	80023c4 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	e03f      	b.n	80023b0 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	4413      	add	r3, r2
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	4619      	mov	r1, r3
 800233c:	4b27      	ldr	r3, [pc, #156]	@ (80023dc <LCD_Draw_Char+0xd0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	889b      	ldrh	r3, [r3, #4]
 8002342:	4a27      	ldr	r2, [pc, #156]	@ (80023e0 <LCD_Draw_Char+0xd4>)
 8002344:	fba2 2303 	umull	r2, r3, r2, r3
 8002348:	08db      	lsrs	r3, r3, #3
 800234a:	b29b      	uxth	r3, r3
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	2280      	movs	r2, #128	@ 0x80
 8002350:	409a      	lsls	r2, r3
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	fa42 f303 	asr.w	r3, r2, r3
 8002358:	400b      	ands	r3, r1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d104      	bne.n	8002368 <LCD_Draw_Char+0x5c>
 800235e:	4b1f      	ldr	r3, [pc, #124]	@ (80023dc <LCD_Draw_Char+0xd0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	889b      	ldrh	r3, [r3, #4]
 8002364:	2b0c      	cmp	r3, #12
 8002366:	d920      	bls.n	80023aa <LCD_Draw_Char+0x9e>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	4413      	add	r3, r2
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	fa42 f303 	asr.w	r3, r2, r3
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d104      	bne.n	800238c <LCD_Draw_Char+0x80>
 8002382:	4b16      	ldr	r3, [pc, #88]	@ (80023dc <LCD_Draw_Char+0xd0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	889b      	ldrh	r3, [r3, #4]
 8002388:	2b0c      	cmp	r3, #12
 800238a:	d80e      	bhi.n	80023aa <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	b29a      	uxth	r2, r3
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	4413      	add	r3, r2
 8002394:	b298      	uxth	r0, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	b29a      	uxth	r2, r3
 800239a:	88bb      	ldrh	r3, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	b29b      	uxth	r3, r3
 80023a0:	4a10      	ldr	r2, [pc, #64]	@ (80023e4 <LCD_Draw_Char+0xd8>)
 80023a2:	8812      	ldrh	r2, [r2, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	f7ff ff03 	bl	80021b0 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	3301      	adds	r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	4b0a      	ldr	r3, [pc, #40]	@ (80023dc <LCD_Draw_Char+0xd0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	889b      	ldrh	r3, [r3, #4]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d3b8      	bcc.n	8002330 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3301      	adds	r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <LCD_Draw_Char+0xd0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	88db      	ldrh	r3, [r3, #6]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d3ab      	bcc.n	800232a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000110 	.word	0x20000110
 80023e0:	aaaaaaab 	.word	0xaaaaaaab
 80023e4:	20000000 	.word	0x20000000

080023e8 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	80fb      	strh	r3, [r7, #6]
 80023f2:	460b      	mov	r3, r1
 80023f4:	80bb      	strh	r3, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	3b20      	subs	r3, #32
 80023fe:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8002400:	4b09      	ldr	r3, [pc, #36]	@ (8002428 <LCD_DisplayChar+0x40>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	4907      	ldr	r1, [pc, #28]	@ (8002428 <LCD_DisplayChar+0x40>)
 800240a:	6809      	ldr	r1, [r1, #0]
 800240c:	88c9      	ldrh	r1, [r1, #6]
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	441a      	add	r2, r3
 8002416:	88b9      	ldrh	r1, [r7, #4]
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff ff76 	bl	800230c <LCD_Draw_Char>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000110 	.word	0x20000110

0800242c <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002430:	b672      	cpsid	i
}
 8002432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <LCD_Error_Handler+0x8>

08002438 <game_init>:
 */
#include "game.h"
static block_t block;
static map_t map;
void game_init()
{
 8002438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800243a:	f5ad 7d29 	sub.w	sp, sp, #676	@ 0x2a4
 800243e:	af0a      	add	r7, sp, #40	@ 0x28
	//STMPE811_t touch_data = {0};

	//while(STMPE811_ReadTouch(touch_data) != STMPE811_State_Pressed)
	//{
		//map_draw();
		draw_shapes();
 8002440:	f7ff fb19 	bl	8001a76 <draw_shapes>
		start_screen();
 8002444:	f7fe f8e0 	bl	8000608 <start_screen>
	//}

	HAL_Delay(2000);
 8002448:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800244c:	f001 fb4c 	bl	8003ae8 <HAL_Delay>
	LCD_Clear(0,LCD_COLOR_BLACK);
 8002450:	2100      	movs	r1, #0
 8002452:	2000      	movs	r0, #0
 8002454:	f7ff ff18 	bl	8002288 <LCD_Clear>
	map_draw();
 8002458:	f7fe f855 	bl	8000506 <map_draw>
	//rng_init();
	block = block_create(I);
 800245c:	4d8c      	ldr	r5, [pc, #560]	@ (8002690 <game_init+0x258>)
 800245e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8002462:	2106      	movs	r1, #6
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe f9fd 	bl	8000864 <block_create>
 800246a:	f507 740e 	add.w	r4, r7, #568	@ 0x238
 800246e:	462e      	mov	r6, r5
 8002470:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002474:	4635      	mov	r5, r6
 8002476:	4623      	mov	r3, r4
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002482:	3410      	adds	r4, #16
 8002484:	3610      	adds	r6, #16
 8002486:	4564      	cmp	r4, ip
 8002488:	d1f4      	bne.n	8002474 <game_init+0x3c>
 800248a:	4633      	mov	r3, r6
 800248c:	4622      	mov	r2, r4
 800248e:	6810      	ldr	r0, [r2, #0]
 8002490:	6018      	str	r0, [r3, #0]
	draw_tetromino(block);
 8002492:	4e7f      	ldr	r6, [pc, #508]	@ (8002690 <game_init+0x258>)
 8002494:	466d      	mov	r5, sp
 8002496:	f106 0410 	add.w	r4, r6, #16
 800249a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800249c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800249e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024a2:	6823      	ldr	r3, [r4, #0]
 80024a4:	602b      	str	r3, [r5, #0]
 80024a6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80024aa:	f7ff fc9c 	bl	8001de6 <draw_tetromino>

	map = map_init();
 80024ae:	4c79      	ldr	r4, [pc, #484]	@ (8002694 <game_init+0x25c>)
 80024b0:	463b      	mov	r3, r7
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fd42 	bl	8000f3c <map_init>
 80024b8:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 80024bc:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80024c0:	4620      	mov	r0, r4
 80024c2:	4619      	mov	r1, r3
 80024c4:	f240 2336 	movw	r3, #566	@ 0x236
 80024c8:	461a      	mov	r2, r3
 80024ca:	f003 ffa1 	bl	8006410 <memcpy>
	//game_over(start_time);
	for(int i=0;i<5;i++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 80024d4:	e086      	b.n	80025e4 <game_init+0x1ac>
	{
		if(!rest(&block, &map))
 80024d6:	496f      	ldr	r1, [pc, #444]	@ (8002694 <game_init+0x25c>)
 80024d8:	486d      	ldr	r0, [pc, #436]	@ (8002690 <game_init+0x258>)
 80024da:	f7fe fda2 	bl	8001022 <rest>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d13d      	bne.n	8002560 <game_init+0x128>
		{
			HAL_Delay(500);
 80024e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80024e8:	f001 fafe 	bl	8003ae8 <HAL_Delay>
			clear_tetromino(block);
 80024ec:	4e68      	ldr	r6, [pc, #416]	@ (8002690 <game_init+0x258>)
 80024ee:	466d      	mov	r5, sp
 80024f0:	f106 0410 	add.w	r4, r6, #16
 80024f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024fc:	6823      	ldr	r3, [r4, #0]
 80024fe:	602b      	str	r3, [r5, #0]
 8002500:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002504:	f7ff fcaf 	bl	8001e66 <clear_tetromino>
			block = block_drop(&block);
 8002508:	4d61      	ldr	r5, [pc, #388]	@ (8002690 <game_init+0x258>)
 800250a:	463b      	mov	r3, r7
 800250c:	4960      	ldr	r1, [pc, #384]	@ (8002690 <game_init+0x258>)
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f944 	bl	800079c <block_drop>
 8002514:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8002518:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800251c:	461c      	mov	r4, r3
 800251e:	462e      	mov	r6, r5
 8002520:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002524:	4635      	mov	r5, r6
 8002526:	4623      	mov	r3, r4
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	6859      	ldr	r1, [r3, #4]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002532:	3410      	adds	r4, #16
 8002534:	3610      	adds	r6, #16
 8002536:	4564      	cmp	r4, ip
 8002538:	d1f4      	bne.n	8002524 <game_init+0xec>
 800253a:	4633      	mov	r3, r6
 800253c:	4622      	mov	r2, r4
 800253e:	6810      	ldr	r0, [r2, #0]
 8002540:	6018      	str	r0, [r3, #0]
			draw_tetromino(block);
 8002542:	4e53      	ldr	r6, [pc, #332]	@ (8002690 <game_init+0x258>)
 8002544:	466d      	mov	r5, sp
 8002546:	f106 0410 	add.w	r4, r6, #16
 800254a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	602b      	str	r3, [r5, #0]
 8002556:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800255a:	f7ff fc44 	bl	8001de6 <draw_tetromino>
 800255e:	e03c      	b.n	80025da <game_init+0x1a2>
		}
		else
		{
			map = map_update(&block, &map);
 8002560:	4c4c      	ldr	r4, [pc, #304]	@ (8002694 <game_init+0x25c>)
 8002562:	463b      	mov	r3, r7
 8002564:	4a4b      	ldr	r2, [pc, #300]	@ (8002694 <game_init+0x25c>)
 8002566:	494a      	ldr	r1, [pc, #296]	@ (8002690 <game_init+0x258>)
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe ff7d 	bl	8001468 <map_update>
 800256e:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8002572:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8002576:	4620      	mov	r0, r4
 8002578:	4619      	mov	r1, r3
 800257a:	f240 2336 	movw	r3, #566	@ 0x236
 800257e:	461a      	mov	r2, r3
 8002580:	f003 ff46 	bl	8006410 <memcpy>
			block = block_create(S);
 8002584:	4d42      	ldr	r5, [pc, #264]	@ (8002690 <game_init+0x258>)
 8002586:	463b      	mov	r3, r7
 8002588:	2103      	movs	r1, #3
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe f96a 	bl	8000864 <block_create>
 8002590:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8002594:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8002598:	461c      	mov	r4, r3
 800259a:	462e      	mov	r6, r5
 800259c:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80025a0:	4635      	mov	r5, r6
 80025a2:	4623      	mov	r3, r4
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	6859      	ldr	r1, [r3, #4]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ae:	3410      	adds	r4, #16
 80025b0:	3610      	adds	r6, #16
 80025b2:	4564      	cmp	r4, ip
 80025b4:	d1f4      	bne.n	80025a0 <game_init+0x168>
 80025b6:	4633      	mov	r3, r6
 80025b8:	4622      	mov	r2, r4
 80025ba:	6810      	ldr	r0, [r2, #0]
 80025bc:	6018      	str	r0, [r3, #0]
			draw_tetromino(block);
 80025be:	4e34      	ldr	r6, [pc, #208]	@ (8002690 <game_init+0x258>)
 80025c0:	466d      	mov	r5, sp
 80025c2:	f106 0410 	add.w	r4, r6, #16
 80025c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ce:	6823      	ldr	r3, [r4, #0]
 80025d0:	602b      	str	r3, [r5, #0]
 80025d2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80025d6:	f7ff fc06 	bl	8001de6 <draw_tetromino>
	for(int i=0;i<5;i++)
 80025da:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 80025de:	3301      	adds	r3, #1
 80025e0:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 80025e4:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	f77f af74 	ble.w	80024d6 <game_init+0x9e>
		}
	}
	for(int i=0;i<10;i++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 80025f4:	e041      	b.n	800267a <game_init+0x242>
	{
			HAL_Delay(500);
 80025f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80025fa:	f001 fa75 	bl	8003ae8 <HAL_Delay>
			clear_tetromino(block);
 80025fe:	4e24      	ldr	r6, [pc, #144]	@ (8002690 <game_init+0x258>)
 8002600:	466d      	mov	r5, sp
 8002602:	f106 0410 	add.w	r4, r6, #16
 8002606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800260a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800260c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	602b      	str	r3, [r5, #0]
 8002612:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002616:	f7ff fc26 	bl	8001e66 <clear_tetromino>
			block = block_rotate(&block);
 800261a:	4d1d      	ldr	r5, [pc, #116]	@ (8002690 <game_init+0x258>)
 800261c:	463b      	mov	r3, r7
 800261e:	491c      	ldr	r1, [pc, #112]	@ (8002690 <game_init+0x258>)
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff f86b 	bl	80016fc <block_rotate>
 8002626:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 800262a:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800262e:	461c      	mov	r4, r3
 8002630:	462e      	mov	r6, r5
 8002632:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002636:	4635      	mov	r5, r6
 8002638:	4623      	mov	r3, r4
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	6859      	ldr	r1, [r3, #4]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002644:	3410      	adds	r4, #16
 8002646:	3610      	adds	r6, #16
 8002648:	4564      	cmp	r4, ip
 800264a:	d1f4      	bne.n	8002636 <game_init+0x1fe>
 800264c:	4633      	mov	r3, r6
 800264e:	4622      	mov	r2, r4
 8002650:	6810      	ldr	r0, [r2, #0]
 8002652:	6018      	str	r0, [r3, #0]
			draw_tetromino(block);
 8002654:	4e0e      	ldr	r6, [pc, #56]	@ (8002690 <game_init+0x258>)
 8002656:	466d      	mov	r5, sp
 8002658:	f106 0410 	add.w	r4, r6, #16
 800265c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800265e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	602b      	str	r3, [r5, #0]
 8002668:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800266c:	f7ff fbbb 	bl	8001de6 <draw_tetromino>
	for(int i=0;i<10;i++)
 8002670:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8002674:	3301      	adds	r3, #1
 8002676:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 800267a:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 800267e:	2b09      	cmp	r3, #9
 8002680:	ddb9      	ble.n	80025f6 <game_init+0x1be>
	}
}
 8002682:	bf00      	nop
 8002684:	bf00      	nop
 8002686:	f507 771f 	add.w	r7, r7, #636	@ 0x27c
 800268a:	46bd      	mov	sp, r7
 800268c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800268e:	bf00      	nop
 8002690:	20025914 	.word	0x20025914
 8002694:	20025948 	.word	0x20025948

08002698 <I2C3_EV_IRQHandler>:
	uint32_t time = end_time - start_time;
	return time;
}

void I2C3_EV_IRQHandler()
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
	//disable IRQ
	//lower flag
	//stuff
	//enable IRQ
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80026aa:	f000 f9ff 	bl	8002aac <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80026ae:	20ca      	movs	r0, #202	@ 0xca
 80026b0:	f000 f943 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80026b4:	20c3      	movs	r0, #195	@ 0xc3
 80026b6:	f000 f94d 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80026ba:	2008      	movs	r0, #8
 80026bc:	f000 f94a 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80026c0:	2050      	movs	r0, #80	@ 0x50
 80026c2:	f000 f947 	bl	8002954 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80026c6:	20cf      	movs	r0, #207	@ 0xcf
 80026c8:	f000 f937 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80026cc:	2000      	movs	r0, #0
 80026ce:	f000 f941 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80026d2:	20c1      	movs	r0, #193	@ 0xc1
 80026d4:	f000 f93e 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80026d8:	2030      	movs	r0, #48	@ 0x30
 80026da:	f000 f93b 	bl	8002954 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80026de:	20ed      	movs	r0, #237	@ 0xed
 80026e0:	f000 f92b 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80026e4:	2064      	movs	r0, #100	@ 0x64
 80026e6:	f000 f935 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80026ea:	2003      	movs	r0, #3
 80026ec:	f000 f932 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80026f0:	2012      	movs	r0, #18
 80026f2:	f000 f92f 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80026f6:	2081      	movs	r0, #129	@ 0x81
 80026f8:	f000 f92c 	bl	8002954 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80026fc:	20e8      	movs	r0, #232	@ 0xe8
 80026fe:	f000 f91c 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8002702:	2085      	movs	r0, #133	@ 0x85
 8002704:	f000 f926 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002708:	2000      	movs	r0, #0
 800270a:	f000 f923 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800270e:	2078      	movs	r0, #120	@ 0x78
 8002710:	f000 f920 	bl	8002954 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8002714:	20cb      	movs	r0, #203	@ 0xcb
 8002716:	f000 f910 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800271a:	2039      	movs	r0, #57	@ 0x39
 800271c:	f000 f91a 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8002720:	202c      	movs	r0, #44	@ 0x2c
 8002722:	f000 f917 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002726:	2000      	movs	r0, #0
 8002728:	f000 f914 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800272c:	2034      	movs	r0, #52	@ 0x34
 800272e:	f000 f911 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8002732:	2002      	movs	r0, #2
 8002734:	f000 f90e 	bl	8002954 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8002738:	20f7      	movs	r0, #247	@ 0xf7
 800273a:	f000 f8fe 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 800273e:	2020      	movs	r0, #32
 8002740:	f000 f908 	bl	8002954 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8002744:	20ea      	movs	r0, #234	@ 0xea
 8002746:	f000 f8f8 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800274a:	2000      	movs	r0, #0
 800274c:	f000 f902 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002750:	2000      	movs	r0, #0
 8002752:	f000 f8ff 	bl	8002954 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8002756:	20b1      	movs	r0, #177	@ 0xb1
 8002758:	f000 f8ef 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800275c:	2000      	movs	r0, #0
 800275e:	f000 f8f9 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002762:	201b      	movs	r0, #27
 8002764:	f000 f8f6 	bl	8002954 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002768:	20b6      	movs	r0, #182	@ 0xb6
 800276a:	f000 f8e6 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800276e:	200a      	movs	r0, #10
 8002770:	f000 f8f0 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8002774:	20a2      	movs	r0, #162	@ 0xa2
 8002776:	f000 f8ed 	bl	8002954 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800277a:	20c0      	movs	r0, #192	@ 0xc0
 800277c:	f000 f8dd 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8002780:	2010      	movs	r0, #16
 8002782:	f000 f8e7 	bl	8002954 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8002786:	20c1      	movs	r0, #193	@ 0xc1
 8002788:	f000 f8d7 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800278c:	2010      	movs	r0, #16
 800278e:	f000 f8e1 	bl	8002954 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8002792:	20c5      	movs	r0, #197	@ 0xc5
 8002794:	f000 f8d1 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8002798:	2045      	movs	r0, #69	@ 0x45
 800279a:	f000 f8db 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 800279e:	2015      	movs	r0, #21
 80027a0:	f000 f8d8 	bl	8002954 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80027a4:	20c7      	movs	r0, #199	@ 0xc7
 80027a6:	f000 f8c8 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80027aa:	2090      	movs	r0, #144	@ 0x90
 80027ac:	f000 f8d2 	bl	8002954 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80027b0:	2036      	movs	r0, #54	@ 0x36
 80027b2:	f000 f8c2 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80027b6:	20c8      	movs	r0, #200	@ 0xc8
 80027b8:	f000 f8cc 	bl	8002954 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80027bc:	20f2      	movs	r0, #242	@ 0xf2
 80027be:	f000 f8bc 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80027c2:	2000      	movs	r0, #0
 80027c4:	f000 f8c6 	bl	8002954 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80027c8:	20b0      	movs	r0, #176	@ 0xb0
 80027ca:	f000 f8b6 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80027ce:	20c2      	movs	r0, #194	@ 0xc2
 80027d0:	f000 f8c0 	bl	8002954 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80027d4:	20b6      	movs	r0, #182	@ 0xb6
 80027d6:	f000 f8b0 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80027da:	200a      	movs	r0, #10
 80027dc:	f000 f8ba 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80027e0:	20a7      	movs	r0, #167	@ 0xa7
 80027e2:	f000 f8b7 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80027e6:	2027      	movs	r0, #39	@ 0x27
 80027e8:	f000 f8b4 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80027ec:	2004      	movs	r0, #4
 80027ee:	f000 f8b1 	bl	8002954 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80027f2:	202a      	movs	r0, #42	@ 0x2a
 80027f4:	f000 f8a1 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80027f8:	2000      	movs	r0, #0
 80027fa:	f000 f8ab 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80027fe:	2000      	movs	r0, #0
 8002800:	f000 f8a8 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002804:	2000      	movs	r0, #0
 8002806:	f000 f8a5 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800280a:	20ef      	movs	r0, #239	@ 0xef
 800280c:	f000 f8a2 	bl	8002954 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8002810:	202b      	movs	r0, #43	@ 0x2b
 8002812:	f000 f892 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002816:	2000      	movs	r0, #0
 8002818:	f000 f89c 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800281c:	2000      	movs	r0, #0
 800281e:	f000 f899 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8002822:	2001      	movs	r0, #1
 8002824:	f000 f896 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8002828:	203f      	movs	r0, #63	@ 0x3f
 800282a:	f000 f893 	bl	8002954 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 800282e:	20f6      	movs	r0, #246	@ 0xf6
 8002830:	f000 f883 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002834:	2001      	movs	r0, #1
 8002836:	f000 f88d 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800283a:	2000      	movs	r0, #0
 800283c:	f000 f88a 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8002840:	2006      	movs	r0, #6
 8002842:	f000 f887 	bl	8002954 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8002846:	202c      	movs	r0, #44	@ 0x2c
 8002848:	f000 f877 	bl	800293a <ili9341_Write_Reg>
  LCD_Delay(200);
 800284c:	20c8      	movs	r0, #200	@ 0xc8
 800284e:	f000 f9e9 	bl	8002c24 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8002852:	2026      	movs	r0, #38	@ 0x26
 8002854:	f000 f871 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002858:	2001      	movs	r0, #1
 800285a:	f000 f87b 	bl	8002954 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 800285e:	20e0      	movs	r0, #224	@ 0xe0
 8002860:	f000 f86b 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8002864:	200f      	movs	r0, #15
 8002866:	f000 f875 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 800286a:	2029      	movs	r0, #41	@ 0x29
 800286c:	f000 f872 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8002870:	2024      	movs	r0, #36	@ 0x24
 8002872:	f000 f86f 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002876:	200c      	movs	r0, #12
 8002878:	f000 f86c 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800287c:	200e      	movs	r0, #14
 800287e:	f000 f869 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8002882:	2009      	movs	r0, #9
 8002884:	f000 f866 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8002888:	204e      	movs	r0, #78	@ 0x4e
 800288a:	f000 f863 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800288e:	2078      	movs	r0, #120	@ 0x78
 8002890:	f000 f860 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8002894:	203c      	movs	r0, #60	@ 0x3c
 8002896:	f000 f85d 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800289a:	2009      	movs	r0, #9
 800289c:	f000 f85a 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80028a0:	2013      	movs	r0, #19
 80028a2:	f000 f857 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80028a6:	2005      	movs	r0, #5
 80028a8:	f000 f854 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80028ac:	2017      	movs	r0, #23
 80028ae:	f000 f851 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80028b2:	2011      	movs	r0, #17
 80028b4:	f000 f84e 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80028b8:	2000      	movs	r0, #0
 80028ba:	f000 f84b 	bl	8002954 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80028be:	20e1      	movs	r0, #225	@ 0xe1
 80028c0:	f000 f83b 	bl	800293a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80028c4:	2000      	movs	r0, #0
 80028c6:	f000 f845 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80028ca:	2016      	movs	r0, #22
 80028cc:	f000 f842 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80028d0:	201b      	movs	r0, #27
 80028d2:	f000 f83f 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80028d6:	2004      	movs	r0, #4
 80028d8:	f000 f83c 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80028dc:	2011      	movs	r0, #17
 80028de:	f000 f839 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80028e2:	2007      	movs	r0, #7
 80028e4:	f000 f836 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80028e8:	2031      	movs	r0, #49	@ 0x31
 80028ea:	f000 f833 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80028ee:	2033      	movs	r0, #51	@ 0x33
 80028f0:	f000 f830 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80028f4:	2042      	movs	r0, #66	@ 0x42
 80028f6:	f000 f82d 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80028fa:	2005      	movs	r0, #5
 80028fc:	f000 f82a 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002900:	200c      	movs	r0, #12
 8002902:	f000 f827 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002906:	200a      	movs	r0, #10
 8002908:	f000 f824 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800290c:	2028      	movs	r0, #40	@ 0x28
 800290e:	f000 f821 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002912:	202f      	movs	r0, #47	@ 0x2f
 8002914:	f000 f81e 	bl	8002954 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8002918:	200f      	movs	r0, #15
 800291a:	f000 f81b 	bl	8002954 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800291e:	2011      	movs	r0, #17
 8002920:	f000 f80b 	bl	800293a <ili9341_Write_Reg>
  LCD_Delay(200);
 8002924:	20c8      	movs	r0, #200	@ 0xc8
 8002926:	f000 f97d 	bl	8002c24 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800292a:	2029      	movs	r0, #41	@ 0x29
 800292c:	f000 f805 	bl	800293a <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8002930:	202c      	movs	r0, #44	@ 0x2c
 8002932:	f000 f802 	bl	800293a <ili9341_Write_Reg>
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}

0800293a <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	4603      	mov	r3, r0
 8002942:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	4618      	mov	r0, r3
 8002948:	f000 f94a 	bl	8002be0 <LCD_IO_WriteReg>
}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	4618      	mov	r0, r3
 8002962:	f000 f91b 	bl	8002b9c <LCD_IO_WriteData>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002974:	4819      	ldr	r0, [pc, #100]	@ (80029dc <SPI_Init+0x6c>)
 8002976:	f003 f95c 	bl	8005c32 <HAL_SPI_GetState>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d12b      	bne.n	80029d8 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8002980:	4b16      	ldr	r3, [pc, #88]	@ (80029dc <SPI_Init+0x6c>)
 8002982:	4a17      	ldr	r2, [pc, #92]	@ (80029e0 <SPI_Init+0x70>)
 8002984:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002986:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <SPI_Init+0x6c>)
 8002988:	2218      	movs	r2, #24
 800298a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800298c:	4b13      	ldr	r3, [pc, #76]	@ (80029dc <SPI_Init+0x6c>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002992:	4b12      	ldr	r3, [pc, #72]	@ (80029dc <SPI_Init+0x6c>)
 8002994:	2200      	movs	r2, #0
 8002996:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002998:	4b10      	ldr	r3, [pc, #64]	@ (80029dc <SPI_Init+0x6c>)
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800299e:	4b0f      	ldr	r3, [pc, #60]	@ (80029dc <SPI_Init+0x6c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80029a4:	4b0d      	ldr	r3, [pc, #52]	@ (80029dc <SPI_Init+0x6c>)
 80029a6:	2207      	movs	r2, #7
 80029a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80029aa:	4b0c      	ldr	r3, [pc, #48]	@ (80029dc <SPI_Init+0x6c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80029b0:	4b0a      	ldr	r3, [pc, #40]	@ (80029dc <SPI_Init+0x6c>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80029b6:	4b09      	ldr	r3, [pc, #36]	@ (80029dc <SPI_Init+0x6c>)
 80029b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029bc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80029be:	4b07      	ldr	r3, [pc, #28]	@ (80029dc <SPI_Init+0x6c>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80029c4:	4b05      	ldr	r3, [pc, #20]	@ (80029dc <SPI_Init+0x6c>)
 80029c6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80029ca:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80029cc:	4803      	ldr	r0, [pc, #12]	@ (80029dc <SPI_Init+0x6c>)
 80029ce:	f000 f833 	bl	8002a38 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80029d2:	4802      	ldr	r0, [pc, #8]	@ (80029dc <SPI_Init+0x6c>)
 80029d4:	f002 ff38 	bl	8005848 <HAL_SPI_Init>
  }
}
 80029d8:	bf00      	nop
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20025b80 	.word	0x20025b80
 80029e0:	40015000 	.word	0x40015000

080029e4 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80029f2:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <SPI_Write+0x34>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	1db9      	adds	r1, r7, #6
 80029f8:	2201      	movs	r2, #1
 80029fa:	4808      	ldr	r0, [pc, #32]	@ (8002a1c <SPI_Write+0x38>)
 80029fc:	f002 ffd5 	bl	80059aa <HAL_SPI_Transmit>
 8002a00:	4603      	mov	r3, r0
 8002a02:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8002a0a:	f000 f809 	bl	8002a20 <SPI_Error>
  }
}
 8002a0e:	bf00      	nop
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	2000000c 	.word	0x2000000c
 8002a1c:	20025b80 	.word	0x20025b80

08002a20 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002a24:	4803      	ldr	r0, [pc, #12]	@ (8002a34 <SPI_Error+0x14>)
 8002a26:	f002 ff98 	bl	800595a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8002a2a:	f7ff ffa1 	bl	8002970 <SPI_Init>
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20025b80 	.word	0x20025b80

08002a38 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	@ 0x28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	4b17      	ldr	r3, [pc, #92]	@ (8002aa4 <SPI_MspInit+0x6c>)
 8002a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a48:	4a16      	ldr	r2, [pc, #88]	@ (8002aa4 <SPI_MspInit+0x6c>)
 8002a4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a4e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a50:	4b14      	ldr	r3, [pc, #80]	@ (8002aa4 <SPI_MspInit+0x6c>)
 8002a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	4b10      	ldr	r3, [pc, #64]	@ (8002aa4 <SPI_MspInit+0x6c>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a64:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa4 <SPI_MspInit+0x6c>)
 8002a66:	f043 0320 	orr.w	r3, r3, #32
 8002a6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa4 <SPI_MspInit+0x6c>)
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8002a78:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002a82:	2302      	movs	r3, #2
 8002a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002a86:	2301      	movs	r3, #1
 8002a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8002a8a:	2305      	movs	r3, #5
 8002a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8002a8e:	f107 0314 	add.w	r3, r7, #20
 8002a92:	4619      	mov	r1, r3
 8002a94:	4804      	ldr	r0, [pc, #16]	@ (8002aa8 <SPI_MspInit+0x70>)
 8002a96:	f001 f931 	bl	8003cfc <HAL_GPIO_Init>
}
 8002a9a:	bf00      	nop
 8002a9c:	3728      	adds	r7, #40	@ 0x28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40021400 	.word	0x40021400

08002aac <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8002ab2:	4b36      	ldr	r3, [pc, #216]	@ (8002b8c <LCD_IO_Init+0xe0>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d164      	bne.n	8002b84 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8002aba:	4b34      	ldr	r3, [pc, #208]	@ (8002b8c <LCD_IO_Init+0xe0>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	4b32      	ldr	r3, [pc, #200]	@ (8002b90 <LCD_IO_Init+0xe4>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac8:	4a31      	ldr	r2, [pc, #196]	@ (8002b90 <LCD_IO_Init+0xe4>)
 8002aca:	f043 0308 	orr.w	r3, r3, #8
 8002ace:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8002b90 <LCD_IO_Init+0xe4>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002adc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ae0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002aea:	2302      	movs	r3, #2
 8002aec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002aee:	f107 030c 	add.w	r3, r7, #12
 8002af2:	4619      	mov	r1, r3
 8002af4:	4827      	ldr	r0, [pc, #156]	@ (8002b94 <LCD_IO_Init+0xe8>)
 8002af6:	f001 f901 	bl	8003cfc <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	607b      	str	r3, [r7, #4]
 8002afe:	4b24      	ldr	r3, [pc, #144]	@ (8002b90 <LCD_IO_Init+0xe4>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	4a23      	ldr	r2, [pc, #140]	@ (8002b90 <LCD_IO_Init+0xe4>)
 8002b04:	f043 0308 	orr.w	r3, r3, #8
 8002b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b0a:	4b21      	ldr	r3, [pc, #132]	@ (8002b90 <LCD_IO_Init+0xe4>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	607b      	str	r3, [r7, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002b16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002b24:	2302      	movs	r3, #2
 8002b26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002b28:	f107 030c 	add.w	r3, r7, #12
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4819      	ldr	r0, [pc, #100]	@ (8002b94 <LCD_IO_Init+0xe8>)
 8002b30:	f001 f8e4 	bl	8003cfc <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002b34:	2300      	movs	r3, #0
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	4b15      	ldr	r3, [pc, #84]	@ (8002b90 <LCD_IO_Init+0xe4>)
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3c:	4a14      	ldr	r2, [pc, #80]	@ (8002b90 <LCD_IO_Init+0xe4>)
 8002b3e:	f043 0304 	orr.w	r3, r3, #4
 8002b42:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b44:	4b12      	ldr	r3, [pc, #72]	@ (8002b90 <LCD_IO_Init+0xe4>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	603b      	str	r3, [r7, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002b50:	2304      	movs	r3, #4
 8002b52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002b54:	2301      	movs	r3, #1
 8002b56:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002b60:	f107 030c 	add.w	r3, r7, #12
 8002b64:	4619      	mov	r1, r3
 8002b66:	480c      	ldr	r0, [pc, #48]	@ (8002b98 <LCD_IO_Init+0xec>)
 8002b68:	f001 f8c8 	bl	8003cfc <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2104      	movs	r1, #4
 8002b70:	4809      	ldr	r0, [pc, #36]	@ (8002b98 <LCD_IO_Init+0xec>)
 8002b72:	f001 fb7b 	bl	800426c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002b76:	2201      	movs	r2, #1
 8002b78:	2104      	movs	r1, #4
 8002b7a:	4807      	ldr	r0, [pc, #28]	@ (8002b98 <LCD_IO_Init+0xec>)
 8002b7c:	f001 fb76 	bl	800426c <HAL_GPIO_WritePin>

    SPI_Init();
 8002b80:	f7ff fef6 	bl	8002970 <SPI_Init>
  }
}
 8002b84:	bf00      	nop
 8002b86:	3720      	adds	r7, #32
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20025bd8 	.word	0x20025bd8
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40020c00 	.word	0x40020c00
 8002b98:	40020800 	.word	0x40020800

08002b9c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002bac:	480a      	ldr	r0, [pc, #40]	@ (8002bd8 <LCD_IO_WriteData+0x3c>)
 8002bae:	f001 fb5d 	bl	800426c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2104      	movs	r1, #4
 8002bb6:	4809      	ldr	r0, [pc, #36]	@ (8002bdc <LCD_IO_WriteData+0x40>)
 8002bb8:	f001 fb58 	bl	800426c <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff10 	bl	80029e4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	2104      	movs	r1, #4
 8002bc8:	4804      	ldr	r0, [pc, #16]	@ (8002bdc <LCD_IO_WriteData+0x40>)
 8002bca:	f001 fb4f 	bl	800426c <HAL_GPIO_WritePin>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40020c00 	.word	0x40020c00
 8002bdc:	40020800 	.word	0x40020800

08002be0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002bea:	2200      	movs	r2, #0
 8002bec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002bf0:	480a      	ldr	r0, [pc, #40]	@ (8002c1c <LCD_IO_WriteReg+0x3c>)
 8002bf2:	f001 fb3b 	bl	800426c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2104      	movs	r1, #4
 8002bfa:	4809      	ldr	r0, [pc, #36]	@ (8002c20 <LCD_IO_WriteReg+0x40>)
 8002bfc:	f001 fb36 	bl	800426c <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff feed 	bl	80029e4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	2104      	movs	r1, #4
 8002c0e:	4804      	ldr	r0, [pc, #16]	@ (8002c20 <LCD_IO_WriteReg+0x40>)
 8002c10:	f001 fb2c 	bl	800426c <HAL_GPIO_WritePin>
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40020c00 	.word	0x40020c00
 8002c20:	40020800 	.word	0x40020800

08002c24 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 ff5b 	bl	8003ae8 <HAL_Delay>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c3e:	f000 fee1 	bl	8003a04 <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  //SystemClock_Config();
  SystemClockOverride();
 8002c42:	f000 fb9d 	bl	8003380 <SystemClockOverride>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c46:	f000 f9ed 	bl	8003024 <MX_GPIO_Init>
  MX_I2C3_Init();
 8002c4a:	f000 f815 	bl	8002c78 <MX_I2C3_Init>
  MX_LTDC_Init();
 8002c4e:	f000 f853 	bl	8002cf8 <MX_LTDC_Init>
  MX_SPI5_Init();
 8002c52:	f000 f917 	bl	8002e84 <MX_SPI5_Init>
  MX_RNG_Init();
 8002c56:	f000 f901 	bl	8002e5c <MX_RNG_Init>
  MX_TIM2_Init();
 8002c5a:	f000 f949 	bl	8002ef0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002c5e:	f000 f993 	bl	8002f88 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit();
 8002c62:	f7fd fc3b 	bl	80004dc <ApplicationInit>
  Application_game_inst();
 8002c66:	f7fd fc48 	bl	80004fa <Application_game_inst>
  HAL_Delay(5000);
 8002c6a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002c6e:	f000 ff3b 	bl	8003ae8 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c72:	bf00      	nop
 8002c74:	e7fd      	b.n	8002c72 <main+0x38>
	...

08002c78 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cec <MX_I2C3_Init+0x74>)
 8002c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002cf0 <MX_I2C3_Init+0x78>)
 8002c80:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002c82:	4b1a      	ldr	r3, [pc, #104]	@ (8002cec <MX_I2C3_Init+0x74>)
 8002c84:	4a1b      	ldr	r2, [pc, #108]	@ (8002cf4 <MX_I2C3_Init+0x7c>)
 8002c86:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c88:	4b18      	ldr	r3, [pc, #96]	@ (8002cec <MX_I2C3_Init+0x74>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002c8e:	4b17      	ldr	r3, [pc, #92]	@ (8002cec <MX_I2C3_Init+0x74>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c94:	4b15      	ldr	r3, [pc, #84]	@ (8002cec <MX_I2C3_Init+0x74>)
 8002c96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c9a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c9c:	4b13      	ldr	r3, [pc, #76]	@ (8002cec <MX_I2C3_Init+0x74>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002ca2:	4b12      	ldr	r3, [pc, #72]	@ (8002cec <MX_I2C3_Init+0x74>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ca8:	4b10      	ldr	r3, [pc, #64]	@ (8002cec <MX_I2C3_Init+0x74>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cae:	4b0f      	ldr	r3, [pc, #60]	@ (8002cec <MX_I2C3_Init+0x74>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002cb4:	480d      	ldr	r0, [pc, #52]	@ (8002cec <MX_I2C3_Init+0x74>)
 8002cb6:	f001 faf3 	bl	80042a0 <HAL_I2C_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002cc0:	f000 fbb0 	bl	8003424 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4809      	ldr	r0, [pc, #36]	@ (8002cec <MX_I2C3_Init+0x74>)
 8002cc8:	f001 fc2e 	bl	8004528 <HAL_I2CEx_ConfigAnalogFilter>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002cd2:	f000 fba7 	bl	8003424 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4804      	ldr	r0, [pc, #16]	@ (8002cec <MX_I2C3_Init+0x74>)
 8002cda:	f001 fc61 	bl	80045a0 <HAL_I2CEx_ConfigDigitalFilter>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002ce4:	f000 fb9e 	bl	8003424 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20025bdc 	.word	0x20025bdc
 8002cf0:	40005c00 	.word	0x40005c00
 8002cf4:	000186a0 	.word	0x000186a0

08002cf8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b09a      	sub	sp, #104	@ 0x68
 8002cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002cfe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d02:	2234      	movs	r2, #52	@ 0x34
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f003 fb56 	bl	80063b8 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002d0c:	463b      	mov	r3, r7
 8002d0e:	2234      	movs	r2, #52	@ 0x34
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f003 fb50 	bl	80063b8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002d18:	4b4e      	ldr	r3, [pc, #312]	@ (8002e54 <MX_LTDC_Init+0x15c>)
 8002d1a:	4a4f      	ldr	r2, [pc, #316]	@ (8002e58 <MX_LTDC_Init+0x160>)
 8002d1c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002d1e:	4b4d      	ldr	r3, [pc, #308]	@ (8002e54 <MX_LTDC_Init+0x15c>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002d24:	4b4b      	ldr	r3, [pc, #300]	@ (8002e54 <MX_LTDC_Init+0x15c>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002e54 <MX_LTDC_Init+0x15c>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002d30:	4b48      	ldr	r3, [pc, #288]	@ (8002e54 <MX_LTDC_Init+0x15c>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8002d36:	4b47      	ldr	r3, [pc, #284]	@ (8002e54 <MX_LTDC_Init+0x15c>)
 8002d38:	2207      	movs	r2, #7
 8002d3a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002d3c:	4b45      	ldr	r3, [pc, #276]	@ (8002e54 <MX_LTDC_Init+0x15c>)
 8002d3e:	2203      	movs	r2, #3
 8002d40:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8002d42:	4b44      	ldr	r3, [pc, #272]	@ (8002e54 <MX_LTDC_Init+0x15c>)
 8002d44:	220e      	movs	r2, #14
 8002d46:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8002d48:	4b42      	ldr	r3, [pc, #264]	@ (8002e54 <MX_LTDC_Init+0x15c>)
 8002d4a:	2205      	movs	r2, #5
 8002d4c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8002d4e:	4b41      	ldr	r3, [pc, #260]	@ (8002e54 <MX_LTDC_Init+0x15c>)
 8002d50:	f240 228e 	movw	r2, #654	@ 0x28e
 8002d54:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8002d56:	4b3f      	ldr	r3, [pc, #252]	@ (8002e54 <MX_LTDC_Init+0x15c>)
 8002d58:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8002d5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8002d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e54 <MX_LTDC_Init+0x15c>)
 8002d60:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8002d64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8002d66:	4b3b      	ldr	r3, [pc, #236]	@ (8002e54 <MX_LTDC_Init+0x15c>)
 8002d68:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8002d6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002d6e:	4b39      	ldr	r3, [pc, #228]	@ (8002e54 <MX_LTDC_Init+0x15c>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002d76:	4b37      	ldr	r3, [pc, #220]	@ (8002e54 <MX_LTDC_Init+0x15c>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002d7e:	4b35      	ldr	r3, [pc, #212]	@ (8002e54 <MX_LTDC_Init+0x15c>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002d86:	4833      	ldr	r0, [pc, #204]	@ (8002e54 <MX_LTDC_Init+0x15c>)
 8002d88:	f001 fc4a 	bl	8004620 <HAL_LTDC_Init>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8002d92:	f000 fb47 	bl	8003424 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002da6:	2300      	movs	r3, #0
 8002da8:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002db2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002db6:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002db8:	2305      	movs	r3, #5
 8002dba:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002dda:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002dde:	2200      	movs	r2, #0
 8002de0:	4619      	mov	r1, r3
 8002de2:	481c      	ldr	r0, [pc, #112]	@ (8002e54 <MX_LTDC_Init+0x15c>)
 8002de4:	f001 fcec 	bl	80047c0 <HAL_LTDC_ConfigLayer>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8002dee:	f000 fb19 	bl	8003424 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002e0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e12:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002e14:	2305      	movs	r3, #5
 8002e16:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002e36:	463b      	mov	r3, r7
 8002e38:	2201      	movs	r2, #1
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4805      	ldr	r0, [pc, #20]	@ (8002e54 <MX_LTDC_Init+0x15c>)
 8002e3e:	f001 fcbf 	bl	80047c0 <HAL_LTDC_ConfigLayer>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8002e48:	f000 faec 	bl	8003424 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002e4c:	bf00      	nop
 8002e4e:	3768      	adds	r7, #104	@ 0x68
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20025c30 	.word	0x20025c30
 8002e58:	40016800 	.word	0x40016800

08002e5c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002e60:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <MX_RNG_Init+0x20>)
 8002e62:	4a07      	ldr	r2, [pc, #28]	@ (8002e80 <MX_RNG_Init+0x24>)
 8002e64:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002e66:	4805      	ldr	r0, [pc, #20]	@ (8002e7c <MX_RNG_Init+0x20>)
 8002e68:	f002 fcc4 	bl	80057f4 <HAL_RNG_Init>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002e72:	f000 fad7 	bl	8003424 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20025cd8 	.word	0x20025cd8
 8002e80:	50060800 	.word	0x50060800

08002e84 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002e88:	4b17      	ldr	r3, [pc, #92]	@ (8002ee8 <MX_SPI5_Init+0x64>)
 8002e8a:	4a18      	ldr	r2, [pc, #96]	@ (8002eec <MX_SPI5_Init+0x68>)
 8002e8c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002e8e:	4b16      	ldr	r3, [pc, #88]	@ (8002ee8 <MX_SPI5_Init+0x64>)
 8002e90:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e94:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002e96:	4b14      	ldr	r3, [pc, #80]	@ (8002ee8 <MX_SPI5_Init+0x64>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ee8 <MX_SPI5_Init+0x64>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ea2:	4b11      	ldr	r3, [pc, #68]	@ (8002ee8 <MX_SPI5_Init+0x64>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee8 <MX_SPI5_Init+0x64>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002eae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee8 <MX_SPI5_Init+0x64>)
 8002eb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eb4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee8 <MX_SPI5_Init+0x64>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee8 <MX_SPI5_Init+0x64>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ec2:	4b09      	ldr	r3, [pc, #36]	@ (8002ee8 <MX_SPI5_Init+0x64>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ec8:	4b07      	ldr	r3, [pc, #28]	@ (8002ee8 <MX_SPI5_Init+0x64>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002ece:	4b06      	ldr	r3, [pc, #24]	@ (8002ee8 <MX_SPI5_Init+0x64>)
 8002ed0:	220a      	movs	r2, #10
 8002ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002ed4:	4804      	ldr	r0, [pc, #16]	@ (8002ee8 <MX_SPI5_Init+0x64>)
 8002ed6:	f002 fcb7 	bl	8005848 <HAL_SPI_Init>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002ee0:	f000 faa0 	bl	8003424 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002ee4:	bf00      	nop
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20025ce8 	.word	0x20025ce8
 8002eec:	40015000 	.word	0x40015000

08002ef0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ef6:	f107 0308 	add.w	r3, r7, #8
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	609a      	str	r2, [r3, #8]
 8002f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f04:	463b      	mov	r3, r7
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f84 <MX_TIM2_Init+0x94>)
 8002f0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002f14:	4b1b      	ldr	r3, [pc, #108]	@ (8002f84 <MX_TIM2_Init+0x94>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002f84 <MX_TIM2_Init+0x94>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002f20:	4b18      	ldr	r3, [pc, #96]	@ (8002f84 <MX_TIM2_Init+0x94>)
 8002f22:	f04f 32ff 	mov.w	r2, #4294967295
 8002f26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f28:	4b16      	ldr	r3, [pc, #88]	@ (8002f84 <MX_TIM2_Init+0x94>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f2e:	4b15      	ldr	r3, [pc, #84]	@ (8002f84 <MX_TIM2_Init+0x94>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f34:	4813      	ldr	r0, [pc, #76]	@ (8002f84 <MX_TIM2_Init+0x94>)
 8002f36:	f002 ff67 	bl	8005e08 <HAL_TIM_Base_Init>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002f40:	f000 fa70 	bl	8003424 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f4a:	f107 0308 	add.w	r3, r7, #8
 8002f4e:	4619      	mov	r1, r3
 8002f50:	480c      	ldr	r0, [pc, #48]	@ (8002f84 <MX_TIM2_Init+0x94>)
 8002f52:	f002 ffa8 	bl	8005ea6 <HAL_TIM_ConfigClockSource>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002f5c:	f000 fa62 	bl	8003424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f60:	2300      	movs	r3, #0
 8002f62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f68:	463b      	mov	r3, r7
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4805      	ldr	r0, [pc, #20]	@ (8002f84 <MX_TIM2_Init+0x94>)
 8002f6e:	f003 f9a7 	bl	80062c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002f78:	f000 fa54 	bl	8003424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f7c:	bf00      	nop
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20025d40 	.word	0x20025d40

08002f88 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f8e:	f107 0308 	add.w	r3, r7, #8
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	609a      	str	r2, [r3, #8]
 8002f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f9c:	463b      	mov	r3, r7
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800301c <MX_TIM5_Init+0x94>)
 8002fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8003020 <MX_TIM5_Init+0x98>)
 8002fa8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002faa:	4b1c      	ldr	r3, [pc, #112]	@ (800301c <MX_TIM5_Init+0x94>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800301c <MX_TIM5_Init+0x94>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002fb6:	4b19      	ldr	r3, [pc, #100]	@ (800301c <MX_TIM5_Init+0x94>)
 8002fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fbc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fbe:	4b17      	ldr	r3, [pc, #92]	@ (800301c <MX_TIM5_Init+0x94>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fc4:	4b15      	ldr	r3, [pc, #84]	@ (800301c <MX_TIM5_Init+0x94>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002fca:	4814      	ldr	r0, [pc, #80]	@ (800301c <MX_TIM5_Init+0x94>)
 8002fcc:	f002 ff1c 	bl	8005e08 <HAL_TIM_Base_Init>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002fd6:	f000 fa25 	bl	8003424 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002fe0:	f107 0308 	add.w	r3, r7, #8
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	480d      	ldr	r0, [pc, #52]	@ (800301c <MX_TIM5_Init+0x94>)
 8002fe8:	f002 ff5d 	bl	8005ea6 <HAL_TIM_ConfigClockSource>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002ff2:	f000 fa17 	bl	8003424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002ffe:	463b      	mov	r3, r7
 8003000:	4619      	mov	r1, r3
 8003002:	4806      	ldr	r0, [pc, #24]	@ (800301c <MX_TIM5_Init+0x94>)
 8003004:	f003 f95c 	bl	80062c0 <HAL_TIMEx_MasterConfigSynchronization>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800300e:	f000 fa09 	bl	8003424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003012:	bf00      	nop
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20025d88 	.word	0x20025d88
 8003020:	40000c00 	.word	0x40000c00

08003024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08e      	sub	sp, #56	@ 0x38
 8003028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	60da      	str	r2, [r3, #12]
 8003038:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	623b      	str	r3, [r7, #32]
 800303e:	4bb2      	ldr	r3, [pc, #712]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	4ab1      	ldr	r2, [pc, #708]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 8003044:	f043 0304 	orr.w	r3, r3, #4
 8003048:	6313      	str	r3, [r2, #48]	@ 0x30
 800304a:	4baf      	ldr	r3, [pc, #700]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	623b      	str	r3, [r7, #32]
 8003054:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	4bab      	ldr	r3, [pc, #684]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	4aaa      	ldr	r2, [pc, #680]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 8003060:	f043 0320 	orr.w	r3, r3, #32
 8003064:	6313      	str	r3, [r2, #48]	@ 0x30
 8003066:	4ba8      	ldr	r3, [pc, #672]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	61fb      	str	r3, [r7, #28]
 8003070:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	61bb      	str	r3, [r7, #24]
 8003076:	4ba4      	ldr	r3, [pc, #656]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	4aa3      	ldr	r2, [pc, #652]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 800307c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003080:	6313      	str	r3, [r2, #48]	@ 0x30
 8003082:	4ba1      	ldr	r3, [pc, #644]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800308a:	61bb      	str	r3, [r7, #24]
 800308c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	4b9d      	ldr	r3, [pc, #628]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003096:	4a9c      	ldr	r2, [pc, #624]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	6313      	str	r3, [r2, #48]	@ 0x30
 800309e:	4b9a      	ldr	r3, [pc, #616]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	4b96      	ldr	r3, [pc, #600]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b2:	4a95      	ldr	r2, [pc, #596]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 80030b4:	f043 0302 	orr.w	r3, r3, #2
 80030b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ba:	4b93      	ldr	r3, [pc, #588]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	4b8f      	ldr	r3, [pc, #572]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	4a8e      	ldr	r2, [pc, #568]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 80030d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030d6:	4b8c      	ldr	r3, [pc, #560]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	4b88      	ldr	r3, [pc, #544]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	4a87      	ldr	r2, [pc, #540]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 80030ec:	f043 0310 	orr.w	r3, r3, #16
 80030f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030f2:	4b85      	ldr	r3, [pc, #532]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	4b81      	ldr	r3, [pc, #516]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	4a80      	ldr	r2, [pc, #512]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 8003108:	f043 0308 	orr.w	r3, r3, #8
 800310c:	6313      	str	r3, [r2, #48]	@ 0x30
 800310e:	4b7e      	ldr	r3, [pc, #504]	@ (8003308 <MX_GPIO_Init+0x2e4>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	607b      	str	r3, [r7, #4]
 8003118:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800311a:	2200      	movs	r2, #0
 800311c:	2116      	movs	r1, #22
 800311e:	487b      	ldr	r0, [pc, #492]	@ (800330c <MX_GPIO_Init+0x2e8>)
 8003120:	f001 f8a4 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8003124:	2200      	movs	r2, #0
 8003126:	2180      	movs	r1, #128	@ 0x80
 8003128:	4879      	ldr	r0, [pc, #484]	@ (8003310 <MX_GPIO_Init+0x2ec>)
 800312a:	f001 f89f 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800312e:	2200      	movs	r2, #0
 8003130:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8003134:	4877      	ldr	r0, [pc, #476]	@ (8003314 <MX_GPIO_Init+0x2f0>)
 8003136:	f001 f899 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800313a:	2200      	movs	r2, #0
 800313c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8003140:	4875      	ldr	r0, [pc, #468]	@ (8003318 <MX_GPIO_Init+0x2f4>)
 8003142:	f001 f893 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8003146:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800314a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003154:	2303      	movs	r3, #3
 8003156:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003158:	230c      	movs	r3, #12
 800315a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800315c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003160:	4619      	mov	r1, r3
 8003162:	486e      	ldr	r0, [pc, #440]	@ (800331c <MX_GPIO_Init+0x2f8>)
 8003164:	f000 fdca 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8003168:	2301      	movs	r3, #1
 800316a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316c:	2302      	movs	r3, #2
 800316e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003174:	2303      	movs	r3, #3
 8003176:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003178:	230c      	movs	r3, #12
 800317a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800317c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003180:	4619      	mov	r1, r3
 8003182:	4862      	ldr	r0, [pc, #392]	@ (800330c <MX_GPIO_Init+0x2e8>)
 8003184:	f000 fdba 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8003188:	2316      	movs	r3, #22
 800318a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800318c:	2301      	movs	r3, #1
 800318e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	2300      	movs	r3, #0
 8003192:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003194:	2300      	movs	r3, #0
 8003196:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800319c:	4619      	mov	r1, r3
 800319e:	485b      	ldr	r0, [pc, #364]	@ (800330c <MX_GPIO_Init+0x2e8>)
 80031a0:	f000 fdac 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80031a4:	f248 0307 	movw	r3, #32775	@ 0x8007
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80031aa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80031ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031b8:	4619      	mov	r1, r3
 80031ba:	4855      	ldr	r0, [pc, #340]	@ (8003310 <MX_GPIO_Init+0x2ec>)
 80031bc:	f000 fd9e 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80031c0:	2380      	movs	r3, #128	@ 0x80
 80031c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c4:	2301      	movs	r3, #1
 80031c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031cc:	2300      	movs	r3, #0
 80031ce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80031d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031d4:	4619      	mov	r1, r3
 80031d6:	484e      	ldr	r0, [pc, #312]	@ (8003310 <MX_GPIO_Init+0x2ec>)
 80031d8:	f000 fd90 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80031dc:	2320      	movs	r3, #32
 80031de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80031e0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80031e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80031ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031ee:	4619      	mov	r1, r3
 80031f0:	4846      	ldr	r0, [pc, #280]	@ (800330c <MX_GPIO_Init+0x2e8>)
 80031f2:	f000 fd83 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80031f6:	2304      	movs	r3, #4
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031fa:	2300      	movs	r3, #0
 80031fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003206:	4619      	mov	r1, r3
 8003208:	4845      	ldr	r0, [pc, #276]	@ (8003320 <MX_GPIO_Init+0x2fc>)
 800320a:	f000 fd77 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800320e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003212:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003214:	2302      	movs	r3, #2
 8003216:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003218:	2300      	movs	r3, #0
 800321a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800321c:	2303      	movs	r3, #3
 800321e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003220:	230c      	movs	r3, #12
 8003222:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003224:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003228:	4619      	mov	r1, r3
 800322a:	483b      	ldr	r0, [pc, #236]	@ (8003318 <MX_GPIO_Init+0x2f4>)
 800322c:	f000 fd66 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8003230:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003234:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003236:	2302      	movs	r3, #2
 8003238:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	2300      	movs	r3, #0
 800323c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800323e:	2303      	movs	r3, #3
 8003240:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003242:	230c      	movs	r3, #12
 8003244:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003246:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800324a:	4619      	mov	r1, r3
 800324c:	4835      	ldr	r0, [pc, #212]	@ (8003324 <MX_GPIO_Init+0x300>)
 800324e:	f000 fd55 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8003252:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8003256:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003258:	2302      	movs	r3, #2
 800325a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325c:	2300      	movs	r3, #0
 800325e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003260:	2300      	movs	r3, #0
 8003262:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8003264:	230c      	movs	r3, #12
 8003266:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003268:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800326c:	4619      	mov	r1, r3
 800326e:	482c      	ldr	r0, [pc, #176]	@ (8003320 <MX_GPIO_Init+0x2fc>)
 8003270:	f000 fd44 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8003274:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003278:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800327a:	2300      	movs	r3, #0
 800327c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8003282:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003286:	4619      	mov	r1, r3
 8003288:	4825      	ldr	r0, [pc, #148]	@ (8003320 <MX_GPIO_Init+0x2fc>)
 800328a:	f000 fd37 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800328e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003292:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003294:	2302      	movs	r3, #2
 8003296:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	2300      	movs	r3, #0
 800329a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329c:	2303      	movs	r3, #3
 800329e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032a0:	230c      	movs	r3, #12
 80032a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032a8:	4619      	mov	r1, r3
 80032aa:	481a      	ldr	r0, [pc, #104]	@ (8003314 <MX_GPIO_Init+0x2f0>)
 80032ac:	f000 fd26 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80032b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80032b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032b6:	2300      	movs	r3, #0
 80032b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80032be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032c2:	4619      	mov	r1, r3
 80032c4:	4813      	ldr	r0, [pc, #76]	@ (8003314 <MX_GPIO_Init+0x2f0>)
 80032c6:	f000 fd19 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80032ca:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80032ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d0:	2301      	movs	r3, #1
 80032d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d8:	2300      	movs	r3, #0
 80032da:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032e0:	4619      	mov	r1, r3
 80032e2:	480c      	ldr	r0, [pc, #48]	@ (8003314 <MX_GPIO_Init+0x2f0>)
 80032e4:	f000 fd0a 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80032e8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ee:	2302      	movs	r3, #2
 80032f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f6:	2303      	movs	r3, #3
 80032f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032fa:	2307      	movs	r3, #7
 80032fc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003302:	4619      	mov	r1, r3
 8003304:	e010      	b.n	8003328 <MX_GPIO_Init+0x304>
 8003306:	bf00      	nop
 8003308:	40023800 	.word	0x40023800
 800330c:	40020800 	.word	0x40020800
 8003310:	40020000 	.word	0x40020000
 8003314:	40020c00 	.word	0x40020c00
 8003318:	40021800 	.word	0x40021800
 800331c:	40021400 	.word	0x40021400
 8003320:	40020400 	.word	0x40020400
 8003324:	40021000 	.word	0x40021000
 8003328:	4812      	ldr	r0, [pc, #72]	@ (8003374 <MX_GPIO_Init+0x350>)
 800332a:	f000 fce7 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800332e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8003332:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003334:	2301      	movs	r3, #1
 8003336:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003338:	2300      	movs	r3, #0
 800333a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333c:	2300      	movs	r3, #0
 800333e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003340:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003344:	4619      	mov	r1, r3
 8003346:	480c      	ldr	r0, [pc, #48]	@ (8003378 <MX_GPIO_Init+0x354>)
 8003348:	f000 fcd8 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800334c:	2360      	movs	r3, #96	@ 0x60
 800334e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003350:	2302      	movs	r3, #2
 8003352:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003358:	2303      	movs	r3, #3
 800335a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800335c:	230c      	movs	r3, #12
 800335e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003360:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003364:	4619      	mov	r1, r3
 8003366:	4805      	ldr	r0, [pc, #20]	@ (800337c <MX_GPIO_Init+0x358>)
 8003368:	f000 fcc8 	bl	8003cfc <HAL_GPIO_Init>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800336c:	bf00      	nop
 800336e:	3738      	adds	r7, #56	@ 0x38
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40020000 	.word	0x40020000
 8003378:	40021800 	.word	0x40021800
 800337c:	40020400 	.word	0x40020400

08003380 <SystemClockOverride>:

/* USER CODE BEGIN 4 */
void SystemClockOverride(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b094      	sub	sp, #80	@ 0x50
 8003384:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	4b24      	ldr	r3, [pc, #144]	@ (800341c <SystemClockOverride+0x9c>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338e:	4a23      	ldr	r2, [pc, #140]	@ (800341c <SystemClockOverride+0x9c>)
 8003390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003394:	6413      	str	r3, [r2, #64]	@ 0x40
 8003396:	4b21      	ldr	r3, [pc, #132]	@ (800341c <SystemClockOverride+0x9c>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.
 80033a2:	2300      	movs	r3, #0
 80033a4:	607b      	str	r3, [r7, #4]
 80033a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003420 <SystemClockOverride+0xa0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003420 <SystemClockOverride+0xa0>)
 80033ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003420 <SystemClockOverride+0xa0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80033ba:	607b      	str	r3, [r7, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033be:	2301      	movs	r3, #1
 80033c0:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80033c6:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033c8:	2302      	movs	r3, #2
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80033d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 80033d2:	2308      	movs	r3, #8
 80033d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80033d6:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80033da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033dc:	2302      	movs	r3, #2
 80033de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80033e0:	2307      	movs	r3, #7
 80033e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80033e4:	f107 030c 	add.w	r3, r7, #12
 80033e8:	4618      	mov	r0, r3
 80033ea:	f001 fbbf 	bl	8004b6c <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80033ee:	230f      	movs	r3, #15
 80033f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033f2:	2302      	movs	r3, #2
 80033f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033f6:	2300      	movs	r3, #0
 80033f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80033fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80033fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003400:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003404:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8003406:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800340a:	2105      	movs	r1, #5
 800340c:	4618      	mov	r0, r3
 800340e:	f001 fe25 	bl	800505c <HAL_RCC_ClockConfig>
}
 8003412:	bf00      	nop
 8003414:	3750      	adds	r7, #80	@ 0x50
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800
 8003420:	40007000 	.word	0x40007000

08003424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003428:	b672      	cpsid	i
}
 800342a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <Error_Handler+0x8>

08003430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	4b10      	ldr	r3, [pc, #64]	@ (800347c <HAL_MspInit+0x4c>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343e:	4a0f      	ldr	r2, [pc, #60]	@ (800347c <HAL_MspInit+0x4c>)
 8003440:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003444:	6453      	str	r3, [r2, #68]	@ 0x44
 8003446:	4b0d      	ldr	r3, [pc, #52]	@ (800347c <HAL_MspInit+0x4c>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800344e:	607b      	str	r3, [r7, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	603b      	str	r3, [r7, #0]
 8003456:	4b09      	ldr	r3, [pc, #36]	@ (800347c <HAL_MspInit+0x4c>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	4a08      	ldr	r2, [pc, #32]	@ (800347c <HAL_MspInit+0x4c>)
 800345c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003460:	6413      	str	r3, [r2, #64]	@ 0x40
 8003462:	4b06      	ldr	r3, [pc, #24]	@ (800347c <HAL_MspInit+0x4c>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800346e:	2007      	movs	r0, #7
 8003470:	f000 fc10 	bl	8003c94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40023800 	.word	0x40023800

08003480 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08a      	sub	sp, #40	@ 0x28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003488:	f107 0314 	add.w	r3, r7, #20
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a29      	ldr	r2, [pc, #164]	@ (8003544 <HAL_I2C_MspInit+0xc4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d14b      	bne.n	800353a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	4b28      	ldr	r3, [pc, #160]	@ (8003548 <HAL_I2C_MspInit+0xc8>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034aa:	4a27      	ldr	r2, [pc, #156]	@ (8003548 <HAL_I2C_MspInit+0xc8>)
 80034ac:	f043 0304 	orr.w	r3, r3, #4
 80034b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034b2:	4b25      	ldr	r3, [pc, #148]	@ (8003548 <HAL_I2C_MspInit+0xc8>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	4b21      	ldr	r3, [pc, #132]	@ (8003548 <HAL_I2C_MspInit+0xc8>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	4a20      	ldr	r2, [pc, #128]	@ (8003548 <HAL_I2C_MspInit+0xc8>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003548 <HAL_I2C_MspInit+0xc8>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80034da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034e0:	2312      	movs	r3, #18
 80034e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e8:	2300      	movs	r3, #0
 80034ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80034ec:	2304      	movs	r3, #4
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80034f0:	f107 0314 	add.w	r3, r7, #20
 80034f4:	4619      	mov	r1, r3
 80034f6:	4815      	ldr	r0, [pc, #84]	@ (800354c <HAL_I2C_MspInit+0xcc>)
 80034f8:	f000 fc00 	bl	8003cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80034fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003502:	2312      	movs	r3, #18
 8003504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350a:	2300      	movs	r3, #0
 800350c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800350e:	2304      	movs	r3, #4
 8003510:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003512:	f107 0314 	add.w	r3, r7, #20
 8003516:	4619      	mov	r1, r3
 8003518:	480d      	ldr	r0, [pc, #52]	@ (8003550 <HAL_I2C_MspInit+0xd0>)
 800351a:	f000 fbef 	bl	8003cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	4b09      	ldr	r3, [pc, #36]	@ (8003548 <HAL_I2C_MspInit+0xc8>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	4a08      	ldr	r2, [pc, #32]	@ (8003548 <HAL_I2C_MspInit+0xc8>)
 8003528:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800352c:	6413      	str	r3, [r2, #64]	@ 0x40
 800352e:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <HAL_I2C_MspInit+0xc8>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800353a:	bf00      	nop
 800353c:	3728      	adds	r7, #40	@ 0x28
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40005c00 	.word	0x40005c00
 8003548:	40023800 	.word	0x40023800
 800354c:	40020800 	.word	0x40020800
 8003550:	40020000 	.word	0x40020000

08003554 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b09a      	sub	sp, #104	@ 0x68
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800356c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003570:	2230      	movs	r2, #48	@ 0x30
 8003572:	2100      	movs	r1, #0
 8003574:	4618      	mov	r0, r3
 8003576:	f002 ff1f 	bl	80063b8 <memset>
  if(hltdc->Instance==LTDC)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a81      	ldr	r2, [pc, #516]	@ (8003784 <HAL_LTDC_MspInit+0x230>)
 8003580:	4293      	cmp	r3, r2
 8003582:	f040 80fa 	bne.w	800377a <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003586:	2308      	movs	r3, #8
 8003588:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800358a:	2332      	movs	r3, #50	@ 0x32
 800358c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800358e:	2302      	movs	r3, #2
 8003590:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003592:	2300      	movs	r3, #0
 8003594:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003596:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800359a:	4618      	mov	r0, r3
 800359c:	f001 ff6a 	bl	8005474 <HAL_RCCEx_PeriphCLKConfig>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80035a6:	f7ff ff3d 	bl	8003424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	623b      	str	r3, [r7, #32]
 80035ae:	4b76      	ldr	r3, [pc, #472]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b2:	4a75      	ldr	r2, [pc, #468]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 80035b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80035b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80035ba:	4b73      	ldr	r3, [pc, #460]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035c2:	623b      	str	r3, [r7, #32]
 80035c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ce:	4a6e      	ldr	r2, [pc, #440]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 80035d0:	f043 0320 	orr.w	r3, r3, #32
 80035d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035d6:	4b6c      	ldr	r3, [pc, #432]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	4b68      	ldr	r3, [pc, #416]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ea:	4a67      	ldr	r2, [pc, #412]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035f2:	4b65      	ldr	r3, [pc, #404]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	4b61      	ldr	r3, [pc, #388]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003606:	4a60      	ldr	r2, [pc, #384]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 8003608:	f043 0302 	orr.w	r3, r3, #2
 800360c:	6313      	str	r3, [r2, #48]	@ 0x30
 800360e:	4b5e      	ldr	r3, [pc, #376]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	4b5a      	ldr	r3, [pc, #360]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	4a59      	ldr	r2, [pc, #356]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 8003624:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003628:	6313      	str	r3, [r2, #48]	@ 0x30
 800362a:	4b57      	ldr	r3, [pc, #348]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	4b53      	ldr	r3, [pc, #332]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363e:	4a52      	ldr	r2, [pc, #328]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 8003640:	f043 0304 	orr.w	r3, r3, #4
 8003644:	6313      	str	r3, [r2, #48]	@ 0x30
 8003646:	4b50      	ldr	r3, [pc, #320]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	4b4c      	ldr	r3, [pc, #304]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	4a4b      	ldr	r2, [pc, #300]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 800365c:	f043 0308 	orr.w	r3, r3, #8
 8003660:	6313      	str	r3, [r2, #48]	@ 0x30
 8003662:	4b49      	ldr	r3, [pc, #292]	@ (8003788 <HAL_LTDC_MspInit+0x234>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	60bb      	str	r3, [r7, #8]
 800366c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800366e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003672:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003674:	2302      	movs	r3, #2
 8003676:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003678:	2300      	movs	r3, #0
 800367a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367c:	2300      	movs	r3, #0
 800367e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003680:	230e      	movs	r3, #14
 8003682:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003684:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003688:	4619      	mov	r1, r3
 800368a:	4840      	ldr	r0, [pc, #256]	@ (800378c <HAL_LTDC_MspInit+0x238>)
 800368c:	f000 fb36 	bl	8003cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003690:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003694:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003696:	2302      	movs	r3, #2
 8003698:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369a:	2300      	movs	r3, #0
 800369c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369e:	2300      	movs	r3, #0
 80036a0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80036a2:	230e      	movs	r3, #14
 80036a4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80036aa:	4619      	mov	r1, r3
 80036ac:	4838      	ldr	r0, [pc, #224]	@ (8003790 <HAL_LTDC_MspInit+0x23c>)
 80036ae:	f000 fb25 	bl	8003cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80036b2:	2303      	movs	r3, #3
 80036b4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b6:	2302      	movs	r3, #2
 80036b8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036be:	2300      	movs	r3, #0
 80036c0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80036c2:	2309      	movs	r3, #9
 80036c4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80036ca:	4619      	mov	r1, r3
 80036cc:	4831      	ldr	r0, [pc, #196]	@ (8003794 <HAL_LTDC_MspInit+0x240>)
 80036ce:	f000 fb15 	bl	8003cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80036d2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80036d6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d8:	2302      	movs	r3, #2
 80036da:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e0:	2300      	movs	r3, #0
 80036e2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80036e4:	230e      	movs	r3, #14
 80036e6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80036ec:	4619      	mov	r1, r3
 80036ee:	4829      	ldr	r0, [pc, #164]	@ (8003794 <HAL_LTDC_MspInit+0x240>)
 80036f0:	f000 fb04 	bl	8003cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80036f4:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80036f8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fa:	2302      	movs	r3, #2
 80036fc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003702:	2300      	movs	r3, #0
 8003704:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003706:	230e      	movs	r3, #14
 8003708:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800370a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800370e:	4619      	mov	r1, r3
 8003710:	4821      	ldr	r0, [pc, #132]	@ (8003798 <HAL_LTDC_MspInit+0x244>)
 8003712:	f000 faf3 	bl	8003cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003716:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800371a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371c:	2302      	movs	r3, #2
 800371e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003720:	2300      	movs	r3, #0
 8003722:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003724:	2300      	movs	r3, #0
 8003726:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003728:	230e      	movs	r3, #14
 800372a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800372c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003730:	4619      	mov	r1, r3
 8003732:	481a      	ldr	r0, [pc, #104]	@ (800379c <HAL_LTDC_MspInit+0x248>)
 8003734:	f000 fae2 	bl	8003cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003738:	2348      	movs	r3, #72	@ 0x48
 800373a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373c:	2302      	movs	r3, #2
 800373e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003740:	2300      	movs	r3, #0
 8003742:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003744:	2300      	movs	r3, #0
 8003746:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003748:	230e      	movs	r3, #14
 800374a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800374c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003750:	4619      	mov	r1, r3
 8003752:	4813      	ldr	r0, [pc, #76]	@ (80037a0 <HAL_LTDC_MspInit+0x24c>)
 8003754:	f000 fad2 	bl	8003cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003758:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800375c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375e:	2302      	movs	r3, #2
 8003760:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	2300      	movs	r3, #0
 8003764:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003766:	2300      	movs	r3, #0
 8003768:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800376a:	2309      	movs	r3, #9
 800376c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800376e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003772:	4619      	mov	r1, r3
 8003774:	4808      	ldr	r0, [pc, #32]	@ (8003798 <HAL_LTDC_MspInit+0x244>)
 8003776:	f000 fac1 	bl	8003cfc <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800377a:	bf00      	nop
 800377c:	3768      	adds	r7, #104	@ 0x68
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40016800 	.word	0x40016800
 8003788:	40023800 	.word	0x40023800
 800378c:	40021400 	.word	0x40021400
 8003790:	40020000 	.word	0x40020000
 8003794:	40020400 	.word	0x40020400
 8003798:	40021800 	.word	0x40021800
 800379c:	40020800 	.word	0x40020800
 80037a0:	40020c00 	.word	0x40020c00

080037a4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0b      	ldr	r2, [pc, #44]	@ (80037e0 <HAL_RNG_MspInit+0x3c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d10d      	bne.n	80037d2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	4b0a      	ldr	r3, [pc, #40]	@ (80037e4 <HAL_RNG_MspInit+0x40>)
 80037bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037be:	4a09      	ldr	r2, [pc, #36]	@ (80037e4 <HAL_RNG_MspInit+0x40>)
 80037c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037c4:	6353      	str	r3, [r2, #52]	@ 0x34
 80037c6:	4b07      	ldr	r3, [pc, #28]	@ (80037e4 <HAL_RNG_MspInit+0x40>)
 80037c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80037d2:	bf00      	nop
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	50060800 	.word	0x50060800
 80037e4:	40023800 	.word	0x40023800

080037e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08a      	sub	sp, #40	@ 0x28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f0:	f107 0314 	add.w	r3, r7, #20
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	605a      	str	r2, [r3, #4]
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	60da      	str	r2, [r3, #12]
 80037fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a19      	ldr	r2, [pc, #100]	@ (800386c <HAL_SPI_MspInit+0x84>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d12c      	bne.n	8003864 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	4b18      	ldr	r3, [pc, #96]	@ (8003870 <HAL_SPI_MspInit+0x88>)
 8003810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003812:	4a17      	ldr	r2, [pc, #92]	@ (8003870 <HAL_SPI_MspInit+0x88>)
 8003814:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003818:	6453      	str	r3, [r2, #68]	@ 0x44
 800381a:	4b15      	ldr	r3, [pc, #84]	@ (8003870 <HAL_SPI_MspInit+0x88>)
 800381c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003822:	613b      	str	r3, [r7, #16]
 8003824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	4b11      	ldr	r3, [pc, #68]	@ (8003870 <HAL_SPI_MspInit+0x88>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382e:	4a10      	ldr	r2, [pc, #64]	@ (8003870 <HAL_SPI_MspInit+0x88>)
 8003830:	f043 0320 	orr.w	r3, r3, #32
 8003834:	6313      	str	r3, [r2, #48]	@ 0x30
 8003836:	4b0e      	ldr	r3, [pc, #56]	@ (8003870 <HAL_SPI_MspInit+0x88>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003842:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003848:	2302      	movs	r3, #2
 800384a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384c:	2300      	movs	r3, #0
 800384e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003850:	2300      	movs	r3, #0
 8003852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003854:	2305      	movs	r3, #5
 8003856:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003858:	f107 0314 	add.w	r3, r7, #20
 800385c:	4619      	mov	r1, r3
 800385e:	4805      	ldr	r0, [pc, #20]	@ (8003874 <HAL_SPI_MspInit+0x8c>)
 8003860:	f000 fa4c 	bl	8003cfc <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8003864:	bf00      	nop
 8003866:	3728      	adds	r7, #40	@ 0x28
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40015000 	.word	0x40015000
 8003870:	40023800 	.word	0x40023800
 8003874:	40021400 	.word	0x40021400

08003878 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a08      	ldr	r2, [pc, #32]	@ (80038a8 <HAL_SPI_MspDeInit+0x30>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d10a      	bne.n	80038a0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800388a:	4b08      	ldr	r3, [pc, #32]	@ (80038ac <HAL_SPI_MspDeInit+0x34>)
 800388c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388e:	4a07      	ldr	r2, [pc, #28]	@ (80038ac <HAL_SPI_MspDeInit+0x34>)
 8003890:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003894:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003896:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800389a:	4805      	ldr	r0, [pc, #20]	@ (80038b0 <HAL_SPI_MspDeInit+0x38>)
 800389c:	f000 fbda 	bl	8004054 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40015000 	.word	0x40015000
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40021400 	.word	0x40021400

080038b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c4:	d10e      	bne.n	80038e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	4b13      	ldr	r3, [pc, #76]	@ (8003918 <HAL_TIM_Base_MspInit+0x64>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	4a12      	ldr	r2, [pc, #72]	@ (8003918 <HAL_TIM_Base_MspInit+0x64>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038d6:	4b10      	ldr	r3, [pc, #64]	@ (8003918 <HAL_TIM_Base_MspInit+0x64>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80038e2:	e012      	b.n	800390a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a0c      	ldr	r2, [pc, #48]	@ (800391c <HAL_TIM_Base_MspInit+0x68>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d10d      	bne.n	800390a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80038ee:	2300      	movs	r3, #0
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	4b09      	ldr	r3, [pc, #36]	@ (8003918 <HAL_TIM_Base_MspInit+0x64>)
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	4a08      	ldr	r2, [pc, #32]	@ (8003918 <HAL_TIM_Base_MspInit+0x64>)
 80038f8:	f043 0308 	orr.w	r3, r3, #8
 80038fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80038fe:	4b06      	ldr	r3, [pc, #24]	@ (8003918 <HAL_TIM_Base_MspInit+0x64>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]
}
 800390a:	bf00      	nop
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40023800 	.word	0x40023800
 800391c:	40000c00 	.word	0x40000c00

08003920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003924:	bf00      	nop
 8003926:	e7fd      	b.n	8003924 <NMI_Handler+0x4>

08003928 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800392c:	bf00      	nop
 800392e:	e7fd      	b.n	800392c <HardFault_Handler+0x4>

08003930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003934:	bf00      	nop
 8003936:	e7fd      	b.n	8003934 <MemManage_Handler+0x4>

08003938 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800393c:	bf00      	nop
 800393e:	e7fd      	b.n	800393c <BusFault_Handler+0x4>

08003940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003944:	bf00      	nop
 8003946:	e7fd      	b.n	8003944 <UsageFault_Handler+0x4>

08003948 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800394c:	bf00      	nop
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003956:	b480      	push	{r7}
 8003958:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800395a:	bf00      	nop
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003976:	f000 f897 	bl	8003aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}

0800397e <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 800397e:	b480      	push	{r7}
 8003980:	af00      	add	r7, sp, #0
}
 8003982:	bf00      	nop
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003990:	4b06      	ldr	r3, [pc, #24]	@ (80039ac <SystemInit+0x20>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003996:	4a05      	ldr	r2, [pc, #20]	@ (80039ac <SystemInit+0x20>)
 8003998:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800399c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039a0:	bf00      	nop
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80039b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80039e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80039b4:	f7ff ffea 	bl	800398c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039b8:	480c      	ldr	r0, [pc, #48]	@ (80039ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80039ba:	490d      	ldr	r1, [pc, #52]	@ (80039f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80039bc:	4a0d      	ldr	r2, [pc, #52]	@ (80039f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80039be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039c0:	e002      	b.n	80039c8 <LoopCopyDataInit>

080039c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039c6:	3304      	adds	r3, #4

080039c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039cc:	d3f9      	bcc.n	80039c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039ce:	4a0a      	ldr	r2, [pc, #40]	@ (80039f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039d0:	4c0a      	ldr	r4, [pc, #40]	@ (80039fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80039d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039d4:	e001      	b.n	80039da <LoopFillZerobss>

080039d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039d8:	3204      	adds	r2, #4

080039da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039dc:	d3fb      	bcc.n	80039d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80039de:	f002 fcf3 	bl	80063c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039e2:	f7ff f92a 	bl	8002c3a <main>
  bx  lr    
 80039e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80039e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80039ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039f0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80039f4:	08007728 	.word	0x08007728
  ldr r2, =_sbss
 80039f8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80039fc:	20025dd4 	.word	0x20025dd4

08003a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a00:	e7fe      	b.n	8003a00 <ADC_IRQHandler>
	...

08003a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a08:	4b0e      	ldr	r3, [pc, #56]	@ (8003a44 <HAL_Init+0x40>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a44 <HAL_Init+0x40>)
 8003a0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a14:	4b0b      	ldr	r3, [pc, #44]	@ (8003a44 <HAL_Init+0x40>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a0a      	ldr	r2, [pc, #40]	@ (8003a44 <HAL_Init+0x40>)
 8003a1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a20:	4b08      	ldr	r3, [pc, #32]	@ (8003a44 <HAL_Init+0x40>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a07      	ldr	r2, [pc, #28]	@ (8003a44 <HAL_Init+0x40>)
 8003a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a2c:	2003      	movs	r0, #3
 8003a2e:	f000 f931 	bl	8003c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a32:	2000      	movs	r0, #0
 8003a34:	f000 f808 	bl	8003a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a38:	f7ff fcfa 	bl	8003430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40023c00 	.word	0x40023c00

08003a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a50:	4b12      	ldr	r3, [pc, #72]	@ (8003a9c <HAL_InitTick+0x54>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4b12      	ldr	r3, [pc, #72]	@ (8003aa0 <HAL_InitTick+0x58>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 f93b 	bl	8003ce2 <HAL_SYSTICK_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e00e      	b.n	8003a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b0f      	cmp	r3, #15
 8003a7a:	d80a      	bhi.n	8003a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295
 8003a84:	f000 f911 	bl	8003caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a88:	4a06      	ldr	r2, [pc, #24]	@ (8003aa4 <HAL_InitTick+0x5c>)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e000      	b.n	8003a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000010 	.word	0x20000010
 8003aa0:	20000018 	.word	0x20000018
 8003aa4:	20000014 	.word	0x20000014

08003aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003aac:	4b06      	ldr	r3, [pc, #24]	@ (8003ac8 <HAL_IncTick+0x20>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4b06      	ldr	r3, [pc, #24]	@ (8003acc <HAL_IncTick+0x24>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	4a04      	ldr	r2, [pc, #16]	@ (8003acc <HAL_IncTick+0x24>)
 8003aba:	6013      	str	r3, [r2, #0]
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20000018 	.word	0x20000018
 8003acc:	20025dd0 	.word	0x20025dd0

08003ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ad4:	4b03      	ldr	r3, [pc, #12]	@ (8003ae4 <HAL_GetTick+0x14>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	20025dd0 	.word	0x20025dd0

08003ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003af0:	f7ff ffee 	bl	8003ad0 <HAL_GetTick>
 8003af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d005      	beq.n	8003b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b02:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <HAL_Delay+0x44>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b0e:	bf00      	nop
 8003b10:	f7ff ffde 	bl	8003ad0 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d8f7      	bhi.n	8003b10 <HAL_Delay+0x28>
  {
  }
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000018 	.word	0x20000018

08003b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b40:	4b0c      	ldr	r3, [pc, #48]	@ (8003b74 <__NVIC_SetPriorityGrouping+0x44>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b62:	4a04      	ldr	r2, [pc, #16]	@ (8003b74 <__NVIC_SetPriorityGrouping+0x44>)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	60d3      	str	r3, [r2, #12]
}
 8003b68:	bf00      	nop
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	e000ed00 	.word	0xe000ed00

08003b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b7c:	4b04      	ldr	r3, [pc, #16]	@ (8003b90 <__NVIC_GetPriorityGrouping+0x18>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	0a1b      	lsrs	r3, r3, #8
 8003b82:	f003 0307 	and.w	r3, r3, #7
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	e000ed00 	.word	0xe000ed00

08003b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	6039      	str	r1, [r7, #0]
 8003b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	db0a      	blt.n	8003bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	490c      	ldr	r1, [pc, #48]	@ (8003be0 <__NVIC_SetPriority+0x4c>)
 8003bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb2:	0112      	lsls	r2, r2, #4
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bbc:	e00a      	b.n	8003bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	4908      	ldr	r1, [pc, #32]	@ (8003be4 <__NVIC_SetPriority+0x50>)
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	3b04      	subs	r3, #4
 8003bcc:	0112      	lsls	r2, r2, #4
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	761a      	strb	r2, [r3, #24]
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	e000e100 	.word	0xe000e100
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b089      	sub	sp, #36	@ 0x24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f1c3 0307 	rsb	r3, r3, #7
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	bf28      	it	cs
 8003c06:	2304      	movcs	r3, #4
 8003c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	2b06      	cmp	r3, #6
 8003c10:	d902      	bls.n	8003c18 <NVIC_EncodePriority+0x30>
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	3b03      	subs	r3, #3
 8003c16:	e000      	b.n	8003c1a <NVIC_EncodePriority+0x32>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43da      	mvns	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c30:	f04f 31ff 	mov.w	r1, #4294967295
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3a:	43d9      	mvns	r1, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c40:	4313      	orrs	r3, r2
         );
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3724      	adds	r7, #36	@ 0x24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
	...

08003c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c60:	d301      	bcc.n	8003c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c62:	2301      	movs	r3, #1
 8003c64:	e00f      	b.n	8003c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c66:	4a0a      	ldr	r2, [pc, #40]	@ (8003c90 <SysTick_Config+0x40>)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c6e:	210f      	movs	r1, #15
 8003c70:	f04f 30ff 	mov.w	r0, #4294967295
 8003c74:	f7ff ff8e 	bl	8003b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c78:	4b05      	ldr	r3, [pc, #20]	@ (8003c90 <SysTick_Config+0x40>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c7e:	4b04      	ldr	r3, [pc, #16]	@ (8003c90 <SysTick_Config+0x40>)
 8003c80:	2207      	movs	r2, #7
 8003c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	e000e010 	.word	0xe000e010

08003c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ff47 	bl	8003b30 <__NVIC_SetPriorityGrouping>
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b086      	sub	sp, #24
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cbc:	f7ff ff5c 	bl	8003b78 <__NVIC_GetPriorityGrouping>
 8003cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	6978      	ldr	r0, [r7, #20]
 8003cc8:	f7ff ff8e 	bl	8003be8 <NVIC_EncodePriority>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff ff5d 	bl	8003b94 <__NVIC_SetPriority>
}
 8003cda:	bf00      	nop
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff ffb0 	bl	8003c50 <SysTick_Config>
 8003cf0:	4603      	mov	r3, r0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b089      	sub	sp, #36	@ 0x24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	e177      	b.n	8004008 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d18:	2201      	movs	r2, #1
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	f040 8166 	bne.w	8004002 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d005      	beq.n	8003d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d130      	bne.n	8003db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	2203      	movs	r2, #3
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4013      	ands	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d84:	2201      	movs	r2, #1
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4013      	ands	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	f003 0201 	and.w	r2, r3, #1
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d017      	beq.n	8003dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d123      	bne.n	8003e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	08da      	lsrs	r2, r3, #3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3208      	adds	r2, #8
 8003e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	220f      	movs	r2, #15
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	43db      	mvns	r3, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	691a      	ldr	r2, [r3, #16]
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	08da      	lsrs	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3208      	adds	r2, #8
 8003e3a:	69b9      	ldr	r1, [r7, #24]
 8003e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	2203      	movs	r2, #3
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	43db      	mvns	r3, r3
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	4013      	ands	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 0203 	and.w	r2, r3, #3
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80c0 	beq.w	8004002 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	4b66      	ldr	r3, [pc, #408]	@ (8004020 <HAL_GPIO_Init+0x324>)
 8003e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8a:	4a65      	ldr	r2, [pc, #404]	@ (8004020 <HAL_GPIO_Init+0x324>)
 8003e8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e90:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e92:	4b63      	ldr	r3, [pc, #396]	@ (8004020 <HAL_GPIO_Init+0x324>)
 8003e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e9e:	4a61      	ldr	r2, [pc, #388]	@ (8004024 <HAL_GPIO_Init+0x328>)
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	089b      	lsrs	r3, r3, #2
 8003ea4:	3302      	adds	r3, #2
 8003ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	220f      	movs	r2, #15
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a58      	ldr	r2, [pc, #352]	@ (8004028 <HAL_GPIO_Init+0x32c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d037      	beq.n	8003f3a <HAL_GPIO_Init+0x23e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a57      	ldr	r2, [pc, #348]	@ (800402c <HAL_GPIO_Init+0x330>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d031      	beq.n	8003f36 <HAL_GPIO_Init+0x23a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a56      	ldr	r2, [pc, #344]	@ (8004030 <HAL_GPIO_Init+0x334>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d02b      	beq.n	8003f32 <HAL_GPIO_Init+0x236>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a55      	ldr	r2, [pc, #340]	@ (8004034 <HAL_GPIO_Init+0x338>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d025      	beq.n	8003f2e <HAL_GPIO_Init+0x232>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a54      	ldr	r2, [pc, #336]	@ (8004038 <HAL_GPIO_Init+0x33c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d01f      	beq.n	8003f2a <HAL_GPIO_Init+0x22e>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a53      	ldr	r2, [pc, #332]	@ (800403c <HAL_GPIO_Init+0x340>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d019      	beq.n	8003f26 <HAL_GPIO_Init+0x22a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a52      	ldr	r2, [pc, #328]	@ (8004040 <HAL_GPIO_Init+0x344>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <HAL_GPIO_Init+0x226>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a51      	ldr	r2, [pc, #324]	@ (8004044 <HAL_GPIO_Init+0x348>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00d      	beq.n	8003f1e <HAL_GPIO_Init+0x222>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a50      	ldr	r2, [pc, #320]	@ (8004048 <HAL_GPIO_Init+0x34c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d007      	beq.n	8003f1a <HAL_GPIO_Init+0x21e>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a4f      	ldr	r2, [pc, #316]	@ (800404c <HAL_GPIO_Init+0x350>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d101      	bne.n	8003f16 <HAL_GPIO_Init+0x21a>
 8003f12:	2309      	movs	r3, #9
 8003f14:	e012      	b.n	8003f3c <HAL_GPIO_Init+0x240>
 8003f16:	230a      	movs	r3, #10
 8003f18:	e010      	b.n	8003f3c <HAL_GPIO_Init+0x240>
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	e00e      	b.n	8003f3c <HAL_GPIO_Init+0x240>
 8003f1e:	2307      	movs	r3, #7
 8003f20:	e00c      	b.n	8003f3c <HAL_GPIO_Init+0x240>
 8003f22:	2306      	movs	r3, #6
 8003f24:	e00a      	b.n	8003f3c <HAL_GPIO_Init+0x240>
 8003f26:	2305      	movs	r3, #5
 8003f28:	e008      	b.n	8003f3c <HAL_GPIO_Init+0x240>
 8003f2a:	2304      	movs	r3, #4
 8003f2c:	e006      	b.n	8003f3c <HAL_GPIO_Init+0x240>
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e004      	b.n	8003f3c <HAL_GPIO_Init+0x240>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e002      	b.n	8003f3c <HAL_GPIO_Init+0x240>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <HAL_GPIO_Init+0x240>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	f002 0203 	and.w	r2, r2, #3
 8003f42:	0092      	lsls	r2, r2, #2
 8003f44:	4093      	lsls	r3, r2
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f4c:	4935      	ldr	r1, [pc, #212]	@ (8004024 <HAL_GPIO_Init+0x328>)
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	089b      	lsrs	r3, r3, #2
 8003f52:	3302      	adds	r3, #2
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8004050 <HAL_GPIO_Init+0x354>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	43db      	mvns	r3, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f7e:	4a34      	ldr	r2, [pc, #208]	@ (8004050 <HAL_GPIO_Init+0x354>)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f84:	4b32      	ldr	r3, [pc, #200]	@ (8004050 <HAL_GPIO_Init+0x354>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fa8:	4a29      	ldr	r2, [pc, #164]	@ (8004050 <HAL_GPIO_Init+0x354>)
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fae:	4b28      	ldr	r3, [pc, #160]	@ (8004050 <HAL_GPIO_Init+0x354>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8004050 <HAL_GPIO_Init+0x354>)
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8004050 <HAL_GPIO_Init+0x354>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ffc:	4a14      	ldr	r2, [pc, #80]	@ (8004050 <HAL_GPIO_Init+0x354>)
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	3301      	adds	r3, #1
 8004006:	61fb      	str	r3, [r7, #28]
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	2b0f      	cmp	r3, #15
 800400c:	f67f ae84 	bls.w	8003d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004010:	bf00      	nop
 8004012:	bf00      	nop
 8004014:	3724      	adds	r7, #36	@ 0x24
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40023800 	.word	0x40023800
 8004024:	40013800 	.word	0x40013800
 8004028:	40020000 	.word	0x40020000
 800402c:	40020400 	.word	0x40020400
 8004030:	40020800 	.word	0x40020800
 8004034:	40020c00 	.word	0x40020c00
 8004038:	40021000 	.word	0x40021000
 800403c:	40021400 	.word	0x40021400
 8004040:	40021800 	.word	0x40021800
 8004044:	40021c00 	.word	0x40021c00
 8004048:	40022000 	.word	0x40022000
 800404c:	40022400 	.word	0x40022400
 8004050:	40013c00 	.word	0x40013c00

08004054 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800405e:	2300      	movs	r3, #0
 8004060:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004066:	2300      	movs	r3, #0
 8004068:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	e0d9      	b.n	8004224 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004070:	2201      	movs	r2, #1
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	4013      	ands	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	429a      	cmp	r2, r3
 8004088:	f040 80c9 	bne.w	800421e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800408c:	4a6b      	ldr	r2, [pc, #428]	@ (800423c <HAL_GPIO_DeInit+0x1e8>)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	089b      	lsrs	r3, r3, #2
 8004092:	3302      	adds	r3, #2
 8004094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004098:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	220f      	movs	r2, #15
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	4013      	ands	r3, r2
 80040ac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a63      	ldr	r2, [pc, #396]	@ (8004240 <HAL_GPIO_DeInit+0x1ec>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d037      	beq.n	8004126 <HAL_GPIO_DeInit+0xd2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a62      	ldr	r2, [pc, #392]	@ (8004244 <HAL_GPIO_DeInit+0x1f0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d031      	beq.n	8004122 <HAL_GPIO_DeInit+0xce>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a61      	ldr	r2, [pc, #388]	@ (8004248 <HAL_GPIO_DeInit+0x1f4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d02b      	beq.n	800411e <HAL_GPIO_DeInit+0xca>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a60      	ldr	r2, [pc, #384]	@ (800424c <HAL_GPIO_DeInit+0x1f8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d025      	beq.n	800411a <HAL_GPIO_DeInit+0xc6>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a5f      	ldr	r2, [pc, #380]	@ (8004250 <HAL_GPIO_DeInit+0x1fc>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d01f      	beq.n	8004116 <HAL_GPIO_DeInit+0xc2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a5e      	ldr	r2, [pc, #376]	@ (8004254 <HAL_GPIO_DeInit+0x200>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d019      	beq.n	8004112 <HAL_GPIO_DeInit+0xbe>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a5d      	ldr	r2, [pc, #372]	@ (8004258 <HAL_GPIO_DeInit+0x204>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d013      	beq.n	800410e <HAL_GPIO_DeInit+0xba>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a5c      	ldr	r2, [pc, #368]	@ (800425c <HAL_GPIO_DeInit+0x208>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00d      	beq.n	800410a <HAL_GPIO_DeInit+0xb6>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a5b      	ldr	r2, [pc, #364]	@ (8004260 <HAL_GPIO_DeInit+0x20c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d007      	beq.n	8004106 <HAL_GPIO_DeInit+0xb2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a5a      	ldr	r2, [pc, #360]	@ (8004264 <HAL_GPIO_DeInit+0x210>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d101      	bne.n	8004102 <HAL_GPIO_DeInit+0xae>
 80040fe:	2309      	movs	r3, #9
 8004100:	e012      	b.n	8004128 <HAL_GPIO_DeInit+0xd4>
 8004102:	230a      	movs	r3, #10
 8004104:	e010      	b.n	8004128 <HAL_GPIO_DeInit+0xd4>
 8004106:	2308      	movs	r3, #8
 8004108:	e00e      	b.n	8004128 <HAL_GPIO_DeInit+0xd4>
 800410a:	2307      	movs	r3, #7
 800410c:	e00c      	b.n	8004128 <HAL_GPIO_DeInit+0xd4>
 800410e:	2306      	movs	r3, #6
 8004110:	e00a      	b.n	8004128 <HAL_GPIO_DeInit+0xd4>
 8004112:	2305      	movs	r3, #5
 8004114:	e008      	b.n	8004128 <HAL_GPIO_DeInit+0xd4>
 8004116:	2304      	movs	r3, #4
 8004118:	e006      	b.n	8004128 <HAL_GPIO_DeInit+0xd4>
 800411a:	2303      	movs	r3, #3
 800411c:	e004      	b.n	8004128 <HAL_GPIO_DeInit+0xd4>
 800411e:	2302      	movs	r3, #2
 8004120:	e002      	b.n	8004128 <HAL_GPIO_DeInit+0xd4>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <HAL_GPIO_DeInit+0xd4>
 8004126:	2300      	movs	r3, #0
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	f002 0203 	and.w	r2, r2, #3
 800412e:	0092      	lsls	r2, r2, #2
 8004130:	4093      	lsls	r3, r2
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	429a      	cmp	r2, r3
 8004136:	d132      	bne.n	800419e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004138:	4b4b      	ldr	r3, [pc, #300]	@ (8004268 <HAL_GPIO_DeInit+0x214>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	43db      	mvns	r3, r3
 8004140:	4949      	ldr	r1, [pc, #292]	@ (8004268 <HAL_GPIO_DeInit+0x214>)
 8004142:	4013      	ands	r3, r2
 8004144:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004146:	4b48      	ldr	r3, [pc, #288]	@ (8004268 <HAL_GPIO_DeInit+0x214>)
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	43db      	mvns	r3, r3
 800414e:	4946      	ldr	r1, [pc, #280]	@ (8004268 <HAL_GPIO_DeInit+0x214>)
 8004150:	4013      	ands	r3, r2
 8004152:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004154:	4b44      	ldr	r3, [pc, #272]	@ (8004268 <HAL_GPIO_DeInit+0x214>)
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	43db      	mvns	r3, r3
 800415c:	4942      	ldr	r1, [pc, #264]	@ (8004268 <HAL_GPIO_DeInit+0x214>)
 800415e:	4013      	ands	r3, r2
 8004160:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004162:	4b41      	ldr	r3, [pc, #260]	@ (8004268 <HAL_GPIO_DeInit+0x214>)
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	43db      	mvns	r3, r3
 800416a:	493f      	ldr	r1, [pc, #252]	@ (8004268 <HAL_GPIO_DeInit+0x214>)
 800416c:	4013      	ands	r3, r2
 800416e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	220f      	movs	r2, #15
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004180:	4a2e      	ldr	r2, [pc, #184]	@ (800423c <HAL_GPIO_DeInit+0x1e8>)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	089b      	lsrs	r3, r3, #2
 8004186:	3302      	adds	r3, #2
 8004188:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	43da      	mvns	r2, r3
 8004190:	482a      	ldr	r0, [pc, #168]	@ (800423c <HAL_GPIO_DeInit+0x1e8>)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	089b      	lsrs	r3, r3, #2
 8004196:	400a      	ands	r2, r1
 8004198:	3302      	adds	r3, #2
 800419a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	2103      	movs	r1, #3
 80041a8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ac:	43db      	mvns	r3, r3
 80041ae:	401a      	ands	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	08da      	lsrs	r2, r3, #3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3208      	adds	r2, #8
 80041bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	220f      	movs	r2, #15
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	43db      	mvns	r3, r3
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	08d2      	lsrs	r2, r2, #3
 80041d4:	4019      	ands	r1, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3208      	adds	r2, #8
 80041da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	2103      	movs	r1, #3
 80041e8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	401a      	ands	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	2101      	movs	r1, #1
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004200:	43db      	mvns	r3, r3
 8004202:	401a      	ands	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	2103      	movs	r1, #3
 8004212:	fa01 f303 	lsl.w	r3, r1, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	401a      	ands	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	3301      	adds	r3, #1
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2b0f      	cmp	r3, #15
 8004228:	f67f af22 	bls.w	8004070 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40013800 	.word	0x40013800
 8004240:	40020000 	.word	0x40020000
 8004244:	40020400 	.word	0x40020400
 8004248:	40020800 	.word	0x40020800
 800424c:	40020c00 	.word	0x40020c00
 8004250:	40021000 	.word	0x40021000
 8004254:	40021400 	.word	0x40021400
 8004258:	40021800 	.word	0x40021800
 800425c:	40021c00 	.word	0x40021c00
 8004260:	40022000 	.word	0x40022000
 8004264:	40022400 	.word	0x40022400
 8004268:	40013c00 	.word	0x40013c00

0800426c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	807b      	strh	r3, [r7, #2]
 8004278:	4613      	mov	r3, r2
 800427a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800427c:	787b      	ldrb	r3, [r7, #1]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004282:	887a      	ldrh	r2, [r7, #2]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004288:	e003      	b.n	8004292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800428a:	887b      	ldrh	r3, [r7, #2]
 800428c:	041a      	lsls	r2, r3, #16
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	619a      	str	r2, [r3, #24]
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
	...

080042a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e12b      	b.n	800450a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7ff f8da 	bl	8003480 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2224      	movs	r2, #36	@ 0x24
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0201 	bic.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004302:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004304:	f001 f8a2 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 8004308:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4a81      	ldr	r2, [pc, #516]	@ (8004514 <HAL_I2C_Init+0x274>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d807      	bhi.n	8004324 <HAL_I2C_Init+0x84>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4a80      	ldr	r2, [pc, #512]	@ (8004518 <HAL_I2C_Init+0x278>)
 8004318:	4293      	cmp	r3, r2
 800431a:	bf94      	ite	ls
 800431c:	2301      	movls	r3, #1
 800431e:	2300      	movhi	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	e006      	b.n	8004332 <HAL_I2C_Init+0x92>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4a7d      	ldr	r2, [pc, #500]	@ (800451c <HAL_I2C_Init+0x27c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	bf94      	ite	ls
 800432c:	2301      	movls	r3, #1
 800432e:	2300      	movhi	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e0e7      	b.n	800450a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4a78      	ldr	r2, [pc, #480]	@ (8004520 <HAL_I2C_Init+0x280>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	0c9b      	lsrs	r3, r3, #18
 8004344:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	4a6a      	ldr	r2, [pc, #424]	@ (8004514 <HAL_I2C_Init+0x274>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d802      	bhi.n	8004374 <HAL_I2C_Init+0xd4>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	3301      	adds	r3, #1
 8004372:	e009      	b.n	8004388 <HAL_I2C_Init+0xe8>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800437a:	fb02 f303 	mul.w	r3, r2, r3
 800437e:	4a69      	ldr	r2, [pc, #420]	@ (8004524 <HAL_I2C_Init+0x284>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	099b      	lsrs	r3, r3, #6
 8004386:	3301      	adds	r3, #1
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	430b      	orrs	r3, r1
 800438e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800439a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	495c      	ldr	r1, [pc, #368]	@ (8004514 <HAL_I2C_Init+0x274>)
 80043a4:	428b      	cmp	r3, r1
 80043a6:	d819      	bhi.n	80043dc <HAL_I2C_Init+0x13c>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	1e59      	subs	r1, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80043b6:	1c59      	adds	r1, r3, #1
 80043b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80043bc:	400b      	ands	r3, r1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <HAL_I2C_Init+0x138>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1e59      	subs	r1, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80043d0:	3301      	adds	r3, #1
 80043d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d6:	e051      	b.n	800447c <HAL_I2C_Init+0x1dc>
 80043d8:	2304      	movs	r3, #4
 80043da:	e04f      	b.n	800447c <HAL_I2C_Init+0x1dc>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d111      	bne.n	8004408 <HAL_I2C_Init+0x168>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	1e58      	subs	r0, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6859      	ldr	r1, [r3, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	440b      	add	r3, r1
 80043f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043f6:	3301      	adds	r3, #1
 80043f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bf0c      	ite	eq
 8004400:	2301      	moveq	r3, #1
 8004402:	2300      	movne	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	e012      	b.n	800442e <HAL_I2C_Init+0x18e>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	1e58      	subs	r0, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6859      	ldr	r1, [r3, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	0099      	lsls	r1, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	fbb0 f3f3 	udiv	r3, r0, r3
 800441e:	3301      	adds	r3, #1
 8004420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004424:	2b00      	cmp	r3, #0
 8004426:	bf0c      	ite	eq
 8004428:	2301      	moveq	r3, #1
 800442a:	2300      	movne	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_I2C_Init+0x196>
 8004432:	2301      	movs	r3, #1
 8004434:	e022      	b.n	800447c <HAL_I2C_Init+0x1dc>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10e      	bne.n	800445c <HAL_I2C_Init+0x1bc>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1e58      	subs	r0, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6859      	ldr	r1, [r3, #4]
 8004446:	460b      	mov	r3, r1
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	440b      	add	r3, r1
 800444c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004450:	3301      	adds	r3, #1
 8004452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800445a:	e00f      	b.n	800447c <HAL_I2C_Init+0x1dc>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	1e58      	subs	r0, r3, #1
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6859      	ldr	r1, [r3, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	0099      	lsls	r1, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004472:	3301      	adds	r3, #1
 8004474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004478:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	6809      	ldr	r1, [r1, #0]
 8004480:	4313      	orrs	r3, r2
 8004482:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69da      	ldr	r2, [r3, #28]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80044aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6911      	ldr	r1, [r2, #16]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	68d2      	ldr	r2, [r2, #12]
 80044b6:	4311      	orrs	r1, r2
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	430b      	orrs	r3, r1
 80044be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	000186a0 	.word	0x000186a0
 8004518:	001e847f 	.word	0x001e847f
 800451c:	003d08ff 	.word	0x003d08ff
 8004520:	431bde83 	.word	0x431bde83
 8004524:	10624dd3 	.word	0x10624dd3

08004528 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b20      	cmp	r3, #32
 800453c:	d129      	bne.n	8004592 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2224      	movs	r2, #36	@ 0x24
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0201 	bic.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0210 	bic.w	r2, r2, #16
 8004564:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f042 0201 	orr.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e000      	b.n	8004594 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004592:	2302      	movs	r3, #2
  }
}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	d12a      	bne.n	8004610 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2224      	movs	r2, #36	@ 0x24
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0201 	bic.w	r2, r2, #1
 80045d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80045da:	89fb      	ldrh	r3, [r7, #14]
 80045dc:	f023 030f 	bic.w	r3, r3, #15
 80045e0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	89fb      	ldrh	r3, [r7, #14]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	89fa      	ldrh	r2, [r7, #14]
 80045f2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	e000      	b.n	8004612 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004610:	2302      	movs	r3, #2
  }
}
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
	...

08004620 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e0bf      	b.n	80047b2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fe ff84 	bl	8003554 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004662:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6999      	ldr	r1, [r3, #24]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004678:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6899      	ldr	r1, [r3, #8]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4b4a      	ldr	r3, [pc, #296]	@ (80047bc <HAL_LTDC_Init+0x19c>)
 8004694:	400b      	ands	r3, r1
 8004696:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	041b      	lsls	r3, r3, #16
 800469e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6899      	ldr	r1, [r3, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68d9      	ldr	r1, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	4b3e      	ldr	r3, [pc, #248]	@ (80047bc <HAL_LTDC_Init+0x19c>)
 80046c2:	400b      	ands	r3, r1
 80046c4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	041b      	lsls	r3, r3, #16
 80046cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68d9      	ldr	r1, [r3, #12]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1a      	ldr	r2, [r3, #32]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6919      	ldr	r1, [r3, #16]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4b33      	ldr	r3, [pc, #204]	@ (80047bc <HAL_LTDC_Init+0x19c>)
 80046f0:	400b      	ands	r3, r1
 80046f2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	041b      	lsls	r3, r3, #16
 80046fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6919      	ldr	r1, [r3, #16]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6959      	ldr	r1, [r3, #20]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	4b27      	ldr	r3, [pc, #156]	@ (80047bc <HAL_LTDC_Init+0x19c>)
 800471e:	400b      	ands	r3, r1
 8004720:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004726:	041b      	lsls	r3, r3, #16
 8004728:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6959      	ldr	r1, [r3, #20]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004746:	021b      	lsls	r3, r3, #8
 8004748:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004750:	041b      	lsls	r3, r3, #16
 8004752:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004762:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4313      	orrs	r3, r2
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0206 	orr.w	r2, r2, #6
 800478e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0201 	orr.w	r2, r2, #1
 800479e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	f000f800 	.word	0xf000f800

080047c0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80047c0:	b5b0      	push	{r4, r5, r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_LTDC_ConfigLayer+0x1a>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e02c      	b.n	8004834 <HAL_LTDC_ConfigLayer+0x74>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2202      	movs	r2, #2
 80047e6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2134      	movs	r1, #52	@ 0x34
 80047f0:	fb01 f303 	mul.w	r3, r1, r3
 80047f4:	4413      	add	r3, r2
 80047f6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	4614      	mov	r4, r2
 80047fe:	461d      	mov	r5, r3
 8004800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800480a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800480c:	682b      	ldr	r3, [r5, #0]
 800480e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	68b9      	ldr	r1, [r7, #8]
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 f811 	bl	800483c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2201      	movs	r2, #1
 8004820:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bdb0      	pop	{r4, r5, r7, pc}

0800483c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800483c:	b480      	push	{r7}
 800483e:	b089      	sub	sp, #36	@ 0x24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	0c1b      	lsrs	r3, r3, #16
 8004854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004858:	4413      	add	r3, r2
 800485a:	041b      	lsls	r3, r3, #16
 800485c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	01db      	lsls	r3, r3, #7
 8004868:	4413      	add	r3, r2
 800486a:	3384      	adds	r3, #132	@ 0x84
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	6812      	ldr	r2, [r2, #0]
 8004872:	4611      	mov	r1, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	01d2      	lsls	r2, r2, #7
 8004878:	440a      	add	r2, r1
 800487a:	3284      	adds	r2, #132	@ 0x84
 800487c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004880:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	0c1b      	lsrs	r3, r3, #16
 800488e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004892:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004894:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4619      	mov	r1, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	01db      	lsls	r3, r3, #7
 80048a0:	440b      	add	r3, r1
 80048a2:	3384      	adds	r3, #132	@ 0x84
 80048a4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80048aa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048ba:	4413      	add	r3, r2
 80048bc:	041b      	lsls	r3, r3, #16
 80048be:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	01db      	lsls	r3, r3, #7
 80048ca:	4413      	add	r3, r2
 80048cc:	3384      	adds	r3, #132	@ 0x84
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	4611      	mov	r1, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	01d2      	lsls	r2, r2, #7
 80048da:	440a      	add	r2, r1
 80048dc:	3284      	adds	r2, #132	@ 0x84
 80048de:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80048e2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048f2:	4413      	add	r3, r2
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4619      	mov	r1, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	01db      	lsls	r3, r3, #7
 8004900:	440b      	add	r3, r1
 8004902:	3384      	adds	r3, #132	@ 0x84
 8004904:	4619      	mov	r1, r3
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	4313      	orrs	r3, r2
 800490a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	01db      	lsls	r3, r3, #7
 8004916:	4413      	add	r3, r2
 8004918:	3384      	adds	r3, #132	@ 0x84
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	6812      	ldr	r2, [r2, #0]
 8004920:	4611      	mov	r1, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	01d2      	lsls	r2, r2, #7
 8004926:	440a      	add	r2, r1
 8004928:	3284      	adds	r2, #132	@ 0x84
 800492a:	f023 0307 	bic.w	r3, r3, #7
 800492e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	461a      	mov	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	01db      	lsls	r3, r3, #7
 800493a:	4413      	add	r3, r2
 800493c:	3384      	adds	r3, #132	@ 0x84
 800493e:	461a      	mov	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800494c:	021b      	lsls	r3, r3, #8
 800494e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004956:	041b      	lsls	r3, r3, #16
 8004958:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	061b      	lsls	r3, r3, #24
 8004960:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	01db      	lsls	r3, r3, #7
 800496c:	4413      	add	r3, r2
 800496e:	3384      	adds	r3, #132	@ 0x84
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	01db      	lsls	r3, r3, #7
 800497c:	4413      	add	r3, r2
 800497e:	3384      	adds	r3, #132	@ 0x84
 8004980:	461a      	mov	r2, r3
 8004982:	2300      	movs	r3, #0
 8004984:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800498c:	461a      	mov	r2, r3
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	431a      	orrs	r2, r3
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	431a      	orrs	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4619      	mov	r1, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	01db      	lsls	r3, r3, #7
 80049a0:	440b      	add	r3, r1
 80049a2:	3384      	adds	r3, #132	@ 0x84
 80049a4:	4619      	mov	r1, r3
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	01db      	lsls	r3, r3, #7
 80049b6:	4413      	add	r3, r2
 80049b8:	3384      	adds	r3, #132	@ 0x84
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	6812      	ldr	r2, [r2, #0]
 80049c0:	4611      	mov	r1, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	01d2      	lsls	r2, r2, #7
 80049c6:	440a      	add	r2, r1
 80049c8:	3284      	adds	r2, #132	@ 0x84
 80049ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80049ce:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	01db      	lsls	r3, r3, #7
 80049da:	4413      	add	r3, r2
 80049dc:	3384      	adds	r3, #132	@ 0x84
 80049de:	461a      	mov	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	01db      	lsls	r3, r3, #7
 80049f0:	4413      	add	r3, r2
 80049f2:	3384      	adds	r3, #132	@ 0x84
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	6812      	ldr	r2, [r2, #0]
 80049fa:	4611      	mov	r1, r2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	01d2      	lsls	r2, r2, #7
 8004a00:	440a      	add	r2, r1
 8004a02:	3284      	adds	r2, #132	@ 0x84
 8004a04:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004a08:	f023 0307 	bic.w	r3, r3, #7
 8004a0c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	69da      	ldr	r2, [r3, #28]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	68f9      	ldr	r1, [r7, #12]
 8004a18:	6809      	ldr	r1, [r1, #0]
 8004a1a:	4608      	mov	r0, r1
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	01c9      	lsls	r1, r1, #7
 8004a20:	4401      	add	r1, r0
 8004a22:	3184      	adds	r1, #132	@ 0x84
 8004a24:	4313      	orrs	r3, r2
 8004a26:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	01db      	lsls	r3, r3, #7
 8004a32:	4413      	add	r3, r2
 8004a34:	3384      	adds	r3, #132	@ 0x84
 8004a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	01db      	lsls	r3, r3, #7
 8004a42:	4413      	add	r3, r2
 8004a44:	3384      	adds	r3, #132	@ 0x84
 8004a46:	461a      	mov	r2, r3
 8004a48:	2300      	movs	r3, #0
 8004a4a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	461a      	mov	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	01db      	lsls	r3, r3, #7
 8004a56:	4413      	add	r3, r2
 8004a58:	3384      	adds	r3, #132	@ 0x84
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a60:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d102      	bne.n	8004a70 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004a6a:	2304      	movs	r3, #4
 8004a6c:	61fb      	str	r3, [r7, #28]
 8004a6e:	e01b      	b.n	8004aa8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d102      	bne.n	8004a7e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	61fb      	str	r3, [r7, #28]
 8004a7c:	e014      	b.n	8004aa8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d00b      	beq.n	8004a9e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d007      	beq.n	8004a9e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d003      	beq.n	8004a9e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a9a:	2b07      	cmp	r3, #7
 8004a9c:	d102      	bne.n	8004aa4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	61fb      	str	r3, [r7, #28]
 8004aa2:	e001      	b.n	8004aa8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	01db      	lsls	r3, r3, #7
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3384      	adds	r3, #132	@ 0x84
 8004ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	4611      	mov	r1, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	01d2      	lsls	r2, r2, #7
 8004ac2:	440a      	add	r2, r1
 8004ac4:	3284      	adds	r2, #132	@ 0x84
 8004ac6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004aca:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	fb02 f303 	mul.w	r3, r2, r3
 8004ad6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	6859      	ldr	r1, [r3, #4]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	1acb      	subs	r3, r1, r3
 8004ae2:	69f9      	ldr	r1, [r7, #28]
 8004ae4:	fb01 f303 	mul.w	r3, r1, r3
 8004ae8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004aea:	68f9      	ldr	r1, [r7, #12]
 8004aec:	6809      	ldr	r1, [r1, #0]
 8004aee:	4608      	mov	r0, r1
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	01c9      	lsls	r1, r1, #7
 8004af4:	4401      	add	r1, r0
 8004af6:	3184      	adds	r1, #132	@ 0x84
 8004af8:	4313      	orrs	r3, r2
 8004afa:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	01db      	lsls	r3, r3, #7
 8004b06:	4413      	add	r3, r2
 8004b08:	3384      	adds	r3, #132	@ 0x84
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	4611      	mov	r1, r2
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	01d2      	lsls	r2, r2, #7
 8004b16:	440a      	add	r2, r1
 8004b18:	3284      	adds	r2, #132	@ 0x84
 8004b1a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004b1e:	f023 0307 	bic.w	r3, r3, #7
 8004b22:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	01db      	lsls	r3, r3, #7
 8004b2e:	4413      	add	r3, r2
 8004b30:	3384      	adds	r3, #132	@ 0x84
 8004b32:	461a      	mov	r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b38:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	01db      	lsls	r3, r3, #7
 8004b44:	4413      	add	r3, r2
 8004b46:	3384      	adds	r3, #132	@ 0x84
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	6812      	ldr	r2, [r2, #0]
 8004b4e:	4611      	mov	r1, r2
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	01d2      	lsls	r2, r2, #7
 8004b54:	440a      	add	r2, r1
 8004b56:	3284      	adds	r2, #132	@ 0x84
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	6013      	str	r3, [r2, #0]
}
 8004b5e:	bf00      	nop
 8004b60:	3724      	adds	r7, #36	@ 0x24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e267      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d075      	beq.n	8004c76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b8a:	4b88      	ldr	r3, [pc, #544]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d00c      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b96:	4b85      	ldr	r3, [pc, #532]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d112      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ba2:	4b82      	ldr	r3, [pc, #520]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004baa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bae:	d10b      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb0:	4b7e      	ldr	r3, [pc, #504]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d05b      	beq.n	8004c74 <HAL_RCC_OscConfig+0x108>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d157      	bne.n	8004c74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e242      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bd0:	d106      	bne.n	8004be0 <HAL_RCC_OscConfig+0x74>
 8004bd2:	4b76      	ldr	r3, [pc, #472]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a75      	ldr	r2, [pc, #468]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	e01d      	b.n	8004c1c <HAL_RCC_OscConfig+0xb0>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004be8:	d10c      	bne.n	8004c04 <HAL_RCC_OscConfig+0x98>
 8004bea:	4b70      	ldr	r3, [pc, #448]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a6f      	ldr	r2, [pc, #444]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004bf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	4b6d      	ldr	r3, [pc, #436]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a6c      	ldr	r2, [pc, #432]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	e00b      	b.n	8004c1c <HAL_RCC_OscConfig+0xb0>
 8004c04:	4b69      	ldr	r3, [pc, #420]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a68      	ldr	r2, [pc, #416]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004c0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	4b66      	ldr	r3, [pc, #408]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a65      	ldr	r2, [pc, #404]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004c16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d013      	beq.n	8004c4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c24:	f7fe ff54 	bl	8003ad0 <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c2c:	f7fe ff50 	bl	8003ad0 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b64      	cmp	r3, #100	@ 0x64
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e207      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c3e:	4b5b      	ldr	r3, [pc, #364]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d0f0      	beq.n	8004c2c <HAL_RCC_OscConfig+0xc0>
 8004c4a:	e014      	b.n	8004c76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4c:	f7fe ff40 	bl	8003ad0 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c54:	f7fe ff3c 	bl	8003ad0 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	@ 0x64
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e1f3      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c66:	4b51      	ldr	r3, [pc, #324]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1f0      	bne.n	8004c54 <HAL_RCC_OscConfig+0xe8>
 8004c72:	e000      	b.n	8004c76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d063      	beq.n	8004d4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c82:	4b4a      	ldr	r3, [pc, #296]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 030c 	and.w	r3, r3, #12
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00b      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c8e:	4b47      	ldr	r3, [pc, #284]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d11c      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c9a:	4b44      	ldr	r3, [pc, #272]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d116      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ca6:	4b41      	ldr	r3, [pc, #260]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d005      	beq.n	8004cbe <HAL_RCC_OscConfig+0x152>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d001      	beq.n	8004cbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e1c7      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	4937      	ldr	r1, [pc, #220]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cd2:	e03a      	b.n	8004d4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d020      	beq.n	8004d1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cdc:	4b34      	ldr	r3, [pc, #208]	@ (8004db0 <HAL_RCC_OscConfig+0x244>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce2:	f7fe fef5 	bl	8003ad0 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cea:	f7fe fef1 	bl	8003ad0 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e1a8      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0f0      	beq.n	8004cea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d08:	4b28      	ldr	r3, [pc, #160]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	4925      	ldr	r1, [pc, #148]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	600b      	str	r3, [r1, #0]
 8004d1c:	e015      	b.n	8004d4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d1e:	4b24      	ldr	r3, [pc, #144]	@ (8004db0 <HAL_RCC_OscConfig+0x244>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fe fed4 	bl	8003ad0 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d2c:	f7fe fed0 	bl	8003ad0 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e187      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d036      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d016      	beq.n	8004d8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d5e:	4b15      	ldr	r3, [pc, #84]	@ (8004db4 <HAL_RCC_OscConfig+0x248>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d64:	f7fe feb4 	bl	8003ad0 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d6c:	f7fe feb0 	bl	8003ad0 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e167      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004d80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0f0      	beq.n	8004d6c <HAL_RCC_OscConfig+0x200>
 8004d8a:	e01b      	b.n	8004dc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d8c:	4b09      	ldr	r3, [pc, #36]	@ (8004db4 <HAL_RCC_OscConfig+0x248>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d92:	f7fe fe9d 	bl	8003ad0 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d98:	e00e      	b.n	8004db8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d9a:	f7fe fe99 	bl	8003ad0 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d907      	bls.n	8004db8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e150      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
 8004dac:	40023800 	.word	0x40023800
 8004db0:	42470000 	.word	0x42470000
 8004db4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db8:	4b88      	ldr	r3, [pc, #544]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004dba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1ea      	bne.n	8004d9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 8097 	beq.w	8004f00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dd6:	4b81      	ldr	r3, [pc, #516]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10f      	bne.n	8004e02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004de2:	2300      	movs	r3, #0
 8004de4:	60bb      	str	r3, [r7, #8]
 8004de6:	4b7d      	ldr	r3, [pc, #500]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dea:	4a7c      	ldr	r2, [pc, #496]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004df2:	4b7a      	ldr	r3, [pc, #488]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dfa:	60bb      	str	r3, [r7, #8]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e02:	4b77      	ldr	r3, [pc, #476]	@ (8004fe0 <HAL_RCC_OscConfig+0x474>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d118      	bne.n	8004e40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e0e:	4b74      	ldr	r3, [pc, #464]	@ (8004fe0 <HAL_RCC_OscConfig+0x474>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a73      	ldr	r2, [pc, #460]	@ (8004fe0 <HAL_RCC_OscConfig+0x474>)
 8004e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e1a:	f7fe fe59 	bl	8003ad0 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e22:	f7fe fe55 	bl	8003ad0 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e10c      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e34:	4b6a      	ldr	r3, [pc, #424]	@ (8004fe0 <HAL_RCC_OscConfig+0x474>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f0      	beq.n	8004e22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d106      	bne.n	8004e56 <HAL_RCC_OscConfig+0x2ea>
 8004e48:	4b64      	ldr	r3, [pc, #400]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4c:	4a63      	ldr	r2, [pc, #396]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e54:	e01c      	b.n	8004e90 <HAL_RCC_OscConfig+0x324>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	2b05      	cmp	r3, #5
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x30c>
 8004e5e:	4b5f      	ldr	r3, [pc, #380]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e62:	4a5e      	ldr	r2, [pc, #376]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004e64:	f043 0304 	orr.w	r3, r3, #4
 8004e68:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e6a:	4b5c      	ldr	r3, [pc, #368]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e6e:	4a5b      	ldr	r2, [pc, #364]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e76:	e00b      	b.n	8004e90 <HAL_RCC_OscConfig+0x324>
 8004e78:	4b58      	ldr	r3, [pc, #352]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7c:	4a57      	ldr	r2, [pc, #348]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004e7e:	f023 0301 	bic.w	r3, r3, #1
 8004e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e84:	4b55      	ldr	r3, [pc, #340]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e88:	4a54      	ldr	r2, [pc, #336]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004e8a:	f023 0304 	bic.w	r3, r3, #4
 8004e8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d015      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e98:	f7fe fe1a 	bl	8003ad0 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e9e:	e00a      	b.n	8004eb6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea0:	f7fe fe16 	bl	8003ad0 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e0cb      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb6:	4b49      	ldr	r3, [pc, #292]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0ee      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x334>
 8004ec2:	e014      	b.n	8004eee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ec4:	f7fe fe04 	bl	8003ad0 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eca:	e00a      	b.n	8004ee2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ecc:	f7fe fe00 	bl	8003ad0 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e0b5      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1ee      	bne.n	8004ecc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004eee:	7dfb      	ldrb	r3, [r7, #23]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d105      	bne.n	8004f00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ef4:	4b39      	ldr	r3, [pc, #228]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef8:	4a38      	ldr	r2, [pc, #224]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004efe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 80a1 	beq.w	800504c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f0a:	4b34      	ldr	r3, [pc, #208]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 030c 	and.w	r3, r3, #12
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d05c      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d141      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f1e:	4b31      	ldr	r3, [pc, #196]	@ (8004fe4 <HAL_RCC_OscConfig+0x478>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f24:	f7fe fdd4 	bl	8003ad0 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f2c:	f7fe fdd0 	bl	8003ad0 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e087      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f3e:	4b27      	ldr	r3, [pc, #156]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1f0      	bne.n	8004f2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69da      	ldr	r2, [r3, #28]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	019b      	lsls	r3, r3, #6
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f60:	085b      	lsrs	r3, r3, #1
 8004f62:	3b01      	subs	r3, #1
 8004f64:	041b      	lsls	r3, r3, #16
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6c:	061b      	lsls	r3, r3, #24
 8004f6e:	491b      	ldr	r1, [pc, #108]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f74:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe4 <HAL_RCC_OscConfig+0x478>)
 8004f76:	2201      	movs	r2, #1
 8004f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7a:	f7fe fda9 	bl	8003ad0 <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f82:	f7fe fda5 	bl	8003ad0 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e05c      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f94:	4b11      	ldr	r3, [pc, #68]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f0      	beq.n	8004f82 <HAL_RCC_OscConfig+0x416>
 8004fa0:	e054      	b.n	800504c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa2:	4b10      	ldr	r3, [pc, #64]	@ (8004fe4 <HAL_RCC_OscConfig+0x478>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa8:	f7fe fd92 	bl	8003ad0 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb0:	f7fe fd8e 	bl	8003ad0 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e045      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc2:	4b06      	ldr	r3, [pc, #24]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x444>
 8004fce:	e03d      	b.n	800504c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d107      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e038      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
 8004fdc:	40023800 	.word	0x40023800
 8004fe0:	40007000 	.word	0x40007000
 8004fe4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8005058 <HAL_RCC_OscConfig+0x4ec>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d028      	beq.n	8005048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005000:	429a      	cmp	r2, r3
 8005002:	d121      	bne.n	8005048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800500e:	429a      	cmp	r2, r3
 8005010:	d11a      	bne.n	8005048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005018:	4013      	ands	r3, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800501e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005020:	4293      	cmp	r3, r2
 8005022:	d111      	bne.n	8005048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502e:	085b      	lsrs	r3, r3, #1
 8005030:	3b01      	subs	r3, #1
 8005032:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005034:	429a      	cmp	r2, r3
 8005036:	d107      	bne.n	8005048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005042:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005044:	429a      	cmp	r2, r3
 8005046:	d001      	beq.n	800504c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e000      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40023800 	.word	0x40023800

0800505c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e0cc      	b.n	800520a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005070:	4b68      	ldr	r3, [pc, #416]	@ (8005214 <HAL_RCC_ClockConfig+0x1b8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 030f 	and.w	r3, r3, #15
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	d90c      	bls.n	8005098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507e:	4b65      	ldr	r3, [pc, #404]	@ (8005214 <HAL_RCC_ClockConfig+0x1b8>)
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005086:	4b63      	ldr	r3, [pc, #396]	@ (8005214 <HAL_RCC_ClockConfig+0x1b8>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d001      	beq.n	8005098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0b8      	b.n	800520a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d020      	beq.n	80050e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050b0:	4b59      	ldr	r3, [pc, #356]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	4a58      	ldr	r2, [pc, #352]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80050b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0308 	and.w	r3, r3, #8
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d005      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050c8:	4b53      	ldr	r3, [pc, #332]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	4a52      	ldr	r2, [pc, #328]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d4:	4b50      	ldr	r3, [pc, #320]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	494d      	ldr	r1, [pc, #308]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d044      	beq.n	800517c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d107      	bne.n	800510a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050fa:	4b47      	ldr	r3, [pc, #284]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d119      	bne.n	800513a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e07f      	b.n	800520a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d003      	beq.n	800511a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005116:	2b03      	cmp	r3, #3
 8005118:	d107      	bne.n	800512a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800511a:	4b3f      	ldr	r3, [pc, #252]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d109      	bne.n	800513a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e06f      	b.n	800520a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800512a:	4b3b      	ldr	r3, [pc, #236]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e067      	b.n	800520a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800513a:	4b37      	ldr	r3, [pc, #220]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f023 0203 	bic.w	r2, r3, #3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	4934      	ldr	r1, [pc, #208]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 8005148:	4313      	orrs	r3, r2
 800514a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800514c:	f7fe fcc0 	bl	8003ad0 <HAL_GetTick>
 8005150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005152:	e00a      	b.n	800516a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005154:	f7fe fcbc 	bl	8003ad0 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005162:	4293      	cmp	r3, r2
 8005164:	d901      	bls.n	800516a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e04f      	b.n	800520a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516a:	4b2b      	ldr	r3, [pc, #172]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 020c 	and.w	r2, r3, #12
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	429a      	cmp	r2, r3
 800517a:	d1eb      	bne.n	8005154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800517c:	4b25      	ldr	r3, [pc, #148]	@ (8005214 <HAL_RCC_ClockConfig+0x1b8>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 030f 	and.w	r3, r3, #15
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d20c      	bcs.n	80051a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518a:	4b22      	ldr	r3, [pc, #136]	@ (8005214 <HAL_RCC_ClockConfig+0x1b8>)
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005192:	4b20      	ldr	r3, [pc, #128]	@ (8005214 <HAL_RCC_ClockConfig+0x1b8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d001      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e032      	b.n	800520a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051b0:	4b19      	ldr	r3, [pc, #100]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	4916      	ldr	r1, [pc, #88]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d009      	beq.n	80051e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051ce:	4b12      	ldr	r3, [pc, #72]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	490e      	ldr	r1, [pc, #56]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051e2:	f000 f821 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 80051e6:	4602      	mov	r2, r0
 80051e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	091b      	lsrs	r3, r3, #4
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	490a      	ldr	r1, [pc, #40]	@ (800521c <HAL_RCC_ClockConfig+0x1c0>)
 80051f4:	5ccb      	ldrb	r3, [r1, r3]
 80051f6:	fa22 f303 	lsr.w	r3, r2, r3
 80051fa:	4a09      	ldr	r2, [pc, #36]	@ (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 80051fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80051fe:	4b09      	ldr	r3, [pc, #36]	@ (8005224 <HAL_RCC_ClockConfig+0x1c8>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f7fe fc20 	bl	8003a48 <HAL_InitTick>

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40023c00 	.word	0x40023c00
 8005218:	40023800 	.word	0x40023800
 800521c:	08007700 	.word	0x08007700
 8005220:	20000010 	.word	0x20000010
 8005224:	20000014 	.word	0x20000014

08005228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800522c:	b094      	sub	sp, #80	@ 0x50
 800522e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005240:	4b79      	ldr	r3, [pc, #484]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x200>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 030c 	and.w	r3, r3, #12
 8005248:	2b08      	cmp	r3, #8
 800524a:	d00d      	beq.n	8005268 <HAL_RCC_GetSysClockFreq+0x40>
 800524c:	2b08      	cmp	r3, #8
 800524e:	f200 80e1 	bhi.w	8005414 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <HAL_RCC_GetSysClockFreq+0x34>
 8005256:	2b04      	cmp	r3, #4
 8005258:	d003      	beq.n	8005262 <HAL_RCC_GetSysClockFreq+0x3a>
 800525a:	e0db      	b.n	8005414 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800525c:	4b73      	ldr	r3, [pc, #460]	@ (800542c <HAL_RCC_GetSysClockFreq+0x204>)
 800525e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005260:	e0db      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005262:	4b73      	ldr	r3, [pc, #460]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x208>)
 8005264:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005266:	e0d8      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005268:	4b6f      	ldr	r3, [pc, #444]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x200>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005270:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005272:	4b6d      	ldr	r3, [pc, #436]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x200>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d063      	beq.n	8005346 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800527e:	4b6a      	ldr	r3, [pc, #424]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x200>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	099b      	lsrs	r3, r3, #6
 8005284:	2200      	movs	r2, #0
 8005286:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005288:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800528a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005290:	633b      	str	r3, [r7, #48]	@ 0x30
 8005292:	2300      	movs	r3, #0
 8005294:	637b      	str	r3, [r7, #52]	@ 0x34
 8005296:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800529a:	4622      	mov	r2, r4
 800529c:	462b      	mov	r3, r5
 800529e:	f04f 0000 	mov.w	r0, #0
 80052a2:	f04f 0100 	mov.w	r1, #0
 80052a6:	0159      	lsls	r1, r3, #5
 80052a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052ac:	0150      	lsls	r0, r2, #5
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	4621      	mov	r1, r4
 80052b4:	1a51      	subs	r1, r2, r1
 80052b6:	6139      	str	r1, [r7, #16]
 80052b8:	4629      	mov	r1, r5
 80052ba:	eb63 0301 	sbc.w	r3, r3, r1
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	f04f 0200 	mov.w	r2, #0
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052cc:	4659      	mov	r1, fp
 80052ce:	018b      	lsls	r3, r1, #6
 80052d0:	4651      	mov	r1, sl
 80052d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052d6:	4651      	mov	r1, sl
 80052d8:	018a      	lsls	r2, r1, #6
 80052da:	4651      	mov	r1, sl
 80052dc:	ebb2 0801 	subs.w	r8, r2, r1
 80052e0:	4659      	mov	r1, fp
 80052e2:	eb63 0901 	sbc.w	r9, r3, r1
 80052e6:	f04f 0200 	mov.w	r2, #0
 80052ea:	f04f 0300 	mov.w	r3, #0
 80052ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052fa:	4690      	mov	r8, r2
 80052fc:	4699      	mov	r9, r3
 80052fe:	4623      	mov	r3, r4
 8005300:	eb18 0303 	adds.w	r3, r8, r3
 8005304:	60bb      	str	r3, [r7, #8]
 8005306:	462b      	mov	r3, r5
 8005308:	eb49 0303 	adc.w	r3, r9, r3
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800531a:	4629      	mov	r1, r5
 800531c:	024b      	lsls	r3, r1, #9
 800531e:	4621      	mov	r1, r4
 8005320:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005324:	4621      	mov	r1, r4
 8005326:	024a      	lsls	r2, r1, #9
 8005328:	4610      	mov	r0, r2
 800532a:	4619      	mov	r1, r3
 800532c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800532e:	2200      	movs	r2, #0
 8005330:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005332:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005334:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005338:	f7fa ff58 	bl	80001ec <__aeabi_uldivmod>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4613      	mov	r3, r2
 8005342:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005344:	e058      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005346:	4b38      	ldr	r3, [pc, #224]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x200>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	099b      	lsrs	r3, r3, #6
 800534c:	2200      	movs	r2, #0
 800534e:	4618      	mov	r0, r3
 8005350:	4611      	mov	r1, r2
 8005352:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005356:	623b      	str	r3, [r7, #32]
 8005358:	2300      	movs	r3, #0
 800535a:	627b      	str	r3, [r7, #36]	@ 0x24
 800535c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005360:	4642      	mov	r2, r8
 8005362:	464b      	mov	r3, r9
 8005364:	f04f 0000 	mov.w	r0, #0
 8005368:	f04f 0100 	mov.w	r1, #0
 800536c:	0159      	lsls	r1, r3, #5
 800536e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005372:	0150      	lsls	r0, r2, #5
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4641      	mov	r1, r8
 800537a:	ebb2 0a01 	subs.w	sl, r2, r1
 800537e:	4649      	mov	r1, r9
 8005380:	eb63 0b01 	sbc.w	fp, r3, r1
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005390:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005394:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005398:	ebb2 040a 	subs.w	r4, r2, sl
 800539c:	eb63 050b 	sbc.w	r5, r3, fp
 80053a0:	f04f 0200 	mov.w	r2, #0
 80053a4:	f04f 0300 	mov.w	r3, #0
 80053a8:	00eb      	lsls	r3, r5, #3
 80053aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053ae:	00e2      	lsls	r2, r4, #3
 80053b0:	4614      	mov	r4, r2
 80053b2:	461d      	mov	r5, r3
 80053b4:	4643      	mov	r3, r8
 80053b6:	18e3      	adds	r3, r4, r3
 80053b8:	603b      	str	r3, [r7, #0]
 80053ba:	464b      	mov	r3, r9
 80053bc:	eb45 0303 	adc.w	r3, r5, r3
 80053c0:	607b      	str	r3, [r7, #4]
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053ce:	4629      	mov	r1, r5
 80053d0:	028b      	lsls	r3, r1, #10
 80053d2:	4621      	mov	r1, r4
 80053d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053d8:	4621      	mov	r1, r4
 80053da:	028a      	lsls	r2, r1, #10
 80053dc:	4610      	mov	r0, r2
 80053de:	4619      	mov	r1, r3
 80053e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053e2:	2200      	movs	r2, #0
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	61fa      	str	r2, [r7, #28]
 80053e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053ec:	f7fa fefe 	bl	80001ec <__aeabi_uldivmod>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4613      	mov	r3, r2
 80053f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80053f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x200>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	0c1b      	lsrs	r3, r3, #16
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	3301      	adds	r3, #1
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005408:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800540a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800540c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005410:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005412:	e002      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005414:	4b05      	ldr	r3, [pc, #20]	@ (800542c <HAL_RCC_GetSysClockFreq+0x204>)
 8005416:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800541a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800541c:	4618      	mov	r0, r3
 800541e:	3750      	adds	r7, #80	@ 0x50
 8005420:	46bd      	mov	sp, r7
 8005422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005426:	bf00      	nop
 8005428:	40023800 	.word	0x40023800
 800542c:	00f42400 	.word	0x00f42400
 8005430:	007a1200 	.word	0x007a1200

08005434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005438:	4b03      	ldr	r3, [pc, #12]	@ (8005448 <HAL_RCC_GetHCLKFreq+0x14>)
 800543a:	681b      	ldr	r3, [r3, #0]
}
 800543c:	4618      	mov	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000010 	.word	0x20000010

0800544c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005450:	f7ff fff0 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 8005454:	4602      	mov	r2, r0
 8005456:	4b05      	ldr	r3, [pc, #20]	@ (800546c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	0a9b      	lsrs	r3, r3, #10
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	4903      	ldr	r1, [pc, #12]	@ (8005470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005462:	5ccb      	ldrb	r3, [r1, r3]
 8005464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005468:	4618      	mov	r0, r3
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40023800 	.word	0x40023800
 8005470:	08007710 	.word	0x08007710

08005474 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10b      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005498:	2b00      	cmp	r3, #0
 800549a:	d105      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d075      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80054a8:	4b91      	ldr	r3, [pc, #580]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054ae:	f7fe fb0f 	bl	8003ad0 <HAL_GetTick>
 80054b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054b4:	e008      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054b6:	f7fe fb0b 	bl	8003ad0 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d901      	bls.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e189      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054c8:	4b8a      	ldr	r3, [pc, #552]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1f0      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d009      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	019a      	lsls	r2, r3, #6
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	071b      	lsls	r3, r3, #28
 80054ec:	4981      	ldr	r1, [pc, #516]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01f      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005500:	4b7c      	ldr	r3, [pc, #496]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005506:	0f1b      	lsrs	r3, r3, #28
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	019a      	lsls	r2, r3, #6
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	061b      	lsls	r3, r3, #24
 800551a:	431a      	orrs	r2, r3
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	071b      	lsls	r3, r3, #28
 8005520:	4974      	ldr	r1, [pc, #464]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005528:	4b72      	ldr	r3, [pc, #456]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800552a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800552e:	f023 021f 	bic.w	r2, r3, #31
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	3b01      	subs	r3, #1
 8005538:	496e      	ldr	r1, [pc, #440]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00d      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	019a      	lsls	r2, r3, #6
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	061b      	lsls	r3, r3, #24
 8005558:	431a      	orrs	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	071b      	lsls	r3, r3, #28
 8005560:	4964      	ldr	r1, [pc, #400]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005562:	4313      	orrs	r3, r2
 8005564:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005568:	4b61      	ldr	r3, [pc, #388]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800556a:	2201      	movs	r2, #1
 800556c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800556e:	f7fe faaf 	bl	8003ad0 <HAL_GetTick>
 8005572:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005574:	e008      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005576:	f7fe faab 	bl	8003ad0 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e129      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005588:	4b5a      	ldr	r3, [pc, #360]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0f0      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d105      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d079      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80055ac:	4b52      	ldr	r3, [pc, #328]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055b2:	f7fe fa8d 	bl	8003ad0 <HAL_GetTick>
 80055b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055b8:	e008      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055ba:	f7fe fa89 	bl	8003ad0 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e107      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055cc:	4b49      	ldr	r3, [pc, #292]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055d8:	d0ef      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d020      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055e6:	4b43      	ldr	r3, [pc, #268]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ec:	0f1b      	lsrs	r3, r3, #28
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	019a      	lsls	r2, r3, #6
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	061b      	lsls	r3, r3, #24
 8005600:	431a      	orrs	r2, r3
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	071b      	lsls	r3, r3, #28
 8005606:	493b      	ldr	r1, [pc, #236]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800560e:	4b39      	ldr	r3, [pc, #228]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005610:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005614:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	3b01      	subs	r3, #1
 800561e:	021b      	lsls	r3, r3, #8
 8005620:	4934      	ldr	r1, [pc, #208]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01e      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005634:	4b2f      	ldr	r3, [pc, #188]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563a:	0e1b      	lsrs	r3, r3, #24
 800563c:	f003 030f 	and.w	r3, r3, #15
 8005640:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	019a      	lsls	r2, r3, #6
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	061b      	lsls	r3, r3, #24
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	071b      	lsls	r3, r3, #28
 8005654:	4927      	ldr	r1, [pc, #156]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005656:	4313      	orrs	r3, r2
 8005658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800565c:	4b25      	ldr	r3, [pc, #148]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800565e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005662:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566a:	4922      	ldr	r1, [pc, #136]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005672:	4b21      	ldr	r3, [pc, #132]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005674:	2201      	movs	r2, #1
 8005676:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005678:	f7fe fa2a 	bl	8003ad0 <HAL_GetTick>
 800567c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800567e:	e008      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005680:	f7fe fa26 	bl	8003ad0 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e0a4      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005692:	4b18      	ldr	r3, [pc, #96]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800569a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800569e:	d1ef      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0320 	and.w	r3, r3, #32
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 808b 	beq.w	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	4b10      	ldr	r3, [pc, #64]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b6:	4a0f      	ldr	r2, [pc, #60]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80056be:	4b0d      	ldr	r3, [pc, #52]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80056ca:	4b0c      	ldr	r3, [pc, #48]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a0b      	ldr	r2, [pc, #44]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80056d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056d6:	f7fe f9fb 	bl	8003ad0 <HAL_GetTick>
 80056da:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80056dc:	e010      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056de:	f7fe f9f7 	bl	8003ad0 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d909      	bls.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e075      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80056f0:	42470068 	.word	0x42470068
 80056f4:	40023800 	.word	0x40023800
 80056f8:	42470070 	.word	0x42470070
 80056fc:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005700:	4b38      	ldr	r3, [pc, #224]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0e8      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800570c:	4b36      	ldr	r3, [pc, #216]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800570e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005710:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005714:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d02f      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005720:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	429a      	cmp	r2, r3
 8005728:	d028      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800572a:	4b2f      	ldr	r3, [pc, #188]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800572c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800572e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005732:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005734:	4b2d      	ldr	r3, [pc, #180]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005736:	2201      	movs	r2, #1
 8005738:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800573a:	4b2c      	ldr	r3, [pc, #176]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005740:	4a29      	ldr	r2, [pc, #164]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005746:	4b28      	ldr	r3, [pc, #160]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b01      	cmp	r3, #1
 8005750:	d114      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005752:	f7fe f9bd 	bl	8003ad0 <HAL_GetTick>
 8005756:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005758:	e00a      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800575a:	f7fe f9b9 	bl	8003ad0 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005768:	4293      	cmp	r3, r2
 800576a:	d901      	bls.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e035      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005770:	4b1d      	ldr	r3, [pc, #116]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0ee      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005780:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005784:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005788:	d10d      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800578a:	4b17      	ldr	r3, [pc, #92]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005796:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800579a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800579e:	4912      	ldr	r1, [pc, #72]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	608b      	str	r3, [r1, #8]
 80057a4:	e005      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80057a6:	4b10      	ldr	r3, [pc, #64]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	4a0f      	ldr	r2, [pc, #60]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057ac:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80057b0:	6093      	str	r3, [r2, #8]
 80057b2:	4b0d      	ldr	r3, [pc, #52]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057be:	490a      	ldr	r1, [pc, #40]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0310 	and.w	r3, r3, #16
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d004      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80057d6:	4b06      	ldr	r3, [pc, #24]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80057d8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40007000 	.word	0x40007000
 80057e8:	40023800 	.word	0x40023800
 80057ec:	42470e40 	.word	0x42470e40
 80057f0:	424711e0 	.word	0x424711e0

080057f4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e01c      	b.n	8005840 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	795b      	ldrb	r3, [r3, #5]
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d105      	bne.n	800581c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7fd ffc4 	bl	80037a4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f042 0204 	orr.w	r2, r2, #4
 8005830:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e07b      	b.n	8005952 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585e:	2b00      	cmp	r3, #0
 8005860:	d108      	bne.n	8005874 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800586a:	d009      	beq.n	8005880 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	61da      	str	r2, [r3, #28]
 8005872:	e005      	b.n	8005880 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d106      	bne.n	80058a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fd ffa4 	bl	80037e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058d2:	431a      	orrs	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005904:	ea42 0103 	orr.w	r1, r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	0c1b      	lsrs	r3, r3, #16
 800591e:	f003 0104 	and.w	r1, r3, #4
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005926:	f003 0210 	and.w	r2, r3, #16
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69da      	ldr	r2, [r3, #28]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005940:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b082      	sub	sp, #8
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e01a      	b.n	80059a2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005982:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7fd ff77 	bl	8003878 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b088      	sub	sp, #32
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	603b      	str	r3, [r7, #0]
 80059b6:	4613      	mov	r3, r2
 80059b8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059ba:	f7fe f889 	bl	8003ad0 <HAL_GetTick>
 80059be:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80059c0:	88fb      	ldrh	r3, [r7, #6]
 80059c2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d001      	beq.n	80059d4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80059d0:	2302      	movs	r3, #2
 80059d2:	e12a      	b.n	8005c2a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <HAL_SPI_Transmit+0x36>
 80059da:	88fb      	ldrh	r3, [r7, #6]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e122      	b.n	8005c2a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d101      	bne.n	80059f2 <HAL_SPI_Transmit+0x48>
 80059ee:	2302      	movs	r3, #2
 80059f0:	e11b      	b.n	8005c2a <HAL_SPI_Transmit+0x280>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2203      	movs	r2, #3
 80059fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	88fa      	ldrh	r2, [r7, #6]
 8005a12:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	88fa      	ldrh	r2, [r7, #6]
 8005a18:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a40:	d10f      	bne.n	8005a62 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a6c:	2b40      	cmp	r3, #64	@ 0x40
 8005a6e:	d007      	beq.n	8005a80 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a88:	d152      	bne.n	8005b30 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <HAL_SPI_Transmit+0xee>
 8005a92:	8b7b      	ldrh	r3, [r7, #26]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d145      	bne.n	8005b24 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9c:	881a      	ldrh	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa8:	1c9a      	adds	r2, r3, #2
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005abc:	e032      	b.n	8005b24 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d112      	bne.n	8005af2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad0:	881a      	ldrh	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005adc:	1c9a      	adds	r2, r3, #2
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005af0:	e018      	b.n	8005b24 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005af2:	f7fd ffed 	bl	8003ad0 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d803      	bhi.n	8005b0a <HAL_SPI_Transmit+0x160>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b08:	d102      	bne.n	8005b10 <HAL_SPI_Transmit+0x166>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d109      	bne.n	8005b24 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e082      	b.n	8005c2a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1c7      	bne.n	8005abe <HAL_SPI_Transmit+0x114>
 8005b2e:	e053      	b.n	8005bd8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <HAL_SPI_Transmit+0x194>
 8005b38:	8b7b      	ldrh	r3, [r7, #26]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d147      	bne.n	8005bce <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	330c      	adds	r3, #12
 8005b48:	7812      	ldrb	r2, [r2, #0]
 8005b4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b64:	e033      	b.n	8005bce <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d113      	bne.n	8005b9c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	330c      	adds	r3, #12
 8005b7e:	7812      	ldrb	r2, [r2, #0]
 8005b80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b9a:	e018      	b.n	8005bce <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b9c:	f7fd ff98 	bl	8003ad0 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d803      	bhi.n	8005bb4 <HAL_SPI_Transmit+0x20a>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb2:	d102      	bne.n	8005bba <HAL_SPI_Transmit+0x210>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d109      	bne.n	8005bce <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e02d      	b.n	8005c2a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1c6      	bne.n	8005b66 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bd8:	69fa      	ldr	r2, [r7, #28]
 8005bda:	6839      	ldr	r1, [r7, #0]
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f8bf 	bl	8005d60 <SPI_EndRxTxTransaction>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2220      	movs	r2, #32
 8005bec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10a      	bne.n	8005c0c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	617b      	str	r3, [r7, #20]
 8005c0a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e000      	b.n	8005c2a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005c28:	2300      	movs	r3, #0
  }
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3720      	adds	r7, #32
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c40:	b2db      	uxtb	r3, r3
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
	...

08005c50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	603b      	str	r3, [r7, #0]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c60:	f7fd ff36 	bl	8003ad0 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c68:	1a9b      	subs	r3, r3, r2
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c70:	f7fd ff2e 	bl	8003ad0 <HAL_GetTick>
 8005c74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c76:	4b39      	ldr	r3, [pc, #228]	@ (8005d5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	015b      	lsls	r3, r3, #5
 8005c7c:	0d1b      	lsrs	r3, r3, #20
 8005c7e:	69fa      	ldr	r2, [r7, #28]
 8005c80:	fb02 f303 	mul.w	r3, r2, r3
 8005c84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c86:	e054      	b.n	8005d32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8e:	d050      	beq.n	8005d32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c90:	f7fd ff1e 	bl	8003ad0 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	69fa      	ldr	r2, [r7, #28]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d902      	bls.n	8005ca6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d13d      	bne.n	8005d22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005cb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cbe:	d111      	bne.n	8005ce4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cc8:	d004      	beq.n	8005cd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cd2:	d107      	bne.n	8005ce4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ce2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cec:	d10f      	bne.n	8005d0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e017      	b.n	8005d52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	bf0c      	ite	eq
 8005d42:	2301      	moveq	r3, #1
 8005d44:	2300      	movne	r3, #0
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	461a      	mov	r2, r3
 8005d4a:	79fb      	ldrb	r3, [r7, #7]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d19b      	bne.n	8005c88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3720      	adds	r7, #32
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000010 	.word	0x20000010

08005d60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2201      	movs	r2, #1
 8005d74:	2102      	movs	r1, #2
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f7ff ff6a 	bl	8005c50 <SPI_WaitFlagStateUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d007      	beq.n	8005d92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d86:	f043 0220 	orr.w	r2, r3, #32
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e032      	b.n	8005df8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d92:	4b1b      	ldr	r3, [pc, #108]	@ (8005e00 <SPI_EndRxTxTransaction+0xa0>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1b      	ldr	r2, [pc, #108]	@ (8005e04 <SPI_EndRxTxTransaction+0xa4>)
 8005d98:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9c:	0d5b      	lsrs	r3, r3, #21
 8005d9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005da2:	fb02 f303 	mul.w	r3, r2, r3
 8005da6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005db0:	d112      	bne.n	8005dd8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2200      	movs	r2, #0
 8005dba:	2180      	movs	r1, #128	@ 0x80
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f7ff ff47 	bl	8005c50 <SPI_WaitFlagStateUntilTimeout>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d016      	beq.n	8005df6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dcc:	f043 0220 	orr.w	r2, r3, #32
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e00f      	b.n	8005df8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dee:	2b80      	cmp	r3, #128	@ 0x80
 8005df0:	d0f2      	beq.n	8005dd8 <SPI_EndRxTxTransaction+0x78>
 8005df2:	e000      	b.n	8005df6 <SPI_EndRxTxTransaction+0x96>
        break;
 8005df4:	bf00      	nop
  }

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20000010 	.word	0x20000010
 8005e04:	165e9f81 	.word	0x165e9f81

08005e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e041      	b.n	8005e9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d106      	bne.n	8005e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7fd fd40 	bl	80038b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3304      	adds	r3, #4
 8005e44:	4619      	mov	r1, r3
 8005e46:	4610      	mov	r0, r2
 8005e48:	f000 f8f4 	bl	8006034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d101      	bne.n	8005ec2 <HAL_TIM_ConfigClockSource+0x1c>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	e0b4      	b.n	800602c <HAL_TIM_ConfigClockSource+0x186>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2202      	movs	r2, #2
 8005ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ee0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ee8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005efa:	d03e      	beq.n	8005f7a <HAL_TIM_ConfigClockSource+0xd4>
 8005efc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f00:	f200 8087 	bhi.w	8006012 <HAL_TIM_ConfigClockSource+0x16c>
 8005f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f08:	f000 8086 	beq.w	8006018 <HAL_TIM_ConfigClockSource+0x172>
 8005f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f10:	d87f      	bhi.n	8006012 <HAL_TIM_ConfigClockSource+0x16c>
 8005f12:	2b70      	cmp	r3, #112	@ 0x70
 8005f14:	d01a      	beq.n	8005f4c <HAL_TIM_ConfigClockSource+0xa6>
 8005f16:	2b70      	cmp	r3, #112	@ 0x70
 8005f18:	d87b      	bhi.n	8006012 <HAL_TIM_ConfigClockSource+0x16c>
 8005f1a:	2b60      	cmp	r3, #96	@ 0x60
 8005f1c:	d050      	beq.n	8005fc0 <HAL_TIM_ConfigClockSource+0x11a>
 8005f1e:	2b60      	cmp	r3, #96	@ 0x60
 8005f20:	d877      	bhi.n	8006012 <HAL_TIM_ConfigClockSource+0x16c>
 8005f22:	2b50      	cmp	r3, #80	@ 0x50
 8005f24:	d03c      	beq.n	8005fa0 <HAL_TIM_ConfigClockSource+0xfa>
 8005f26:	2b50      	cmp	r3, #80	@ 0x50
 8005f28:	d873      	bhi.n	8006012 <HAL_TIM_ConfigClockSource+0x16c>
 8005f2a:	2b40      	cmp	r3, #64	@ 0x40
 8005f2c:	d058      	beq.n	8005fe0 <HAL_TIM_ConfigClockSource+0x13a>
 8005f2e:	2b40      	cmp	r3, #64	@ 0x40
 8005f30:	d86f      	bhi.n	8006012 <HAL_TIM_ConfigClockSource+0x16c>
 8005f32:	2b30      	cmp	r3, #48	@ 0x30
 8005f34:	d064      	beq.n	8006000 <HAL_TIM_ConfigClockSource+0x15a>
 8005f36:	2b30      	cmp	r3, #48	@ 0x30
 8005f38:	d86b      	bhi.n	8006012 <HAL_TIM_ConfigClockSource+0x16c>
 8005f3a:	2b20      	cmp	r3, #32
 8005f3c:	d060      	beq.n	8006000 <HAL_TIM_ConfigClockSource+0x15a>
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	d867      	bhi.n	8006012 <HAL_TIM_ConfigClockSource+0x16c>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d05c      	beq.n	8006000 <HAL_TIM_ConfigClockSource+0x15a>
 8005f46:	2b10      	cmp	r3, #16
 8005f48:	d05a      	beq.n	8006000 <HAL_TIM_ConfigClockSource+0x15a>
 8005f4a:	e062      	b.n	8006012 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f5c:	f000 f990 	bl	8006280 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	609a      	str	r2, [r3, #8]
      break;
 8005f78:	e04f      	b.n	800601a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f8a:	f000 f979 	bl	8006280 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f9c:	609a      	str	r2, [r3, #8]
      break;
 8005f9e:	e03c      	b.n	800601a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fac:	461a      	mov	r2, r3
 8005fae:	f000 f8ed 	bl	800618c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2150      	movs	r1, #80	@ 0x50
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 f946 	bl	800624a <TIM_ITRx_SetConfig>
      break;
 8005fbe:	e02c      	b.n	800601a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fcc:	461a      	mov	r2, r3
 8005fce:	f000 f90c 	bl	80061ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2160      	movs	r1, #96	@ 0x60
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 f936 	bl	800624a <TIM_ITRx_SetConfig>
      break;
 8005fde:	e01c      	b.n	800601a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fec:	461a      	mov	r2, r3
 8005fee:	f000 f8cd 	bl	800618c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2140      	movs	r1, #64	@ 0x40
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 f926 	bl	800624a <TIM_ITRx_SetConfig>
      break;
 8005ffe:	e00c      	b.n	800601a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4619      	mov	r1, r3
 800600a:	4610      	mov	r0, r2
 800600c:	f000 f91d 	bl	800624a <TIM_ITRx_SetConfig>
      break;
 8006010:	e003      	b.n	800601a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	73fb      	strb	r3, [r7, #15]
      break;
 8006016:	e000      	b.n	800601a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006018:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800602a:	7bfb      	ldrb	r3, [r7, #15]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a46      	ldr	r2, [pc, #280]	@ (8006160 <TIM_Base_SetConfig+0x12c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d013      	beq.n	8006074 <TIM_Base_SetConfig+0x40>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006052:	d00f      	beq.n	8006074 <TIM_Base_SetConfig+0x40>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a43      	ldr	r2, [pc, #268]	@ (8006164 <TIM_Base_SetConfig+0x130>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00b      	beq.n	8006074 <TIM_Base_SetConfig+0x40>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a42      	ldr	r2, [pc, #264]	@ (8006168 <TIM_Base_SetConfig+0x134>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d007      	beq.n	8006074 <TIM_Base_SetConfig+0x40>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a41      	ldr	r2, [pc, #260]	@ (800616c <TIM_Base_SetConfig+0x138>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d003      	beq.n	8006074 <TIM_Base_SetConfig+0x40>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a40      	ldr	r2, [pc, #256]	@ (8006170 <TIM_Base_SetConfig+0x13c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d108      	bne.n	8006086 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800607a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a35      	ldr	r2, [pc, #212]	@ (8006160 <TIM_Base_SetConfig+0x12c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d02b      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006094:	d027      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a32      	ldr	r2, [pc, #200]	@ (8006164 <TIM_Base_SetConfig+0x130>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d023      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a31      	ldr	r2, [pc, #196]	@ (8006168 <TIM_Base_SetConfig+0x134>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d01f      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a30      	ldr	r2, [pc, #192]	@ (800616c <TIM_Base_SetConfig+0x138>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01b      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a2f      	ldr	r2, [pc, #188]	@ (8006170 <TIM_Base_SetConfig+0x13c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d017      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a2e      	ldr	r2, [pc, #184]	@ (8006174 <TIM_Base_SetConfig+0x140>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d013      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006178 <TIM_Base_SetConfig+0x144>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00f      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a2c      	ldr	r2, [pc, #176]	@ (800617c <TIM_Base_SetConfig+0x148>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00b      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a2b      	ldr	r2, [pc, #172]	@ (8006180 <TIM_Base_SetConfig+0x14c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d007      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a2a      	ldr	r2, [pc, #168]	@ (8006184 <TIM_Base_SetConfig+0x150>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d003      	beq.n	80060e6 <TIM_Base_SetConfig+0xb2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a29      	ldr	r2, [pc, #164]	@ (8006188 <TIM_Base_SetConfig+0x154>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d108      	bne.n	80060f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a10      	ldr	r2, [pc, #64]	@ (8006160 <TIM_Base_SetConfig+0x12c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d003      	beq.n	800612c <TIM_Base_SetConfig+0xf8>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a12      	ldr	r2, [pc, #72]	@ (8006170 <TIM_Base_SetConfig+0x13c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d103      	bne.n	8006134 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	691a      	ldr	r2, [r3, #16]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b01      	cmp	r3, #1
 8006144:	d105      	bne.n	8006152 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	f023 0201 	bic.w	r2, r3, #1
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	611a      	str	r2, [r3, #16]
  }
}
 8006152:	bf00      	nop
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	40010000 	.word	0x40010000
 8006164:	40000400 	.word	0x40000400
 8006168:	40000800 	.word	0x40000800
 800616c:	40000c00 	.word	0x40000c00
 8006170:	40010400 	.word	0x40010400
 8006174:	40014000 	.word	0x40014000
 8006178:	40014400 	.word	0x40014400
 800617c:	40014800 	.word	0x40014800
 8006180:	40001800 	.word	0x40001800
 8006184:	40001c00 	.word	0x40001c00
 8006188:	40002000 	.word	0x40002000

0800618c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	f023 0201 	bic.w	r2, r3, #1
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	011b      	lsls	r3, r3, #4
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f023 030a 	bic.w	r3, r3, #10
 80061c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	621a      	str	r2, [r3, #32]
}
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b087      	sub	sp, #28
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	f023 0210 	bic.w	r2, r3, #16
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006214:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	031b      	lsls	r3, r3, #12
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4313      	orrs	r3, r2
 800621e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006226:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	011b      	lsls	r3, r3, #4
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	4313      	orrs	r3, r2
 8006230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	621a      	str	r2, [r3, #32]
}
 800623e:	bf00      	nop
 8006240:	371c      	adds	r7, #28
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800624a:	b480      	push	{r7}
 800624c:	b085      	sub	sp, #20
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	f043 0307 	orr.w	r3, r3, #7
 800626c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	609a      	str	r2, [r3, #8]
}
 8006274:	bf00      	nop
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
 800628c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800629a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	021a      	lsls	r2, r3, #8
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	609a      	str	r2, [r3, #8]
}
 80062b4:	bf00      	nop
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d101      	bne.n	80062d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062d4:	2302      	movs	r3, #2
 80062d6:	e05a      	b.n	800638e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	4313      	orrs	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a21      	ldr	r2, [pc, #132]	@ (800639c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d022      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006324:	d01d      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a1d      	ldr	r2, [pc, #116]	@ (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d018      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a1b      	ldr	r2, [pc, #108]	@ (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d013      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a1a      	ldr	r2, [pc, #104]	@ (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00e      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a18      	ldr	r2, [pc, #96]	@ (80063ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d009      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a17      	ldr	r2, [pc, #92]	@ (80063b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d004      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a15      	ldr	r2, [pc, #84]	@ (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d10c      	bne.n	800637c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006368:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	4313      	orrs	r3, r2
 8006372:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	40010000 	.word	0x40010000
 80063a0:	40000400 	.word	0x40000400
 80063a4:	40000800 	.word	0x40000800
 80063a8:	40000c00 	.word	0x40000c00
 80063ac:	40010400 	.word	0x40010400
 80063b0:	40014000 	.word	0x40014000
 80063b4:	40001800 	.word	0x40001800

080063b8 <memset>:
 80063b8:	4402      	add	r2, r0
 80063ba:	4603      	mov	r3, r0
 80063bc:	4293      	cmp	r3, r2
 80063be:	d100      	bne.n	80063c2 <memset+0xa>
 80063c0:	4770      	bx	lr
 80063c2:	f803 1b01 	strb.w	r1, [r3], #1
 80063c6:	e7f9      	b.n	80063bc <memset+0x4>

080063c8 <__libc_init_array>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	4d0d      	ldr	r5, [pc, #52]	@ (8006400 <__libc_init_array+0x38>)
 80063cc:	4c0d      	ldr	r4, [pc, #52]	@ (8006404 <__libc_init_array+0x3c>)
 80063ce:	1b64      	subs	r4, r4, r5
 80063d0:	10a4      	asrs	r4, r4, #2
 80063d2:	2600      	movs	r6, #0
 80063d4:	42a6      	cmp	r6, r4
 80063d6:	d109      	bne.n	80063ec <__libc_init_array+0x24>
 80063d8:	4d0b      	ldr	r5, [pc, #44]	@ (8006408 <__libc_init_array+0x40>)
 80063da:	4c0c      	ldr	r4, [pc, #48]	@ (800640c <__libc_init_array+0x44>)
 80063dc:	f000 f826 	bl	800642c <_init>
 80063e0:	1b64      	subs	r4, r4, r5
 80063e2:	10a4      	asrs	r4, r4, #2
 80063e4:	2600      	movs	r6, #0
 80063e6:	42a6      	cmp	r6, r4
 80063e8:	d105      	bne.n	80063f6 <__libc_init_array+0x2e>
 80063ea:	bd70      	pop	{r4, r5, r6, pc}
 80063ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f0:	4798      	blx	r3
 80063f2:	3601      	adds	r6, #1
 80063f4:	e7ee      	b.n	80063d4 <__libc_init_array+0xc>
 80063f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063fa:	4798      	blx	r3
 80063fc:	3601      	adds	r6, #1
 80063fe:	e7f2      	b.n	80063e6 <__libc_init_array+0x1e>
 8006400:	08007720 	.word	0x08007720
 8006404:	08007720 	.word	0x08007720
 8006408:	08007720 	.word	0x08007720
 800640c:	08007724 	.word	0x08007724

08006410 <memcpy>:
 8006410:	440a      	add	r2, r1
 8006412:	4291      	cmp	r1, r2
 8006414:	f100 33ff 	add.w	r3, r0, #4294967295
 8006418:	d100      	bne.n	800641c <memcpy+0xc>
 800641a:	4770      	bx	lr
 800641c:	b510      	push	{r4, lr}
 800641e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006422:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006426:	4291      	cmp	r1, r2
 8006428:	d1f9      	bne.n	800641e <memcpy+0xe>
 800642a:	bd10      	pop	{r4, pc}

0800642c <_init>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	bf00      	nop
 8006430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006432:	bc08      	pop	{r3}
 8006434:	469e      	mov	lr, r3
 8006436:	4770      	bx	lr

08006438 <_fini>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	bf00      	nop
 800643c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643e:	bc08      	pop	{r3}
 8006440:	469e      	mov	lr, r3
 8006442:	4770      	bx	lr
