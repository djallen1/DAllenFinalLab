
DAllenFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008410  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bd4  080085bc  080085bc  000095bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a190  0800a190  0000c024  2**0
                  CONTENTS
  4 .ARM          00000008  0800a190  0800a190  0000b190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a198  0800a198  0000c024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a198  0800a198  0000b198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a19c  0800a19c  0000b19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  0800a1a0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c024  2**0
                  CONTENTS
 10 .bss          00025de0  20000024  20000024  0000c024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025e04  20025e04  0000c024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015feb  00000000  00000000  0000c054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003915  00000000  00000000  0002203f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001548  00000000  00000000  00025958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001060  00000000  00000000  00026ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000278c1  00000000  00000000  00027f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b90d  00000000  00000000  0004f7c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e313f  00000000  00000000  0006b0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014e20d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058cc  00000000  00000000  0014e250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00153b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080085a4 	.word	0x080085a4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	080085a4 	.word	0x080085a4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f004 fc20 	bl	8004d24 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f002 fc9e 	bl	8002e24 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f002 fc5b 	bl	8002da4 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f002 fd61 	bl	8002fb8 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80004f6:	f002 fe37 	bl	8003168 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80004fa:	4b05      	ldr	r3, [pc, #20]	@ (8000510 <ApplicationInit+0x34>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 8000500:	f000 f810 	bl	8000524 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED
	#endif // COMPILE_TOUCH_FUNCTIONS
	applicationButtonInit();
 8000504:	f000 f8c6 	bl	8000694 <applicationButtonInit>
	game_start_screen();
 8000508:	f002 feb4 	bl	8003274 <game_start_screen>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000088 	.word	0x20000088

08000514 <Application_game_inst>:

void Application_game_inst(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	game_init();
 8000518:	f002 fe5c 	bl	80031d4 <game_init>
	start_timer();
 800051c:	f000 f924 	bl	8000768 <start_timer>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 8000538:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800053c:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 800053e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000542:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000548:	2302      	movs	r3, #2
 800054a:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	4b0d      	ldr	r3, [pc, #52]	@ (8000588 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000554:	4a0c      	ldr	r2, [pc, #48]	@ (8000588 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	6313      	str	r3, [r2, #48]	@ 0x30
 800055c:	4b0a      	ldr	r3, [pc, #40]	@ (8000588 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800055e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000560:	f003 0301 	and.w	r3, r3, #1
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	4619      	mov	r1, r3
 800056c:	4807      	ldr	r0, [pc, #28]	@ (800058c <LCDTouchScreenInterruptGPIOInit+0x68>)
 800056e:	f004 fe3b 	bl	80051e8 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000572:	2028      	movs	r0, #40	@ 0x28
 8000574:	f004 fde9 	bl	800514a <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000578:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 800057a:	4a06      	ldr	r2, [pc, #24]	@ (8000594 <LCDTouchScreenInterruptGPIOInit+0x70>)
 800057c:	601a      	str	r2, [r3, #0]

}
 800057e:	bf00      	nop
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40023800 	.word	0x40023800
 800058c:	40020000 	.word	0x40020000
 8000590:	20000090 	.word	0x20000090
 8000594:	0600000f 	.word	0x0600000f

08000598 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 800059e:	2028      	movs	r0, #40	@ 0x28
 80005a0:	f004 fde1 	bl	8005166 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 80005a4:	2300      	movs	r3, #0
 80005a6:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 80005a8:	4b36      	ldr	r3, [pc, #216]	@ (8000684 <EXTI15_10_IRQHandler+0xec>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005ae:	e006      	b.n	80005be <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 80005b0:	204c      	movs	r0, #76	@ 0x4c
 80005b2:	f004 f93a 	bl	800482a <STMPE811_Read>
 80005b6:	4603      	mov	r3, r0
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b32      	ldr	r3, [pc, #200]	@ (8000684 <EXTI15_10_IRQHandler+0xec>)
 80005bc:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005be:	4b31      	ldr	r3, [pc, #196]	@ (8000684 <EXTI15_10_IRQHandler+0xec>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f4      	beq.n	80005b0 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 80005c6:	200a      	movs	r0, #10
 80005c8:	f002 fde4 	bl	8003194 <ReadRegisterFromTouchModule>
 80005cc:	4603      	mov	r3, r0
 80005ce:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 80005d0:	2100      	movs	r1, #0
 80005d2:	200a      	movs	r0, #10
 80005d4:	f002 fdec 	bl	80031b0 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 80005d8:	200b      	movs	r0, #11
 80005da:	f002 fddb 	bl	8003194 <ReadRegisterFromTouchModule>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b29      	ldr	r3, [pc, #164]	@ (8000688 <EXTI15_10_IRQHandler+0xf0>)
 80005e4:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 80005e6:	4b28      	ldr	r3, [pc, #160]	@ (8000688 <EXTI15_10_IRQHandler+0xf0>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 80005f0:	797b      	ldrb	r3, [r7, #5]
 80005f2:	4619      	mov	r1, r3
 80005f4:	200b      	movs	r0, #11
 80005f6:	f002 fddb 	bl	80031b0 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 80005fa:	2040      	movs	r0, #64	@ 0x40
 80005fc:	f002 fdca 	bl	8003194 <ReadRegisterFromTouchModule>
 8000600:	4603      	mov	r3, r0
 8000602:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 8000604:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000608:	2b00      	cmp	r3, #0
 800060a:	da01      	bge.n	8000610 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 800060c:	2301      	movs	r3, #1
 800060e:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d015      	beq.n	8000642 <EXTI15_10_IRQHandler+0xaa>
	{
		if(is_start_screen())
 8000616:	f002 fe3b 	bl	8003290 <is_start_screen>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <EXTI15_10_IRQHandler+0x8e>
		{
			Application_game_inst();
 8000620:	f7ff ff78 	bl	8000514 <Application_game_inst>
 8000624:	e00d      	b.n	8000642 <EXTI15_10_IRQHandler+0xaa>
		}
		else
		{
			DetermineTouchPosition(&StaticTouchData);
 8000626:	4819      	ldr	r0, [pc, #100]	@ (800068c <EXTI15_10_IRQHandler+0xf4>)
 8000628:	f002 fda9 	bl	800317e <DetermineTouchPosition>
			if(StaticTouchData.x > 120)
 800062c:	4b17      	ldr	r3, [pc, #92]	@ (800068c <EXTI15_10_IRQHandler+0xf4>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	2b78      	cmp	r3, #120	@ 0x78
 8000632:	d903      	bls.n	800063c <EXTI15_10_IRQHandler+0xa4>
			{
				game_move(RIGHT);
 8000634:	2001      	movs	r0, #1
 8000636:	f002 ff13 	bl	8003460 <game_move>
 800063a:	e002      	b.n	8000642 <EXTI15_10_IRQHandler+0xaa>
			}
			else
			{
				game_move(LEFT);
 800063c:	2000      	movs	r0, #0
 800063e:	f002 ff0f 	bl	8003460 <game_move>
			}
		}
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 8000642:	2101      	movs	r1, #1
 8000644:	204b      	movs	r0, #75	@ 0x4b
 8000646:	f004 f901 	bl	800484c <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 800064a:	2100      	movs	r1, #0
 800064c:	204b      	movs	r0, #75	@ 0x4b
 800064e:	f004 f8fd 	bl	800484c <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 8000652:	79bb      	ldrb	r3, [r7, #6]
 8000654:	4619      	mov	r1, r3
 8000656:	200a      	movs	r0, #10
 8000658:	f002 fdaa 	bl	80031b0 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 800065c:	2103      	movs	r1, #3
 800065e:	480c      	ldr	r0, [pc, #48]	@ (8000690 <EXTI15_10_IRQHandler+0xf8>)
 8000660:	f004 fdaa 	bl	80051b8 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000664:	2028      	movs	r0, #40	@ 0x28
 8000666:	f004 fd98 	bl	800519a <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800066a:	2028      	movs	r0, #40	@ 0x28
 800066c:	f004 fd6d 	bl	800514a <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000670:	797b      	ldrb	r3, [r7, #5]
 8000672:	4619      	mov	r1, r3
 8000674:	200b      	movs	r0, #11
 8000676:	f002 fd9b 	bl	80031b0 <WriteDataToTouchModule>

}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2000009c 	.word	0x2000009c
 8000688:	20000098 	.word	0x20000098
 800068c:	20000088 	.word	0x20000088
 8000690:	20000090 	.word	0x20000090

08000694 <applicationButtonInit>:
#endif // TOUCH_INTERRUPT_ENABLED

void applicationButtonInit()
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	ButtonInit();
 8000698:	f002 fa7a 	bl	8002b90 <ButtonInit>
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}

080006a0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80006a4:	2006      	movs	r0, #6
 80006a6:	f004 fd5e 	bl	8005166 <HAL_NVIC_DisableIRQ>
	//EXTI_HandleTypeDef* line = {0};
	HAL_EXTI_ClearPending(EXTI_GPIOA, EXTI_TRIGGER_RISING);
 80006aa:	2101      	movs	r1, #1
 80006ac:	2000      	movs	r0, #0
 80006ae:	f004 fd83 	bl	80051b8 <HAL_EXTI_ClearPending>
	//IRQ_enable(EXTI0_IRQ_NUMBER);
	game_rotate();
 80006b2:	f002 fe97 	bl	80033e4 <game_rotate>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006b6:	2006      	movs	r0, #6
 80006b8:	f004 fd47 	bl	800514a <HAL_NVIC_EnableIRQ>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <MX_TIM7_Init>:

static void MX_TIM7_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80006ce:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <MX_TIM7_Init+0x68>)
 80006d0:	4a16      	ldr	r2, [pc, #88]	@ (800072c <MX_TIM7_Init+0x6c>)
 80006d2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = PRESCALAR_VAL;
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_TIM7_Init+0x68>)
 80006d6:	f240 128f 	movw	r2, #399	@ 0x18f
 80006da:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <MX_TIM7_Init+0x68>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = ARR_VAL;
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_TIM7_Init+0x68>)
 80006e4:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80006e8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_TIM7_Init+0x68>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80006f0:	480d      	ldr	r0, [pc, #52]	@ (8000728 <MX_TIM7_Init+0x68>)
 80006f2:	f007 fd35 	bl	8008160 <HAL_TIM_Base_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d002      	beq.n	8000702 <MX_TIM7_Init+0x42>
  {
    APPLICATION_ASSERT(1);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f002 fa77 	bl	8002bf0 <APPLICATION_ASSERT>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	4619      	mov	r1, r3
 800070e:	4806      	ldr	r0, [pc, #24]	@ (8000728 <MX_TIM7_Init+0x68>)
 8000710:	f007 fe92 	bl	8008438 <HAL_TIMEx_MasterConfigSynchronization>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <MX_TIM7_Init+0x60>
  {
	APPLICATION_ASSERT(1);
 800071a:	2001      	movs	r0, #1
 800071c:	f002 fa68 	bl	8002bf0 <APPLICATION_ASSERT>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000040 	.word	0x20000040
 800072c:	40001400 	.word	0x40001400

08000730 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(TIM7_IRQn);
 8000734:	2037      	movs	r0, #55	@ 0x37
 8000736:	f004 fd16 	bl	8005166 <HAL_NVIC_DisableIRQ>
	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 800073a:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <TIM7_IRQHandler+0x34>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f06f 0201 	mvn.w	r2, #1
 8000742:	611a      	str	r2, [r3, #16]
	if(!game_finished())
 8000744:	f002 fedc 	bl	8003500 <game_finished>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d102      	bne.n	8000754 <TIM7_IRQHandler+0x24>
	{
		game_drop();
 800074e:	f002 fdb9 	bl	80032c4 <game_drop>
 8000752:	e001      	b.n	8000758 <TIM7_IRQHandler+0x28>
	}
	else
	{
		game_over();
 8000754:	f002 fda8 	bl	80032a8 <game_over>
	}
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000758:	2037      	movs	r0, #55	@ 0x37
 800075a:	f004 fcf6 	bl	800514a <HAL_NVIC_EnableIRQ>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000040 	.word	0x20000040

08000768 <start_timer>:

void start_timer()
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	MX_TIM7_Init();
 800076c:	f7ff ffa8 	bl	80006c0 <MX_TIM7_Init>
	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <start_timer+0x24>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f06f 0201 	mvn.w	r2, #1
 8000778:	611a      	str	r2, [r3, #16]
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800077a:	2037      	movs	r0, #55	@ 0x37
 800077c:	f004 fce5 	bl	800514a <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim7);
 8000780:	4802      	ldr	r0, [pc, #8]	@ (800078c <start_timer+0x24>)
 8000782:	f007 fd3d 	bl	8008200 <HAL_TIM_Base_Start_IT>
	//((&htim7)->Instance->SR) |= 0;
	//__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000040 	.word	0x20000040

08000790 <map_draw>:

static void MX_RNG_Init(void);
static void MX_RNG_Deinit(void);

void map_draw()
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
	//uint16_t y_len = LCD_PIXEL_HEIGHT;
	uint16_t x_len = LCD_PIXEL_WIDTH;
 8000796:	23f0      	movs	r3, #240	@ 0xf0
 8000798:	80fb      	strh	r3, [r7, #6]
	//edges of 5 pixels in width
	uint16_t x = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	80bb      	strh	r3, [r7, #4]

	//VERTICAL
	for(int i = 1; i<LCD_PIXEL_WIDTH; i+=BLOCK_WIDTH)
 800079e:	2301      	movs	r3, #1
 80007a0:	61fb      	str	r3, [r7, #28]
 80007a2:	e00d      	b.n	80007c0 <map_draw+0x30>
	{
		LCD_Draw_Vertical_Line(EDGE_WIDTH+i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	3304      	adds	r3, #4
 80007aa:	b298      	uxth	r0, r3
 80007ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b0:	f240 1235 	movw	r2, #309	@ 0x135
 80007b4:	210b      	movs	r1, #11
 80007b6:	f002 fbb1 	bl	8002f1c <LCD_Draw_Vertical_Line>
	for(int i = 1; i<LCD_PIXEL_WIDTH; i+=BLOCK_WIDTH)
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3317      	adds	r3, #23
 80007be:	61fb      	str	r3, [r7, #28]
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	2bef      	cmp	r3, #239	@ 0xef
 80007c4:	ddee      	ble.n	80007a4 <map_draw+0x14>
	}
	for(int i = 1; i<=EDGE_WIDTH; i++)
 80007c6:	2301      	movs	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	e00b      	b.n	80007e4 <map_draw+0x54>
	{
		LCD_Draw_Vertical_Line(i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	b298      	uxth	r0, r3
 80007d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007d4:	f240 1235 	movw	r2, #309	@ 0x135
 80007d8:	210b      	movs	r1, #11
 80007da:	f002 fb9f 	bl	8002f1c <LCD_Draw_Vertical_Line>
	for(int i = 1; i<=EDGE_WIDTH; i++)
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	3301      	adds	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	ddf0      	ble.n	80007cc <map_draw+0x3c>
	}
	for(int i = LCD_PIXEL_WIDTH-EDGE_WIDTH; i<=LCD_PIXEL_WIDTH; i++)
 80007ea:	23ec      	movs	r3, #236	@ 0xec
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	e00b      	b.n	8000808 <map_draw+0x78>
	{
		LCD_Draw_Vertical_Line(i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	b298      	uxth	r0, r3
 80007f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007f8:	f240 1235 	movw	r2, #309	@ 0x135
 80007fc:	210b      	movs	r1, #11
 80007fe:	f002 fb8d 	bl	8002f1c <LCD_Draw_Vertical_Line>
	for(int i = LCD_PIXEL_WIDTH-EDGE_WIDTH; i<=LCD_PIXEL_WIDTH; i++)
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	3301      	adds	r3, #1
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	2bf0      	cmp	r3, #240	@ 0xf0
 800080c:	ddf0      	ble.n	80007f0 <map_draw+0x60>
	}

	//HORIZONTAL
	for(int i = 1; i<MAP_HEIGHT; i+=BLOCK_WIDTH)
 800080e:	2301      	movs	r3, #1
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	e00c      	b.n	800082e <map_draw+0x9e>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+EDGE_WIDTH+i, x_len, LCD_COLOR_WHITE);
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	b29b      	uxth	r3, r3
 8000818:	330f      	adds	r3, #15
 800081a:	b299      	uxth	r1, r3
 800081c:	88fa      	ldrh	r2, [r7, #6]
 800081e:	88b8      	ldrh	r0, [r7, #4]
 8000820:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000824:	f002 fba1 	bl	8002f6a <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<MAP_HEIGHT; i+=BLOCK_WIDTH)
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	3317      	adds	r3, #23
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8000834:	ddee      	ble.n	8000814 <map_draw+0x84>
	}
	for(int i = 0; i<=EDGE_WIDTH; i++)
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	e00c      	b.n	8000856 <map_draw+0xc6>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+i, x_len, LCD_COLOR_WHITE);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	b29b      	uxth	r3, r3
 8000840:	330b      	adds	r3, #11
 8000842:	b299      	uxth	r1, r3
 8000844:	88fa      	ldrh	r2, [r7, #6]
 8000846:	88b8      	ldrh	r0, [r7, #4]
 8000848:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800084c:	f002 fb8d 	bl	8002f6a <LCD_Draw_Horizontal_Line>
	for(int i = 0; i<=EDGE_WIDTH; i++)
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	3301      	adds	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2b04      	cmp	r3, #4
 800085a:	ddef      	ble.n	800083c <map_draw+0xac>
	}
	for(int i = MAP_HEIGHT-EDGE_WIDTH; i<=MAP_HEIGHT; i++)
 800085c:	f240 1331 	movw	r3, #305	@ 0x131
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	e00c      	b.n	800087e <map_draw+0xee>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+i, x_len, LCD_COLOR_WHITE);
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	b29b      	uxth	r3, r3
 8000868:	330b      	adds	r3, #11
 800086a:	b299      	uxth	r1, r3
 800086c:	88fa      	ldrh	r2, [r7, #6]
 800086e:	88b8      	ldrh	r0, [r7, #4]
 8000870:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000874:	f002 fb79 	bl	8002f6a <LCD_Draw_Horizontal_Line>
	for(int i = MAP_HEIGHT-EDGE_WIDTH; i<=MAP_HEIGHT; i++)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	3301      	adds	r3, #1
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 8000884:	dbee      	blt.n	8000864 <map_draw+0xd4>
	}
}
 8000886:	bf00      	nop
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <start_screen>:

void start_screen()
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
	//uint16_t play_x = 68; //to 172
	uint16_t play_y = 106; //to 184
 8000896:	236a      	movs	r3, #106	@ 0x6a
 8000898:	80fb      	strh	r3, [r7, #6]
	//uint16_t button_height = 48;
	uint16_t button_width = LCD_PIXEL_WIDTH/2;
 800089a:	2378      	movs	r3, #120	@ 0x78
 800089c:	80bb      	strh	r3, [r7, #4]

	for(int i = 1; i<button_width/2; i++)
 800089e:	2301      	movs	r3, #1
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	e014      	b.n	80008ce <start_screen+0x3e>
	{
		LCD_Draw_Horizontal_Line(120-i, play_y+i, 2*i, LCD_COLOR_WHITE);
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 80008ac:	b298      	uxth	r0, r3
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	4413      	add	r3, r2
 80008b6:	b299      	uxth	r1, r3
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	b29a      	uxth	r2, r3
 80008c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008c4:	f002 fb51 	bl	8002f6a <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<button_width/2; i++)
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	3301      	adds	r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	88bb      	ldrh	r3, [r7, #4]
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	461a      	mov	r2, r3
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	4293      	cmp	r3, r2
 80008da:	dbe3      	blt.n	80008a4 <start_screen+0x14>
	}
	for(int i = button_width/2; i>0; i--)
 80008dc:	88bb      	ldrh	r3, [r7, #4]
 80008de:	085b      	lsrs	r3, r3, #1
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	e020      	b.n	8000928 <start_screen+0x98>
	{
		LCD_Draw_Horizontal_Line(i+button_width/2, play_y + i + (button_width/2) - 1, button_width-(2*i), LCD_COLOR_WHITE);
 80008e6:	88bb      	ldrh	r3, [r7, #4]
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	4413      	add	r3, r2
 80008f2:	b298      	uxth	r0, r3
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	88fb      	ldrh	r3, [r7, #6]
 80008fa:	4413      	add	r3, r2
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	88bb      	ldrh	r3, [r7, #4]
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	b29b      	uxth	r3, r3
 8000904:	4413      	add	r3, r2
 8000906:	b29b      	uxth	r3, r3
 8000908:	3b01      	subs	r3, #1
 800090a:	b299      	uxth	r1, r3
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	b29b      	uxth	r3, r3
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	b29b      	uxth	r3, r3
 8000914:	88ba      	ldrh	r2, [r7, #4]
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	b29a      	uxth	r2, r3
 800091a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800091e:	f002 fb24 	bl	8002f6a <LCD_Draw_Horizontal_Line>
	for(int i = button_width/2; i>0; i--)
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	3b01      	subs	r3, #1
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	2b00      	cmp	r3, #0
 800092c:	dcdb      	bgt.n	80008e6 <start_screen+0x56>
	}
	for(int i = 1; i<button_width/2 -2; i++)
 800092e:	2301      	movs	r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	e015      	b.n	8000960 <start_screen+0xd0>
	{
		LCD_Draw_Horizontal_Line(120-i, play_y+i +2 , 2*i, LCD_COLOR_BLACK);
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	b29b      	uxth	r3, r3
 8000938:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 800093c:	b298      	uxth	r0, r3
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	b29a      	uxth	r2, r3
 8000942:	88fb      	ldrh	r3, [r7, #6]
 8000944:	4413      	add	r3, r2
 8000946:	b29b      	uxth	r3, r3
 8000948:	3302      	adds	r3, #2
 800094a:	b299      	uxth	r1, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	b29b      	uxth	r3, r3
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	b29a      	uxth	r2, r3
 8000954:	2300      	movs	r3, #0
 8000956:	f002 fb08 	bl	8002f6a <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<button_width/2 -2; i++)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	3301      	adds	r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	88bb      	ldrh	r3, [r7, #4]
 8000962:	085b      	lsrs	r3, r3, #1
 8000964:	b29b      	uxth	r3, r3
 8000966:	3b02      	subs	r3, #2
 8000968:	68fa      	ldr	r2, [r7, #12]
 800096a:	429a      	cmp	r2, r3
 800096c:	dbe2      	blt.n	8000934 <start_screen+0xa4>
	}
	for(int i = button_width/2 -2; i>0; i--)
 800096e:	88bb      	ldrh	r3, [r7, #4]
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	b29b      	uxth	r3, r3
 8000974:	3b02      	subs	r3, #2
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	e023      	b.n	80009c2 <start_screen+0x132>
	{
		LCD_Draw_Horizontal_Line(i+button_width/2+1, play_y + i + (button_width/2) - 2, button_width-(2*i)-2, LCD_COLOR_BLACK);
 800097a:	88bb      	ldrh	r3, [r7, #4]
 800097c:	085b      	lsrs	r3, r3, #1
 800097e:	b29a      	uxth	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	b29b      	uxth	r3, r3
 8000984:	4413      	add	r3, r2
 8000986:	b29b      	uxth	r3, r3
 8000988:	3301      	adds	r3, #1
 800098a:	b298      	uxth	r0, r3
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	b29a      	uxth	r2, r3
 8000990:	88fb      	ldrh	r3, [r7, #6]
 8000992:	4413      	add	r3, r2
 8000994:	b29a      	uxth	r2, r3
 8000996:	88bb      	ldrh	r3, [r7, #4]
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	b29b      	uxth	r3, r3
 800099c:	4413      	add	r3, r2
 800099e:	b29b      	uxth	r3, r3
 80009a0:	3b02      	subs	r3, #2
 80009a2:	b299      	uxth	r1, r3
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	88ba      	ldrh	r2, [r7, #4]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	3b02      	subs	r3, #2
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	2300      	movs	r3, #0
 80009b8:	f002 fad7 	bl	8002f6a <LCD_Draw_Horizontal_Line>
	for(int i = button_width/2 -2; i>0; i--)
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	3b01      	subs	r3, #1
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	dcd8      	bgt.n	800097a <start_screen+0xea>
	}

	LCD_SetFont(&Font16x24);
 80009c8:	4815      	ldr	r0, [pc, #84]	@ (8000a20 <start_screen+0x190>)
 80009ca:	f002 fb27 	bl	800301c <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_RED);
 80009ce:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80009d2:	f002 fb13 	bl	8002ffc <LCD_SetTextColor>
	LCD_DisplayChar(76, 154, 'P');
 80009d6:	2250      	movs	r2, #80	@ 0x50
 80009d8:	219a      	movs	r1, #154	@ 0x9a
 80009da:	204c      	movs	r0, #76	@ 0x4c
 80009dc:	f002 fb9c 	bl	8003118 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_YELLOW);
 80009e0:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80009e4:	f002 fb0a 	bl	8002ffc <LCD_SetTextColor>
	LCD_DisplayChar(100, 154, 'L');
 80009e8:	224c      	movs	r2, #76	@ 0x4c
 80009ea:	219a      	movs	r1, #154	@ 0x9a
 80009ec:	2064      	movs	r0, #100	@ 0x64
 80009ee:	f002 fb93 	bl	8003118 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_BLUE2);
 80009f2:	f240 501f 	movw	r0, #1311	@ 0x51f
 80009f6:	f002 fb01 	bl	8002ffc <LCD_SetTextColor>
	LCD_DisplayChar(124, 154, 'A');
 80009fa:	2241      	movs	r2, #65	@ 0x41
 80009fc:	219a      	movs	r1, #154	@ 0x9a
 80009fe:	207c      	movs	r0, #124	@ 0x7c
 8000a00:	f002 fb8a 	bl	8003118 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_GREEN);
 8000a04:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000a08:	f002 faf8 	bl	8002ffc <LCD_SetTextColor>
	LCD_DisplayChar(148, 154, 'Y');
 8000a0c:	2259      	movs	r2, #89	@ 0x59
 8000a0e:	219a      	movs	r1, #154	@ 0x9a
 8000a10:	2094      	movs	r0, #148	@ 0x94
 8000a12:	f002 fb81 	bl	8003118 <LCD_DisplayChar>
}
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000004 	.word	0x20000004

08000a24 <end_screen>:

void end_screen()
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLACK);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f002 fac4 	bl	8002fb8 <LCD_Clear>
	LCD_SetFont(&Font16x24);
 8000a30:	4818      	ldr	r0, [pc, #96]	@ (8000a94 <end_screen+0x70>)
 8000a32:	f002 faf3 	bl	800301c <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a36:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000a3a:	f002 fadf 	bl	8002ffc <LCD_SetTextColor>
	LCD_DisplayChar(80, 100, 'G');
 8000a3e:	2247      	movs	r2, #71	@ 0x47
 8000a40:	2164      	movs	r1, #100	@ 0x64
 8000a42:	2050      	movs	r0, #80	@ 0x50
 8000a44:	f002 fb68 	bl	8003118 <LCD_DisplayChar>
	LCD_DisplayChar(102, 100, 'A');
 8000a48:	2241      	movs	r2, #65	@ 0x41
 8000a4a:	2164      	movs	r1, #100	@ 0x64
 8000a4c:	2066      	movs	r0, #102	@ 0x66
 8000a4e:	f002 fb63 	bl	8003118 <LCD_DisplayChar>
	LCD_DisplayChar(122, 100, 'M');
 8000a52:	224d      	movs	r2, #77	@ 0x4d
 8000a54:	2164      	movs	r1, #100	@ 0x64
 8000a56:	207a      	movs	r0, #122	@ 0x7a
 8000a58:	f002 fb5e 	bl	8003118 <LCD_DisplayChar>
	LCD_DisplayChar(144, 100, 'E');
 8000a5c:	2245      	movs	r2, #69	@ 0x45
 8000a5e:	2164      	movs	r1, #100	@ 0x64
 8000a60:	2090      	movs	r0, #144	@ 0x90
 8000a62:	f002 fb59 	bl	8003118 <LCD_DisplayChar>
	LCD_DisplayChar(80, 130, 'O');
 8000a66:	224f      	movs	r2, #79	@ 0x4f
 8000a68:	2182      	movs	r1, #130	@ 0x82
 8000a6a:	2050      	movs	r0, #80	@ 0x50
 8000a6c:	f002 fb54 	bl	8003118 <LCD_DisplayChar>
	LCD_DisplayChar(102, 130, 'V');
 8000a70:	2256      	movs	r2, #86	@ 0x56
 8000a72:	2182      	movs	r1, #130	@ 0x82
 8000a74:	2066      	movs	r0, #102	@ 0x66
 8000a76:	f002 fb4f 	bl	8003118 <LCD_DisplayChar>
	LCD_DisplayChar(122, 130, 'E');
 8000a7a:	2245      	movs	r2, #69	@ 0x45
 8000a7c:	2182      	movs	r1, #130	@ 0x82
 8000a7e:	207a      	movs	r0, #122	@ 0x7a
 8000a80:	f002 fb4a 	bl	8003118 <LCD_DisplayChar>
	LCD_DisplayChar(144, 130, 'R');
 8000a84:	2252      	movs	r2, #82	@ 0x52
 8000a86:	2182      	movs	r1, #130	@ 0x82
 8000a88:	2090      	movs	r0, #144	@ 0x90
 8000a8a:	f002 fb45 	bl	8003118 <LCD_DisplayChar>
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000004 	.word	0x20000004

08000a98 <disp_time>:

void disp_time(uint32_t time)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	uint32_t seconds = time / 1000;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a25      	ldr	r2, [pc, #148]	@ (8000b38 <disp_time+0xa0>)
 8000aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa8:	099b      	lsrs	r3, r3, #6
 8000aaa:	61fb      	str	r3, [r7, #28]
	uint32_t min = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
	uint32_t sec_tens = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
	while(seconds > 60)
 8000ab4:	e005      	b.n	8000ac2 <disp_time+0x2a>
	{
		seconds -= 60;
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b3c      	subs	r3, #60	@ 0x3c
 8000aba:	61fb      	str	r3, [r7, #28]
		min++;
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
	while(seconds > 60)
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	2b3c      	cmp	r3, #60	@ 0x3c
 8000ac6:	d8f6      	bhi.n	8000ab6 <disp_time+0x1e>
	}
	while(seconds > 10)
 8000ac8:	e005      	b.n	8000ad6 <disp_time+0x3e>
	{
		seconds -= 10;
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3b0a      	subs	r3, #10
 8000ace:	61fb      	str	r3, [r7, #28]
		sec_tens++;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	617b      	str	r3, [r7, #20]
	while(seconds > 10)
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	2b0a      	cmp	r3, #10
 8000ada:	d8f6      	bhi.n	8000aca <disp_time+0x32>
	}

	uint32_t sec_char = seconds + '0';
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	3330      	adds	r3, #48	@ 0x30
 8000ae0:	613b      	str	r3, [r7, #16]
	uint32_t sec_tens_char = sec_tens + '0';
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3330      	adds	r3, #48	@ 0x30
 8000ae6:	60fb      	str	r3, [r7, #12]
	uint32_t min_char = min + '0';
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	3330      	adds	r3, #48	@ 0x30
 8000aec:	60bb      	str	r3, [r7, #8]

	LCD_SetFont(&Font12x12);
 8000aee:	4813      	ldr	r0, [pc, #76]	@ (8000b3c <disp_time+0xa4>)
 8000af0:	f002 fa94 	bl	800301c <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000af4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000af8:	f002 fa80 	bl	8002ffc <LCD_SetTextColor>
	LCD_DisplayChar(100, 160, min_char);
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	461a      	mov	r2, r3
 8000b02:	21a0      	movs	r1, #160	@ 0xa0
 8000b04:	2064      	movs	r0, #100	@ 0x64
 8000b06:	f002 fb07 	bl	8003118 <LCD_DisplayChar>
	LCD_DisplayChar(114, 160, ':');
 8000b0a:	223a      	movs	r2, #58	@ 0x3a
 8000b0c:	21a0      	movs	r1, #160	@ 0xa0
 8000b0e:	2072      	movs	r0, #114	@ 0x72
 8000b10:	f002 fb02 	bl	8003118 <LCD_DisplayChar>
	LCD_DisplayChar(124, 160, sec_tens_char);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	21a0      	movs	r1, #160	@ 0xa0
 8000b1c:	207c      	movs	r0, #124	@ 0x7c
 8000b1e:	f002 fafb 	bl	8003118 <LCD_DisplayChar>
	LCD_DisplayChar(138, 160, sec_char);
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	461a      	mov	r2, r3
 8000b28:	21a0      	movs	r1, #160	@ 0xa0
 8000b2a:	208a      	movs	r0, #138	@ 0x8a
 8000b2c:	f002 faf4 	bl	8003118 <LCD_DisplayChar>

}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	10624dd3 	.word	0x10624dd3
 8000b3c:	2000000c 	.word	0x2000000c

08000b40 <block_drop>:

block_t block_drop(block_t *block)
{
 8000b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b42:	b091      	sub	sp, #68	@ 0x44
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
	//when timer reaches ARR and enters IRQ handler, call this function
	volatile block_t temp_tetromino = *block;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	461c      	mov	r4, r3
 8000b4e:	f107 0608 	add.w	r6, r7, #8
 8000b52:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8000b56:	4635      	mov	r5, r6
 8000b58:	4623      	mov	r3, r4
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	6859      	ldr	r1, [r3, #4]
 8000b5e:	689a      	ldr	r2, [r3, #8]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b64:	3410      	adds	r4, #16
 8000b66:	3610      	adds	r6, #16
 8000b68:	4564      	cmp	r4, ip
 8000b6a:	d1f4      	bne.n	8000b56 <block_drop+0x16>
 8000b6c:	4633      	mov	r3, r6
 8000b6e:	4622      	mov	r2, r4
 8000b70:	6810      	ldr	r0, [r2, #0]
 8000b72:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < 4; i++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b78:	e013      	b.n	8000ba2 <block_drop+0x62>
	{
		temp_tetromino.y[i] += BLOCK_WIDTH;
 8000b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b7c:	3314      	adds	r3, #20
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	3340      	adds	r3, #64	@ 0x40
 8000b82:	443b      	add	r3, r7
 8000b84:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	3317      	adds	r3, #23
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b90:	3314      	adds	r3, #20
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	3340      	adds	r3, #64	@ 0x40
 8000b96:	443b      	add	r3, r7
 8000b98:	f823 2c34 	strh.w	r2, [r3, #-52]
	for(int i = 0; i < 4; i++)
 8000b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	dde8      	ble.n	8000b7a <block_drop+0x3a>
	}
	//*block = temp_tetromino;
	return temp_tetromino;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f107 0408 	add.w	r4, r7, #8
 8000bae:	469c      	mov	ip, r3
 8000bb0:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8000bb4:	4665      	mov	r5, ip
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bba:	6028      	str	r0, [r5, #0]
 8000bbc:	6069      	str	r1, [r5, #4]
 8000bbe:	60aa      	str	r2, [r5, #8]
 8000bc0:	60eb      	str	r3, [r5, #12]
 8000bc2:	3410      	adds	r4, #16
 8000bc4:	f10c 0c10 	add.w	ip, ip, #16
 8000bc8:	4574      	cmp	r4, lr
 8000bca:	d1f3      	bne.n	8000bb4 <block_drop+0x74>
 8000bcc:	4663      	mov	r3, ip
 8000bce:	4622      	mov	r2, r4
 8000bd0:	6810      	ldr	r0, [r2, #0]
 8000bd2:	6018      	str	r0, [r3, #0]
}
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	3744      	adds	r7, #68	@ 0x44
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000bdc <block_create>:

block_t block_create()
{
 8000bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bde:	b0b1      	sub	sp, #196	@ 0xc4
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	MX_RNG_Init();
 8000be4:	f001 ff90 	bl	8002b08 <MX_RNG_Init>
	volatile block_t block = {0};
 8000be8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bec:	2234      	movs	r2, #52	@ 0x34
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f007 fc9d 	bl	8008530 <memset>
	//evaluate rng for color
	//set pos_x, pos_y
	//return the block

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8000bf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	48d0      	ldr	r0, [pc, #832]	@ (8000f40 <block_create+0x364>)
 8000bfe:	f006 ff79 	bl	8007af4 <HAL_RNG_GenerateRandomNumber>
	rand %= 7;
 8000c02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000c04:	4bcf      	ldr	r3, [pc, #828]	@ (8000f44 <block_create+0x368>)
 8000c06:	fba3 2301 	umull	r2, r3, r3, r1
 8000c0a:	1aca      	subs	r2, r1, r3
 8000c0c:	0852      	lsrs	r2, r2, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	089a      	lsrs	r2, r3, #2
 8000c12:	4613      	mov	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	1aca      	subs	r2, r1, r3
 8000c1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
	MX_RNG_Deinit();
 8000c1c:	f001 ff9c 	bl	8002b58 <MX_RNG_Deinit>

	uint8_t name = rand;
 8000c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		block.name = name;
 8000c26:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000c2a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

	uint8_t color = rand;
 8000c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c30:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

	//COLOR
	if(color == BLUE)
 8000c34:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <block_create+0x64>
	{
		block.color = LCD_COLOR_BLUE;
 8000c3c:	231f      	movs	r3, #31
 8000c3e:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == RED)
 8000c40:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d102      	bne.n	8000c4e <block_create+0x72>
	{
		block.color = LCD_COLOR_RED;
 8000c48:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c4c:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == MAGENTA)
 8000c4e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d102      	bne.n	8000c5c <block_create+0x80>
	{
		block.color = LCD_COLOR_MAGENTA;
 8000c56:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000c5a:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == GREEN)
 8000c5c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c60:	2b03      	cmp	r3, #3
 8000c62:	d102      	bne.n	8000c6a <block_create+0x8e>
	{
		block.color = LCD_COLOR_GREEN;
 8000c64:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000c68:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == CYAN)
 8000c6a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	d102      	bne.n	8000c78 <block_create+0x9c>
	{
		block.color = LCD_COLOR_CYAN;
 8000c72:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000c76:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == YELLOW)
 8000c78:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c7c:	2b05      	cmp	r3, #5
 8000c7e:	d102      	bne.n	8000c86 <block_create+0xaa>
	{
		block.color = LCD_COLOR_YELLOW;
 8000c80:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000c84:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == ORANGE)
 8000c86:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d102      	bne.n	8000c94 <block_create+0xb8>
	{
		block.color = LCD_COLOR_ORANGE;
 8000c8e:	f64f 33c1 	movw	r3, #64449	@ 0xfbc1
 8000c92:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == PURPLE)
 8000c94:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c98:	2b07      	cmp	r3, #7
 8000c9a:	d102      	bne.n	8000ca2 <block_create+0xc6>
	{
		block.color = LCD_COLOR_PURPLE;
 8000c9c:	f647 0318 	movw	r3, #30744	@ 0x7818
 8000ca0:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	//COORDINATES
	for(int i = 0; i < 4; i++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000ca8:	e017      	b.n	8000cda <block_create+0xfe>
	{
		block.x[i] = BLOCK_START_X + i*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000caa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	441a      	add	r2, r3
 8000cb6:	00d2      	lsls	r2, r2, #3
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	334b      	adds	r3, #75	@ 0x4b
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000cc4:	3310      	adds	r3, #16
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	33c0      	adds	r3, #192	@ 0xc0
 8000cca:	443b      	add	r3, r7
 8000ccc:	f823 2c8c 	strh.w	r2, [r3, #-140]
	for(int i = 0; i < 4; i++)
 8000cd0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000cda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	dde3      	ble.n	8000caa <block_create+0xce>
	}

	//BLOCK MATRICES
	if(block.name == O)
 8000ce2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d16f      	bne.n	8000dcc <block_create+0x1f0>
	{
		uint16_t temp[4][4] =
 8000cec:	4b96      	ldr	r3, [pc, #600]	@ (8000f48 <block_create+0x36c>)
 8000cee:	f107 040c 	add.w	r4, r7, #12
 8000cf2:	461d      	mov	r5, r3
 8000cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,1},
			{0,0,1,1}};

		for(int i = 0; i < 4; i++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000d06:	e028      	b.n	8000d5a <block_create+0x17e>
		{
			for(int j = 0; j < 4; j++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000d0e:	e01b      	b.n	8000d48 <block_create+0x16c>
			{
				block.mat[i][j] = temp[j][i];
 8000d10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d14:	009a      	lsls	r2, r3, #2
 8000d16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d1a:	4413      	add	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	33c0      	adds	r3, #192	@ 0xc0
 8000d20:	443b      	add	r3, r7
 8000d22:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8000d26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d2a:	009a      	lsls	r2, r3, #2
 8000d2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d30:	4413      	add	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	33c0      	adds	r3, #192	@ 0xc0
 8000d36:	443b      	add	r3, r7
 8000d38:	460a      	mov	r2, r1
 8000d3a:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8000d3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d42:	3301      	adds	r3, #1
 8000d44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000d48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	dddf      	ble.n	8000d10 <block_create+0x134>
		for(int i = 0; i < 4; i++)
 8000d50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d54:	3301      	adds	r3, #1
 8000d56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000d5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	ddd2      	ble.n	8000d08 <block_create+0x12c>
			}
		}
		for(int i = 0; i < 4; i++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000d68:	e02c      	b.n	8000dc4 <block_create+0x1e8>
		{
			block.x[i] = BLOCK_START_X + (i-1)*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000d6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	0052      	lsls	r2, r2, #1
 8000d76:	441a      	add	r2, r3
 8000d78:	00d2      	lsls	r2, r2, #3
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	334b      	adds	r3, #75	@ 0x4b
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d86:	3310      	adds	r3, #16
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	33c0      	adds	r3, #192	@ 0xc0
 8000d8c:	443b      	add	r3, r7
 8000d8e:	f823 2c8c 	strh.w	r2, [r3, #-140]
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000d92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d96:	3b02      	subs	r3, #2
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	0052      	lsls	r2, r2, #1
 8000d9e:	441a      	add	r2, r3
 8000da0:	00d2      	lsls	r2, r2, #3
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	3311      	adds	r3, #17
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000dae:	3314      	adds	r3, #20
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	33c0      	adds	r3, #192	@ 0xc0
 8000db4:	443b      	add	r3, r7
 8000db6:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 8000dba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000dc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000dc8:	2b03      	cmp	r3, #3
 8000dca:	ddce      	ble.n	8000d6a <block_create+0x18e>
		}
	}
	if(block.name == L)
 8000dcc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d16f      	bne.n	8000eb6 <block_create+0x2da>
	{
		uint16_t temp[4][4] =
 8000dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8000f4c <block_create+0x370>)
 8000dd8:	f107 040c 	add.w	r4, r7, #12
 8000ddc:	461d      	mov	r5, r3
 8000dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000de6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,1,0},
			{0,0,1,0},
			{0,0,1,1}};
		for(int i = 0; i < 4; i++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000df0:	e028      	b.n	8000e44 <block_create+0x268>
		{
			for(int j = 0; j < 4; j++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000df8:	e01b      	b.n	8000e32 <block_create+0x256>
			{
				block.mat[i][j] = temp[j][i];
 8000dfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000dfe:	009a      	lsls	r2, r3, #2
 8000e00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e04:	4413      	add	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	33c0      	adds	r3, #192	@ 0xc0
 8000e0a:	443b      	add	r3, r7
 8000e0c:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8000e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e14:	009a      	lsls	r2, r3, #2
 8000e16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e1a:	4413      	add	r3, r2
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	33c0      	adds	r3, #192	@ 0xc0
 8000e20:	443b      	add	r3, r7
 8000e22:	460a      	mov	r2, r1
 8000e24:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8000e28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000e32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	dddf      	ble.n	8000dfa <block_create+0x21e>
		for(int i = 0; i < 4; i++)
 8000e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e3e:	3301      	adds	r3, #1
 8000e40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000e44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	ddd2      	ble.n	8000df2 <block_create+0x216>
			}
		}
		for(int i = 0; i < 4; i++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000e52:	e02c      	b.n	8000eae <block_create+0x2d2>
		{
			block.x[i] = BLOCK_START_X + (i-1)*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000e54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	0052      	lsls	r2, r2, #1
 8000e60:	441a      	add	r2, r3
 8000e62:	00d2      	lsls	r2, r2, #3
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	334b      	adds	r3, #75	@ 0x4b
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e70:	3310      	adds	r3, #16
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	33c0      	adds	r3, #192	@ 0xc0
 8000e76:	443b      	add	r3, r7
 8000e78:	f823 2c8c 	strh.w	r2, [r3, #-140]
			block.y[i] = BLOCK_START_Y + (i-1)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000e7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e80:	3b01      	subs	r3, #1
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	461a      	mov	r2, r3
 8000e86:	0052      	lsls	r2, r2, #1
 8000e88:	441a      	add	r2, r3
 8000e8a:	00d2      	lsls	r2, r2, #3
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	3311      	adds	r3, #17
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e98:	3314      	adds	r3, #20
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	33c0      	adds	r3, #192	@ 0xc0
 8000e9e:	443b      	add	r3, r7
 8000ea0:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 8000ea4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000eae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	ddce      	ble.n	8000e54 <block_create+0x278>
		}
	}
	if(block.name == J)
 8000eb6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d179      	bne.n	8000fb4 <block_create+0x3d8>
	{
		uint16_t temp[4][4] =
 8000ec0:	4b23      	ldr	r3, [pc, #140]	@ (8000f50 <block_create+0x374>)
 8000ec2:	f107 040c 	add.w	r4, r7, #12
 8000ec6:	461d      	mov	r5, r3
 8000ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ecc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ed0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,1,0},
			{0,0,1,0},
			{0,1,1,0}};
		for(int i = 0; i < 4; i++)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000eda:	e028      	b.n	8000f2e <block_create+0x352>
		{
			for(int j = 0; j < 4; j++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000ee2:	e01b      	b.n	8000f1c <block_create+0x340>
			{
				block.mat[i][j] = temp[j][i];
 8000ee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ee8:	009a      	lsls	r2, r3, #2
 8000eea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000eee:	4413      	add	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	33c0      	adds	r3, #192	@ 0xc0
 8000ef4:	443b      	add	r3, r7
 8000ef6:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8000efa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000efe:	009a      	lsls	r2, r3, #2
 8000f00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f04:	4413      	add	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	33c0      	adds	r3, #192	@ 0xc0
 8000f0a:	443b      	add	r3, r7
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8000f12:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f16:	3301      	adds	r3, #1
 8000f18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000f1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	dddf      	ble.n	8000ee4 <block_create+0x308>
		for(int i = 0; i < 4; i++)
 8000f24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000f28:	3301      	adds	r3, #1
 8000f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	ddd2      	ble.n	8000edc <block_create+0x300>
			}
		}
		for(int i = 0; i < 4; i++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000f3c:	e036      	b.n	8000fac <block_create+0x3d0>
 8000f3e:	bf00      	nop
 8000f40:	200000a0 	.word	0x200000a0
 8000f44:	24924925 	.word	0x24924925
 8000f48:	080085bc 	.word	0x080085bc
 8000f4c:	080085dc 	.word	0x080085dc
 8000f50:	080085fc 	.word	0x080085fc
		{
			block.x[i] = BLOCK_START_X + i*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	0052      	lsls	r2, r2, #1
 8000f5e:	441a      	add	r2, r3
 8000f60:	00d2      	lsls	r2, r2, #3
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	334b      	adds	r3, #75	@ 0x4b
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f6e:	3310      	adds	r3, #16
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	33c0      	adds	r3, #192	@ 0xc0
 8000f74:	443b      	add	r3, r7
 8000f76:	f823 2c8c 	strh.w	r2, [r3, #-140]
			block.y[i] = BLOCK_START_Y + (i-1)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000f7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	461a      	mov	r2, r3
 8000f84:	0052      	lsls	r2, r2, #1
 8000f86:	441a      	add	r2, r3
 8000f88:	00d2      	lsls	r2, r2, #3
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	3311      	adds	r3, #17
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f96:	3314      	adds	r3, #20
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	33c0      	adds	r3, #192	@ 0xc0
 8000f9c:	443b      	add	r3, r7
 8000f9e:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 8000fa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	ddcf      	ble.n	8000f54 <block_create+0x378>
		}
	}
	if(block.name == S)
 8000fb4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d15b      	bne.n	8001076 <block_create+0x49a>
	{
		uint16_t temp[4][4] =
 8000fbe:	4bba      	ldr	r3, [pc, #744]	@ (80012a8 <block_create+0x6cc>)
 8000fc0:	f107 040c 	add.w	r4, r7, #12
 8000fc4:	461d      	mov	r5, r3
 8000fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,1},
			{0,1,1,0}};
		for(int i = 0; i < 4; i++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000fd8:	e028      	b.n	800102c <block_create+0x450>
		{
			for(int j = 0; j < 4; j++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000fe0:	e01b      	b.n	800101a <block_create+0x43e>
			{
				block.mat[i][j] = temp[j][i];
 8000fe2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000fe6:	009a      	lsls	r2, r3, #2
 8000fe8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000fec:	4413      	add	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	33c0      	adds	r3, #192	@ 0xc0
 8000ff2:	443b      	add	r3, r7
 8000ff4:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8000ff8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ffc:	009a      	lsls	r2, r3, #2
 8000ffe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001002:	4413      	add	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	33c0      	adds	r3, #192	@ 0xc0
 8001008:	443b      	add	r3, r7
 800100a:	460a      	mov	r2, r1
 800100c:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8001010:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001014:	3301      	adds	r3, #1
 8001016:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800101a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800101e:	2b03      	cmp	r3, #3
 8001020:	dddf      	ble.n	8000fe2 <block_create+0x406>
		for(int i = 0; i < 4; i++)
 8001022:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001026:	3301      	adds	r3, #1
 8001028:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800102c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001030:	2b03      	cmp	r3, #3
 8001032:	ddd2      	ble.n	8000fda <block_create+0x3fe>
			}
		}
		for(int i = 0; i < 4; i++)
 8001034:	2300      	movs	r3, #0
 8001036:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800103a:	e018      	b.n	800106e <block_create+0x492>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 800103c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001040:	3b02      	subs	r3, #2
 8001042:	b29b      	uxth	r3, r3
 8001044:	461a      	mov	r2, r3
 8001046:	0052      	lsls	r2, r2, #1
 8001048:	441a      	add	r2, r3
 800104a:	00d2      	lsls	r2, r2, #3
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	b29b      	uxth	r3, r3
 8001050:	3311      	adds	r3, #17
 8001052:	b29a      	uxth	r2, r3
 8001054:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001058:	3314      	adds	r3, #20
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	33c0      	adds	r3, #192	@ 0xc0
 800105e:	443b      	add	r3, r7
 8001060:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 8001064:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001068:	3301      	adds	r3, #1
 800106a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800106e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001072:	2b03      	cmp	r3, #3
 8001074:	dde2      	ble.n	800103c <block_create+0x460>
		}
	}
	if(block.name == Z)
 8001076:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b04      	cmp	r3, #4
 800107e:	d15b      	bne.n	8001138 <block_create+0x55c>
	{
		uint16_t temp[4][4] =
 8001080:	4b8a      	ldr	r3, [pc, #552]	@ (80012ac <block_create+0x6d0>)
 8001082:	f107 040c 	add.w	r4, r7, #12
 8001086:	461d      	mov	r5, r3
 8001088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800108a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800108c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001090:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,1,1,0},
			{0,0,1,1}};
		for(int i = 0; i < 4; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800109a:	e028      	b.n	80010ee <block_create+0x512>
		{
			for(int j = 0; j < 4; j++)
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80010a2:	e01b      	b.n	80010dc <block_create+0x500>
			{
				block.mat[i][j] = temp[j][i];
 80010a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010a8:	009a      	lsls	r2, r3, #2
 80010aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010ae:	4413      	add	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	33c0      	adds	r3, #192	@ 0xc0
 80010b4:	443b      	add	r3, r7
 80010b6:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 80010ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010be:	009a      	lsls	r2, r3, #2
 80010c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010c4:	4413      	add	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	33c0      	adds	r3, #192	@ 0xc0
 80010ca:	443b      	add	r3, r7
 80010cc:	460a      	mov	r2, r1
 80010ce:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 80010d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010d6:	3301      	adds	r3, #1
 80010d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80010dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	dddf      	ble.n	80010a4 <block_create+0x4c8>
		for(int i = 0; i < 4; i++)
 80010e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010e8:	3301      	adds	r3, #1
 80010ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80010ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	ddd2      	ble.n	800109c <block_create+0x4c0>
			}
		}
		for(int i = 0; i < 4; i++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80010fc:	e018      	b.n	8001130 <block_create+0x554>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 80010fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001102:	3b02      	subs	r3, #2
 8001104:	b29b      	uxth	r3, r3
 8001106:	461a      	mov	r2, r3
 8001108:	0052      	lsls	r2, r2, #1
 800110a:	441a      	add	r2, r3
 800110c:	00d2      	lsls	r2, r2, #3
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	b29b      	uxth	r3, r3
 8001112:	3311      	adds	r3, #17
 8001114:	b29a      	uxth	r2, r3
 8001116:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800111a:	3314      	adds	r3, #20
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	33c0      	adds	r3, #192	@ 0xc0
 8001120:	443b      	add	r3, r7
 8001122:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 8001126:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800112a:	3301      	adds	r3, #1
 800112c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001130:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001134:	2b03      	cmp	r3, #3
 8001136:	dde2      	ble.n	80010fe <block_create+0x522>
		}
	}
	if(block.name == T)
 8001138:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b05      	cmp	r3, #5
 8001140:	d149      	bne.n	80011d6 <block_create+0x5fa>
	{
		uint16_t temp[4][4] =
 8001142:	4b5b      	ldr	r3, [pc, #364]	@ (80012b0 <block_create+0x6d4>)
 8001144:	f107 040c 	add.w	r4, r7, #12
 8001148:	461d      	mov	r5, r3
 800114a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001152:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,0},
			{0,1,1,1}};
		for(int i = 0; i < 4; i++)
 8001156:	2300      	movs	r3, #0
 8001158:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800115a:	e01e      	b.n	800119a <block_create+0x5be>
		{
			for(int j = 0; j < 4; j++)
 800115c:	2300      	movs	r3, #0
 800115e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001160:	e015      	b.n	800118e <block_create+0x5b2>
			{
				block.mat[i][j] = temp[j][i];
 8001162:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001164:	009a      	lsls	r2, r3, #2
 8001166:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001168:	4413      	add	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	33c0      	adds	r3, #192	@ 0xc0
 800116e:	443b      	add	r3, r7
 8001170:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8001174:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001176:	009a      	lsls	r2, r3, #2
 8001178:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800117a:	4413      	add	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	33c0      	adds	r3, #192	@ 0xc0
 8001180:	443b      	add	r3, r7
 8001182:	460a      	mov	r2, r1
 8001184:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8001188:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800118a:	3301      	adds	r3, #1
 800118c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800118e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001190:	2b03      	cmp	r3, #3
 8001192:	dde6      	ble.n	8001162 <block_create+0x586>
		for(int i = 0; i < 4; i++)
 8001194:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001196:	3301      	adds	r3, #1
 8001198:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800119a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800119c:	2b03      	cmp	r3, #3
 800119e:	dddd      	ble.n	800115c <block_create+0x580>
			}
		}
		for(int i = 0; i < 4; i++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80011a4:	e014      	b.n	80011d0 <block_create+0x5f4>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 80011a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011a8:	3b02      	subs	r3, #2
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	461a      	mov	r2, r3
 80011ae:	0052      	lsls	r2, r2, #1
 80011b0:	441a      	add	r2, r3
 80011b2:	00d2      	lsls	r2, r2, #3
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	3311      	adds	r3, #17
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011be:	3314      	adds	r3, #20
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	33c0      	adds	r3, #192	@ 0xc0
 80011c4:	443b      	add	r3, r7
 80011c6:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 80011ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011cc:	3301      	adds	r3, #1
 80011ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80011d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	dde7      	ble.n	80011a6 <block_create+0x5ca>
		}
	}
	if(block.name == I)
 80011d6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b06      	cmp	r3, #6
 80011de:	d149      	bne.n	8001274 <block_create+0x698>
	{
		uint16_t temp[4][4] =
 80011e0:	4b34      	ldr	r3, [pc, #208]	@ (80012b4 <block_create+0x6d8>)
 80011e2:	f107 040c 	add.w	r4, r7, #12
 80011e6:	461d      	mov	r5, r3
 80011e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0},
			{1,1,1,1}};
		for(int i = 0; i < 4; i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80011f8:	e01e      	b.n	8001238 <block_create+0x65c>
		{
			for(int j = 0; j < 4; j++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80011fe:	e015      	b.n	800122c <block_create+0x650>
			{
				block.mat[i][j] = temp[j][i];
 8001200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001202:	009a      	lsls	r2, r3, #2
 8001204:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001206:	4413      	add	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	33c0      	adds	r3, #192	@ 0xc0
 800120c:	443b      	add	r3, r7
 800120e:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8001212:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001214:	009a      	lsls	r2, r3, #2
 8001216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001218:	4413      	add	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	33c0      	adds	r3, #192	@ 0xc0
 800121e:	443b      	add	r3, r7
 8001220:	460a      	mov	r2, r1
 8001222:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8001226:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001228:	3301      	adds	r3, #1
 800122a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800122c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800122e:	2b03      	cmp	r3, #3
 8001230:	dde6      	ble.n	8001200 <block_create+0x624>
		for(int i = 0; i < 4; i++)
 8001232:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001234:	3301      	adds	r3, #1
 8001236:	673b      	str	r3, [r7, #112]	@ 0x70
 8001238:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800123a:	2b03      	cmp	r3, #3
 800123c:	dddd      	ble.n	80011fa <block_create+0x61e>
			}
		}
		for(int i = 0; i < 4; i++)
 800123e:	2300      	movs	r3, #0
 8001240:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001242:	e014      	b.n	800126e <block_create+0x692>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8001244:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001246:	3b02      	subs	r3, #2
 8001248:	b29b      	uxth	r3, r3
 800124a:	461a      	mov	r2, r3
 800124c:	0052      	lsls	r2, r2, #1
 800124e:	441a      	add	r2, r3
 8001250:	00d2      	lsls	r2, r2, #3
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	b29b      	uxth	r3, r3
 8001256:	3311      	adds	r3, #17
 8001258:	b29a      	uxth	r2, r3
 800125a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800125c:	3314      	adds	r3, #20
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	33c0      	adds	r3, #192	@ 0xc0
 8001262:	443b      	add	r3, r7
 8001264:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 8001268:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800126a:	3301      	adds	r3, #1
 800126c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800126e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001270:	2b03      	cmp	r3, #3
 8001272:	dde7      	ble.n	8001244 <block_create+0x668>
		}
	}
	return block;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800127a:	469c      	mov	ip, r3
 800127c:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001280:	4665      	mov	r5, ip
 8001282:	4626      	mov	r6, r4
 8001284:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001286:	6028      	str	r0, [r5, #0]
 8001288:	6069      	str	r1, [r5, #4]
 800128a:	60aa      	str	r2, [r5, #8]
 800128c:	60eb      	str	r3, [r5, #12]
 800128e:	3410      	adds	r4, #16
 8001290:	f10c 0c10 	add.w	ip, ip, #16
 8001294:	4574      	cmp	r4, lr
 8001296:	d1f3      	bne.n	8001280 <block_create+0x6a4>
 8001298:	4663      	mov	r3, ip
 800129a:	4622      	mov	r2, r4
 800129c:	6810      	ldr	r0, [r2, #0]
 800129e:	6018      	str	r0, [r3, #0]
}
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	37c4      	adds	r7, #196	@ 0xc4
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a8:	0800861c 	.word	0x0800861c
 80012ac:	0800863c 	.word	0x0800863c
 80012b0:	0800865c 	.word	0x0800865c
 80012b4:	0800867c 	.word	0x0800867c

080012b8 <map_init>:

map_t map_init()
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 80012be:	af00      	add	r7, sp, #0
 80012c0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80012c4:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80012c8:	6018      	str	r0, [r3, #0]
	volatile map_t map = {0};
 80012ca:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80012ce:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80012d2:	4618      	mov	r0, r3
 80012d4:	f240 2336 	movw	r3, #566	@ 0x236
 80012d8:	461a      	mov	r2, r3
 80012da:	2100      	movs	r1, #0
 80012dc:	f007 f928 	bl	8008530 <memset>
	for(int i = 0; i < 10; i++)
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 80012e6:	e019      	b.n	800131c <map_init+0x64>
	{
		map.x[i] = LEFT_EDGE + i*BLOCK_WIDTH;
 80012e8:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	461a      	mov	r2, r3
 80012f0:	0052      	lsls	r2, r2, #1
 80012f2:	441a      	add	r2, r3
 80012f4:	00d2      	lsls	r2, r2, #3
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	3306      	adds	r3, #6
 80012fc:	b299      	uxth	r1, r3
 80012fe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001302:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001306:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 800130a:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 800130e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 10; i++)
 8001312:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8001316:	3301      	adds	r3, #1
 8001318:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 800131c:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8001320:	2b09      	cmp	r3, #9
 8001322:	dde1      	ble.n	80012e8 <map_init+0x30>
	}
	for(int i = 0; i < 13; i++)
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 800132a:	e01b      	b.n	8001364 <map_init+0xac>
	{
		map.y[i] = MAP_DIFFERENCE + EDGE_WIDTH + i*BLOCK_WIDTH + 2;
 800132c:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001330:	b29b      	uxth	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	0052      	lsls	r2, r2, #1
 8001336:	441a      	add	r2, r3
 8001338:	00d2      	lsls	r2, r2, #3
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	b29b      	uxth	r3, r3
 800133e:	3311      	adds	r3, #17
 8001340:	b299      	uxth	r1, r3
 8001342:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001346:	f5a3 7210 	sub.w	r2, r3, #576	@ 0x240
 800134a:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800134e:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	460a      	mov	r2, r1
 8001358:	809a      	strh	r2, [r3, #4]
	for(int i = 0; i < 13; i++)
 800135a:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800135e:	3301      	adds	r3, #1
 8001360:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8001364:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001368:	2b0c      	cmp	r3, #12
 800136a:	dddf      	ble.n	800132c <map_init+0x74>
	}
	return map;
 800136c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001370:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800137a:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f240 2336 	movw	r3, #566	@ 0x236
 8001386:	461a      	mov	r2, r3
 8001388:	f007 f8fe 	bl	8008588 <memcpy>
}
 800138c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001390:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <rest>:

uint8_t rest(block_t *block, map_t *map)
{
 800139e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a0:	f5ad 7d3d 	sub.w	sp, sp, #756	@ 0x2f4
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80013aa:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80013ae:	6018      	str	r0, [r3, #0]
 80013b0:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80013b4:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 80013b8:	6019      	str	r1, [r3, #0]
	volatile block_t temp_tetromino = *block;
 80013ba:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80013be:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	461c      	mov	r4, r3
 80013c6:	f507 7627 	add.w	r6, r7, #668	@ 0x29c
 80013ca:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80013ce:	4635      	mov	r5, r6
 80013d0:	4623      	mov	r3, r4
 80013d2:	6818      	ldr	r0, [r3, #0]
 80013d4:	6859      	ldr	r1, [r3, #4]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013dc:	3410      	adds	r4, #16
 80013de:	3610      	adds	r6, #16
 80013e0:	4564      	cmp	r4, ip
 80013e2:	d1f4      	bne.n	80013ce <rest+0x30>
 80013e4:	4633      	mov	r3, r6
 80013e6:	4622      	mov	r2, r4
 80013e8:	6810      	ldr	r0, [r2, #0]
 80013ea:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 80013ec:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80013f0:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 80013f4:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80013f8:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f240 2336 	movw	r3, #566	@ 0x236
 8001406:	461a      	mov	r2, r3
 8001408:	f007 f8be 	bl	8008588 <memcpy>

	//evaluate the logical AND between the true blocks in block_t and
	//the next row of map_t (block y_pos + block size)
	uint8_t y_max_index[4] = {0};
 800140c:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001410:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
	uint8_t x_max_index[4] = {0};
 8001418:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800141c:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
	uint16_t y_max[4] = {0};
 8001424:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001428:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800142c:	461a      	mov	r2, r3
 800142e:	2300      	movs	r3, #0
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	6053      	str	r3, [r2, #4]
	uint16_t x_max[4] = {0};
 8001434:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001438:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800143c:	461a      	mov	r2, r3
 800143e:	2300      	movs	r3, #0
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	6053      	str	r3, [r2, #4]
	for(int i = 0; i < 4; i++)
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 800144a:	e04f      	b.n	80014ec <rest+0x14e>
	{
		for(int j = 0; j < 4; j++)
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 8001452:	e036      	b.n	80014c2 <rest+0x124>
		{
			if(temp_tetromino.mat[i][j])
 8001454:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8001458:	009a      	lsls	r2, r3, #2
 800145a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 800145e:	4413      	add	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001466:	443b      	add	r3, r7
 8001468:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 800146c:	b29b      	uxth	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d019      	beq.n	80014a6 <rest+0x108>
			{
				if(j > y_max_index[i])
 8001472:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001476:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 800147a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 800147e:	4413      	add	r3, r2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8001488:	4293      	cmp	r3, r2
 800148a:	dd15      	ble.n	80014b8 <rest+0x11a>
				{
					y_max_index[i] = j;
 800148c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8001490:	b2d9      	uxtb	r1, r3
 8001492:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001496:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 800149a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 800149e:	4413      	add	r3, r2
 80014a0:	460a      	mov	r2, r1
 80014a2:	701a      	strb	r2, [r3, #0]
 80014a4:	e008      	b.n	80014b8 <rest+0x11a>
				}
			}
			else
			{
				y_max_index[i] = NO_BLOCK;
 80014a6:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80014aa:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 80014ae:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80014b2:	4413      	add	r3, r2
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++)
 80014b8:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80014bc:	3301      	adds	r3, #1
 80014be:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 80014c2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	ddc4      	ble.n	8001454 <rest+0xb6>
			}
		}
		x_max_index[i] = i;
 80014ca:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80014ce:	b2d9      	uxtb	r1, r3
 80014d0:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80014d4:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 80014d8:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80014dc:	4413      	add	r3, r2
 80014de:	460a      	mov	r2, r1
 80014e0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i++)
 80014e2:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80014e6:	3301      	adds	r3, #1
 80014e8:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 80014ec:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	ddab      	ble.n	800144c <rest+0xae>
	}
	for(int i = 0; i < 4; i++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 80014fa:	e048      	b.n	800158e <rest+0x1f0>
	{
		if(y_max_index[i] == NO_BLOCK)
 80014fc:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001500:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001504:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001508:	4413      	add	r3, r2
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d109      	bne.n	8001524 <rest+0x186>
		{
			y_max[i] = NO_BLOCK;
 8001510:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001514:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001518:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 800151c:	2100      	movs	r1, #0
 800151e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001522:	e02f      	b.n	8001584 <rest+0x1e6>
		}
		else
		{
			y_max[i] = temp_tetromino.y[y_max_index[i]];
 8001524:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001528:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 800152c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001530:	4413      	add	r3, r2
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	3314      	adds	r3, #20
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800153c:	443b      	add	r3, r7
 800153e:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8001542:	b299      	uxth	r1, r3
 8001544:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001548:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800154c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 8001550:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			x_max[i] = temp_tetromino.x[x_max_index[i]];
 8001554:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001558:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 800155c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001560:	4413      	add	r3, r2
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	3310      	adds	r3, #16
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800156c:	443b      	add	r3, r7
 800156e:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8001572:	b299      	uxth	r1, r3
 8001574:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001578:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800157c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 8001580:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 4; i++)
 8001584:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001588:	3301      	adds	r3, #1
 800158a:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 800158e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001592:	2b03      	cmp	r3, #3
 8001594:	ddb2      	ble.n	80014fc <rest+0x15e>
		}
	}

	uint8_t map_y_min_index[10] = {UINT8_MAX};
 8001596:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800159a:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 800159e:	22ff      	movs	r2, #255	@ 0xff
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	3304      	adds	r3, #4
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	809a      	strh	r2, [r3, #4]
	uint8_t map_x_min_index[10] = {UINT8_MAX};
 80015aa:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80015ae:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 80015b2:	22ff      	movs	r2, #255	@ 0xff
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	3304      	adds	r3, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	809a      	strh	r2, [r3, #4]
	uint16_t map_y_min[10];
	uint16_t map_x_min[10];
	for(int i = 0; i < 10; i++)
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 80015c4:	e055      	b.n	8001672 <rest+0x2d4>
	{
		for(int j = 0; j < 13; j++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 80015cc:	e03c      	b.n	8001648 <rest+0x2aa>
		{
			if(temp_map.map_mat[i][j])
 80015ce:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80015d2:	f5a3 7123 	sub.w	r1, r3, #652	@ 0x28c
 80015d6:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	f8d7 22dc 	ldr.w	r2, [r7, #732]	@ 0x2dc
 80015e8:	4413      	add	r3, r2
 80015ea:	3380      	adds	r3, #128	@ 0x80
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	440b      	add	r3, r1
 80015f0:	889b      	ldrh	r3, [r3, #4]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d019      	beq.n	800162c <rest+0x28e>
			{
				if(map_y_min_index[i] > j)
 80015f8:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80015fc:	f5a3 722c 	sub.w	r2, r3, #688	@ 0x2b0
 8001600:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001604:	4413      	add	r3, r2
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 800160e:	4293      	cmp	r3, r2
 8001610:	da15      	bge.n	800163e <rest+0x2a0>
				{
					map_y_min_index[i] = j;
 8001612:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8001616:	b2d9      	uxtb	r1, r3
 8001618:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800161c:	f5a3 722c 	sub.w	r2, r3, #688	@ 0x2b0
 8001620:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001624:	4413      	add	r3, r2
 8001626:	460a      	mov	r2, r1
 8001628:	701a      	strb	r2, [r3, #0]
 800162a:	e008      	b.n	800163e <rest+0x2a0>
				}
			}
			else
			{
				map_y_min_index[i] = NO_INDEX;
 800162c:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001630:	f5a3 722c 	sub.w	r2, r3, #688	@ 0x2b0
 8001634:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001638:	4413      	add	r3, r2
 800163a:	22ff      	movs	r2, #255	@ 0xff
 800163c:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 13; j++)
 800163e:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8001642:	3301      	adds	r3, #1
 8001644:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 8001648:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 800164c:	2b0c      	cmp	r3, #12
 800164e:	ddbe      	ble.n	80015ce <rest+0x230>
			}
		}
		map_x_min_index[i] = i;
 8001650:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001654:	b2d9      	uxtb	r1, r3
 8001656:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800165a:	f5a3 722f 	sub.w	r2, r3, #700	@ 0x2bc
 800165e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001662:	4413      	add	r3, r2
 8001664:	460a      	mov	r2, r1
 8001666:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++)
 8001668:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 800166c:	3301      	adds	r3, #1
 800166e:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8001672:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001676:	2b09      	cmp	r3, #9
 8001678:	dda5      	ble.n	80015c6 <rest+0x228>
	}
	for(int i = 0; i < 10; i++)
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 8001680:	e039      	b.n	80016f6 <rest+0x358>
		{
			map_y_min[i] = LCD_PIXEL_HEIGHT;
		}
		else
		{
			map_y_min[i] = temp_map.y[map_y_min_index[i]];
 8001682:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001686:	f5a3 722c 	sub.w	r2, r3, #688	@ 0x2b0
 800168a:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 800168e:	4413      	add	r3, r2
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	4619      	mov	r1, r3
 8001694:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001698:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 800169c:	f501 7386 	add.w	r3, r1, #268	@ 0x10c
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	889b      	ldrh	r3, [r3, #4]
 80016a6:	b299      	uxth	r1, r3
 80016a8:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80016ac:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 80016b0:	f8d7 22d8 	ldr.w	r2, [r7, #728]	@ 0x2d8
 80016b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			map_x_min[i] = temp_map.x[map_x_min_index[i]];
 80016b8:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80016bc:	f5a3 722f 	sub.w	r2, r3, #700	@ 0x2bc
 80016c0:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 80016c4:	4413      	add	r3, r2
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80016ce:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80016d2:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80016d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80016da:	b299      	uxth	r1, r3
 80016dc:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80016e0:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 80016e4:	f8d7 22d8 	ldr.w	r2, [r7, #728]	@ 0x2d8
 80016e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 10; i++)
 80016ec:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 80016f0:	3301      	adds	r3, #1
 80016f2:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 80016f6:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 80016fa:	2b09      	cmp	r3, #9
 80016fc:	ddc1      	ble.n	8001682 <rest+0x2e4>
		}
	}

	uint8_t overlap_map_x_index[4];
	for(int i = 0; i < 4; i++)
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 8001704:	e02f      	b.n	8001766 <rest+0x3c8>
	{
		for(int j = 0; j < 10; j++)
 8001706:	2300      	movs	r3, #0
 8001708:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 800170c:	e022      	b.n	8001754 <rest+0x3b6>
		{
			if(x_max[i] == map_x_min[j])
 800170e:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001712:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001716:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 800171a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800171e:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001722:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8001726:	f8d7 12d0 	ldr.w	r1, [r7, #720]	@ 0x2d0
 800172a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800172e:	429a      	cmp	r2, r3
 8001730:	d10b      	bne.n	800174a <rest+0x3ac>
			{
				overlap_map_x_index[i] = j;
 8001732:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 8001736:	b2d9      	uxtb	r1, r3
 8001738:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800173c:	f5a3 723a 	sub.w	r2, r3, #744	@ 0x2e8
 8001740:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8001744:	4413      	add	r3, r2
 8001746:	460a      	mov	r2, r1
 8001748:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 10; j++)
 800174a:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 800174e:	3301      	adds	r3, #1
 8001750:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8001754:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 8001758:	2b09      	cmp	r3, #9
 800175a:	ddd8      	ble.n	800170e <rest+0x370>
	for(int i = 0; i < 4; i++)
 800175c:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8001760:	3301      	adds	r3, #1
 8001762:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 8001766:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 800176a:	2b03      	cmp	r3, #3
 800176c:	ddcb      	ble.n	8001706 <rest+0x368>
		}
	}

//	for(int i = 0; i < 4; i++)
//	{
		if(map_y_min[overlap_map_x_index[0]] == y_max[0] + BLOCK_WIDTH || y_max[0] == BOTTOM_ROW)
 800176e:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001772:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800177e:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8001782:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001786:	461a      	mov	r2, r3
 8001788:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800178c:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	3317      	adds	r3, #23
 8001794:	429a      	cmp	r2, r3
 8001796:	d008      	beq.n	80017aa <rest+0x40c>
 8001798:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800179c:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	f240 1225 	movw	r2, #293	@ 0x125
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d101      	bne.n	80017ae <rest+0x410>
		{
			return 1;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e060      	b.n	8001870 <rest+0x4d2>
		}
		else if(map_y_min[overlap_map_x_index[1]] == y_max[1] + BLOCK_WIDTH || y_max[1] == BOTTOM_ROW)
 80017ae:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80017b2:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80017b6:	785b      	ldrb	r3, [r3, #1]
 80017b8:	461a      	mov	r2, r3
 80017ba:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80017be:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 80017c2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80017c6:	461a      	mov	r2, r3
 80017c8:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80017cc:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80017d0:	885b      	ldrh	r3, [r3, #2]
 80017d2:	3317      	adds	r3, #23
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d008      	beq.n	80017ea <rest+0x44c>
 80017d8:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80017dc:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80017e0:	885b      	ldrh	r3, [r3, #2]
 80017e2:	f240 1225 	movw	r2, #293	@ 0x125
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d101      	bne.n	80017ee <rest+0x450>
		{
			return 1;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e040      	b.n	8001870 <rest+0x4d2>
		}
		else if(map_y_min[overlap_map_x_index[2]] == y_max[2] + BLOCK_WIDTH || y_max[2] == BOTTOM_ROW)
 80017ee:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80017f2:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80017f6:	789b      	ldrb	r3, [r3, #2]
 80017f8:	461a      	mov	r2, r3
 80017fa:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80017fe:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8001802:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001806:	461a      	mov	r2, r3
 8001808:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800180c:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001810:	889b      	ldrh	r3, [r3, #4]
 8001812:	3317      	adds	r3, #23
 8001814:	429a      	cmp	r2, r3
 8001816:	d008      	beq.n	800182a <rest+0x48c>
 8001818:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800181c:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001820:	889b      	ldrh	r3, [r3, #4]
 8001822:	f240 1225 	movw	r2, #293	@ 0x125
 8001826:	4293      	cmp	r3, r2
 8001828:	d101      	bne.n	800182e <rest+0x490>
		{
			return 1;
 800182a:	2301      	movs	r3, #1
 800182c:	e020      	b.n	8001870 <rest+0x4d2>
		}
		else if(map_y_min[overlap_map_x_index[3]] == y_max[3] + BLOCK_WIDTH || y_max[3] == BOTTOM_ROW)
 800182e:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001832:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8001836:	78db      	ldrb	r3, [r3, #3]
 8001838:	461a      	mov	r2, r3
 800183a:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800183e:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8001842:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001846:	461a      	mov	r2, r3
 8001848:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800184c:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001850:	88db      	ldrh	r3, [r3, #6]
 8001852:	3317      	adds	r3, #23
 8001854:	429a      	cmp	r2, r3
 8001856:	d008      	beq.n	800186a <rest+0x4cc>
 8001858:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800185c:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001860:	88db      	ldrh	r3, [r3, #6]
 8001862:	f240 1225 	movw	r2, #293	@ 0x125
 8001866:	4293      	cmp	r3, r2
 8001868:	d101      	bne.n	800186e <rest+0x4d0>
		{
			return 1;
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <rest+0x4d2>
		}
//	}
	return 0;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	f507 773d 	add.w	r7, r7, #756	@ 0x2f4
 8001876:	46bd      	mov	sp, r7
 8001878:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800187a <map_update>:

map_t map_update(block_t *block, map_t* map)
{
 800187a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187c:	f5ad 7d2d 	sub.w	sp, sp, #692	@ 0x2b4
 8001880:	af00      	add	r7, sp, #0
 8001882:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001886:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800188a:	6018      	str	r0, [r3, #0]
 800188c:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001890:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8001894:	6019      	str	r1, [r3, #0]
 8001896:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800189a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800189e:	601a      	str	r2, [r3, #0]
	//append the map array with the new blocks in their respective coordinates
	//create new block
	volatile block_t temp_tetromino = *block;
 80018a0:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018a4:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	461c      	mov	r4, r3
 80018ac:	f507 7618 	add.w	r6, r7, #608	@ 0x260
 80018b0:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80018b4:	4635      	mov	r5, r6
 80018b6:	4623      	mov	r3, r4
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c2:	3410      	adds	r4, #16
 80018c4:	3610      	adds	r6, #16
 80018c6:	4564      	cmp	r4, ip
 80018c8:	d1f4      	bne.n	80018b4 <map_update+0x3a>
 80018ca:	4633      	mov	r3, r6
 80018cc:	4622      	mov	r2, r4
 80018ce:	6810      	ldr	r0, [r2, #0]
 80018d0:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 80018d2:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018d6:	f5a3 7222 	sub.w	r2, r3, #648	@ 0x288
 80018da:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018de:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	f240 2336 	movw	r3, #566	@ 0x236
 80018ec:	461a      	mov	r2, r3
 80018ee:	f006 fe4b 	bl	8008588 <memcpy>

	uint8_t y_index[4];
	uint8_t x_index[4];
	uint16_t y_coor[4];
	uint16_t x_coor[4];
	uint8_t ind = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f887 32af 	strb.w	r3, [r7, #687]	@ 0x2af

	for(int i = 0; i < 4; i++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 80018fe:	e039      	b.n	8001974 <map_update+0xfa>
	{
		for(int j = 0; j < 4; j++)
 8001900:	2300      	movs	r3, #0
 8001902:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8001906:	e02c      	b.n	8001962 <map_update+0xe8>
		{
			if(temp_tetromino.mat[i][j])
 8001908:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 800190c:	009a      	lsls	r2, r3, #2
 800190e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8001912:	4413      	add	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800191a:	443b      	add	r3, r7
 800191c:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 8001920:	b29b      	uxth	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d018      	beq.n	8001958 <map_update+0xde>
			{
				x_index[ind] = i;
 8001926:	f897 32af 	ldrb.w	r3, [r7, #687]	@ 0x2af
 800192a:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 800192e:	b2d1      	uxtb	r1, r2
 8001930:	f507 722c 	add.w	r2, r7, #688	@ 0x2b0
 8001934:	f5a2 7224 	sub.w	r2, r2, #656	@ 0x290
 8001938:	54d1      	strb	r1, [r2, r3]
				y_index[ind] = j;
 800193a:	f897 32af 	ldrb.w	r3, [r7, #687]	@ 0x2af
 800193e:	f8d7 22a4 	ldr.w	r2, [r7, #676]	@ 0x2a4
 8001942:	b2d1      	uxtb	r1, r2
 8001944:	f507 722c 	add.w	r2, r7, #688	@ 0x2b0
 8001948:	f5a2 7223 	sub.w	r2, r2, #652	@ 0x28c
 800194c:	54d1      	strb	r1, [r2, r3]
				ind++;
 800194e:	f897 32af 	ldrb.w	r3, [r7, #687]	@ 0x2af
 8001952:	3301      	adds	r3, #1
 8001954:	f887 32af 	strb.w	r3, [r7, #687]	@ 0x2af
		for(int j = 0; j < 4; j++)
 8001958:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800195c:	3301      	adds	r3, #1
 800195e:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8001962:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8001966:	2b03      	cmp	r3, #3
 8001968:	ddce      	ble.n	8001908 <map_update+0x8e>
	for(int i = 0; i < 4; i++)
 800196a:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 800196e:	3301      	adds	r3, #1
 8001970:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8001974:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8001978:	2b03      	cmp	r3, #3
 800197a:	ddc1      	ble.n	8001900 <map_update+0x86>
			}
		}
	}
	for(int i = 0; i < 4; i++)
 800197c:	2300      	movs	r3, #0
 800197e:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8001982:	e034      	b.n	80019ee <map_update+0x174>
	{
		if(x_index[i]>NO_INDEX && y_index[i]>NO_INDEX)
		{
			x_coor[i] = temp_tetromino.x[x_index[i]];
 8001984:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001988:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 800198c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001990:	4413      	add	r3, r2
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	3310      	adds	r3, #16
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800199c:	443b      	add	r3, r7
 800199e:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 80019a2:	b299      	uxth	r1, r3
 80019a4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80019a8:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80019ac:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80019b0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			y_coor[i] = temp_tetromino.y[y_index[i]];
 80019b4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80019b8:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 80019bc:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80019c0:	4413      	add	r3, r2
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	3314      	adds	r3, #20
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80019cc:	443b      	add	r3, r7
 80019ce:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 80019d2:	b299      	uxth	r1, r3
 80019d4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80019d8:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80019dc:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80019e0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 4; i++)
 80019e4:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80019e8:	3301      	adds	r3, #1
 80019ea:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 80019ee:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	ddc6      	ble.n	8001984 <map_update+0x10a>
		}
	}

	//get indices for the map coordinates corresponding to the block coordinates
	//set the map logical matrix, and the color
	uint8_t index = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f887 329f 	strb.w	r3, [r7, #671]	@ 0x29f
	for(int i = 0; i < 10; i++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 8001a02:	e068      	b.n	8001ad6 <map_update+0x25c>
	{
		for(int j = 0; j < 13; j++)
 8001a04:	2300      	movs	r3, #0
 8001a06:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8001a0a:	e05b      	b.n	8001ac4 <map_update+0x24a>
		{
			if(temp_map.x[i] == x_coor[index] && temp_map.y[j] == y_coor[index])
 8001a0c:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a10:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8001a14:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001a18:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001a1c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	f897 129f 	ldrb.w	r1, [r7, #671]	@ 0x29f
 8001a26:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a2a:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001a2e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d141      	bne.n	8001aba <map_update+0x240>
 8001a36:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a3a:	f5a3 7222 	sub.w	r2, r3, #648	@ 0x288
 8001a3e:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001a42:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	889b      	ldrh	r3, [r3, #4]
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	f897 129f 	ldrb.w	r1, [r7, #671]	@ 0x29f
 8001a52:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a56:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001a5a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d12b      	bne.n	8001aba <map_update+0x240>
			{
				temp_map.map_mat[i][j] = ON;
 8001a62:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a66:	f5a3 7122 	sub.w	r1, r3, #648	@ 0x288
 8001a6a:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3380      	adds	r3, #128	@ 0x80
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	440b      	add	r3, r1
 8001a84:	2201      	movs	r2, #1
 8001a86:	809a      	strh	r2, [r3, #4]
				temp_map.map_color[i][j] = temp_tetromino.color;
 8001a88:	f8b7 3262 	ldrh.w	r3, [r7, #610]	@ 0x262
 8001a8c:	b298      	uxth	r0, r3
 8001a8e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a92:	f5a3 7122 	sub.w	r1, r3, #648	@ 0x288
 8001a96:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4602      	mov	r2, r0
 8001aac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				index++;
 8001ab0:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	f887 329f 	strb.w	r3, [r7, #671]	@ 0x29f
		for(int j = 0; j < 13; j++)
 8001aba:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8001ac4:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001ac8:	2b0c      	cmp	r3, #12
 8001aca:	dd9f      	ble.n	8001a0c <map_update+0x192>
	for(int i = 0; i < 10; i++)
 8001acc:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 8001ad6:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8001ada:	2b09      	cmp	r3, #9
 8001adc:	dd92      	ble.n	8001a04 <map_update+0x18a>
			}
		}
	}

	return temp_map;
 8001ade:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001ae2:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001aec:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f240 2336 	movw	r3, #566	@ 0x236
 8001af8:	461a      	mov	r2, r3
 8001afa:	f006 fd45 	bl	8008588 <memcpy>
}
 8001afe:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001b02:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b10 <block_rotate>:

block_t block_rotate(block_t *block)
{
 8001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b12:	b0a9      	sub	sp, #164	@ 0xa4
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
	block_t temp_block = *block;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	461c      	mov	r4, r3
 8001b1e:	f107 0640 	add.w	r6, r7, #64	@ 0x40
 8001b22:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8001b26:	4635      	mov	r5, r6
 8001b28:	4623      	mov	r3, r4
 8001b2a:	6818      	ldr	r0, [r3, #0]
 8001b2c:	6859      	ldr	r1, [r3, #4]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b34:	3410      	adds	r4, #16
 8001b36:	3610      	adds	r6, #16
 8001b38:	4564      	cmp	r4, ip
 8001b3a:	d1f4      	bne.n	8001b26 <block_rotate+0x16>
 8001b3c:	4633      	mov	r3, r6
 8001b3e:	4622      	mov	r2, r4
 8001b40:	6810      	ldr	r0, [r2, #0]
 8001b42:	6018      	str	r0, [r3, #0]
	if(temp_block.name == O)
 8001b44:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d116      	bne.n	8001b7c <block_rotate+0x6c>
	{
		return temp_block;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001b54:	469c      	mov	ip, r3
 8001b56:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001b5a:	4665      	mov	r5, ip
 8001b5c:	4626      	mov	r6, r4
 8001b5e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b60:	6028      	str	r0, [r5, #0]
 8001b62:	6069      	str	r1, [r5, #4]
 8001b64:	60aa      	str	r2, [r5, #8]
 8001b66:	60eb      	str	r3, [r5, #12]
 8001b68:	3410      	adds	r4, #16
 8001b6a:	f10c 0c10 	add.w	ip, ip, #16
 8001b6e:	4574      	cmp	r4, lr
 8001b70:	d1f3      	bne.n	8001b5a <block_rotate+0x4a>
 8001b72:	4663      	mov	r3, ip
 8001b74:	4622      	mov	r2, r4
 8001b76:	6810      	ldr	r0, [r2, #0]
 8001b78:	6018      	str	r0, [r3, #0]
 8001b7a:	e15e      	b.n	8001e3a <block_rotate+0x32a>
	}

	if(temp_block.name == I)
 8001b7c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d163      	bne.n	8001c4e <block_rotate+0x13e>
	{
		uint8_t transpose[4][4];
		for(int i = 0; i < 4; i++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001b8c:	e029      	b.n	8001be2 <block_rotate+0xd2>
		{
			for(int j = 0; j < 4; j++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001b94:	e01c      	b.n	8001bd0 <block_rotate+0xc0>
			{
				transpose[i][j] = temp_block.mat[j][i];
 8001b96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b9a:	009a      	lsls	r2, r3, #2
 8001b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ba0:	4413      	add	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	33a0      	adds	r3, #160	@ 0xa0
 8001ba6:	443b      	add	r3, r7
 8001ba8:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	b2d9      	uxtb	r1, r3
 8001bb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	33a0      	adds	r3, #160	@ 0xa0
 8001bb8:	19da      	adds	r2, r3, r7
 8001bba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3b70      	subs	r3, #112	@ 0x70
 8001bc2:	460a      	mov	r2, r1
 8001bc4:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 4; j++)
 8001bc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001bca:	3301      	adds	r3, #1
 8001bcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	ddde      	ble.n	8001b96 <block_rotate+0x86>
		for(int i = 0; i < 4; i++)
 8001bd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001bdc:	3301      	adds	r3, #1
 8001bde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001be2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	ddd1      	ble.n	8001b8e <block_rotate+0x7e>
			}
		}
		for(int i = 0; i < 4; i++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001bf0:	e028      	b.n	8001c44 <block_rotate+0x134>
		{
			for(int j = 0; j < 4; j++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001bf8:	e01b      	b.n	8001c32 <block_rotate+0x122>
			{
				temp_block.mat[i][j] = transpose[i][j];
 8001bfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	33a0      	adds	r3, #160	@ 0xa0
 8001c02:	19da      	adds	r2, r3, r7
 8001c04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c08:	4413      	add	r3, r2
 8001c0a:	3b70      	subs	r3, #112	@ 0x70
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c14:	009a      	lsls	r2, r3, #2
 8001c16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c1a:	4413      	add	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	33a0      	adds	r3, #160	@ 0xa0
 8001c20:	443b      	add	r3, r7
 8001c22:	460a      	mov	r2, r1
 8001c24:	f823 2c5c 	strh.w	r2, [r3, #-92]
			for(int j = 0; j < 4; j++)
 8001c28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001c32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	dddf      	ble.n	8001bfa <block_rotate+0xea>
		for(int i = 0; i < 4; i++)
 8001c3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c3e:	3301      	adds	r3, #1
 8001c40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	ddd2      	ble.n	8001bf2 <block_rotate+0xe2>
 8001c4c:	e0df      	b.n	8001e0e <block_rotate+0x2fe>
			}
		}
	}


	else if(temp_block.name != O)
 8001c4e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80da 	beq.w	8001e0e <block_rotate+0x2fe>
	{
		uint8_t transpose_3x3[3][3];
		uint8_t transform[3][3];
		uint8_t mirror_identity[3][3] =
 8001c5a:	4a7a      	ldr	r2, [pc, #488]	@ (8001e44 <block_rotate+0x334>)
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c62:	c303      	stmia	r3!, {r0, r1}
 8001c64:	701a      	strb	r2, [r3, #0]
		{{0, 0, 1},
		{0, 1, 0},
		{1, 0, 0}};

		for(int i = 1; i < 4; i++)
 8001c66:	2301      	movs	r3, #1
 8001c68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001c6c:	e02d      	b.n	8001cca <block_rotate+0x1ba>
		{
			for(int j = 1; j < 4; j++)
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001c74:	e020      	b.n	8001cb8 <block_rotate+0x1a8>
			{
				transpose_3x3[i-1][j-1] = temp_block.mat[j][i];
 8001c76:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c7a:	009a      	lsls	r2, r3, #2
 8001c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c80:	4413      	add	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	33a0      	adds	r3, #160	@ 0xa0
 8001c86:	443b      	add	r3, r7
 8001c88:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8001c8c:	b298      	uxth	r0, r3
 8001c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c92:	1e5a      	subs	r2, r3, #1
 8001c94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c98:	1e59      	subs	r1, r3, #1
 8001c9a:	b2c0      	uxtb	r0, r0
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	33a0      	adds	r3, #160	@ 0xa0
 8001ca4:	443b      	add	r3, r7
 8001ca6:	440b      	add	r3, r1
 8001ca8:	3b7c      	subs	r3, #124	@ 0x7c
 8001caa:	4602      	mov	r2, r0
 8001cac:	701a      	strb	r2, [r3, #0]
			for(int j = 1; j < 4; j++)
 8001cae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001cb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	ddda      	ble.n	8001c76 <block_rotate+0x166>
		for(int i = 1; i < 4; i++)
 8001cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	ddcd      	ble.n	8001c6e <block_rotate+0x15e>
			}
		}

		for(int k = 0; k < 3; k++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001cd8:	e05b      	b.n	8001d92 <block_rotate+0x282>
		{
			for(int i = 0; i < 3; i++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001ce0:	e04e      	b.n	8001d80 <block_rotate+0x270>
			{
				transform[k][i] = 0;
 8001ce2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	33a0      	adds	r3, #160	@ 0xa0
 8001cee:	19da      	adds	r2, r3, r7
 8001cf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3b88      	subs	r3, #136	@ 0x88
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
				for(int j = 0; j < 3; j++)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d00:	e036      	b.n	8001d70 <block_rotate+0x260>
				{
					transform[k][i] += (transpose_3x3[k][j] * mirror_identity[j][i]);
 8001d02:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001d06:	4613      	mov	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4413      	add	r3, r2
 8001d0c:	33a0      	adds	r3, #160	@ 0xa0
 8001d0e:	19da      	adds	r2, r3, r7
 8001d10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d14:	4413      	add	r3, r2
 8001d16:	3b88      	subs	r3, #136	@ 0x88
 8001d18:	7819      	ldrb	r1, [r3, #0]
 8001d1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001d1e:	4613      	mov	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	33a0      	adds	r3, #160	@ 0xa0
 8001d26:	19da      	adds	r2, r3, r7
 8001d28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3b7c      	subs	r3, #124	@ 0x7c
 8001d2e:	7818      	ldrb	r0, [r3, #0]
 8001d30:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	33a0      	adds	r3, #160	@ 0xa0
 8001d3a:	19da      	adds	r2, r3, r7
 8001d3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d40:	4413      	add	r3, r2
 8001d42:	3b94      	subs	r3, #148	@ 0x94
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	fb10 f303 	smulbb	r3, r0, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	440b      	add	r3, r1
 8001d4e:	b2d9      	uxtb	r1, r3
 8001d50:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	33a0      	adds	r3, #160	@ 0xa0
 8001d5c:	19da      	adds	r2, r3, r7
 8001d5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d62:	4413      	add	r3, r2
 8001d64:	3b88      	subs	r3, #136	@ 0x88
 8001d66:	460a      	mov	r2, r1
 8001d68:	701a      	strb	r2, [r3, #0]
				for(int j = 0; j < 3; j++)
 8001d6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	ddc5      	ble.n	8001d02 <block_rotate+0x1f2>
			for(int i = 0; i < 3; i++)
 8001d76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	ddac      	ble.n	8001ce2 <block_rotate+0x1d2>
		for(int k = 0; k < 3; k++)
 8001d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001d92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	dd9f      	ble.n	8001cda <block_rotate+0x1ca>
				}
			}
		}

		for(int i = 0; i < 4; i++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d9e:	e033      	b.n	8001e08 <block_rotate+0x2f8>
		{
			for(int j = 0; j < 4; j++)
 8001da0:	2300      	movs	r3, #0
 8001da2:	677b      	str	r3, [r7, #116]	@ 0x74
 8001da4:	e02a      	b.n	8001dfc <block_rotate+0x2ec>
			{
				if(i == 0 || j == 0)
 8001da6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <block_rotate+0x2a2>
 8001dac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10a      	bne.n	8001dc8 <block_rotate+0x2b8>
				{
					temp_block.mat[i][j] = 0;
 8001db2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001db4:	009a      	lsls	r2, r3, #2
 8001db6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001db8:	4413      	add	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	33a0      	adds	r3, #160	@ 0xa0
 8001dbe:	443b      	add	r3, r7
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f823 2c5c 	strh.w	r2, [r3, #-92]
 8001dc6:	e016      	b.n	8001df6 <block_rotate+0x2e6>
				}
				else
				{
					temp_block.mat[i][j] = transform[i-1][j-1];
 8001dc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001dca:	1e5a      	subs	r2, r3, #1
 8001dcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dce:	1e59      	subs	r1, r3, #1
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	33a0      	adds	r3, #160	@ 0xa0
 8001dd8:	443b      	add	r3, r7
 8001dda:	440b      	add	r3, r1
 8001ddc:	3b88      	subs	r3, #136	@ 0x88
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001de4:	009a      	lsls	r2, r3, #2
 8001de6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001de8:	4413      	add	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	33a0      	adds	r3, #160	@ 0xa0
 8001dee:	443b      	add	r3, r7
 8001df0:	460a      	mov	r2, r1
 8001df2:	f823 2c5c 	strh.w	r2, [r3, #-92]
			for(int j = 0; j < 4; j++)
 8001df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001df8:	3301      	adds	r3, #1
 8001dfa:	677b      	str	r3, [r7, #116]	@ 0x74
 8001dfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	ddd1      	ble.n	8001da6 <block_rotate+0x296>
		for(int i = 0; i < 4; i++)
 8001e02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e04:	3301      	adds	r3, #1
 8001e06:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	ddc8      	ble.n	8001da0 <block_rotate+0x290>
				}
			}
		}
	}
	return temp_block;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001e14:	469c      	mov	ip, r3
 8001e16:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001e1a:	4665      	mov	r5, ip
 8001e1c:	4626      	mov	r6, r4
 8001e1e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e20:	6028      	str	r0, [r5, #0]
 8001e22:	6069      	str	r1, [r5, #4]
 8001e24:	60aa      	str	r2, [r5, #8]
 8001e26:	60eb      	str	r3, [r5, #12]
 8001e28:	3410      	adds	r4, #16
 8001e2a:	f10c 0c10 	add.w	ip, ip, #16
 8001e2e:	4574      	cmp	r4, lr
 8001e30:	d1f3      	bne.n	8001e1a <block_rotate+0x30a>
 8001e32:	4663      	mov	r3, ip
 8001e34:	4622      	mov	r2, r4
 8001e36:	6810      	ldr	r0, [r2, #0]
 8001e38:	6018      	str	r0, [r3, #0]
}
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	37a4      	adds	r7, #164	@ 0xa4
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e42:	bf00      	nop
 8001e44:	0800869c 	.word	0x0800869c

08001e48 <can_move>:

uint8_t can_move(block_t *block, map_t *map, uint8_t dir)
{
 8001e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e4c:	f5ad 7d47 	sub.w	sp, sp, #796	@ 0x31c
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001e56:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8001e5a:	6018      	str	r0, [r3, #0]
 8001e5c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001e60:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8001e64:	6019      	str	r1, [r3, #0]
 8001e66:	4611      	mov	r1, r2
 8001e68:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001e6c:	f2a3 22e1 	subw	r2, r3, #737	@ 0x2e1
 8001e70:	460b      	mov	r3, r1
 8001e72:	7013      	strb	r3, [r2, #0]
 8001e74:	466b      	mov	r3, sp
 8001e76:	633b      	str	r3, [r7, #48]	@ 0x30
	//dir is 1 if R, 0 if L

	//evaluate the L/R touchpad input
	//erase current and draw new

	volatile block_t temp_tetromino = *block;
 8001e78:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001e7c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	461d      	mov	r5, r3
 8001e84:	f507 7624 	add.w	r6, r7, #656	@ 0x290
 8001e88:	f105 0c30 	add.w	ip, r5, #48	@ 0x30
 8001e8c:	4634      	mov	r4, r6
 8001e8e:	462b      	mov	r3, r5
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e9a:	3510      	adds	r5, #16
 8001e9c:	3610      	adds	r6, #16
 8001e9e:	4565      	cmp	r5, ip
 8001ea0:	d1f4      	bne.n	8001e8c <can_move+0x44>
 8001ea2:	4632      	mov	r2, r6
 8001ea4:	462b      	mov	r3, r5
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	6010      	str	r0, [r2, #0]
	volatile map_t temp_map = *map;
 8001eaa:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001eae:	f5a3 7230 	sub.w	r2, r3, #704	@ 0x2c0
 8001eb2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001eb6:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f240 2336 	movw	r3, #566	@ 0x236
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	f006 fb5f 	bl	8008588 <memcpy>

	//evaluate the logical AND between the true blocks in block_t and
	//the next row of map_t (block y_pos + block size)
	uint16_t y_block[4] = {0};
 8001eca:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001ece:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	6053      	str	r3, [r2, #4]
	uint16_t x_block[4] = {0};
 8001eda:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001ede:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	6053      	str	r3, [r2, #4]
	uint8_t ind = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
	for(int j = 0; j < 4; j++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 8001ef6:	e051      	b.n	8001f9c <can_move+0x154>
	{
		for(int i = 0; i < 4; i++)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8001efe:	e044      	b.n	8001f8a <can_move+0x142>
		{
			if(temp_tetromino.mat[i][j])
 8001f00:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8001f04:	009a      	lsls	r2, r3, #2
 8001f06:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8001f0a:	4413      	add	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001f12:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001f16:	4413      	add	r3, r2
 8001f18:	f833 3c84 	ldrh.w	r3, [r3, #-132]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d02e      	beq.n	8001f80 <can_move+0x138>
			{
				y_block[ind] = temp_tetromino.y[j];
 8001f22:	f897 0317 	ldrb.w	r0, [r7, #791]	@ 0x317
 8001f26:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8001f2a:	3314      	adds	r3, #20
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001f32:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001f36:	4413      	add	r3, r2
 8001f38:	f833 3c84 	ldrh.w	r3, [r3, #-132]
 8001f3c:	b299      	uxth	r1, r3
 8001f3e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001f42:	f5a3 7232 	sub.w	r2, r3, #712	@ 0x2c8
 8001f46:	460b      	mov	r3, r1
 8001f48:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
				x_block[ind] = temp_tetromino.x[i];
 8001f4c:	f897 0317 	ldrb.w	r0, [r7, #791]	@ 0x317
 8001f50:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8001f54:	3310      	adds	r3, #16
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001f5c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001f60:	4413      	add	r3, r2
 8001f62:	f833 3c84 	ldrh.w	r3, [r3, #-132]
 8001f66:	b299      	uxth	r1, r3
 8001f68:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001f6c:	f5a3 7234 	sub.w	r2, r3, #720	@ 0x2d0
 8001f70:	460b      	mov	r3, r1
 8001f72:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
				ind++;
 8001f76:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
		for(int i = 0; i < 4; i++)
 8001f80:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8001f84:	3301      	adds	r3, #1
 8001f86:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8001f8a:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	ddb6      	ble.n	8001f00 <can_move+0xb8>
	for(int j = 0; j < 4; j++)
 8001f92:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8001f96:	3301      	adds	r3, #1
 8001f98:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 8001f9c:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	dda9      	ble.n	8001ef8 <can_move+0xb0>
			}
		}
	}

	uint16_t map_points = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f8a7 330a 	strh.w	r3, [r7, #778]	@ 0x30a
	for(int i = 0; i < 10; i++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 8001fb0:	e02b      	b.n	800200a <can_move+0x1c2>
	{
		for(int j = 0; j < 13; j++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 8001fb8:	e01e      	b.n	8001ff8 <can_move+0x1b0>
		{
			if(temp_map.map_mat[i][j])
 8001fba:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001fbe:	f5a3 7130 	sub.w	r1, r3, #704	@ 0x2c0
 8001fc2:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	0052      	lsls	r2, r2, #1
 8001fca:	441a      	add	r2, r3
 8001fcc:	0092      	lsls	r2, r2, #2
 8001fce:	441a      	add	r2, r3
 8001fd0:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3380      	adds	r3, #128	@ 0x80
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	440b      	add	r3, r1
 8001fdc:	889b      	ldrh	r3, [r3, #4]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d004      	beq.n	8001fee <can_move+0x1a6>
			{
				map_points++;
 8001fe4:	f8b7 330a 	ldrh.w	r3, [r7, #778]	@ 0x30a
 8001fe8:	3301      	adds	r3, #1
 8001fea:	f8a7 330a 	strh.w	r3, [r7, #778]	@ 0x30a
		for(int j = 0; j < 13; j++)
 8001fee:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 8001ff8:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8001ffc:	2b0c      	cmp	r3, #12
 8001ffe:	dddc      	ble.n	8001fba <can_move+0x172>
	for(int i = 0; i < 10; i++)
 8002000:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8002004:	3301      	adds	r3, #1
 8002006:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 800200a:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 800200e:	2b09      	cmp	r3, #9
 8002010:	ddcf      	ble.n	8001fb2 <can_move+0x16a>
			}
		}
	}
	uint8_t map_y_index[map_points];
 8002012:	f8b7 130a 	ldrh.w	r1, [r7, #778]	@ 0x30a
 8002016:	460b      	mov	r3, r1
 8002018:	3b01      	subs	r3, #1
 800201a:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 800201e:	b28b      	uxth	r3, r1
 8002020:	2200      	movs	r2, #0
 8002022:	4698      	mov	r8, r3
 8002024:	4691      	mov	r9, r2
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002032:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002036:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800203a:	b28b      	uxth	r3, r1
 800203c:	2200      	movs	r2, #0
 800203e:	469a      	mov	sl, r3
 8002040:	4693      	mov	fp, r2
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800204e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002052:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002056:	460b      	mov	r3, r1
 8002058:	3307      	adds	r3, #7
 800205a:	08db      	lsrs	r3, r3, #3
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	ebad 0d03 	sub.w	sp, sp, r3
 8002062:	466b      	mov	r3, sp
 8002064:	3300      	adds	r3, #0
 8002066:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
	uint8_t map_x_index[map_points];
 800206a:	f8b7 130a 	ldrh.w	r1, [r7, #778]	@ 0x30a
 800206e:	460b      	mov	r3, r1
 8002070:	3b01      	subs	r3, #1
 8002072:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 8002076:	b28b      	uxth	r3, r1
 8002078:	2200      	movs	r2, #0
 800207a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800207c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800208a:	4628      	mov	r0, r5
 800208c:	00c3      	lsls	r3, r0, #3
 800208e:	4620      	mov	r0, r4
 8002090:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002094:	4620      	mov	r0, r4
 8002096:	00c2      	lsls	r2, r0, #3
 8002098:	b28b      	uxth	r3, r1
 800209a:	2200      	movs	r2, #0
 800209c:	623b      	str	r3, [r7, #32]
 800209e:	627a      	str	r2, [r7, #36]	@ 0x24
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80020ac:	4628      	mov	r0, r5
 80020ae:	00c3      	lsls	r3, r0, #3
 80020b0:	4620      	mov	r0, r4
 80020b2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80020b6:	4620      	mov	r0, r4
 80020b8:	00c2      	lsls	r2, r0, #3
 80020ba:	460b      	mov	r3, r1
 80020bc:	3307      	adds	r3, #7
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	ebad 0d03 	sub.w	sp, sp, r3
 80020c6:	466b      	mov	r3, sp
 80020c8:	3300      	adds	r3, #0
 80020ca:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
	uint16_t map_y[map_points];
 80020ce:	f8b7 130a 	ldrh.w	r1, [r7, #778]	@ 0x30a
 80020d2:	460b      	mov	r3, r1
 80020d4:	3b01      	subs	r3, #1
 80020d6:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 80020da:	b28b      	uxth	r3, r1
 80020dc:	2200      	movs	r2, #0
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	61fa      	str	r2, [r7, #28]
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80020ee:	4628      	mov	r0, r5
 80020f0:	0103      	lsls	r3, r0, #4
 80020f2:	4620      	mov	r0, r4
 80020f4:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80020f8:	4620      	mov	r0, r4
 80020fa:	0102      	lsls	r2, r0, #4
 80020fc:	b28b      	uxth	r3, r1
 80020fe:	2200      	movs	r2, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	617a      	str	r2, [r7, #20]
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002110:	4628      	mov	r0, r5
 8002112:	0103      	lsls	r3, r0, #4
 8002114:	4620      	mov	r0, r4
 8002116:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800211a:	4620      	mov	r0, r4
 800211c:	0102      	lsls	r2, r0, #4
 800211e:	460b      	mov	r3, r1
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	3307      	adds	r3, #7
 8002124:	08db      	lsrs	r3, r3, #3
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	ebad 0d03 	sub.w	sp, sp, r3
 800212c:	466b      	mov	r3, sp
 800212e:	3301      	adds	r3, #1
 8002130:	085b      	lsrs	r3, r3, #1
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
	uint16_t map_x[map_points];
 8002138:	f8b7 130a 	ldrh.w	r1, [r7, #778]	@ 0x30a
 800213c:	460b      	mov	r3, r1
 800213e:	3b01      	subs	r3, #1
 8002140:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 8002144:	b28b      	uxth	r3, r1
 8002146:	2200      	movs	r2, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	60fa      	str	r2, [r7, #12]
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002158:	4628      	mov	r0, r5
 800215a:	0103      	lsls	r3, r0, #4
 800215c:	4620      	mov	r0, r4
 800215e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8002162:	4620      	mov	r0, r4
 8002164:	0102      	lsls	r2, r0, #4
 8002166:	b28b      	uxth	r3, r1
 8002168:	2200      	movs	r2, #0
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	e9d7 4500 	ldrd	r4, r5, [r7]
 800217a:	4628      	mov	r0, r5
 800217c:	0103      	lsls	r3, r0, #4
 800217e:	4620      	mov	r0, r4
 8002180:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8002184:	4620      	mov	r0, r4
 8002186:	0102      	lsls	r2, r0, #4
 8002188:	460b      	mov	r3, r1
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	3307      	adds	r3, #7
 800218e:	08db      	lsrs	r3, r3, #3
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	ebad 0d03 	sub.w	sp, sp, r3
 8002196:	466b      	mov	r3, sp
 8002198:	3301      	adds	r3, #1
 800219a:	085b      	lsrs	r3, r3, #1
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
	uint8_t index = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f887 32ff 	strb.w	r3, [r7, #767]	@ 0x2ff
	for(int i = 0; i < 10; i++)
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 80021ae:	e03b      	b.n	8002228 <can_move+0x3e0>
	{
		for(int j = 0; j < 13; j++)
 80021b0:	2300      	movs	r3, #0
 80021b2:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 80021b6:	e02e      	b.n	8002216 <can_move+0x3ce>
		{
			if(temp_map.map_mat[i][j])
 80021b8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80021bc:	f5a3 7130 	sub.w	r1, r3, #704	@ 0x2c0
 80021c0:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 80021d2:	4413      	add	r3, r2
 80021d4:	3380      	adds	r3, #128	@ 0x80
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	440b      	add	r3, r1
 80021da:	889b      	ldrh	r3, [r3, #4]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d014      	beq.n	800220c <can_move+0x3c4>
			{
				map_x_index[index] = i;
 80021e2:	f897 32ff 	ldrb.w	r3, [r7, #767]	@ 0x2ff
 80021e6:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 80021ea:	b2d1      	uxtb	r1, r2
 80021ec:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 80021f0:	54d1      	strb	r1, [r2, r3]
				map_y_index[index] = j;
 80021f2:	f897 32ff 	ldrb.w	r3, [r7, #767]	@ 0x2ff
 80021f6:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 80021fa:	b2d1      	uxtb	r1, r2
 80021fc:	f8d7 22dc 	ldr.w	r2, [r7, #732]	@ 0x2dc
 8002200:	54d1      	strb	r1, [r2, r3]
				index++;
 8002202:	f897 32ff 	ldrb.w	r3, [r7, #767]	@ 0x2ff
 8002206:	3301      	adds	r3, #1
 8002208:	f887 32ff 	strb.w	r3, [r7, #767]	@ 0x2ff
		for(int j = 0; j < 13; j++)
 800220c:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8002210:	3301      	adds	r3, #1
 8002212:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 8002216:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 800221a:	2b0c      	cmp	r3, #12
 800221c:	ddcc      	ble.n	80021b8 <can_move+0x370>
	for(int i = 0; i < 10; i++)
 800221e:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8002222:	3301      	adds	r3, #1
 8002224:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 8002228:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 800222c:	2b09      	cmp	r3, #9
 800222e:	ddbf      	ble.n	80021b0 <can_move+0x368>
			}
		}
	}
	for(int i = 0; i < map_points; i++)
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 8002236:	e031      	b.n	800229c <can_move+0x454>
	{
		map_y[i] = temp_map.y[map_y_index[i]];
 8002238:	f8d7 22dc 	ldr.w	r2, [r7, #732]	@ 0x2dc
 800223c:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8002240:	4413      	add	r3, r2
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4619      	mov	r1, r3
 8002246:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800224a:	f5a3 7230 	sub.w	r2, r3, #704	@ 0x2c0
 800224e:	f501 7386 	add.w	r3, r1, #268	@ 0x10c
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	889b      	ldrh	r3, [r3, #4]
 8002258:	b299      	uxth	r1, r3
 800225a:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 800225e:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 8002262:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		map_x[i] = temp_map.x[map_x_index[i]];
 8002266:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 800226a:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 800226e:	4413      	add	r3, r2
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002278:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 800227c:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8002280:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002284:	b299      	uxth	r1, r3
 8002286:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 800228a:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 800228e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < map_points; i++)
 8002292:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8002296:	3301      	adds	r3, #1
 8002298:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 800229c:	f8b7 330a 	ldrh.w	r3, [r7, #778]	@ 0x30a
 80022a0:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 80022a4:	429a      	cmp	r2, r3
 80022a6:	dbc7      	blt.n	8002238 <can_move+0x3f0>
	}

	uint8_t overlap_map_y_index[4];
	for(int i = 0; i < 4; i++)
 80022a8:	2300      	movs	r3, #0
 80022aa:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 80022ae:	e02d      	b.n	800230c <can_move+0x4c4>
	{
		for(int j = 0; j < 13; j++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 80022b6:	e020      	b.n	80022fa <can_move+0x4b2>
		{
			if(y_block[i] == map_y[j])
 80022b8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80022bc:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 80022c0:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 80022c4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80022c8:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 80022cc:	f8d7 12e8 	ldr.w	r1, [r7, #744]	@ 0x2e8
 80022d0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d10b      	bne.n	80022f0 <can_move+0x4a8>
			{
				overlap_map_y_index[i] = j;
 80022d8:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80022dc:	b2d9      	uxtb	r1, r3
 80022de:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80022e2:	f5a3 7235 	sub.w	r2, r3, #724	@ 0x2d4
 80022e6:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80022ea:	4413      	add	r3, r2
 80022ec:	460a      	mov	r2, r1
 80022ee:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 13; j++)
 80022f0:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80022f4:	3301      	adds	r3, #1
 80022f6:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 80022fa:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80022fe:	2b0c      	cmp	r3, #12
 8002300:	ddda      	ble.n	80022b8 <can_move+0x470>
	for(int i = 0; i < 4; i++)
 8002302:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8002306:	3301      	adds	r3, #1
 8002308:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 800230c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8002310:	2b03      	cmp	r3, #3
 8002312:	ddcd      	ble.n	80022b0 <can_move+0x468>
			}
		}
	}

	for(int i = 0; i < 4; i++)
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 800231a:	e05c      	b.n	80023d6 <can_move+0x58e>
	{
		if(dir)
 800231c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002320:	f2a3 23e1 	subw	r3, r3, #737	@ 0x2e1
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d024      	beq.n	8002374 <can_move+0x52c>
		{
			if(map_x[overlap_map_y_index[i]] == x_block[i] + BLOCK_WIDTH || x_block[i] == RIGHT_EDGE)
 800232a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800232e:	f5a3 7235 	sub.w	r2, r3, #724	@ 0x2d4
 8002332:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8002336:	4413      	add	r3, r2
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 8002340:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002344:	4619      	mov	r1, r3
 8002346:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800234a:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 800234e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 8002352:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002356:	3317      	adds	r3, #23
 8002358:	4299      	cmp	r1, r3
 800235a:	d009      	beq.n	8002370 <can_move+0x528>
 800235c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002360:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8002364:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 8002368:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800236c:	2bd5      	cmp	r3, #213	@ 0xd5
 800236e:	d12d      	bne.n	80023cc <can_move+0x584>
			{
				return 0;
 8002370:	2300      	movs	r3, #0
 8002372:	e035      	b.n	80023e0 <can_move+0x598>
			}
		}
		else if(!dir)
 8002374:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002378:	f2a3 23e1 	subw	r3, r3, #737	@ 0x2e1
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d124      	bne.n	80023cc <can_move+0x584>
		{
			if(map_x[overlap_map_y_index[i]] == x_block[i] - BLOCK_WIDTH || x_block[i] == LEFT_EDGE)
 8002382:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002386:	f5a3 7235 	sub.w	r2, r3, #724	@ 0x2d4
 800238a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 800238e:	4413      	add	r3, r2
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 8002398:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800239c:	4619      	mov	r1, r3
 800239e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80023a2:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 80023a6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 80023aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023ae:	3b17      	subs	r3, #23
 80023b0:	4299      	cmp	r1, r3
 80023b2:	d009      	beq.n	80023c8 <can_move+0x580>
 80023b4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80023b8:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 80023bc:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 80023c0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023c4:	2b06      	cmp	r3, #6
 80023c6:	d101      	bne.n	80023cc <can_move+0x584>
			{
				return 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	e009      	b.n	80023e0 <can_move+0x598>
	for(int i = 0; i < 4; i++)
 80023cc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80023d0:	3301      	adds	r3, #1
 80023d2:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 80023d6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80023da:	2b03      	cmp	r3, #3
 80023dc:	dd9e      	ble.n	800231c <can_move+0x4d4>
			}
		}
	}
	return 1;
 80023de:	2301      	movs	r3, #1
 80023e0:	f8d7 d030 	ldr.w	sp, [r7, #48]	@ 0x30
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	f507 7747 	add.w	r7, r7, #796	@ 0x31c
 80023ea:	46bd      	mov	sp, r7
 80023ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080023f0 <block_move>:

block_t block_move(block_t *block, map_t *map, uint8_t dir)
{
 80023f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f2:	b095      	sub	sp, #84	@ 0x54
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	70fb      	strb	r3, [r7, #3]
	//when timer reaches ARR and enters IRQ handler, call this function
	//erase current and draw new tetromino
	volatile block_t temp_tetromino = *block;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	461c      	mov	r4, r3
 8002402:	f107 0614 	add.w	r6, r7, #20
 8002406:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800240a:	4635      	mov	r5, r6
 800240c:	4623      	mov	r3, r4
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002418:	3410      	adds	r4, #16
 800241a:	3610      	adds	r6, #16
 800241c:	4564      	cmp	r4, ip
 800241e:	d1f4      	bne.n	800240a <block_move+0x1a>
 8002420:	4633      	mov	r3, r6
 8002422:	4622      	mov	r2, r4
 8002424:	6810      	ldr	r0, [r2, #0]
 8002426:	6018      	str	r0, [r3, #0]
	if(dir)
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d01a      	beq.n	8002464 <block_move+0x74>
	{
		for(int i = 0; i < 4; i++)
 800242e:	2300      	movs	r3, #0
 8002430:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002432:	e013      	b.n	800245c <block_move+0x6c>
		{
			temp_tetromino.x[i] += BLOCK_WIDTH;
 8002434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002436:	3310      	adds	r3, #16
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	3350      	adds	r3, #80	@ 0x50
 800243c:	443b      	add	r3, r7
 800243e:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8002442:	b29b      	uxth	r3, r3
 8002444:	3317      	adds	r3, #23
 8002446:	b29a      	uxth	r2, r3
 8002448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800244a:	3310      	adds	r3, #16
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	3350      	adds	r3, #80	@ 0x50
 8002450:	443b      	add	r3, r7
 8002452:	f823 2c38 	strh.w	r2, [r3, #-56]
		for(int i = 0; i < 4; i++)
 8002456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002458:	3301      	adds	r3, #1
 800245a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800245c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800245e:	2b03      	cmp	r3, #3
 8002460:	dde8      	ble.n	8002434 <block_move+0x44>
 8002462:	e019      	b.n	8002498 <block_move+0xa8>
		}
	}
	else
	{
		for(int i = 0; i < 4; i++)
 8002464:	2300      	movs	r3, #0
 8002466:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002468:	e013      	b.n	8002492 <block_move+0xa2>
		{
			temp_tetromino.x[i] -= BLOCK_WIDTH;
 800246a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800246c:	3310      	adds	r3, #16
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	3350      	adds	r3, #80	@ 0x50
 8002472:	443b      	add	r3, r7
 8002474:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b17      	subs	r3, #23
 800247c:	b29a      	uxth	r2, r3
 800247e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002480:	3310      	adds	r3, #16
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	3350      	adds	r3, #80	@ 0x50
 8002486:	443b      	add	r3, r7
 8002488:	f823 2c38 	strh.w	r2, [r3, #-56]
		for(int i = 0; i < 4; i++)
 800248c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800248e:	3301      	adds	r3, #1
 8002490:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002494:	2b03      	cmp	r3, #3
 8002496:	dde8      	ble.n	800246a <block_move+0x7a>
		}
	}
	return temp_tetromino;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f107 0414 	add.w	r4, r7, #20
 800249e:	469c      	mov	ip, r3
 80024a0:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80024a4:	4665      	mov	r5, ip
 80024a6:	4626      	mov	r6, r4
 80024a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80024aa:	6028      	str	r0, [r5, #0]
 80024ac:	6069      	str	r1, [r5, #4]
 80024ae:	60aa      	str	r2, [r5, #8]
 80024b0:	60eb      	str	r3, [r5, #12]
 80024b2:	3410      	adds	r4, #16
 80024b4:	f10c 0c10 	add.w	ip, ip, #16
 80024b8:	4574      	cmp	r4, lr
 80024ba:	d1f3      	bne.n	80024a4 <block_move+0xb4>
 80024bc:	4663      	mov	r3, ip
 80024be:	4622      	mov	r2, r4
 80024c0:	6810      	ldr	r0, [r2, #0]
 80024c2:	6018      	str	r0, [r3, #0]
}
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	3754      	adds	r7, #84	@ 0x54
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024cc <draw_block>:

void draw_block(uint16_t x, uint16_t y, uint16_t color)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	80fb      	strh	r3, [r7, #6]
 80024d6:	460b      	mov	r3, r1
 80024d8:	80bb      	strh	r3, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	807b      	strh	r3, [r7, #2]
	for(int i = 0; i < BLOCK_WIDTH-1; i++)
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	e00c      	b.n	80024fe <draw_block+0x32>
	{
		LCD_Draw_Horizontal_Line(x, y+i, BLOCK_WIDTH-1, color);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	88bb      	ldrh	r3, [r7, #4]
 80024ea:	4413      	add	r3, r2
 80024ec:	b299      	uxth	r1, r3
 80024ee:	887b      	ldrh	r3, [r7, #2]
 80024f0:	88f8      	ldrh	r0, [r7, #6]
 80024f2:	2216      	movs	r2, #22
 80024f4:	f000 fd39 	bl	8002f6a <LCD_Draw_Horizontal_Line>
	for(int i = 0; i < BLOCK_WIDTH-1; i++)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	3301      	adds	r3, #1
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b15      	cmp	r3, #21
 8002502:	ddef      	ble.n	80024e4 <draw_block+0x18>
	}
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <draw_shapes>:

void draw_shapes()
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b088      	sub	sp, #32
 8002512:	af00      	add	r7, sp, #0
	uint16_t x_offset = (LCD_PIXEL_WIDTH - (7 * (BLOCK_WIDTH * 4 + 15))) / 2;
 8002514:	f64f 7302 	movw	r3, #65282	@ 0xff02
 8002518:	80fb      	strh	r3, [r7, #6]

	// I tetromino (cyan)
	for (int i = 0; i < 4; i++)
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
 800251e:	e012      	b.n	8002546 <draw_shapes+0x38>
	{
	   	draw_block(6, 224 + i*BLOCK_WIDTH, LCD_COLOR_CYAN);
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	b29b      	uxth	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	0052      	lsls	r2, r2, #1
 8002528:	441a      	add	r2, r3
 800252a:	00d2      	lsls	r2, r2, #3
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	b29b      	uxth	r3, r3
 8002530:	33e0      	adds	r3, #224	@ 0xe0
 8002532:	b29b      	uxth	r3, r3
 8002534:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002538:	4619      	mov	r1, r3
 800253a:	2006      	movs	r0, #6
 800253c:	f7ff ffc6 	bl	80024cc <draw_block>
	for (int i = 0; i < 4; i++)
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	3301      	adds	r3, #1
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	2b03      	cmp	r3, #3
 800254a:	dde9      	ble.n	8002520 <draw_shapes+0x12>
	}

	// L tetromino (green)
	x_offset += BLOCK_WIDTH * 4 + 15;
 800254c:	88fb      	ldrh	r3, [r7, #6]
 800254e:	336b      	adds	r3, #107	@ 0x6b
 8002550:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++)
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	e012      	b.n	800257e <draw_shapes+0x70>
	{
	   	draw_block(i*BLOCK_WIDTH + 144, 224 + BLOCK_WIDTH, LCD_COLOR_GREEN);
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	b29b      	uxth	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	0052      	lsls	r2, r2, #1
 8002560:	441a      	add	r2, r3
 8002562:	00d2      	lsls	r2, r2, #3
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	b29b      	uxth	r3, r3
 8002568:	3390      	adds	r3, #144	@ 0x90
 800256a:	b29b      	uxth	r3, r3
 800256c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002570:	21f7      	movs	r1, #247	@ 0xf7
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ffaa 	bl	80024cc <draw_block>
	for (int i = 0; i < 3; i++)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	3301      	adds	r3, #1
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	2b02      	cmp	r3, #2
 8002582:	dde9      	ble.n	8002558 <draw_shapes+0x4a>
	}
	draw_block(190, 224, LCD_COLOR_GREEN);
 8002584:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002588:	21e0      	movs	r1, #224	@ 0xe0
 800258a:	20be      	movs	r0, #190	@ 0xbe
 800258c:	f7ff ff9e 	bl	80024cc <draw_block>

	// J tetromino (yellow)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	336b      	adds	r3, #107	@ 0x6b
 8002594:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++)
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	e013      	b.n	80025c4 <draw_shapes+0xb6>
	{
	   	draw_block(75 + (i-2)*BLOCK_WIDTH, 224 + BLOCK_WIDTH, LCD_COLOR_YELLOW);
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	3b02      	subs	r3, #2
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	0052      	lsls	r2, r2, #1
 80025a6:	441a      	add	r2, r3
 80025a8:	00d2      	lsls	r2, r2, #3
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	334b      	adds	r3, #75	@ 0x4b
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80025b6:	21f7      	movs	r1, #247	@ 0xf7
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff87 	bl	80024cc <draw_block>
	for (int i = 0; i < 3; i++)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3301      	adds	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	dde8      	ble.n	800259c <draw_shapes+0x8e>
	}
	draw_block(52 + BLOCK_WIDTH, 224 + 2*BLOCK_WIDTH, LCD_COLOR_YELLOW);
 80025ca:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80025ce:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80025d2:	204b      	movs	r0, #75	@ 0x4b
 80025d4:	f7ff ff7a 	bl	80024cc <draw_block>

	// O tetromino (orange)
	x_offset += BLOCK_WIDTH * 4 + 15;
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	336b      	adds	r3, #107	@ 0x6b
 80025dc:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 2; i++) {
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	e025      	b.n	8002630 <draw_shapes+0x122>
	    for (int j = 0; j < 2; j++) {
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	e01c      	b.n	8002624 <draw_shapes+0x116>
	       	draw_block(67 + i*BLOCK_WIDTH - 38, 270 + j*BLOCK_WIDTH, LCD_COLOR_ORANGE);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	0052      	lsls	r2, r2, #1
 80025f2:	441a      	add	r2, r3
 80025f4:	00d2      	lsls	r2, r2, #3
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	331d      	adds	r3, #29
 80025fc:	b298      	uxth	r0, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	b29b      	uxth	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	0052      	lsls	r2, r2, #1
 8002606:	441a      	add	r2, r3
 8002608:	00d2      	lsls	r2, r2, #3
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	b29b      	uxth	r3, r3
 800260e:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 8002612:	b29b      	uxth	r3, r3
 8002614:	f64f 32c1 	movw	r2, #64449	@ 0xfbc1
 8002618:	4619      	mov	r1, r3
 800261a:	f7ff ff57 	bl	80024cc <draw_block>
	    for (int j = 0; j < 2; j++) {
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3301      	adds	r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b01      	cmp	r3, #1
 8002628:	dddf      	ble.n	80025ea <draw_shapes+0xdc>
	for (int i = 0; i < 2; i++) {
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	3301      	adds	r3, #1
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	2b01      	cmp	r3, #1
 8002634:	ddd6      	ble.n	80025e4 <draw_shapes+0xd6>
	    }
	}

	// S tetromino (magenta)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	336b      	adds	r3, #107	@ 0x6b
 800263a:	80fb      	strh	r3, [r7, #6]
	draw_block(144, 270 + BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 800263c:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002640:	f240 1125 	movw	r1, #293	@ 0x125
 8002644:	2090      	movs	r0, #144	@ 0x90
 8002646:	f7ff ff41 	bl	80024cc <draw_block>
	draw_block(144 + BLOCK_WIDTH, 270 + BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 800264a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800264e:	f240 1125 	movw	r1, #293	@ 0x125
 8002652:	20a7      	movs	r0, #167	@ 0xa7
 8002654:	f7ff ff3a 	bl	80024cc <draw_block>
	draw_block(144 + BLOCK_WIDTH, 270, LCD_COLOR_MAGENTA);
 8002658:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800265c:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002660:	20a7      	movs	r0, #167	@ 0xa7
 8002662:	f7ff ff33 	bl	80024cc <draw_block>
	draw_block(144 + BLOCK_WIDTH * 2, 270, LCD_COLOR_MAGENTA);
 8002666:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800266a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800266e:	20be      	movs	r0, #190	@ 0xbe
 8002670:	f7ff ff2c 	bl	80024cc <draw_block>

	// T tetromino (blue2)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	336b      	adds	r3, #107	@ 0x6b
 8002678:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++) {
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	e014      	b.n	80026aa <draw_shapes+0x19c>
	   	draw_block(LEFT_EDGE + (i+3) * BLOCK_WIDTH, 293, LCD_COLOR_BLUE2);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	3303      	adds	r3, #3
 8002684:	b29b      	uxth	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	0052      	lsls	r2, r2, #1
 800268a:	441a      	add	r2, r3
 800268c:	00d2      	lsls	r2, r2, #3
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	b29b      	uxth	r3, r3
 8002692:	3306      	adds	r3, #6
 8002694:	b29b      	uxth	r3, r3
 8002696:	f240 521f 	movw	r2, #1311	@ 0x51f
 800269a:	f240 1125 	movw	r1, #293	@ 0x125
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ff14 	bl	80024cc <draw_block>
	for (int i = 0; i < 3; i++) {
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	3301      	adds	r3, #1
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	dde7      	ble.n	8002680 <draw_shapes+0x172>
	}
	draw_block(LEFT_EDGE + 4*BLOCK_WIDTH, 293 - BLOCK_WIDTH, LCD_COLOR_BLUE2);
 80026b0:	f240 521f 	movw	r2, #1311	@ 0x51f
 80026b4:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80026b8:	2062      	movs	r0, #98	@ 0x62
 80026ba:	f7ff ff07 	bl	80024cc <draw_block>

	// Z tetromino (strawberry)
	x_offset += BLOCK_WIDTH * 4 + 15;
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	336b      	adds	r3, #107	@ 0x6b
 80026c2:	80fb      	strh	r3, [r7, #6]
	draw_block(LEFT_EDGE + 4*BLOCK_WIDTH, 247, LCD_COLOR_STRAWBERRY);
 80026c4:	f64f 1287 	movw	r2, #63879	@ 0xf987
 80026c8:	21f7      	movs	r1, #247	@ 0xf7
 80026ca:	2062      	movs	r0, #98	@ 0x62
 80026cc:	f7ff fefe 	bl	80024cc <draw_block>
	draw_block(LEFT_EDGE + 5*BLOCK_WIDTH, 247, LCD_COLOR_STRAWBERRY);
 80026d0:	f64f 1287 	movw	r2, #63879	@ 0xf987
 80026d4:	21f7      	movs	r1, #247	@ 0xf7
 80026d6:	2079      	movs	r0, #121	@ 0x79
 80026d8:	f7ff fef8 	bl	80024cc <draw_block>
	draw_block(LEFT_EDGE + 5*BLOCK_WIDTH, 247 + BLOCK_WIDTH, LCD_COLOR_STRAWBERRY);
 80026dc:	f64f 1287 	movw	r2, #63879	@ 0xf987
 80026e0:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80026e4:	2079      	movs	r0, #121	@ 0x79
 80026e6:	f7ff fef1 	bl	80024cc <draw_block>
	draw_block(LEFT_EDGE + 6*BLOCK_WIDTH, 247 + BLOCK_WIDTH, LCD_COLOR_STRAWBERRY);
 80026ea:	f64f 1287 	movw	r2, #63879	@ 0xf987
 80026ee:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80026f2:	2090      	movs	r0, #144	@ 0x90
 80026f4:	f7ff feea 	bl	80024cc <draw_block>

	// "O" shape (magenta)
	draw_block(x_offset - 50 + BLOCK_WIDTH, 246 - 9*BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 80026f8:	88fb      	ldrh	r3, [r7, #6]
 80026fa:	3b1b      	subs	r3, #27
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002702:	2127      	movs	r1, #39	@ 0x27
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fee1 	bl	80024cc <draw_block>
	draw_block(x_offset - 50 , 246 - 9*BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	3b32      	subs	r3, #50	@ 0x32
 800270e:	b29b      	uxth	r3, r3
 8002710:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002714:	2127      	movs	r1, #39	@ 0x27
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fed8 	bl	80024cc <draw_block>
	draw_block(x_offset - 50 , 246 - 8*BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	3b32      	subs	r3, #50	@ 0x32
 8002720:	b29b      	uxth	r3, r3
 8002722:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002726:	213e      	movs	r1, #62	@ 0x3e
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fecf 	bl	80024cc <draw_block>
	draw_block(x_offset - 50 + BLOCK_WIDTH, 246 - 8*BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	3b1b      	subs	r3, #27
 8002732:	b29b      	uxth	r3, r3
 8002734:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002738:	213e      	movs	r1, #62	@ 0x3e
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fec6 	bl	80024cc <draw_block>
}
 8002740:	bf00      	nop
 8002742:	3720      	adds	r7, #32
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <draw_tetromino>:

void draw_tetromino(block_t block)
{
 8002748:	b084      	sub	sp, #16
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	f107 0c10 	add.w	ip, r7, #16
 8002754:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i < 4; i++)
 8002758:	2300      	movs	r3, #0
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	e029      	b.n	80027b2 <draw_tetromino+0x6a>
	{
		for(int j = 0; j < 4; j++)
 800275e:	2300      	movs	r3, #0
 8002760:	603b      	str	r3, [r7, #0]
 8002762:	e020      	b.n	80027a6 <draw_tetromino+0x5e>
		{
			if(block.mat[i][j])
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	009a      	lsls	r2, r3, #2
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	4413      	add	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	3310      	adds	r3, #16
 8002770:	443b      	add	r3, r7
 8002772:	889b      	ldrh	r3, [r3, #4]
 8002774:	b29b      	uxth	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d012      	beq.n	80027a0 <draw_tetromino+0x58>
			{
				draw_block(block.x[i], block.y[j], block.color);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3310      	adds	r3, #16
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	3310      	adds	r3, #16
 8002782:	443b      	add	r3, r7
 8002784:	889b      	ldrh	r3, [r3, #4]
 8002786:	b298      	uxth	r0, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	3314      	adds	r3, #20
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	3310      	adds	r3, #16
 8002790:	443b      	add	r3, r7
 8002792:	889b      	ldrh	r3, [r3, #4]
 8002794:	b29b      	uxth	r3, r3
 8002796:	8a7a      	ldrh	r2, [r7, #18]
 8002798:	b292      	uxth	r2, r2
 800279a:	4619      	mov	r1, r3
 800279c:	f7ff fe96 	bl	80024cc <draw_block>
		for(int j = 0; j < 4; j++)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	603b      	str	r3, [r7, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	dddb      	ble.n	8002764 <draw_tetromino+0x1c>
	for(int i = 0; i < 4; i++)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3301      	adds	r3, #1
 80027b0:	607b      	str	r3, [r7, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	ddd2      	ble.n	800275e <draw_tetromino+0x16>
			}
		}
	}
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027c4:	b004      	add	sp, #16
 80027c6:	4770      	bx	lr

080027c8 <clear_tetromino>:

void clear_tetromino(block_t block)
{
 80027c8:	b084      	sub	sp, #16
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	f107 0c10 	add.w	ip, r7, #16
 80027d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i < 4; i++)
 80027d8:	2300      	movs	r3, #0
 80027da:	607b      	str	r3, [r7, #4]
 80027dc:	e028      	b.n	8002830 <clear_tetromino+0x68>
	{
		for(int j = 0; j < 4; j++)
 80027de:	2300      	movs	r3, #0
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	e01f      	b.n	8002824 <clear_tetromino+0x5c>
		{
			if(block.mat[i][j])
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	009a      	lsls	r2, r3, #2
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	3310      	adds	r3, #16
 80027f0:	443b      	add	r3, r7
 80027f2:	889b      	ldrh	r3, [r3, #4]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d011      	beq.n	800281e <clear_tetromino+0x56>
			{
				draw_block(block.x[i], block.y[j], LCD_COLOR_BLACK);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3310      	adds	r3, #16
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	3310      	adds	r3, #16
 8002802:	443b      	add	r3, r7
 8002804:	889b      	ldrh	r3, [r3, #4]
 8002806:	b298      	uxth	r0, r3
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	3314      	adds	r3, #20
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	3310      	adds	r3, #16
 8002810:	443b      	add	r3, r7
 8002812:	889b      	ldrh	r3, [r3, #4]
 8002814:	b29b      	uxth	r3, r3
 8002816:	2200      	movs	r2, #0
 8002818:	4619      	mov	r1, r3
 800281a:	f7ff fe57 	bl	80024cc <draw_block>
		for(int j = 0; j < 4; j++)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	3301      	adds	r3, #1
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b03      	cmp	r3, #3
 8002828:	dddc      	ble.n	80027e4 <clear_tetromino+0x1c>
	for(int i = 0; i < 4; i++)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3301      	adds	r3, #1
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b03      	cmp	r3, #3
 8002834:	ddd3      	ble.n	80027de <clear_tetromino+0x16>
			}
		}
	}
}
 8002836:	bf00      	nop
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002842:	b004      	add	sp, #16
 8002844:	4770      	bx	lr

08002846 <can_spawn>:

uint8_t can_spawn(block_t *block, map_t *map)
{
 8002846:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002848:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 800284c:	af00      	add	r7, sp, #0
 800284e:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002852:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8002856:	6018      	str	r0, [r3, #0]
 8002858:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800285c:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8002860:	6019      	str	r1, [r3, #0]
	volatile block_t temp_tetromino = *block;
 8002862:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002866:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461c      	mov	r4, r3
 800286e:	f507 7614 	add.w	r6, r7, #592	@ 0x250
 8002872:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002876:	4635      	mov	r5, r6
 8002878:	4623      	mov	r3, r4
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	6859      	ldr	r1, [r3, #4]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002884:	3410      	adds	r4, #16
 8002886:	3610      	adds	r6, #16
 8002888:	4564      	cmp	r4, ip
 800288a:	d1f4      	bne.n	8002876 <can_spawn+0x30>
 800288c:	4633      	mov	r3, r6
 800288e:	4622      	mov	r2, r4
 8002890:	6810      	ldr	r0, [r2, #0]
 8002892:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 8002894:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002898:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 800289c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80028a0:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	f240 2336 	movw	r3, #566	@ 0x236
 80028ae:	461a      	mov	r2, r3
 80028b0:	f005 fe6a 	bl	8008588 <memcpy>

	uint16_t block_x[4];
	uint16_t block_y[4];
	uint8_t ind = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297

	for(int i = 0; i < 4; i++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 80028c0:	e049      	b.n	8002956 <can_spawn+0x110>
	{
		for(int j = 0; j < 4; j++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 80028c8:	e03c      	b.n	8002944 <can_spawn+0xfe>
		{
			if(temp_tetromino.mat[i][j])
 80028ca:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80028ce:	009a      	lsls	r2, r3, #2
 80028d0:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 80028d4:	4413      	add	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80028dc:	443b      	add	r3, r7
 80028de:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d028      	beq.n	800293a <can_spawn+0xf4>
			{
				block_x[ind] = temp_tetromino.x[i];
 80028e8:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 80028ec:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80028f0:	3310      	adds	r3, #16
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80028f8:	443b      	add	r3, r7
 80028fa:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 80028fe:	b299      	uxth	r1, r3
 8002900:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002904:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8002908:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				block_y[ind] = temp_tetromino.y[j];
 800290c:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 8002910:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8002914:	3314      	adds	r3, #20
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800291c:	443b      	add	r3, r7
 800291e:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8002922:	b299      	uxth	r1, r3
 8002924:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002928:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 800292c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				ind++;
 8002930:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8002934:	3301      	adds	r3, #1
 8002936:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
		for(int j = 0; j < 4; j++)
 800293a:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 800293e:	3301      	adds	r3, #1
 8002940:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8002944:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8002948:	2b03      	cmp	r3, #3
 800294a:	ddbe      	ble.n	80028ca <can_spawn+0x84>
	for(int i = 0; i < 4; i++)
 800294c:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8002950:	3301      	adds	r3, #1
 8002952:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8002956:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800295a:	2b03      	cmp	r3, #3
 800295c:	ddb1      	ble.n	80028c2 <can_spawn+0x7c>
			}
		}
	}

	//iterate through the columns in the first 3 rows of the map, and if overlap, return 0
	for(int i = 3; i < 7; i++)
 800295e:	2303      	movs	r3, #3
 8002960:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8002964:	e0c4      	b.n	8002af0 <can_spawn+0x2aa>
	{
		for(int j = 0; j < 3; j++)
 8002966:	2300      	movs	r3, #0
 8002968:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800296c:	e0b6      	b.n	8002adc <can_spawn+0x296>
		{
			if(temp_map.map_mat[i][j])
 800296e:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002972:	f5a3 7120 	sub.w	r1, r3, #640	@ 0x280
 8002976:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8002988:	4413      	add	r3, r2
 800298a:	3380      	adds	r3, #128	@ 0x80
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	440b      	add	r3, r1
 8002990:	889b      	ldrh	r3, [r3, #4]
 8002992:	b29b      	uxth	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 809c 	beq.w	8002ad2 <can_spawn+0x28c>
			{
				if(temp_map.x[i] == block_x[0] && temp_map.y[j] == block_y[0])
 800299a:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800299e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80029a2:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 80029a6:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80029aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80029b4:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d114      	bne.n	80029e8 <can_spawn+0x1a2>
 80029be:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80029c2:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 80029c6:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80029ca:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	889b      	ldrh	r3, [r3, #4]
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80029da:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d101      	bne.n	80029e8 <can_spawn+0x1a2>
				{
					return 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	e089      	b.n	8002afc <can_spawn+0x2b6>
				}
				else if(temp_map.x[i] == block_x[1] && temp_map.y[j] == block_y[1])
 80029e8:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80029ec:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80029f0:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 80029f4:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80029f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002a02:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8002a06:	885b      	ldrh	r3, [r3, #2]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d114      	bne.n	8002a36 <can_spawn+0x1f0>
 8002a0c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002a10:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 8002a14:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002a18:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	4413      	add	r3, r2
 8002a20:	889b      	ldrh	r3, [r3, #4]
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002a28:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002a2c:	885b      	ldrh	r3, [r3, #2]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d101      	bne.n	8002a36 <can_spawn+0x1f0>
				{
					return 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e062      	b.n	8002afc <can_spawn+0x2b6>
				}
				else if(temp_map.x[i] == block_x[2] && temp_map.y[j] == block_y[2])
 8002a36:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002a3a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8002a3e:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8002a42:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8002a46:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002a50:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8002a54:	889b      	ldrh	r3, [r3, #4]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d114      	bne.n	8002a84 <can_spawn+0x23e>
 8002a5a:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002a5e:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 8002a62:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002a66:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4413      	add	r3, r2
 8002a6e:	889b      	ldrh	r3, [r3, #4]
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002a76:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002a7a:	889b      	ldrh	r3, [r3, #4]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d101      	bne.n	8002a84 <can_spawn+0x23e>
				{
					return 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e03b      	b.n	8002afc <can_spawn+0x2b6>
				}
				else if(temp_map.x[i] == block_x[3] && temp_map.y[j] == block_y[3])
 8002a84:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002a88:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8002a8c:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8002a90:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8002a94:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002a9e:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8002aa2:	88db      	ldrh	r3, [r3, #6]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d114      	bne.n	8002ad2 <can_spawn+0x28c>
 8002aa8:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002aac:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 8002ab0:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002ab4:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	889b      	ldrh	r3, [r3, #4]
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002ac4:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002ac8:	88db      	ldrh	r3, [r3, #6]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d101      	bne.n	8002ad2 <can_spawn+0x28c>
				{
					return 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e014      	b.n	8002afc <can_spawn+0x2b6>
		for(int j = 0; j < 3; j++)
 8002ad2:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8002adc:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	f77f af44 	ble.w	800296e <can_spawn+0x128>
	for(int i = 3; i < 7; i++)
 8002ae6:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8002aea:	3301      	adds	r3, #1
 8002aec:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8002af0:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8002af4:	2b06      	cmp	r3, #6
 8002af6:	f77f af36 	ble.w	8002966 <can_spawn+0x120>
				}
			}
		}
	}
	return 1;
 8002afa:	2301      	movs	r3, #1
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	f507 7727 	add.w	r7, r7, #668	@ 0x29c
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002b08 <MX_RNG_Init>:

static void MX_RNG_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
  __HAL_RCC_RNG_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	4b0e      	ldr	r3, [pc, #56]	@ (8002b4c <MX_RNG_Init+0x44>)
 8002b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b16:	4a0d      	ldr	r2, [pc, #52]	@ (8002b4c <MX_RNG_Init+0x44>)
 8002b18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b1c:	6353      	str	r3, [r2, #52]	@ 0x34
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b4c <MX_RNG_Init+0x44>)
 8002b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b26:	607b      	str	r3, [r7, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
  hrng.Instance = RNG;
 8002b2a:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <MX_RNG_Init+0x48>)
 8002b2c:	4a09      	ldr	r2, [pc, #36]	@ (8002b54 <MX_RNG_Init+0x4c>)
 8002b2e:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002b30:	4807      	ldr	r0, [pc, #28]	@ (8002b50 <MX_RNG_Init+0x48>)
 8002b32:	f004 ffb5 	bl	8007aa0 <HAL_RNG_Init>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <MX_RNG_Init+0x3a>
  {
	  APPLICATION_ASSERT(1);
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	f000 f857 	bl	8002bf0 <APPLICATION_ASSERT>
  }
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	200000a0 	.word	0x200000a0
 8002b54:	50060800 	.word	0x50060800

08002b58 <MX_RNG_Deinit>:

static void MX_RNG_Deinit(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  __HAL_RCC_RNG_CLK_DISABLE();
 8002b5c:	4b09      	ldr	r3, [pc, #36]	@ (8002b84 <MX_RNG_Deinit+0x2c>)
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b60:	4a08      	ldr	r2, [pc, #32]	@ (8002b84 <MX_RNG_Deinit+0x2c>)
 8002b62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b66:	6353      	str	r3, [r2, #52]	@ 0x34
  hrng.Instance = RNG;
 8002b68:	4b07      	ldr	r3, [pc, #28]	@ (8002b88 <MX_RNG_Deinit+0x30>)
 8002b6a:	4a08      	ldr	r2, [pc, #32]	@ (8002b8c <MX_RNG_Deinit+0x34>)
 8002b6c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002b6e:	4806      	ldr	r0, [pc, #24]	@ (8002b88 <MX_RNG_Deinit+0x30>)
 8002b70:	f004 ff96 	bl	8007aa0 <HAL_RNG_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d002      	beq.n	8002b80 <MX_RNG_Deinit+0x28>
  {
	  APPLICATION_ASSERT(1);
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	f000 f838 	bl	8002bf0 <APPLICATION_ASSERT>
  }
}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40023800 	.word	0x40023800
 8002b88:	200000a0 	.word	0x200000a0
 8002b8c:	50060800 	.word	0x50060800

08002b90 <ButtonInit>:
 *      Author: 17202
 */
#include "Button_Driver.h"

void ButtonInit()
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef config = {0};
 8002b96:	1d3b      	adds	r3, r7, #4
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]

	config.Pin = GPIO_PIN_0;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	607b      	str	r3, [r7, #4]
	config.Mode = GPIO_MODE_IT_RISING;
 8002ba8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002bac:	60bb      	str	r3, [r7, #8]
	config.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	613b      	str	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002be8 <ButtonInit+0x58>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	4a0b      	ldr	r2, [pc, #44]	@ (8002be8 <ButtonInit+0x58>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc2:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <ButtonInit+0x58>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &config);
 8002bce:	1d3b      	adds	r3, r7, #4
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4806      	ldr	r0, [pc, #24]	@ (8002bec <ButtonInit+0x5c>)
 8002bd4:	f002 fb08 	bl	80051e8 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002bd8:	2006      	movs	r0, #6
 8002bda:	f002 fab6 	bl	800514a <HAL_NVIC_EnableIRQ>
	//GPIO_Init(BUTTON_PORT_VALUE, config, BUTTON_PIN_NUMBER);
}
 8002bde:	bf00      	nop
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40020000 	.word	0x40020000

08002bf0 <APPLICATION_ASSERT>:
 */
#include "ErrorHandling.h"


void APPLICATION_ASSERT(bool tf)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bfa:	b672      	cpsid	i
}
 8002bfc:	bf00      	nop
	__disable_irq();
	while(tf!=HAL_OK)
 8002bfe:	bf00      	nop
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1fc      	bne.n	8002c00 <APPLICATION_ASSERT+0x10>
	{}		//loop forever
}
 8002c06:	bf00      	nop
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08c      	sub	sp, #48	@ 0x30
 8002c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	4b5a      	ldr	r3, [pc, #360]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c22:	4a59      	ldr	r2, [pc, #356]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002c24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c2a:	4b57      	ldr	r3, [pc, #348]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	4b53      	ldr	r3, [pc, #332]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	4a52      	ldr	r2, [pc, #328]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c46:	4b50      	ldr	r3, [pc, #320]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	4b4c      	ldr	r3, [pc, #304]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5a:	4a4b      	ldr	r2, [pc, #300]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002c5c:	f043 0302 	orr.w	r3, r3, #2
 8002c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c62:	4b49      	ldr	r3, [pc, #292]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	4b45      	ldr	r3, [pc, #276]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c76:	4a44      	ldr	r2, [pc, #272]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002c78:	f043 0304 	orr.w	r3, r3, #4
 8002c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c7e:	4b42      	ldr	r3, [pc, #264]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	4a3d      	ldr	r2, [pc, #244]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002c94:	f043 0308 	orr.w	r3, r3, #8
 8002c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	4b37      	ldr	r3, [pc, #220]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	4a36      	ldr	r2, [pc, #216]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002cb0:	f043 0320 	orr.w	r3, r3, #32
 8002cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cb6:	4b34      	ldr	r3, [pc, #208]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	603b      	str	r3, [r7, #0]
 8002cc6:	4b30      	ldr	r3, [pc, #192]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cca:	4a2f      	ldr	r2, [pc, #188]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002ccc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d88 <LCD_GPIO_Init+0x174>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002cde:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002ce2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002cec:	2302      	movs	r3, #2
 8002cee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002cf0:	230e      	movs	r3, #14
 8002cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002cf4:	f107 031c 	add.w	r3, r7, #28
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4824      	ldr	r0, [pc, #144]	@ (8002d8c <LCD_GPIO_Init+0x178>)
 8002cfc:	f002 fa74 	bl	80051e8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002d00:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002d04:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002d06:	f107 031c 	add.w	r3, r7, #28
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4820      	ldr	r0, [pc, #128]	@ (8002d90 <LCD_GPIO_Init+0x17c>)
 8002d0e:	f002 fa6b 	bl	80051e8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002d12:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002d16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002d18:	f107 031c 	add.w	r3, r7, #28
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	481d      	ldr	r0, [pc, #116]	@ (8002d94 <LCD_GPIO_Init+0x180>)
 8002d20:	f002 fa62 	bl	80051e8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002d24:	2348      	movs	r3, #72	@ 0x48
 8002d26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002d28:	f107 031c 	add.w	r3, r7, #28
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	481a      	ldr	r0, [pc, #104]	@ (8002d98 <LCD_GPIO_Init+0x184>)
 8002d30:	f002 fa5a 	bl	80051e8 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002d34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002d3a:	f107 031c 	add.w	r3, r7, #28
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4816      	ldr	r0, [pc, #88]	@ (8002d9c <LCD_GPIO_Init+0x188>)
 8002d42:	f002 fa51 	bl	80051e8 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002d46:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002d4a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002d4c:	f107 031c 	add.w	r3, r7, #28
 8002d50:	4619      	mov	r1, r3
 8002d52:	4813      	ldr	r0, [pc, #76]	@ (8002da0 <LCD_GPIO_Init+0x18c>)
 8002d54:	f002 fa48 	bl	80051e8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002d5c:	2309      	movs	r3, #9
 8002d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002d60:	f107 031c 	add.w	r3, r7, #28
 8002d64:	4619      	mov	r1, r3
 8002d66:	480a      	ldr	r0, [pc, #40]	@ (8002d90 <LCD_GPIO_Init+0x17c>)
 8002d68:	f002 fa3e 	bl	80051e8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002d6c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002d70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002d72:	f107 031c 	add.w	r3, r7, #28
 8002d76:	4619      	mov	r1, r3
 8002d78:	4809      	ldr	r0, [pc, #36]	@ (8002da0 <LCD_GPIO_Init+0x18c>)
 8002d7a:	f002 fa35 	bl	80051e8 <HAL_GPIO_Init>
}
 8002d7e:	bf00      	nop
 8002d80:	3730      	adds	r7, #48	@ 0x30
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40020000 	.word	0x40020000
 8002d90:	40020400 	.word	0x40020400
 8002d94:	40020800 	.word	0x40020800
 8002d98:	40020c00 	.word	0x40020c00
 8002d9c:	40021400 	.word	0x40021400
 8002da0:	40021800 	.word	0x40021800

08002da4 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b090      	sub	sp, #64	@ 0x40
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8002db2:	23f0      	movs	r3, #240	@ 0xf0
 8002db4:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8002dba:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002dbe:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8002dc4:	23ff      	movs	r3, #255	@ 0xff
 8002dc6:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002dcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002dd2:	2305      	movs	r3, #5
 8002dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8002ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8002e1c <LTCD_Layer_Init+0x78>)
 8002dde:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8002de0:	23f0      	movs	r3, #240	@ 0xf0
 8002de2:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8002de4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002de8:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8002dea:	2300      	movs	r3, #0
 8002dec:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8002dfc:	79fa      	ldrb	r2, [r7, #7]
 8002dfe:	f107 030c 	add.w	r3, r7, #12
 8002e02:	4619      	mov	r1, r3
 8002e04:	4806      	ldr	r0, [pc, #24]	@ (8002e20 <LTCD_Layer_Init+0x7c>)
 8002e06:	f003 fe31 	bl	8006a6c <HAL_LTDC_ConfigLayer>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8002e10:	f000 f9a4 	bl	800315c <LCD_Error_Handler>
	}
}
 8002e14:	bf00      	nop
 8002e16:	3740      	adds	r7, #64	@ 0x40
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	2000018c 	.word	0x2000018c
 8002e20:	200000b0 	.word	0x200000b0

08002e24 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8002e28:	4b2a      	ldr	r3, [pc, #168]	@ (8002ed4 <LTCD__Init+0xb0>)
 8002e2a:	4a2b      	ldr	r2, [pc, #172]	@ (8002ed8 <LTCD__Init+0xb4>)
 8002e2c:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8002e2e:	4b29      	ldr	r3, [pc, #164]	@ (8002ed4 <LTCD__Init+0xb0>)
 8002e30:	2209      	movs	r2, #9
 8002e32:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8002e34:	4b27      	ldr	r3, [pc, #156]	@ (8002ed4 <LTCD__Init+0xb0>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8002e3a:	4b26      	ldr	r3, [pc, #152]	@ (8002ed4 <LTCD__Init+0xb0>)
 8002e3c:	221d      	movs	r2, #29
 8002e3e:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8002e40:	4b24      	ldr	r3, [pc, #144]	@ (8002ed4 <LTCD__Init+0xb0>)
 8002e42:	2203      	movs	r2, #3
 8002e44:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8002e46:	4b23      	ldr	r3, [pc, #140]	@ (8002ed4 <LTCD__Init+0xb0>)
 8002e48:	f240 120d 	movw	r2, #269	@ 0x10d
 8002e4c:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8002e4e:	4b21      	ldr	r3, [pc, #132]	@ (8002ed4 <LTCD__Init+0xb0>)
 8002e50:	f240 1243 	movw	r2, #323	@ 0x143
 8002e54:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8002e56:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed4 <LTCD__Init+0xb0>)
 8002e58:	f240 1217 	movw	r2, #279	@ 0x117
 8002e5c:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8002e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed4 <LTCD__Init+0xb0>)
 8002e60:	f240 1247 	movw	r2, #327	@ 0x147
 8002e64:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8002e66:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <LTCD__Init+0xb0>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8002e6e:	4b19      	ldr	r3, [pc, #100]	@ (8002ed4 <LTCD__Init+0xb0>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8002e76:	4b17      	ldr	r3, [pc, #92]	@ (8002ed4 <LTCD__Init+0xb0>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002e7e:	4b17      	ldr	r3, [pc, #92]	@ (8002edc <LTCD__Init+0xb8>)
 8002e80:	2208      	movs	r2, #8
 8002e82:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002e84:	4b15      	ldr	r3, [pc, #84]	@ (8002edc <LTCD__Init+0xb8>)
 8002e86:	22c0      	movs	r2, #192	@ 0xc0
 8002e88:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002e8a:	4b14      	ldr	r3, [pc, #80]	@ (8002edc <LTCD__Init+0xb8>)
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002e90:	4b12      	ldr	r3, [pc, #72]	@ (8002edc <LTCD__Init+0xb8>)
 8002e92:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e96:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002e98:	4810      	ldr	r0, [pc, #64]	@ (8002edc <LTCD__Init+0xb8>)
 8002e9a:	f004 fc41 	bl	8007720 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed4 <LTCD__Init+0xb0>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed4 <LTCD__Init+0xb0>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed4 <LTCD__Init+0xb0>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002eb0:	4b08      	ldr	r3, [pc, #32]	@ (8002ed4 <LTCD__Init+0xb0>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8002eb6:	f7ff fead 	bl	8002c14 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002eba:	4806      	ldr	r0, [pc, #24]	@ (8002ed4 <LTCD__Init+0xb0>)
 8002ebc:	f003 fd06 	bl	80068cc <HAL_LTDC_Init>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8002ec6:	f000 f949 	bl	800315c <LCD_Error_Handler>
	 }

	ili9341_Init();
 8002eca:	f000 fb2b 	bl	8003524 <ili9341_Init>
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	200000b0 	.word	0x200000b0
 8002ed8:	40016800 	.word	0x40016800
 8002edc:	20000158 	.word	0x20000158

08002ee0 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	80fb      	strh	r3, [r7, #6]
 8002eea:	460b      	mov	r3, r1
 8002eec:	80bb      	strh	r3, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8002ef2:	88ba      	ldrh	r2, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	461a      	mov	r2, r3
 8002efe:	88fb      	ldrh	r3, [r7, #6]
 8002f00:	4413      	add	r3, r2
 8002f02:	4905      	ldr	r1, [pc, #20]	@ (8002f18 <LCD_Draw_Pixel+0x38>)
 8002f04:	887a      	ldrh	r2, [r7, #2]
 8002f06:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	2000018c 	.word	0x2000018c

08002f1c <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4604      	mov	r4, r0
 8002f24:	4608      	mov	r0, r1
 8002f26:	4611      	mov	r1, r2
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4623      	mov	r3, r4
 8002f2c:	80fb      	strh	r3, [r7, #6]
 8002f2e:	4603      	mov	r3, r0
 8002f30:	80bb      	strh	r3, [r7, #4]
 8002f32:	460b      	mov	r3, r1
 8002f34:	807b      	strh	r3, [r7, #2]
 8002f36:	4613      	mov	r3, r2
 8002f38:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	81fb      	strh	r3, [r7, #14]
 8002f3e:	e00b      	b.n	8002f58 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8002f40:	89fa      	ldrh	r2, [r7, #14]
 8002f42:	88bb      	ldrh	r3, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	b299      	uxth	r1, r3
 8002f48:	883a      	ldrh	r2, [r7, #0]
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ffc7 	bl	8002ee0 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8002f52:	89fb      	ldrh	r3, [r7, #14]
 8002f54:	3301      	adds	r3, #1
 8002f56:	81fb      	strh	r3, [r7, #14]
 8002f58:	89fa      	ldrh	r2, [r7, #14]
 8002f5a:	887b      	ldrh	r3, [r7, #2]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d3ef      	bcc.n	8002f40 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8002f60:	bf00      	nop
 8002f62:	bf00      	nop
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd90      	pop	{r4, r7, pc}

08002f6a <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8002f6a:	b590      	push	{r4, r7, lr}
 8002f6c:	b085      	sub	sp, #20
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	4604      	mov	r4, r0
 8002f72:	4608      	mov	r0, r1
 8002f74:	4611      	mov	r1, r2
 8002f76:	461a      	mov	r2, r3
 8002f78:	4623      	mov	r3, r4
 8002f7a:	80fb      	strh	r3, [r7, #6]
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	80bb      	strh	r3, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
 8002f84:	4613      	mov	r3, r2
 8002f86:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8002f88:	2300      	movs	r3, #0
 8002f8a:	81fb      	strh	r3, [r7, #14]
 8002f8c:	e00b      	b.n	8002fa6 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8002f8e:	89fa      	ldrh	r2, [r7, #14]
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	4413      	add	r3, r2
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	883a      	ldrh	r2, [r7, #0]
 8002f98:	88b9      	ldrh	r1, [r7, #4]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff ffa0 	bl	8002ee0 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8002fa0:	89fb      	ldrh	r3, [r7, #14]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	81fb      	strh	r3, [r7, #14]
 8002fa6:	89fa      	ldrh	r2, [r7, #14]
 8002fa8:	887b      	ldrh	r3, [r7, #2]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d3ef      	bcc.n	8002f8e <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8002fae:	bf00      	nop
 8002fb0:	bf00      	nop
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd90      	pop	{r4, r7, pc}

08002fb8 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	460a      	mov	r2, r1
 8002fc2:	71fb      	strb	r3, [r7, #7]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10e      	bne.n	8002fec <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	e007      	b.n	8002fe4 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8002fd4:	4908      	ldr	r1, [pc, #32]	@ (8002ff8 <LCD_Clear+0x40>)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	88ba      	ldrh	r2, [r7, #4]
 8002fda:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8002fea:	d3f3      	bcc.n	8002fd4 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	2000018c 	.word	0x2000018c

08002ffc <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8003006:	4a04      	ldr	r2, [pc, #16]	@ (8003018 <LCD_SetTextColor+0x1c>)
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	8013      	strh	r3, [r2, #0]
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	20000000 	.word	0x20000000

0800301c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8003024:	4a04      	ldr	r2, [pc, #16]	@ (8003038 <LCD_SetFont+0x1c>)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6013      	str	r3, [r2, #0]
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	20000188 	.word	0x20000188

0800303c <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	603a      	str	r2, [r7, #0]
 8003046:	80fb      	strh	r3, [r7, #6]
 8003048:	460b      	mov	r3, r1
 800304a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	2300      	movs	r3, #0
 8003052:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	e04c      	b.n	80030f4 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	e03f      	b.n	80030e0 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	4413      	add	r3, r2
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	4619      	mov	r1, r3
 800306c:	4b27      	ldr	r3, [pc, #156]	@ (800310c <LCD_Draw_Char+0xd0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	889b      	ldrh	r3, [r3, #4]
 8003072:	4a27      	ldr	r2, [pc, #156]	@ (8003110 <LCD_Draw_Char+0xd4>)
 8003074:	fba2 2303 	umull	r2, r3, r2, r3
 8003078:	08db      	lsrs	r3, r3, #3
 800307a:	b29b      	uxth	r3, r3
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	2280      	movs	r2, #128	@ 0x80
 8003080:	409a      	lsls	r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	fa42 f303 	asr.w	r3, r2, r3
 8003088:	400b      	ands	r3, r1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d104      	bne.n	8003098 <LCD_Draw_Char+0x5c>
 800308e:	4b1f      	ldr	r3, [pc, #124]	@ (800310c <LCD_Draw_Char+0xd0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	889b      	ldrh	r3, [r3, #4]
 8003094:	2b0c      	cmp	r3, #12
 8003096:	d920      	bls.n	80030da <LCD_Draw_Char+0x9e>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	4413      	add	r3, r2
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	fa42 f303 	asr.w	r3, r2, r3
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d104      	bne.n	80030bc <LCD_Draw_Char+0x80>
 80030b2:	4b16      	ldr	r3, [pc, #88]	@ (800310c <LCD_Draw_Char+0xd0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	889b      	ldrh	r3, [r3, #4]
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	d80e      	bhi.n	80030da <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	b29a      	uxth	r2, r3
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	4413      	add	r3, r2
 80030c4:	b298      	uxth	r0, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	88bb      	ldrh	r3, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	4a10      	ldr	r2, [pc, #64]	@ (8003114 <LCD_Draw_Char+0xd8>)
 80030d2:	8812      	ldrh	r2, [r2, #0]
 80030d4:	4619      	mov	r1, r3
 80030d6:	f7ff ff03 	bl	8002ee0 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	3301      	adds	r3, #1
 80030de:	60bb      	str	r3, [r7, #8]
 80030e0:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <LCD_Draw_Char+0xd0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	889b      	ldrh	r3, [r3, #4]
 80030e6:	461a      	mov	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d3b8      	bcc.n	8003060 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3301      	adds	r3, #1
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	4b05      	ldr	r3, [pc, #20]	@ (800310c <LCD_Draw_Char+0xd0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	88db      	ldrh	r3, [r3, #6]
 80030fa:	461a      	mov	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4293      	cmp	r3, r2
 8003100:	d3ab      	bcc.n	800305a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8003102:	bf00      	nop
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20000188 	.word	0x20000188
 8003110:	aaaaaaab 	.word	0xaaaaaaab
 8003114:	20000000 	.word	0x20000000

08003118 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	80fb      	strh	r3, [r7, #6]
 8003122:	460b      	mov	r3, r1
 8003124:	80bb      	strh	r3, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	3b20      	subs	r3, #32
 800312e:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8003130:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <LCD_DisplayChar+0x40>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	4907      	ldr	r1, [pc, #28]	@ (8003158 <LCD_DisplayChar+0x40>)
 800313a:	6809      	ldr	r1, [r1, #0]
 800313c:	88c9      	ldrh	r1, [r1, #6]
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	441a      	add	r2, r3
 8003146:	88b9      	ldrh	r1, [r7, #4]
 8003148:	88fb      	ldrh	r3, [r7, #6]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff ff76 	bl	800303c <LCD_Draw_Char>
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20000188 	.word	0x20000188

0800315c <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003160:	b672      	cpsid	i
}
 8003162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003164:	bf00      	nop
 8003166:	e7fd      	b.n	8003164 <LCD_Error_Handler+0x8>

08003168 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 800316c:	f001 fa96 	bl	800469c <STMPE811_Init>
 8003170:	4603      	mov	r3, r0
 8003172:	2b02      	cmp	r3, #2
 8003174:	d001      	beq.n	800317a <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8003176:	bf00      	nop
 8003178:	e7fd      	b.n	8003176 <InitializeLCDTouch+0xe>
  }
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}

0800317e <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f001 fb72 	bl	8004870 <STMPE811_DetermineTouchPosition>
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f001 fb42 	bl	800482a <STMPE811_Read>
 80031a6:	4603      	mov	r3, r0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	460a      	mov	r2, r1
 80031ba:	71fb      	strb	r3, [r7, #7]
 80031bc:	4613      	mov	r3, r2
 80031be:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 80031c0:	79ba      	ldrb	r2, [r7, #6]
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	4611      	mov	r1, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f001 fb40 	bl	800484c <STMPE811_Write>
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <game_init>:
static block_t block;
static map_t map;
static uint8_t game_started;

void game_init()
{
 80031d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d6:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 80031da:	af0a      	add	r7, sp, #40	@ 0x28
	game_started = STARTED;
 80031dc:	4b22      	ldr	r3, [pc, #136]	@ (8003268 <game_init+0x94>)
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
	//{
		//map_draw();
	//}

	//HAL_Delay(2000);
	LCD_Clear(0,LCD_COLOR_BLACK);
 80031e2:	2100      	movs	r1, #0
 80031e4:	2000      	movs	r0, #0
 80031e6:	f7ff fee7 	bl	8002fb8 <LCD_Clear>
	map_draw();
 80031ea:	f7fd fad1 	bl	8000790 <map_draw>


	block = block_create();
 80031ee:	4d1f      	ldr	r5, [pc, #124]	@ (800326c <game_init+0x98>)
 80031f0:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fd fcf1 	bl	8000bdc <block_create>
 80031fa:	f507 740e 	add.w	r4, r7, #568	@ 0x238
 80031fe:	462e      	mov	r6, r5
 8003200:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8003204:	4635      	mov	r5, r6
 8003206:	4623      	mov	r3, r4
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003212:	3410      	adds	r4, #16
 8003214:	3610      	adds	r6, #16
 8003216:	4564      	cmp	r4, ip
 8003218:	d1f4      	bne.n	8003204 <game_init+0x30>
 800321a:	4633      	mov	r3, r6
 800321c:	4622      	mov	r2, r4
 800321e:	6810      	ldr	r0, [r2, #0]
 8003220:	6018      	str	r0, [r3, #0]
	draw_tetromino(block);
 8003222:	4e12      	ldr	r6, [pc, #72]	@ (800326c <game_init+0x98>)
 8003224:	466d      	mov	r5, sp
 8003226:	f106 0410 	add.w	r4, r6, #16
 800322a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800322c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800322e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	602b      	str	r3, [r5, #0]
 8003236:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800323a:	f7ff fa85 	bl	8002748 <draw_tetromino>
	map = map_init();
 800323e:	4c0c      	ldr	r4, [pc, #48]	@ (8003270 <game_init+0x9c>)
 8003240:	463b      	mov	r3, r7
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe f838 	bl	80012b8 <map_init>
 8003248:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800324c:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8003250:	4620      	mov	r0, r4
 8003252:	4619      	mov	r1, r3
 8003254:	f240 2336 	movw	r3, #566	@ 0x236
 8003258:	461a      	mov	r2, r3
 800325a:	f005 f995 	bl	8008588 <memcpy>
}
 800325e:	bf00      	nop
 8003260:	f507 771d 	add.w	r7, r7, #628	@ 0x274
 8003264:	46bd      	mov	sp, r7
 8003266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003268:	20025bf6 	.word	0x20025bf6
 800326c:	2002598c 	.word	0x2002598c
 8003270:	200259c0 	.word	0x200259c0

08003274 <game_start_screen>:

void game_start_screen()
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
	game_started = NOT_STARTED;
 8003278:	4b04      	ldr	r3, [pc, #16]	@ (800328c <game_start_screen+0x18>)
 800327a:	2201      	movs	r2, #1
 800327c:	701a      	strb	r2, [r3, #0]
	draw_shapes();
 800327e:	f7ff f946 	bl	800250e <draw_shapes>
	start_screen();
 8003282:	f7fd fb05 	bl	8000890 <start_screen>
}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20025bf6 	.word	0x20025bf6

08003290 <is_start_screen>:

uint8_t is_start_screen()
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
	return game_started;
 8003294:	4b03      	ldr	r3, [pc, #12]	@ (80032a4 <is_start_screen+0x14>)
 8003296:	781b      	ldrb	r3, [r3, #0]
}
 8003298:	4618      	mov	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20025bf6 	.word	0x20025bf6

080032a8 <game_over>:

void game_over()
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
	end_screen();
 80032ae:	f7fd fbb9 	bl	8000a24 <end_screen>
	uint32_t time = HAL_GetTick();
 80032b2:	f001 fde1 	bl	8004e78 <HAL_GetTick>
 80032b6:	6078      	str	r0, [r7, #4]
	disp_time(time);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7fd fbed 	bl	8000a98 <disp_time>
	while(1){}
 80032be:	bf00      	nop
 80032c0:	e7fd      	b.n	80032be <game_over+0x16>
	...

080032c4 <game_drop>:
}

void game_drop()
{
 80032c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032c6:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 80032ca:	af0a      	add	r7, sp, #40	@ 0x28
	if(!rest(&block, &map))
 80032cc:	4943      	ldr	r1, [pc, #268]	@ (80033dc <game_drop+0x118>)
 80032ce:	4844      	ldr	r0, [pc, #272]	@ (80033e0 <game_drop+0x11c>)
 80032d0:	f7fe f865 	bl	800139e <rest>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d137      	bne.n	800334a <game_drop+0x86>
	{
		//HAL_Delay(500);
		clear_tetromino(block);
 80032da:	4e41      	ldr	r6, [pc, #260]	@ (80033e0 <game_drop+0x11c>)
 80032dc:	466d      	mov	r5, sp
 80032de:	f106 0410 	add.w	r4, r6, #16
 80032e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	602b      	str	r3, [r5, #0]
 80032ee:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80032f2:	f7ff fa69 	bl	80027c8 <clear_tetromino>
		block = block_drop(&block);
 80032f6:	4d3a      	ldr	r5, [pc, #232]	@ (80033e0 <game_drop+0x11c>)
 80032f8:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80032fc:	4938      	ldr	r1, [pc, #224]	@ (80033e0 <game_drop+0x11c>)
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd fc1e 	bl	8000b40 <block_drop>
 8003304:	f507 740e 	add.w	r4, r7, #568	@ 0x238
 8003308:	462e      	mov	r6, r5
 800330a:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800330e:	4635      	mov	r5, r6
 8003310:	4623      	mov	r3, r4
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	6859      	ldr	r1, [r3, #4]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800331c:	3410      	adds	r4, #16
 800331e:	3610      	adds	r6, #16
 8003320:	4564      	cmp	r4, ip
 8003322:	d1f4      	bne.n	800330e <game_drop+0x4a>
 8003324:	4633      	mov	r3, r6
 8003326:	4622      	mov	r2, r4
 8003328:	6810      	ldr	r0, [r2, #0]
 800332a:	6018      	str	r0, [r3, #0]
		draw_tetromino(block);
 800332c:	4e2c      	ldr	r6, [pc, #176]	@ (80033e0 <game_drop+0x11c>)
 800332e:	466d      	mov	r5, sp
 8003330:	f106 0410 	add.w	r4, r6, #16
 8003334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800333a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	602b      	str	r3, [r5, #0]
 8003340:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003344:	f7ff fa00 	bl	8002748 <draw_tetromino>
		if(can_spawn(&block, &map))
		{
			draw_tetromino(block);
		}
	}
}
 8003348:	e042      	b.n	80033d0 <game_drop+0x10c>
		map = map_update(&block, &map);
 800334a:	4c24      	ldr	r4, [pc, #144]	@ (80033dc <game_drop+0x118>)
 800334c:	463b      	mov	r3, r7
 800334e:	4a23      	ldr	r2, [pc, #140]	@ (80033dc <game_drop+0x118>)
 8003350:	4923      	ldr	r1, [pc, #140]	@ (80033e0 <game_drop+0x11c>)
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe fa91 	bl	800187a <map_update>
 8003358:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800335c:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8003360:	4620      	mov	r0, r4
 8003362:	4619      	mov	r1, r3
 8003364:	f240 2336 	movw	r3, #566	@ 0x236
 8003368:	461a      	mov	r2, r3
 800336a:	f005 f90d 	bl	8008588 <memcpy>
		block = block_create();
 800336e:	4d1c      	ldr	r5, [pc, #112]	@ (80033e0 <game_drop+0x11c>)
 8003370:	463b      	mov	r3, r7
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd fc32 	bl	8000bdc <block_create>
 8003378:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800337c:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8003380:	461c      	mov	r4, r3
 8003382:	462e      	mov	r6, r5
 8003384:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8003388:	4635      	mov	r5, r6
 800338a:	4623      	mov	r3, r4
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	6859      	ldr	r1, [r3, #4]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003396:	3410      	adds	r4, #16
 8003398:	3610      	adds	r6, #16
 800339a:	4564      	cmp	r4, ip
 800339c:	d1f4      	bne.n	8003388 <game_drop+0xc4>
 800339e:	4633      	mov	r3, r6
 80033a0:	4622      	mov	r2, r4
 80033a2:	6810      	ldr	r0, [r2, #0]
 80033a4:	6018      	str	r0, [r3, #0]
		if(can_spawn(&block, &map))
 80033a6:	490d      	ldr	r1, [pc, #52]	@ (80033dc <game_drop+0x118>)
 80033a8:	480d      	ldr	r0, [pc, #52]	@ (80033e0 <game_drop+0x11c>)
 80033aa:	f7ff fa4c 	bl	8002846 <can_spawn>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00d      	beq.n	80033d0 <game_drop+0x10c>
			draw_tetromino(block);
 80033b4:	4e0a      	ldr	r6, [pc, #40]	@ (80033e0 <game_drop+0x11c>)
 80033b6:	466d      	mov	r5, sp
 80033b8:	f106 0410 	add.w	r4, r6, #16
 80033bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	602b      	str	r3, [r5, #0]
 80033c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80033cc:	f7ff f9bc 	bl	8002748 <draw_tetromino>
}
 80033d0:	bf00      	nop
 80033d2:	f507 771d 	add.w	r7, r7, #628	@ 0x274
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033da:	bf00      	nop
 80033dc:	200259c0 	.word	0x200259c0
 80033e0:	2002598c 	.word	0x2002598c

080033e4 <game_rotate>:

void game_rotate()
{
 80033e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033e6:	b099      	sub	sp, #100	@ 0x64
 80033e8:	af0a      	add	r7, sp, #40	@ 0x28
	//HAL_Delay(500);
	clear_tetromino(block);
 80033ea:	4e1c      	ldr	r6, [pc, #112]	@ (800345c <game_rotate+0x78>)
 80033ec:	466d      	mov	r5, sp
 80033ee:	f106 0410 	add.w	r4, r6, #16
 80033f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	602b      	str	r3, [r5, #0]
 80033fe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003402:	f7ff f9e1 	bl	80027c8 <clear_tetromino>
	block = block_rotate(&block);
 8003406:	4d15      	ldr	r5, [pc, #84]	@ (800345c <game_rotate+0x78>)
 8003408:	463b      	mov	r3, r7
 800340a:	4914      	ldr	r1, [pc, #80]	@ (800345c <game_rotate+0x78>)
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe fb7f 	bl	8001b10 <block_rotate>
 8003412:	463c      	mov	r4, r7
 8003414:	462e      	mov	r6, r5
 8003416:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800341a:	4635      	mov	r5, r6
 800341c:	4623      	mov	r3, r4
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	6859      	ldr	r1, [r3, #4]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003428:	3410      	adds	r4, #16
 800342a:	3610      	adds	r6, #16
 800342c:	4564      	cmp	r4, ip
 800342e:	d1f4      	bne.n	800341a <game_rotate+0x36>
 8003430:	4633      	mov	r3, r6
 8003432:	4622      	mov	r2, r4
 8003434:	6810      	ldr	r0, [r2, #0]
 8003436:	6018      	str	r0, [r3, #0]
	draw_tetromino(block);
 8003438:	4e08      	ldr	r6, [pc, #32]	@ (800345c <game_rotate+0x78>)
 800343a:	466d      	mov	r5, sp
 800343c:	f106 0410 	add.w	r4, r6, #16
 8003440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	602b      	str	r3, [r5, #0]
 800344c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003450:	f7ff f97a 	bl	8002748 <draw_tetromino>
}
 8003454:	bf00      	nop
 8003456:	373c      	adds	r7, #60	@ 0x3c
 8003458:	46bd      	mov	sp, r7
 800345a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800345c:	2002598c 	.word	0x2002598c

08003460 <game_move>:

void game_move(uint8_t dir)
{
 8003460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003462:	b09b      	sub	sp, #108	@ 0x6c
 8003464:	af0a      	add	r7, sp, #40	@ 0x28
 8003466:	4603      	mov	r3, r0
 8003468:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if(can_move(&block, &map, dir))
 800346c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003470:	461a      	mov	r2, r3
 8003472:	4921      	ldr	r1, [pc, #132]	@ (80034f8 <game_move+0x98>)
 8003474:	4821      	ldr	r0, [pc, #132]	@ (80034fc <game_move+0x9c>)
 8003476:	f7fe fce7 	bl	8001e48 <can_move>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d036      	beq.n	80034ee <game_move+0x8e>
	{
		clear_tetromino(block);
 8003480:	4e1e      	ldr	r6, [pc, #120]	@ (80034fc <game_move+0x9c>)
 8003482:	466d      	mov	r5, sp
 8003484:	f106 0410 	add.w	r4, r6, #16
 8003488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800348a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800348c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800348e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	602b      	str	r3, [r5, #0]
 8003494:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003498:	f7ff f996 	bl	80027c8 <clear_tetromino>
		block = block_move(&block, &map, dir);
 800349c:	4d17      	ldr	r5, [pc, #92]	@ (80034fc <game_move+0x9c>)
 800349e:	4638      	mov	r0, r7
 80034a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80034a4:	4a14      	ldr	r2, [pc, #80]	@ (80034f8 <game_move+0x98>)
 80034a6:	4915      	ldr	r1, [pc, #84]	@ (80034fc <game_move+0x9c>)
 80034a8:	f7fe ffa2 	bl	80023f0 <block_move>
 80034ac:	463c      	mov	r4, r7
 80034ae:	462e      	mov	r6, r5
 80034b0:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80034b4:	4635      	mov	r5, r6
 80034b6:	4623      	mov	r3, r4
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034c2:	3410      	adds	r4, #16
 80034c4:	3610      	adds	r6, #16
 80034c6:	4564      	cmp	r4, ip
 80034c8:	d1f4      	bne.n	80034b4 <game_move+0x54>
 80034ca:	4633      	mov	r3, r6
 80034cc:	4622      	mov	r2, r4
 80034ce:	6810      	ldr	r0, [r2, #0]
 80034d0:	6018      	str	r0, [r3, #0]
		draw_tetromino(block);
 80034d2:	4e0a      	ldr	r6, [pc, #40]	@ (80034fc <game_move+0x9c>)
 80034d4:	466d      	mov	r5, sp
 80034d6:	f106 0410 	add.w	r4, r6, #16
 80034da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	602b      	str	r3, [r5, #0]
 80034e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80034ea:	f7ff f92d 	bl	8002748 <draw_tetromino>
	}
}
 80034ee:	bf00      	nop
 80034f0:	3744      	adds	r7, #68	@ 0x44
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034f6:	bf00      	nop
 80034f8:	200259c0 	.word	0x200259c0
 80034fc:	2002598c 	.word	0x2002598c

08003500 <game_finished>:

uint8_t game_finished()
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
	if(can_spawn(&block, &map))
 8003504:	4905      	ldr	r1, [pc, #20]	@ (800351c <game_finished+0x1c>)
 8003506:	4806      	ldr	r0, [pc, #24]	@ (8003520 <game_finished+0x20>)
 8003508:	f7ff f99d 	bl	8002846 <can_spawn>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <game_finished+0x16>
	{
		return 0;
 8003512:	2300      	movs	r3, #0
 8003514:	e000      	b.n	8003518 <game_finished+0x18>
	}
	return 1;
 8003516:	2301      	movs	r3, #1
}
 8003518:	4618      	mov	r0, r3
 800351a:	bd80      	pop	{r7, pc}
 800351c:	200259c0 	.word	0x200259c0
 8003520:	2002598c 	.word	0x2002598c

08003524 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003528:	f000 f9fe 	bl	8003928 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 800352c:	20ca      	movs	r0, #202	@ 0xca
 800352e:	f000 f943 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8003532:	20c3      	movs	r0, #195	@ 0xc3
 8003534:	f000 f94d 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8003538:	2008      	movs	r0, #8
 800353a:	f000 f94a 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800353e:	2050      	movs	r0, #80	@ 0x50
 8003540:	f000 f947 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8003544:	20cf      	movs	r0, #207	@ 0xcf
 8003546:	f000 f937 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800354a:	2000      	movs	r0, #0
 800354c:	f000 f941 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8003550:	20c1      	movs	r0, #193	@ 0xc1
 8003552:	f000 f93e 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8003556:	2030      	movs	r0, #48	@ 0x30
 8003558:	f000 f93b 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 800355c:	20ed      	movs	r0, #237	@ 0xed
 800355e:	f000 f92b 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8003562:	2064      	movs	r0, #100	@ 0x64
 8003564:	f000 f935 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8003568:	2003      	movs	r0, #3
 800356a:	f000 f932 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800356e:	2012      	movs	r0, #18
 8003570:	f000 f92f 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8003574:	2081      	movs	r0, #129	@ 0x81
 8003576:	f000 f92c 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800357a:	20e8      	movs	r0, #232	@ 0xe8
 800357c:	f000 f91c 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8003580:	2085      	movs	r0, #133	@ 0x85
 8003582:	f000 f926 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003586:	2000      	movs	r0, #0
 8003588:	f000 f923 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800358c:	2078      	movs	r0, #120	@ 0x78
 800358e:	f000 f920 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8003592:	20cb      	movs	r0, #203	@ 0xcb
 8003594:	f000 f910 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8003598:	2039      	movs	r0, #57	@ 0x39
 800359a:	f000 f91a 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800359e:	202c      	movs	r0, #44	@ 0x2c
 80035a0:	f000 f917 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80035a4:	2000      	movs	r0, #0
 80035a6:	f000 f914 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80035aa:	2034      	movs	r0, #52	@ 0x34
 80035ac:	f000 f911 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80035b0:	2002      	movs	r0, #2
 80035b2:	f000 f90e 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80035b6:	20f7      	movs	r0, #247	@ 0xf7
 80035b8:	f000 f8fe 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80035bc:	2020      	movs	r0, #32
 80035be:	f000 f908 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80035c2:	20ea      	movs	r0, #234	@ 0xea
 80035c4:	f000 f8f8 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80035c8:	2000      	movs	r0, #0
 80035ca:	f000 f902 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80035ce:	2000      	movs	r0, #0
 80035d0:	f000 f8ff 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80035d4:	20b1      	movs	r0, #177	@ 0xb1
 80035d6:	f000 f8ef 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80035da:	2000      	movs	r0, #0
 80035dc:	f000 f8f9 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80035e0:	201b      	movs	r0, #27
 80035e2:	f000 f8f6 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80035e6:	20b6      	movs	r0, #182	@ 0xb6
 80035e8:	f000 f8e6 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80035ec:	200a      	movs	r0, #10
 80035ee:	f000 f8f0 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80035f2:	20a2      	movs	r0, #162	@ 0xa2
 80035f4:	f000 f8ed 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80035f8:	20c0      	movs	r0, #192	@ 0xc0
 80035fa:	f000 f8dd 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80035fe:	2010      	movs	r0, #16
 8003600:	f000 f8e7 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8003604:	20c1      	movs	r0, #193	@ 0xc1
 8003606:	f000 f8d7 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800360a:	2010      	movs	r0, #16
 800360c:	f000 f8e1 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8003610:	20c5      	movs	r0, #197	@ 0xc5
 8003612:	f000 f8d1 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8003616:	2045      	movs	r0, #69	@ 0x45
 8003618:	f000 f8db 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 800361c:	2015      	movs	r0, #21
 800361e:	f000 f8d8 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8003622:	20c7      	movs	r0, #199	@ 0xc7
 8003624:	f000 f8c8 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8003628:	2090      	movs	r0, #144	@ 0x90
 800362a:	f000 f8d2 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800362e:	2036      	movs	r0, #54	@ 0x36
 8003630:	f000 f8c2 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8003634:	20c8      	movs	r0, #200	@ 0xc8
 8003636:	f000 f8cc 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800363a:	20f2      	movs	r0, #242	@ 0xf2
 800363c:	f000 f8bc 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003640:	2000      	movs	r0, #0
 8003642:	f000 f8c6 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8003646:	20b0      	movs	r0, #176	@ 0xb0
 8003648:	f000 f8b6 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 800364c:	20c2      	movs	r0, #194	@ 0xc2
 800364e:	f000 f8c0 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8003652:	20b6      	movs	r0, #182	@ 0xb6
 8003654:	f000 f8b0 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003658:	200a      	movs	r0, #10
 800365a:	f000 f8ba 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800365e:	20a7      	movs	r0, #167	@ 0xa7
 8003660:	f000 f8b7 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8003664:	2027      	movs	r0, #39	@ 0x27
 8003666:	f000 f8b4 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800366a:	2004      	movs	r0, #4
 800366c:	f000 f8b1 	bl	80037d2 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8003670:	202a      	movs	r0, #42	@ 0x2a
 8003672:	f000 f8a1 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003676:	2000      	movs	r0, #0
 8003678:	f000 f8ab 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800367c:	2000      	movs	r0, #0
 800367e:	f000 f8a8 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003682:	2000      	movs	r0, #0
 8003684:	f000 f8a5 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8003688:	20ef      	movs	r0, #239	@ 0xef
 800368a:	f000 f8a2 	bl	80037d2 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800368e:	202b      	movs	r0, #43	@ 0x2b
 8003690:	f000 f892 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003694:	2000      	movs	r0, #0
 8003696:	f000 f89c 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800369a:	2000      	movs	r0, #0
 800369c:	f000 f899 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80036a0:	2001      	movs	r0, #1
 80036a2:	f000 f896 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80036a6:	203f      	movs	r0, #63	@ 0x3f
 80036a8:	f000 f893 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80036ac:	20f6      	movs	r0, #246	@ 0xf6
 80036ae:	f000 f883 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80036b2:	2001      	movs	r0, #1
 80036b4:	f000 f88d 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80036b8:	2000      	movs	r0, #0
 80036ba:	f000 f88a 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80036be:	2006      	movs	r0, #6
 80036c0:	f000 f887 	bl	80037d2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80036c4:	202c      	movs	r0, #44	@ 0x2c
 80036c6:	f000 f877 	bl	80037b8 <ili9341_Write_Reg>
  LCD_Delay(200);
 80036ca:	20c8      	movs	r0, #200	@ 0xc8
 80036cc:	f000 f9e8 	bl	8003aa0 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80036d0:	2026      	movs	r0, #38	@ 0x26
 80036d2:	f000 f871 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80036d6:	2001      	movs	r0, #1
 80036d8:	f000 f87b 	bl	80037d2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80036dc:	20e0      	movs	r0, #224	@ 0xe0
 80036de:	f000 f86b 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80036e2:	200f      	movs	r0, #15
 80036e4:	f000 f875 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80036e8:	2029      	movs	r0, #41	@ 0x29
 80036ea:	f000 f872 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80036ee:	2024      	movs	r0, #36	@ 0x24
 80036f0:	f000 f86f 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80036f4:	200c      	movs	r0, #12
 80036f6:	f000 f86c 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80036fa:	200e      	movs	r0, #14
 80036fc:	f000 f869 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003700:	2009      	movs	r0, #9
 8003702:	f000 f866 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8003706:	204e      	movs	r0, #78	@ 0x4e
 8003708:	f000 f863 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800370c:	2078      	movs	r0, #120	@ 0x78
 800370e:	f000 f860 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8003712:	203c      	movs	r0, #60	@ 0x3c
 8003714:	f000 f85d 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003718:	2009      	movs	r0, #9
 800371a:	f000 f85a 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 800371e:	2013      	movs	r0, #19
 8003720:	f000 f857 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8003724:	2005      	movs	r0, #5
 8003726:	f000 f854 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800372a:	2017      	movs	r0, #23
 800372c:	f000 f851 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8003730:	2011      	movs	r0, #17
 8003732:	f000 f84e 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003736:	2000      	movs	r0, #0
 8003738:	f000 f84b 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 800373c:	20e1      	movs	r0, #225	@ 0xe1
 800373e:	f000 f83b 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003742:	2000      	movs	r0, #0
 8003744:	f000 f845 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8003748:	2016      	movs	r0, #22
 800374a:	f000 f842 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800374e:	201b      	movs	r0, #27
 8003750:	f000 f83f 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8003754:	2004      	movs	r0, #4
 8003756:	f000 f83c 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800375a:	2011      	movs	r0, #17
 800375c:	f000 f839 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8003760:	2007      	movs	r0, #7
 8003762:	f000 f836 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8003766:	2031      	movs	r0, #49	@ 0x31
 8003768:	f000 f833 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 800376c:	2033      	movs	r0, #51	@ 0x33
 800376e:	f000 f830 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8003772:	2042      	movs	r0, #66	@ 0x42
 8003774:	f000 f82d 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8003778:	2005      	movs	r0, #5
 800377a:	f000 f82a 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800377e:	200c      	movs	r0, #12
 8003780:	f000 f827 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8003784:	200a      	movs	r0, #10
 8003786:	f000 f824 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800378a:	2028      	movs	r0, #40	@ 0x28
 800378c:	f000 f821 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8003790:	202f      	movs	r0, #47	@ 0x2f
 8003792:	f000 f81e 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8003796:	200f      	movs	r0, #15
 8003798:	f000 f81b 	bl	80037d2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800379c:	2011      	movs	r0, #17
 800379e:	f000 f80b 	bl	80037b8 <ili9341_Write_Reg>
  LCD_Delay(200);
 80037a2:	20c8      	movs	r0, #200	@ 0xc8
 80037a4:	f000 f97c 	bl	8003aa0 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80037a8:	2029      	movs	r0, #41	@ 0x29
 80037aa:	f000 f805 	bl	80037b8 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80037ae:	202c      	movs	r0, #44	@ 0x2c
 80037b0:	f000 f802 	bl	80037b8 <ili9341_Write_Reg>
}
 80037b4:	bf00      	nop
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 f949 	bl	8003a5c <LCD_IO_WriteReg>
}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	4603      	mov	r3, r0
 80037da:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 f91a 	bl	8003a18 <LCD_IO_WriteData>
}
 80037e4:	bf00      	nop
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80037f0:	4819      	ldr	r0, [pc, #100]	@ (8003858 <SPI_Init+0x6c>)
 80037f2:	f004 fbca 	bl	8007f8a <HAL_SPI_GetState>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d12b      	bne.n	8003854 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80037fc:	4b16      	ldr	r3, [pc, #88]	@ (8003858 <SPI_Init+0x6c>)
 80037fe:	4a17      	ldr	r2, [pc, #92]	@ (800385c <SPI_Init+0x70>)
 8003800:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003802:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <SPI_Init+0x6c>)
 8003804:	2218      	movs	r2, #24
 8003806:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003808:	4b13      	ldr	r3, [pc, #76]	@ (8003858 <SPI_Init+0x6c>)
 800380a:	2200      	movs	r2, #0
 800380c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800380e:	4b12      	ldr	r3, [pc, #72]	@ (8003858 <SPI_Init+0x6c>)
 8003810:	2200      	movs	r2, #0
 8003812:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003814:	4b10      	ldr	r3, [pc, #64]	@ (8003858 <SPI_Init+0x6c>)
 8003816:	2200      	movs	r2, #0
 8003818:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800381a:	4b0f      	ldr	r3, [pc, #60]	@ (8003858 <SPI_Init+0x6c>)
 800381c:	2200      	movs	r2, #0
 800381e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003820:	4b0d      	ldr	r3, [pc, #52]	@ (8003858 <SPI_Init+0x6c>)
 8003822:	2207      	movs	r2, #7
 8003824:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003826:	4b0c      	ldr	r3, [pc, #48]	@ (8003858 <SPI_Init+0x6c>)
 8003828:	2200      	movs	r2, #0
 800382a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800382c:	4b0a      	ldr	r3, [pc, #40]	@ (8003858 <SPI_Init+0x6c>)
 800382e:	2200      	movs	r2, #0
 8003830:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003832:	4b09      	ldr	r3, [pc, #36]	@ (8003858 <SPI_Init+0x6c>)
 8003834:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003838:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800383a:	4b07      	ldr	r3, [pc, #28]	@ (8003858 <SPI_Init+0x6c>)
 800383c:	2200      	movs	r2, #0
 800383e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003840:	4b05      	ldr	r3, [pc, #20]	@ (8003858 <SPI_Init+0x6c>)
 8003842:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003846:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8003848:	4803      	ldr	r0, [pc, #12]	@ (8003858 <SPI_Init+0x6c>)
 800384a:	f000 f833 	bl	80038b4 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800384e:	4802      	ldr	r0, [pc, #8]	@ (8003858 <SPI_Init+0x6c>)
 8003850:	f004 f9a6 	bl	8007ba0 <HAL_SPI_Init>
  }
}
 8003854:	bf00      	nop
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20025bf8 	.word	0x20025bf8
 800385c:	40015000 	.word	0x40015000

08003860 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800386e:	4b09      	ldr	r3, [pc, #36]	@ (8003894 <SPI_Write+0x34>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	1db9      	adds	r1, r7, #6
 8003874:	2201      	movs	r2, #1
 8003876:	4808      	ldr	r0, [pc, #32]	@ (8003898 <SPI_Write+0x38>)
 8003878:	f004 fa43 	bl	8007d02 <HAL_SPI_Transmit>
 800387c:	4603      	mov	r3, r0
 800387e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8003886:	f000 f809 	bl	800389c <SPI_Error>
  }
}
 800388a:	bf00      	nop
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000014 	.word	0x20000014
 8003898:	20025bf8 	.word	0x20025bf8

0800389c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80038a0:	4803      	ldr	r0, [pc, #12]	@ (80038b0 <SPI_Error+0x14>)
 80038a2:	f004 fa06 	bl	8007cb2 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80038a6:	f7ff ffa1 	bl	80037ec <SPI_Init>
}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20025bf8 	.word	0x20025bf8

080038b4 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08a      	sub	sp, #40	@ 0x28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80038bc:	2300      	movs	r3, #0
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	4b17      	ldr	r3, [pc, #92]	@ (8003920 <SPI_MspInit+0x6c>)
 80038c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c4:	4a16      	ldr	r2, [pc, #88]	@ (8003920 <SPI_MspInit+0x6c>)
 80038c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80038cc:	4b14      	ldr	r3, [pc, #80]	@ (8003920 <SPI_MspInit+0x6c>)
 80038ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	4b10      	ldr	r3, [pc, #64]	@ (8003920 <SPI_MspInit+0x6c>)
 80038de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e0:	4a0f      	ldr	r2, [pc, #60]	@ (8003920 <SPI_MspInit+0x6c>)
 80038e2:	f043 0320 	orr.w	r3, r3, #32
 80038e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80038e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003920 <SPI_MspInit+0x6c>)
 80038ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80038f4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80038f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80038fa:	2302      	movs	r3, #2
 80038fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80038fe:	2302      	movs	r3, #2
 8003900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003902:	2301      	movs	r3, #1
 8003904:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8003906:	2305      	movs	r3, #5
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800390a:	f107 0314 	add.w	r3, r7, #20
 800390e:	4619      	mov	r1, r3
 8003910:	4804      	ldr	r0, [pc, #16]	@ (8003924 <SPI_MspInit+0x70>)
 8003912:	f001 fc69 	bl	80051e8 <HAL_GPIO_Init>
}
 8003916:	bf00      	nop
 8003918:	3728      	adds	r7, #40	@ 0x28
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800
 8003924:	40021400 	.word	0x40021400

08003928 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800392e:	4b36      	ldr	r3, [pc, #216]	@ (8003a08 <LCD_IO_Init+0xe0>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d164      	bne.n	8003a00 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8003936:	4b34      	ldr	r3, [pc, #208]	@ (8003a08 <LCD_IO_Init+0xe0>)
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800393c:	2300      	movs	r3, #0
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	4b32      	ldr	r3, [pc, #200]	@ (8003a0c <LCD_IO_Init+0xe4>)
 8003942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003944:	4a31      	ldr	r2, [pc, #196]	@ (8003a0c <LCD_IO_Init+0xe4>)
 8003946:	f043 0308 	orr.w	r3, r3, #8
 800394a:	6313      	str	r3, [r2, #48]	@ 0x30
 800394c:	4b2f      	ldr	r3, [pc, #188]	@ (8003a0c <LCD_IO_Init+0xe4>)
 800394e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003958:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800395c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800395e:	2301      	movs	r3, #1
 8003960:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003966:	2302      	movs	r3, #2
 8003968:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800396a:	f107 030c 	add.w	r3, r7, #12
 800396e:	4619      	mov	r1, r3
 8003970:	4827      	ldr	r0, [pc, #156]	@ (8003a10 <LCD_IO_Init+0xe8>)
 8003972:	f001 fc39 	bl	80051e8 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	607b      	str	r3, [r7, #4]
 800397a:	4b24      	ldr	r3, [pc, #144]	@ (8003a0c <LCD_IO_Init+0xe4>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397e:	4a23      	ldr	r2, [pc, #140]	@ (8003a0c <LCD_IO_Init+0xe4>)
 8003980:	f043 0308 	orr.w	r3, r3, #8
 8003984:	6313      	str	r3, [r2, #48]	@ 0x30
 8003986:	4b21      	ldr	r3, [pc, #132]	@ (8003a0c <LCD_IO_Init+0xe4>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	607b      	str	r3, [r7, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003992:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003996:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003998:	2301      	movs	r3, #1
 800399a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80039a0:	2302      	movs	r3, #2
 80039a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80039a4:	f107 030c 	add.w	r3, r7, #12
 80039a8:	4619      	mov	r1, r3
 80039aa:	4819      	ldr	r0, [pc, #100]	@ (8003a10 <LCD_IO_Init+0xe8>)
 80039ac:	f001 fc1c 	bl	80051e8 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80039b0:	2300      	movs	r3, #0
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	4b15      	ldr	r3, [pc, #84]	@ (8003a0c <LCD_IO_Init+0xe4>)
 80039b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b8:	4a14      	ldr	r2, [pc, #80]	@ (8003a0c <LCD_IO_Init+0xe4>)
 80039ba:	f043 0304 	orr.w	r3, r3, #4
 80039be:	6313      	str	r3, [r2, #48]	@ 0x30
 80039c0:	4b12      	ldr	r3, [pc, #72]	@ (8003a0c <LCD_IO_Init+0xe4>)
 80039c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	603b      	str	r3, [r7, #0]
 80039ca:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80039cc:	2304      	movs	r3, #4
 80039ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80039d0:	2301      	movs	r3, #1
 80039d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80039d8:	2302      	movs	r3, #2
 80039da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80039dc:	f107 030c 	add.w	r3, r7, #12
 80039e0:	4619      	mov	r1, r3
 80039e2:	480c      	ldr	r0, [pc, #48]	@ (8003a14 <LCD_IO_Init+0xec>)
 80039e4:	f001 fc00 	bl	80051e8 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80039e8:	2200      	movs	r2, #0
 80039ea:	2104      	movs	r1, #4
 80039ec:	4809      	ldr	r0, [pc, #36]	@ (8003a14 <LCD_IO_Init+0xec>)
 80039ee:	f001 feb3 	bl	8005758 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80039f2:	2201      	movs	r2, #1
 80039f4:	2104      	movs	r1, #4
 80039f6:	4807      	ldr	r0, [pc, #28]	@ (8003a14 <LCD_IO_Init+0xec>)
 80039f8:	f001 feae 	bl	8005758 <HAL_GPIO_WritePin>

    SPI_Init();
 80039fc:	f7ff fef6 	bl	80037ec <SPI_Init>
  }
}
 8003a00:	bf00      	nop
 8003a02:	3720      	adds	r7, #32
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20025c50 	.word	0x20025c50
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40020c00 	.word	0x40020c00
 8003a14:	40020800 	.word	0x40020800

08003a18 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003a22:	2201      	movs	r2, #1
 8003a24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a28:	480a      	ldr	r0, [pc, #40]	@ (8003a54 <LCD_IO_WriteData+0x3c>)
 8003a2a:	f001 fe95 	bl	8005758 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2104      	movs	r1, #4
 8003a32:	4809      	ldr	r0, [pc, #36]	@ (8003a58 <LCD_IO_WriteData+0x40>)
 8003a34:	f001 fe90 	bl	8005758 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff ff10 	bl	8003860 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003a40:	2201      	movs	r2, #1
 8003a42:	2104      	movs	r1, #4
 8003a44:	4804      	ldr	r0, [pc, #16]	@ (8003a58 <LCD_IO_WriteData+0x40>)
 8003a46:	f001 fe87 	bl	8005758 <HAL_GPIO_WritePin>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40020c00 	.word	0x40020c00
 8003a58:	40020800 	.word	0x40020800

08003a5c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003a66:	2200      	movs	r2, #0
 8003a68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a6c:	480a      	ldr	r0, [pc, #40]	@ (8003a98 <LCD_IO_WriteReg+0x3c>)
 8003a6e:	f001 fe73 	bl	8005758 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003a72:	2200      	movs	r2, #0
 8003a74:	2104      	movs	r1, #4
 8003a76:	4809      	ldr	r0, [pc, #36]	@ (8003a9c <LCD_IO_WriteReg+0x40>)
 8003a78:	f001 fe6e 	bl	8005758 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff feed 	bl	8003860 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003a86:	2201      	movs	r2, #1
 8003a88:	2104      	movs	r1, #4
 8003a8a:	4804      	ldr	r0, [pc, #16]	@ (8003a9c <LCD_IO_WriteReg+0x40>)
 8003a8c:	f001 fe64 	bl	8005758 <HAL_GPIO_WritePin>
}
 8003a90:	bf00      	nop
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40020c00 	.word	0x40020c00
 8003a9c:	40020800 	.word	0x40020800

08003aa0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f001 f9f1 	bl	8004e90 <HAL_Delay>
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003aba:	f001 f977 	bl	8004dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClockOverride();
 8003abe:	f000 f80d 	bl	8003adc <SystemClockOverride>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ac2:	f000 f985 	bl	8003dd0 <MX_GPIO_Init>
  MX_I2C3_Init();
 8003ac6:	f000 f85b 	bl	8003b80 <MX_I2C3_Init>
  MX_LTDC_Init();
 8003aca:	f000 f899 	bl	8003c00 <MX_LTDC_Init>
  MX_SPI5_Init();
 8003ace:	f000 f949 	bl	8003d64 <MX_SPI5_Init>

  /* USER CODE BEGIN 2 */
  ApplicationInit();
 8003ad2:	f7fc fd03 	bl	80004dc <ApplicationInit>
  //HAL_Delay(5000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003ad6:	bf00      	nop
 8003ad8:	e7fd      	b.n	8003ad6 <main+0x20>
	...

08003adc <SystemClockOverride>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClockOverride(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b094      	sub	sp, #80	@ 0x50
 8003ae0:	af00      	add	r7, sp, #0
 RCC_ClkInitTypeDef RCC_ClkInitStruct;
 RCC_OscInitTypeDef RCC_OscInitStruct;
 __HAL_RCC_PWR_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	4b24      	ldr	r3, [pc, #144]	@ (8003b78 <SystemClockOverride+0x9c>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	4a23      	ldr	r2, [pc, #140]	@ (8003b78 <SystemClockOverride+0x9c>)
 8003aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003af2:	4b21      	ldr	r3, [pc, #132]	@ (8003b78 <SystemClockOverride+0x9c>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003afa:	60bb      	str	r3, [r7, #8]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.
 8003afe:	2300      	movs	r3, #0
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	4b1e      	ldr	r3, [pc, #120]	@ (8003b7c <SystemClockOverride+0xa0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a1d      	ldr	r2, [pc, #116]	@ (8003b7c <SystemClockOverride+0xa0>)
 8003b08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003b7c <SystemClockOverride+0xa0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003b16:	607b      	str	r3, [r7, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 /* Enable HSE Osc and activate PLL with HSE source */
 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
 RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b22:	613b      	str	r3, [r7, #16]
 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b24:	2302      	movs	r3, #2
 8003b26:	627b      	str	r3, [r7, #36]	@ 0x24
 RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b28:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 RCC_OscInitStruct.PLL.PLLM = 8;
 8003b2e:	2308      	movs	r3, #8
 8003b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 RCC_OscInitStruct.PLL.PLLN = 336;
 8003b32:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003b36:	633b      	str	r3, [r7, #48]	@ 0x30
 RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	637b      	str	r3, [r7, #52]	@ 0x34
 RCC_OscInitStruct.PLL.PLLQ = 7;
 8003b3c:	2307      	movs	r3, #7
 8003b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003b40:	f107 030c 	add.w	r3, r7, #12
 8003b44:	4618      	mov	r0, r3
 8003b46:	f003 f967 	bl	8006e18 <HAL_RCC_OscConfig>
 /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
 RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003b4a:	230f      	movs	r3, #15
 8003b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b4e:	2302      	movs	r3, #2
 8003b50:	643b      	str	r3, [r7, #64]	@ 0x40
 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b52:	2300      	movs	r3, #0
 8003b54:	647b      	str	r3, [r7, #68]	@ 0x44
 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b56:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8003b62:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003b66:	2105      	movs	r1, #5
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f003 fbcd 	bl	8007308 <HAL_RCC_ClockConfig>
}
 8003b6e:	bf00      	nop
 8003b70:	3750      	adds	r7, #80	@ 0x50
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	40007000 	.word	0x40007000

08003b80 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003b84:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf4 <MX_I2C3_Init+0x74>)
 8003b86:	4a1c      	ldr	r2, [pc, #112]	@ (8003bf8 <MX_I2C3_Init+0x78>)
 8003b88:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf4 <MX_I2C3_Init+0x74>)
 8003b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bfc <MX_I2C3_Init+0x7c>)
 8003b8e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b90:	4b18      	ldr	r3, [pc, #96]	@ (8003bf4 <MX_I2C3_Init+0x74>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003b96:	4b17      	ldr	r3, [pc, #92]	@ (8003bf4 <MX_I2C3_Init+0x74>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b9c:	4b15      	ldr	r3, [pc, #84]	@ (8003bf4 <MX_I2C3_Init+0x74>)
 8003b9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ba2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ba4:	4b13      	ldr	r3, [pc, #76]	@ (8003bf4 <MX_I2C3_Init+0x74>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003baa:	4b12      	ldr	r3, [pc, #72]	@ (8003bf4 <MX_I2C3_Init+0x74>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bb0:	4b10      	ldr	r3, [pc, #64]	@ (8003bf4 <MX_I2C3_Init+0x74>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf4 <MX_I2C3_Init+0x74>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003bbc:	480d      	ldr	r0, [pc, #52]	@ (8003bf4 <MX_I2C3_Init+0x74>)
 8003bbe:	f001 fde5 	bl	800578c <HAL_I2C_Init>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003bc8:	f000 fab0 	bl	800412c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4809      	ldr	r0, [pc, #36]	@ (8003bf4 <MX_I2C3_Init+0x74>)
 8003bd0:	f002 fe00 	bl	80067d4 <HAL_I2CEx_ConfigAnalogFilter>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8003bda:	f000 faa7 	bl	800412c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003bde:	2100      	movs	r1, #0
 8003be0:	4804      	ldr	r0, [pc, #16]	@ (8003bf4 <MX_I2C3_Init+0x74>)
 8003be2:	f002 fe33 	bl	800684c <HAL_I2CEx_ConfigDigitalFilter>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8003bec:	f000 fa9e 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003bf0:	bf00      	nop
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20025c54 	.word	0x20025c54
 8003bf8:	40005c00 	.word	0x40005c00
 8003bfc:	000186a0 	.word	0x000186a0

08003c00 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b09a      	sub	sp, #104	@ 0x68
 8003c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003c06:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003c0a:	2234      	movs	r2, #52	@ 0x34
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f004 fc8e 	bl	8008530 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8003c14:	463b      	mov	r3, r7
 8003c16:	2234      	movs	r2, #52	@ 0x34
 8003c18:	2100      	movs	r1, #0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f004 fc88 	bl	8008530 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003c20:	4b4e      	ldr	r3, [pc, #312]	@ (8003d5c <MX_LTDC_Init+0x15c>)
 8003c22:	4a4f      	ldr	r2, [pc, #316]	@ (8003d60 <MX_LTDC_Init+0x160>)
 8003c24:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003c26:	4b4d      	ldr	r3, [pc, #308]	@ (8003d5c <MX_LTDC_Init+0x15c>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8003d5c <MX_LTDC_Init+0x15c>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003c32:	4b4a      	ldr	r3, [pc, #296]	@ (8003d5c <MX_LTDC_Init+0x15c>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003c38:	4b48      	ldr	r3, [pc, #288]	@ (8003d5c <MX_LTDC_Init+0x15c>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8003c3e:	4b47      	ldr	r3, [pc, #284]	@ (8003d5c <MX_LTDC_Init+0x15c>)
 8003c40:	2207      	movs	r2, #7
 8003c42:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8003c44:	4b45      	ldr	r3, [pc, #276]	@ (8003d5c <MX_LTDC_Init+0x15c>)
 8003c46:	2203      	movs	r2, #3
 8003c48:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8003c4a:	4b44      	ldr	r3, [pc, #272]	@ (8003d5c <MX_LTDC_Init+0x15c>)
 8003c4c:	220e      	movs	r2, #14
 8003c4e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8003c50:	4b42      	ldr	r3, [pc, #264]	@ (8003d5c <MX_LTDC_Init+0x15c>)
 8003c52:	2205      	movs	r2, #5
 8003c54:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8003c56:	4b41      	ldr	r3, [pc, #260]	@ (8003d5c <MX_LTDC_Init+0x15c>)
 8003c58:	f240 228e 	movw	r2, #654	@ 0x28e
 8003c5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8003c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d5c <MX_LTDC_Init+0x15c>)
 8003c60:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8003c64:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8003c66:	4b3d      	ldr	r3, [pc, #244]	@ (8003d5c <MX_LTDC_Init+0x15c>)
 8003c68:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8003c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8003c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d5c <MX_LTDC_Init+0x15c>)
 8003c70:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8003c74:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003c76:	4b39      	ldr	r3, [pc, #228]	@ (8003d5c <MX_LTDC_Init+0x15c>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003c7e:	4b37      	ldr	r3, [pc, #220]	@ (8003d5c <MX_LTDC_Init+0x15c>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003c86:	4b35      	ldr	r3, [pc, #212]	@ (8003d5c <MX_LTDC_Init+0x15c>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003c8e:	4833      	ldr	r0, [pc, #204]	@ (8003d5c <MX_LTDC_Init+0x15c>)
 8003c90:	f002 fe1c 	bl	80068cc <HAL_LTDC_Init>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8003c9a:	f000 fa47 	bl	800412c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003cba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cbe:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003cc0:	2305      	movs	r3, #5
 8003cc2:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003ce2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	4619      	mov	r1, r3
 8003cea:	481c      	ldr	r0, [pc, #112]	@ (8003d5c <MX_LTDC_Init+0x15c>)
 8003cec:	f002 febe 	bl	8006a6c <HAL_LTDC_ConfigLayer>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8003cf6:	f000 fa19 	bl	800412c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003d16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d1a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003d1c:	2305      	movs	r3, #5
 8003d1e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8003d32:	2300      	movs	r3, #0
 8003d34:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8003d3e:	463b      	mov	r3, r7
 8003d40:	2201      	movs	r2, #1
 8003d42:	4619      	mov	r1, r3
 8003d44:	4805      	ldr	r0, [pc, #20]	@ (8003d5c <MX_LTDC_Init+0x15c>)
 8003d46:	f002 fe91 	bl	8006a6c <HAL_LTDC_ConfigLayer>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8003d50:	f000 f9ec 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003d54:	bf00      	nop
 8003d56:	3768      	adds	r7, #104	@ 0x68
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	20025ca8 	.word	0x20025ca8
 8003d60:	40016800 	.word	0x40016800

08003d64 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8003d68:	4b17      	ldr	r3, [pc, #92]	@ (8003dc8 <MX_SPI5_Init+0x64>)
 8003d6a:	4a18      	ldr	r2, [pc, #96]	@ (8003dcc <MX_SPI5_Init+0x68>)
 8003d6c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003d6e:	4b16      	ldr	r3, [pc, #88]	@ (8003dc8 <MX_SPI5_Init+0x64>)
 8003d70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d74:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003d76:	4b14      	ldr	r3, [pc, #80]	@ (8003dc8 <MX_SPI5_Init+0x64>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d7c:	4b12      	ldr	r3, [pc, #72]	@ (8003dc8 <MX_SPI5_Init+0x64>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d82:	4b11      	ldr	r3, [pc, #68]	@ (8003dc8 <MX_SPI5_Init+0x64>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d88:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc8 <MX_SPI5_Init+0x64>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003dc8 <MX_SPI5_Init+0x64>)
 8003d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d94:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d96:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc8 <MX_SPI5_Init+0x64>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc8 <MX_SPI5_Init+0x64>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003da2:	4b09      	ldr	r3, [pc, #36]	@ (8003dc8 <MX_SPI5_Init+0x64>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003da8:	4b07      	ldr	r3, [pc, #28]	@ (8003dc8 <MX_SPI5_Init+0x64>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003dae:	4b06      	ldr	r3, [pc, #24]	@ (8003dc8 <MX_SPI5_Init+0x64>)
 8003db0:	220a      	movs	r2, #10
 8003db2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003db4:	4804      	ldr	r0, [pc, #16]	@ (8003dc8 <MX_SPI5_Init+0x64>)
 8003db6:	f003 fef3 	bl	8007ba0 <HAL_SPI_Init>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003dc0:	f000 f9b4 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003dc4:	bf00      	nop
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20025d50 	.word	0x20025d50
 8003dcc:	40015000 	.word	0x40015000

08003dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08e      	sub	sp, #56	@ 0x38
 8003dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	605a      	str	r2, [r3, #4]
 8003de0:	609a      	str	r2, [r3, #8]
 8003de2:	60da      	str	r2, [r3, #12]
 8003de4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	623b      	str	r3, [r7, #32]
 8003dea:	4bb2      	ldr	r3, [pc, #712]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	4ab1      	ldr	r2, [pc, #708]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003df0:	f043 0304 	orr.w	r3, r3, #4
 8003df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003df6:	4baf      	ldr	r3, [pc, #700]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	623b      	str	r3, [r7, #32]
 8003e00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	4bab      	ldr	r3, [pc, #684]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0a:	4aaa      	ldr	r2, [pc, #680]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003e0c:	f043 0320 	orr.w	r3, r3, #32
 8003e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e12:	4ba8      	ldr	r3, [pc, #672]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	4ba4      	ldr	r3, [pc, #656]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e26:	4aa3      	ldr	r2, [pc, #652]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e2e:	4ba1      	ldr	r3, [pc, #644]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e36:	61bb      	str	r3, [r7, #24]
 8003e38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	4b9d      	ldr	r3, [pc, #628]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e42:	4a9c      	ldr	r2, [pc, #624]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e4a:	4b9a      	ldr	r3, [pc, #616]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e56:	2300      	movs	r3, #0
 8003e58:	613b      	str	r3, [r7, #16]
 8003e5a:	4b96      	ldr	r3, [pc, #600]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5e:	4a95      	ldr	r2, [pc, #596]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003e60:	f043 0302 	orr.w	r3, r3, #2
 8003e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e66:	4b93      	ldr	r3, [pc, #588]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	4b8f      	ldr	r3, [pc, #572]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7a:	4a8e      	ldr	r2, [pc, #568]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003e7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e82:	4b8c      	ldr	r3, [pc, #560]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	4b88      	ldr	r3, [pc, #544]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e96:	4a87      	ldr	r2, [pc, #540]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003e98:	f043 0310 	orr.w	r3, r3, #16
 8003e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e9e:	4b85      	ldr	r3, [pc, #532]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	607b      	str	r3, [r7, #4]
 8003eae:	4b81      	ldr	r3, [pc, #516]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb2:	4a80      	ldr	r2, [pc, #512]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003eb4:	f043 0308 	orr.w	r3, r3, #8
 8003eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eba:	4b7e      	ldr	r3, [pc, #504]	@ (80040b4 <MX_GPIO_Init+0x2e4>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	607b      	str	r3, [r7, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2116      	movs	r1, #22
 8003eca:	487b      	ldr	r0, [pc, #492]	@ (80040b8 <MX_GPIO_Init+0x2e8>)
 8003ecc:	f001 fc44 	bl	8005758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2180      	movs	r1, #128	@ 0x80
 8003ed4:	4879      	ldr	r0, [pc, #484]	@ (80040bc <MX_GPIO_Init+0x2ec>)
 8003ed6:	f001 fc3f 	bl	8005758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8003eda:	2200      	movs	r2, #0
 8003edc:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8003ee0:	4877      	ldr	r0, [pc, #476]	@ (80040c0 <MX_GPIO_Init+0x2f0>)
 8003ee2:	f001 fc39 	bl	8005758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8003eec:	4875      	ldr	r0, [pc, #468]	@ (80040c4 <MX_GPIO_Init+0x2f4>)
 8003eee:	f001 fc33 	bl	8005758 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8003ef2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003ef6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef8:	2302      	movs	r3, #2
 8003efa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003efc:	2300      	movs	r3, #0
 8003efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f00:	2303      	movs	r3, #3
 8003f02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f04:	230c      	movs	r3, #12
 8003f06:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	486e      	ldr	r0, [pc, #440]	@ (80040c8 <MX_GPIO_Init+0x2f8>)
 8003f10:	f001 f96a 	bl	80051e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8003f14:	2301      	movs	r3, #1
 8003f16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f18:	2302      	movs	r3, #2
 8003f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f20:	2303      	movs	r3, #3
 8003f22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f24:	230c      	movs	r3, #12
 8003f26:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8003f28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4862      	ldr	r0, [pc, #392]	@ (80040b8 <MX_GPIO_Init+0x2e8>)
 8003f30:	f001 f95a 	bl	80051e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8003f34:	2316      	movs	r3, #22
 8003f36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f40:	2300      	movs	r3, #0
 8003f42:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f48:	4619      	mov	r1, r3
 8003f4a:	485b      	ldr	r0, [pc, #364]	@ (80040b8 <MX_GPIO_Init+0x2e8>)
 8003f4c:	f001 f94c 	bl	80051e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8003f50:	f248 0307 	movw	r3, #32775	@ 0x8007
 8003f54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003f56:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f64:	4619      	mov	r1, r3
 8003f66:	4855      	ldr	r0, [pc, #340]	@ (80040bc <MX_GPIO_Init+0x2ec>)
 8003f68:	f001 f93e 	bl	80051e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8003f6c:	2380      	movs	r3, #128	@ 0x80
 8003f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f70:	2301      	movs	r3, #1
 8003f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8003f7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f80:	4619      	mov	r1, r3
 8003f82:	484e      	ldr	r0, [pc, #312]	@ (80040bc <MX_GPIO_Init+0x2ec>)
 8003f84:	f001 f930 	bl	80051e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8003f88:	2320      	movs	r3, #32
 8003f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003f8c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8003f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4846      	ldr	r0, [pc, #280]	@ (80040b8 <MX_GPIO_Init+0x2e8>)
 8003f9e:	f001 f923 	bl	80051e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003fa2:	2304      	movs	r3, #4
 8003fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003fae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4845      	ldr	r0, [pc, #276]	@ (80040cc <MX_GPIO_Init+0x2fc>)
 8003fb6:	f001 f917 	bl	80051e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8003fba:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003fbe:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003fcc:	230c      	movs	r3, #12
 8003fce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003fd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	483b      	ldr	r0, [pc, #236]	@ (80040c4 <MX_GPIO_Init+0x2f4>)
 8003fd8:	f001 f906 	bl	80051e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8003fdc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003fe0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fea:	2303      	movs	r3, #3
 8003fec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003fee:	230c      	movs	r3, #12
 8003ff0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4835      	ldr	r0, [pc, #212]	@ (80040d0 <MX_GPIO_Init+0x300>)
 8003ffa:	f001 f8f5 	bl	80051e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8003ffe:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8004002:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004004:	2302      	movs	r3, #2
 8004006:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004008:	2300      	movs	r3, #0
 800400a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800400c:	2300      	movs	r3, #0
 800400e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8004010:	230c      	movs	r3, #12
 8004012:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004018:	4619      	mov	r1, r3
 800401a:	482c      	ldr	r0, [pc, #176]	@ (80040cc <MX_GPIO_Init+0x2fc>)
 800401c:	f001 f8e4 	bl	80051e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8004020:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004026:	2300      	movs	r3, #0
 8004028:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402a:	2300      	movs	r3, #0
 800402c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800402e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004032:	4619      	mov	r1, r3
 8004034:	4825      	ldr	r0, [pc, #148]	@ (80040cc <MX_GPIO_Init+0x2fc>)
 8004036:	f001 f8d7 	bl	80051e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800403a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004040:	2302      	movs	r3, #2
 8004042:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004044:	2300      	movs	r3, #0
 8004046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004048:	2303      	movs	r3, #3
 800404a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800404c:	230c      	movs	r3, #12
 800404e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004054:	4619      	mov	r1, r3
 8004056:	481a      	ldr	r0, [pc, #104]	@ (80040c0 <MX_GPIO_Init+0x2f0>)
 8004058:	f001 f8c6 	bl	80051e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800405c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004060:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004062:	2300      	movs	r3, #0
 8004064:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004066:	2300      	movs	r3, #0
 8004068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800406a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800406e:	4619      	mov	r1, r3
 8004070:	4813      	ldr	r0, [pc, #76]	@ (80040c0 <MX_GPIO_Init+0x2f0>)
 8004072:	f001 f8b9 	bl	80051e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8004076:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800407a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800407c:	2301      	movs	r3, #1
 800407e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004080:	2300      	movs	r3, #0
 8004082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004084:	2300      	movs	r3, #0
 8004086:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004088:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800408c:	4619      	mov	r1, r3
 800408e:	480c      	ldr	r0, [pc, #48]	@ (80040c0 <MX_GPIO_Init+0x2f0>)
 8004090:	f001 f8aa 	bl	80051e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004094:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004098:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409a:	2302      	movs	r3, #2
 800409c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a2:	2303      	movs	r3, #3
 80040a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040a6:	2307      	movs	r3, #7
 80040a8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040ae:	4619      	mov	r1, r3
 80040b0:	e010      	b.n	80040d4 <MX_GPIO_Init+0x304>
 80040b2:	bf00      	nop
 80040b4:	40023800 	.word	0x40023800
 80040b8:	40020800 	.word	0x40020800
 80040bc:	40020000 	.word	0x40020000
 80040c0:	40020c00 	.word	0x40020c00
 80040c4:	40021800 	.word	0x40021800
 80040c8:	40021400 	.word	0x40021400
 80040cc:	40020400 	.word	0x40020400
 80040d0:	40021000 	.word	0x40021000
 80040d4:	4812      	ldr	r0, [pc, #72]	@ (8004120 <MX_GPIO_Init+0x350>)
 80040d6:	f001 f887 	bl	80051e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80040da:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80040de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040e0:	2301      	movs	r3, #1
 80040e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e8:	2300      	movs	r3, #0
 80040ea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040f0:	4619      	mov	r1, r3
 80040f2:	480c      	ldr	r0, [pc, #48]	@ (8004124 <MX_GPIO_Init+0x354>)
 80040f4:	f001 f878 	bl	80051e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80040f8:	2360      	movs	r3, #96	@ 0x60
 80040fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040fc:	2302      	movs	r3, #2
 80040fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004100:	2300      	movs	r3, #0
 8004102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004104:	2303      	movs	r3, #3
 8004106:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004108:	230c      	movs	r3, #12
 800410a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800410c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004110:	4619      	mov	r1, r3
 8004112:	4805      	ldr	r0, [pc, #20]	@ (8004128 <MX_GPIO_Init+0x358>)
 8004114:	f001 f868 	bl	80051e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004118:	bf00      	nop
 800411a:	3738      	adds	r7, #56	@ 0x38
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40020000 	.word	0x40020000
 8004124:	40021800 	.word	0x40021800
 8004128:	40020400 	.word	0x40020400

0800412c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004130:	b672      	cpsid	i
}
 8004132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004134:	bf00      	nop
 8004136:	e7fd      	b.n	8004134 <Error_Handler+0x8>

08004138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800413e:	2300      	movs	r3, #0
 8004140:	607b      	str	r3, [r7, #4]
 8004142:	4b10      	ldr	r3, [pc, #64]	@ (8004184 <HAL_MspInit+0x4c>)
 8004144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004146:	4a0f      	ldr	r2, [pc, #60]	@ (8004184 <HAL_MspInit+0x4c>)
 8004148:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800414c:	6453      	str	r3, [r2, #68]	@ 0x44
 800414e:	4b0d      	ldr	r3, [pc, #52]	@ (8004184 <HAL_MspInit+0x4c>)
 8004150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004156:	607b      	str	r3, [r7, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800415a:	2300      	movs	r3, #0
 800415c:	603b      	str	r3, [r7, #0]
 800415e:	4b09      	ldr	r3, [pc, #36]	@ (8004184 <HAL_MspInit+0x4c>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	4a08      	ldr	r2, [pc, #32]	@ (8004184 <HAL_MspInit+0x4c>)
 8004164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004168:	6413      	str	r3, [r2, #64]	@ 0x40
 800416a:	4b06      	ldr	r3, [pc, #24]	@ (8004184 <HAL_MspInit+0x4c>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004176:	2007      	movs	r0, #7
 8004178:	f000 ffc0 	bl	80050fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40023800 	.word	0x40023800

08004188 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	@ 0x28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004190:	f107 0314 	add.w	r3, r7, #20
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	609a      	str	r2, [r3, #8]
 800419c:	60da      	str	r2, [r3, #12]
 800419e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a29      	ldr	r2, [pc, #164]	@ (800424c <HAL_I2C_MspInit+0xc4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d14b      	bne.n	8004242 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041aa:	2300      	movs	r3, #0
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	4b28      	ldr	r3, [pc, #160]	@ (8004250 <HAL_I2C_MspInit+0xc8>)
 80041b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b2:	4a27      	ldr	r2, [pc, #156]	@ (8004250 <HAL_I2C_MspInit+0xc8>)
 80041b4:	f043 0304 	orr.w	r3, r3, #4
 80041b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80041ba:	4b25      	ldr	r3, [pc, #148]	@ (8004250 <HAL_I2C_MspInit+0xc8>)
 80041bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	4b21      	ldr	r3, [pc, #132]	@ (8004250 <HAL_I2C_MspInit+0xc8>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ce:	4a20      	ldr	r2, [pc, #128]	@ (8004250 <HAL_I2C_MspInit+0xc8>)
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80041d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004250 <HAL_I2C_MspInit+0xc8>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80041e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041e8:	2312      	movs	r3, #18
 80041ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f0:	2300      	movs	r3, #0
 80041f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80041f4:	2304      	movs	r3, #4
 80041f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80041f8:	f107 0314 	add.w	r3, r7, #20
 80041fc:	4619      	mov	r1, r3
 80041fe:	4815      	ldr	r0, [pc, #84]	@ (8004254 <HAL_I2C_MspInit+0xcc>)
 8004200:	f000 fff2 	bl	80051e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8004204:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800420a:	2312      	movs	r3, #18
 800420c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420e:	2300      	movs	r3, #0
 8004210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004212:	2300      	movs	r3, #0
 8004214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004216:	2304      	movs	r3, #4
 8004218:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800421a:	f107 0314 	add.w	r3, r7, #20
 800421e:	4619      	mov	r1, r3
 8004220:	480d      	ldr	r0, [pc, #52]	@ (8004258 <HAL_I2C_MspInit+0xd0>)
 8004222:	f000 ffe1 	bl	80051e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004226:	2300      	movs	r3, #0
 8004228:	60bb      	str	r3, [r7, #8]
 800422a:	4b09      	ldr	r3, [pc, #36]	@ (8004250 <HAL_I2C_MspInit+0xc8>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	4a08      	ldr	r2, [pc, #32]	@ (8004250 <HAL_I2C_MspInit+0xc8>)
 8004230:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004234:	6413      	str	r3, [r2, #64]	@ 0x40
 8004236:	4b06      	ldr	r3, [pc, #24]	@ (8004250 <HAL_I2C_MspInit+0xc8>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800423e:	60bb      	str	r3, [r7, #8]
 8004240:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8004242:	bf00      	nop
 8004244:	3728      	adds	r7, #40	@ 0x28
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40005c00 	.word	0x40005c00
 8004250:	40023800 	.word	0x40023800
 8004254:	40020800 	.word	0x40020800
 8004258:	40020000 	.word	0x40020000

0800425c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b09a      	sub	sp, #104	@ 0x68
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004264:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	609a      	str	r2, [r3, #8]
 8004270:	60da      	str	r2, [r3, #12]
 8004272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004274:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004278:	2230      	movs	r2, #48	@ 0x30
 800427a:	2100      	movs	r1, #0
 800427c:	4618      	mov	r0, r3
 800427e:	f004 f957 	bl	8008530 <memset>
  if(hltdc->Instance==LTDC)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a81      	ldr	r2, [pc, #516]	@ (800448c <HAL_LTDC_MspInit+0x230>)
 8004288:	4293      	cmp	r3, r2
 800428a:	f040 80fa 	bne.w	8004482 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800428e:	2308      	movs	r3, #8
 8004290:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8004292:	2332      	movs	r3, #50	@ 0x32
 8004294:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8004296:	2302      	movs	r3, #2
 8004298:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800429a:	2300      	movs	r3, #0
 800429c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800429e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042a2:	4618      	mov	r0, r3
 80042a4:	f003 fa3c 	bl	8007720 <HAL_RCCEx_PeriphCLKConfig>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80042ae:	f7ff ff3d 	bl	800412c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80042b2:	2300      	movs	r3, #0
 80042b4:	623b      	str	r3, [r7, #32]
 80042b6:	4b76      	ldr	r3, [pc, #472]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 80042b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ba:	4a75      	ldr	r2, [pc, #468]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 80042bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80042c2:	4b73      	ldr	r3, [pc, #460]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 80042c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042ca:	623b      	str	r3, [r7, #32]
 80042cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	4b6f      	ldr	r3, [pc, #444]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d6:	4a6e      	ldr	r2, [pc, #440]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 80042d8:	f043 0320 	orr.w	r3, r3, #32
 80042dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80042de:	4b6c      	ldr	r3, [pc, #432]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	61fb      	str	r3, [r7, #28]
 80042e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ea:	2300      	movs	r3, #0
 80042ec:	61bb      	str	r3, [r7, #24]
 80042ee:	4b68      	ldr	r3, [pc, #416]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f2:	4a67      	ldr	r2, [pc, #412]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 80042f4:	f043 0301 	orr.w	r3, r3, #1
 80042f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80042fa:	4b65      	ldr	r3, [pc, #404]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	4b61      	ldr	r3, [pc, #388]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 800430c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430e:	4a60      	ldr	r2, [pc, #384]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 8004310:	f043 0302 	orr.w	r3, r3, #2
 8004314:	6313      	str	r3, [r2, #48]	@ 0x30
 8004316:	4b5e      	ldr	r3, [pc, #376]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004322:	2300      	movs	r3, #0
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	4b5a      	ldr	r3, [pc, #360]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432a:	4a59      	ldr	r2, [pc, #356]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 800432c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004330:	6313      	str	r3, [r2, #48]	@ 0x30
 8004332:	4b57      	ldr	r3, [pc, #348]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 8004334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	4b53      	ldr	r3, [pc, #332]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004346:	4a52      	ldr	r2, [pc, #328]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 8004348:	f043 0304 	orr.w	r3, r3, #4
 800434c:	6313      	str	r3, [r2, #48]	@ 0x30
 800434e:	4b50      	ldr	r3, [pc, #320]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800435a:	2300      	movs	r3, #0
 800435c:	60bb      	str	r3, [r7, #8]
 800435e:	4b4c      	ldr	r3, [pc, #304]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004362:	4a4b      	ldr	r2, [pc, #300]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 8004364:	f043 0308 	orr.w	r3, r3, #8
 8004368:	6313      	str	r3, [r2, #48]	@ 0x30
 800436a:	4b49      	ldr	r3, [pc, #292]	@ (8004490 <HAL_LTDC_MspInit+0x234>)
 800436c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	60bb      	str	r3, [r7, #8]
 8004374:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8004376:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800437a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800437c:	2302      	movs	r3, #2
 800437e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004380:	2300      	movs	r3, #0
 8004382:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004384:	2300      	movs	r3, #0
 8004386:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004388:	230e      	movs	r3, #14
 800438a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800438c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004390:	4619      	mov	r1, r3
 8004392:	4840      	ldr	r0, [pc, #256]	@ (8004494 <HAL_LTDC_MspInit+0x238>)
 8004394:	f000 ff28 	bl	80051e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8004398:	f641 0358 	movw	r3, #6232	@ 0x1858
 800439c:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800439e:	2302      	movs	r3, #2
 80043a0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043a6:	2300      	movs	r3, #0
 80043a8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80043aa:	230e      	movs	r3, #14
 80043ac:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80043b2:	4619      	mov	r1, r3
 80043b4:	4838      	ldr	r0, [pc, #224]	@ (8004498 <HAL_LTDC_MspInit+0x23c>)
 80043b6:	f000 ff17 	bl	80051e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80043ba:	2303      	movs	r3, #3
 80043bc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043be:	2302      	movs	r3, #2
 80043c0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c6:	2300      	movs	r3, #0
 80043c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80043ca:	2309      	movs	r3, #9
 80043cc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80043d2:	4619      	mov	r1, r3
 80043d4:	4831      	ldr	r0, [pc, #196]	@ (800449c <HAL_LTDC_MspInit+0x240>)
 80043d6:	f000 ff07 	bl	80051e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80043da:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80043de:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e0:	2302      	movs	r3, #2
 80043e2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e8:	2300      	movs	r3, #0
 80043ea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80043ec:	230e      	movs	r3, #14
 80043ee:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80043f4:	4619      	mov	r1, r3
 80043f6:	4829      	ldr	r0, [pc, #164]	@ (800449c <HAL_LTDC_MspInit+0x240>)
 80043f8:	f000 fef6 	bl	80051e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80043fc:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8004400:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004402:	2302      	movs	r3, #2
 8004404:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004406:	2300      	movs	r3, #0
 8004408:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800440a:	2300      	movs	r3, #0
 800440c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800440e:	230e      	movs	r3, #14
 8004410:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004412:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004416:	4619      	mov	r1, r3
 8004418:	4821      	ldr	r0, [pc, #132]	@ (80044a0 <HAL_LTDC_MspInit+0x244>)
 800441a:	f000 fee5 	bl	80051e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800441e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8004422:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004424:	2302      	movs	r3, #2
 8004426:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004428:	2300      	movs	r3, #0
 800442a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800442c:	2300      	movs	r3, #0
 800442e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004430:	230e      	movs	r3, #14
 8004432:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004434:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004438:	4619      	mov	r1, r3
 800443a:	481a      	ldr	r0, [pc, #104]	@ (80044a4 <HAL_LTDC_MspInit+0x248>)
 800443c:	f000 fed4 	bl	80051e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8004440:	2348      	movs	r3, #72	@ 0x48
 8004442:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004444:	2302      	movs	r3, #2
 8004446:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004448:	2300      	movs	r3, #0
 800444a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800444c:	2300      	movs	r3, #0
 800444e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004450:	230e      	movs	r3, #14
 8004452:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004454:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004458:	4619      	mov	r1, r3
 800445a:	4813      	ldr	r0, [pc, #76]	@ (80044a8 <HAL_LTDC_MspInit+0x24c>)
 800445c:	f000 fec4 	bl	80051e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8004460:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004464:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004466:	2302      	movs	r3, #2
 8004468:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446a:	2300      	movs	r3, #0
 800446c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800446e:	2300      	movs	r3, #0
 8004470:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004472:	2309      	movs	r3, #9
 8004474:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004476:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800447a:	4619      	mov	r1, r3
 800447c:	4808      	ldr	r0, [pc, #32]	@ (80044a0 <HAL_LTDC_MspInit+0x244>)
 800447e:	f000 feb3 	bl	80051e8 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8004482:	bf00      	nop
 8004484:	3768      	adds	r7, #104	@ 0x68
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40016800 	.word	0x40016800
 8004490:	40023800 	.word	0x40023800
 8004494:	40021400 	.word	0x40021400
 8004498:	40020000 	.word	0x40020000
 800449c:	40020400 	.word	0x40020400
 80044a0:	40021800 	.word	0x40021800
 80044a4:	40020800 	.word	0x40020800
 80044a8:	40020c00 	.word	0x40020c00

080044ac <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a0b      	ldr	r2, [pc, #44]	@ (80044e8 <HAL_RNG_MspInit+0x3c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d10d      	bne.n	80044da <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	4b0a      	ldr	r3, [pc, #40]	@ (80044ec <HAL_RNG_MspInit+0x40>)
 80044c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c6:	4a09      	ldr	r2, [pc, #36]	@ (80044ec <HAL_RNG_MspInit+0x40>)
 80044c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044cc:	6353      	str	r3, [r2, #52]	@ 0x34
 80044ce:	4b07      	ldr	r3, [pc, #28]	@ (80044ec <HAL_RNG_MspInit+0x40>)
 80044d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	50060800 	.word	0x50060800
 80044ec:	40023800 	.word	0x40023800

080044f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08a      	sub	sp, #40	@ 0x28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f8:	f107 0314 	add.w	r3, r7, #20
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	60da      	str	r2, [r3, #12]
 8004506:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a19      	ldr	r2, [pc, #100]	@ (8004574 <HAL_SPI_MspInit+0x84>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d12c      	bne.n	800456c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004512:	2300      	movs	r3, #0
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	4b18      	ldr	r3, [pc, #96]	@ (8004578 <HAL_SPI_MspInit+0x88>)
 8004518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451a:	4a17      	ldr	r2, [pc, #92]	@ (8004578 <HAL_SPI_MspInit+0x88>)
 800451c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004520:	6453      	str	r3, [r2, #68]	@ 0x44
 8004522:	4b15      	ldr	r3, [pc, #84]	@ (8004578 <HAL_SPI_MspInit+0x88>)
 8004524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800452a:	613b      	str	r3, [r7, #16]
 800452c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	4b11      	ldr	r3, [pc, #68]	@ (8004578 <HAL_SPI_MspInit+0x88>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004536:	4a10      	ldr	r2, [pc, #64]	@ (8004578 <HAL_SPI_MspInit+0x88>)
 8004538:	f043 0320 	orr.w	r3, r3, #32
 800453c:	6313      	str	r3, [r2, #48]	@ 0x30
 800453e:	4b0e      	ldr	r3, [pc, #56]	@ (8004578 <HAL_SPI_MspInit+0x88>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800454a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800454e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004550:	2302      	movs	r3, #2
 8004552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004554:	2300      	movs	r3, #0
 8004556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004558:	2300      	movs	r3, #0
 800455a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800455c:	2305      	movs	r3, #5
 800455e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004560:	f107 0314 	add.w	r3, r7, #20
 8004564:	4619      	mov	r1, r3
 8004566:	4805      	ldr	r0, [pc, #20]	@ (800457c <HAL_SPI_MspInit+0x8c>)
 8004568:	f000 fe3e 	bl	80051e8 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 800456c:	bf00      	nop
 800456e:	3728      	adds	r7, #40	@ 0x28
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40015000 	.word	0x40015000
 8004578:	40023800 	.word	0x40023800
 800457c:	40021400 	.word	0x40021400

08004580 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a08      	ldr	r2, [pc, #32]	@ (80045b0 <HAL_SPI_MspDeInit+0x30>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d10a      	bne.n	80045a8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8004592:	4b08      	ldr	r3, [pc, #32]	@ (80045b4 <HAL_SPI_MspDeInit+0x34>)
 8004594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004596:	4a07      	ldr	r2, [pc, #28]	@ (80045b4 <HAL_SPI_MspDeInit+0x34>)
 8004598:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800459c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800459e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80045a2:	4805      	ldr	r0, [pc, #20]	@ (80045b8 <HAL_SPI_MspDeInit+0x38>)
 80045a4:	f000 ffcc 	bl	8005540 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80045a8:	bf00      	nop
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40015000 	.word	0x40015000
 80045b4:	40023800 	.word	0x40023800
 80045b8:	40021400 	.word	0x40021400

080045bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a0b      	ldr	r2, [pc, #44]	@ (80045f8 <HAL_TIM_Base_MspInit+0x3c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d10d      	bne.n	80045ea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	4b0a      	ldr	r3, [pc, #40]	@ (80045fc <HAL_TIM_Base_MspInit+0x40>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	4a09      	ldr	r2, [pc, #36]	@ (80045fc <HAL_TIM_Base_MspInit+0x40>)
 80045d8:	f043 0320 	orr.w	r3, r3, #32
 80045dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80045de:	4b07      	ldr	r3, [pc, #28]	@ (80045fc <HAL_TIM_Base_MspInit+0x40>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 80045ea:	bf00      	nop
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40001400 	.word	0x40001400
 80045fc:	40023800 	.word	0x40023800

08004600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004604:	bf00      	nop
 8004606:	e7fd      	b.n	8004604 <NMI_Handler+0x4>

08004608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800460c:	bf00      	nop
 800460e:	e7fd      	b.n	800460c <HardFault_Handler+0x4>

08004610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004614:	bf00      	nop
 8004616:	e7fd      	b.n	8004614 <MemManage_Handler+0x4>

08004618 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800461c:	bf00      	nop
 800461e:	e7fd      	b.n	800461c <BusFault_Handler+0x4>

08004620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004624:	bf00      	nop
 8004626:	e7fd      	b.n	8004624 <UsageFault_Handler+0x4>

08004628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800462c:	bf00      	nop
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004636:	b480      	push	{r7}
 8004638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800463a:	bf00      	nop
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004648:	bf00      	nop
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004656:	f000 fbfb 	bl	8004e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800465a:	bf00      	nop
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800466a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466e:	2b00      	cmp	r3, #0
 8004670:	db0b      	blt.n	800468a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	f003 021f 	and.w	r2, r3, #31
 8004678:	4907      	ldr	r1, [pc, #28]	@ (8004698 <__NVIC_EnableIRQ+0x38>)
 800467a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	2001      	movs	r0, #1
 8004682:	fa00 f202 	lsl.w	r2, r0, r2
 8004686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	e000e100 	.word	0xe000e100

0800469c <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80046a2:	f000 f9cd 	bl	8004a40 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80046a6:	f000 f98d 	bl	80049c4 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80046aa:	2202      	movs	r2, #2
 80046ac:	2103      	movs	r1, #3
 80046ae:	2082      	movs	r0, #130	@ 0x82
 80046b0:	f000 fa1a 	bl	8004ae8 <I2C3_Write>
    HAL_Delay(5);
 80046b4:	2005      	movs	r0, #5
 80046b6:	f000 fbeb 	bl	8004e90 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80046ba:	2200      	movs	r2, #0
 80046bc:	2103      	movs	r1, #3
 80046be:	2082      	movs	r0, #130	@ 0x82
 80046c0:	f000 fa12 	bl	8004ae8 <I2C3_Write>
    HAL_Delay(2);
 80046c4:	2002      	movs	r0, #2
 80046c6:	f000 fbe3 	bl	8004e90 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80046ca:	1cba      	adds	r2, r7, #2
 80046cc:	2302      	movs	r3, #2
 80046ce:	2100      	movs	r1, #0
 80046d0:	2082      	movs	r0, #130	@ 0x82
 80046d2:	f000 fa55 	bl	8004b80 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80046d6:	887b      	ldrh	r3, [r7, #2]
 80046d8:	021b      	lsls	r3, r3, #8
 80046da:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80046dc:	887b      	ldrh	r3, [r7, #2]
 80046de:	0a1b      	lsrs	r3, r3, #8
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	88fb      	ldrh	r3, [r7, #6]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 80046e8:	88fb      	ldrh	r3, [r7, #6]
 80046ea:	f640 0211 	movw	r2, #2065	@ 0x811
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d001      	beq.n	80046f6 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e095      	b.n	8004822 <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80046f6:	2202      	movs	r2, #2
 80046f8:	2103      	movs	r1, #3
 80046fa:	2082      	movs	r0, #130	@ 0x82
 80046fc:	f000 f9f4 	bl	8004ae8 <I2C3_Write>
    HAL_Delay(5);
 8004700:	2005      	movs	r0, #5
 8004702:	f000 fbc5 	bl	8004e90 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8004706:	2200      	movs	r2, #0
 8004708:	2103      	movs	r1, #3
 800470a:	2082      	movs	r0, #130	@ 0x82
 800470c:	f000 f9ec 	bl	8004ae8 <I2C3_Write>
    HAL_Delay(2);
 8004710:	2002      	movs	r0, #2
 8004712:	f000 fbbd 	bl	8004e90 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8004716:	2004      	movs	r0, #4
 8004718:	f000 f887 	bl	800482a <STMPE811_Read>
 800471c:	4603      	mov	r3, r0
 800471e:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8004720:	797b      	ldrb	r3, [r7, #5]
 8004722:	f023 0301 	bic.w	r3, r3, #1
 8004726:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8004728:	797b      	ldrb	r3, [r7, #5]
 800472a:	461a      	mov	r2, r3
 800472c:	2104      	movs	r1, #4
 800472e:	2082      	movs	r0, #130	@ 0x82
 8004730:	f000 f9da 	bl	8004ae8 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8004734:	2004      	movs	r0, #4
 8004736:	f000 f878 	bl	800482a <STMPE811_Read>
 800473a:	4603      	mov	r3, r0
 800473c:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 800473e:	797b      	ldrb	r3, [r7, #5]
 8004740:	f023 0302 	bic.w	r3, r3, #2
 8004744:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8004746:	797b      	ldrb	r3, [r7, #5]
 8004748:	461a      	mov	r2, r3
 800474a:	2104      	movs	r1, #4
 800474c:	2082      	movs	r0, #130	@ 0x82
 800474e:	f000 f9cb 	bl	8004ae8 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8004752:	2249      	movs	r2, #73	@ 0x49
 8004754:	2120      	movs	r1, #32
 8004756:	2082      	movs	r0, #130	@ 0x82
 8004758:	f000 f9c6 	bl	8004ae8 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 800475c:	2002      	movs	r0, #2
 800475e:	f000 fb97 	bl	8004e90 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8004762:	2201      	movs	r2, #1
 8004764:	2121      	movs	r1, #33	@ 0x21
 8004766:	2082      	movs	r0, #130	@ 0x82
 8004768:	f000 f9be 	bl	8004ae8 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 800476c:	2017      	movs	r0, #23
 800476e:	f000 f85c 	bl	800482a <STMPE811_Read>
 8004772:	4603      	mov	r3, r0
 8004774:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8004776:	797b      	ldrb	r3, [r7, #5]
 8004778:	f043 031e 	orr.w	r3, r3, #30
 800477c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 800477e:	797b      	ldrb	r3, [r7, #5]
 8004780:	461a      	mov	r2, r3
 8004782:	2117      	movs	r1, #23
 8004784:	2082      	movs	r0, #130	@ 0x82
 8004786:	f000 f9af 	bl	8004ae8 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 800478a:	229a      	movs	r2, #154	@ 0x9a
 800478c:	2141      	movs	r1, #65	@ 0x41
 800478e:	2082      	movs	r0, #130	@ 0x82
 8004790:	f000 f9aa 	bl	8004ae8 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8004794:	2201      	movs	r2, #1
 8004796:	214a      	movs	r1, #74	@ 0x4a
 8004798:	2082      	movs	r0, #130	@ 0x82
 800479a:	f000 f9a5 	bl	8004ae8 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800479e:	2201      	movs	r2, #1
 80047a0:	214b      	movs	r1, #75	@ 0x4b
 80047a2:	2082      	movs	r0, #130	@ 0x82
 80047a4:	f000 f9a0 	bl	8004ae8 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80047a8:	2200      	movs	r2, #0
 80047aa:	214b      	movs	r1, #75	@ 0x4b
 80047ac:	2082      	movs	r0, #130	@ 0x82
 80047ae:	f000 f99b 	bl	8004ae8 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80047b2:	2201      	movs	r2, #1
 80047b4:	2156      	movs	r1, #86	@ 0x56
 80047b6:	2082      	movs	r0, #130	@ 0x82
 80047b8:	f000 f996 	bl	8004ae8 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80047bc:	2201      	movs	r2, #1
 80047be:	2158      	movs	r1, #88	@ 0x58
 80047c0:	2082      	movs	r0, #130	@ 0x82
 80047c2:	f000 f991 	bl	8004ae8 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80047c6:	2203      	movs	r2, #3
 80047c8:	2140      	movs	r1, #64	@ 0x40
 80047ca:	2082      	movs	r0, #130	@ 0x82
 80047cc:	f000 f98c 	bl	8004ae8 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80047d0:	22ff      	movs	r2, #255	@ 0xff
 80047d2:	210b      	movs	r1, #11
 80047d4:	2082      	movs	r0, #130	@ 0x82
 80047d6:	f000 f987 	bl	8004ae8 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 80047da:	f000 f8c1 	bl	8004960 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 80047de:	2009      	movs	r0, #9
 80047e0:	f000 f823 	bl	800482a <STMPE811_Read>
 80047e4:	4603      	mov	r3, r0
 80047e6:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 80047e8:	797b      	ldrb	r3, [r7, #5]
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 80047f0:	797b      	ldrb	r3, [r7, #5]
 80047f2:	461a      	mov	r2, r3
 80047f4:	2109      	movs	r1, #9
 80047f6:	2082      	movs	r0, #130	@ 0x82
 80047f8:	f000 f976 	bl	8004ae8 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 80047fc:	200a      	movs	r0, #10
 80047fe:	f000 f814 	bl	800482a <STMPE811_Read>
 8004802:	4603      	mov	r3, r0
 8004804:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8004806:	797b      	ldrb	r3, [r7, #5]
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 800480e:	797b      	ldrb	r3, [r7, #5]
 8004810:	461a      	mov	r2, r3
 8004812:	210a      	movs	r1, #10
 8004814:	2082      	movs	r0, #130	@ 0x82
 8004816:	f000 f967 	bl	8004ae8 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 800481a:	20c8      	movs	r0, #200	@ 0xc8
 800481c:	f000 fb38 	bl	8004e90 <HAL_Delay>

    return STMPE811_State_Ok;
 8004820:	2302      	movs	r3, #2

}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	4603      	mov	r3, r0
 8004832:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8004834:	f107 020f 	add.w	r2, r7, #15
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	4619      	mov	r1, r3
 800483c:	2082      	movs	r0, #130	@ 0x82
 800483e:	f000 f97b 	bl	8004b38 <I2C3_Read>

    return readData;
 8004842:	7bfb      	ldrb	r3, [r7, #15]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	460a      	mov	r2, r1
 8004856:	71fb      	strb	r3, [r7, #7]
 8004858:	4613      	mov	r3, r2
 800485a:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 800485c:	79ba      	ldrb	r2, [r7, #6]
 800485e:	79fb      	ldrb	r3, [r7, #7]
 8004860:	4619      	mov	r1, r3
 8004862:	2082      	movs	r0, #130	@ 0x82
 8004864:	f000 f940 	bl	8004ae8 <I2C3_Write>
}
 8004868:	bf00      	nop
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	799b      	ldrb	r3, [r3, #6]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d117      	bne.n	80048b0 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	4618      	mov	r0, r3
 8004886:	f000 f99d 	bl	8004bc4 <TM_STMPE811_ReadX>
 800488a:	4603      	mov	r3, r0
 800488c:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8004890:	b29a      	uxth	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	885b      	ldrh	r3, [r3, #2]
 800489a:	4618      	mov	r0, r3
 800489c:	f000 f9f0 	bl	8004c80 <TM_STMPE811_ReadY>
 80048a0:	4603      	mov	r3, r0
 80048a2:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80048a6:	3301      	adds	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	805a      	strh	r2, [r3, #2]
 80048ae:	e048      	b.n	8004942 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	799b      	ldrb	r3, [r3, #6]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d112      	bne.n	80048de <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 f981 	bl	8004bc4 <TM_STMPE811_ReadX>
 80048c2:	4603      	mov	r3, r0
 80048c4:	461a      	mov	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	885b      	ldrh	r3, [r3, #2]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 f9d6 	bl	8004c80 <TM_STMPE811_ReadY>
 80048d4:	4603      	mov	r3, r0
 80048d6:	461a      	mov	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	805a      	strh	r2, [r3, #2]
 80048dc:	e031      	b.n	8004942 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	799b      	ldrb	r3, [r3, #6]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d115      	bne.n	8004912 <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	885b      	ldrh	r3, [r3, #2]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 f96a 	bl	8004bc4 <TM_STMPE811_ReadX>
 80048f0:	4603      	mov	r3, r0
 80048f2:	461a      	mov	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 f9bf 	bl	8004c80 <TM_STMPE811_ReadY>
 8004902:	4603      	mov	r3, r0
 8004904:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8004908:	3301      	adds	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	801a      	strh	r2, [r3, #0]
 8004910:	e017      	b.n	8004942 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	799b      	ldrb	r3, [r3, #6]
 8004916:	2b03      	cmp	r3, #3
 8004918:	d113      	bne.n	8004942 <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f000 f950 	bl	8004bc4 <TM_STMPE811_ReadX>
 8004924:	4603      	mov	r3, r0
 8004926:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800492a:	b29a      	uxth	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f000 f9a3 	bl	8004c80 <TM_STMPE811_ReadY>
 800493a:	4603      	mov	r3, r0
 800493c:	461a      	mov	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8004942:	2201      	movs	r2, #1
 8004944:	214b      	movs	r1, #75	@ 0x4b
 8004946:	2082      	movs	r0, #130	@ 0x82
 8004948:	f000 f8ce 	bl	8004ae8 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800494c:	2200      	movs	r2, #0
 800494e:	214b      	movs	r1, #75	@ 0x4b
 8004950:	2082      	movs	r0, #130	@ 0x82
 8004952:	f000 f8c9 	bl	8004ae8 <I2C3_Write>
}
 8004956:	bf00      	nop
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004966:	2300      	movs	r3, #0
 8004968:	603b      	str	r3, [r7, #0]
 800496a:	4b14      	ldr	r3, [pc, #80]	@ (80049bc <enableInterruptSupportForTouch+0x5c>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496e:	4a13      	ldr	r2, [pc, #76]	@ (80049bc <enableInterruptSupportForTouch+0x5c>)
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	6313      	str	r3, [r2, #48]	@ 0x30
 8004976:	4b11      	ldr	r3, [pc, #68]	@ (80049bc <enableInterruptSupportForTouch+0x5c>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004982:	1d3b      	adds	r3, r7, #4
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	605a      	str	r2, [r3, #4]
 800498a:	609a      	str	r2, [r3, #8]
 800498c:	60da      	str	r2, [r3, #12]
 800498e:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004990:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004994:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004996:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800499a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049a0:	2302      	movs	r3, #2
 80049a2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a4:	1d3b      	adds	r3, r7, #4
 80049a6:	4619      	mov	r1, r3
 80049a8:	4805      	ldr	r0, [pc, #20]	@ (80049c0 <enableInterruptSupportForTouch+0x60>)
 80049aa:	f000 fc1d 	bl	80051e8 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80049ae:	2028      	movs	r0, #40	@ 0x28
 80049b0:	f7ff fe56 	bl	8004660 <__NVIC_EnableIRQ>

}
 80049b4:	bf00      	nop
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40023800 	.word	0x40023800
 80049c0:	40020000 	.word	0x40020000

080049c4 <I2C3_Init>:
        while(1);
    }
}

static void I2C3_Init()
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80049ca:	2300      	movs	r3, #0
 80049cc:	603b      	str	r3, [r7, #0]
 80049ce:	4b18      	ldr	r3, [pc, #96]	@ (8004a30 <I2C3_Init+0x6c>)
 80049d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d2:	4a17      	ldr	r2, [pc, #92]	@ (8004a30 <I2C3_Init+0x6c>)
 80049d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80049da:	4b15      	ldr	r3, [pc, #84]	@ (8004a30 <I2C3_Init+0x6c>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80049e6:	4b13      	ldr	r3, [pc, #76]	@ (8004a34 <I2C3_Init+0x70>)
 80049e8:	4a13      	ldr	r2, [pc, #76]	@ (8004a38 <I2C3_Init+0x74>)
 80049ea:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80049ec:	4b11      	ldr	r3, [pc, #68]	@ (8004a34 <I2C3_Init+0x70>)
 80049ee:	4a13      	ldr	r2, [pc, #76]	@ (8004a3c <I2C3_Init+0x78>)
 80049f0:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80049f2:	4b10      	ldr	r3, [pc, #64]	@ (8004a34 <I2C3_Init+0x70>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80049f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a34 <I2C3_Init+0x70>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004a34 <I2C3_Init+0x70>)
 8004a00:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004a04:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8004a06:	4b0b      	ldr	r3, [pc, #44]	@ (8004a34 <I2C3_Init+0x70>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a0c:	4b09      	ldr	r3, [pc, #36]	@ (8004a34 <I2C3_Init+0x70>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8004a12:	4808      	ldr	r0, [pc, #32]	@ (8004a34 <I2C3_Init+0x70>)
 8004a14:	f000 feba 	bl	800578c <HAL_I2C_Init>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8004a1c:	79fb      	ldrb	r3, [r7, #7]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8004a22:	bf00      	nop
 8004a24:	e7fd      	b.n	8004a22 <I2C3_Init+0x5e>
    }
    return;
 8004a26:	bf00      	nop
}
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800
 8004a34:	20025da8 	.word	0x20025da8
 8004a38:	40005c00 	.word	0x40005c00
 8004a3c:	000186a0 	.word	0x000186a0

08004a40 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a46:	f107 030c 	add.w	r3, r7, #12
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	605a      	str	r2, [r3, #4]
 8004a50:	609a      	str	r2, [r3, #8]
 8004a52:	60da      	str	r2, [r3, #12]
 8004a54:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a56:	2300      	movs	r3, #0
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	4b20      	ldr	r3, [pc, #128]	@ (8004adc <I2C3_MspInit+0x9c>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004adc <I2C3_MspInit+0x9c>)
 8004a60:	f043 0304 	orr.w	r3, r3, #4
 8004a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a66:	4b1d      	ldr	r3, [pc, #116]	@ (8004adc <I2C3_MspInit+0x9c>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	60bb      	str	r3, [r7, #8]
 8004a70:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a72:	2300      	movs	r3, #0
 8004a74:	607b      	str	r3, [r7, #4]
 8004a76:	4b19      	ldr	r3, [pc, #100]	@ (8004adc <I2C3_MspInit+0x9c>)
 8004a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7a:	4a18      	ldr	r2, [pc, #96]	@ (8004adc <I2C3_MspInit+0x9c>)
 8004a7c:	f043 0301 	orr.w	r3, r3, #1
 8004a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a82:	4b16      	ldr	r3, [pc, #88]	@ (8004adc <I2C3_MspInit+0x9c>)
 8004a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	607b      	str	r3, [r7, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8004a8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a94:	2312      	movs	r3, #18
 8004a96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8004aa4:	f107 030c 	add.w	r3, r7, #12
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	480d      	ldr	r0, [pc, #52]	@ (8004ae0 <I2C3_MspInit+0xa0>)
 8004aac:	f000 fb9c 	bl	80051e8 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8004ab0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ab4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ab6:	2312      	movs	r3, #18
 8004ab8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004ac2:	2304      	movs	r3, #4
 8004ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8004ac6:	f107 030c 	add.w	r3, r7, #12
 8004aca:	4619      	mov	r1, r3
 8004acc:	4805      	ldr	r0, [pc, #20]	@ (8004ae4 <I2C3_MspInit+0xa4>)
 8004ace:	f000 fb8b 	bl	80051e8 <HAL_GPIO_Init>
    
}
 8004ad2:	bf00      	nop
 8004ad4:	3720      	adds	r7, #32
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	40020800 	.word	0x40020800
 8004ae4:	40020000 	.word	0x40020000

08004ae8 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af04      	add	r7, sp, #16
 8004aee:	4603      	mov	r3, r0
 8004af0:	80fb      	strh	r3, [r7, #6]
 8004af2:	460b      	mov	r3, r1
 8004af4:	717b      	strb	r3, [r7, #5]
 8004af6:	4613      	mov	r3, r2
 8004af8:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8004afa:	793b      	ldrb	r3, [r7, #4]
 8004afc:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8004afe:	797b      	ldrb	r3, [r7, #5]
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	88f9      	ldrh	r1, [r7, #6]
 8004b04:	4b09      	ldr	r3, [pc, #36]	@ (8004b2c <I2C3_Write+0x44>)
 8004b06:	9302      	str	r3, [sp, #8]
 8004b08:	2301      	movs	r3, #1
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	f107 030f 	add.w	r3, r7, #15
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	2301      	movs	r3, #1
 8004b14:	4806      	ldr	r0, [pc, #24]	@ (8004b30 <I2C3_Write+0x48>)
 8004b16:	f000 ff7d 	bl	8005a14 <HAL_I2C_Mem_Write>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	4b05      	ldr	r3, [pc, #20]	@ (8004b34 <I2C3_Write+0x4c>)
 8004b20:	701a      	strb	r2, [r3, #0]
    //verifyHAL_I2C_IS_OKAY();
}
 8004b22:	bf00      	nop
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	0003d090 	.word	0x0003d090
 8004b30:	20025da8 	.word	0x20025da8
 8004b34:	20025dfc 	.word	0x20025dfc

08004b38 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af04      	add	r7, sp, #16
 8004b3e:	4603      	mov	r3, r0
 8004b40:	603a      	str	r2, [r7, #0]
 8004b42:	71fb      	strb	r3, [r7, #7]
 8004b44:	460b      	mov	r3, r1
 8004b46:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	b299      	uxth	r1, r3
 8004b4c:	79bb      	ldrb	r3, [r7, #6]
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	4b08      	ldr	r3, [pc, #32]	@ (8004b74 <I2C3_Read+0x3c>)
 8004b52:	9302      	str	r3, [sp, #8]
 8004b54:	2301      	movs	r3, #1
 8004b56:	9301      	str	r3, [sp, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	4806      	ldr	r0, [pc, #24]	@ (8004b78 <I2C3_Read+0x40>)
 8004b60:	f001 f852 	bl	8005c08 <HAL_I2C_Mem_Read>
 8004b64:	4603      	mov	r3, r0
 8004b66:	461a      	mov	r2, r3
 8004b68:	4b04      	ldr	r3, [pc, #16]	@ (8004b7c <I2C3_Read+0x44>)
 8004b6a:	701a      	strb	r2, [r3, #0]
    //verifyHAL_I2C_IS_OKAY();
}
 8004b6c:	bf00      	nop
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	0003d090 	.word	0x0003d090
 8004b78:	20025da8 	.word	0x20025da8
 8004b7c:	20025dfc 	.word	0x20025dfc

08004b80 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af04      	add	r7, sp, #16
 8004b86:	603a      	str	r2, [r7, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	71fb      	strb	r3, [r7, #7]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	71bb      	strb	r3, [r7, #6]
 8004b92:	4613      	mov	r3, r2
 8004b94:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8004b96:	79fb      	ldrb	r3, [r7, #7]
 8004b98:	b299      	uxth	r1, r3
 8004b9a:	79bb      	ldrb	r3, [r7, #6]
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	4b07      	ldr	r3, [pc, #28]	@ (8004bbc <I2C3_MulitByteRead+0x3c>)
 8004ba0:	9302      	str	r3, [sp, #8]
 8004ba2:	88bb      	ldrh	r3, [r7, #4]
 8004ba4:	9301      	str	r3, [sp, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	2301      	movs	r3, #1
 8004bac:	4804      	ldr	r0, [pc, #16]	@ (8004bc0 <I2C3_MulitByteRead+0x40>)
 8004bae:	f001 f82b 	bl	8005c08 <HAL_I2C_Mem_Read>
}
 8004bb2:	bf00      	nop
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	0003d090 	.word	0x0003d090
 8004bc0:	20025da8 	.word	0x20025da8

08004bc4 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8004bce:	204d      	movs	r0, #77	@ 0x4d
 8004bd0:	f7ff fe2b 	bl	800482a <STMPE811_Read>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8004bd8:	204e      	movs	r0, #78	@ 0x4e
 8004bda:	f7ff fe26 	bl	800482a <STMPE811_Read>
 8004bde:	4603      	mov	r3, r0
 8004be0:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8004be2:	7a7b      	ldrb	r3, [r7, #9]
 8004be4:	021b      	lsls	r3, r3, #8
 8004be6:	b21a      	sxth	r2, r3
 8004be8:	7a3b      	ldrb	r3, [r7, #8]
 8004bea:	b21b      	sxth	r3, r3
 8004bec:	4313      	orrs	r3, r2
 8004bee:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8004bf0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004bf4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	dc06      	bgt.n	8004c0a <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8004bfc:	89fb      	ldrh	r3, [r7, #14]
 8004bfe:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8004c02:	330c      	adds	r3, #12
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	81fb      	strh	r3, [r7, #14]
 8004c08:	e005      	b.n	8004c16 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8004c0a:	89fb      	ldrh	r3, [r7, #14]
 8004c0c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8004c10:	3308      	adds	r3, #8
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8004c16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c1a:	4a18      	ldr	r2, [pc, #96]	@ (8004c7c <TM_STMPE811_ReadX+0xb8>)
 8004c1c:	fb82 1203 	smull	r1, r2, r2, r3
 8004c20:	441a      	add	r2, r3
 8004c22:	10d2      	asrs	r2, r2, #3
 8004c24:	17db      	asrs	r3, r3, #31
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8004c2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c2e:	2bef      	cmp	r3, #239	@ 0xef
 8004c30:	dd02      	ble.n	8004c38 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8004c32:	23ef      	movs	r3, #239	@ 0xef
 8004c34:	81fb      	strh	r3, [r7, #14]
 8004c36:	e005      	b.n	8004c44 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8004c38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	da01      	bge.n	8004c44 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8004c40:	2300      	movs	r3, #0
 8004c42:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8004c44:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004c48:	88fb      	ldrh	r3, [r7, #6]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	dd05      	ble.n	8004c5a <TM_STMPE811_ReadX+0x96>
 8004c4e:	89fa      	ldrh	r2, [r7, #14]
 8004c50:	88fb      	ldrh	r3, [r7, #6]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	b21b      	sxth	r3, r3
 8004c58:	e004      	b.n	8004c64 <TM_STMPE811_ReadX+0xa0>
 8004c5a:	89fb      	ldrh	r3, [r7, #14]
 8004c5c:	88fa      	ldrh	r2, [r7, #6]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	b21b      	sxth	r3, r3
 8004c64:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8004c66:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	dd01      	ble.n	8004c72 <TM_STMPE811_ReadX+0xae>
        return val;
 8004c6e:	89fb      	ldrh	r3, [r7, #14]
 8004c70:	e000      	b.n	8004c74 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8004c72:	88fb      	ldrh	r3, [r7, #6]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	88888889 	.word	0x88888889

08004c80 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8004c8a:	204f      	movs	r0, #79	@ 0x4f
 8004c8c:	f7ff fdcd 	bl	800482a <STMPE811_Read>
 8004c90:	4603      	mov	r3, r0
 8004c92:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8004c94:	2050      	movs	r0, #80	@ 0x50
 8004c96:	f7ff fdc8 	bl	800482a <STMPE811_Read>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8004c9e:	7a7b      	ldrb	r3, [r7, #9]
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	b21a      	sxth	r2, r3
 8004ca4:	7a3b      	ldrb	r3, [r7, #8]
 8004ca6:	b21b      	sxth	r3, r3
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8004cac:	89fb      	ldrh	r3, [r7, #14]
 8004cae:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8004cb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004cba:	4a19      	ldr	r2, [pc, #100]	@ (8004d20 <TM_STMPE811_ReadY+0xa0>)
 8004cbc:	fb82 1203 	smull	r1, r2, r2, r3
 8004cc0:	1052      	asrs	r2, r2, #1
 8004cc2:	17db      	asrs	r3, r3, #31
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8004cc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	dc02      	bgt.n	8004cd6 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	81fb      	strh	r3, [r7, #14]
 8004cd4:	e007      	b.n	8004ce6 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8004cd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004cda:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004cde:	db02      	blt.n	8004ce6 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8004ce0:	f240 133f 	movw	r3, #319	@ 0x13f
 8004ce4:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8004ce6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004cea:	88fb      	ldrh	r3, [r7, #6]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	dd05      	ble.n	8004cfc <TM_STMPE811_ReadY+0x7c>
 8004cf0:	89fa      	ldrh	r2, [r7, #14]
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	b21b      	sxth	r3, r3
 8004cfa:	e004      	b.n	8004d06 <TM_STMPE811_ReadY+0x86>
 8004cfc:	89fb      	ldrh	r3, [r7, #14]
 8004cfe:	88fa      	ldrh	r2, [r7, #6]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	b21b      	sxth	r3, r3
 8004d06:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8004d08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	dd01      	ble.n	8004d14 <TM_STMPE811_ReadY+0x94>
        return val;
 8004d10:	89fb      	ldrh	r3, [r7, #14]
 8004d12:	e000      	b.n	8004d16 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8004d14:	88fb      	ldrh	r3, [r7, #6]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	2e8ba2e9 	.word	0x2e8ba2e9

08004d24 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
}
 8004d28:	bf00      	nop
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
	...

08004d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d38:	4b06      	ldr	r3, [pc, #24]	@ (8004d54 <SystemInit+0x20>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d3e:	4a05      	ldr	r2, [pc, #20]	@ (8004d54 <SystemInit+0x20>)
 8004d40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d48:	bf00      	nop
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	e000ed00 	.word	0xe000ed00

08004d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004d58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004d90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004d5c:	f7ff ffea 	bl	8004d34 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004d60:	480c      	ldr	r0, [pc, #48]	@ (8004d94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004d62:	490d      	ldr	r1, [pc, #52]	@ (8004d98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004d64:	4a0d      	ldr	r2, [pc, #52]	@ (8004d9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d68:	e002      	b.n	8004d70 <LoopCopyDataInit>

08004d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d6e:	3304      	adds	r3, #4

08004d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d74:	d3f9      	bcc.n	8004d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d76:	4a0a      	ldr	r2, [pc, #40]	@ (8004da0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004d78:	4c0a      	ldr	r4, [pc, #40]	@ (8004da4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d7c:	e001      	b.n	8004d82 <LoopFillZerobss>

08004d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d80:	3204      	adds	r2, #4

08004d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d84:	d3fb      	bcc.n	8004d7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004d86:	f003 fbdb 	bl	8008540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d8a:	f7fe fe94 	bl	8003ab6 <main>
  bx  lr    
 8004d8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004d90:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d98:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8004d9c:	0800a1a0 	.word	0x0800a1a0
  ldr r2, =_sbss
 8004da0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8004da4:	20025e04 	.word	0x20025e04

08004da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004da8:	e7fe      	b.n	8004da8 <ADC_IRQHandler>
	...

08004dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004db0:	4b0e      	ldr	r3, [pc, #56]	@ (8004dec <HAL_Init+0x40>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a0d      	ldr	r2, [pc, #52]	@ (8004dec <HAL_Init+0x40>)
 8004db6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004dec <HAL_Init+0x40>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8004dec <HAL_Init+0x40>)
 8004dc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004dc8:	4b08      	ldr	r3, [pc, #32]	@ (8004dec <HAL_Init+0x40>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a07      	ldr	r2, [pc, #28]	@ (8004dec <HAL_Init+0x40>)
 8004dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004dd4:	2003      	movs	r0, #3
 8004dd6:	f000 f991 	bl	80050fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004dda:	2000      	movs	r0, #0
 8004ddc:	f000 f808 	bl	8004df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004de0:	f7ff f9aa 	bl	8004138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	40023c00 	.word	0x40023c00

08004df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004df8:	4b12      	ldr	r3, [pc, #72]	@ (8004e44 <HAL_InitTick+0x54>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	4b12      	ldr	r3, [pc, #72]	@ (8004e48 <HAL_InitTick+0x58>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	4619      	mov	r1, r3
 8004e02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 f9b7 	bl	8005182 <HAL_SYSTICK_Config>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e00e      	b.n	8004e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b0f      	cmp	r3, #15
 8004e22:	d80a      	bhi.n	8004e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e24:	2200      	movs	r2, #0
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	f04f 30ff 	mov.w	r0, #4294967295
 8004e2c:	f000 f971 	bl	8005112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e30:	4a06      	ldr	r2, [pc, #24]	@ (8004e4c <HAL_InitTick+0x5c>)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	e000      	b.n	8004e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	20000018 	.word	0x20000018
 8004e48:	20000020 	.word	0x20000020
 8004e4c:	2000001c 	.word	0x2000001c

08004e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e54:	4b06      	ldr	r3, [pc, #24]	@ (8004e70 <HAL_IncTick+0x20>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4b06      	ldr	r3, [pc, #24]	@ (8004e74 <HAL_IncTick+0x24>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4413      	add	r3, r2
 8004e60:	4a04      	ldr	r2, [pc, #16]	@ (8004e74 <HAL_IncTick+0x24>)
 8004e62:	6013      	str	r3, [r2, #0]
}
 8004e64:	bf00      	nop
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	20000020 	.word	0x20000020
 8004e74:	20025e00 	.word	0x20025e00

08004e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8004e7c:	4b03      	ldr	r3, [pc, #12]	@ (8004e8c <HAL_GetTick+0x14>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	20025e00 	.word	0x20025e00

08004e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e98:	f7ff ffee 	bl	8004e78 <HAL_GetTick>
 8004e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea8:	d005      	beq.n	8004eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed4 <HAL_Delay+0x44>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004eb6:	bf00      	nop
 8004eb8:	f7ff ffde 	bl	8004e78 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d8f7      	bhi.n	8004eb8 <HAL_Delay+0x28>
  {
  }
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20000020 	.word	0x20000020

08004ed8 <__NVIC_SetPriorityGrouping>:
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f1c <__NVIC_SetPriorityGrouping+0x44>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f0a:	4a04      	ldr	r2, [pc, #16]	@ (8004f1c <__NVIC_SetPriorityGrouping+0x44>)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	60d3      	str	r3, [r2, #12]
}
 8004f10:	bf00      	nop
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	e000ed00 	.word	0xe000ed00

08004f20 <__NVIC_GetPriorityGrouping>:
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f24:	4b04      	ldr	r3, [pc, #16]	@ (8004f38 <__NVIC_GetPriorityGrouping+0x18>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	0a1b      	lsrs	r3, r3, #8
 8004f2a:	f003 0307 	and.w	r3, r3, #7
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	e000ed00 	.word	0xe000ed00

08004f3c <__NVIC_EnableIRQ>:
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	4603      	mov	r3, r0
 8004f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	db0b      	blt.n	8004f66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	f003 021f 	and.w	r2, r3, #31
 8004f54:	4907      	ldr	r1, [pc, #28]	@ (8004f74 <__NVIC_EnableIRQ+0x38>)
 8004f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	e000e100 	.word	0xe000e100

08004f78 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	db12      	blt.n	8004fb0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	f003 021f 	and.w	r2, r3, #31
 8004f90:	490a      	ldr	r1, [pc, #40]	@ (8004fbc <__NVIC_DisableIRQ+0x44>)
 8004f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	2001      	movs	r0, #1
 8004f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f9e:	3320      	adds	r3, #32
 8004fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fa4:	f3bf 8f4f 	dsb	sy
}
 8004fa8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004faa:	f3bf 8f6f 	isb	sy
}
 8004fae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	e000e100 	.word	0xe000e100

08004fc0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	db0c      	blt.n	8004fec <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	f003 021f 	and.w	r2, r3, #31
 8004fd8:	4907      	ldr	r1, [pc, #28]	@ (8004ff8 <__NVIC_ClearPendingIRQ+0x38>)
 8004fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8004fe6:	3360      	adds	r3, #96	@ 0x60
 8004fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	e000e100 	.word	0xe000e100

08004ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	4603      	mov	r3, r0
 8005004:	6039      	str	r1, [r7, #0]
 8005006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800500c:	2b00      	cmp	r3, #0
 800500e:	db0a      	blt.n	8005026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	b2da      	uxtb	r2, r3
 8005014:	490c      	ldr	r1, [pc, #48]	@ (8005048 <__NVIC_SetPriority+0x4c>)
 8005016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501a:	0112      	lsls	r2, r2, #4
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	440b      	add	r3, r1
 8005020:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005024:	e00a      	b.n	800503c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	b2da      	uxtb	r2, r3
 800502a:	4908      	ldr	r1, [pc, #32]	@ (800504c <__NVIC_SetPriority+0x50>)
 800502c:	79fb      	ldrb	r3, [r7, #7]
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	3b04      	subs	r3, #4
 8005034:	0112      	lsls	r2, r2, #4
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	440b      	add	r3, r1
 800503a:	761a      	strb	r2, [r3, #24]
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	e000e100 	.word	0xe000e100
 800504c:	e000ed00 	.word	0xe000ed00

08005050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005050:	b480      	push	{r7}
 8005052:	b089      	sub	sp, #36	@ 0x24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f1c3 0307 	rsb	r3, r3, #7
 800506a:	2b04      	cmp	r3, #4
 800506c:	bf28      	it	cs
 800506e:	2304      	movcs	r3, #4
 8005070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3304      	adds	r3, #4
 8005076:	2b06      	cmp	r3, #6
 8005078:	d902      	bls.n	8005080 <NVIC_EncodePriority+0x30>
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	3b03      	subs	r3, #3
 800507e:	e000      	b.n	8005082 <NVIC_EncodePriority+0x32>
 8005080:	2300      	movs	r3, #0
 8005082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005084:	f04f 32ff 	mov.w	r2, #4294967295
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	fa02 f303 	lsl.w	r3, r2, r3
 800508e:	43da      	mvns	r2, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	401a      	ands	r2, r3
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005098:	f04f 31ff 	mov.w	r1, #4294967295
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	fa01 f303 	lsl.w	r3, r1, r3
 80050a2:	43d9      	mvns	r1, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050a8:	4313      	orrs	r3, r2
         );
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3724      	adds	r7, #36	@ 0x24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
	...

080050b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050c8:	d301      	bcc.n	80050ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050ca:	2301      	movs	r3, #1
 80050cc:	e00f      	b.n	80050ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050ce:	4a0a      	ldr	r2, [pc, #40]	@ (80050f8 <SysTick_Config+0x40>)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050d6:	210f      	movs	r1, #15
 80050d8:	f04f 30ff 	mov.w	r0, #4294967295
 80050dc:	f7ff ff8e 	bl	8004ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050e0:	4b05      	ldr	r3, [pc, #20]	@ (80050f8 <SysTick_Config+0x40>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050e6:	4b04      	ldr	r3, [pc, #16]	@ (80050f8 <SysTick_Config+0x40>)
 80050e8:	2207      	movs	r2, #7
 80050ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	e000e010 	.word	0xe000e010

080050fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff fee7 	bl	8004ed8 <__NVIC_SetPriorityGrouping>
}
 800510a:	bf00      	nop
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005112:	b580      	push	{r7, lr}
 8005114:	b086      	sub	sp, #24
 8005116:	af00      	add	r7, sp, #0
 8005118:	4603      	mov	r3, r0
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	607a      	str	r2, [r7, #4]
 800511e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005124:	f7ff fefc 	bl	8004f20 <__NVIC_GetPriorityGrouping>
 8005128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	6978      	ldr	r0, [r7, #20]
 8005130:	f7ff ff8e 	bl	8005050 <NVIC_EncodePriority>
 8005134:	4602      	mov	r2, r0
 8005136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800513a:	4611      	mov	r1, r2
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff ff5d 	bl	8004ffc <__NVIC_SetPriority>
}
 8005142:	bf00      	nop
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	4603      	mov	r3, r0
 8005152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff feef 	bl	8004f3c <__NVIC_EnableIRQ>
}
 800515e:	bf00      	nop
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	4603      	mov	r3, r0
 800516e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff feff 	bl	8004f78 <__NVIC_DisableIRQ>
}
 800517a:	bf00      	nop
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b082      	sub	sp, #8
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff ff94 	bl	80050b8 <SysTick_Config>
 8005190:	4603      	mov	r3, r0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b082      	sub	sp, #8
 800519e:	af00      	add	r7, sp, #0
 80051a0:	4603      	mov	r3, r0
 80051a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80051a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff ff09 	bl	8004fc0 <__NVIC_ClearPendingIRQ>
}
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 031f 	and.w	r3, r3, #31
 80051ca:	2201      	movs	r2, #1
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 80051d2:	4a04      	ldr	r2, [pc, #16]	@ (80051e4 <HAL_EXTI_ClearPending+0x2c>)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6153      	str	r3, [r2, #20]
}
 80051d8:	bf00      	nop
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	40013c00 	.word	0x40013c00

080051e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b089      	sub	sp, #36	@ 0x24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051fe:	2300      	movs	r3, #0
 8005200:	61fb      	str	r3, [r7, #28]
 8005202:	e177      	b.n	80054f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005204:	2201      	movs	r2, #1
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4013      	ands	r3, r2
 8005216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	429a      	cmp	r2, r3
 800521e:	f040 8166 	bne.w	80054ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	2b01      	cmp	r3, #1
 800522c:	d005      	beq.n	800523a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005236:	2b02      	cmp	r3, #2
 8005238:	d130      	bne.n	800529c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	2203      	movs	r2, #3
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	43db      	mvns	r3, r3
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	4013      	ands	r3, r2
 8005250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	fa02 f303 	lsl.w	r3, r2, r3
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	4313      	orrs	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005270:	2201      	movs	r2, #1
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	fa02 f303 	lsl.w	r3, r2, r3
 8005278:	43db      	mvns	r3, r3
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	4013      	ands	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f003 0201 	and.w	r2, r3, #1
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	4313      	orrs	r3, r2
 8005294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d017      	beq.n	80052d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	2203      	movs	r2, #3
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	43db      	mvns	r3, r3
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	4013      	ands	r3, r2
 80052be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f003 0303 	and.w	r3, r3, #3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d123      	bne.n	800532c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	08da      	lsrs	r2, r3, #3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3208      	adds	r2, #8
 80052ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	220f      	movs	r2, #15
 80052fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005300:	43db      	mvns	r3, r3
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	4013      	ands	r3, r2
 8005306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	691a      	ldr	r2, [r3, #16]
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	4313      	orrs	r3, r2
 800531c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	08da      	lsrs	r2, r3, #3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	3208      	adds	r2, #8
 8005326:	69b9      	ldr	r1, [r7, #24]
 8005328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	2203      	movs	r2, #3
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	43db      	mvns	r3, r3
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	4013      	ands	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f003 0203 	and.w	r2, r3, #3
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	fa02 f303 	lsl.w	r3, r2, r3
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	4313      	orrs	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80c0 	beq.w	80054ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800536e:	2300      	movs	r3, #0
 8005370:	60fb      	str	r3, [r7, #12]
 8005372:	4b66      	ldr	r3, [pc, #408]	@ (800550c <HAL_GPIO_Init+0x324>)
 8005374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005376:	4a65      	ldr	r2, [pc, #404]	@ (800550c <HAL_GPIO_Init+0x324>)
 8005378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800537c:	6453      	str	r3, [r2, #68]	@ 0x44
 800537e:	4b63      	ldr	r3, [pc, #396]	@ (800550c <HAL_GPIO_Init+0x324>)
 8005380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800538a:	4a61      	ldr	r2, [pc, #388]	@ (8005510 <HAL_GPIO_Init+0x328>)
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	089b      	lsrs	r3, r3, #2
 8005390:	3302      	adds	r3, #2
 8005392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	220f      	movs	r2, #15
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	43db      	mvns	r3, r3
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	4013      	ands	r3, r2
 80053ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a58      	ldr	r2, [pc, #352]	@ (8005514 <HAL_GPIO_Init+0x32c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d037      	beq.n	8005426 <HAL_GPIO_Init+0x23e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a57      	ldr	r2, [pc, #348]	@ (8005518 <HAL_GPIO_Init+0x330>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d031      	beq.n	8005422 <HAL_GPIO_Init+0x23a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a56      	ldr	r2, [pc, #344]	@ (800551c <HAL_GPIO_Init+0x334>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d02b      	beq.n	800541e <HAL_GPIO_Init+0x236>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a55      	ldr	r2, [pc, #340]	@ (8005520 <HAL_GPIO_Init+0x338>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d025      	beq.n	800541a <HAL_GPIO_Init+0x232>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a54      	ldr	r2, [pc, #336]	@ (8005524 <HAL_GPIO_Init+0x33c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d01f      	beq.n	8005416 <HAL_GPIO_Init+0x22e>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a53      	ldr	r2, [pc, #332]	@ (8005528 <HAL_GPIO_Init+0x340>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d019      	beq.n	8005412 <HAL_GPIO_Init+0x22a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a52      	ldr	r2, [pc, #328]	@ (800552c <HAL_GPIO_Init+0x344>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d013      	beq.n	800540e <HAL_GPIO_Init+0x226>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a51      	ldr	r2, [pc, #324]	@ (8005530 <HAL_GPIO_Init+0x348>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00d      	beq.n	800540a <HAL_GPIO_Init+0x222>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a50      	ldr	r2, [pc, #320]	@ (8005534 <HAL_GPIO_Init+0x34c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d007      	beq.n	8005406 <HAL_GPIO_Init+0x21e>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a4f      	ldr	r2, [pc, #316]	@ (8005538 <HAL_GPIO_Init+0x350>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d101      	bne.n	8005402 <HAL_GPIO_Init+0x21a>
 80053fe:	2309      	movs	r3, #9
 8005400:	e012      	b.n	8005428 <HAL_GPIO_Init+0x240>
 8005402:	230a      	movs	r3, #10
 8005404:	e010      	b.n	8005428 <HAL_GPIO_Init+0x240>
 8005406:	2308      	movs	r3, #8
 8005408:	e00e      	b.n	8005428 <HAL_GPIO_Init+0x240>
 800540a:	2307      	movs	r3, #7
 800540c:	e00c      	b.n	8005428 <HAL_GPIO_Init+0x240>
 800540e:	2306      	movs	r3, #6
 8005410:	e00a      	b.n	8005428 <HAL_GPIO_Init+0x240>
 8005412:	2305      	movs	r3, #5
 8005414:	e008      	b.n	8005428 <HAL_GPIO_Init+0x240>
 8005416:	2304      	movs	r3, #4
 8005418:	e006      	b.n	8005428 <HAL_GPIO_Init+0x240>
 800541a:	2303      	movs	r3, #3
 800541c:	e004      	b.n	8005428 <HAL_GPIO_Init+0x240>
 800541e:	2302      	movs	r3, #2
 8005420:	e002      	b.n	8005428 <HAL_GPIO_Init+0x240>
 8005422:	2301      	movs	r3, #1
 8005424:	e000      	b.n	8005428 <HAL_GPIO_Init+0x240>
 8005426:	2300      	movs	r3, #0
 8005428:	69fa      	ldr	r2, [r7, #28]
 800542a:	f002 0203 	and.w	r2, r2, #3
 800542e:	0092      	lsls	r2, r2, #2
 8005430:	4093      	lsls	r3, r2
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	4313      	orrs	r3, r2
 8005436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005438:	4935      	ldr	r1, [pc, #212]	@ (8005510 <HAL_GPIO_Init+0x328>)
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	089b      	lsrs	r3, r3, #2
 800543e:	3302      	adds	r3, #2
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005446:	4b3d      	ldr	r3, [pc, #244]	@ (800553c <HAL_GPIO_Init+0x354>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	43db      	mvns	r3, r3
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	4013      	ands	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	4313      	orrs	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800546a:	4a34      	ldr	r2, [pc, #208]	@ (800553c <HAL_GPIO_Init+0x354>)
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005470:	4b32      	ldr	r3, [pc, #200]	@ (800553c <HAL_GPIO_Init+0x354>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	43db      	mvns	r3, r3
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	4013      	ands	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005494:	4a29      	ldr	r2, [pc, #164]	@ (800553c <HAL_GPIO_Init+0x354>)
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800549a:	4b28      	ldr	r3, [pc, #160]	@ (800553c <HAL_GPIO_Init+0x354>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	43db      	mvns	r3, r3
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	4013      	ands	r3, r2
 80054a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054be:	4a1f      	ldr	r2, [pc, #124]	@ (800553c <HAL_GPIO_Init+0x354>)
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054c4:	4b1d      	ldr	r3, [pc, #116]	@ (800553c <HAL_GPIO_Init+0x354>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	43db      	mvns	r3, r3
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	4013      	ands	r3, r2
 80054d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054e8:	4a14      	ldr	r2, [pc, #80]	@ (800553c <HAL_GPIO_Init+0x354>)
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	3301      	adds	r3, #1
 80054f2:	61fb      	str	r3, [r7, #28]
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	2b0f      	cmp	r3, #15
 80054f8:	f67f ae84 	bls.w	8005204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054fc:	bf00      	nop
 80054fe:	bf00      	nop
 8005500:	3724      	adds	r7, #36	@ 0x24
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40023800 	.word	0x40023800
 8005510:	40013800 	.word	0x40013800
 8005514:	40020000 	.word	0x40020000
 8005518:	40020400 	.word	0x40020400
 800551c:	40020800 	.word	0x40020800
 8005520:	40020c00 	.word	0x40020c00
 8005524:	40021000 	.word	0x40021000
 8005528:	40021400 	.word	0x40021400
 800552c:	40021800 	.word	0x40021800
 8005530:	40021c00 	.word	0x40021c00
 8005534:	40022000 	.word	0x40022000
 8005538:	40022400 	.word	0x40022400
 800553c:	40013c00 	.word	0x40013c00

08005540 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800554a:	2300      	movs	r3, #0
 800554c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800554e:	2300      	movs	r3, #0
 8005550:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005552:	2300      	movs	r3, #0
 8005554:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	e0d9      	b.n	8005710 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800555c:	2201      	movs	r2, #1
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	fa02 f303 	lsl.w	r3, r2, r3
 8005564:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	4013      	ands	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	429a      	cmp	r2, r3
 8005574:	f040 80c9 	bne.w	800570a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005578:	4a6b      	ldr	r2, [pc, #428]	@ (8005728 <HAL_GPIO_DeInit+0x1e8>)
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	089b      	lsrs	r3, r3, #2
 800557e:	3302      	adds	r3, #2
 8005580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005584:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f003 0303 	and.w	r3, r3, #3
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	220f      	movs	r2, #15
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	4013      	ands	r3, r2
 8005598:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a63      	ldr	r2, [pc, #396]	@ (800572c <HAL_GPIO_DeInit+0x1ec>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d037      	beq.n	8005612 <HAL_GPIO_DeInit+0xd2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a62      	ldr	r2, [pc, #392]	@ (8005730 <HAL_GPIO_DeInit+0x1f0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d031      	beq.n	800560e <HAL_GPIO_DeInit+0xce>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a61      	ldr	r2, [pc, #388]	@ (8005734 <HAL_GPIO_DeInit+0x1f4>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d02b      	beq.n	800560a <HAL_GPIO_DeInit+0xca>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a60      	ldr	r2, [pc, #384]	@ (8005738 <HAL_GPIO_DeInit+0x1f8>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d025      	beq.n	8005606 <HAL_GPIO_DeInit+0xc6>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a5f      	ldr	r2, [pc, #380]	@ (800573c <HAL_GPIO_DeInit+0x1fc>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d01f      	beq.n	8005602 <HAL_GPIO_DeInit+0xc2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a5e      	ldr	r2, [pc, #376]	@ (8005740 <HAL_GPIO_DeInit+0x200>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d019      	beq.n	80055fe <HAL_GPIO_DeInit+0xbe>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a5d      	ldr	r2, [pc, #372]	@ (8005744 <HAL_GPIO_DeInit+0x204>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d013      	beq.n	80055fa <HAL_GPIO_DeInit+0xba>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a5c      	ldr	r2, [pc, #368]	@ (8005748 <HAL_GPIO_DeInit+0x208>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00d      	beq.n	80055f6 <HAL_GPIO_DeInit+0xb6>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a5b      	ldr	r2, [pc, #364]	@ (800574c <HAL_GPIO_DeInit+0x20c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d007      	beq.n	80055f2 <HAL_GPIO_DeInit+0xb2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a5a      	ldr	r2, [pc, #360]	@ (8005750 <HAL_GPIO_DeInit+0x210>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d101      	bne.n	80055ee <HAL_GPIO_DeInit+0xae>
 80055ea:	2309      	movs	r3, #9
 80055ec:	e012      	b.n	8005614 <HAL_GPIO_DeInit+0xd4>
 80055ee:	230a      	movs	r3, #10
 80055f0:	e010      	b.n	8005614 <HAL_GPIO_DeInit+0xd4>
 80055f2:	2308      	movs	r3, #8
 80055f4:	e00e      	b.n	8005614 <HAL_GPIO_DeInit+0xd4>
 80055f6:	2307      	movs	r3, #7
 80055f8:	e00c      	b.n	8005614 <HAL_GPIO_DeInit+0xd4>
 80055fa:	2306      	movs	r3, #6
 80055fc:	e00a      	b.n	8005614 <HAL_GPIO_DeInit+0xd4>
 80055fe:	2305      	movs	r3, #5
 8005600:	e008      	b.n	8005614 <HAL_GPIO_DeInit+0xd4>
 8005602:	2304      	movs	r3, #4
 8005604:	e006      	b.n	8005614 <HAL_GPIO_DeInit+0xd4>
 8005606:	2303      	movs	r3, #3
 8005608:	e004      	b.n	8005614 <HAL_GPIO_DeInit+0xd4>
 800560a:	2302      	movs	r3, #2
 800560c:	e002      	b.n	8005614 <HAL_GPIO_DeInit+0xd4>
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <HAL_GPIO_DeInit+0xd4>
 8005612:	2300      	movs	r3, #0
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	f002 0203 	and.w	r2, r2, #3
 800561a:	0092      	lsls	r2, r2, #2
 800561c:	4093      	lsls	r3, r2
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	429a      	cmp	r2, r3
 8005622:	d132      	bne.n	800568a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005624:	4b4b      	ldr	r3, [pc, #300]	@ (8005754 <HAL_GPIO_DeInit+0x214>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	43db      	mvns	r3, r3
 800562c:	4949      	ldr	r1, [pc, #292]	@ (8005754 <HAL_GPIO_DeInit+0x214>)
 800562e:	4013      	ands	r3, r2
 8005630:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005632:	4b48      	ldr	r3, [pc, #288]	@ (8005754 <HAL_GPIO_DeInit+0x214>)
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	43db      	mvns	r3, r3
 800563a:	4946      	ldr	r1, [pc, #280]	@ (8005754 <HAL_GPIO_DeInit+0x214>)
 800563c:	4013      	ands	r3, r2
 800563e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005640:	4b44      	ldr	r3, [pc, #272]	@ (8005754 <HAL_GPIO_DeInit+0x214>)
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	43db      	mvns	r3, r3
 8005648:	4942      	ldr	r1, [pc, #264]	@ (8005754 <HAL_GPIO_DeInit+0x214>)
 800564a:	4013      	ands	r3, r2
 800564c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800564e:	4b41      	ldr	r3, [pc, #260]	@ (8005754 <HAL_GPIO_DeInit+0x214>)
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	43db      	mvns	r3, r3
 8005656:	493f      	ldr	r1, [pc, #252]	@ (8005754 <HAL_GPIO_DeInit+0x214>)
 8005658:	4013      	ands	r3, r2
 800565a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	220f      	movs	r2, #15
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800566c:	4a2e      	ldr	r2, [pc, #184]	@ (8005728 <HAL_GPIO_DeInit+0x1e8>)
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	089b      	lsrs	r3, r3, #2
 8005672:	3302      	adds	r3, #2
 8005674:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	43da      	mvns	r2, r3
 800567c:	482a      	ldr	r0, [pc, #168]	@ (8005728 <HAL_GPIO_DeInit+0x1e8>)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	089b      	lsrs	r3, r3, #2
 8005682:	400a      	ands	r2, r1
 8005684:	3302      	adds	r3, #2
 8005686:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	2103      	movs	r1, #3
 8005694:	fa01 f303 	lsl.w	r3, r1, r3
 8005698:	43db      	mvns	r3, r3
 800569a:	401a      	ands	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	08da      	lsrs	r2, r3, #3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3208      	adds	r2, #8
 80056a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	220f      	movs	r2, #15
 80056b6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ba:	43db      	mvns	r3, r3
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	08d2      	lsrs	r2, r2, #3
 80056c0:	4019      	ands	r1, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	3208      	adds	r2, #8
 80056c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	2103      	movs	r1, #3
 80056d4:	fa01 f303 	lsl.w	r3, r1, r3
 80056d8:	43db      	mvns	r3, r3
 80056da:	401a      	ands	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	2101      	movs	r1, #1
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	fa01 f303 	lsl.w	r3, r1, r3
 80056ec:	43db      	mvns	r3, r3
 80056ee:	401a      	ands	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	2103      	movs	r1, #3
 80056fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005702:	43db      	mvns	r3, r3
 8005704:	401a      	ands	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	3301      	adds	r3, #1
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b0f      	cmp	r3, #15
 8005714:	f67f af22 	bls.w	800555c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005718:	bf00      	nop
 800571a:	bf00      	nop
 800571c:	371c      	adds	r7, #28
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40013800 	.word	0x40013800
 800572c:	40020000 	.word	0x40020000
 8005730:	40020400 	.word	0x40020400
 8005734:	40020800 	.word	0x40020800
 8005738:	40020c00 	.word	0x40020c00
 800573c:	40021000 	.word	0x40021000
 8005740:	40021400 	.word	0x40021400
 8005744:	40021800 	.word	0x40021800
 8005748:	40021c00 	.word	0x40021c00
 800574c:	40022000 	.word	0x40022000
 8005750:	40022400 	.word	0x40022400
 8005754:	40013c00 	.word	0x40013c00

08005758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	460b      	mov	r3, r1
 8005762:	807b      	strh	r3, [r7, #2]
 8005764:	4613      	mov	r3, r2
 8005766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005768:	787b      	ldrb	r3, [r7, #1]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800576e:	887a      	ldrh	r2, [r7, #2]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005774:	e003      	b.n	800577e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005776:	887b      	ldrh	r3, [r7, #2]
 8005778:	041a      	lsls	r2, r3, #16
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	619a      	str	r2, [r3, #24]
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
	...

0800578c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e12b      	b.n	80059f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d106      	bne.n	80057b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7fe fce8 	bl	8004188 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2224      	movs	r2, #36	@ 0x24
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0201 	bic.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80057f0:	f001 ff82 	bl	80076f8 <HAL_RCC_GetPCLK1Freq>
 80057f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	4a81      	ldr	r2, [pc, #516]	@ (8005a00 <HAL_I2C_Init+0x274>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d807      	bhi.n	8005810 <HAL_I2C_Init+0x84>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4a80      	ldr	r2, [pc, #512]	@ (8005a04 <HAL_I2C_Init+0x278>)
 8005804:	4293      	cmp	r3, r2
 8005806:	bf94      	ite	ls
 8005808:	2301      	movls	r3, #1
 800580a:	2300      	movhi	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	e006      	b.n	800581e <HAL_I2C_Init+0x92>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4a7d      	ldr	r2, [pc, #500]	@ (8005a08 <HAL_I2C_Init+0x27c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	bf94      	ite	ls
 8005818:	2301      	movls	r3, #1
 800581a:	2300      	movhi	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e0e7      	b.n	80059f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4a78      	ldr	r2, [pc, #480]	@ (8005a0c <HAL_I2C_Init+0x280>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	0c9b      	lsrs	r3, r3, #18
 8005830:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	4a6a      	ldr	r2, [pc, #424]	@ (8005a00 <HAL_I2C_Init+0x274>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d802      	bhi.n	8005860 <HAL_I2C_Init+0xd4>
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	3301      	adds	r3, #1
 800585e:	e009      	b.n	8005874 <HAL_I2C_Init+0xe8>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005866:	fb02 f303 	mul.w	r3, r2, r3
 800586a:	4a69      	ldr	r2, [pc, #420]	@ (8005a10 <HAL_I2C_Init+0x284>)
 800586c:	fba2 2303 	umull	r2, r3, r2, r3
 8005870:	099b      	lsrs	r3, r3, #6
 8005872:	3301      	adds	r3, #1
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6812      	ldr	r2, [r2, #0]
 8005878:	430b      	orrs	r3, r1
 800587a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005886:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	495c      	ldr	r1, [pc, #368]	@ (8005a00 <HAL_I2C_Init+0x274>)
 8005890:	428b      	cmp	r3, r1
 8005892:	d819      	bhi.n	80058c8 <HAL_I2C_Init+0x13c>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	1e59      	subs	r1, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	fbb1 f3f3 	udiv	r3, r1, r3
 80058a2:	1c59      	adds	r1, r3, #1
 80058a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80058a8:	400b      	ands	r3, r1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <HAL_I2C_Init+0x138>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	1e59      	subs	r1, r3, #1
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80058bc:	3301      	adds	r3, #1
 80058be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058c2:	e051      	b.n	8005968 <HAL_I2C_Init+0x1dc>
 80058c4:	2304      	movs	r3, #4
 80058c6:	e04f      	b.n	8005968 <HAL_I2C_Init+0x1dc>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d111      	bne.n	80058f4 <HAL_I2C_Init+0x168>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	1e58      	subs	r0, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6859      	ldr	r1, [r3, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	440b      	add	r3, r1
 80058de:	fbb0 f3f3 	udiv	r3, r0, r3
 80058e2:	3301      	adds	r3, #1
 80058e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	bf0c      	ite	eq
 80058ec:	2301      	moveq	r3, #1
 80058ee:	2300      	movne	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	e012      	b.n	800591a <HAL_I2C_Init+0x18e>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	1e58      	subs	r0, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6859      	ldr	r1, [r3, #4]
 80058fc:	460b      	mov	r3, r1
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	440b      	add	r3, r1
 8005902:	0099      	lsls	r1, r3, #2
 8005904:	440b      	add	r3, r1
 8005906:	fbb0 f3f3 	udiv	r3, r0, r3
 800590a:	3301      	adds	r3, #1
 800590c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005910:	2b00      	cmp	r3, #0
 8005912:	bf0c      	ite	eq
 8005914:	2301      	moveq	r3, #1
 8005916:	2300      	movne	r3, #0
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <HAL_I2C_Init+0x196>
 800591e:	2301      	movs	r3, #1
 8005920:	e022      	b.n	8005968 <HAL_I2C_Init+0x1dc>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10e      	bne.n	8005948 <HAL_I2C_Init+0x1bc>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	1e58      	subs	r0, r3, #1
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6859      	ldr	r1, [r3, #4]
 8005932:	460b      	mov	r3, r1
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	440b      	add	r3, r1
 8005938:	fbb0 f3f3 	udiv	r3, r0, r3
 800593c:	3301      	adds	r3, #1
 800593e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005946:	e00f      	b.n	8005968 <HAL_I2C_Init+0x1dc>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	1e58      	subs	r0, r3, #1
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6859      	ldr	r1, [r3, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	0099      	lsls	r1, r3, #2
 8005958:	440b      	add	r3, r1
 800595a:	fbb0 f3f3 	udiv	r3, r0, r3
 800595e:	3301      	adds	r3, #1
 8005960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005964:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005968:	6879      	ldr	r1, [r7, #4]
 800596a:	6809      	ldr	r1, [r1, #0]
 800596c:	4313      	orrs	r3, r2
 800596e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69da      	ldr	r2, [r3, #28]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005996:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6911      	ldr	r1, [r2, #16]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	68d2      	ldr	r2, [r2, #12]
 80059a2:	4311      	orrs	r1, r2
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	6812      	ldr	r2, [r2, #0]
 80059a8:	430b      	orrs	r3, r1
 80059aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0201 	orr.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	000186a0 	.word	0x000186a0
 8005a04:	001e847f 	.word	0x001e847f
 8005a08:	003d08ff 	.word	0x003d08ff
 8005a0c:	431bde83 	.word	0x431bde83
 8005a10:	10624dd3 	.word	0x10624dd3

08005a14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	4608      	mov	r0, r1
 8005a1e:	4611      	mov	r1, r2
 8005a20:	461a      	mov	r2, r3
 8005a22:	4603      	mov	r3, r0
 8005a24:	817b      	strh	r3, [r7, #10]
 8005a26:	460b      	mov	r3, r1
 8005a28:	813b      	strh	r3, [r7, #8]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a2e:	f7ff fa23 	bl	8004e78 <HAL_GetTick>
 8005a32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	f040 80d9 	bne.w	8005bf4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	2319      	movs	r3, #25
 8005a48:	2201      	movs	r2, #1
 8005a4a:	496d      	ldr	r1, [pc, #436]	@ (8005c00 <HAL_I2C_Mem_Write+0x1ec>)
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 fc8b 	bl	8006368 <I2C_WaitOnFlagUntilTimeout>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e0cc      	b.n	8005bf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d101      	bne.n	8005a6a <HAL_I2C_Mem_Write+0x56>
 8005a66:	2302      	movs	r3, #2
 8005a68:	e0c5      	b.n	8005bf6 <HAL_I2C_Mem_Write+0x1e2>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d007      	beq.n	8005a90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0201 	orr.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2221      	movs	r2, #33	@ 0x21
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2240      	movs	r2, #64	@ 0x40
 8005aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6a3a      	ldr	r2, [r7, #32]
 8005aba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005ac0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4a4d      	ldr	r2, [pc, #308]	@ (8005c04 <HAL_I2C_Mem_Write+0x1f0>)
 8005ad0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ad2:	88f8      	ldrh	r0, [r7, #6]
 8005ad4:	893a      	ldrh	r2, [r7, #8]
 8005ad6:	8979      	ldrh	r1, [r7, #10]
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	9301      	str	r3, [sp, #4]
 8005adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 fac2 	bl	800606c <I2C_RequestMemoryWrite>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d052      	beq.n	8005b94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e081      	b.n	8005bf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 fd50 	bl	800659c <I2C_WaitOnTXEFlagUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00d      	beq.n	8005b1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	d107      	bne.n	8005b1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e06b      	b.n	8005bf6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b22:	781a      	ldrb	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d11b      	bne.n	8005b94 <HAL_I2C_Mem_Write+0x180>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d017      	beq.n	8005b94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b68:	781a      	ldrb	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1aa      	bne.n	8005af2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 fd43 	bl	800662c <I2C_WaitOnBTFFlagUntilTimeout>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00d      	beq.n	8005bc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d107      	bne.n	8005bc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e016      	b.n	8005bf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	e000      	b.n	8005bf6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005bf4:	2302      	movs	r3, #2
  }
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	00100002 	.word	0x00100002
 8005c04:	ffff0000 	.word	0xffff0000

08005c08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08c      	sub	sp, #48	@ 0x30
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	4608      	mov	r0, r1
 8005c12:	4611      	mov	r1, r2
 8005c14:	461a      	mov	r2, r3
 8005c16:	4603      	mov	r3, r0
 8005c18:	817b      	strh	r3, [r7, #10]
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	813b      	strh	r3, [r7, #8]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c22:	f7ff f929 	bl	8004e78 <HAL_GetTick>
 8005c26:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b20      	cmp	r3, #32
 8005c32:	f040 8214 	bne.w	800605e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	2319      	movs	r3, #25
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	497b      	ldr	r1, [pc, #492]	@ (8005e2c <HAL_I2C_Mem_Read+0x224>)
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 fb91 	bl	8006368 <I2C_WaitOnFlagUntilTimeout>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e207      	b.n	8006060 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d101      	bne.n	8005c5e <HAL_I2C_Mem_Read+0x56>
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	e200      	b.n	8006060 <HAL_I2C_Mem_Read+0x458>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d007      	beq.n	8005c84 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0201 	orr.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2222      	movs	r2, #34	@ 0x22
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2240      	movs	r2, #64	@ 0x40
 8005ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4a5b      	ldr	r2, [pc, #364]	@ (8005e30 <HAL_I2C_Mem_Read+0x228>)
 8005cc4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cc6:	88f8      	ldrh	r0, [r7, #6]
 8005cc8:	893a      	ldrh	r2, [r7, #8]
 8005cca:	8979      	ldrh	r1, [r7, #10]
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cce:	9301      	str	r3, [sp, #4]
 8005cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 fa5e 	bl	8006198 <I2C_RequestMemoryRead>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e1bc      	b.n	8006060 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d113      	bne.n	8005d16 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cee:	2300      	movs	r3, #0
 8005cf0:	623b      	str	r3, [r7, #32]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	623b      	str	r3, [r7, #32]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	623b      	str	r3, [r7, #32]
 8005d02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	e190      	b.n	8006038 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d11b      	bne.n	8005d56 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61fb      	str	r3, [r7, #28]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	61fb      	str	r3, [r7, #28]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	61fb      	str	r3, [r7, #28]
 8005d42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	e170      	b.n	8006038 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d11b      	bne.n	8005d96 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61bb      	str	r3, [r7, #24]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	61bb      	str	r3, [r7, #24]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	61bb      	str	r3, [r7, #24]
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	e150      	b.n	8006038 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005dac:	e144      	b.n	8006038 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	f200 80f1 	bhi.w	8005f9a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d123      	bne.n	8005e08 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dc2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 fc79 	bl	80066bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e145      	b.n	8006060 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	691a      	ldr	r2, [r3, #16]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e06:	e117      	b.n	8006038 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d14e      	bne.n	8005eae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e16:	2200      	movs	r2, #0
 8005e18:	4906      	ldr	r1, [pc, #24]	@ (8005e34 <HAL_I2C_Mem_Read+0x22c>)
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 faa4 	bl	8006368 <I2C_WaitOnFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d008      	beq.n	8005e38 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e11a      	b.n	8006060 <HAL_I2C_Mem_Read+0x458>
 8005e2a:	bf00      	nop
 8005e2c:	00100002 	.word	0x00100002
 8005e30:	ffff0000 	.word	0xffff0000
 8005e34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691a      	ldr	r2, [r3, #16]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	3b01      	subs	r3, #1
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	691a      	ldr	r2, [r3, #16]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e84:	b2d2      	uxtb	r2, r2
 8005e86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005eac:	e0c4      	b.n	8006038 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	496c      	ldr	r1, [pc, #432]	@ (8006068 <HAL_I2C_Mem_Read+0x460>)
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 fa55 	bl	8006368 <I2C_WaitOnFlagUntilTimeout>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e0cb      	b.n	8006060 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ed6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691a      	ldr	r2, [r3, #16]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f10:	2200      	movs	r2, #0
 8005f12:	4955      	ldr	r1, [pc, #340]	@ (8006068 <HAL_I2C_Mem_Read+0x460>)
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 fa27 	bl	8006368 <I2C_WaitOnFlagUntilTimeout>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e09d      	b.n	8006060 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691a      	ldr	r2, [r3, #16]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f98:	e04e      	b.n	8006038 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f9c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 fb8c 	bl	80066bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e058      	b.n	8006060 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	691a      	ldr	r2, [r3, #16]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb8:	b2d2      	uxtb	r2, r2
 8005fba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	f003 0304 	and.w	r3, r3, #4
 8005fea:	2b04      	cmp	r3, #4
 8005fec:	d124      	bne.n	8006038 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d107      	bne.n	8006006 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006004:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006022:	3b01      	subs	r3, #1
 8006024:	b29a      	uxth	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800603c:	2b00      	cmp	r3, #0
 800603e:	f47f aeb6 	bne.w	8005dae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2220      	movs	r2, #32
 8006046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	e000      	b.n	8006060 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800605e:	2302      	movs	r3, #2
  }
}
 8006060:	4618      	mov	r0, r3
 8006062:	3728      	adds	r7, #40	@ 0x28
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	00010004 	.word	0x00010004

0800606c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af02      	add	r7, sp, #8
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	4608      	mov	r0, r1
 8006076:	4611      	mov	r1, r2
 8006078:	461a      	mov	r2, r3
 800607a:	4603      	mov	r3, r0
 800607c:	817b      	strh	r3, [r7, #10]
 800607e:	460b      	mov	r3, r1
 8006080:	813b      	strh	r3, [r7, #8]
 8006082:	4613      	mov	r3, r2
 8006084:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006094:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	2200      	movs	r2, #0
 800609e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 f960 	bl	8006368 <I2C_WaitOnFlagUntilTimeout>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00d      	beq.n	80060ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060bc:	d103      	bne.n	80060c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e05f      	b.n	800618a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060ca:	897b      	ldrh	r3, [r7, #10]
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	461a      	mov	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80060d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060dc:	6a3a      	ldr	r2, [r7, #32]
 80060de:	492d      	ldr	r1, [pc, #180]	@ (8006194 <I2C_RequestMemoryWrite+0x128>)
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 f9bb 	bl	800645c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e04c      	b.n	800618a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006108:	6a39      	ldr	r1, [r7, #32]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 fa46 	bl	800659c <I2C_WaitOnTXEFlagUntilTimeout>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00d      	beq.n	8006132 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611a:	2b04      	cmp	r3, #4
 800611c:	d107      	bne.n	800612e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800612c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e02b      	b.n	800618a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006132:	88fb      	ldrh	r3, [r7, #6]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d105      	bne.n	8006144 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006138:	893b      	ldrh	r3, [r7, #8]
 800613a:	b2da      	uxtb	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	611a      	str	r2, [r3, #16]
 8006142:	e021      	b.n	8006188 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006144:	893b      	ldrh	r3, [r7, #8]
 8006146:	0a1b      	lsrs	r3, r3, #8
 8006148:	b29b      	uxth	r3, r3
 800614a:	b2da      	uxtb	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006154:	6a39      	ldr	r1, [r7, #32]
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 fa20 	bl	800659c <I2C_WaitOnTXEFlagUntilTimeout>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00d      	beq.n	800617e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006166:	2b04      	cmp	r3, #4
 8006168:	d107      	bne.n	800617a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006178:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e005      	b.n	800618a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800617e:	893b      	ldrh	r3, [r7, #8]
 8006180:	b2da      	uxtb	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	00010002 	.word	0x00010002

08006198 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af02      	add	r7, sp, #8
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	4608      	mov	r0, r1
 80061a2:	4611      	mov	r1, r2
 80061a4:	461a      	mov	r2, r3
 80061a6:	4603      	mov	r3, r0
 80061a8:	817b      	strh	r3, [r7, #10]
 80061aa:	460b      	mov	r3, r1
 80061ac:	813b      	strh	r3, [r7, #8]
 80061ae:	4613      	mov	r3, r2
 80061b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80061c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	2200      	movs	r2, #0
 80061da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 f8c2 	bl	8006368 <I2C_WaitOnFlagUntilTimeout>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00d      	beq.n	8006206 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061f8:	d103      	bne.n	8006202 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006200:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e0aa      	b.n	800635c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006206:	897b      	ldrh	r3, [r7, #10]
 8006208:	b2db      	uxtb	r3, r3
 800620a:	461a      	mov	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006214:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006218:	6a3a      	ldr	r2, [r7, #32]
 800621a:	4952      	ldr	r1, [pc, #328]	@ (8006364 <I2C_RequestMemoryRead+0x1cc>)
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 f91d 	bl	800645c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e097      	b.n	800635c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800622c:	2300      	movs	r3, #0
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006244:	6a39      	ldr	r1, [r7, #32]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 f9a8 	bl	800659c <I2C_WaitOnTXEFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00d      	beq.n	800626e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006256:	2b04      	cmp	r3, #4
 8006258:	d107      	bne.n	800626a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006268:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e076      	b.n	800635c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800626e:	88fb      	ldrh	r3, [r7, #6]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d105      	bne.n	8006280 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006274:	893b      	ldrh	r3, [r7, #8]
 8006276:	b2da      	uxtb	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	611a      	str	r2, [r3, #16]
 800627e:	e021      	b.n	80062c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006280:	893b      	ldrh	r3, [r7, #8]
 8006282:	0a1b      	lsrs	r3, r3, #8
 8006284:	b29b      	uxth	r3, r3
 8006286:	b2da      	uxtb	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800628e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006290:	6a39      	ldr	r1, [r7, #32]
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f000 f982 	bl	800659c <I2C_WaitOnTXEFlagUntilTimeout>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00d      	beq.n	80062ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d107      	bne.n	80062b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e050      	b.n	800635c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062ba:	893b      	ldrh	r3, [r7, #8]
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062c6:	6a39      	ldr	r1, [r7, #32]
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 f967 	bl	800659c <I2C_WaitOnTXEFlagUntilTimeout>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00d      	beq.n	80062f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d107      	bne.n	80062ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e035      	b.n	800635c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	2200      	movs	r2, #0
 8006308:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 f82b 	bl	8006368 <I2C_WaitOnFlagUntilTimeout>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00d      	beq.n	8006334 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006326:	d103      	bne.n	8006330 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800632e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e013      	b.n	800635c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006334:	897b      	ldrh	r3, [r7, #10]
 8006336:	b2db      	uxtb	r3, r3
 8006338:	f043 0301 	orr.w	r3, r3, #1
 800633c:	b2da      	uxtb	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006346:	6a3a      	ldr	r2, [r7, #32]
 8006348:	4906      	ldr	r1, [pc, #24]	@ (8006364 <I2C_RequestMemoryRead+0x1cc>)
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 f886 	bl	800645c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e000      	b.n	800635c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	00010002 	.word	0x00010002

08006368 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	4613      	mov	r3, r2
 8006376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006378:	e048      	b.n	800640c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006380:	d044      	beq.n	800640c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006382:	f7fe fd79 	bl	8004e78 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	429a      	cmp	r2, r3
 8006390:	d302      	bcc.n	8006398 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d139      	bne.n	800640c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	0c1b      	lsrs	r3, r3, #16
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d10d      	bne.n	80063be <I2C_WaitOnFlagUntilTimeout+0x56>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	43da      	mvns	r2, r3
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	4013      	ands	r3, r2
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	bf0c      	ite	eq
 80063b4:	2301      	moveq	r3, #1
 80063b6:	2300      	movne	r3, #0
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	461a      	mov	r2, r3
 80063bc:	e00c      	b.n	80063d8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	43da      	mvns	r2, r3
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	4013      	ands	r3, r2
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	bf0c      	ite	eq
 80063d0:	2301      	moveq	r3, #1
 80063d2:	2300      	movne	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	79fb      	ldrb	r3, [r7, #7]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d116      	bne.n	800640c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f8:	f043 0220 	orr.w	r2, r3, #32
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e023      	b.n	8006454 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	0c1b      	lsrs	r3, r3, #16
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b01      	cmp	r3, #1
 8006414:	d10d      	bne.n	8006432 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	43da      	mvns	r2, r3
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	4013      	ands	r3, r2
 8006422:	b29b      	uxth	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	bf0c      	ite	eq
 8006428:	2301      	moveq	r3, #1
 800642a:	2300      	movne	r3, #0
 800642c:	b2db      	uxtb	r3, r3
 800642e:	461a      	mov	r2, r3
 8006430:	e00c      	b.n	800644c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	43da      	mvns	r2, r3
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	4013      	ands	r3, r2
 800643e:	b29b      	uxth	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	bf0c      	ite	eq
 8006444:	2301      	moveq	r3, #1
 8006446:	2300      	movne	r3, #0
 8006448:	b2db      	uxtb	r3, r3
 800644a:	461a      	mov	r2, r3
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	429a      	cmp	r2, r3
 8006450:	d093      	beq.n	800637a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800646a:	e071      	b.n	8006550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800647a:	d123      	bne.n	80064c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800648a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006494:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2220      	movs	r2, #32
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b0:	f043 0204 	orr.w	r2, r3, #4
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e067      	b.n	8006594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ca:	d041      	beq.n	8006550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064cc:	f7fe fcd4 	bl	8004e78 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d302      	bcc.n	80064e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d136      	bne.n	8006550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	0c1b      	lsrs	r3, r3, #16
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d10c      	bne.n	8006506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	43da      	mvns	r2, r3
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	4013      	ands	r3, r2
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	bf14      	ite	ne
 80064fe:	2301      	movne	r3, #1
 8006500:	2300      	moveq	r3, #0
 8006502:	b2db      	uxtb	r3, r3
 8006504:	e00b      	b.n	800651e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	43da      	mvns	r2, r3
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	4013      	ands	r3, r2
 8006512:	b29b      	uxth	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	bf14      	ite	ne
 8006518:	2301      	movne	r3, #1
 800651a:	2300      	moveq	r3, #0
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d016      	beq.n	8006550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2220      	movs	r2, #32
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653c:	f043 0220 	orr.w	r2, r3, #32
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e021      	b.n	8006594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	0c1b      	lsrs	r3, r3, #16
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b01      	cmp	r3, #1
 8006558:	d10c      	bne.n	8006574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	43da      	mvns	r2, r3
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	4013      	ands	r3, r2
 8006566:	b29b      	uxth	r3, r3
 8006568:	2b00      	cmp	r3, #0
 800656a:	bf14      	ite	ne
 800656c:	2301      	movne	r3, #1
 800656e:	2300      	moveq	r3, #0
 8006570:	b2db      	uxtb	r3, r3
 8006572:	e00b      	b.n	800658c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	43da      	mvns	r2, r3
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4013      	ands	r3, r2
 8006580:	b29b      	uxth	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	bf14      	ite	ne
 8006586:	2301      	movne	r3, #1
 8006588:	2300      	moveq	r3, #0
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	f47f af6d 	bne.w	800646c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065a8:	e034      	b.n	8006614 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 f8e3 	bl	8006776 <I2C_IsAcknowledgeFailed>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e034      	b.n	8006624 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c0:	d028      	beq.n	8006614 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065c2:	f7fe fc59 	bl	8004e78 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d302      	bcc.n	80065d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d11d      	bne.n	8006614 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065e2:	2b80      	cmp	r3, #128	@ 0x80
 80065e4:	d016      	beq.n	8006614 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006600:	f043 0220 	orr.w	r2, r3, #32
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e007      	b.n	8006624 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800661e:	2b80      	cmp	r3, #128	@ 0x80
 8006620:	d1c3      	bne.n	80065aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006638:	e034      	b.n	80066a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 f89b 	bl	8006776 <I2C_IsAcknowledgeFailed>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e034      	b.n	80066b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006650:	d028      	beq.n	80066a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006652:	f7fe fc11 	bl	8004e78 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	429a      	cmp	r2, r3
 8006660:	d302      	bcc.n	8006668 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d11d      	bne.n	80066a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	f003 0304 	and.w	r3, r3, #4
 8006672:	2b04      	cmp	r3, #4
 8006674:	d016      	beq.n	80066a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006690:	f043 0220 	orr.w	r2, r3, #32
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e007      	b.n	80066b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	f003 0304 	and.w	r3, r3, #4
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d1c3      	bne.n	800663a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066c8:	e049      	b.n	800675e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	f003 0310 	and.w	r3, r3, #16
 80066d4:	2b10      	cmp	r3, #16
 80066d6:	d119      	bne.n	800670c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f06f 0210 	mvn.w	r2, #16
 80066e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e030      	b.n	800676e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800670c:	f7fe fbb4 	bl	8004e78 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	429a      	cmp	r2, r3
 800671a:	d302      	bcc.n	8006722 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d11d      	bne.n	800675e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800672c:	2b40      	cmp	r3, #64	@ 0x40
 800672e:	d016      	beq.n	800675e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2220      	movs	r2, #32
 800673a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800674a:	f043 0220 	orr.w	r2, r3, #32
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e007      	b.n	800676e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006768:	2b40      	cmp	r3, #64	@ 0x40
 800676a:	d1ae      	bne.n	80066ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800678c:	d11b      	bne.n	80067c6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006796:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2220      	movs	r2, #32
 80067a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b2:	f043 0204 	orr.w	r2, r3, #4
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e000      	b.n	80067c8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b20      	cmp	r3, #32
 80067e8:	d129      	bne.n	800683e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2224      	movs	r2, #36	@ 0x24
 80067ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0201 	bic.w	r2, r2, #1
 8006800:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0210 	bic.w	r2, r2, #16
 8006810:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	430a      	orrs	r2, r1
 8006820:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f042 0201 	orr.w	r2, r2, #1
 8006830:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2220      	movs	r2, #32
 8006836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	e000      	b.n	8006840 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800683e:	2302      	movs	r3, #2
  }
}
 8006840:	4618      	mov	r0, r3
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b20      	cmp	r3, #32
 8006864:	d12a      	bne.n	80068bc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2224      	movs	r2, #36	@ 0x24
 800686a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0201 	bic.w	r2, r2, #1
 800687c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006884:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006886:	89fb      	ldrh	r3, [r7, #14]
 8006888:	f023 030f 	bic.w	r3, r3, #15
 800688c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	b29a      	uxth	r2, r3
 8006892:	89fb      	ldrh	r3, [r7, #14]
 8006894:	4313      	orrs	r3, r2
 8006896:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	89fa      	ldrh	r2, [r7, #14]
 800689e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0201 	orr.w	r2, r2, #1
 80068ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	e000      	b.n	80068be <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80068bc:	2302      	movs	r3, #2
  }
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
	...

080068cc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e0bf      	b.n	8006a5e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d106      	bne.n	80068f8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fd fcb2 	bl	800425c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699a      	ldr	r2, [r3, #24]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800690e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6999      	ldr	r1, [r3, #24]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006924:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6899      	ldr	r1, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	4b4a      	ldr	r3, [pc, #296]	@ (8006a68 <HAL_LTDC_Init+0x19c>)
 8006940:	400b      	ands	r3, r1
 8006942:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	041b      	lsls	r3, r3, #16
 800694a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6899      	ldr	r1, [r3, #8]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699a      	ldr	r2, [r3, #24]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	431a      	orrs	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68d9      	ldr	r1, [r3, #12]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	4b3e      	ldr	r3, [pc, #248]	@ (8006a68 <HAL_LTDC_Init+0x19c>)
 800696e:	400b      	ands	r3, r1
 8006970:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	041b      	lsls	r3, r3, #16
 8006978:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68d9      	ldr	r1, [r3, #12]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1a      	ldr	r2, [r3, #32]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6919      	ldr	r1, [r3, #16]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	4b33      	ldr	r3, [pc, #204]	@ (8006a68 <HAL_LTDC_Init+0x19c>)
 800699c:	400b      	ands	r3, r1
 800699e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a4:	041b      	lsls	r3, r3, #16
 80069a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6919      	ldr	r1, [r3, #16]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	431a      	orrs	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6959      	ldr	r1, [r3, #20]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	4b27      	ldr	r3, [pc, #156]	@ (8006a68 <HAL_LTDC_Init+0x19c>)
 80069ca:	400b      	ands	r3, r1
 80069cc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d2:	041b      	lsls	r3, r3, #16
 80069d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6959      	ldr	r1, [r3, #20]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80069f2:	021b      	lsls	r3, r3, #8
 80069f4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80069fc:	041b      	lsls	r3, r3, #16
 80069fe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006a22:	431a      	orrs	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0206 	orr.w	r2, r2, #6
 8006a3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	699a      	ldr	r2, [r3, #24]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f042 0201 	orr.w	r2, r2, #1
 8006a4a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	f000f800 	.word	0xf000f800

08006a6c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006a6c:	b5b0      	push	{r4, r5, r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d101      	bne.n	8006a86 <HAL_LTDC_ConfigLayer+0x1a>
 8006a82:	2302      	movs	r3, #2
 8006a84:	e02c      	b.n	8006ae0 <HAL_LTDC_ConfigLayer+0x74>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2202      	movs	r2, #2
 8006a92:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2134      	movs	r1, #52	@ 0x34
 8006a9c:	fb01 f303 	mul.w	r3, r1, r3
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	4614      	mov	r4, r2
 8006aaa:	461d      	mov	r5, r3
 8006aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	68b9      	ldr	r1, [r7, #8]
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 f811 	bl	8006ae8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2201      	movs	r2, #1
 8006acc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bdb0      	pop	{r4, r5, r7, pc}

08006ae8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b089      	sub	sp, #36	@ 0x24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	0c1b      	lsrs	r3, r3, #16
 8006b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b04:	4413      	add	r3, r2
 8006b06:	041b      	lsls	r3, r3, #16
 8006b08:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	01db      	lsls	r3, r3, #7
 8006b14:	4413      	add	r3, r2
 8006b16:	3384      	adds	r3, #132	@ 0x84
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	6812      	ldr	r2, [r2, #0]
 8006b1e:	4611      	mov	r1, r2
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	01d2      	lsls	r2, r2, #7
 8006b24:	440a      	add	r2, r1
 8006b26:	3284      	adds	r2, #132	@ 0x84
 8006b28:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006b2c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	0c1b      	lsrs	r3, r3, #16
 8006b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006b3e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006b40:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4619      	mov	r1, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	01db      	lsls	r3, r3, #7
 8006b4c:	440b      	add	r3, r1
 8006b4e:	3384      	adds	r3, #132	@ 0x84
 8006b50:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006b56:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b66:	4413      	add	r3, r2
 8006b68:	041b      	lsls	r3, r3, #16
 8006b6a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	461a      	mov	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	01db      	lsls	r3, r3, #7
 8006b76:	4413      	add	r3, r2
 8006b78:	3384      	adds	r3, #132	@ 0x84
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	6812      	ldr	r2, [r2, #0]
 8006b80:	4611      	mov	r1, r2
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	01d2      	lsls	r2, r2, #7
 8006b86:	440a      	add	r2, r1
 8006b88:	3284      	adds	r2, #132	@ 0x84
 8006b8a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006b8e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b9e:	4413      	add	r3, r2
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	01db      	lsls	r3, r3, #7
 8006bac:	440b      	add	r3, r1
 8006bae:	3384      	adds	r3, #132	@ 0x84
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	01db      	lsls	r3, r3, #7
 8006bc2:	4413      	add	r3, r2
 8006bc4:	3384      	adds	r3, #132	@ 0x84
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	6812      	ldr	r2, [r2, #0]
 8006bcc:	4611      	mov	r1, r2
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	01d2      	lsls	r2, r2, #7
 8006bd2:	440a      	add	r2, r1
 8006bd4:	3284      	adds	r2, #132	@ 0x84
 8006bd6:	f023 0307 	bic.w	r3, r3, #7
 8006bda:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	461a      	mov	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	01db      	lsls	r3, r3, #7
 8006be6:	4413      	add	r3, r2
 8006be8:	3384      	adds	r3, #132	@ 0x84
 8006bea:	461a      	mov	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006bf8:	021b      	lsls	r3, r3, #8
 8006bfa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006c02:	041b      	lsls	r3, r3, #16
 8006c04:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	061b      	lsls	r3, r3, #24
 8006c0c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	01db      	lsls	r3, r3, #7
 8006c18:	4413      	add	r3, r2
 8006c1a:	3384      	adds	r3, #132	@ 0x84
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	461a      	mov	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	01db      	lsls	r3, r3, #7
 8006c28:	4413      	add	r3, r2
 8006c2a:	3384      	adds	r3, #132	@ 0x84
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	2300      	movs	r3, #0
 8006c30:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006c38:	461a      	mov	r2, r3
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	431a      	orrs	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4619      	mov	r1, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	01db      	lsls	r3, r3, #7
 8006c4c:	440b      	add	r3, r1
 8006c4e:	3384      	adds	r3, #132	@ 0x84
 8006c50:	4619      	mov	r1, r3
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	01db      	lsls	r3, r3, #7
 8006c62:	4413      	add	r3, r2
 8006c64:	3384      	adds	r3, #132	@ 0x84
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	6812      	ldr	r2, [r2, #0]
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	01d2      	lsls	r2, r2, #7
 8006c72:	440a      	add	r2, r1
 8006c74:	3284      	adds	r2, #132	@ 0x84
 8006c76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006c7a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	461a      	mov	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	01db      	lsls	r3, r3, #7
 8006c86:	4413      	add	r3, r2
 8006c88:	3384      	adds	r3, #132	@ 0x84
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	01db      	lsls	r3, r3, #7
 8006c9c:	4413      	add	r3, r2
 8006c9e:	3384      	adds	r3, #132	@ 0x84
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	6812      	ldr	r2, [r2, #0]
 8006ca6:	4611      	mov	r1, r2
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	01d2      	lsls	r2, r2, #7
 8006cac:	440a      	add	r2, r1
 8006cae:	3284      	adds	r2, #132	@ 0x84
 8006cb0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006cb4:	f023 0307 	bic.w	r3, r3, #7
 8006cb8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	69da      	ldr	r2, [r3, #28]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	68f9      	ldr	r1, [r7, #12]
 8006cc4:	6809      	ldr	r1, [r1, #0]
 8006cc6:	4608      	mov	r0, r1
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	01c9      	lsls	r1, r1, #7
 8006ccc:	4401      	add	r1, r0
 8006cce:	3184      	adds	r1, #132	@ 0x84
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	01db      	lsls	r3, r3, #7
 8006cde:	4413      	add	r3, r2
 8006ce0:	3384      	adds	r3, #132	@ 0x84
 8006ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	01db      	lsls	r3, r3, #7
 8006cee:	4413      	add	r3, r2
 8006cf0:	3384      	adds	r3, #132	@ 0x84
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	01db      	lsls	r3, r3, #7
 8006d02:	4413      	add	r3, r2
 8006d04:	3384      	adds	r3, #132	@ 0x84
 8006d06:	461a      	mov	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d102      	bne.n	8006d1c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006d16:	2304      	movs	r3, #4
 8006d18:	61fb      	str	r3, [r7, #28]
 8006d1a:	e01b      	b.n	8006d54 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d102      	bne.n	8006d2a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006d24:	2303      	movs	r3, #3
 8006d26:	61fb      	str	r3, [r7, #28]
 8006d28:	e014      	b.n	8006d54 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	d00b      	beq.n	8006d4a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d007      	beq.n	8006d4a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d003      	beq.n	8006d4a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006d46:	2b07      	cmp	r3, #7
 8006d48:	d102      	bne.n	8006d50 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	61fb      	str	r3, [r7, #28]
 8006d4e:	e001      	b.n	8006d54 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006d50:	2301      	movs	r3, #1
 8006d52:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	01db      	lsls	r3, r3, #7
 8006d5e:	4413      	add	r3, r2
 8006d60:	3384      	adds	r3, #132	@ 0x84
 8006d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	6812      	ldr	r2, [r2, #0]
 8006d68:	4611      	mov	r1, r2
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	01d2      	lsls	r2, r2, #7
 8006d6e:	440a      	add	r2, r1
 8006d70:	3284      	adds	r2, #132	@ 0x84
 8006d72:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006d76:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d7c:	69fa      	ldr	r2, [r7, #28]
 8006d7e:	fb02 f303 	mul.w	r3, r2, r3
 8006d82:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	6859      	ldr	r1, [r3, #4]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	1acb      	subs	r3, r1, r3
 8006d8e:	69f9      	ldr	r1, [r7, #28]
 8006d90:	fb01 f303 	mul.w	r3, r1, r3
 8006d94:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006d96:	68f9      	ldr	r1, [r7, #12]
 8006d98:	6809      	ldr	r1, [r1, #0]
 8006d9a:	4608      	mov	r0, r1
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	01c9      	lsls	r1, r1, #7
 8006da0:	4401      	add	r1, r0
 8006da2:	3184      	adds	r1, #132	@ 0x84
 8006da4:	4313      	orrs	r3, r2
 8006da6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	461a      	mov	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	01db      	lsls	r3, r3, #7
 8006db2:	4413      	add	r3, r2
 8006db4:	3384      	adds	r3, #132	@ 0x84
 8006db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	6812      	ldr	r2, [r2, #0]
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	01d2      	lsls	r2, r2, #7
 8006dc2:	440a      	add	r2, r1
 8006dc4:	3284      	adds	r2, #132	@ 0x84
 8006dc6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006dca:	f023 0307 	bic.w	r3, r3, #7
 8006dce:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	01db      	lsls	r3, r3, #7
 8006dda:	4413      	add	r3, r2
 8006ddc:	3384      	adds	r3, #132	@ 0x84
 8006dde:	461a      	mov	r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	01db      	lsls	r3, r3, #7
 8006df0:	4413      	add	r3, r2
 8006df2:	3384      	adds	r3, #132	@ 0x84
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	6812      	ldr	r2, [r2, #0]
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	01d2      	lsls	r2, r2, #7
 8006e00:	440a      	add	r2, r1
 8006e02:	3284      	adds	r2, #132	@ 0x84
 8006e04:	f043 0301 	orr.w	r3, r3, #1
 8006e08:	6013      	str	r3, [r2, #0]
}
 8006e0a:	bf00      	nop
 8006e0c:	3724      	adds	r7, #36	@ 0x24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
	...

08006e18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e267      	b.n	80072fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d075      	beq.n	8006f22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006e36:	4b88      	ldr	r3, [pc, #544]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f003 030c 	and.w	r3, r3, #12
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d00c      	beq.n	8006e5c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e42:	4b85      	ldr	r3, [pc, #532]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006e4a:	2b08      	cmp	r3, #8
 8006e4c:	d112      	bne.n	8006e74 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e4e:	4b82      	ldr	r3, [pc, #520]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e5a:	d10b      	bne.n	8006e74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e5c:	4b7e      	ldr	r3, [pc, #504]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d05b      	beq.n	8006f20 <HAL_RCC_OscConfig+0x108>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d157      	bne.n	8006f20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e242      	b.n	80072fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e7c:	d106      	bne.n	8006e8c <HAL_RCC_OscConfig+0x74>
 8006e7e:	4b76      	ldr	r3, [pc, #472]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a75      	ldr	r2, [pc, #468]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e88:	6013      	str	r3, [r2, #0]
 8006e8a:	e01d      	b.n	8006ec8 <HAL_RCC_OscConfig+0xb0>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e94:	d10c      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x98>
 8006e96:	4b70      	ldr	r3, [pc, #448]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a6f      	ldr	r2, [pc, #444]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006e9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ea0:	6013      	str	r3, [r2, #0]
 8006ea2:	4b6d      	ldr	r3, [pc, #436]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a6c      	ldr	r2, [pc, #432]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	e00b      	b.n	8006ec8 <HAL_RCC_OscConfig+0xb0>
 8006eb0:	4b69      	ldr	r3, [pc, #420]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a68      	ldr	r2, [pc, #416]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006eb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006eba:	6013      	str	r3, [r2, #0]
 8006ebc:	4b66      	ldr	r3, [pc, #408]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a65      	ldr	r2, [pc, #404]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006ec2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d013      	beq.n	8006ef8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ed0:	f7fd ffd2 	bl	8004e78 <HAL_GetTick>
 8006ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ed6:	e008      	b.n	8006eea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ed8:	f7fd ffce 	bl	8004e78 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	2b64      	cmp	r3, #100	@ 0x64
 8006ee4:	d901      	bls.n	8006eea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e207      	b.n	80072fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eea:	4b5b      	ldr	r3, [pc, #364]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d0f0      	beq.n	8006ed8 <HAL_RCC_OscConfig+0xc0>
 8006ef6:	e014      	b.n	8006f22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ef8:	f7fd ffbe 	bl	8004e78 <HAL_GetTick>
 8006efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006efe:	e008      	b.n	8006f12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f00:	f7fd ffba 	bl	8004e78 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	2b64      	cmp	r3, #100	@ 0x64
 8006f0c:	d901      	bls.n	8006f12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e1f3      	b.n	80072fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f12:	4b51      	ldr	r3, [pc, #324]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1f0      	bne.n	8006f00 <HAL_RCC_OscConfig+0xe8>
 8006f1e:	e000      	b.n	8006f22 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0302 	and.w	r3, r3, #2
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d063      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006f2e:	4b4a      	ldr	r3, [pc, #296]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f003 030c 	and.w	r3, r3, #12
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00b      	beq.n	8006f52 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f3a:	4b47      	ldr	r3, [pc, #284]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006f42:	2b08      	cmp	r3, #8
 8006f44:	d11c      	bne.n	8006f80 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f46:	4b44      	ldr	r3, [pc, #272]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d116      	bne.n	8006f80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f52:	4b41      	ldr	r3, [pc, #260]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d005      	beq.n	8006f6a <HAL_RCC_OscConfig+0x152>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d001      	beq.n	8006f6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e1c7      	b.n	80072fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f6a:	4b3b      	ldr	r3, [pc, #236]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	00db      	lsls	r3, r3, #3
 8006f78:	4937      	ldr	r1, [pc, #220]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f7e:	e03a      	b.n	8006ff6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d020      	beq.n	8006fca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f88:	4b34      	ldr	r3, [pc, #208]	@ (800705c <HAL_RCC_OscConfig+0x244>)
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f8e:	f7fd ff73 	bl	8004e78 <HAL_GetTick>
 8006f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f94:	e008      	b.n	8006fa8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f96:	f7fd ff6f 	bl	8004e78 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d901      	bls.n	8006fa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e1a8      	b.n	80072fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0302 	and.w	r3, r3, #2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d0f0      	beq.n	8006f96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fb4:	4b28      	ldr	r3, [pc, #160]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	00db      	lsls	r3, r3, #3
 8006fc2:	4925      	ldr	r1, [pc, #148]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	600b      	str	r3, [r1, #0]
 8006fc8:	e015      	b.n	8006ff6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fca:	4b24      	ldr	r3, [pc, #144]	@ (800705c <HAL_RCC_OscConfig+0x244>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd0:	f7fd ff52 	bl	8004e78 <HAL_GetTick>
 8006fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fd6:	e008      	b.n	8006fea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fd8:	f7fd ff4e 	bl	8004e78 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d901      	bls.n	8006fea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e187      	b.n	80072fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fea:	4b1b      	ldr	r3, [pc, #108]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1f0      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0308 	and.w	r3, r3, #8
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d036      	beq.n	8007070 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d016      	beq.n	8007038 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800700a:	4b15      	ldr	r3, [pc, #84]	@ (8007060 <HAL_RCC_OscConfig+0x248>)
 800700c:	2201      	movs	r2, #1
 800700e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007010:	f7fd ff32 	bl	8004e78 <HAL_GetTick>
 8007014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007016:	e008      	b.n	800702a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007018:	f7fd ff2e 	bl	8004e78 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b02      	cmp	r3, #2
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e167      	b.n	80072fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800702a:	4b0b      	ldr	r3, [pc, #44]	@ (8007058 <HAL_RCC_OscConfig+0x240>)
 800702c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0f0      	beq.n	8007018 <HAL_RCC_OscConfig+0x200>
 8007036:	e01b      	b.n	8007070 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007038:	4b09      	ldr	r3, [pc, #36]	@ (8007060 <HAL_RCC_OscConfig+0x248>)
 800703a:	2200      	movs	r2, #0
 800703c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800703e:	f7fd ff1b 	bl	8004e78 <HAL_GetTick>
 8007042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007044:	e00e      	b.n	8007064 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007046:	f7fd ff17 	bl	8004e78 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b02      	cmp	r3, #2
 8007052:	d907      	bls.n	8007064 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e150      	b.n	80072fa <HAL_RCC_OscConfig+0x4e2>
 8007058:	40023800 	.word	0x40023800
 800705c:	42470000 	.word	0x42470000
 8007060:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007064:	4b88      	ldr	r3, [pc, #544]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 8007066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1ea      	bne.n	8007046 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 8097 	beq.w	80071ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800707e:	2300      	movs	r3, #0
 8007080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007082:	4b81      	ldr	r3, [pc, #516]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 8007084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10f      	bne.n	80070ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800708e:	2300      	movs	r3, #0
 8007090:	60bb      	str	r3, [r7, #8]
 8007092:	4b7d      	ldr	r3, [pc, #500]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 8007094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007096:	4a7c      	ldr	r2, [pc, #496]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 8007098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800709c:	6413      	str	r3, [r2, #64]	@ 0x40
 800709e:	4b7a      	ldr	r3, [pc, #488]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 80070a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070a6:	60bb      	str	r3, [r7, #8]
 80070a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070aa:	2301      	movs	r3, #1
 80070ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070ae:	4b77      	ldr	r3, [pc, #476]	@ (800728c <HAL_RCC_OscConfig+0x474>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d118      	bne.n	80070ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070ba:	4b74      	ldr	r3, [pc, #464]	@ (800728c <HAL_RCC_OscConfig+0x474>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a73      	ldr	r2, [pc, #460]	@ (800728c <HAL_RCC_OscConfig+0x474>)
 80070c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070c6:	f7fd fed7 	bl	8004e78 <HAL_GetTick>
 80070ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070cc:	e008      	b.n	80070e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070ce:	f7fd fed3 	bl	8004e78 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d901      	bls.n	80070e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e10c      	b.n	80072fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070e0:	4b6a      	ldr	r3, [pc, #424]	@ (800728c <HAL_RCC_OscConfig+0x474>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d0f0      	beq.n	80070ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d106      	bne.n	8007102 <HAL_RCC_OscConfig+0x2ea>
 80070f4:	4b64      	ldr	r3, [pc, #400]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 80070f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070f8:	4a63      	ldr	r2, [pc, #396]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 80070fa:	f043 0301 	orr.w	r3, r3, #1
 80070fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8007100:	e01c      	b.n	800713c <HAL_RCC_OscConfig+0x324>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	2b05      	cmp	r3, #5
 8007108:	d10c      	bne.n	8007124 <HAL_RCC_OscConfig+0x30c>
 800710a:	4b5f      	ldr	r3, [pc, #380]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 800710c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800710e:	4a5e      	ldr	r2, [pc, #376]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 8007110:	f043 0304 	orr.w	r3, r3, #4
 8007114:	6713      	str	r3, [r2, #112]	@ 0x70
 8007116:	4b5c      	ldr	r3, [pc, #368]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 8007118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800711a:	4a5b      	ldr	r2, [pc, #364]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 800711c:	f043 0301 	orr.w	r3, r3, #1
 8007120:	6713      	str	r3, [r2, #112]	@ 0x70
 8007122:	e00b      	b.n	800713c <HAL_RCC_OscConfig+0x324>
 8007124:	4b58      	ldr	r3, [pc, #352]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 8007126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007128:	4a57      	ldr	r2, [pc, #348]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 800712a:	f023 0301 	bic.w	r3, r3, #1
 800712e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007130:	4b55      	ldr	r3, [pc, #340]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 8007132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007134:	4a54      	ldr	r2, [pc, #336]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 8007136:	f023 0304 	bic.w	r3, r3, #4
 800713a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d015      	beq.n	8007170 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007144:	f7fd fe98 	bl	8004e78 <HAL_GetTick>
 8007148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800714a:	e00a      	b.n	8007162 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800714c:	f7fd fe94 	bl	8004e78 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800715a:	4293      	cmp	r3, r2
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e0cb      	b.n	80072fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007162:	4b49      	ldr	r3, [pc, #292]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 8007164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007166:	f003 0302 	and.w	r3, r3, #2
 800716a:	2b00      	cmp	r3, #0
 800716c:	d0ee      	beq.n	800714c <HAL_RCC_OscConfig+0x334>
 800716e:	e014      	b.n	800719a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007170:	f7fd fe82 	bl	8004e78 <HAL_GetTick>
 8007174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007176:	e00a      	b.n	800718e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007178:	f7fd fe7e 	bl	8004e78 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007186:	4293      	cmp	r3, r2
 8007188:	d901      	bls.n	800718e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e0b5      	b.n	80072fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800718e:	4b3e      	ldr	r3, [pc, #248]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 8007190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1ee      	bne.n	8007178 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800719a:	7dfb      	ldrb	r3, [r7, #23]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d105      	bne.n	80071ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071a0:	4b39      	ldr	r3, [pc, #228]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 80071a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a4:	4a38      	ldr	r2, [pc, #224]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 80071a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 80a1 	beq.w	80072f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80071b6:	4b34      	ldr	r3, [pc, #208]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f003 030c 	and.w	r3, r3, #12
 80071be:	2b08      	cmp	r3, #8
 80071c0:	d05c      	beq.n	800727c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d141      	bne.n	800724e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ca:	4b31      	ldr	r3, [pc, #196]	@ (8007290 <HAL_RCC_OscConfig+0x478>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071d0:	f7fd fe52 	bl	8004e78 <HAL_GetTick>
 80071d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071d6:	e008      	b.n	80071ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071d8:	f7fd fe4e 	bl	8004e78 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d901      	bls.n	80071ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e087      	b.n	80072fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ea:	4b27      	ldr	r3, [pc, #156]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1f0      	bne.n	80071d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	69da      	ldr	r2, [r3, #28]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	431a      	orrs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007204:	019b      	lsls	r3, r3, #6
 8007206:	431a      	orrs	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800720c:	085b      	lsrs	r3, r3, #1
 800720e:	3b01      	subs	r3, #1
 8007210:	041b      	lsls	r3, r3, #16
 8007212:	431a      	orrs	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007218:	061b      	lsls	r3, r3, #24
 800721a:	491b      	ldr	r1, [pc, #108]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 800721c:	4313      	orrs	r3, r2
 800721e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007220:	4b1b      	ldr	r3, [pc, #108]	@ (8007290 <HAL_RCC_OscConfig+0x478>)
 8007222:	2201      	movs	r2, #1
 8007224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007226:	f7fd fe27 	bl	8004e78 <HAL_GetTick>
 800722a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800722c:	e008      	b.n	8007240 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800722e:	f7fd fe23 	bl	8004e78 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	2b02      	cmp	r3, #2
 800723a:	d901      	bls.n	8007240 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e05c      	b.n	80072fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007240:	4b11      	ldr	r3, [pc, #68]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d0f0      	beq.n	800722e <HAL_RCC_OscConfig+0x416>
 800724c:	e054      	b.n	80072f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800724e:	4b10      	ldr	r3, [pc, #64]	@ (8007290 <HAL_RCC_OscConfig+0x478>)
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007254:	f7fd fe10 	bl	8004e78 <HAL_GetTick>
 8007258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800725a:	e008      	b.n	800726e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800725c:	f7fd fe0c 	bl	8004e78 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d901      	bls.n	800726e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e045      	b.n	80072fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800726e:	4b06      	ldr	r3, [pc, #24]	@ (8007288 <HAL_RCC_OscConfig+0x470>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1f0      	bne.n	800725c <HAL_RCC_OscConfig+0x444>
 800727a:	e03d      	b.n	80072f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d107      	bne.n	8007294 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e038      	b.n	80072fa <HAL_RCC_OscConfig+0x4e2>
 8007288:	40023800 	.word	0x40023800
 800728c:	40007000 	.word	0x40007000
 8007290:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007294:	4b1b      	ldr	r3, [pc, #108]	@ (8007304 <HAL_RCC_OscConfig+0x4ec>)
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d028      	beq.n	80072f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d121      	bne.n	80072f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d11a      	bne.n	80072f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80072c4:	4013      	ands	r3, r2
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80072ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d111      	bne.n	80072f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072da:	085b      	lsrs	r3, r3, #1
 80072dc:	3b01      	subs	r3, #1
 80072de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d107      	bne.n	80072f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d001      	beq.n	80072f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e000      	b.n	80072fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	40023800 	.word	0x40023800

08007308 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d101      	bne.n	800731c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e0cc      	b.n	80074b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800731c:	4b68      	ldr	r3, [pc, #416]	@ (80074c0 <HAL_RCC_ClockConfig+0x1b8>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 030f 	and.w	r3, r3, #15
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	429a      	cmp	r2, r3
 8007328:	d90c      	bls.n	8007344 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800732a:	4b65      	ldr	r3, [pc, #404]	@ (80074c0 <HAL_RCC_ClockConfig+0x1b8>)
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	b2d2      	uxtb	r2, r2
 8007330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007332:	4b63      	ldr	r3, [pc, #396]	@ (80074c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 030f 	and.w	r3, r3, #15
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	429a      	cmp	r2, r3
 800733e:	d001      	beq.n	8007344 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e0b8      	b.n	80074b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b00      	cmp	r3, #0
 800734e:	d020      	beq.n	8007392 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0304 	and.w	r3, r3, #4
 8007358:	2b00      	cmp	r3, #0
 800735a:	d005      	beq.n	8007368 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800735c:	4b59      	ldr	r3, [pc, #356]	@ (80074c4 <HAL_RCC_ClockConfig+0x1bc>)
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	4a58      	ldr	r2, [pc, #352]	@ (80074c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007362:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007366:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0308 	and.w	r3, r3, #8
 8007370:	2b00      	cmp	r3, #0
 8007372:	d005      	beq.n	8007380 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007374:	4b53      	ldr	r3, [pc, #332]	@ (80074c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	4a52      	ldr	r2, [pc, #328]	@ (80074c4 <HAL_RCC_ClockConfig+0x1bc>)
 800737a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800737e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007380:	4b50      	ldr	r3, [pc, #320]	@ (80074c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	494d      	ldr	r1, [pc, #308]	@ (80074c4 <HAL_RCC_ClockConfig+0x1bc>)
 800738e:	4313      	orrs	r3, r2
 8007390:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b00      	cmp	r3, #0
 800739c:	d044      	beq.n	8007428 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d107      	bne.n	80073b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073a6:	4b47      	ldr	r3, [pc, #284]	@ (80074c4 <HAL_RCC_ClockConfig+0x1bc>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d119      	bne.n	80073e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e07f      	b.n	80074b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d003      	beq.n	80073c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d107      	bne.n	80073d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073c6:	4b3f      	ldr	r3, [pc, #252]	@ (80074c4 <HAL_RCC_ClockConfig+0x1bc>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d109      	bne.n	80073e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e06f      	b.n	80074b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073d6:	4b3b      	ldr	r3, [pc, #236]	@ (80074c4 <HAL_RCC_ClockConfig+0x1bc>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e067      	b.n	80074b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073e6:	4b37      	ldr	r3, [pc, #220]	@ (80074c4 <HAL_RCC_ClockConfig+0x1bc>)
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f023 0203 	bic.w	r2, r3, #3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	4934      	ldr	r1, [pc, #208]	@ (80074c4 <HAL_RCC_ClockConfig+0x1bc>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80073f8:	f7fd fd3e 	bl	8004e78 <HAL_GetTick>
 80073fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073fe:	e00a      	b.n	8007416 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007400:	f7fd fd3a 	bl	8004e78 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800740e:	4293      	cmp	r3, r2
 8007410:	d901      	bls.n	8007416 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e04f      	b.n	80074b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007416:	4b2b      	ldr	r3, [pc, #172]	@ (80074c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f003 020c 	and.w	r2, r3, #12
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	429a      	cmp	r2, r3
 8007426:	d1eb      	bne.n	8007400 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007428:	4b25      	ldr	r3, [pc, #148]	@ (80074c0 <HAL_RCC_ClockConfig+0x1b8>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 030f 	and.w	r3, r3, #15
 8007430:	683a      	ldr	r2, [r7, #0]
 8007432:	429a      	cmp	r2, r3
 8007434:	d20c      	bcs.n	8007450 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007436:	4b22      	ldr	r3, [pc, #136]	@ (80074c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800743e:	4b20      	ldr	r3, [pc, #128]	@ (80074c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 030f 	and.w	r3, r3, #15
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	429a      	cmp	r2, r3
 800744a:	d001      	beq.n	8007450 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e032      	b.n	80074b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0304 	and.w	r3, r3, #4
 8007458:	2b00      	cmp	r3, #0
 800745a:	d008      	beq.n	800746e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800745c:	4b19      	ldr	r3, [pc, #100]	@ (80074c4 <HAL_RCC_ClockConfig+0x1bc>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	4916      	ldr	r1, [pc, #88]	@ (80074c4 <HAL_RCC_ClockConfig+0x1bc>)
 800746a:	4313      	orrs	r3, r2
 800746c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0308 	and.w	r3, r3, #8
 8007476:	2b00      	cmp	r3, #0
 8007478:	d009      	beq.n	800748e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800747a:	4b12      	ldr	r3, [pc, #72]	@ (80074c4 <HAL_RCC_ClockConfig+0x1bc>)
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	490e      	ldr	r1, [pc, #56]	@ (80074c4 <HAL_RCC_ClockConfig+0x1bc>)
 800748a:	4313      	orrs	r3, r2
 800748c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800748e:	f000 f821 	bl	80074d4 <HAL_RCC_GetSysClockFreq>
 8007492:	4602      	mov	r2, r0
 8007494:	4b0b      	ldr	r3, [pc, #44]	@ (80074c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	091b      	lsrs	r3, r3, #4
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	490a      	ldr	r1, [pc, #40]	@ (80074c8 <HAL_RCC_ClockConfig+0x1c0>)
 80074a0:	5ccb      	ldrb	r3, [r1, r3]
 80074a2:	fa22 f303 	lsr.w	r3, r2, r3
 80074a6:	4a09      	ldr	r2, [pc, #36]	@ (80074cc <HAL_RCC_ClockConfig+0x1c4>)
 80074a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80074aa:	4b09      	ldr	r3, [pc, #36]	@ (80074d0 <HAL_RCC_ClockConfig+0x1c8>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fd fc9e 	bl	8004df0 <HAL_InitTick>

  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	40023c00 	.word	0x40023c00
 80074c4:	40023800 	.word	0x40023800
 80074c8:	0800a178 	.word	0x0800a178
 80074cc:	20000018 	.word	0x20000018
 80074d0:	2000001c 	.word	0x2000001c

080074d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074d8:	b094      	sub	sp, #80	@ 0x50
 80074da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80074e8:	2300      	movs	r3, #0
 80074ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074ec:	4b79      	ldr	r3, [pc, #484]	@ (80076d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f003 030c 	and.w	r3, r3, #12
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	d00d      	beq.n	8007514 <HAL_RCC_GetSysClockFreq+0x40>
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	f200 80e1 	bhi.w	80076c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d002      	beq.n	8007508 <HAL_RCC_GetSysClockFreq+0x34>
 8007502:	2b04      	cmp	r3, #4
 8007504:	d003      	beq.n	800750e <HAL_RCC_GetSysClockFreq+0x3a>
 8007506:	e0db      	b.n	80076c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007508:	4b73      	ldr	r3, [pc, #460]	@ (80076d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800750a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800750c:	e0db      	b.n	80076c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800750e:	4b73      	ldr	r3, [pc, #460]	@ (80076dc <HAL_RCC_GetSysClockFreq+0x208>)
 8007510:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007512:	e0d8      	b.n	80076c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007514:	4b6f      	ldr	r3, [pc, #444]	@ (80076d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800751c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800751e:	4b6d      	ldr	r3, [pc, #436]	@ (80076d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d063      	beq.n	80075f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800752a:	4b6a      	ldr	r3, [pc, #424]	@ (80076d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	099b      	lsrs	r3, r3, #6
 8007530:	2200      	movs	r2, #0
 8007532:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007534:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800753c:	633b      	str	r3, [r7, #48]	@ 0x30
 800753e:	2300      	movs	r3, #0
 8007540:	637b      	str	r3, [r7, #52]	@ 0x34
 8007542:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007546:	4622      	mov	r2, r4
 8007548:	462b      	mov	r3, r5
 800754a:	f04f 0000 	mov.w	r0, #0
 800754e:	f04f 0100 	mov.w	r1, #0
 8007552:	0159      	lsls	r1, r3, #5
 8007554:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007558:	0150      	lsls	r0, r2, #5
 800755a:	4602      	mov	r2, r0
 800755c:	460b      	mov	r3, r1
 800755e:	4621      	mov	r1, r4
 8007560:	1a51      	subs	r1, r2, r1
 8007562:	6139      	str	r1, [r7, #16]
 8007564:	4629      	mov	r1, r5
 8007566:	eb63 0301 	sbc.w	r3, r3, r1
 800756a:	617b      	str	r3, [r7, #20]
 800756c:	f04f 0200 	mov.w	r2, #0
 8007570:	f04f 0300 	mov.w	r3, #0
 8007574:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007578:	4659      	mov	r1, fp
 800757a:	018b      	lsls	r3, r1, #6
 800757c:	4651      	mov	r1, sl
 800757e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007582:	4651      	mov	r1, sl
 8007584:	018a      	lsls	r2, r1, #6
 8007586:	4651      	mov	r1, sl
 8007588:	ebb2 0801 	subs.w	r8, r2, r1
 800758c:	4659      	mov	r1, fp
 800758e:	eb63 0901 	sbc.w	r9, r3, r1
 8007592:	f04f 0200 	mov.w	r2, #0
 8007596:	f04f 0300 	mov.w	r3, #0
 800759a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800759e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075a6:	4690      	mov	r8, r2
 80075a8:	4699      	mov	r9, r3
 80075aa:	4623      	mov	r3, r4
 80075ac:	eb18 0303 	adds.w	r3, r8, r3
 80075b0:	60bb      	str	r3, [r7, #8]
 80075b2:	462b      	mov	r3, r5
 80075b4:	eb49 0303 	adc.w	r3, r9, r3
 80075b8:	60fb      	str	r3, [r7, #12]
 80075ba:	f04f 0200 	mov.w	r2, #0
 80075be:	f04f 0300 	mov.w	r3, #0
 80075c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80075c6:	4629      	mov	r1, r5
 80075c8:	024b      	lsls	r3, r1, #9
 80075ca:	4621      	mov	r1, r4
 80075cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80075d0:	4621      	mov	r1, r4
 80075d2:	024a      	lsls	r2, r1, #9
 80075d4:	4610      	mov	r0, r2
 80075d6:	4619      	mov	r1, r3
 80075d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075da:	2200      	movs	r2, #0
 80075dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80075e4:	f7f8 fe02 	bl	80001ec <__aeabi_uldivmod>
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4613      	mov	r3, r2
 80075ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075f0:	e058      	b.n	80076a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075f2:	4b38      	ldr	r3, [pc, #224]	@ (80076d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	099b      	lsrs	r3, r3, #6
 80075f8:	2200      	movs	r2, #0
 80075fa:	4618      	mov	r0, r3
 80075fc:	4611      	mov	r1, r2
 80075fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007602:	623b      	str	r3, [r7, #32]
 8007604:	2300      	movs	r3, #0
 8007606:	627b      	str	r3, [r7, #36]	@ 0x24
 8007608:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800760c:	4642      	mov	r2, r8
 800760e:	464b      	mov	r3, r9
 8007610:	f04f 0000 	mov.w	r0, #0
 8007614:	f04f 0100 	mov.w	r1, #0
 8007618:	0159      	lsls	r1, r3, #5
 800761a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800761e:	0150      	lsls	r0, r2, #5
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	4641      	mov	r1, r8
 8007626:	ebb2 0a01 	subs.w	sl, r2, r1
 800762a:	4649      	mov	r1, r9
 800762c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007630:	f04f 0200 	mov.w	r2, #0
 8007634:	f04f 0300 	mov.w	r3, #0
 8007638:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800763c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007640:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007644:	ebb2 040a 	subs.w	r4, r2, sl
 8007648:	eb63 050b 	sbc.w	r5, r3, fp
 800764c:	f04f 0200 	mov.w	r2, #0
 8007650:	f04f 0300 	mov.w	r3, #0
 8007654:	00eb      	lsls	r3, r5, #3
 8007656:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800765a:	00e2      	lsls	r2, r4, #3
 800765c:	4614      	mov	r4, r2
 800765e:	461d      	mov	r5, r3
 8007660:	4643      	mov	r3, r8
 8007662:	18e3      	adds	r3, r4, r3
 8007664:	603b      	str	r3, [r7, #0]
 8007666:	464b      	mov	r3, r9
 8007668:	eb45 0303 	adc.w	r3, r5, r3
 800766c:	607b      	str	r3, [r7, #4]
 800766e:	f04f 0200 	mov.w	r2, #0
 8007672:	f04f 0300 	mov.w	r3, #0
 8007676:	e9d7 4500 	ldrd	r4, r5, [r7]
 800767a:	4629      	mov	r1, r5
 800767c:	028b      	lsls	r3, r1, #10
 800767e:	4621      	mov	r1, r4
 8007680:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007684:	4621      	mov	r1, r4
 8007686:	028a      	lsls	r2, r1, #10
 8007688:	4610      	mov	r0, r2
 800768a:	4619      	mov	r1, r3
 800768c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800768e:	2200      	movs	r2, #0
 8007690:	61bb      	str	r3, [r7, #24]
 8007692:	61fa      	str	r2, [r7, #28]
 8007694:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007698:	f7f8 fda8 	bl	80001ec <__aeabi_uldivmod>
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	4613      	mov	r3, r2
 80076a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80076a4:	4b0b      	ldr	r3, [pc, #44]	@ (80076d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	0c1b      	lsrs	r3, r3, #16
 80076aa:	f003 0303 	and.w	r3, r3, #3
 80076ae:	3301      	adds	r3, #1
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80076b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80076b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80076be:	e002      	b.n	80076c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076c0:	4b05      	ldr	r3, [pc, #20]	@ (80076d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80076c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80076c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3750      	adds	r7, #80	@ 0x50
 80076cc:	46bd      	mov	sp, r7
 80076ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076d2:	bf00      	nop
 80076d4:	40023800 	.word	0x40023800
 80076d8:	00f42400 	.word	0x00f42400
 80076dc:	007a1200 	.word	0x007a1200

080076e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076e0:	b480      	push	{r7}
 80076e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076e4:	4b03      	ldr	r3, [pc, #12]	@ (80076f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80076e6:	681b      	ldr	r3, [r3, #0]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	20000018 	.word	0x20000018

080076f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80076fc:	f7ff fff0 	bl	80076e0 <HAL_RCC_GetHCLKFreq>
 8007700:	4602      	mov	r2, r0
 8007702:	4b05      	ldr	r3, [pc, #20]	@ (8007718 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	0a9b      	lsrs	r3, r3, #10
 8007708:	f003 0307 	and.w	r3, r3, #7
 800770c:	4903      	ldr	r1, [pc, #12]	@ (800771c <HAL_RCC_GetPCLK1Freq+0x24>)
 800770e:	5ccb      	ldrb	r3, [r1, r3]
 8007710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007714:	4618      	mov	r0, r3
 8007716:	bd80      	pop	{r7, pc}
 8007718:	40023800 	.word	0x40023800
 800771c:	0800a188 	.word	0x0800a188

08007720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10b      	bne.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007744:	2b00      	cmp	r3, #0
 8007746:	d105      	bne.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007750:	2b00      	cmp	r3, #0
 8007752:	d075      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007754:	4b91      	ldr	r3, [pc, #580]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007756:	2200      	movs	r2, #0
 8007758:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800775a:	f7fd fb8d 	bl	8004e78 <HAL_GetTick>
 800775e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007760:	e008      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007762:	f7fd fb89 	bl	8004e78 <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	2b02      	cmp	r3, #2
 800776e:	d901      	bls.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e189      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007774:	4b8a      	ldr	r3, [pc, #552]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1f0      	bne.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	2b00      	cmp	r3, #0
 800778a:	d009      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	019a      	lsls	r2, r3, #6
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	071b      	lsls	r3, r3, #28
 8007798:	4981      	ldr	r1, [pc, #516]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800779a:	4313      	orrs	r3, r2
 800779c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d01f      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80077ac:	4b7c      	ldr	r3, [pc, #496]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077b2:	0f1b      	lsrs	r3, r3, #28
 80077b4:	f003 0307 	and.w	r3, r3, #7
 80077b8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	019a      	lsls	r2, r3, #6
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	061b      	lsls	r3, r3, #24
 80077c6:	431a      	orrs	r2, r3
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	071b      	lsls	r3, r3, #28
 80077cc:	4974      	ldr	r1, [pc, #464]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80077d4:	4b72      	ldr	r3, [pc, #456]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077da:	f023 021f 	bic.w	r2, r3, #31
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	69db      	ldr	r3, [r3, #28]
 80077e2:	3b01      	subs	r3, #1
 80077e4:	496e      	ldr	r1, [pc, #440]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00d      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	019a      	lsls	r2, r3, #6
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	061b      	lsls	r3, r3, #24
 8007804:	431a      	orrs	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	071b      	lsls	r3, r3, #28
 800780c:	4964      	ldr	r1, [pc, #400]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800780e:	4313      	orrs	r3, r2
 8007810:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007814:	4b61      	ldr	r3, [pc, #388]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007816:	2201      	movs	r2, #1
 8007818:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800781a:	f7fd fb2d 	bl	8004e78 <HAL_GetTick>
 800781e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007820:	e008      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007822:	f7fd fb29 	bl	8004e78 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	2b02      	cmp	r3, #2
 800782e:	d901      	bls.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e129      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007834:	4b5a      	ldr	r3, [pc, #360]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d0f0      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0304 	and.w	r3, r3, #4
 8007848:	2b00      	cmp	r3, #0
 800784a:	d105      	bne.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007854:	2b00      	cmp	r3, #0
 8007856:	d079      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007858:	4b52      	ldr	r3, [pc, #328]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800785a:	2200      	movs	r2, #0
 800785c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800785e:	f7fd fb0b 	bl	8004e78 <HAL_GetTick>
 8007862:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007864:	e008      	b.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007866:	f7fd fb07 	bl	8004e78 <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	2b02      	cmp	r3, #2
 8007872:	d901      	bls.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e107      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007878:	4b49      	ldr	r3, [pc, #292]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007880:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007884:	d0ef      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0304 	and.w	r3, r3, #4
 800788e:	2b00      	cmp	r3, #0
 8007890:	d020      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007892:	4b43      	ldr	r3, [pc, #268]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007898:	0f1b      	lsrs	r3, r3, #28
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	019a      	lsls	r2, r3, #6
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	061b      	lsls	r3, r3, #24
 80078ac:	431a      	orrs	r2, r3
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	071b      	lsls	r3, r3, #28
 80078b2:	493b      	ldr	r1, [pc, #236]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078b4:	4313      	orrs	r3, r2
 80078b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80078ba:	4b39      	ldr	r3, [pc, #228]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078c0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a1b      	ldr	r3, [r3, #32]
 80078c8:	3b01      	subs	r3, #1
 80078ca:	021b      	lsls	r3, r3, #8
 80078cc:	4934      	ldr	r1, [pc, #208]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0308 	and.w	r3, r3, #8
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d01e      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80078e0:	4b2f      	ldr	r3, [pc, #188]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078e6:	0e1b      	lsrs	r3, r3, #24
 80078e8:	f003 030f 	and.w	r3, r3, #15
 80078ec:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	019a      	lsls	r2, r3, #6
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	061b      	lsls	r3, r3, #24
 80078f8:	431a      	orrs	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	071b      	lsls	r3, r3, #28
 8007900:	4927      	ldr	r1, [pc, #156]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007902:	4313      	orrs	r3, r2
 8007904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007908:	4b25      	ldr	r3, [pc, #148]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800790a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800790e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007916:	4922      	ldr	r1, [pc, #136]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007918:	4313      	orrs	r3, r2
 800791a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800791e:	4b21      	ldr	r3, [pc, #132]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007920:	2201      	movs	r2, #1
 8007922:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007924:	f7fd faa8 	bl	8004e78 <HAL_GetTick>
 8007928:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800792a:	e008      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800792c:	f7fd faa4 	bl	8004e78 <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	2b02      	cmp	r3, #2
 8007938:	d901      	bls.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	e0a4      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800793e:	4b18      	ldr	r3, [pc, #96]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007946:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800794a:	d1ef      	bne.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 0320 	and.w	r3, r3, #32
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 808b 	beq.w	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]
 800795e:	4b10      	ldr	r3, [pc, #64]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007962:	4a0f      	ldr	r2, [pc, #60]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007968:	6413      	str	r3, [r2, #64]	@ 0x40
 800796a:	4b0d      	ldr	r3, [pc, #52]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800796c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007976:	4b0c      	ldr	r3, [pc, #48]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a0b      	ldr	r2, [pc, #44]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800797c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007980:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007982:	f7fd fa79 	bl	8004e78 <HAL_GetTick>
 8007986:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007988:	e010      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800798a:	f7fd fa75 	bl	8004e78 <HAL_GetTick>
 800798e:	4602      	mov	r2, r0
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	2b02      	cmp	r3, #2
 8007996:	d909      	bls.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007998:	2303      	movs	r3, #3
 800799a:	e075      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800799c:	42470068 	.word	0x42470068
 80079a0:	40023800 	.word	0x40023800
 80079a4:	42470070 	.word	0x42470070
 80079a8:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80079ac:	4b38      	ldr	r3, [pc, #224]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0e8      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80079b8:	4b36      	ldr	r3, [pc, #216]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80079ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079c0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d02f      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d028      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079d6:	4b2f      	ldr	r3, [pc, #188]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80079d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80079e0:	4b2d      	ldr	r3, [pc, #180]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80079e2:	2201      	movs	r2, #1
 80079e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80079e6:	4b2c      	ldr	r3, [pc, #176]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80079ec:	4a29      	ldr	r2, [pc, #164]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80079f2:	4b28      	ldr	r3, [pc, #160]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80079f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d114      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80079fe:	f7fd fa3b 	bl	8004e78 <HAL_GetTick>
 8007a02:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a04:	e00a      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a06:	f7fd fa37 	bl	8004e78 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d901      	bls.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e035      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a20:	f003 0302 	and.w	r3, r3, #2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d0ee      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a34:	d10d      	bne.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007a36:	4b17      	ldr	r3, [pc, #92]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a42:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007a46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a4a:	4912      	ldr	r1, [pc, #72]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	608b      	str	r3, [r1, #8]
 8007a50:	e005      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007a52:	4b10      	ldr	r3, [pc, #64]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	4a0f      	ldr	r2, [pc, #60]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a58:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007a5c:	6093      	str	r3, [r2, #8]
 8007a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a60:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a6a:	490a      	ldr	r1, [pc, #40]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0310 	and.w	r3, r3, #16
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d004      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8007a82:	4b06      	ldr	r3, [pc, #24]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007a84:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	40007000 	.word	0x40007000
 8007a94:	40023800 	.word	0x40023800
 8007a98:	42470e40 	.word	0x42470e40
 8007a9c:	424711e0 	.word	0x424711e0

08007aa0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e01c      	b.n	8007aec <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	795b      	ldrb	r3, [r3, #5]
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d105      	bne.n	8007ac8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7fc fcf2 	bl	80044ac <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2202      	movs	r2, #2
 8007acc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f042 0204 	orr.w	r2, r2, #4
 8007adc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007afe:	2300      	movs	r3, #0
 8007b00:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	791b      	ldrb	r3, [r3, #4]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d101      	bne.n	8007b0e <HAL_RNG_GenerateRandomNumber+0x1a>
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	e044      	b.n	8007b98 <HAL_RNG_GenerateRandomNumber+0xa4>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	795b      	ldrb	r3, [r3, #5]
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d133      	bne.n	8007b86 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2202      	movs	r2, #2
 8007b22:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b24:	f7fd f9a8 	bl	8004e78 <HAL_GetTick>
 8007b28:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007b2a:	e018      	b.n	8007b5e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007b2c:	f7fd f9a4 	bl	8004e78 <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d911      	bls.n	8007b5e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d00a      	beq.n	8007b5e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2202      	movs	r2, #2
 8007b52:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e01c      	b.n	8007b98 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d1df      	bne.n	8007b2c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689a      	ldr	r2, [r3, #8]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	715a      	strb	r2, [r3, #5]
 8007b84:	e004      	b.n	8007b90 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2204      	movs	r2, #4
 8007b8a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	711a      	strb	r2, [r3, #4]

  return status;
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e07b      	b.n	8007caa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d108      	bne.n	8007bcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bc2:	d009      	beq.n	8007bd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	61da      	str	r2, [r3, #28]
 8007bca:	e005      	b.n	8007bd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d106      	bne.n	8007bf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7fc fc7c 	bl	80044f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007c20:	431a      	orrs	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	f003 0302 	and.w	r3, r3, #2
 8007c34:	431a      	orrs	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	69db      	ldr	r3, [r3, #28]
 8007c4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c52:	431a      	orrs	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a1b      	ldr	r3, [r3, #32]
 8007c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c5c:	ea42 0103 	orr.w	r1, r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c64:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	0c1b      	lsrs	r3, r3, #16
 8007c76:	f003 0104 	and.w	r1, r3, #4
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7e:	f003 0210 	and.w	r2, r3, #16
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	69da      	ldr	r2, [r3, #28]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b082      	sub	sp, #8
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e01a      	b.n	8007cfa <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cda:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7fc fc4f 	bl	8004580 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b088      	sub	sp, #32
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	60b9      	str	r1, [r7, #8]
 8007d0c:	603b      	str	r3, [r7, #0]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d12:	f7fd f8b1 	bl	8004e78 <HAL_GetTick>
 8007d16:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007d18:	88fb      	ldrh	r3, [r7, #6]
 8007d1a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d001      	beq.n	8007d2c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e12a      	b.n	8007f82 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <HAL_SPI_Transmit+0x36>
 8007d32:	88fb      	ldrh	r3, [r7, #6]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e122      	b.n	8007f82 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d101      	bne.n	8007d4a <HAL_SPI_Transmit+0x48>
 8007d46:	2302      	movs	r3, #2
 8007d48:	e11b      	b.n	8007f82 <HAL_SPI_Transmit+0x280>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2203      	movs	r2, #3
 8007d56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	88fa      	ldrh	r2, [r7, #6]
 8007d6a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	88fa      	ldrh	r2, [r7, #6]
 8007d70:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d98:	d10f      	bne.n	8007dba <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007da8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007db8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc4:	2b40      	cmp	r3, #64	@ 0x40
 8007dc6:	d007      	beq.n	8007dd8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007dd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007de0:	d152      	bne.n	8007e88 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d002      	beq.n	8007df0 <HAL_SPI_Transmit+0xee>
 8007dea:	8b7b      	ldrh	r3, [r7, #26]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d145      	bne.n	8007e7c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df4:	881a      	ldrh	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e00:	1c9a      	adds	r2, r3, #2
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007e14:	e032      	b.n	8007e7c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f003 0302 	and.w	r3, r3, #2
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d112      	bne.n	8007e4a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e28:	881a      	ldrh	r2, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e34:	1c9a      	adds	r2, r3, #2
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	3b01      	subs	r3, #1
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007e48:	e018      	b.n	8007e7c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e4a:	f7fd f815 	bl	8004e78 <HAL_GetTick>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d803      	bhi.n	8007e62 <HAL_SPI_Transmit+0x160>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e60:	d102      	bne.n	8007e68 <HAL_SPI_Transmit+0x166>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d109      	bne.n	8007e7c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e082      	b.n	8007f82 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1c7      	bne.n	8007e16 <HAL_SPI_Transmit+0x114>
 8007e86:	e053      	b.n	8007f30 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d002      	beq.n	8007e96 <HAL_SPI_Transmit+0x194>
 8007e90:	8b7b      	ldrh	r3, [r7, #26]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d147      	bne.n	8007f26 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	330c      	adds	r3, #12
 8007ea0:	7812      	ldrb	r2, [r2, #0]
 8007ea2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007ebc:	e033      	b.n	8007f26 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f003 0302 	and.w	r3, r3, #2
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d113      	bne.n	8007ef4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	330c      	adds	r3, #12
 8007ed6:	7812      	ldrb	r2, [r2, #0]
 8007ed8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	3b01      	subs	r3, #1
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007ef2:	e018      	b.n	8007f26 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ef4:	f7fc ffc0 	bl	8004e78 <HAL_GetTick>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d803      	bhi.n	8007f0c <HAL_SPI_Transmit+0x20a>
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f0a:	d102      	bne.n	8007f12 <HAL_SPI_Transmit+0x210>
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d109      	bne.n	8007f26 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e02d      	b.n	8007f82 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1c6      	bne.n	8007ebe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f30:	69fa      	ldr	r2, [r7, #28]
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f000 f8bf 	bl	80080b8 <SPI_EndRxTxTransaction>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d002      	beq.n	8007f46 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2220      	movs	r2, #32
 8007f44:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10a      	bne.n	8007f64 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f4e:	2300      	movs	r3, #0
 8007f50:	617b      	str	r3, [r7, #20]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	617b      	str	r3, [r7, #20]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	617b      	str	r3, [r7, #20]
 8007f62:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e000      	b.n	8007f82 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007f80:	2300      	movs	r3, #0
  }
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3720      	adds	r7, #32
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b083      	sub	sp, #12
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f98:	b2db      	uxtb	r3, r3
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
	...

08007fa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	603b      	str	r3, [r7, #0]
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007fb8:	f7fc ff5e 	bl	8004e78 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc0:	1a9b      	subs	r3, r3, r2
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007fc8:	f7fc ff56 	bl	8004e78 <HAL_GetTick>
 8007fcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007fce:	4b39      	ldr	r3, [pc, #228]	@ (80080b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	015b      	lsls	r3, r3, #5
 8007fd4:	0d1b      	lsrs	r3, r3, #20
 8007fd6:	69fa      	ldr	r2, [r7, #28]
 8007fd8:	fb02 f303 	mul.w	r3, r2, r3
 8007fdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fde:	e054      	b.n	800808a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe6:	d050      	beq.n	800808a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fe8:	f7fc ff46 	bl	8004e78 <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	69fa      	ldr	r2, [r7, #28]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d902      	bls.n	8007ffe <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d13d      	bne.n	800807a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	685a      	ldr	r2, [r3, #4]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800800c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008016:	d111      	bne.n	800803c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008020:	d004      	beq.n	800802c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800802a:	d107      	bne.n	800803c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800803a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008044:	d10f      	bne.n	8008066 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008064:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e017      	b.n	80080aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008080:	2300      	movs	r3, #0
 8008082:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	3b01      	subs	r3, #1
 8008088:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689a      	ldr	r2, [r3, #8]
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	4013      	ands	r3, r2
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	429a      	cmp	r2, r3
 8008098:	bf0c      	ite	eq
 800809a:	2301      	moveq	r3, #1
 800809c:	2300      	movne	r3, #0
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	461a      	mov	r2, r3
 80080a2:	79fb      	ldrb	r3, [r7, #7]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d19b      	bne.n	8007fe0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3720      	adds	r7, #32
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	20000018 	.word	0x20000018

080080b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b088      	sub	sp, #32
 80080bc:	af02      	add	r7, sp, #8
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2201      	movs	r2, #1
 80080cc:	2102      	movs	r1, #2
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f7ff ff6a 	bl	8007fa8 <SPI_WaitFlagStateUntilTimeout>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d007      	beq.n	80080ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080de:	f043 0220 	orr.w	r2, r3, #32
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e032      	b.n	8008150 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80080ea:	4b1b      	ldr	r3, [pc, #108]	@ (8008158 <SPI_EndRxTxTransaction+0xa0>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1b      	ldr	r2, [pc, #108]	@ (800815c <SPI_EndRxTxTransaction+0xa4>)
 80080f0:	fba2 2303 	umull	r2, r3, r2, r3
 80080f4:	0d5b      	lsrs	r3, r3, #21
 80080f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80080fa:	fb02 f303 	mul.w	r3, r2, r3
 80080fe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008108:	d112      	bne.n	8008130 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	2200      	movs	r2, #0
 8008112:	2180      	movs	r1, #128	@ 0x80
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f7ff ff47 	bl	8007fa8 <SPI_WaitFlagStateUntilTimeout>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d016      	beq.n	800814e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008124:	f043 0220 	orr.w	r2, r3, #32
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	e00f      	b.n	8008150 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00a      	beq.n	800814c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	3b01      	subs	r3, #1
 800813a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008146:	2b80      	cmp	r3, #128	@ 0x80
 8008148:	d0f2      	beq.n	8008130 <SPI_EndRxTxTransaction+0x78>
 800814a:	e000      	b.n	800814e <SPI_EndRxTxTransaction+0x96>
        break;
 800814c:	bf00      	nop
  }

  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3718      	adds	r7, #24
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	20000018 	.word	0x20000018
 800815c:	165e9f81 	.word	0x165e9f81

08008160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e041      	b.n	80081f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d106      	bne.n	800818c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f7fc fa18 	bl	80045bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2202      	movs	r2, #2
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	3304      	adds	r3, #4
 800819c:	4619      	mov	r1, r3
 800819e:	4610      	mov	r0, r2
 80081a0:	f000 f89e 	bl	80082e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b01      	cmp	r3, #1
 8008212:	d001      	beq.n	8008218 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e04e      	b.n	80082b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2202      	movs	r2, #2
 800821c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f042 0201 	orr.w	r2, r2, #1
 800822e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a23      	ldr	r2, [pc, #140]	@ (80082c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d022      	beq.n	8008280 <HAL_TIM_Base_Start_IT+0x80>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008242:	d01d      	beq.n	8008280 <HAL_TIM_Base_Start_IT+0x80>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a1f      	ldr	r2, [pc, #124]	@ (80082c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d018      	beq.n	8008280 <HAL_TIM_Base_Start_IT+0x80>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a1e      	ldr	r2, [pc, #120]	@ (80082cc <HAL_TIM_Base_Start_IT+0xcc>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d013      	beq.n	8008280 <HAL_TIM_Base_Start_IT+0x80>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a1c      	ldr	r2, [pc, #112]	@ (80082d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d00e      	beq.n	8008280 <HAL_TIM_Base_Start_IT+0x80>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a1b      	ldr	r2, [pc, #108]	@ (80082d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d009      	beq.n	8008280 <HAL_TIM_Base_Start_IT+0x80>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a19      	ldr	r2, [pc, #100]	@ (80082d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d004      	beq.n	8008280 <HAL_TIM_Base_Start_IT+0x80>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a18      	ldr	r2, [pc, #96]	@ (80082dc <HAL_TIM_Base_Start_IT+0xdc>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d111      	bne.n	80082a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f003 0307 	and.w	r3, r3, #7
 800828a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2b06      	cmp	r3, #6
 8008290:	d010      	beq.n	80082b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f042 0201 	orr.w	r2, r2, #1
 80082a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082a2:	e007      	b.n	80082b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f042 0201 	orr.w	r2, r2, #1
 80082b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	40010000 	.word	0x40010000
 80082c8:	40000400 	.word	0x40000400
 80082cc:	40000800 	.word	0x40000800
 80082d0:	40000c00 	.word	0x40000c00
 80082d4:	40010400 	.word	0x40010400
 80082d8:	40014000 	.word	0x40014000
 80082dc:	40001800 	.word	0x40001800

080082e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a46      	ldr	r2, [pc, #280]	@ (800840c <TIM_Base_SetConfig+0x12c>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d013      	beq.n	8008320 <TIM_Base_SetConfig+0x40>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082fe:	d00f      	beq.n	8008320 <TIM_Base_SetConfig+0x40>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a43      	ldr	r2, [pc, #268]	@ (8008410 <TIM_Base_SetConfig+0x130>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d00b      	beq.n	8008320 <TIM_Base_SetConfig+0x40>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a42      	ldr	r2, [pc, #264]	@ (8008414 <TIM_Base_SetConfig+0x134>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d007      	beq.n	8008320 <TIM_Base_SetConfig+0x40>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a41      	ldr	r2, [pc, #260]	@ (8008418 <TIM_Base_SetConfig+0x138>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d003      	beq.n	8008320 <TIM_Base_SetConfig+0x40>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a40      	ldr	r2, [pc, #256]	@ (800841c <TIM_Base_SetConfig+0x13c>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d108      	bne.n	8008332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	4313      	orrs	r3, r2
 8008330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a35      	ldr	r2, [pc, #212]	@ (800840c <TIM_Base_SetConfig+0x12c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d02b      	beq.n	8008392 <TIM_Base_SetConfig+0xb2>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008340:	d027      	beq.n	8008392 <TIM_Base_SetConfig+0xb2>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a32      	ldr	r2, [pc, #200]	@ (8008410 <TIM_Base_SetConfig+0x130>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d023      	beq.n	8008392 <TIM_Base_SetConfig+0xb2>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a31      	ldr	r2, [pc, #196]	@ (8008414 <TIM_Base_SetConfig+0x134>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d01f      	beq.n	8008392 <TIM_Base_SetConfig+0xb2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a30      	ldr	r2, [pc, #192]	@ (8008418 <TIM_Base_SetConfig+0x138>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d01b      	beq.n	8008392 <TIM_Base_SetConfig+0xb2>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a2f      	ldr	r2, [pc, #188]	@ (800841c <TIM_Base_SetConfig+0x13c>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d017      	beq.n	8008392 <TIM_Base_SetConfig+0xb2>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a2e      	ldr	r2, [pc, #184]	@ (8008420 <TIM_Base_SetConfig+0x140>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d013      	beq.n	8008392 <TIM_Base_SetConfig+0xb2>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a2d      	ldr	r2, [pc, #180]	@ (8008424 <TIM_Base_SetConfig+0x144>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d00f      	beq.n	8008392 <TIM_Base_SetConfig+0xb2>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a2c      	ldr	r2, [pc, #176]	@ (8008428 <TIM_Base_SetConfig+0x148>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d00b      	beq.n	8008392 <TIM_Base_SetConfig+0xb2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a2b      	ldr	r2, [pc, #172]	@ (800842c <TIM_Base_SetConfig+0x14c>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d007      	beq.n	8008392 <TIM_Base_SetConfig+0xb2>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a2a      	ldr	r2, [pc, #168]	@ (8008430 <TIM_Base_SetConfig+0x150>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d003      	beq.n	8008392 <TIM_Base_SetConfig+0xb2>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a29      	ldr	r2, [pc, #164]	@ (8008434 <TIM_Base_SetConfig+0x154>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d108      	bne.n	80083a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	689a      	ldr	r2, [r3, #8]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a10      	ldr	r2, [pc, #64]	@ (800840c <TIM_Base_SetConfig+0x12c>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d003      	beq.n	80083d8 <TIM_Base_SetConfig+0xf8>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a12      	ldr	r2, [pc, #72]	@ (800841c <TIM_Base_SetConfig+0x13c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d103      	bne.n	80083e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	691a      	ldr	r2, [r3, #16]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d105      	bne.n	80083fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	f023 0201 	bic.w	r2, r3, #1
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	611a      	str	r2, [r3, #16]
  }
}
 80083fe:	bf00      	nop
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	40010000 	.word	0x40010000
 8008410:	40000400 	.word	0x40000400
 8008414:	40000800 	.word	0x40000800
 8008418:	40000c00 	.word	0x40000c00
 800841c:	40010400 	.word	0x40010400
 8008420:	40014000 	.word	0x40014000
 8008424:	40014400 	.word	0x40014400
 8008428:	40014800 	.word	0x40014800
 800842c:	40001800 	.word	0x40001800
 8008430:	40001c00 	.word	0x40001c00
 8008434:	40002000 	.word	0x40002000

08008438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008448:	2b01      	cmp	r3, #1
 800844a:	d101      	bne.n	8008450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800844c:	2302      	movs	r3, #2
 800844e:	e05a      	b.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2202      	movs	r2, #2
 800845c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008476:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	4313      	orrs	r3, r2
 8008480:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a21      	ldr	r2, [pc, #132]	@ (8008514 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d022      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800849c:	d01d      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a1d      	ldr	r2, [pc, #116]	@ (8008518 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d018      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a1b      	ldr	r2, [pc, #108]	@ (800851c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d013      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a1a      	ldr	r2, [pc, #104]	@ (8008520 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d00e      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a18      	ldr	r2, [pc, #96]	@ (8008524 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d009      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a17      	ldr	r2, [pc, #92]	@ (8008528 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d004      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a15      	ldr	r2, [pc, #84]	@ (800852c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d10c      	bne.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	40010000 	.word	0x40010000
 8008518:	40000400 	.word	0x40000400
 800851c:	40000800 	.word	0x40000800
 8008520:	40000c00 	.word	0x40000c00
 8008524:	40010400 	.word	0x40010400
 8008528:	40014000 	.word	0x40014000
 800852c:	40001800 	.word	0x40001800

08008530 <memset>:
 8008530:	4402      	add	r2, r0
 8008532:	4603      	mov	r3, r0
 8008534:	4293      	cmp	r3, r2
 8008536:	d100      	bne.n	800853a <memset+0xa>
 8008538:	4770      	bx	lr
 800853a:	f803 1b01 	strb.w	r1, [r3], #1
 800853e:	e7f9      	b.n	8008534 <memset+0x4>

08008540 <__libc_init_array>:
 8008540:	b570      	push	{r4, r5, r6, lr}
 8008542:	4d0d      	ldr	r5, [pc, #52]	@ (8008578 <__libc_init_array+0x38>)
 8008544:	4c0d      	ldr	r4, [pc, #52]	@ (800857c <__libc_init_array+0x3c>)
 8008546:	1b64      	subs	r4, r4, r5
 8008548:	10a4      	asrs	r4, r4, #2
 800854a:	2600      	movs	r6, #0
 800854c:	42a6      	cmp	r6, r4
 800854e:	d109      	bne.n	8008564 <__libc_init_array+0x24>
 8008550:	4d0b      	ldr	r5, [pc, #44]	@ (8008580 <__libc_init_array+0x40>)
 8008552:	4c0c      	ldr	r4, [pc, #48]	@ (8008584 <__libc_init_array+0x44>)
 8008554:	f000 f826 	bl	80085a4 <_init>
 8008558:	1b64      	subs	r4, r4, r5
 800855a:	10a4      	asrs	r4, r4, #2
 800855c:	2600      	movs	r6, #0
 800855e:	42a6      	cmp	r6, r4
 8008560:	d105      	bne.n	800856e <__libc_init_array+0x2e>
 8008562:	bd70      	pop	{r4, r5, r6, pc}
 8008564:	f855 3b04 	ldr.w	r3, [r5], #4
 8008568:	4798      	blx	r3
 800856a:	3601      	adds	r6, #1
 800856c:	e7ee      	b.n	800854c <__libc_init_array+0xc>
 800856e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008572:	4798      	blx	r3
 8008574:	3601      	adds	r6, #1
 8008576:	e7f2      	b.n	800855e <__libc_init_array+0x1e>
 8008578:	0800a198 	.word	0x0800a198
 800857c:	0800a198 	.word	0x0800a198
 8008580:	0800a198 	.word	0x0800a198
 8008584:	0800a19c 	.word	0x0800a19c

08008588 <memcpy>:
 8008588:	440a      	add	r2, r1
 800858a:	4291      	cmp	r1, r2
 800858c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008590:	d100      	bne.n	8008594 <memcpy+0xc>
 8008592:	4770      	bx	lr
 8008594:	b510      	push	{r4, lr}
 8008596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800859a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800859e:	4291      	cmp	r1, r2
 80085a0:	d1f9      	bne.n	8008596 <memcpy+0xe>
 80085a2:	bd10      	pop	{r4, pc}

080085a4 <_init>:
 80085a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a6:	bf00      	nop
 80085a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085aa:	bc08      	pop	{r3}
 80085ac:	469e      	mov	lr, r3
 80085ae:	4770      	bx	lr

080085b0 <_fini>:
 80085b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b2:	bf00      	nop
 80085b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085b6:	bc08      	pop	{r3}
 80085b8:	469e      	mov	lr, r3
 80085ba:	4770      	bx	lr
