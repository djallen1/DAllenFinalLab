
DAllenFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000557c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bd4  08005728  08005728  00006728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072fc  080072fc  00009024  2**0
                  CONTENTS
  4 .ARM          00000008  080072fc  080072fc  000082fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007304  08007304  00009024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007304  08007304  00008304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007308  08007308  00008308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  0800730c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009024  2**0
                  CONTENTS
 10 .bss          00025db8  20000024  20000024  00009024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025ddc  20025ddc  00009024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013450  00000000  00000000  00009054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fd7  00000000  00000000  0001c4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b8  00000000  00000000  0001f480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f40  00000000  00000000  00020838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026f74  00000000  00000000  00021778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018f57  00000000  00000000  000486ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e29f2  00000000  00000000  00061643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00144035  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005334  00000000  00000000  00144078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001493ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005710 	.word	0x08005710

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08005710 	.word	0x08005710

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f002 fbbf 	bl	8002c62 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f001 f832 	bl	800154c <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 ffef 	bl	80014cc <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f001 f8f5 	bl	80016e0 <LCD_Clear>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}

080004fa <Application_game_inst>:
{
	//visualDemo();
}

void Application_game_inst(void)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	af00      	add	r7, sp, #0
	game_init();
 80004fe:	f001 f9c7 	bl	8001890 <game_init>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}

08000506 <map_draw>:
#include "BlockDriver.h"

static RNG_HandleTypeDef *hrng;

void map_draw()
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b088      	sub	sp, #32
 800050a:	af00      	add	r7, sp, #0
	//uint16_t y_len = LCD_PIXEL_HEIGHT;
	uint16_t x_len = LCD_PIXEL_WIDTH;
 800050c:	23f0      	movs	r3, #240	@ 0xf0
 800050e:	80fb      	strh	r3, [r7, #6]
	//edges of 5 pixels in width
	uint16_t x = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	80bb      	strh	r3, [r7, #4]

	//VERTICAL
	for(int i = 1; i<LCD_PIXEL_WIDTH; i+=BLOCK_WIDTH)
 8000514:	2301      	movs	r3, #1
 8000516:	61fb      	str	r3, [r7, #28]
 8000518:	e00d      	b.n	8000536 <map_draw+0x30>
	{
		LCD_Draw_Vertical_Line(EDGE_WIDTH+i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 800051a:	69fb      	ldr	r3, [r7, #28]
 800051c:	b29b      	uxth	r3, r3
 800051e:	3304      	adds	r3, #4
 8000520:	b298      	uxth	r0, r3
 8000522:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000526:	f240 1235 	movw	r2, #309	@ 0x135
 800052a:	210b      	movs	r1, #11
 800052c:	f001 f88a 	bl	8001644 <LCD_Draw_Vertical_Line>
	for(int i = 1; i<LCD_PIXEL_WIDTH; i+=BLOCK_WIDTH)
 8000530:	69fb      	ldr	r3, [r7, #28]
 8000532:	3317      	adds	r3, #23
 8000534:	61fb      	str	r3, [r7, #28]
 8000536:	69fb      	ldr	r3, [r7, #28]
 8000538:	2bef      	cmp	r3, #239	@ 0xef
 800053a:	ddee      	ble.n	800051a <map_draw+0x14>
	}
	for(int i = 1; i<=EDGE_WIDTH; i++)
 800053c:	2301      	movs	r3, #1
 800053e:	61bb      	str	r3, [r7, #24]
 8000540:	e00b      	b.n	800055a <map_draw+0x54>
	{
		LCD_Draw_Vertical_Line(i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 8000542:	69bb      	ldr	r3, [r7, #24]
 8000544:	b298      	uxth	r0, r3
 8000546:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800054a:	f240 1235 	movw	r2, #309	@ 0x135
 800054e:	210b      	movs	r1, #11
 8000550:	f001 f878 	bl	8001644 <LCD_Draw_Vertical_Line>
	for(int i = 1; i<=EDGE_WIDTH; i++)
 8000554:	69bb      	ldr	r3, [r7, #24]
 8000556:	3301      	adds	r3, #1
 8000558:	61bb      	str	r3, [r7, #24]
 800055a:	69bb      	ldr	r3, [r7, #24]
 800055c:	2b04      	cmp	r3, #4
 800055e:	ddf0      	ble.n	8000542 <map_draw+0x3c>
	}
	for(int i = LCD_PIXEL_WIDTH-EDGE_WIDTH; i<=LCD_PIXEL_WIDTH; i++)
 8000560:	23ec      	movs	r3, #236	@ 0xec
 8000562:	617b      	str	r3, [r7, #20]
 8000564:	e00b      	b.n	800057e <map_draw+0x78>
	{
		LCD_Draw_Vertical_Line(i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	b298      	uxth	r0, r3
 800056a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800056e:	f240 1235 	movw	r2, #309	@ 0x135
 8000572:	210b      	movs	r1, #11
 8000574:	f001 f866 	bl	8001644 <LCD_Draw_Vertical_Line>
	for(int i = LCD_PIXEL_WIDTH-EDGE_WIDTH; i<=LCD_PIXEL_WIDTH; i++)
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	3301      	adds	r3, #1
 800057c:	617b      	str	r3, [r7, #20]
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	2bf0      	cmp	r3, #240	@ 0xf0
 8000582:	ddf0      	ble.n	8000566 <map_draw+0x60>
	}

	//HORIZONTAL
	for(int i = 1; i<MAP_HEIGHT; i+=BLOCK_WIDTH)
 8000584:	2301      	movs	r3, #1
 8000586:	613b      	str	r3, [r7, #16]
 8000588:	e00c      	b.n	80005a4 <map_draw+0x9e>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+EDGE_WIDTH+i, x_len, LCD_COLOR_WHITE);
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	b29b      	uxth	r3, r3
 800058e:	330f      	adds	r3, #15
 8000590:	b299      	uxth	r1, r3
 8000592:	88fa      	ldrh	r2, [r7, #6]
 8000594:	88b8      	ldrh	r0, [r7, #4]
 8000596:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800059a:	f001 f87a 	bl	8001692 <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<MAP_HEIGHT; i+=BLOCK_WIDTH)
 800059e:	693b      	ldr	r3, [r7, #16]
 80005a0:	3317      	adds	r3, #23
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80005aa:	ddee      	ble.n	800058a <map_draw+0x84>
	}
	for(int i = 0; i<=EDGE_WIDTH; i++)
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	e00c      	b.n	80005cc <map_draw+0xc6>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+i, x_len, LCD_COLOR_WHITE);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	330b      	adds	r3, #11
 80005b8:	b299      	uxth	r1, r3
 80005ba:	88fa      	ldrh	r2, [r7, #6]
 80005bc:	88b8      	ldrh	r0, [r7, #4]
 80005be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005c2:	f001 f866 	bl	8001692 <LCD_Draw_Horizontal_Line>
	for(int i = 0; i<=EDGE_WIDTH; i++)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	3301      	adds	r3, #1
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	2b04      	cmp	r3, #4
 80005d0:	ddef      	ble.n	80005b2 <map_draw+0xac>
	}
	for(int i = MAP_HEIGHT-EDGE_WIDTH; i<=MAP_HEIGHT; i++)
 80005d2:	f240 1331 	movw	r3, #305	@ 0x131
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	e00c      	b.n	80005f4 <map_draw+0xee>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+i, x_len, LCD_COLOR_WHITE);
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	b29b      	uxth	r3, r3
 80005de:	330b      	adds	r3, #11
 80005e0:	b299      	uxth	r1, r3
 80005e2:	88fa      	ldrh	r2, [r7, #6]
 80005e4:	88b8      	ldrh	r0, [r7, #4]
 80005e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005ea:	f001 f852 	bl	8001692 <LCD_Draw_Horizontal_Line>
	for(int i = MAP_HEIGHT-EDGE_WIDTH; i<=MAP_HEIGHT; i++)
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	3301      	adds	r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 80005fa:	dbee      	blt.n	80005da <map_draw+0xd4>
	}
}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <start_screen>:

void start_screen()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
	//uint16_t play_x = 68; //to 172
	uint16_t play_y = 106; //to 184
 800060e:	236a      	movs	r3, #106	@ 0x6a
 8000610:	80fb      	strh	r3, [r7, #6]
	//uint16_t button_height = 48;
	uint16_t button_width = LCD_PIXEL_WIDTH/2;
 8000612:	2378      	movs	r3, #120	@ 0x78
 8000614:	80bb      	strh	r3, [r7, #4]

	for(int i = 1; i<button_width/2; i++)
 8000616:	2301      	movs	r3, #1
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	e014      	b.n	8000646 <start_screen+0x3e>
	{
		LCD_Draw_Horizontal_Line(120-i, play_y+i, 2*i, LCD_COLOR_WHITE);
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	b29b      	uxth	r3, r3
 8000620:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 8000624:	b298      	uxth	r0, r3
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	b29a      	uxth	r2, r3
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	4413      	add	r3, r2
 800062e:	b299      	uxth	r1, r3
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	b29b      	uxth	r3, r3
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	b29a      	uxth	r2, r3
 8000638:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800063c:	f001 f829 	bl	8001692 <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<button_width/2; i++)
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	3301      	adds	r3, #1
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	88bb      	ldrh	r3, [r7, #4]
 8000648:	085b      	lsrs	r3, r3, #1
 800064a:	b29b      	uxth	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	4293      	cmp	r3, r2
 8000652:	dbe3      	blt.n	800061c <start_screen+0x14>
	}
	for(int i = button_width/2; i>0; i--)
 8000654:	88bb      	ldrh	r3, [r7, #4]
 8000656:	085b      	lsrs	r3, r3, #1
 8000658:	b29b      	uxth	r3, r3
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	e020      	b.n	80006a0 <start_screen+0x98>
	{
		LCD_Draw_Horizontal_Line(i+button_width/2, play_y + i + (button_width/2) - 1, button_width-(2*i), LCD_COLOR_WHITE);
 800065e:	88bb      	ldrh	r3, [r7, #4]
 8000660:	085b      	lsrs	r3, r3, #1
 8000662:	b29a      	uxth	r2, r3
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	b29b      	uxth	r3, r3
 8000668:	4413      	add	r3, r2
 800066a:	b298      	uxth	r0, r3
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	b29a      	uxth	r2, r3
 8000670:	88fb      	ldrh	r3, [r7, #6]
 8000672:	4413      	add	r3, r2
 8000674:	b29a      	uxth	r2, r3
 8000676:	88bb      	ldrh	r3, [r7, #4]
 8000678:	085b      	lsrs	r3, r3, #1
 800067a:	b29b      	uxth	r3, r3
 800067c:	4413      	add	r3, r2
 800067e:	b29b      	uxth	r3, r3
 8000680:	3b01      	subs	r3, #1
 8000682:	b299      	uxth	r1, r3
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	b29b      	uxth	r3, r3
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	b29b      	uxth	r3, r3
 800068c:	88ba      	ldrh	r2, [r7, #4]
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	b29a      	uxth	r2, r3
 8000692:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000696:	f000 fffc 	bl	8001692 <LCD_Draw_Horizontal_Line>
	for(int i = button_width/2; i>0; i--)
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	3b01      	subs	r3, #1
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	dcdb      	bgt.n	800065e <start_screen+0x56>
	}
	for(int i = 1; i<button_width/2 -2; i++)
 80006a6:	2301      	movs	r3, #1
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e015      	b.n	80006d8 <start_screen+0xd0>
	{
		LCD_Draw_Horizontal_Line(120-i, play_y+i +2 , 2*i, LCD_COLOR_BLACK);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 80006b4:	b298      	uxth	r0, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	4413      	add	r3, r2
 80006be:	b29b      	uxth	r3, r3
 80006c0:	3302      	adds	r3, #2
 80006c2:	b299      	uxth	r1, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	2300      	movs	r3, #0
 80006ce:	f000 ffe0 	bl	8001692 <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<button_width/2 -2; i++)
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	88bb      	ldrh	r3, [r7, #4]
 80006da:	085b      	lsrs	r3, r3, #1
 80006dc:	b29b      	uxth	r3, r3
 80006de:	3b02      	subs	r3, #2
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	dbe2      	blt.n	80006ac <start_screen+0xa4>
	}
	for(int i = button_width/2 -2; i>0; i--)
 80006e6:	88bb      	ldrh	r3, [r7, #4]
 80006e8:	085b      	lsrs	r3, r3, #1
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	3b02      	subs	r3, #2
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	e023      	b.n	800073a <start_screen+0x132>
	{
		LCD_Draw_Horizontal_Line(i+button_width/2+1, play_y + i + (button_width/2) - 2, button_width-(2*i)-2, LCD_COLOR_BLACK);
 80006f2:	88bb      	ldrh	r3, [r7, #4]
 80006f4:	085b      	lsrs	r3, r3, #1
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	4413      	add	r3, r2
 80006fe:	b29b      	uxth	r3, r3
 8000700:	3301      	adds	r3, #1
 8000702:	b298      	uxth	r0, r3
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	b29a      	uxth	r2, r3
 8000708:	88fb      	ldrh	r3, [r7, #6]
 800070a:	4413      	add	r3, r2
 800070c:	b29a      	uxth	r2, r3
 800070e:	88bb      	ldrh	r3, [r7, #4]
 8000710:	085b      	lsrs	r3, r3, #1
 8000712:	b29b      	uxth	r3, r3
 8000714:	4413      	add	r3, r2
 8000716:	b29b      	uxth	r3, r3
 8000718:	3b02      	subs	r3, #2
 800071a:	b299      	uxth	r1, r3
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	b29b      	uxth	r3, r3
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	b29b      	uxth	r3, r3
 8000724:	88ba      	ldrh	r2, [r7, #4]
 8000726:	1ad3      	subs	r3, r2, r3
 8000728:	b29b      	uxth	r3, r3
 800072a:	3b02      	subs	r3, #2
 800072c:	b29a      	uxth	r2, r3
 800072e:	2300      	movs	r3, #0
 8000730:	f000 ffaf 	bl	8001692 <LCD_Draw_Horizontal_Line>
	for(int i = button_width/2 -2; i>0; i--)
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	3b01      	subs	r3, #1
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	2b00      	cmp	r3, #0
 800073e:	dcd8      	bgt.n	80006f2 <start_screen+0xea>
	}

	LCD_SetFont(&Font16x24);
 8000740:	4815      	ldr	r0, [pc, #84]	@ (8000798 <start_screen+0x190>)
 8000742:	f000 ffff 	bl	8001744 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_RED);
 8000746:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800074a:	f000 ffeb 	bl	8001724 <LCD_SetTextColor>
	LCD_DisplayChar(76, 154, 'P');
 800074e:	2250      	movs	r2, #80	@ 0x50
 8000750:	219a      	movs	r1, #154	@ 0x9a
 8000752:	204c      	movs	r0, #76	@ 0x4c
 8000754:	f001 f874 	bl	8001840 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000758:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 800075c:	f000 ffe2 	bl	8001724 <LCD_SetTextColor>
	LCD_DisplayChar(100, 154, 'L');
 8000760:	224c      	movs	r2, #76	@ 0x4c
 8000762:	219a      	movs	r1, #154	@ 0x9a
 8000764:	2064      	movs	r0, #100	@ 0x64
 8000766:	f001 f86b 	bl	8001840 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_BLUE2);
 800076a:	f240 501f 	movw	r0, #1311	@ 0x51f
 800076e:	f000 ffd9 	bl	8001724 <LCD_SetTextColor>
	LCD_DisplayChar(124, 154, 'A');
 8000772:	2241      	movs	r2, #65	@ 0x41
 8000774:	219a      	movs	r1, #154	@ 0x9a
 8000776:	207c      	movs	r0, #124	@ 0x7c
 8000778:	f001 f862 	bl	8001840 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_GREEN);
 800077c:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000780:	f000 ffd0 	bl	8001724 <LCD_SetTextColor>
	LCD_DisplayChar(148, 154, 'Y');
 8000784:	2259      	movs	r2, #89	@ 0x59
 8000786:	219a      	movs	r1, #154	@ 0x9a
 8000788:	2094      	movs	r0, #148	@ 0x94
 800078a:	f001 f859 	bl	8001840 <LCD_DisplayChar>
}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000004 	.word	0x20000004

0800079c <end_screen>:

void end_screen()
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLACK);
 80007a0:	2100      	movs	r1, #0
 80007a2:	2000      	movs	r0, #0
 80007a4:	f000 ff9c 	bl	80016e0 <LCD_Clear>
	LCD_SetFont(&Font16x24);
 80007a8:	4818      	ldr	r0, [pc, #96]	@ (800080c <end_screen+0x70>)
 80007aa:	f000 ffcb 	bl	8001744 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 80007ae:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80007b2:	f000 ffb7 	bl	8001724 <LCD_SetTextColor>
	LCD_DisplayChar(80, 100, 'G');
 80007b6:	2247      	movs	r2, #71	@ 0x47
 80007b8:	2164      	movs	r1, #100	@ 0x64
 80007ba:	2050      	movs	r0, #80	@ 0x50
 80007bc:	f001 f840 	bl	8001840 <LCD_DisplayChar>
	LCD_DisplayChar(102, 100, 'A');
 80007c0:	2241      	movs	r2, #65	@ 0x41
 80007c2:	2164      	movs	r1, #100	@ 0x64
 80007c4:	2066      	movs	r0, #102	@ 0x66
 80007c6:	f001 f83b 	bl	8001840 <LCD_DisplayChar>
	LCD_DisplayChar(122, 100, 'M');
 80007ca:	224d      	movs	r2, #77	@ 0x4d
 80007cc:	2164      	movs	r1, #100	@ 0x64
 80007ce:	207a      	movs	r0, #122	@ 0x7a
 80007d0:	f001 f836 	bl	8001840 <LCD_DisplayChar>
	LCD_DisplayChar(144, 100, 'E');
 80007d4:	2245      	movs	r2, #69	@ 0x45
 80007d6:	2164      	movs	r1, #100	@ 0x64
 80007d8:	2090      	movs	r0, #144	@ 0x90
 80007da:	f001 f831 	bl	8001840 <LCD_DisplayChar>
	LCD_DisplayChar(80, 130, 'O');
 80007de:	224f      	movs	r2, #79	@ 0x4f
 80007e0:	2182      	movs	r1, #130	@ 0x82
 80007e2:	2050      	movs	r0, #80	@ 0x50
 80007e4:	f001 f82c 	bl	8001840 <LCD_DisplayChar>
	LCD_DisplayChar(102, 130, 'V');
 80007e8:	2256      	movs	r2, #86	@ 0x56
 80007ea:	2182      	movs	r1, #130	@ 0x82
 80007ec:	2066      	movs	r0, #102	@ 0x66
 80007ee:	f001 f827 	bl	8001840 <LCD_DisplayChar>
	LCD_DisplayChar(122, 130, 'E');
 80007f2:	2245      	movs	r2, #69	@ 0x45
 80007f4:	2182      	movs	r1, #130	@ 0x82
 80007f6:	207a      	movs	r0, #122	@ 0x7a
 80007f8:	f001 f822 	bl	8001840 <LCD_DisplayChar>
	LCD_DisplayChar(144, 130, 'R');
 80007fc:	2252      	movs	r2, #82	@ 0x52
 80007fe:	2182      	movs	r1, #130	@ 0x82
 8000800:	2090      	movs	r0, #144	@ 0x90
 8000802:	f001 f81d 	bl	8001840 <LCD_DisplayChar>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000004 	.word	0x20000004

08000810 <disp_time>:

void disp_time(uint32_t time)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	uint32_t seconds = time / 1000;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a18      	ldr	r2, [pc, #96]	@ (800087c <disp_time+0x6c>)
 800081c:	fba2 2303 	umull	r2, r3, r2, r3
 8000820:	099b      	lsrs	r3, r3, #6
 8000822:	617b      	str	r3, [r7, #20]
	uint32_t min = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
	while(seconds > 60)
 8000828:	e005      	b.n	8000836 <disp_time+0x26>
	{
		seconds -= 60;
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	3b3c      	subs	r3, #60	@ 0x3c
 800082e:	617b      	str	r3, [r7, #20]
		min++;
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	3301      	adds	r3, #1
 8000834:	613b      	str	r3, [r7, #16]
	while(seconds > 60)
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	2b3c      	cmp	r3, #60	@ 0x3c
 800083a:	d8f6      	bhi.n	800082a <disp_time+0x1a>
	}
	char sec_char = (char)seconds;
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	73fb      	strb	r3, [r7, #15]
	char min_char = (char)min;
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	73bb      	strb	r3, [r7, #14]

	LCD_SetFont(&Font12x12);
 8000844:	480e      	ldr	r0, [pc, #56]	@ (8000880 <disp_time+0x70>)
 8000846:	f000 ff7d 	bl	8001744 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 800084a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800084e:	f000 ff69 	bl	8001724 <LCD_SetTextColor>
	LCD_DisplayChar(80, 160, min_char);
 8000852:	7bbb      	ldrb	r3, [r7, #14]
 8000854:	461a      	mov	r2, r3
 8000856:	21a0      	movs	r1, #160	@ 0xa0
 8000858:	2050      	movs	r0, #80	@ 0x50
 800085a:	f000 fff1 	bl	8001840 <LCD_DisplayChar>
	LCD_DisplayChar(120, 160, ':');
 800085e:	223a      	movs	r2, #58	@ 0x3a
 8000860:	21a0      	movs	r1, #160	@ 0xa0
 8000862:	2078      	movs	r0, #120	@ 0x78
 8000864:	f000 ffec 	bl	8001840 <LCD_DisplayChar>
	LCD_DisplayChar(125, 160, sec_char);
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	461a      	mov	r2, r3
 800086c:	21a0      	movs	r1, #160	@ 0xa0
 800086e:	207d      	movs	r0, #125	@ 0x7d
 8000870:	f000 ffe6 	bl	8001840 <LCD_DisplayChar>

}
 8000874:	bf00      	nop
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	10624dd3 	.word	0x10624dd3
 8000880:	2000000c 	.word	0x2000000c

08000884 <block_create>:
	*block = temp_tetromino;
	return temp_tetromino;
}

block_t block_create(uint8_t num)
{
 8000884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000886:	b0b3      	sub	sp, #204	@ 0xcc
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	70fb      	strb	r3, [r7, #3]
	volatile block_t block = {0};
 8000890:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000894:	2234      	movs	r2, #52	@ 0x34
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f004 feff 	bl	800569c <memset>
	//evaluate rng for color
	//set pos_x, pos_y
	//return the block

	//uint32_t rand = HAL_RNG_GetRandomNumber(hrng);
	uint32_t rand = num;
 800089e:	78fb      	ldrb	r3, [r7, #3]
 80008a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
	uint8_t name = rand & 0b111;
 80008a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
		block.name = name;
 80008ae:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80008b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	//uint32_t rando = HAL_RNG_GetRandomNumber(hrng);
	uint32_t rando = num;
 80008b6:	78fb      	ldrb	r3, [r7, #3]
 80008b8:	667b      	str	r3, [r7, #100]	@ 0x64
	uint8_t color = rando & 0b111;
 80008ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	//COLOR
	if(color == BLUE)
 80008c6:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d101      	bne.n	80008d2 <block_create+0x4e>
	{
		block.color = LCD_COLOR_BLUE;
 80008ce:	231f      	movs	r3, #31
 80008d0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == RED)
 80008d2:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d102      	bne.n	80008e0 <block_create+0x5c>
	{
		block.color = LCD_COLOR_RED;
 80008da:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80008de:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == MAGENTA)
 80008e0:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d102      	bne.n	80008ee <block_create+0x6a>
	{
		block.color = LCD_COLOR_MAGENTA;
 80008e8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80008ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == GREEN)
 80008ee:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80008f2:	2b03      	cmp	r3, #3
 80008f4:	d102      	bne.n	80008fc <block_create+0x78>
	{
		block.color = LCD_COLOR_GREEN;
 80008f6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80008fa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == CYAN)
 80008fc:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000900:	2b04      	cmp	r3, #4
 8000902:	d102      	bne.n	800090a <block_create+0x86>
	{
		block.color = LCD_COLOR_CYAN;
 8000904:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000908:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == YELLOW)
 800090a:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800090e:	2b05      	cmp	r3, #5
 8000910:	d102      	bne.n	8000918 <block_create+0x94>
	{
		block.color = LCD_COLOR_YELLOW;
 8000912:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000916:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == ORANGE)
 8000918:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800091c:	2b06      	cmp	r3, #6
 800091e:	d102      	bne.n	8000926 <block_create+0xa2>
	{
		block.color = LCD_COLOR_ORANGE;
 8000920:	f64f 33c1 	movw	r3, #64449	@ 0xfbc1
 8000924:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == PURPLE)
 8000926:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800092a:	2b07      	cmp	r3, #7
 800092c:	d102      	bne.n	8000934 <block_create+0xb0>
	{
		block.color = LCD_COLOR_PURPLE;
 800092e:	f647 0318 	movw	r3, #30744	@ 0x7818
 8000932:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	//COORDINATES
	for(int i = 0; i < 4; i++)
 8000934:	2300      	movs	r3, #0
 8000936:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800093a:	e017      	b.n	800096c <block_create+0xe8>
	{
		block.x[i] = BLOCK_START_X + i*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 800093c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000940:	b29b      	uxth	r3, r3
 8000942:	461a      	mov	r2, r3
 8000944:	0052      	lsls	r2, r2, #1
 8000946:	441a      	add	r2, r3
 8000948:	00d2      	lsls	r2, r2, #3
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	b29b      	uxth	r3, r3
 800094e:	334b      	adds	r3, #75	@ 0x4b
 8000950:	b29a      	uxth	r2, r3
 8000952:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000956:	3310      	adds	r3, #16
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	33c8      	adds	r3, #200	@ 0xc8
 800095c:	443b      	add	r3, r7
 800095e:	f823 2c98 	strh.w	r2, [r3, #-152]
	for(int i = 0; i < 4; i++)
 8000962:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000966:	3301      	adds	r3, #1
 8000968:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800096c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000970:	2b03      	cmp	r3, #3
 8000972:	dde3      	ble.n	800093c <block_create+0xb8>
	}

	//BLOCK MATRICES
	if(block.name == O)
 8000974:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d16f      	bne.n	8000a5e <block_create+0x1da>
	{
		uint16_t temp[4][4] =
 800097e:	4bce      	ldr	r3, [pc, #824]	@ (8000cb8 <block_create+0x434>)
 8000980:	f107 040c 	add.w	r4, r7, #12
 8000984:	461d      	mov	r5, r3
 8000986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800098e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,1},
			{0,0,1,1}};

		for(int i = 0; i < 4; i++)
 8000992:	2300      	movs	r3, #0
 8000994:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000998:	e028      	b.n	80009ec <block_create+0x168>
		{
			for(int j = 0; j < 4; j++)
 800099a:	2300      	movs	r3, #0
 800099c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80009a0:	e01b      	b.n	80009da <block_create+0x156>
			{
				block.mat[i][j] = temp[j][i];
 80009a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80009a6:	009a      	lsls	r2, r3, #2
 80009a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80009ac:	4413      	add	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	33c8      	adds	r3, #200	@ 0xc8
 80009b2:	443b      	add	r3, r7
 80009b4:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 80009b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80009bc:	009a      	lsls	r2, r3, #2
 80009be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80009c2:	4413      	add	r3, r2
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	33c8      	adds	r3, #200	@ 0xc8
 80009c8:	443b      	add	r3, r7
 80009ca:	460a      	mov	r2, r1
 80009cc:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 80009d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80009d4:	3301      	adds	r3, #1
 80009d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80009da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80009de:	2b03      	cmp	r3, #3
 80009e0:	dddf      	ble.n	80009a2 <block_create+0x11e>
		for(int i = 0; i < 4; i++)
 80009e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80009e6:	3301      	adds	r3, #1
 80009e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80009ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80009f0:	2b03      	cmp	r3, #3
 80009f2:	ddd2      	ble.n	800099a <block_create+0x116>
			}
		}
		for(int i = 0; i < 4; i++)
 80009f4:	2300      	movs	r3, #0
 80009f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80009fa:	e02c      	b.n	8000a56 <block_create+0x1d2>
		{
			block.x[i] = BLOCK_START_X + (i-1)*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 80009fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000a00:	3b01      	subs	r3, #1
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	461a      	mov	r2, r3
 8000a06:	0052      	lsls	r2, r2, #1
 8000a08:	441a      	add	r2, r3
 8000a0a:	00d2      	lsls	r2, r2, #3
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	334b      	adds	r3, #75	@ 0x4b
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000a18:	3310      	adds	r3, #16
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	33c8      	adds	r3, #200	@ 0xc8
 8000a1e:	443b      	add	r3, r7
 8000a20:	f823 2c98 	strh.w	r2, [r3, #-152]
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000a24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000a28:	3b02      	subs	r3, #2
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	0052      	lsls	r2, r2, #1
 8000a30:	441a      	add	r2, r3
 8000a32:	00d2      	lsls	r2, r2, #3
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	3311      	adds	r3, #17
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000a40:	3314      	adds	r3, #20
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	33c8      	adds	r3, #200	@ 0xc8
 8000a46:	443b      	add	r3, r7
 8000a48:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000a4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000a50:	3301      	adds	r3, #1
 8000a52:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	ddce      	ble.n	80009fc <block_create+0x178>
		}
	}
	if(block.name == L)
 8000a5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d16f      	bne.n	8000b48 <block_create+0x2c4>
	{
		uint16_t temp[4][4] =
 8000a68:	4b94      	ldr	r3, [pc, #592]	@ (8000cbc <block_create+0x438>)
 8000a6a:	f107 040c 	add.w	r4, r7, #12
 8000a6e:	461d      	mov	r5, r3
 8000a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,1,0},
			{0,0,1,0},
			{0,0,1,1}};
		for(int i = 0; i < 4; i++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000a82:	e028      	b.n	8000ad6 <block_create+0x252>
		{
			for(int j = 0; j < 4; j++)
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a8a:	e01b      	b.n	8000ac4 <block_create+0x240>
			{
				block.mat[i][j] = temp[j][i];
 8000a8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000a90:	009a      	lsls	r2, r3, #2
 8000a92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000a96:	4413      	add	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	33c8      	adds	r3, #200	@ 0xc8
 8000a9c:	443b      	add	r3, r7
 8000a9e:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000aa2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000aa6:	009a      	lsls	r2, r3, #2
 8000aa8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000aac:	4413      	add	r3, r2
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	33c8      	adds	r3, #200	@ 0xc8
 8000ab2:	443b      	add	r3, r7
 8000ab4:	460a      	mov	r2, r1
 8000ab6:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000aba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000abe:	3301      	adds	r3, #1
 8000ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000ac4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000ac8:	2b03      	cmp	r3, #3
 8000aca:	dddf      	ble.n	8000a8c <block_create+0x208>
		for(int i = 0; i < 4; i++)
 8000acc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000ad6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	ddd2      	ble.n	8000a84 <block_create+0x200>
			}
		}
		for(int i = 0; i < 4; i++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000ae4:	e02c      	b.n	8000b40 <block_create+0x2bc>
		{
			block.x[i] = BLOCK_START_X + (i-1)*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000ae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000aea:	3b01      	subs	r3, #1
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	461a      	mov	r2, r3
 8000af0:	0052      	lsls	r2, r2, #1
 8000af2:	441a      	add	r2, r3
 8000af4:	00d2      	lsls	r2, r2, #3
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	334b      	adds	r3, #75	@ 0x4b
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000b02:	3310      	adds	r3, #16
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	33c8      	adds	r3, #200	@ 0xc8
 8000b08:	443b      	add	r3, r7
 8000b0a:	f823 2c98 	strh.w	r2, [r3, #-152]
			block.y[i] = BLOCK_START_Y + (i-1)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000b12:	3b01      	subs	r3, #1
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	461a      	mov	r2, r3
 8000b18:	0052      	lsls	r2, r2, #1
 8000b1a:	441a      	add	r2, r3
 8000b1c:	00d2      	lsls	r2, r2, #3
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	3311      	adds	r3, #17
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000b2a:	3314      	adds	r3, #20
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	33c8      	adds	r3, #200	@ 0xc8
 8000b30:	443b      	add	r3, r7
 8000b32:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000b36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000b40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	ddce      	ble.n	8000ae6 <block_create+0x262>
		}
	}
	if(block.name == J)
 8000b48:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d16e      	bne.n	8000c30 <block_create+0x3ac>
	{
		uint16_t temp[4][4] =
 8000b52:	4b5b      	ldr	r3, [pc, #364]	@ (8000cc0 <block_create+0x43c>)
 8000b54:	f107 040c 	add.w	r4, r7, #12
 8000b58:	461d      	mov	r5, r3
 8000b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,1,0},
			{0,0,1,0},
			{0,1,1,0}};
		for(int i = 0; i < 4; i++)
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000b6c:	e028      	b.n	8000bc0 <block_create+0x33c>
		{
			for(int j = 0; j < 4; j++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000b74:	e01b      	b.n	8000bae <block_create+0x32a>
			{
				block.mat[i][j] = temp[j][i];
 8000b76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000b7a:	009a      	lsls	r2, r3, #2
 8000b7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000b80:	4413      	add	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	33c8      	adds	r3, #200	@ 0xc8
 8000b86:	443b      	add	r3, r7
 8000b88:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000b8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000b90:	009a      	lsls	r2, r3, #2
 8000b92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000b96:	4413      	add	r3, r2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	33c8      	adds	r3, #200	@ 0xc8
 8000b9c:	443b      	add	r3, r7
 8000b9e:	460a      	mov	r2, r1
 8000ba0:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000ba4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000ba8:	3301      	adds	r3, #1
 8000baa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000bae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	dddf      	ble.n	8000b76 <block_create+0x2f2>
		for(int i = 0; i < 4; i++)
 8000bb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000bba:	3301      	adds	r3, #1
 8000bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000bc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000bc4:	2b03      	cmp	r3, #3
 8000bc6:	ddd2      	ble.n	8000b6e <block_create+0x2ea>
			}
		}
		for(int i = 0; i < 4; i++)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000bce:	e02b      	b.n	8000c28 <block_create+0x3a4>
		{
			block.x[i] = BLOCK_START_X + i*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000bd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	0052      	lsls	r2, r2, #1
 8000bda:	441a      	add	r2, r3
 8000bdc:	00d2      	lsls	r2, r2, #3
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	334b      	adds	r3, #75	@ 0x4b
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000bea:	3310      	adds	r3, #16
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	33c8      	adds	r3, #200	@ 0xc8
 8000bf0:	443b      	add	r3, r7
 8000bf2:	f823 2c98 	strh.w	r2, [r3, #-152]
			block.y[i] = BLOCK_START_Y + (i-1)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000bf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	461a      	mov	r2, r3
 8000c00:	0052      	lsls	r2, r2, #1
 8000c02:	441a      	add	r2, r3
 8000c04:	00d2      	lsls	r2, r2, #3
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	3311      	adds	r3, #17
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000c12:	3314      	adds	r3, #20
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	33c8      	adds	r3, #200	@ 0xc8
 8000c18:	443b      	add	r3, r7
 8000c1a:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000c1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000c22:	3301      	adds	r3, #1
 8000c24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000c28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	ddcf      	ble.n	8000bd0 <block_create+0x34c>
		}
	}
	if(block.name == S)
 8000c30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	d163      	bne.n	8000d02 <block_create+0x47e>
	{
		uint16_t temp[4][4] =
 8000c3a:	4b22      	ldr	r3, [pc, #136]	@ (8000cc4 <block_create+0x440>)
 8000c3c:	f107 040c 	add.w	r4, r7, #12
 8000c40:	461d      	mov	r5, r3
 8000c42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c46:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,1},
			{0,1,1,0}};
		for(int i = 0; i < 4; i++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000c54:	e028      	b.n	8000ca8 <block_create+0x424>
		{
			for(int j = 0; j < 4; j++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000c5c:	e01b      	b.n	8000c96 <block_create+0x412>
			{
				block.mat[i][j] = temp[j][i];
 8000c5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000c62:	009a      	lsls	r2, r3, #2
 8000c64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000c68:	4413      	add	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	33c8      	adds	r3, #200	@ 0xc8
 8000c6e:	443b      	add	r3, r7
 8000c70:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000c78:	009a      	lsls	r2, r3, #2
 8000c7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000c7e:	4413      	add	r3, r2
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	33c8      	adds	r3, #200	@ 0xc8
 8000c84:	443b      	add	r3, r7
 8000c86:	460a      	mov	r2, r1
 8000c88:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000c90:	3301      	adds	r3, #1
 8000c92:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000c96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	dddf      	ble.n	8000c5e <block_create+0x3da>
		for(int i = 0; i < 4; i++)
 8000c9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	ddd2      	ble.n	8000c56 <block_create+0x3d2>
			}
		}
		for(int i = 0; i < 4; i++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000cb6:	e020      	b.n	8000cfa <block_create+0x476>
 8000cb8:	08005728 	.word	0x08005728
 8000cbc:	08005748 	.word	0x08005748
 8000cc0:	08005768 	.word	0x08005768
 8000cc4:	08005788 	.word	0x08005788
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000cc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ccc:	3b02      	subs	r3, #2
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	0052      	lsls	r2, r2, #1
 8000cd4:	441a      	add	r2, r3
 8000cd6:	00d2      	lsls	r2, r2, #3
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	3311      	adds	r3, #17
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ce4:	3314      	adds	r3, #20
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	33c8      	adds	r3, #200	@ 0xc8
 8000cea:	443b      	add	r3, r7
 8000cec:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000cf0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000cfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	dde2      	ble.n	8000cc8 <block_create+0x444>
		}
	}
	if(block.name == Z)
 8000d02:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b04      	cmp	r3, #4
 8000d0a:	d15b      	bne.n	8000dc4 <block_create+0x540>
	{
		uint16_t temp[4][4] =
 8000d0c:	4b8f      	ldr	r3, [pc, #572]	@ (8000f4c <block_create+0x6c8>)
 8000d0e:	f107 040c 	add.w	r4, r7, #12
 8000d12:	461d      	mov	r5, r3
 8000d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,1,1,0},
			{0,0,1,1}};
		for(int i = 0; i < 4; i++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000d26:	e028      	b.n	8000d7a <block_create+0x4f6>
		{
			for(int j = 0; j < 4; j++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000d2e:	e01b      	b.n	8000d68 <block_create+0x4e4>
			{
				block.mat[i][j] = temp[j][i];
 8000d30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d34:	009a      	lsls	r2, r3, #2
 8000d36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d3a:	4413      	add	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	33c8      	adds	r3, #200	@ 0xc8
 8000d40:	443b      	add	r3, r7
 8000d42:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000d46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d4a:	009a      	lsls	r2, r3, #2
 8000d4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d50:	4413      	add	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	33c8      	adds	r3, #200	@ 0xc8
 8000d56:	443b      	add	r3, r7
 8000d58:	460a      	mov	r2, r1
 8000d5a:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d62:	3301      	adds	r3, #1
 8000d64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	dddf      	ble.n	8000d30 <block_create+0x4ac>
		for(int i = 0; i < 4; i++)
 8000d70:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d74:	3301      	adds	r3, #1
 8000d76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000d7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	ddd2      	ble.n	8000d28 <block_create+0x4a4>
			}
		}
		for(int i = 0; i < 4; i++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000d88:	e018      	b.n	8000dbc <block_create+0x538>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000d8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000d8e:	3b02      	subs	r3, #2
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	461a      	mov	r2, r3
 8000d94:	0052      	lsls	r2, r2, #1
 8000d96:	441a      	add	r2, r3
 8000d98:	00d2      	lsls	r2, r2, #3
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	3311      	adds	r3, #17
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000da6:	3314      	adds	r3, #20
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	33c8      	adds	r3, #200	@ 0xc8
 8000dac:	443b      	add	r3, r7
 8000dae:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000db2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000db6:	3301      	adds	r3, #1
 8000db8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000dbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	dde2      	ble.n	8000d8a <block_create+0x506>
		}
	}
	if(block.name == T)
 8000dc4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b05      	cmp	r3, #5
 8000dcc:	d155      	bne.n	8000e7a <block_create+0x5f6>
	{
		uint16_t temp[4][4] =
 8000dce:	4b60      	ldr	r3, [pc, #384]	@ (8000f50 <block_create+0x6cc>)
 8000dd0:	f107 040c 	add.w	r4, r7, #12
 8000dd4:	461d      	mov	r5, r3
 8000dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dda:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,1,1,1},
			{0,0,1,0}};
		for(int i = 0; i < 4; i++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000de8:	e028      	b.n	8000e3c <block_create+0x5b8>
		{
			for(int j = 0; j < 4; j++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000df0:	e01b      	b.n	8000e2a <block_create+0x5a6>
			{
				block.mat[i][j] = temp[j][i];
 8000df2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000df6:	009a      	lsls	r2, r3, #2
 8000df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000dfc:	4413      	add	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	33c8      	adds	r3, #200	@ 0xc8
 8000e02:	443b      	add	r3, r7
 8000e04:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e0c:	009a      	lsls	r2, r3, #2
 8000e0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000e12:	4413      	add	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	33c8      	adds	r3, #200	@ 0xc8
 8000e18:	443b      	add	r3, r7
 8000e1a:	460a      	mov	r2, r1
 8000e1c:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000e20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000e24:	3301      	adds	r3, #1
 8000e26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000e2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	dddf      	ble.n	8000df2 <block_create+0x56e>
		for(int i = 0; i < 4; i++)
 8000e32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e36:	3301      	adds	r3, #1
 8000e38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	ddd2      	ble.n	8000dea <block_create+0x566>
			}
		}
		for(int i = 0; i < 4; i++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000e48:	e014      	b.n	8000e74 <block_create+0x5f0>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000e4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e4c:	3b02      	subs	r3, #2
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	0052      	lsls	r2, r2, #1
 8000e54:	441a      	add	r2, r3
 8000e56:	00d2      	lsls	r2, r2, #3
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	3311      	adds	r3, #17
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e62:	3314      	adds	r3, #20
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	33c8      	adds	r3, #200	@ 0xc8
 8000e68:	443b      	add	r3, r7
 8000e6a:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000e6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e70:	3301      	adds	r3, #1
 8000e72:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000e74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	dde7      	ble.n	8000e4a <block_create+0x5c6>
		}
	}
	if(block.name == I)
 8000e7a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b06      	cmp	r3, #6
 8000e82:	d149      	bne.n	8000f18 <block_create+0x694>
	{
		uint16_t temp[4][4] =
 8000e84:	4b33      	ldr	r3, [pc, #204]	@ (8000f54 <block_create+0x6d0>)
 8000e86:	f107 040c 	add.w	r4, r7, #12
 8000e8a:	461d      	mov	r5, r3
 8000e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e90:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{1,1,1,1},
			{0,0,0,0}};
		for(int i = 0; i < 4; i++)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000e9c:	e01e      	b.n	8000edc <block_create+0x658>
		{
			for(int j = 0; j < 4; j++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	677b      	str	r3, [r7, #116]	@ 0x74
 8000ea2:	e015      	b.n	8000ed0 <block_create+0x64c>
			{
				block.mat[i][j] = temp[j][i];
 8000ea4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ea6:	009a      	lsls	r2, r3, #2
 8000ea8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000eaa:	4413      	add	r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	33c8      	adds	r3, #200	@ 0xc8
 8000eb0:	443b      	add	r3, r7
 8000eb2:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000eb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000eb8:	009a      	lsls	r2, r3, #2
 8000eba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ebc:	4413      	add	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	33c8      	adds	r3, #200	@ 0xc8
 8000ec2:	443b      	add	r3, r7
 8000ec4:	460a      	mov	r2, r1
 8000ec6:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000eca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ecc:	3301      	adds	r3, #1
 8000ece:	677b      	str	r3, [r7, #116]	@ 0x74
 8000ed0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	dde6      	ble.n	8000ea4 <block_create+0x620>
		for(int i = 0; i < 4; i++)
 8000ed6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000ed8:	3301      	adds	r3, #1
 8000eda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000edc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	dddd      	ble.n	8000e9e <block_create+0x61a>
			}
		}
		for(int i = 0; i < 4; i++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	673b      	str	r3, [r7, #112]	@ 0x70
 8000ee6:	e014      	b.n	8000f12 <block_create+0x68e>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000ee8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000eea:	3b02      	subs	r3, #2
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	461a      	mov	r2, r3
 8000ef0:	0052      	lsls	r2, r2, #1
 8000ef2:	441a      	add	r2, r3
 8000ef4:	00d2      	lsls	r2, r2, #3
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	3311      	adds	r3, #17
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f00:	3314      	adds	r3, #20
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	33c8      	adds	r3, #200	@ 0xc8
 8000f06:	443b      	add	r3, r7
 8000f08:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000f0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f0e:	3301      	adds	r3, #1
 8000f10:	673b      	str	r3, [r7, #112]	@ 0x70
 8000f12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	dde7      	ble.n	8000ee8 <block_create+0x664>
		}
	}
	return block;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000f1e:	469c      	mov	ip, r3
 8000f20:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8000f24:	4665      	mov	r5, ip
 8000f26:	4626      	mov	r6, r4
 8000f28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f2a:	6028      	str	r0, [r5, #0]
 8000f2c:	6069      	str	r1, [r5, #4]
 8000f2e:	60aa      	str	r2, [r5, #8]
 8000f30:	60eb      	str	r3, [r5, #12]
 8000f32:	3410      	adds	r4, #16
 8000f34:	f10c 0c10 	add.w	ip, ip, #16
 8000f38:	4574      	cmp	r4, lr
 8000f3a:	d1f3      	bne.n	8000f24 <block_create+0x6a0>
 8000f3c:	4663      	mov	r3, ip
 8000f3e:	4622      	mov	r2, r4
 8000f40:	6810      	ldr	r0, [r2, #0]
 8000f42:	6018      	str	r0, [r3, #0]
}
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	37cc      	adds	r7, #204	@ 0xcc
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f4c:	080057a8 	.word	0x080057a8
 8000f50:	080057c8 	.word	0x080057c8
 8000f54:	080057e8 	.word	0x080057e8

08000f58 <map_init>:

map_t map_init()
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000f64:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000f68:	6018      	str	r0, [r3, #0]
	volatile map_t map = {0};
 8000f6a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000f6e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8000f72:	4618      	mov	r0, r3
 8000f74:	f240 2336 	movw	r3, #566	@ 0x236
 8000f78:	461a      	mov	r2, r3
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	f004 fb8e 	bl	800569c <memset>
	for(int i = 0; i < 10; i++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8000f86:	e019      	b.n	8000fbc <map_init+0x64>
	{
		map.x[i] = LEFT_EDGE + i*BLOCK_WIDTH;
 8000f88:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	461a      	mov	r2, r3
 8000f90:	0052      	lsls	r2, r2, #1
 8000f92:	441a      	add	r2, r3
 8000f94:	00d2      	lsls	r2, r2, #3
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	3306      	adds	r3, #6
 8000f9c:	b299      	uxth	r1, r3
 8000f9e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000fa2:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8000fa6:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8000faa:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8000fae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 10; i++)
 8000fb2:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8000fbc:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000fc0:	2b09      	cmp	r3, #9
 8000fc2:	dde1      	ble.n	8000f88 <map_init+0x30>
	}
	for(int i = 0; i < 13; i++)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8000fca:	e01b      	b.n	8001004 <map_init+0xac>
	{
		map.y[i] = MAP_DIFFERENCE + EDGE_WIDTH + i*BLOCK_WIDTH + 2;
 8000fcc:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	0052      	lsls	r2, r2, #1
 8000fd6:	441a      	add	r2, r3
 8000fd8:	00d2      	lsls	r2, r2, #3
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	3311      	adds	r3, #17
 8000fe0:	b299      	uxth	r1, r3
 8000fe2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000fe6:	f5a3 7210 	sub.w	r2, r3, #576	@ 0x240
 8000fea:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8000fee:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	460a      	mov	r2, r1
 8000ff8:	809a      	strh	r2, [r3, #4]
	for(int i = 0; i < 13; i++)
 8000ffa:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8000ffe:	3301      	adds	r3, #1
 8001000:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8001004:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001008:	2b0c      	cmp	r3, #12
 800100a:	dddf      	ble.n	8000fcc <map_init+0x74>
	}
	return map;
 800100c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001010:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800101a:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f240 2336 	movw	r3, #566	@ 0x236
 8001026:	461a      	mov	r2, r3
 8001028:	f004 fb64 	bl	80056f4 <memcpy>
}
 800102c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001030:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <draw_block>:
	}
	return temp_tetromino;
}

void draw_block(uint16_t x, uint16_t y, uint16_t color)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	80fb      	strh	r3, [r7, #6]
 8001048:	460b      	mov	r3, r1
 800104a:	80bb      	strh	r3, [r7, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	807b      	strh	r3, [r7, #2]
	for(int i = 0; i < BLOCK_WIDTH-1; i++)
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	e00c      	b.n	8001070 <draw_block+0x32>
	{
		LCD_Draw_Horizontal_Line(x, y+i, BLOCK_WIDTH-1, color);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	b29a      	uxth	r2, r3
 800105a:	88bb      	ldrh	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	b299      	uxth	r1, r3
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	88f8      	ldrh	r0, [r7, #6]
 8001064:	2216      	movs	r2, #22
 8001066:	f000 fb14 	bl	8001692 <LCD_Draw_Horizontal_Line>
	for(int i = 0; i < BLOCK_WIDTH-1; i++)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3301      	adds	r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2b15      	cmp	r3, #21
 8001074:	ddef      	ble.n	8001056 <draw_block+0x18>
	}
}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <draw_shapes>:

void draw_shapes()
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
	uint16_t x_offset = (LCD_PIXEL_WIDTH - (7 * (BLOCK_WIDTH * 4 + 15))) / 2;
 8001086:	f64f 7302 	movw	r3, #65282	@ 0xff02
 800108a:	80fb      	strh	r3, [r7, #6]

	// I tetromino (cyan)
	for (int i = 0; i < 4; i++)
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	e012      	b.n	80010b8 <draw_shapes+0x38>
	{
	   	draw_block(6, 224 + i*BLOCK_WIDTH, LCD_COLOR_CYAN);
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	b29b      	uxth	r3, r3
 8001096:	461a      	mov	r2, r3
 8001098:	0052      	lsls	r2, r2, #1
 800109a:	441a      	add	r2, r3
 800109c:	00d2      	lsls	r2, r2, #3
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	33e0      	adds	r3, #224	@ 0xe0
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80010aa:	4619      	mov	r1, r3
 80010ac:	2006      	movs	r0, #6
 80010ae:	f7ff ffc6 	bl	800103e <draw_block>
	for (int i = 0; i < 4; i++)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3301      	adds	r3, #1
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	dde9      	ble.n	8001092 <draw_shapes+0x12>
	}

	// L tetromino (green)
	x_offset += BLOCK_WIDTH * 4 + 15;
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	336b      	adds	r3, #107	@ 0x6b
 80010c2:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	e012      	b.n	80010f0 <draw_shapes+0x70>
	{
	   	draw_block(i*BLOCK_WIDTH + 144, 224 + BLOCK_WIDTH, LCD_COLOR_GREEN);
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	461a      	mov	r2, r3
 80010d0:	0052      	lsls	r2, r2, #1
 80010d2:	441a      	add	r2, r3
 80010d4:	00d2      	lsls	r2, r2, #3
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	b29b      	uxth	r3, r3
 80010da:	3390      	adds	r3, #144	@ 0x90
 80010dc:	b29b      	uxth	r3, r3
 80010de:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80010e2:	21f7      	movs	r1, #247	@ 0xf7
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ffaa 	bl	800103e <draw_block>
	for (int i = 0; i < 3; i++)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	3301      	adds	r3, #1
 80010ee:	61bb      	str	r3, [r7, #24]
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	dde9      	ble.n	80010ca <draw_shapes+0x4a>
	}
	draw_block(190, 224, LCD_COLOR_GREEN);
 80010f6:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80010fa:	21e0      	movs	r1, #224	@ 0xe0
 80010fc:	20be      	movs	r0, #190	@ 0xbe
 80010fe:	f7ff ff9e 	bl	800103e <draw_block>

	// J tetromino (yellow)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	336b      	adds	r3, #107	@ 0x6b
 8001106:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++)
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	e013      	b.n	8001136 <draw_shapes+0xb6>
	{
	   	draw_block(75 + (i-2)*BLOCK_WIDTH, 224 + BLOCK_WIDTH, LCD_COLOR_YELLOW);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	3b02      	subs	r3, #2
 8001112:	b29b      	uxth	r3, r3
 8001114:	461a      	mov	r2, r3
 8001116:	0052      	lsls	r2, r2, #1
 8001118:	441a      	add	r2, r3
 800111a:	00d2      	lsls	r2, r2, #3
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	b29b      	uxth	r3, r3
 8001120:	334b      	adds	r3, #75	@ 0x4b
 8001122:	b29b      	uxth	r3, r3
 8001124:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001128:	21f7      	movs	r1, #247	@ 0xf7
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff87 	bl	800103e <draw_block>
	for (int i = 0; i < 3; i++)
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	3301      	adds	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	2b02      	cmp	r3, #2
 800113a:	dde8      	ble.n	800110e <draw_shapes+0x8e>
	}
	draw_block(52 + BLOCK_WIDTH, 224 + 2*BLOCK_WIDTH, LCD_COLOR_YELLOW);
 800113c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001140:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8001144:	204b      	movs	r0, #75	@ 0x4b
 8001146:	f7ff ff7a 	bl	800103e <draw_block>

	// O tetromino (orange)
	x_offset += BLOCK_WIDTH * 4 + 15;
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	336b      	adds	r3, #107	@ 0x6b
 800114e:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 2; i++) {
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	e025      	b.n	80011a2 <draw_shapes+0x122>
	    for (int j = 0; j < 2; j++) {
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	e01c      	b.n	8001196 <draw_shapes+0x116>
	       	draw_block(67 + i*BLOCK_WIDTH - 38, 270 + j*BLOCK_WIDTH, LCD_COLOR_ORANGE);
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	b29b      	uxth	r3, r3
 8001160:	461a      	mov	r2, r3
 8001162:	0052      	lsls	r2, r2, #1
 8001164:	441a      	add	r2, r3
 8001166:	00d2      	lsls	r2, r2, #3
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	b29b      	uxth	r3, r3
 800116c:	331d      	adds	r3, #29
 800116e:	b298      	uxth	r0, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	b29b      	uxth	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	0052      	lsls	r2, r2, #1
 8001178:	441a      	add	r2, r3
 800117a:	00d2      	lsls	r2, r2, #3
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	b29b      	uxth	r3, r3
 8001180:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 8001184:	b29b      	uxth	r3, r3
 8001186:	f64f 32c1 	movw	r2, #64449	@ 0xfbc1
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff ff57 	bl	800103e <draw_block>
	    for (int j = 0; j < 2; j++) {
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2b01      	cmp	r3, #1
 800119a:	dddf      	ble.n	800115c <draw_shapes+0xdc>
	for (int i = 0; i < 2; i++) {
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	3301      	adds	r3, #1
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	ddd6      	ble.n	8001156 <draw_shapes+0xd6>
	    }
	}

	// S tetromino (magenta)
	x_offset += BLOCK_WIDTH * 4 + 15;
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	336b      	adds	r3, #107	@ 0x6b
 80011ac:	80fb      	strh	r3, [r7, #6]
	draw_block(144, 270 + BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 80011ae:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80011b2:	f240 1125 	movw	r1, #293	@ 0x125
 80011b6:	2090      	movs	r0, #144	@ 0x90
 80011b8:	f7ff ff41 	bl	800103e <draw_block>
	draw_block(144 + BLOCK_WIDTH, 270 + BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 80011bc:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80011c0:	f240 1125 	movw	r1, #293	@ 0x125
 80011c4:	20a7      	movs	r0, #167	@ 0xa7
 80011c6:	f7ff ff3a 	bl	800103e <draw_block>
	draw_block(144 + BLOCK_WIDTH, 270, LCD_COLOR_MAGENTA);
 80011ca:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80011ce:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80011d2:	20a7      	movs	r0, #167	@ 0xa7
 80011d4:	f7ff ff33 	bl	800103e <draw_block>
	draw_block(144 + BLOCK_WIDTH * 2, 270, LCD_COLOR_MAGENTA);
 80011d8:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80011dc:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80011e0:	20be      	movs	r0, #190	@ 0xbe
 80011e2:	f7ff ff2c 	bl	800103e <draw_block>

	// T tetromino (blue2)
	x_offset += BLOCK_WIDTH * 4 + 15;
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	336b      	adds	r3, #107	@ 0x6b
 80011ea:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++) {
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	e014      	b.n	800121c <draw_shapes+0x19c>
	   	draw_block(LEFT_EDGE + (i+3) * BLOCK_WIDTH, 293, LCD_COLOR_BLUE2);
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	3303      	adds	r3, #3
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	0052      	lsls	r2, r2, #1
 80011fc:	441a      	add	r2, r3
 80011fe:	00d2      	lsls	r2, r2, #3
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	b29b      	uxth	r3, r3
 8001204:	3306      	adds	r3, #6
 8001206:	b29b      	uxth	r3, r3
 8001208:	f240 521f 	movw	r2, #1311	@ 0x51f
 800120c:	f240 1125 	movw	r1, #293	@ 0x125
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff14 	bl	800103e <draw_block>
	for (int i = 0; i < 3; i++) {
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	3301      	adds	r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	2b02      	cmp	r3, #2
 8001220:	dde7      	ble.n	80011f2 <draw_shapes+0x172>
	}
	draw_block(LEFT_EDGE + 4*BLOCK_WIDTH, 293 - BLOCK_WIDTH, LCD_COLOR_BLUE2);
 8001222:	f240 521f 	movw	r2, #1311	@ 0x51f
 8001226:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800122a:	2062      	movs	r0, #98	@ 0x62
 800122c:	f7ff ff07 	bl	800103e <draw_block>

	// Z tetromino (strawberry)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	336b      	adds	r3, #107	@ 0x6b
 8001234:	80fb      	strh	r3, [r7, #6]
	draw_block(LEFT_EDGE + 4*BLOCK_WIDTH, 247, LCD_COLOR_STRAWBERRY);
 8001236:	f64f 1287 	movw	r2, #63879	@ 0xf987
 800123a:	21f7      	movs	r1, #247	@ 0xf7
 800123c:	2062      	movs	r0, #98	@ 0x62
 800123e:	f7ff fefe 	bl	800103e <draw_block>
	draw_block(LEFT_EDGE + 5*BLOCK_WIDTH, 247, LCD_COLOR_STRAWBERRY);
 8001242:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8001246:	21f7      	movs	r1, #247	@ 0xf7
 8001248:	2079      	movs	r0, #121	@ 0x79
 800124a:	f7ff fef8 	bl	800103e <draw_block>
	draw_block(LEFT_EDGE + 5*BLOCK_WIDTH, 247 + BLOCK_WIDTH, LCD_COLOR_STRAWBERRY);
 800124e:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8001252:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8001256:	2079      	movs	r0, #121	@ 0x79
 8001258:	f7ff fef1 	bl	800103e <draw_block>
	draw_block(LEFT_EDGE + 6*BLOCK_WIDTH, 247 + BLOCK_WIDTH, LCD_COLOR_STRAWBERRY);
 800125c:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8001260:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8001264:	2090      	movs	r0, #144	@ 0x90
 8001266:	f7ff feea 	bl	800103e <draw_block>

	// "O" shape (magenta)
	draw_block(x_offset - 50 + BLOCK_WIDTH, 246 - 9*BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	3b1b      	subs	r3, #27
 800126e:	b29b      	uxth	r3, r3
 8001270:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001274:	2127      	movs	r1, #39	@ 0x27
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fee1 	bl	800103e <draw_block>
	draw_block(x_offset - 50 , 246 - 9*BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	3b32      	subs	r3, #50	@ 0x32
 8001280:	b29b      	uxth	r3, r3
 8001282:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001286:	2127      	movs	r1, #39	@ 0x27
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fed8 	bl	800103e <draw_block>
	draw_block(x_offset - 50 , 246 - 8*BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	3b32      	subs	r3, #50	@ 0x32
 8001292:	b29b      	uxth	r3, r3
 8001294:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001298:	213e      	movs	r1, #62	@ 0x3e
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fecf 	bl	800103e <draw_block>
	draw_block(x_offset - 50 + BLOCK_WIDTH, 246 - 8*BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	3b1b      	subs	r3, #27
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80012aa:	213e      	movs	r1, #62	@ 0x3e
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fec6 	bl	800103e <draw_block>
}
 80012b2:	bf00      	nop
 80012b4:	3720      	adds	r7, #32
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <draw_tetromino>:

void draw_tetromino(block_t block)
{
 80012ba:	b084      	sub	sp, #16
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	f107 0c10 	add.w	ip, r7, #16
 80012c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i < 4; i++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	e029      	b.n	8001324 <draw_tetromino+0x6a>
	{
		for(int j = 0; j < 4; j++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	e020      	b.n	8001318 <draw_tetromino+0x5e>
		{
			if(block.mat[i][j])
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	009a      	lsls	r2, r3, #2
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	4413      	add	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	3310      	adds	r3, #16
 80012e2:	443b      	add	r3, r7
 80012e4:	889b      	ldrh	r3, [r3, #4]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d012      	beq.n	8001312 <draw_tetromino+0x58>
			{
				draw_block(block.x[i], block.y[j], block.color);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3310      	adds	r3, #16
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	3310      	adds	r3, #16
 80012f4:	443b      	add	r3, r7
 80012f6:	889b      	ldrh	r3, [r3, #4]
 80012f8:	b298      	uxth	r0, r3
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	3314      	adds	r3, #20
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	3310      	adds	r3, #16
 8001302:	443b      	add	r3, r7
 8001304:	889b      	ldrh	r3, [r3, #4]
 8001306:	b29b      	uxth	r3, r3
 8001308:	8a7a      	ldrh	r2, [r7, #18]
 800130a:	b292      	uxth	r2, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f7ff fe96 	bl	800103e <draw_block>
		for(int j = 0; j < 4; j++)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	2b03      	cmp	r3, #3
 800131c:	dddb      	ble.n	80012d6 <draw_tetromino+0x1c>
	for(int i = 0; i < 4; i++)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3301      	adds	r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b03      	cmp	r3, #3
 8001328:	ddd2      	ble.n	80012d0 <draw_tetromino+0x16>
			}
		}
	}
}
 800132a:	bf00      	nop
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001336:	b004      	add	sp, #16
 8001338:	4770      	bx	lr
	...

0800133c <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08c      	sub	sp, #48	@ 0x30
 8001340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	4b5a      	ldr	r3, [pc, #360]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134a:	4a59      	ldr	r2, [pc, #356]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 800134c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001350:	6453      	str	r3, [r2, #68]	@ 0x44
 8001352:	4b57      	ldr	r3, [pc, #348]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800135a:	61bb      	str	r3, [r7, #24]
 800135c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	4b53      	ldr	r3, [pc, #332]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a52      	ldr	r2, [pc, #328]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b50      	ldr	r3, [pc, #320]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b4c      	ldr	r3, [pc, #304]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a4b      	ldr	r2, [pc, #300]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b49      	ldr	r3, [pc, #292]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b45      	ldr	r3, [pc, #276]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a44      	ldr	r2, [pc, #272]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b42      	ldr	r3, [pc, #264]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	4b3e      	ldr	r3, [pc, #248]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a3d      	ldr	r2, [pc, #244]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b3b      	ldr	r3, [pc, #236]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b37      	ldr	r3, [pc, #220]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a36      	ldr	r2, [pc, #216]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 80013d8:	f043 0320 	orr.w	r3, r3, #32
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b34      	ldr	r3, [pc, #208]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f003 0320 	and.w	r3, r3, #32
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	4b30      	ldr	r3, [pc, #192]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a2f      	ldr	r2, [pc, #188]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 80013f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b2d      	ldr	r3, [pc, #180]	@ (80014b0 <LCD_GPIO_Init+0x174>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001406:	f641 0358 	movw	r3, #6232	@ 0x1858
 800140a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001414:	2302      	movs	r3, #2
 8001416:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001418:	230e      	movs	r3, #14
 800141a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	4619      	mov	r1, r3
 8001422:	4824      	ldr	r0, [pc, #144]	@ (80014b4 <LCD_GPIO_Init+0x178>)
 8001424:	f001 fddc 	bl	8002fe0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001428:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800142c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4619      	mov	r1, r3
 8001434:	4820      	ldr	r0, [pc, #128]	@ (80014b8 <LCD_GPIO_Init+0x17c>)
 8001436:	f001 fdd3 	bl	8002fe0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800143a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800143e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	481d      	ldr	r0, [pc, #116]	@ (80014bc <LCD_GPIO_Init+0x180>)
 8001448:	f001 fdca 	bl	8002fe0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800144c:	2348      	movs	r3, #72	@ 0x48
 800144e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4619      	mov	r1, r3
 8001456:	481a      	ldr	r0, [pc, #104]	@ (80014c0 <LCD_GPIO_Init+0x184>)
 8001458:	f001 fdc2 	bl	8002fe0 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800145c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001460:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	4816      	ldr	r0, [pc, #88]	@ (80014c4 <LCD_GPIO_Init+0x188>)
 800146a:	f001 fdb9 	bl	8002fe0 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800146e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001472:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4619      	mov	r1, r3
 800147a:	4813      	ldr	r0, [pc, #76]	@ (80014c8 <LCD_GPIO_Init+0x18c>)
 800147c:	f001 fdb0 	bl	8002fe0 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001480:	2303      	movs	r3, #3
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001484:	2309      	movs	r3, #9
 8001486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4619      	mov	r1, r3
 800148e:	480a      	ldr	r0, [pc, #40]	@ (80014b8 <LCD_GPIO_Init+0x17c>)
 8001490:	f001 fda6 	bl	8002fe0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001494:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4619      	mov	r1, r3
 80014a0:	4809      	ldr	r0, [pc, #36]	@ (80014c8 <LCD_GPIO_Init+0x18c>)
 80014a2:	f001 fd9d 	bl	8002fe0 <HAL_GPIO_Init>
}
 80014a6:	bf00      	nop
 80014a8:	3730      	adds	r7, #48	@ 0x30
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40020400 	.word	0x40020400
 80014bc:	40020800 	.word	0x40020800
 80014c0:	40020c00 	.word	0x40020c00
 80014c4:	40021400 	.word	0x40021400
 80014c8:	40021800 	.word	0x40021800

080014cc <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b090      	sub	sp, #64	@ 0x40
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80014da:	23f0      	movs	r3, #240	@ 0xf0
 80014dc:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80014e2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80014e6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80014e8:	2302      	movs	r3, #2
 80014ea:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80014ec:	23ff      	movs	r3, #255	@ 0xff
 80014ee:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80014f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80014fa:	2305      	movs	r3, #5
 80014fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001504:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <LTCD_Layer_Init+0x78>)
 8001506:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001508:	23f0      	movs	r3, #240	@ 0xf0
 800150a:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 800150c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001510:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001524:	79fa      	ldrb	r2, [r7, #7]
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	4619      	mov	r1, r3
 800152c:	4806      	ldr	r0, [pc, #24]	@ (8001548 <LTCD_Layer_Init+0x7c>)
 800152e:	f002 fab9 	bl	8003aa4 <HAL_LTDC_ConfigLayer>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001538:	f000 f9a4 	bl	8001884 <LCD_Error_Handler>
	}
}
 800153c:	bf00      	nop
 800153e:	3740      	adds	r7, #64	@ 0x40
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	2000011c 	.word	0x2000011c
 8001548:	20000040 	.word	0x20000040

0800154c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001550:	4b2a      	ldr	r3, [pc, #168]	@ (80015fc <LTCD__Init+0xb0>)
 8001552:	4a2b      	ldr	r2, [pc, #172]	@ (8001600 <LTCD__Init+0xb4>)
 8001554:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001556:	4b29      	ldr	r3, [pc, #164]	@ (80015fc <LTCD__Init+0xb0>)
 8001558:	2209      	movs	r2, #9
 800155a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 800155c:	4b27      	ldr	r3, [pc, #156]	@ (80015fc <LTCD__Init+0xb0>)
 800155e:	2201      	movs	r2, #1
 8001560:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001562:	4b26      	ldr	r3, [pc, #152]	@ (80015fc <LTCD__Init+0xb0>)
 8001564:	221d      	movs	r2, #29
 8001566:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001568:	4b24      	ldr	r3, [pc, #144]	@ (80015fc <LTCD__Init+0xb0>)
 800156a:	2203      	movs	r2, #3
 800156c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800156e:	4b23      	ldr	r3, [pc, #140]	@ (80015fc <LTCD__Init+0xb0>)
 8001570:	f240 120d 	movw	r2, #269	@ 0x10d
 8001574:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001576:	4b21      	ldr	r3, [pc, #132]	@ (80015fc <LTCD__Init+0xb0>)
 8001578:	f240 1243 	movw	r2, #323	@ 0x143
 800157c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800157e:	4b1f      	ldr	r3, [pc, #124]	@ (80015fc <LTCD__Init+0xb0>)
 8001580:	f240 1217 	movw	r2, #279	@ 0x117
 8001584:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001586:	4b1d      	ldr	r3, [pc, #116]	@ (80015fc <LTCD__Init+0xb0>)
 8001588:	f240 1247 	movw	r2, #327	@ 0x147
 800158c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800158e:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <LTCD__Init+0xb0>)
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8001596:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <LTCD__Init+0xb0>)
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800159e:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <LTCD__Init+0xb0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80015a6:	4b17      	ldr	r3, [pc, #92]	@ (8001604 <LTCD__Init+0xb8>)
 80015a8:	2208      	movs	r2, #8
 80015aa:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80015ac:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <LTCD__Init+0xb8>)
 80015ae:	22c0      	movs	r2, #192	@ 0xc0
 80015b0:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80015b2:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <LTCD__Init+0xb8>)
 80015b4:	2204      	movs	r2, #4
 80015b6:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80015b8:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <LTCD__Init+0xb8>)
 80015ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015be:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80015c0:	4810      	ldr	r0, [pc, #64]	@ (8001604 <LTCD__Init+0xb8>)
 80015c2:	f003 f8c9 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015c6:	4b0d      	ldr	r3, [pc, #52]	@ (80015fc <LTCD__Init+0xb0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80015cc:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <LTCD__Init+0xb0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015d2:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <LTCD__Init+0xb0>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015d8:	4b08      	ldr	r3, [pc, #32]	@ (80015fc <LTCD__Init+0xb0>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80015de:	f7ff fead 	bl	800133c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80015e2:	4806      	ldr	r0, [pc, #24]	@ (80015fc <LTCD__Init+0xb0>)
 80015e4:	f002 f98e 	bl	8003904 <HAL_LTDC_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80015ee:	f000 f949 	bl	8001884 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80015f2:	f000 f9ca 	bl	800198a <ili9341_Init>
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000040 	.word	0x20000040
 8001600:	40016800 	.word	0x40016800
 8001604:	200000e8 	.word	0x200000e8

08001608 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]
 8001612:	460b      	mov	r3, r1
 8001614:	80bb      	strh	r3, [r7, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 800161a:	88ba      	ldrh	r2, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	461a      	mov	r2, r3
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	4413      	add	r3, r2
 800162a:	4905      	ldr	r1, [pc, #20]	@ (8001640 <LCD_Draw_Pixel+0x38>)
 800162c:	887a      	ldrh	r2, [r7, #2]
 800162e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	2000011c 	.word	0x2000011c

08001644 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	4604      	mov	r4, r0
 800164c:	4608      	mov	r0, r1
 800164e:	4611      	mov	r1, r2
 8001650:	461a      	mov	r2, r3
 8001652:	4623      	mov	r3, r4
 8001654:	80fb      	strh	r3, [r7, #6]
 8001656:	4603      	mov	r3, r0
 8001658:	80bb      	strh	r3, [r7, #4]
 800165a:	460b      	mov	r3, r1
 800165c:	807b      	strh	r3, [r7, #2]
 800165e:	4613      	mov	r3, r2
 8001660:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001662:	2300      	movs	r3, #0
 8001664:	81fb      	strh	r3, [r7, #14]
 8001666:	e00b      	b.n	8001680 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8001668:	89fa      	ldrh	r2, [r7, #14]
 800166a:	88bb      	ldrh	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	b299      	uxth	r1, r3
 8001670:	883a      	ldrh	r2, [r7, #0]
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ffc7 	bl	8001608 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 800167a:	89fb      	ldrh	r3, [r7, #14]
 800167c:	3301      	adds	r3, #1
 800167e:	81fb      	strh	r3, [r7, #14]
 8001680:	89fa      	ldrh	r2, [r7, #14]
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	429a      	cmp	r2, r3
 8001686:	d3ef      	bcc.n	8001668 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	bd90      	pop	{r4, r7, pc}

08001692 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001692:	b590      	push	{r4, r7, lr}
 8001694:	b085      	sub	sp, #20
 8001696:	af00      	add	r7, sp, #0
 8001698:	4604      	mov	r4, r0
 800169a:	4608      	mov	r0, r1
 800169c:	4611      	mov	r1, r2
 800169e:	461a      	mov	r2, r3
 80016a0:	4623      	mov	r3, r4
 80016a2:	80fb      	strh	r3, [r7, #6]
 80016a4:	4603      	mov	r3, r0
 80016a6:	80bb      	strh	r3, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
 80016ac:	4613      	mov	r3, r2
 80016ae:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80016b0:	2300      	movs	r3, #0
 80016b2:	81fb      	strh	r3, [r7, #14]
 80016b4:	e00b      	b.n	80016ce <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 80016b6:	89fa      	ldrh	r2, [r7, #14]
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	4413      	add	r3, r2
 80016bc:	b29b      	uxth	r3, r3
 80016be:	883a      	ldrh	r2, [r7, #0]
 80016c0:	88b9      	ldrh	r1, [r7, #4]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ffa0 	bl	8001608 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80016c8:	89fb      	ldrh	r3, [r7, #14]
 80016ca:	3301      	adds	r3, #1
 80016cc:	81fb      	strh	r3, [r7, #14]
 80016ce:	89fa      	ldrh	r2, [r7, #14]
 80016d0:	887b      	ldrh	r3, [r7, #2]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d3ef      	bcc.n	80016b6 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd90      	pop	{r4, r7, pc}

080016e0 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	460a      	mov	r2, r1
 80016ea:	71fb      	strb	r3, [r7, #7]
 80016ec:	4613      	mov	r3, r2
 80016ee:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10e      	bne.n	8001714 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e007      	b.n	800170c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80016fc:	4908      	ldr	r1, [pc, #32]	@ (8001720 <LCD_Clear+0x40>)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	88ba      	ldrh	r2, [r7, #4]
 8001702:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3301      	adds	r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001712:	d3f3      	bcc.n	80016fc <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	2000011c 	.word	0x2000011c

08001724 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800172e:	4a04      	ldr	r2, [pc, #16]	@ (8001740 <LCD_SetTextColor+0x1c>)
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	8013      	strh	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	20000000 	.word	0x20000000

08001744 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 800174c:	4a04      	ldr	r2, [pc, #16]	@ (8001760 <LCD_SetFont+0x1c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000118 	.word	0x20000118

08001764 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	603a      	str	r2, [r7, #0]
 800176e:	80fb      	strh	r3, [r7, #6]
 8001770:	460b      	mov	r3, r1
 8001772:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	e04c      	b.n	800181c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	e03f      	b.n	8001808 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	4413      	add	r3, r2
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	4619      	mov	r1, r3
 8001794:	4b27      	ldr	r3, [pc, #156]	@ (8001834 <LCD_Draw_Char+0xd0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	889b      	ldrh	r3, [r3, #4]
 800179a:	4a27      	ldr	r2, [pc, #156]	@ (8001838 <LCD_Draw_Char+0xd4>)
 800179c:	fba2 2303 	umull	r2, r3, r2, r3
 80017a0:	08db      	lsrs	r3, r3, #3
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	2280      	movs	r2, #128	@ 0x80
 80017a8:	409a      	lsls	r2, r3
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	fa42 f303 	asr.w	r3, r2, r3
 80017b0:	400b      	ands	r3, r1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d104      	bne.n	80017c0 <LCD_Draw_Char+0x5c>
 80017b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001834 <LCD_Draw_Char+0xd0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	889b      	ldrh	r3, [r3, #4]
 80017bc:	2b0c      	cmp	r3, #12
 80017be:	d920      	bls.n	8001802 <LCD_Draw_Char+0x9e>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	fa42 f303 	asr.w	r3, r2, r3
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d104      	bne.n	80017e4 <LCD_Draw_Char+0x80>
 80017da:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <LCD_Draw_Char+0xd0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	889b      	ldrh	r3, [r3, #4]
 80017e0:	2b0c      	cmp	r3, #12
 80017e2:	d80e      	bhi.n	8001802 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	4413      	add	r3, r2
 80017ec:	b298      	uxth	r0, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	88bb      	ldrh	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	4a10      	ldr	r2, [pc, #64]	@ (800183c <LCD_Draw_Char+0xd8>)
 80017fa:	8812      	ldrh	r2, [r2, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	f7ff ff03 	bl	8001608 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3301      	adds	r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <LCD_Draw_Char+0xd0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	889b      	ldrh	r3, [r3, #4]
 800180e:	461a      	mov	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4293      	cmp	r3, r2
 8001814:	d3b8      	bcc.n	8001788 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	3301      	adds	r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <LCD_Draw_Char+0xd0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	88db      	ldrh	r3, [r3, #6]
 8001822:	461a      	mov	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4293      	cmp	r3, r2
 8001828:	d3ab      	bcc.n	8001782 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 800182a:	bf00      	nop
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000118 	.word	0x20000118
 8001838:	aaaaaaab 	.word	0xaaaaaaab
 800183c:	20000000 	.word	0x20000000

08001840 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	80fb      	strh	r3, [r7, #6]
 800184a:	460b      	mov	r3, r1
 800184c:	80bb      	strh	r3, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	3b20      	subs	r3, #32
 8001856:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001858:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <LCD_DisplayChar+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	4907      	ldr	r1, [pc, #28]	@ (8001880 <LCD_DisplayChar+0x40>)
 8001862:	6809      	ldr	r1, [r1, #0]
 8001864:	88c9      	ldrh	r1, [r1, #6]
 8001866:	fb01 f303 	mul.w	r3, r1, r3
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	441a      	add	r2, r3
 800186e:	88b9      	ldrh	r1, [r7, #4]
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ff76 	bl	8001764 <LCD_Draw_Char>
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000118 	.word	0x20000118

08001884 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001888:	b672      	cpsid	i
}
 800188a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <LCD_Error_Handler+0x8>

08001890 <game_init>:
 */
#include "game.h"
static block_t block;
static map_t map;
void game_init()
{
 8001890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001892:	f5ad 7d29 	sub.w	sp, sp, #676	@ 0x2a4
 8001896:	af0a      	add	r7, sp, #40	@ 0x28
	uint32_t start_time = HAL_GetTick();
 8001898:	f001 fa8c 	bl	8002db4 <HAL_GetTick>
 800189c:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
	uint8_t rand = S;
 80018a0:	2303      	movs	r3, #3
 80018a2:	f887 3273 	strb.w	r3, [r7, #627]	@ 0x273
	//STMPE811_t touch_data = {0};

	//while(STMPE811_ReadTouch(touch_data) != STMPE811_State_Pressed)
	//{
		//map_draw();
		draw_shapes();
 80018a6:	f7ff fbeb 	bl	8001080 <draw_shapes>
		start_screen();
 80018aa:	f7fe fead 	bl	8000608 <start_screen>
	//}

	HAL_Delay(2000);
 80018ae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80018b2:	f001 fa8b 	bl	8002dcc <HAL_Delay>
	LCD_Clear(0,LCD_COLOR_BLACK);
 80018b6:	2100      	movs	r1, #0
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7ff ff11 	bl	80016e0 <LCD_Clear>
	map_draw();
 80018be:	f7fe fe22 	bl	8000506 <map_draw>
	//rng_init();
	block = block_create(rand);
 80018c2:	4d22      	ldr	r5, [pc, #136]	@ (800194c <game_init+0xbc>)
 80018c4:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80018c8:	f897 2273 	ldrb.w	r2, [r7, #627]	@ 0x273
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe ffd8 	bl	8000884 <block_create>
 80018d4:	f507 740e 	add.w	r4, r7, #568	@ 0x238
 80018d8:	462e      	mov	r6, r5
 80018da:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80018de:	4635      	mov	r5, r6
 80018e0:	4623      	mov	r3, r4
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	6859      	ldr	r1, [r3, #4]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ec:	3410      	adds	r4, #16
 80018ee:	3610      	adds	r6, #16
 80018f0:	4564      	cmp	r4, ip
 80018f2:	d1f4      	bne.n	80018de <game_init+0x4e>
 80018f4:	4633      	mov	r3, r6
 80018f6:	4622      	mov	r2, r4
 80018f8:	6810      	ldr	r0, [r2, #0]
 80018fa:	6018      	str	r0, [r3, #0]
	draw_tetromino(block);
 80018fc:	4e13      	ldr	r6, [pc, #76]	@ (800194c <game_init+0xbc>)
 80018fe:	466d      	mov	r5, sp
 8001900:	f106 0410 	add.w	r4, r6, #16
 8001904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001906:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800190a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	602b      	str	r3, [r5, #0]
 8001910:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001914:	f7ff fcd1 	bl	80012ba <draw_tetromino>

	map = map_init();
 8001918:	4c0d      	ldr	r4, [pc, #52]	@ (8001950 <game_init+0xc0>)
 800191a:	463b      	mov	r3, r7
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fb1b 	bl	8000f58 <map_init>
 8001922:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8001926:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800192a:	4620      	mov	r0, r4
 800192c:	4619      	mov	r1, r3
 800192e:	f240 2336 	movw	r3, #566	@ 0x236
 8001932:	461a      	mov	r2, r3
 8001934:	f003 fede 	bl	80056f4 <memcpy>
//	}
//	for(int i=0;i<10;i++)
//	{
//
//	}
	game_over(start_time);
 8001938:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
 800193c:	f000 f80a 	bl	8001954 <game_over>
}
 8001940:	bf00      	nop
 8001942:	f507 771f 	add.w	r7, r7, #636	@ 0x27c
 8001946:	46bd      	mov	sp, r7
 8001948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800194a:	bf00      	nop
 800194c:	2002591c 	.word	0x2002591c
 8001950:	20025950 	.word	0x20025950

08001954 <game_over>:

void game_over(uint32_t start_time)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	uint32_t end_time = HAL_GetTick();
 800195c:	f001 fa2a 	bl	8002db4 <HAL_GetTick>
 8001960:	60f8      	str	r0, [r7, #12]
	uint32_t total_time = end_time - start_time;
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	60bb      	str	r3, [r7, #8]
	end_screen();
 800196a:	f7fe ff17 	bl	800079c <end_screen>
	disp_time(total_time);
 800196e:	68b8      	ldr	r0, [r7, #8]
 8001970:	f7fe ff4e 	bl	8000810 <disp_time>
}
 8001974:	bf00      	nop
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <I2C3_EV_IRQHandler>:
	block = block_move(&block, &map, dir);
	draw_tetromino(block);
}

void I2C3_EV_IRQHandler()
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
	//disable IRQ
	//lower flag
	//stuff
	//enable IRQ
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800198e:	f000 f9ff 	bl	8001d90 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001992:	20ca      	movs	r0, #202	@ 0xca
 8001994:	f000 f943 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001998:	20c3      	movs	r0, #195	@ 0xc3
 800199a:	f000 f94d 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 800199e:	2008      	movs	r0, #8
 80019a0:	f000 f94a 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80019a4:	2050      	movs	r0, #80	@ 0x50
 80019a6:	f000 f947 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80019aa:	20cf      	movs	r0, #207	@ 0xcf
 80019ac:	f000 f937 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80019b0:	2000      	movs	r0, #0
 80019b2:	f000 f941 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80019b6:	20c1      	movs	r0, #193	@ 0xc1
 80019b8:	f000 f93e 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80019bc:	2030      	movs	r0, #48	@ 0x30
 80019be:	f000 f93b 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80019c2:	20ed      	movs	r0, #237	@ 0xed
 80019c4:	f000 f92b 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80019c8:	2064      	movs	r0, #100	@ 0x64
 80019ca:	f000 f935 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80019ce:	2003      	movs	r0, #3
 80019d0:	f000 f932 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80019d4:	2012      	movs	r0, #18
 80019d6:	f000 f92f 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80019da:	2081      	movs	r0, #129	@ 0x81
 80019dc:	f000 f92c 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80019e0:	20e8      	movs	r0, #232	@ 0xe8
 80019e2:	f000 f91c 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80019e6:	2085      	movs	r0, #133	@ 0x85
 80019e8:	f000 f926 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80019ec:	2000      	movs	r0, #0
 80019ee:	f000 f923 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80019f2:	2078      	movs	r0, #120	@ 0x78
 80019f4:	f000 f920 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80019f8:	20cb      	movs	r0, #203	@ 0xcb
 80019fa:	f000 f910 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80019fe:	2039      	movs	r0, #57	@ 0x39
 8001a00:	f000 f91a 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001a04:	202c      	movs	r0, #44	@ 0x2c
 8001a06:	f000 f917 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f000 f914 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001a10:	2034      	movs	r0, #52	@ 0x34
 8001a12:	f000 f911 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001a16:	2002      	movs	r0, #2
 8001a18:	f000 f90e 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001a1c:	20f7      	movs	r0, #247	@ 0xf7
 8001a1e:	f000 f8fe 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001a22:	2020      	movs	r0, #32
 8001a24:	f000 f908 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001a28:	20ea      	movs	r0, #234	@ 0xea
 8001a2a:	f000 f8f8 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f000 f902 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a34:	2000      	movs	r0, #0
 8001a36:	f000 f8ff 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001a3a:	20b1      	movs	r0, #177	@ 0xb1
 8001a3c:	f000 f8ef 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a40:	2000      	movs	r0, #0
 8001a42:	f000 f8f9 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001a46:	201b      	movs	r0, #27
 8001a48:	f000 f8f6 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001a4c:	20b6      	movs	r0, #182	@ 0xb6
 8001a4e:	f000 f8e6 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001a52:	200a      	movs	r0, #10
 8001a54:	f000 f8f0 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001a58:	20a2      	movs	r0, #162	@ 0xa2
 8001a5a:	f000 f8ed 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001a5e:	20c0      	movs	r0, #192	@ 0xc0
 8001a60:	f000 f8dd 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001a64:	2010      	movs	r0, #16
 8001a66:	f000 f8e7 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001a6a:	20c1      	movs	r0, #193	@ 0xc1
 8001a6c:	f000 f8d7 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001a70:	2010      	movs	r0, #16
 8001a72:	f000 f8e1 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001a76:	20c5      	movs	r0, #197	@ 0xc5
 8001a78:	f000 f8d1 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001a7c:	2045      	movs	r0, #69	@ 0x45
 8001a7e:	f000 f8db 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001a82:	2015      	movs	r0, #21
 8001a84:	f000 f8d8 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001a88:	20c7      	movs	r0, #199	@ 0xc7
 8001a8a:	f000 f8c8 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001a8e:	2090      	movs	r0, #144	@ 0x90
 8001a90:	f000 f8d2 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001a94:	2036      	movs	r0, #54	@ 0x36
 8001a96:	f000 f8c2 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001a9a:	20c8      	movs	r0, #200	@ 0xc8
 8001a9c:	f000 f8cc 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001aa0:	20f2      	movs	r0, #242	@ 0xf2
 8001aa2:	f000 f8bc 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f000 f8c6 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001aac:	20b0      	movs	r0, #176	@ 0xb0
 8001aae:	f000 f8b6 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001ab2:	20c2      	movs	r0, #194	@ 0xc2
 8001ab4:	f000 f8c0 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001ab8:	20b6      	movs	r0, #182	@ 0xb6
 8001aba:	f000 f8b0 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001abe:	200a      	movs	r0, #10
 8001ac0:	f000 f8ba 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001ac4:	20a7      	movs	r0, #167	@ 0xa7
 8001ac6:	f000 f8b7 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001aca:	2027      	movs	r0, #39	@ 0x27
 8001acc:	f000 f8b4 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001ad0:	2004      	movs	r0, #4
 8001ad2:	f000 f8b1 	bl	8001c38 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001ad6:	202a      	movs	r0, #42	@ 0x2a
 8001ad8:	f000 f8a1 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001adc:	2000      	movs	r0, #0
 8001ade:	f000 f8ab 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f000 f8a8 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f000 f8a5 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001aee:	20ef      	movs	r0, #239	@ 0xef
 8001af0:	f000 f8a2 	bl	8001c38 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001af4:	202b      	movs	r0, #43	@ 0x2b
 8001af6:	f000 f892 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001afa:	2000      	movs	r0, #0
 8001afc:	f000 f89c 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b00:	2000      	movs	r0, #0
 8001b02:	f000 f899 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001b06:	2001      	movs	r0, #1
 8001b08:	f000 f896 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001b0c:	203f      	movs	r0, #63	@ 0x3f
 8001b0e:	f000 f893 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001b12:	20f6      	movs	r0, #246	@ 0xf6
 8001b14:	f000 f883 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f000 f88d 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f000 f88a 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001b24:	2006      	movs	r0, #6
 8001b26:	f000 f887 	bl	8001c38 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001b2a:	202c      	movs	r0, #44	@ 0x2c
 8001b2c:	f000 f877 	bl	8001c1e <ili9341_Write_Reg>
  LCD_Delay(200);
 8001b30:	20c8      	movs	r0, #200	@ 0xc8
 8001b32:	f000 f9e9 	bl	8001f08 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001b36:	2026      	movs	r0, #38	@ 0x26
 8001b38:	f000 f871 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f000 f87b 	bl	8001c38 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001b42:	20e0      	movs	r0, #224	@ 0xe0
 8001b44:	f000 f86b 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001b48:	200f      	movs	r0, #15
 8001b4a:	f000 f875 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001b4e:	2029      	movs	r0, #41	@ 0x29
 8001b50:	f000 f872 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001b54:	2024      	movs	r0, #36	@ 0x24
 8001b56:	f000 f86f 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001b5a:	200c      	movs	r0, #12
 8001b5c:	f000 f86c 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001b60:	200e      	movs	r0, #14
 8001b62:	f000 f869 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001b66:	2009      	movs	r0, #9
 8001b68:	f000 f866 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001b6c:	204e      	movs	r0, #78	@ 0x4e
 8001b6e:	f000 f863 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001b72:	2078      	movs	r0, #120	@ 0x78
 8001b74:	f000 f860 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001b78:	203c      	movs	r0, #60	@ 0x3c
 8001b7a:	f000 f85d 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001b7e:	2009      	movs	r0, #9
 8001b80:	f000 f85a 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001b84:	2013      	movs	r0, #19
 8001b86:	f000 f857 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001b8a:	2005      	movs	r0, #5
 8001b8c:	f000 f854 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001b90:	2017      	movs	r0, #23
 8001b92:	f000 f851 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001b96:	2011      	movs	r0, #17
 8001b98:	f000 f84e 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f000 f84b 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001ba2:	20e1      	movs	r0, #225	@ 0xe1
 8001ba4:	f000 f83b 	bl	8001c1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001ba8:	2000      	movs	r0, #0
 8001baa:	f000 f845 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001bae:	2016      	movs	r0, #22
 8001bb0:	f000 f842 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001bb4:	201b      	movs	r0, #27
 8001bb6:	f000 f83f 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001bba:	2004      	movs	r0, #4
 8001bbc:	f000 f83c 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001bc0:	2011      	movs	r0, #17
 8001bc2:	f000 f839 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001bc6:	2007      	movs	r0, #7
 8001bc8:	f000 f836 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001bcc:	2031      	movs	r0, #49	@ 0x31
 8001bce:	f000 f833 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001bd2:	2033      	movs	r0, #51	@ 0x33
 8001bd4:	f000 f830 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001bd8:	2042      	movs	r0, #66	@ 0x42
 8001bda:	f000 f82d 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001bde:	2005      	movs	r0, #5
 8001be0:	f000 f82a 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001be4:	200c      	movs	r0, #12
 8001be6:	f000 f827 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001bea:	200a      	movs	r0, #10
 8001bec:	f000 f824 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001bf0:	2028      	movs	r0, #40	@ 0x28
 8001bf2:	f000 f821 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001bf6:	202f      	movs	r0, #47	@ 0x2f
 8001bf8:	f000 f81e 	bl	8001c38 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001bfc:	200f      	movs	r0, #15
 8001bfe:	f000 f81b 	bl	8001c38 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001c02:	2011      	movs	r0, #17
 8001c04:	f000 f80b 	bl	8001c1e <ili9341_Write_Reg>
  LCD_Delay(200);
 8001c08:	20c8      	movs	r0, #200	@ 0xc8
 8001c0a:	f000 f97d 	bl	8001f08 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001c0e:	2029      	movs	r0, #41	@ 0x29
 8001c10:	f000 f805 	bl	8001c1e <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001c14:	202c      	movs	r0, #44	@ 0x2c
 8001c16:	f000 f802 	bl	8001c1e <ili9341_Write_Reg>
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f94a 	bl	8001ec4 <LCD_IO_WriteReg>
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 f91b 	bl	8001e80 <LCD_IO_WriteData>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001c58:	4819      	ldr	r0, [pc, #100]	@ (8001cc0 <SPI_Init+0x6c>)
 8001c5a:	f003 f95c 	bl	8004f16 <HAL_SPI_GetState>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d12b      	bne.n	8001cbc <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001c64:	4b16      	ldr	r3, [pc, #88]	@ (8001cc0 <SPI_Init+0x6c>)
 8001c66:	4a17      	ldr	r2, [pc, #92]	@ (8001cc4 <SPI_Init+0x70>)
 8001c68:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c6a:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <SPI_Init+0x6c>)
 8001c6c:	2218      	movs	r2, #24
 8001c6e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001c70:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <SPI_Init+0x6c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001c76:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <SPI_Init+0x6c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001c7c:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <SPI_Init+0x6c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001c82:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <SPI_Init+0x6c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001c88:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <SPI_Init+0x6c>)
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <SPI_Init+0x6c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001c94:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <SPI_Init+0x6c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001c9a:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <SPI_Init+0x6c>)
 8001c9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ca0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001ca2:	4b07      	ldr	r3, [pc, #28]	@ (8001cc0 <SPI_Init+0x6c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001ca8:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <SPI_Init+0x6c>)
 8001caa:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cae:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001cb0:	4803      	ldr	r0, [pc, #12]	@ (8001cc0 <SPI_Init+0x6c>)
 8001cb2:	f000 f833 	bl	8001d1c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001cb6:	4802      	ldr	r0, [pc, #8]	@ (8001cc0 <SPI_Init+0x6c>)
 8001cb8:	f002 ff38 	bl	8004b2c <HAL_SPI_Init>
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20025b88 	.word	0x20025b88
 8001cc4:	40015000 	.word	0x40015000

08001cc8 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001cd6:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <SPI_Write+0x34>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	1db9      	adds	r1, r7, #6
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4808      	ldr	r0, [pc, #32]	@ (8001d00 <SPI_Write+0x38>)
 8001ce0:	f002 ffd5 	bl	8004c8e <HAL_SPI_Transmit>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001cee:	f000 f809 	bl	8001d04 <SPI_Error>
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000014 	.word	0x20000014
 8001d00:	20025b88 	.word	0x20025b88

08001d04 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001d08:	4803      	ldr	r0, [pc, #12]	@ (8001d18 <SPI_Error+0x14>)
 8001d0a:	f002 ff98 	bl	8004c3e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001d0e:	f7ff ffa1 	bl	8001c54 <SPI_Init>
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20025b88 	.word	0x20025b88

08001d1c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	@ 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <SPI_MspInit+0x6c>)
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2c:	4a16      	ldr	r2, [pc, #88]	@ (8001d88 <SPI_MspInit+0x6c>)
 8001d2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d32:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d34:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <SPI_MspInit+0x6c>)
 8001d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <SPI_MspInit+0x6c>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d48:	4a0f      	ldr	r2, [pc, #60]	@ (8001d88 <SPI_MspInit+0x6c>)
 8001d4a:	f043 0320 	orr.w	r3, r3, #32
 8001d4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d50:	4b0d      	ldr	r3, [pc, #52]	@ (8001d88 <SPI_MspInit+0x6c>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d54:	f003 0320 	and.w	r3, r3, #32
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001d5c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001d66:	2302      	movs	r3, #2
 8001d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001d6e:	2305      	movs	r3, #5
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4619      	mov	r1, r3
 8001d78:	4804      	ldr	r0, [pc, #16]	@ (8001d8c <SPI_MspInit+0x70>)
 8001d7a:	f001 f931 	bl	8002fe0 <HAL_GPIO_Init>
}
 8001d7e:	bf00      	nop
 8001d80:	3728      	adds	r7, #40	@ 0x28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40021400 	.word	0x40021400

08001d90 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001d96:	4b36      	ldr	r3, [pc, #216]	@ (8001e70 <LCD_IO_Init+0xe0>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d164      	bne.n	8001e68 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001d9e:	4b34      	ldr	r3, [pc, #208]	@ (8001e70 <LCD_IO_Init+0xe0>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	4b32      	ldr	r3, [pc, #200]	@ (8001e74 <LCD_IO_Init+0xe4>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dac:	4a31      	ldr	r2, [pc, #196]	@ (8001e74 <LCD_IO_Init+0xe4>)
 8001dae:	f043 0308 	orr.w	r3, r3, #8
 8001db2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db4:	4b2f      	ldr	r3, [pc, #188]	@ (8001e74 <LCD_IO_Init+0xe4>)
 8001db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001dc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4827      	ldr	r0, [pc, #156]	@ (8001e78 <LCD_IO_Init+0xe8>)
 8001dda:	f001 f901 	bl	8002fe0 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	4b24      	ldr	r3, [pc, #144]	@ (8001e74 <LCD_IO_Init+0xe4>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	4a23      	ldr	r2, [pc, #140]	@ (8001e74 <LCD_IO_Init+0xe4>)
 8001de8:	f043 0308 	orr.w	r3, r3, #8
 8001dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dee:	4b21      	ldr	r3, [pc, #132]	@ (8001e74 <LCD_IO_Init+0xe4>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001dfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	4619      	mov	r1, r3
 8001e12:	4819      	ldr	r0, [pc, #100]	@ (8001e78 <LCD_IO_Init+0xe8>)
 8001e14:	f001 f8e4 	bl	8002fe0 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001e18:	2300      	movs	r3, #0
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	4b15      	ldr	r3, [pc, #84]	@ (8001e74 <LCD_IO_Init+0xe4>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e20:	4a14      	ldr	r2, [pc, #80]	@ (8001e74 <LCD_IO_Init+0xe4>)
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e28:	4b12      	ldr	r3, [pc, #72]	@ (8001e74 <LCD_IO_Init+0xe4>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001e34:	2304      	movs	r3, #4
 8001e36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001e40:	2302      	movs	r3, #2
 8001e42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	4619      	mov	r1, r3
 8001e4a:	480c      	ldr	r0, [pc, #48]	@ (8001e7c <LCD_IO_Init+0xec>)
 8001e4c:	f001 f8c8 	bl	8002fe0 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001e50:	2200      	movs	r2, #0
 8001e52:	2104      	movs	r1, #4
 8001e54:	4809      	ldr	r0, [pc, #36]	@ (8001e7c <LCD_IO_Init+0xec>)
 8001e56:	f001 fb7b 	bl	8003550 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	2104      	movs	r1, #4
 8001e5e:	4807      	ldr	r0, [pc, #28]	@ (8001e7c <LCD_IO_Init+0xec>)
 8001e60:	f001 fb76 	bl	8003550 <HAL_GPIO_WritePin>

    SPI_Init();
 8001e64:	f7ff fef6 	bl	8001c54 <SPI_Init>
  }
}
 8001e68:	bf00      	nop
 8001e6a:	3720      	adds	r7, #32
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20025be0 	.word	0x20025be0
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40020c00 	.word	0x40020c00
 8001e7c:	40020800 	.word	0x40020800

08001e80 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e90:	480a      	ldr	r0, [pc, #40]	@ (8001ebc <LCD_IO_WriteData+0x3c>)
 8001e92:	f001 fb5d 	bl	8003550 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001e96:	2200      	movs	r2, #0
 8001e98:	2104      	movs	r1, #4
 8001e9a:	4809      	ldr	r0, [pc, #36]	@ (8001ec0 <LCD_IO_WriteData+0x40>)
 8001e9c:	f001 fb58 	bl	8003550 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001ea0:	88fb      	ldrh	r3, [r7, #6]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ff10 	bl	8001cc8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	2104      	movs	r1, #4
 8001eac:	4804      	ldr	r0, [pc, #16]	@ (8001ec0 <LCD_IO_WriteData+0x40>)
 8001eae:	f001 fb4f 	bl	8003550 <HAL_GPIO_WritePin>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40020c00 	.word	0x40020c00
 8001ec0:	40020800 	.word	0x40020800

08001ec4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ed4:	480a      	ldr	r0, [pc, #40]	@ (8001f00 <LCD_IO_WriteReg+0x3c>)
 8001ed6:	f001 fb3b 	bl	8003550 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001eda:	2200      	movs	r2, #0
 8001edc:	2104      	movs	r1, #4
 8001ede:	4809      	ldr	r0, [pc, #36]	@ (8001f04 <LCD_IO_WriteReg+0x40>)
 8001ee0:	f001 fb36 	bl	8003550 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff feed 	bl	8001cc8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001eee:	2201      	movs	r2, #1
 8001ef0:	2104      	movs	r1, #4
 8001ef2:	4804      	ldr	r0, [pc, #16]	@ (8001f04 <LCD_IO_WriteReg+0x40>)
 8001ef4:	f001 fb2c 	bl	8003550 <HAL_GPIO_WritePin>
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40020c00 	.word	0x40020c00
 8001f04:	40020800 	.word	0x40020800

08001f08 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 ff5b 	bl	8002dcc <HAL_Delay>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f22:	f000 fee1 	bl	8002ce8 <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  //SystemClock_Config();
  SystemClockOverride();
 8001f26:	f000 fb9d 	bl	8002664 <SystemClockOverride>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f2a:	f000 f9ed 	bl	8002308 <MX_GPIO_Init>
  MX_I2C3_Init();
 8001f2e:	f000 f815 	bl	8001f5c <MX_I2C3_Init>
  MX_LTDC_Init();
 8001f32:	f000 f853 	bl	8001fdc <MX_LTDC_Init>
  MX_SPI5_Init();
 8001f36:	f000 f917 	bl	8002168 <MX_SPI5_Init>
  MX_RNG_Init();
 8001f3a:	f000 f901 	bl	8002140 <MX_RNG_Init>
  MX_TIM2_Init();
 8001f3e:	f000 f949 	bl	80021d4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001f42:	f000 f993 	bl	800226c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit();
 8001f46:	f7fe fac9 	bl	80004dc <ApplicationInit>
  Application_game_inst();
 8001f4a:	f7fe fad6 	bl	80004fa <Application_game_inst>
  HAL_Delay(5000);
 8001f4e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001f52:	f000 ff3b 	bl	8002dcc <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f56:	bf00      	nop
 8001f58:	e7fd      	b.n	8001f56 <main+0x38>
	...

08001f5c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f60:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001f62:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd4 <MX_I2C3_Init+0x78>)
 8001f64:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001f66:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001f68:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd8 <MX_I2C3_Init+0x7c>)
 8001f6a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f6c:	4b18      	ldr	r3, [pc, #96]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001f72:	4b17      	ldr	r3, [pc, #92]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f78:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001f7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f7e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f80:	4b13      	ldr	r3, [pc, #76]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001f86:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f8c:	4b10      	ldr	r3, [pc, #64]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f92:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f98:	480d      	ldr	r0, [pc, #52]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001f9a:	f001 faf3 	bl	8003584 <HAL_I2C_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001fa4:	f000 fbb0 	bl	8002708 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4809      	ldr	r0, [pc, #36]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001fac:	f001 fc2e 	bl	800380c <HAL_I2CEx_ConfigAnalogFilter>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001fb6:	f000 fba7 	bl	8002708 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4804      	ldr	r0, [pc, #16]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001fbe:	f001 fc61 	bl	8003884 <HAL_I2CEx_ConfigDigitalFilter>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001fc8:	f000 fb9e 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20025be4 	.word	0x20025be4
 8001fd4:	40005c00 	.word	0x40005c00
 8001fd8:	000186a0 	.word	0x000186a0

08001fdc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b09a      	sub	sp, #104	@ 0x68
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001fe2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001fe6:	2234      	movs	r2, #52	@ 0x34
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f003 fb56 	bl	800569c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001ff0:	463b      	mov	r3, r7
 8001ff2:	2234      	movs	r2, #52	@ 0x34
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f003 fb50 	bl	800569c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001ffc:	4b4e      	ldr	r3, [pc, #312]	@ (8002138 <MX_LTDC_Init+0x15c>)
 8001ffe:	4a4f      	ldr	r2, [pc, #316]	@ (800213c <MX_LTDC_Init+0x160>)
 8002000:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002002:	4b4d      	ldr	r3, [pc, #308]	@ (8002138 <MX_LTDC_Init+0x15c>)
 8002004:	2200      	movs	r2, #0
 8002006:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002008:	4b4b      	ldr	r3, [pc, #300]	@ (8002138 <MX_LTDC_Init+0x15c>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800200e:	4b4a      	ldr	r3, [pc, #296]	@ (8002138 <MX_LTDC_Init+0x15c>)
 8002010:	2200      	movs	r2, #0
 8002012:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002014:	4b48      	ldr	r3, [pc, #288]	@ (8002138 <MX_LTDC_Init+0x15c>)
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800201a:	4b47      	ldr	r3, [pc, #284]	@ (8002138 <MX_LTDC_Init+0x15c>)
 800201c:	2207      	movs	r2, #7
 800201e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002020:	4b45      	ldr	r3, [pc, #276]	@ (8002138 <MX_LTDC_Init+0x15c>)
 8002022:	2203      	movs	r2, #3
 8002024:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8002026:	4b44      	ldr	r3, [pc, #272]	@ (8002138 <MX_LTDC_Init+0x15c>)
 8002028:	220e      	movs	r2, #14
 800202a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800202c:	4b42      	ldr	r3, [pc, #264]	@ (8002138 <MX_LTDC_Init+0x15c>)
 800202e:	2205      	movs	r2, #5
 8002030:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8002032:	4b41      	ldr	r3, [pc, #260]	@ (8002138 <MX_LTDC_Init+0x15c>)
 8002034:	f240 228e 	movw	r2, #654	@ 0x28e
 8002038:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800203a:	4b3f      	ldr	r3, [pc, #252]	@ (8002138 <MX_LTDC_Init+0x15c>)
 800203c:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8002040:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8002042:	4b3d      	ldr	r3, [pc, #244]	@ (8002138 <MX_LTDC_Init+0x15c>)
 8002044:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8002048:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800204a:	4b3b      	ldr	r3, [pc, #236]	@ (8002138 <MX_LTDC_Init+0x15c>)
 800204c:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8002050:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002052:	4b39      	ldr	r3, [pc, #228]	@ (8002138 <MX_LTDC_Init+0x15c>)
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800205a:	4b37      	ldr	r3, [pc, #220]	@ (8002138 <MX_LTDC_Init+0x15c>)
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002062:	4b35      	ldr	r3, [pc, #212]	@ (8002138 <MX_LTDC_Init+0x15c>)
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800206a:	4833      	ldr	r0, [pc, #204]	@ (8002138 <MX_LTDC_Init+0x15c>)
 800206c:	f001 fc4a 	bl	8003904 <HAL_LTDC_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8002076:	f000 fb47 	bl	8002708 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800208a:	2300      	movs	r3, #0
 800208c:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800209a:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800209c:	2305      	movs	r3, #5
 800209e:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80020be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020c2:	2200      	movs	r2, #0
 80020c4:	4619      	mov	r1, r3
 80020c6:	481c      	ldr	r0, [pc, #112]	@ (8002138 <MX_LTDC_Init+0x15c>)
 80020c8:	f001 fcec 	bl	8003aa4 <HAL_LTDC_ConfigLayer>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80020d2:	f000 fb19 	bl	8002708 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80020f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020f6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80020f8:	2305      	movs	r3, #5
 80020fa:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800211a:	463b      	mov	r3, r7
 800211c:	2201      	movs	r2, #1
 800211e:	4619      	mov	r1, r3
 8002120:	4805      	ldr	r0, [pc, #20]	@ (8002138 <MX_LTDC_Init+0x15c>)
 8002122:	f001 fcbf 	bl	8003aa4 <HAL_LTDC_ConfigLayer>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800212c:	f000 faec 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002130:	bf00      	nop
 8002132:	3768      	adds	r7, #104	@ 0x68
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20025c38 	.word	0x20025c38
 800213c:	40016800 	.word	0x40016800

08002140 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002144:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <MX_RNG_Init+0x20>)
 8002146:	4a07      	ldr	r2, [pc, #28]	@ (8002164 <MX_RNG_Init+0x24>)
 8002148:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800214a:	4805      	ldr	r0, [pc, #20]	@ (8002160 <MX_RNG_Init+0x20>)
 800214c:	f002 fcc4 	bl	8004ad8 <HAL_RNG_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002156:	f000 fad7 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20025ce0 	.word	0x20025ce0
 8002164:	50060800 	.word	0x50060800

08002168 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800216c:	4b17      	ldr	r3, [pc, #92]	@ (80021cc <MX_SPI5_Init+0x64>)
 800216e:	4a18      	ldr	r2, [pc, #96]	@ (80021d0 <MX_SPI5_Init+0x68>)
 8002170:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002172:	4b16      	ldr	r3, [pc, #88]	@ (80021cc <MX_SPI5_Init+0x64>)
 8002174:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002178:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800217a:	4b14      	ldr	r3, [pc, #80]	@ (80021cc <MX_SPI5_Init+0x64>)
 800217c:	2200      	movs	r2, #0
 800217e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002180:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <MX_SPI5_Init+0x64>)
 8002182:	2200      	movs	r2, #0
 8002184:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002186:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <MX_SPI5_Init+0x64>)
 8002188:	2200      	movs	r2, #0
 800218a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800218c:	4b0f      	ldr	r3, [pc, #60]	@ (80021cc <MX_SPI5_Init+0x64>)
 800218e:	2200      	movs	r2, #0
 8002190:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002192:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <MX_SPI5_Init+0x64>)
 8002194:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002198:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800219a:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <MX_SPI5_Init+0x64>)
 800219c:	2200      	movs	r2, #0
 800219e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021a0:	4b0a      	ldr	r3, [pc, #40]	@ (80021cc <MX_SPI5_Init+0x64>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80021a6:	4b09      	ldr	r3, [pc, #36]	@ (80021cc <MX_SPI5_Init+0x64>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021ac:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <MX_SPI5_Init+0x64>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <MX_SPI5_Init+0x64>)
 80021b4:	220a      	movs	r2, #10
 80021b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80021b8:	4804      	ldr	r0, [pc, #16]	@ (80021cc <MX_SPI5_Init+0x64>)
 80021ba:	f002 fcb7 	bl	8004b2c <HAL_SPI_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80021c4:	f000 faa0 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20025cf0 	.word	0x20025cf0
 80021d0:	40015000 	.word	0x40015000

080021d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021da:	f107 0308 	add.w	r3, r7, #8
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e8:	463b      	mov	r3, r7
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002268 <MX_TIM2_Init+0x94>)
 80021f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002268 <MX_TIM2_Init+0x94>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002268 <MX_TIM2_Init+0x94>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002204:	4b18      	ldr	r3, [pc, #96]	@ (8002268 <MX_TIM2_Init+0x94>)
 8002206:	f04f 32ff 	mov.w	r2, #4294967295
 800220a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220c:	4b16      	ldr	r3, [pc, #88]	@ (8002268 <MX_TIM2_Init+0x94>)
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002212:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <MX_TIM2_Init+0x94>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002218:	4813      	ldr	r0, [pc, #76]	@ (8002268 <MX_TIM2_Init+0x94>)
 800221a:	f002 ff67 	bl	80050ec <HAL_TIM_Base_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002224:	f000 fa70 	bl	8002708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002228:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800222c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800222e:	f107 0308 	add.w	r3, r7, #8
 8002232:	4619      	mov	r1, r3
 8002234:	480c      	ldr	r0, [pc, #48]	@ (8002268 <MX_TIM2_Init+0x94>)
 8002236:	f002 ffa8 	bl	800518a <HAL_TIM_ConfigClockSource>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002240:	f000 fa62 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002244:	2300      	movs	r3, #0
 8002246:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002248:	2300      	movs	r3, #0
 800224a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800224c:	463b      	mov	r3, r7
 800224e:	4619      	mov	r1, r3
 8002250:	4805      	ldr	r0, [pc, #20]	@ (8002268 <MX_TIM2_Init+0x94>)
 8002252:	f003 f9a7 	bl	80055a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800225c:	f000 fa54 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002260:	bf00      	nop
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20025d48 	.word	0x20025d48

0800226c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002272:	f107 0308 	add.w	r3, r7, #8
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	609a      	str	r2, [r3, #8]
 800227e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002280:	463b      	mov	r3, r7
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002288:	4b1d      	ldr	r3, [pc, #116]	@ (8002300 <MX_TIM5_Init+0x94>)
 800228a:	4a1e      	ldr	r2, [pc, #120]	@ (8002304 <MX_TIM5_Init+0x98>)
 800228c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800228e:	4b1c      	ldr	r3, [pc, #112]	@ (8002300 <MX_TIM5_Init+0x94>)
 8002290:	2200      	movs	r2, #0
 8002292:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002294:	4b1a      	ldr	r3, [pc, #104]	@ (8002300 <MX_TIM5_Init+0x94>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800229a:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <MX_TIM5_Init+0x94>)
 800229c:	f04f 32ff 	mov.w	r2, #4294967295
 80022a0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a2:	4b17      	ldr	r3, [pc, #92]	@ (8002300 <MX_TIM5_Init+0x94>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a8:	4b15      	ldr	r3, [pc, #84]	@ (8002300 <MX_TIM5_Init+0x94>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022ae:	4814      	ldr	r0, [pc, #80]	@ (8002300 <MX_TIM5_Init+0x94>)
 80022b0:	f002 ff1c 	bl	80050ec <HAL_TIM_Base_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80022ba:	f000 fa25 	bl	8002708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	4619      	mov	r1, r3
 80022ca:	480d      	ldr	r0, [pc, #52]	@ (8002300 <MX_TIM5_Init+0x94>)
 80022cc:	f002 ff5d 	bl	800518a <HAL_TIM_ConfigClockSource>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80022d6:	f000 fa17 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022da:	2300      	movs	r3, #0
 80022dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80022e2:	463b      	mov	r3, r7
 80022e4:	4619      	mov	r1, r3
 80022e6:	4806      	ldr	r0, [pc, #24]	@ (8002300 <MX_TIM5_Init+0x94>)
 80022e8:	f003 f95c 	bl	80055a4 <HAL_TIMEx_MasterConfigSynchronization>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80022f2:	f000 fa09 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20025d90 	.word	0x20025d90
 8002304:	40000c00 	.word	0x40000c00

08002308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08e      	sub	sp, #56	@ 0x38
 800230c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	60da      	str	r2, [r3, #12]
 800231c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	623b      	str	r3, [r7, #32]
 8002322:	4bb2      	ldr	r3, [pc, #712]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	4ab1      	ldr	r2, [pc, #708]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 8002328:	f043 0304 	orr.w	r3, r3, #4
 800232c:	6313      	str	r3, [r2, #48]	@ 0x30
 800232e:	4baf      	ldr	r3, [pc, #700]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	623b      	str	r3, [r7, #32]
 8002338:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	4bab      	ldr	r3, [pc, #684]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	4aaa      	ldr	r2, [pc, #680]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 8002344:	f043 0320 	orr.w	r3, r3, #32
 8002348:	6313      	str	r3, [r2, #48]	@ 0x30
 800234a:	4ba8      	ldr	r3, [pc, #672]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	f003 0320 	and.w	r3, r3, #32
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	61bb      	str	r3, [r7, #24]
 800235a:	4ba4      	ldr	r3, [pc, #656]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	4aa3      	ldr	r2, [pc, #652]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 8002360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002364:	6313      	str	r3, [r2, #48]	@ 0x30
 8002366:	4ba1      	ldr	r3, [pc, #644]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	4b9d      	ldr	r3, [pc, #628]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	4a9c      	ldr	r2, [pc, #624]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6313      	str	r3, [r2, #48]	@ 0x30
 8002382:	4b9a      	ldr	r3, [pc, #616]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	4b96      	ldr	r3, [pc, #600]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	4a95      	ldr	r2, [pc, #596]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	6313      	str	r3, [r2, #48]	@ 0x30
 800239e:	4b93      	ldr	r3, [pc, #588]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b8f      	ldr	r3, [pc, #572]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	4a8e      	ldr	r2, [pc, #568]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 80023b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ba:	4b8c      	ldr	r3, [pc, #560]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	4b88      	ldr	r3, [pc, #544]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	4a87      	ldr	r2, [pc, #540]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 80023d0:	f043 0310 	orr.w	r3, r3, #16
 80023d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d6:	4b85      	ldr	r3, [pc, #532]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	4b81      	ldr	r3, [pc, #516]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	4a80      	ldr	r2, [pc, #512]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 80023ec:	f043 0308 	orr.w	r3, r3, #8
 80023f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f2:	4b7e      	ldr	r3, [pc, #504]	@ (80025ec <MX_GPIO_Init+0x2e4>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80023fe:	2200      	movs	r2, #0
 8002400:	2116      	movs	r1, #22
 8002402:	487b      	ldr	r0, [pc, #492]	@ (80025f0 <MX_GPIO_Init+0x2e8>)
 8002404:	f001 f8a4 	bl	8003550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002408:	2200      	movs	r2, #0
 800240a:	2180      	movs	r1, #128	@ 0x80
 800240c:	4879      	ldr	r0, [pc, #484]	@ (80025f4 <MX_GPIO_Init+0x2ec>)
 800240e:	f001 f89f 	bl	8003550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002412:	2200      	movs	r2, #0
 8002414:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002418:	4877      	ldr	r0, [pc, #476]	@ (80025f8 <MX_GPIO_Init+0x2f0>)
 800241a:	f001 f899 	bl	8003550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800241e:	2200      	movs	r2, #0
 8002420:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002424:	4875      	ldr	r0, [pc, #468]	@ (80025fc <MX_GPIO_Init+0x2f4>)
 8002426:	f001 f893 	bl	8003550 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800242a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800242e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800243c:	230c      	movs	r3, #12
 800243e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002444:	4619      	mov	r1, r3
 8002446:	486e      	ldr	r0, [pc, #440]	@ (8002600 <MX_GPIO_Init+0x2f8>)
 8002448:	f000 fdca 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800244c:	2301      	movs	r3, #1
 800244e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002458:	2303      	movs	r3, #3
 800245a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800245c:	230c      	movs	r3, #12
 800245e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002460:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002464:	4619      	mov	r1, r3
 8002466:	4862      	ldr	r0, [pc, #392]	@ (80025f0 <MX_GPIO_Init+0x2e8>)
 8002468:	f000 fdba 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800246c:	2316      	movs	r3, #22
 800246e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002470:	2301      	movs	r3, #1
 8002472:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800247c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002480:	4619      	mov	r1, r3
 8002482:	485b      	ldr	r0, [pc, #364]	@ (80025f0 <MX_GPIO_Init+0x2e8>)
 8002484:	f000 fdac 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002488:	f248 0307 	movw	r3, #32775	@ 0x8007
 800248c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800248e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002492:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800249c:	4619      	mov	r1, r3
 800249e:	4855      	ldr	r0, [pc, #340]	@ (80025f4 <MX_GPIO_Init+0x2ec>)
 80024a0:	f000 fd9e 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80024a4:	2380      	movs	r3, #128	@ 0x80
 80024a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a8:	2301      	movs	r3, #1
 80024aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b0:	2300      	movs	r3, #0
 80024b2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80024b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024b8:	4619      	mov	r1, r3
 80024ba:	484e      	ldr	r0, [pc, #312]	@ (80025f4 <MX_GPIO_Init+0x2ec>)
 80024bc:	f000 fd90 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80024c0:	2320      	movs	r3, #32
 80024c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80024c4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80024c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80024ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024d2:	4619      	mov	r1, r3
 80024d4:	4846      	ldr	r0, [pc, #280]	@ (80025f0 <MX_GPIO_Init+0x2e8>)
 80024d6:	f000 fd83 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80024da:	2304      	movs	r3, #4
 80024dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024de:	2300      	movs	r3, #0
 80024e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80024e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024ea:	4619      	mov	r1, r3
 80024ec:	4845      	ldr	r0, [pc, #276]	@ (8002604 <MX_GPIO_Init+0x2fc>)
 80024ee:	f000 fd77 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80024f2:	f248 1333 	movw	r3, #33075	@ 0x8133
 80024f6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	2302      	movs	r3, #2
 80024fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002500:	2303      	movs	r3, #3
 8002502:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002504:	230c      	movs	r3, #12
 8002506:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002508:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800250c:	4619      	mov	r1, r3
 800250e:	483b      	ldr	r0, [pc, #236]	@ (80025fc <MX_GPIO_Init+0x2f4>)
 8002510:	f000 fd66 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002514:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002522:	2303      	movs	r3, #3
 8002524:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002526:	230c      	movs	r3, #12
 8002528:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800252a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800252e:	4619      	mov	r1, r3
 8002530:	4835      	ldr	r0, [pc, #212]	@ (8002608 <MX_GPIO_Init+0x300>)
 8002532:	f000 fd55 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002536:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800253a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002548:	230c      	movs	r3, #12
 800254a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002550:	4619      	mov	r1, r3
 8002552:	482c      	ldr	r0, [pc, #176]	@ (8002604 <MX_GPIO_Init+0x2fc>)
 8002554:	f000 fd44 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002558:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800255c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800255e:	2300      	movs	r3, #0
 8002560:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002566:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800256a:	4619      	mov	r1, r3
 800256c:	4825      	ldr	r0, [pc, #148]	@ (8002604 <MX_GPIO_Init+0x2fc>)
 800256e:	f000 fd37 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002572:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002576:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002578:	2302      	movs	r3, #2
 800257a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002580:	2303      	movs	r3, #3
 8002582:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002584:	230c      	movs	r3, #12
 8002586:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002588:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800258c:	4619      	mov	r1, r3
 800258e:	481a      	ldr	r0, [pc, #104]	@ (80025f8 <MX_GPIO_Init+0x2f0>)
 8002590:	f000 fd26 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002594:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002598:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800259a:	2300      	movs	r3, #0
 800259c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80025a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025a6:	4619      	mov	r1, r3
 80025a8:	4813      	ldr	r0, [pc, #76]	@ (80025f8 <MX_GPIO_Init+0x2f0>)
 80025aa:	f000 fd19 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80025ae:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80025b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b4:	2301      	movs	r3, #1
 80025b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025bc:	2300      	movs	r3, #0
 80025be:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025c4:	4619      	mov	r1, r3
 80025c6:	480c      	ldr	r0, [pc, #48]	@ (80025f8 <MX_GPIO_Init+0x2f0>)
 80025c8:	f000 fd0a 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80025cc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80025d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025da:	2303      	movs	r3, #3
 80025dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025de:	2307      	movs	r3, #7
 80025e0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025e6:	4619      	mov	r1, r3
 80025e8:	e010      	b.n	800260c <MX_GPIO_Init+0x304>
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40020800 	.word	0x40020800
 80025f4:	40020000 	.word	0x40020000
 80025f8:	40020c00 	.word	0x40020c00
 80025fc:	40021800 	.word	0x40021800
 8002600:	40021400 	.word	0x40021400
 8002604:	40020400 	.word	0x40020400
 8002608:	40021000 	.word	0x40021000
 800260c:	4812      	ldr	r0, [pc, #72]	@ (8002658 <MX_GPIO_Init+0x350>)
 800260e:	f000 fce7 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002612:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002616:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002618:	2301      	movs	r3, #1
 800261a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2300      	movs	r3, #0
 8002622:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002628:	4619      	mov	r1, r3
 800262a:	480c      	ldr	r0, [pc, #48]	@ (800265c <MX_GPIO_Init+0x354>)
 800262c:	f000 fcd8 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002630:	2360      	movs	r3, #96	@ 0x60
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002634:	2302      	movs	r3, #2
 8002636:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263c:	2303      	movs	r3, #3
 800263e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002640:	230c      	movs	r3, #12
 8002642:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002648:	4619      	mov	r1, r3
 800264a:	4805      	ldr	r0, [pc, #20]	@ (8002660 <MX_GPIO_Init+0x358>)
 800264c:	f000 fcc8 	bl	8002fe0 <HAL_GPIO_Init>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002650:	bf00      	nop
 8002652:	3738      	adds	r7, #56	@ 0x38
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40020000 	.word	0x40020000
 800265c:	40021800 	.word	0x40021800
 8002660:	40020400 	.word	0x40020400

08002664 <SystemClockOverride>:

/* USER CODE BEGIN 4 */
void SystemClockOverride(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b094      	sub	sp, #80	@ 0x50
 8002668:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	4b24      	ldr	r3, [pc, #144]	@ (8002700 <SystemClockOverride+0x9c>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	4a23      	ldr	r2, [pc, #140]	@ (8002700 <SystemClockOverride+0x9c>)
 8002674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002678:	6413      	str	r3, [r2, #64]	@ 0x40
 800267a:	4b21      	ldr	r3, [pc, #132]	@ (8002700 <SystemClockOverride+0x9c>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	4b1e      	ldr	r3, [pc, #120]	@ (8002704 <SystemClockOverride+0xa0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a1d      	ldr	r2, [pc, #116]	@ (8002704 <SystemClockOverride+0xa0>)
 8002690:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b1b      	ldr	r3, [pc, #108]	@ (8002704 <SystemClockOverride+0xa0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026a2:	2301      	movs	r3, #1
 80026a4:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026aa:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026ac:	2302      	movs	r3, #2
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026b0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80026b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 80026b6:	2308      	movs	r3, #8
 80026b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80026ba:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80026be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026c0:	2302      	movs	r3, #2
 80026c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80026c4:	2307      	movs	r3, #7
 80026c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80026c8:	f107 030c 	add.w	r3, r7, #12
 80026cc:	4618      	mov	r0, r3
 80026ce:	f001 fbbf 	bl	8003e50 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80026d2:	230f      	movs	r3, #15
 80026d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026d6:	2302      	movs	r3, #2
 80026d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026da:	2300      	movs	r3, #0
 80026dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026de:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80026e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80026e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80026ea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80026ee:	2105      	movs	r1, #5
 80026f0:	4618      	mov	r0, r3
 80026f2:	f001 fe25 	bl	8004340 <HAL_RCC_ClockConfig>
}
 80026f6:	bf00      	nop
 80026f8:	3750      	adds	r7, #80	@ 0x50
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	40007000 	.word	0x40007000

08002708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800270c:	b672      	cpsid	i
}
 800270e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <Error_Handler+0x8>

08002714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	607b      	str	r3, [r7, #4]
 800271e:	4b10      	ldr	r3, [pc, #64]	@ (8002760 <HAL_MspInit+0x4c>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002722:	4a0f      	ldr	r2, [pc, #60]	@ (8002760 <HAL_MspInit+0x4c>)
 8002724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002728:	6453      	str	r3, [r2, #68]	@ 0x44
 800272a:	4b0d      	ldr	r3, [pc, #52]	@ (8002760 <HAL_MspInit+0x4c>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	603b      	str	r3, [r7, #0]
 800273a:	4b09      	ldr	r3, [pc, #36]	@ (8002760 <HAL_MspInit+0x4c>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	4a08      	ldr	r2, [pc, #32]	@ (8002760 <HAL_MspInit+0x4c>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002744:	6413      	str	r3, [r2, #64]	@ 0x40
 8002746:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <HAL_MspInit+0x4c>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002752:	2007      	movs	r0, #7
 8002754:	f000 fc10 	bl	8002f78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40023800 	.word	0x40023800

08002764 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	@ 0x28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a29      	ldr	r2, [pc, #164]	@ (8002828 <HAL_I2C_MspInit+0xc4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d14b      	bne.n	800281e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	4b28      	ldr	r3, [pc, #160]	@ (800282c <HAL_I2C_MspInit+0xc8>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	4a27      	ldr	r2, [pc, #156]	@ (800282c <HAL_I2C_MspInit+0xc8>)
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	6313      	str	r3, [r2, #48]	@ 0x30
 8002796:	4b25      	ldr	r3, [pc, #148]	@ (800282c <HAL_I2C_MspInit+0xc8>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	4b21      	ldr	r3, [pc, #132]	@ (800282c <HAL_I2C_MspInit+0xc8>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	4a20      	ldr	r2, [pc, #128]	@ (800282c <HAL_I2C_MspInit+0xc8>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b2:	4b1e      	ldr	r3, [pc, #120]	@ (800282c <HAL_I2C_MspInit+0xc8>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80027be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027c4:	2312      	movs	r3, #18
 80027c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027cc:	2300      	movs	r3, #0
 80027ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027d0:	2304      	movs	r3, #4
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	4619      	mov	r1, r3
 80027da:	4815      	ldr	r0, [pc, #84]	@ (8002830 <HAL_I2C_MspInit+0xcc>)
 80027dc:	f000 fc00 	bl	8002fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80027e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027e6:	2312      	movs	r3, #18
 80027e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ee:	2300      	movs	r3, #0
 80027f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027f2:	2304      	movs	r3, #4
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80027f6:	f107 0314 	add.w	r3, r7, #20
 80027fa:	4619      	mov	r1, r3
 80027fc:	480d      	ldr	r0, [pc, #52]	@ (8002834 <HAL_I2C_MspInit+0xd0>)
 80027fe:	f000 fbef 	bl	8002fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	4b09      	ldr	r3, [pc, #36]	@ (800282c <HAL_I2C_MspInit+0xc8>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	4a08      	ldr	r2, [pc, #32]	@ (800282c <HAL_I2C_MspInit+0xc8>)
 800280c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002810:	6413      	str	r3, [r2, #64]	@ 0x40
 8002812:	4b06      	ldr	r3, [pc, #24]	@ (800282c <HAL_I2C_MspInit+0xc8>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800281e:	bf00      	nop
 8002820:	3728      	adds	r7, #40	@ 0x28
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40005c00 	.word	0x40005c00
 800282c:	40023800 	.word	0x40023800
 8002830:	40020800 	.word	0x40020800
 8002834:	40020000 	.word	0x40020000

08002838 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b09a      	sub	sp, #104	@ 0x68
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002854:	2230      	movs	r2, #48	@ 0x30
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f002 ff1f 	bl	800569c <memset>
  if(hltdc->Instance==LTDC)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a81      	ldr	r2, [pc, #516]	@ (8002a68 <HAL_LTDC_MspInit+0x230>)
 8002864:	4293      	cmp	r3, r2
 8002866:	f040 80fa 	bne.w	8002a5e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800286a:	2308      	movs	r3, #8
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800286e:	2332      	movs	r3, #50	@ 0x32
 8002870:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002872:	2302      	movs	r3, #2
 8002874:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002876:	2300      	movs	r3, #0
 8002878:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800287a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800287e:	4618      	mov	r0, r3
 8002880:	f001 ff6a 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800288a:	f7ff ff3d 	bl	8002708 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	623b      	str	r3, [r7, #32]
 8002892:	4b76      	ldr	r3, [pc, #472]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002896:	4a75      	ldr	r2, [pc, #468]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 8002898:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800289c:	6453      	str	r3, [r2, #68]	@ 0x44
 800289e:	4b73      	ldr	r3, [pc, #460]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028a6:	623b      	str	r3, [r7, #32]
 80028a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	4b6f      	ldr	r3, [pc, #444]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	4a6e      	ldr	r2, [pc, #440]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 80028b4:	f043 0320 	orr.w	r3, r3, #32
 80028b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ba:	4b6c      	ldr	r3, [pc, #432]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	f003 0320 	and.w	r3, r3, #32
 80028c2:	61fb      	str	r3, [r7, #28]
 80028c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	4b68      	ldr	r3, [pc, #416]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	4a67      	ldr	r2, [pc, #412]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028d6:	4b65      	ldr	r3, [pc, #404]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	4b61      	ldr	r3, [pc, #388]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	4a60      	ldr	r2, [pc, #384]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f2:	4b5e      	ldr	r3, [pc, #376]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	4b5a      	ldr	r3, [pc, #360]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	4a59      	ldr	r2, [pc, #356]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 8002908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800290c:	6313      	str	r3, [r2, #48]	@ 0x30
 800290e:	4b57      	ldr	r3, [pc, #348]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	4b53      	ldr	r3, [pc, #332]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	4a52      	ldr	r2, [pc, #328]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 8002924:	f043 0304 	orr.w	r3, r3, #4
 8002928:	6313      	str	r3, [r2, #48]	@ 0x30
 800292a:	4b50      	ldr	r3, [pc, #320]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	4b4c      	ldr	r3, [pc, #304]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	4a4b      	ldr	r2, [pc, #300]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 8002940:	f043 0308 	orr.w	r3, r3, #8
 8002944:	6313      	str	r3, [r2, #48]	@ 0x30
 8002946:	4b49      	ldr	r3, [pc, #292]	@ (8002a6c <HAL_LTDC_MspInit+0x234>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002956:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2302      	movs	r3, #2
 800295a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002960:	2300      	movs	r3, #0
 8002962:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002964:	230e      	movs	r3, #14
 8002966:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002968:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800296c:	4619      	mov	r1, r3
 800296e:	4840      	ldr	r0, [pc, #256]	@ (8002a70 <HAL_LTDC_MspInit+0x238>)
 8002970:	f000 fb36 	bl	8002fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002974:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002978:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	2300      	movs	r3, #0
 8002984:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002986:	230e      	movs	r3, #14
 8002988:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800298e:	4619      	mov	r1, r3
 8002990:	4838      	ldr	r0, [pc, #224]	@ (8002a74 <HAL_LTDC_MspInit+0x23c>)
 8002992:	f000 fb25 	bl	8002fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002996:	2303      	movs	r3, #3
 8002998:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a2:	2300      	movs	r3, #0
 80029a4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80029a6:	2309      	movs	r3, #9
 80029a8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029aa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80029ae:	4619      	mov	r1, r3
 80029b0:	4831      	ldr	r0, [pc, #196]	@ (8002a78 <HAL_LTDC_MspInit+0x240>)
 80029b2:	f000 fb15 	bl	8002fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80029b6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80029ba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	2302      	movs	r3, #2
 80029be:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c4:	2300      	movs	r3, #0
 80029c6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80029c8:	230e      	movs	r3, #14
 80029ca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80029d0:	4619      	mov	r1, r3
 80029d2:	4829      	ldr	r0, [pc, #164]	@ (8002a78 <HAL_LTDC_MspInit+0x240>)
 80029d4:	f000 fb04 	bl	8002fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80029d8:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80029dc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029de:	2302      	movs	r3, #2
 80029e0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	2300      	movs	r3, #0
 80029e8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80029ea:	230e      	movs	r3, #14
 80029ec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80029f2:	4619      	mov	r1, r3
 80029f4:	4821      	ldr	r0, [pc, #132]	@ (8002a7c <HAL_LTDC_MspInit+0x244>)
 80029f6:	f000 faf3 	bl	8002fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80029fa:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80029fe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a0c:	230e      	movs	r3, #14
 8002a0e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a14:	4619      	mov	r1, r3
 8002a16:	481a      	ldr	r0, [pc, #104]	@ (8002a80 <HAL_LTDC_MspInit+0x248>)
 8002a18:	f000 fae2 	bl	8002fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002a1c:	2348      	movs	r3, #72	@ 0x48
 8002a1e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a2c:	230e      	movs	r3, #14
 8002a2e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a30:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a34:	4619      	mov	r1, r3
 8002a36:	4813      	ldr	r0, [pc, #76]	@ (8002a84 <HAL_LTDC_MspInit+0x24c>)
 8002a38:	f000 fad2 	bl	8002fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002a3c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002a40:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	2302      	movs	r3, #2
 8002a44:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002a4e:	2309      	movs	r3, #9
 8002a50:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a52:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a56:	4619      	mov	r1, r3
 8002a58:	4808      	ldr	r0, [pc, #32]	@ (8002a7c <HAL_LTDC_MspInit+0x244>)
 8002a5a:	f000 fac1 	bl	8002fe0 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002a5e:	bf00      	nop
 8002a60:	3768      	adds	r7, #104	@ 0x68
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40016800 	.word	0x40016800
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40021400 	.word	0x40021400
 8002a74:	40020000 	.word	0x40020000
 8002a78:	40020400 	.word	0x40020400
 8002a7c:	40021800 	.word	0x40021800
 8002a80:	40020800 	.word	0x40020800
 8002a84:	40020c00 	.word	0x40020c00

08002a88 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0b      	ldr	r2, [pc, #44]	@ (8002ac4 <HAL_RNG_MspInit+0x3c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d10d      	bne.n	8002ab6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac8 <HAL_RNG_MspInit+0x40>)
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa2:	4a09      	ldr	r2, [pc, #36]	@ (8002ac8 <HAL_RNG_MspInit+0x40>)
 8002aa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002aa8:	6353      	str	r3, [r2, #52]	@ 0x34
 8002aaa:	4b07      	ldr	r3, [pc, #28]	@ (8002ac8 <HAL_RNG_MspInit+0x40>)
 8002aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002ab6:	bf00      	nop
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	50060800 	.word	0x50060800
 8002ac8:	40023800 	.word	0x40023800

08002acc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	@ 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a19      	ldr	r2, [pc, #100]	@ (8002b50 <HAL_SPI_MspInit+0x84>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d12c      	bne.n	8002b48 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	4b18      	ldr	r3, [pc, #96]	@ (8002b54 <HAL_SPI_MspInit+0x88>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af6:	4a17      	ldr	r2, [pc, #92]	@ (8002b54 <HAL_SPI_MspInit+0x88>)
 8002af8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002afe:	4b15      	ldr	r3, [pc, #84]	@ (8002b54 <HAL_SPI_MspInit+0x88>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	4b11      	ldr	r3, [pc, #68]	@ (8002b54 <HAL_SPI_MspInit+0x88>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	4a10      	ldr	r2, [pc, #64]	@ (8002b54 <HAL_SPI_MspInit+0x88>)
 8002b14:	f043 0320 	orr.w	r3, r3, #32
 8002b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b54 <HAL_SPI_MspInit+0x88>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1e:	f003 0320 	and.w	r3, r3, #32
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002b26:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b34:	2300      	movs	r3, #0
 8002b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002b38:	2305      	movs	r3, #5
 8002b3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	4619      	mov	r1, r3
 8002b42:	4805      	ldr	r0, [pc, #20]	@ (8002b58 <HAL_SPI_MspInit+0x8c>)
 8002b44:	f000 fa4c 	bl	8002fe0 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002b48:	bf00      	nop
 8002b4a:	3728      	adds	r7, #40	@ 0x28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40015000 	.word	0x40015000
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40021400 	.word	0x40021400

08002b5c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a08      	ldr	r2, [pc, #32]	@ (8002b8c <HAL_SPI_MspDeInit+0x30>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d10a      	bne.n	8002b84 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002b6e:	4b08      	ldr	r3, [pc, #32]	@ (8002b90 <HAL_SPI_MspDeInit+0x34>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	4a07      	ldr	r2, [pc, #28]	@ (8002b90 <HAL_SPI_MspDeInit+0x34>)
 8002b74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002b78:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002b7a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002b7e:	4805      	ldr	r0, [pc, #20]	@ (8002b94 <HAL_SPI_MspDeInit+0x38>)
 8002b80:	f000 fbda 	bl	8003338 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40015000 	.word	0x40015000
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40021400 	.word	0x40021400

08002b98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba8:	d10e      	bne.n	8002bc8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	4b13      	ldr	r3, [pc, #76]	@ (8002bfc <HAL_TIM_Base_MspInit+0x64>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	4a12      	ldr	r2, [pc, #72]	@ (8002bfc <HAL_TIM_Base_MspInit+0x64>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bba:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <HAL_TIM_Base_MspInit+0x64>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002bc6:	e012      	b.n	8002bee <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8002c00 <HAL_TIM_Base_MspInit+0x68>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d10d      	bne.n	8002bee <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	4b09      	ldr	r3, [pc, #36]	@ (8002bfc <HAL_TIM_Base_MspInit+0x64>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	4a08      	ldr	r2, [pc, #32]	@ (8002bfc <HAL_TIM_Base_MspInit+0x64>)
 8002bdc:	f043 0308 	orr.w	r3, r3, #8
 8002be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002be2:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <HAL_TIM_Base_MspInit+0x64>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40000c00 	.word	0x40000c00

08002c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c08:	bf00      	nop
 8002c0a:	e7fd      	b.n	8002c08 <NMI_Handler+0x4>

08002c0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c10:	bf00      	nop
 8002c12:	e7fd      	b.n	8002c10 <HardFault_Handler+0x4>

08002c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <MemManage_Handler+0x4>

08002c1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c20:	bf00      	nop
 8002c22:	e7fd      	b.n	8002c20 <BusFault_Handler+0x4>

08002c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <UsageFault_Handler+0x4>

08002c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c5a:	f000 f897 	bl	8002d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0
}
 8002c66:	bf00      	nop
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c74:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <SystemInit+0x20>)
 8002c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7a:	4a05      	ldr	r2, [pc, #20]	@ (8002c90 <SystemInit+0x20>)
 8002c7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002c94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ccc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c98:	f7ff ffea 	bl	8002c70 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c9c:	480c      	ldr	r0, [pc, #48]	@ (8002cd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c9e:	490d      	ldr	r1, [pc, #52]	@ (8002cd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8002cd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ca4:	e002      	b.n	8002cac <LoopCopyDataInit>

08002ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002caa:	3304      	adds	r3, #4

08002cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb0:	d3f9      	bcc.n	8002ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002cdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cb4:	4c0a      	ldr	r4, [pc, #40]	@ (8002ce0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cb8:	e001      	b.n	8002cbe <LoopFillZerobss>

08002cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cbc:	3204      	adds	r2, #4

08002cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc0:	d3fb      	bcc.n	8002cba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002cc2:	f002 fcf3 	bl	80056ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cc6:	f7ff f92a 	bl	8001f1e <main>
  bx  lr    
 8002cca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ccc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cd4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002cd8:	0800730c 	.word	0x0800730c
  ldr r2, =_sbss
 8002cdc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002ce0:	20025ddc 	.word	0x20025ddc

08002ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ce4:	e7fe      	b.n	8002ce4 <ADC_IRQHandler>
	...

08002ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cec:	4b0e      	ldr	r3, [pc, #56]	@ (8002d28 <HAL_Init+0x40>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8002d28 <HAL_Init+0x40>)
 8002cf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <HAL_Init+0x40>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8002d28 <HAL_Init+0x40>)
 8002cfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d04:	4b08      	ldr	r3, [pc, #32]	@ (8002d28 <HAL_Init+0x40>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a07      	ldr	r2, [pc, #28]	@ (8002d28 <HAL_Init+0x40>)
 8002d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d10:	2003      	movs	r0, #3
 8002d12:	f000 f931 	bl	8002f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d16:	2000      	movs	r0, #0
 8002d18:	f000 f808 	bl	8002d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d1c:	f7ff fcfa 	bl	8002714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40023c00 	.word	0x40023c00

08002d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d34:	4b12      	ldr	r3, [pc, #72]	@ (8002d80 <HAL_InitTick+0x54>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b12      	ldr	r3, [pc, #72]	@ (8002d84 <HAL_InitTick+0x58>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f93b 	bl	8002fc6 <HAL_SYSTICK_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e00e      	b.n	8002d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b0f      	cmp	r3, #15
 8002d5e:	d80a      	bhi.n	8002d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d60:	2200      	movs	r2, #0
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295
 8002d68:	f000 f911 	bl	8002f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d6c:	4a06      	ldr	r2, [pc, #24]	@ (8002d88 <HAL_InitTick+0x5c>)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	e000      	b.n	8002d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000018 	.word	0x20000018
 8002d84:	20000020 	.word	0x20000020
 8002d88:	2000001c 	.word	0x2000001c

08002d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d90:	4b06      	ldr	r3, [pc, #24]	@ (8002dac <HAL_IncTick+0x20>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b06      	ldr	r3, [pc, #24]	@ (8002db0 <HAL_IncTick+0x24>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	4a04      	ldr	r2, [pc, #16]	@ (8002db0 <HAL_IncTick+0x24>)
 8002d9e:	6013      	str	r3, [r2, #0]
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20000020 	.word	0x20000020
 8002db0:	20025dd8 	.word	0x20025dd8

08002db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return uwTick;
 8002db8:	4b03      	ldr	r3, [pc, #12]	@ (8002dc8 <HAL_GetTick+0x14>)
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20025dd8 	.word	0x20025dd8

08002dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd4:	f7ff ffee 	bl	8002db4 <HAL_GetTick>
 8002dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d005      	beq.n	8002df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002de6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e10 <HAL_Delay+0x44>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4413      	add	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002df2:	bf00      	nop
 8002df4:	f7ff ffde 	bl	8002db4 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d8f7      	bhi.n	8002df4 <HAL_Delay+0x28>
  {
  }
}
 8002e04:	bf00      	nop
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000020 	.word	0x20000020

08002e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e24:	4b0c      	ldr	r3, [pc, #48]	@ (8002e58 <__NVIC_SetPriorityGrouping+0x44>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e30:	4013      	ands	r3, r2
 8002e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e46:	4a04      	ldr	r2, [pc, #16]	@ (8002e58 <__NVIC_SetPriorityGrouping+0x44>)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	60d3      	str	r3, [r2, #12]
}
 8002e4c:	bf00      	nop
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e60:	4b04      	ldr	r3, [pc, #16]	@ (8002e74 <__NVIC_GetPriorityGrouping+0x18>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	0a1b      	lsrs	r3, r3, #8
 8002e66:	f003 0307 	and.w	r3, r3, #7
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	6039      	str	r1, [r7, #0]
 8002e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	db0a      	blt.n	8002ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	490c      	ldr	r1, [pc, #48]	@ (8002ec4 <__NVIC_SetPriority+0x4c>)
 8002e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e96:	0112      	lsls	r2, r2, #4
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea0:	e00a      	b.n	8002eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	4908      	ldr	r1, [pc, #32]	@ (8002ec8 <__NVIC_SetPriority+0x50>)
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	3b04      	subs	r3, #4
 8002eb0:	0112      	lsls	r2, r2, #4
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	761a      	strb	r2, [r3, #24]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000e100 	.word	0xe000e100
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b089      	sub	sp, #36	@ 0x24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f1c3 0307 	rsb	r3, r3, #7
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	bf28      	it	cs
 8002eea:	2304      	movcs	r3, #4
 8002eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	2b06      	cmp	r3, #6
 8002ef4:	d902      	bls.n	8002efc <NVIC_EncodePriority+0x30>
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3b03      	subs	r3, #3
 8002efa:	e000      	b.n	8002efe <NVIC_EncodePriority+0x32>
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f00:	f04f 32ff 	mov.w	r2, #4294967295
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43da      	mvns	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	401a      	ands	r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f14:	f04f 31ff 	mov.w	r1, #4294967295
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	43d9      	mvns	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f24:	4313      	orrs	r3, r2
         );
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3724      	adds	r7, #36	@ 0x24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
	...

08002f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f44:	d301      	bcc.n	8002f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f46:	2301      	movs	r3, #1
 8002f48:	e00f      	b.n	8002f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f74 <SysTick_Config+0x40>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f52:	210f      	movs	r1, #15
 8002f54:	f04f 30ff 	mov.w	r0, #4294967295
 8002f58:	f7ff ff8e 	bl	8002e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f5c:	4b05      	ldr	r3, [pc, #20]	@ (8002f74 <SysTick_Config+0x40>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f62:	4b04      	ldr	r3, [pc, #16]	@ (8002f74 <SysTick_Config+0x40>)
 8002f64:	2207      	movs	r2, #7
 8002f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	e000e010 	.word	0xe000e010

08002f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff ff47 	bl	8002e14 <__NVIC_SetPriorityGrouping>
}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b086      	sub	sp, #24
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	4603      	mov	r3, r0
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa0:	f7ff ff5c 	bl	8002e5c <__NVIC_GetPriorityGrouping>
 8002fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	6978      	ldr	r0, [r7, #20]
 8002fac:	f7ff ff8e 	bl	8002ecc <NVIC_EncodePriority>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff ff5d 	bl	8002e78 <__NVIC_SetPriority>
}
 8002fbe:	bf00      	nop
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff ffb0 	bl	8002f34 <SysTick_Config>
 8002fd4:	4603      	mov	r3, r0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	@ 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
 8002ffa:	e177      	b.n	80032ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	429a      	cmp	r2, r3
 8003016:	f040 8166 	bne.w	80032e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	2b01      	cmp	r3, #1
 8003024:	d005      	beq.n	8003032 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800302e:	2b02      	cmp	r3, #2
 8003030:	d130      	bne.n	8003094 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	2203      	movs	r2, #3
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003068:	2201      	movs	r2, #1
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f003 0201 	and.w	r2, r3, #1
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	2b03      	cmp	r3, #3
 800309e:	d017      	beq.n	80030d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	2203      	movs	r2, #3
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d123      	bne.n	8003124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	08da      	lsrs	r2, r3, #3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3208      	adds	r2, #8
 80030e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	220f      	movs	r2, #15
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	08da      	lsrs	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3208      	adds	r2, #8
 800311e:	69b9      	ldr	r1, [r7, #24]
 8003120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	2203      	movs	r2, #3
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 0203 	and.w	r2, r3, #3
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80c0 	beq.w	80032e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	4b66      	ldr	r3, [pc, #408]	@ (8003304 <HAL_GPIO_Init+0x324>)
 800316c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316e:	4a65      	ldr	r2, [pc, #404]	@ (8003304 <HAL_GPIO_Init+0x324>)
 8003170:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003174:	6453      	str	r3, [r2, #68]	@ 0x44
 8003176:	4b63      	ldr	r3, [pc, #396]	@ (8003304 <HAL_GPIO_Init+0x324>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003182:	4a61      	ldr	r2, [pc, #388]	@ (8003308 <HAL_GPIO_Init+0x328>)
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	3302      	adds	r3, #2
 800318a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	220f      	movs	r2, #15
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a58      	ldr	r2, [pc, #352]	@ (800330c <HAL_GPIO_Init+0x32c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d037      	beq.n	800321e <HAL_GPIO_Init+0x23e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a57      	ldr	r2, [pc, #348]	@ (8003310 <HAL_GPIO_Init+0x330>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d031      	beq.n	800321a <HAL_GPIO_Init+0x23a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a56      	ldr	r2, [pc, #344]	@ (8003314 <HAL_GPIO_Init+0x334>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d02b      	beq.n	8003216 <HAL_GPIO_Init+0x236>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a55      	ldr	r2, [pc, #340]	@ (8003318 <HAL_GPIO_Init+0x338>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d025      	beq.n	8003212 <HAL_GPIO_Init+0x232>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a54      	ldr	r2, [pc, #336]	@ (800331c <HAL_GPIO_Init+0x33c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d01f      	beq.n	800320e <HAL_GPIO_Init+0x22e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a53      	ldr	r2, [pc, #332]	@ (8003320 <HAL_GPIO_Init+0x340>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d019      	beq.n	800320a <HAL_GPIO_Init+0x22a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a52      	ldr	r2, [pc, #328]	@ (8003324 <HAL_GPIO_Init+0x344>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d013      	beq.n	8003206 <HAL_GPIO_Init+0x226>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a51      	ldr	r2, [pc, #324]	@ (8003328 <HAL_GPIO_Init+0x348>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00d      	beq.n	8003202 <HAL_GPIO_Init+0x222>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a50      	ldr	r2, [pc, #320]	@ (800332c <HAL_GPIO_Init+0x34c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d007      	beq.n	80031fe <HAL_GPIO_Init+0x21e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a4f      	ldr	r2, [pc, #316]	@ (8003330 <HAL_GPIO_Init+0x350>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d101      	bne.n	80031fa <HAL_GPIO_Init+0x21a>
 80031f6:	2309      	movs	r3, #9
 80031f8:	e012      	b.n	8003220 <HAL_GPIO_Init+0x240>
 80031fa:	230a      	movs	r3, #10
 80031fc:	e010      	b.n	8003220 <HAL_GPIO_Init+0x240>
 80031fe:	2308      	movs	r3, #8
 8003200:	e00e      	b.n	8003220 <HAL_GPIO_Init+0x240>
 8003202:	2307      	movs	r3, #7
 8003204:	e00c      	b.n	8003220 <HAL_GPIO_Init+0x240>
 8003206:	2306      	movs	r3, #6
 8003208:	e00a      	b.n	8003220 <HAL_GPIO_Init+0x240>
 800320a:	2305      	movs	r3, #5
 800320c:	e008      	b.n	8003220 <HAL_GPIO_Init+0x240>
 800320e:	2304      	movs	r3, #4
 8003210:	e006      	b.n	8003220 <HAL_GPIO_Init+0x240>
 8003212:	2303      	movs	r3, #3
 8003214:	e004      	b.n	8003220 <HAL_GPIO_Init+0x240>
 8003216:	2302      	movs	r3, #2
 8003218:	e002      	b.n	8003220 <HAL_GPIO_Init+0x240>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <HAL_GPIO_Init+0x240>
 800321e:	2300      	movs	r3, #0
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	f002 0203 	and.w	r2, r2, #3
 8003226:	0092      	lsls	r2, r2, #2
 8003228:	4093      	lsls	r3, r2
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4313      	orrs	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003230:	4935      	ldr	r1, [pc, #212]	@ (8003308 <HAL_GPIO_Init+0x328>)
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	089b      	lsrs	r3, r3, #2
 8003236:	3302      	adds	r3, #2
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800323e:	4b3d      	ldr	r3, [pc, #244]	@ (8003334 <HAL_GPIO_Init+0x354>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003262:	4a34      	ldr	r2, [pc, #208]	@ (8003334 <HAL_GPIO_Init+0x354>)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003268:	4b32      	ldr	r3, [pc, #200]	@ (8003334 <HAL_GPIO_Init+0x354>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800328c:	4a29      	ldr	r2, [pc, #164]	@ (8003334 <HAL_GPIO_Init+0x354>)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003292:	4b28      	ldr	r3, [pc, #160]	@ (8003334 <HAL_GPIO_Init+0x354>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003334 <HAL_GPIO_Init+0x354>)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003334 <HAL_GPIO_Init+0x354>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032e0:	4a14      	ldr	r2, [pc, #80]	@ (8003334 <HAL_GPIO_Init+0x354>)
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3301      	adds	r3, #1
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b0f      	cmp	r3, #15
 80032f0:	f67f ae84 	bls.w	8002ffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	3724      	adds	r7, #36	@ 0x24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800
 8003308:	40013800 	.word	0x40013800
 800330c:	40020000 	.word	0x40020000
 8003310:	40020400 	.word	0x40020400
 8003314:	40020800 	.word	0x40020800
 8003318:	40020c00 	.word	0x40020c00
 800331c:	40021000 	.word	0x40021000
 8003320:	40021400 	.word	0x40021400
 8003324:	40021800 	.word	0x40021800
 8003328:	40021c00 	.word	0x40021c00
 800332c:	40022000 	.word	0x40022000
 8003330:	40022400 	.word	0x40022400
 8003334:	40013c00 	.word	0x40013c00

08003338 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	e0d9      	b.n	8003508 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003354:	2201      	movs	r2, #1
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4013      	ands	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	429a      	cmp	r2, r3
 800336c:	f040 80c9 	bne.w	8003502 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003370:	4a6b      	ldr	r2, [pc, #428]	@ (8003520 <HAL_GPIO_DeInit+0x1e8>)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	089b      	lsrs	r3, r3, #2
 8003376:	3302      	adds	r3, #2
 8003378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	220f      	movs	r2, #15
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	4013      	ands	r3, r2
 8003390:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a63      	ldr	r2, [pc, #396]	@ (8003524 <HAL_GPIO_DeInit+0x1ec>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d037      	beq.n	800340a <HAL_GPIO_DeInit+0xd2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a62      	ldr	r2, [pc, #392]	@ (8003528 <HAL_GPIO_DeInit+0x1f0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d031      	beq.n	8003406 <HAL_GPIO_DeInit+0xce>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a61      	ldr	r2, [pc, #388]	@ (800352c <HAL_GPIO_DeInit+0x1f4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d02b      	beq.n	8003402 <HAL_GPIO_DeInit+0xca>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a60      	ldr	r2, [pc, #384]	@ (8003530 <HAL_GPIO_DeInit+0x1f8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d025      	beq.n	80033fe <HAL_GPIO_DeInit+0xc6>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a5f      	ldr	r2, [pc, #380]	@ (8003534 <HAL_GPIO_DeInit+0x1fc>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d01f      	beq.n	80033fa <HAL_GPIO_DeInit+0xc2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a5e      	ldr	r2, [pc, #376]	@ (8003538 <HAL_GPIO_DeInit+0x200>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d019      	beq.n	80033f6 <HAL_GPIO_DeInit+0xbe>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a5d      	ldr	r2, [pc, #372]	@ (800353c <HAL_GPIO_DeInit+0x204>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d013      	beq.n	80033f2 <HAL_GPIO_DeInit+0xba>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a5c      	ldr	r2, [pc, #368]	@ (8003540 <HAL_GPIO_DeInit+0x208>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00d      	beq.n	80033ee <HAL_GPIO_DeInit+0xb6>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a5b      	ldr	r2, [pc, #364]	@ (8003544 <HAL_GPIO_DeInit+0x20c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d007      	beq.n	80033ea <HAL_GPIO_DeInit+0xb2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a5a      	ldr	r2, [pc, #360]	@ (8003548 <HAL_GPIO_DeInit+0x210>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d101      	bne.n	80033e6 <HAL_GPIO_DeInit+0xae>
 80033e2:	2309      	movs	r3, #9
 80033e4:	e012      	b.n	800340c <HAL_GPIO_DeInit+0xd4>
 80033e6:	230a      	movs	r3, #10
 80033e8:	e010      	b.n	800340c <HAL_GPIO_DeInit+0xd4>
 80033ea:	2308      	movs	r3, #8
 80033ec:	e00e      	b.n	800340c <HAL_GPIO_DeInit+0xd4>
 80033ee:	2307      	movs	r3, #7
 80033f0:	e00c      	b.n	800340c <HAL_GPIO_DeInit+0xd4>
 80033f2:	2306      	movs	r3, #6
 80033f4:	e00a      	b.n	800340c <HAL_GPIO_DeInit+0xd4>
 80033f6:	2305      	movs	r3, #5
 80033f8:	e008      	b.n	800340c <HAL_GPIO_DeInit+0xd4>
 80033fa:	2304      	movs	r3, #4
 80033fc:	e006      	b.n	800340c <HAL_GPIO_DeInit+0xd4>
 80033fe:	2303      	movs	r3, #3
 8003400:	e004      	b.n	800340c <HAL_GPIO_DeInit+0xd4>
 8003402:	2302      	movs	r3, #2
 8003404:	e002      	b.n	800340c <HAL_GPIO_DeInit+0xd4>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <HAL_GPIO_DeInit+0xd4>
 800340a:	2300      	movs	r3, #0
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	f002 0203 	and.w	r2, r2, #3
 8003412:	0092      	lsls	r2, r2, #2
 8003414:	4093      	lsls	r3, r2
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	429a      	cmp	r2, r3
 800341a:	d132      	bne.n	8003482 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800341c:	4b4b      	ldr	r3, [pc, #300]	@ (800354c <HAL_GPIO_DeInit+0x214>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	43db      	mvns	r3, r3
 8003424:	4949      	ldr	r1, [pc, #292]	@ (800354c <HAL_GPIO_DeInit+0x214>)
 8003426:	4013      	ands	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800342a:	4b48      	ldr	r3, [pc, #288]	@ (800354c <HAL_GPIO_DeInit+0x214>)
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	43db      	mvns	r3, r3
 8003432:	4946      	ldr	r1, [pc, #280]	@ (800354c <HAL_GPIO_DeInit+0x214>)
 8003434:	4013      	ands	r3, r2
 8003436:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003438:	4b44      	ldr	r3, [pc, #272]	@ (800354c <HAL_GPIO_DeInit+0x214>)
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	43db      	mvns	r3, r3
 8003440:	4942      	ldr	r1, [pc, #264]	@ (800354c <HAL_GPIO_DeInit+0x214>)
 8003442:	4013      	ands	r3, r2
 8003444:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003446:	4b41      	ldr	r3, [pc, #260]	@ (800354c <HAL_GPIO_DeInit+0x214>)
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	43db      	mvns	r3, r3
 800344e:	493f      	ldr	r1, [pc, #252]	@ (800354c <HAL_GPIO_DeInit+0x214>)
 8003450:	4013      	ands	r3, r2
 8003452:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	220f      	movs	r2, #15
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003464:	4a2e      	ldr	r2, [pc, #184]	@ (8003520 <HAL_GPIO_DeInit+0x1e8>)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	089b      	lsrs	r3, r3, #2
 800346a:	3302      	adds	r3, #2
 800346c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	43da      	mvns	r2, r3
 8003474:	482a      	ldr	r0, [pc, #168]	@ (8003520 <HAL_GPIO_DeInit+0x1e8>)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	400a      	ands	r2, r1
 800347c:	3302      	adds	r3, #2
 800347e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	2103      	movs	r1, #3
 800348c:	fa01 f303 	lsl.w	r3, r1, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	401a      	ands	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	08da      	lsrs	r2, r3, #3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3208      	adds	r2, #8
 80034a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	220f      	movs	r2, #15
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	08d2      	lsrs	r2, r2, #3
 80034b8:	4019      	ands	r1, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3208      	adds	r2, #8
 80034be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2103      	movs	r1, #3
 80034cc:	fa01 f303 	lsl.w	r3, r1, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	401a      	ands	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	2101      	movs	r1, #1
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	fa01 f303 	lsl.w	r3, r1, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	401a      	ands	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	2103      	movs	r1, #3
 80034f6:	fa01 f303 	lsl.w	r3, r1, r3
 80034fa:	43db      	mvns	r3, r3
 80034fc:	401a      	ands	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	3301      	adds	r3, #1
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2b0f      	cmp	r3, #15
 800350c:	f67f af22 	bls.w	8003354 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003510:	bf00      	nop
 8003512:	bf00      	nop
 8003514:	371c      	adds	r7, #28
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40013800 	.word	0x40013800
 8003524:	40020000 	.word	0x40020000
 8003528:	40020400 	.word	0x40020400
 800352c:	40020800 	.word	0x40020800
 8003530:	40020c00 	.word	0x40020c00
 8003534:	40021000 	.word	0x40021000
 8003538:	40021400 	.word	0x40021400
 800353c:	40021800 	.word	0x40021800
 8003540:	40021c00 	.word	0x40021c00
 8003544:	40022000 	.word	0x40022000
 8003548:	40022400 	.word	0x40022400
 800354c:	40013c00 	.word	0x40013c00

08003550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	807b      	strh	r3, [r7, #2]
 800355c:	4613      	mov	r3, r2
 800355e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003560:	787b      	ldrb	r3, [r7, #1]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800356c:	e003      	b.n	8003576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	041a      	lsls	r2, r3, #16
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	619a      	str	r2, [r3, #24]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e12b      	b.n	80037ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff f8da 	bl	8002764 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2224      	movs	r2, #36	@ 0x24
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035e8:	f001 f8a2 	bl	8004730 <HAL_RCC_GetPCLK1Freq>
 80035ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4a81      	ldr	r2, [pc, #516]	@ (80037f8 <HAL_I2C_Init+0x274>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d807      	bhi.n	8003608 <HAL_I2C_Init+0x84>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4a80      	ldr	r2, [pc, #512]	@ (80037fc <HAL_I2C_Init+0x278>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	bf94      	ite	ls
 8003600:	2301      	movls	r3, #1
 8003602:	2300      	movhi	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e006      	b.n	8003616 <HAL_I2C_Init+0x92>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a7d      	ldr	r2, [pc, #500]	@ (8003800 <HAL_I2C_Init+0x27c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	bf94      	ite	ls
 8003610:	2301      	movls	r3, #1
 8003612:	2300      	movhi	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e0e7      	b.n	80037ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4a78      	ldr	r2, [pc, #480]	@ (8003804 <HAL_I2C_Init+0x280>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	0c9b      	lsrs	r3, r3, #18
 8003628:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	4a6a      	ldr	r2, [pc, #424]	@ (80037f8 <HAL_I2C_Init+0x274>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d802      	bhi.n	8003658 <HAL_I2C_Init+0xd4>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	3301      	adds	r3, #1
 8003656:	e009      	b.n	800366c <HAL_I2C_Init+0xe8>
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800365e:	fb02 f303 	mul.w	r3, r2, r3
 8003662:	4a69      	ldr	r2, [pc, #420]	@ (8003808 <HAL_I2C_Init+0x284>)
 8003664:	fba2 2303 	umull	r2, r3, r2, r3
 8003668:	099b      	lsrs	r3, r3, #6
 800366a:	3301      	adds	r3, #1
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	430b      	orrs	r3, r1
 8003672:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800367e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	495c      	ldr	r1, [pc, #368]	@ (80037f8 <HAL_I2C_Init+0x274>)
 8003688:	428b      	cmp	r3, r1
 800368a:	d819      	bhi.n	80036c0 <HAL_I2C_Init+0x13c>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1e59      	subs	r1, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	fbb1 f3f3 	udiv	r3, r1, r3
 800369a:	1c59      	adds	r1, r3, #1
 800369c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036a0:	400b      	ands	r3, r1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_I2C_Init+0x138>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1e59      	subs	r1, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80036b4:	3301      	adds	r3, #1
 80036b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ba:	e051      	b.n	8003760 <HAL_I2C_Init+0x1dc>
 80036bc:	2304      	movs	r3, #4
 80036be:	e04f      	b.n	8003760 <HAL_I2C_Init+0x1dc>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d111      	bne.n	80036ec <HAL_I2C_Init+0x168>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1e58      	subs	r0, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6859      	ldr	r1, [r3, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	440b      	add	r3, r1
 80036d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036da:	3301      	adds	r3, #1
 80036dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	e012      	b.n	8003712 <HAL_I2C_Init+0x18e>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	1e58      	subs	r0, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6859      	ldr	r1, [r3, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	0099      	lsls	r1, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003702:	3301      	adds	r3, #1
 8003704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_I2C_Init+0x196>
 8003716:	2301      	movs	r3, #1
 8003718:	e022      	b.n	8003760 <HAL_I2C_Init+0x1dc>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10e      	bne.n	8003740 <HAL_I2C_Init+0x1bc>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1e58      	subs	r0, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6859      	ldr	r1, [r3, #4]
 800372a:	460b      	mov	r3, r1
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	440b      	add	r3, r1
 8003730:	fbb0 f3f3 	udiv	r3, r0, r3
 8003734:	3301      	adds	r3, #1
 8003736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800373e:	e00f      	b.n	8003760 <HAL_I2C_Init+0x1dc>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	1e58      	subs	r0, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6859      	ldr	r1, [r3, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	0099      	lsls	r1, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	fbb0 f3f3 	udiv	r3, r0, r3
 8003756:	3301      	adds	r3, #1
 8003758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	6809      	ldr	r1, [r1, #0]
 8003764:	4313      	orrs	r3, r2
 8003766:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69da      	ldr	r2, [r3, #28]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800378e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6911      	ldr	r1, [r2, #16]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68d2      	ldr	r2, [r2, #12]
 800379a:	4311      	orrs	r1, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	000186a0 	.word	0x000186a0
 80037fc:	001e847f 	.word	0x001e847f
 8003800:	003d08ff 	.word	0x003d08ff
 8003804:	431bde83 	.word	0x431bde83
 8003808:	10624dd3 	.word	0x10624dd3

0800380c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b20      	cmp	r3, #32
 8003820:	d129      	bne.n	8003876 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2224      	movs	r2, #36	@ 0x24
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0210 	bic.w	r2, r2, #16
 8003848:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	e000      	b.n	8003878 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003876:	2302      	movs	r3, #2
  }
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b20      	cmp	r3, #32
 800389c:	d12a      	bne.n	80038f4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2224      	movs	r2, #36	@ 0x24
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0201 	bic.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038bc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80038be:	89fb      	ldrh	r3, [r7, #14]
 80038c0:	f023 030f 	bic.w	r3, r3, #15
 80038c4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	89fb      	ldrh	r3, [r7, #14]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	89fa      	ldrh	r2, [r7, #14]
 80038d6:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	e000      	b.n	80038f6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80038f4:	2302      	movs	r3, #2
  }
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e0bf      	b.n	8003a96 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fe ff84 	bl	8002838 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003946:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6999      	ldr	r1, [r3, #24]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800395c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6899      	ldr	r1, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	4b4a      	ldr	r3, [pc, #296]	@ (8003aa0 <HAL_LTDC_Init+0x19c>)
 8003978:	400b      	ands	r3, r1
 800397a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	041b      	lsls	r3, r3, #16
 8003982:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6899      	ldr	r1, [r3, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	431a      	orrs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68d9      	ldr	r1, [r3, #12]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4b3e      	ldr	r3, [pc, #248]	@ (8003aa0 <HAL_LTDC_Init+0x19c>)
 80039a6:	400b      	ands	r3, r1
 80039a8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	041b      	lsls	r3, r3, #16
 80039b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68d9      	ldr	r1, [r3, #12]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1a      	ldr	r2, [r3, #32]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6919      	ldr	r1, [r3, #16]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4b33      	ldr	r3, [pc, #204]	@ (8003aa0 <HAL_LTDC_Init+0x19c>)
 80039d4:	400b      	ands	r3, r1
 80039d6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	041b      	lsls	r3, r3, #16
 80039de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6919      	ldr	r1, [r3, #16]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6959      	ldr	r1, [r3, #20]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4b27      	ldr	r3, [pc, #156]	@ (8003aa0 <HAL_LTDC_Init+0x19c>)
 8003a02:	400b      	ands	r3, r1
 8003a04:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0a:	041b      	lsls	r3, r3, #16
 8003a0c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6959      	ldr	r1, [r3, #20]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003a34:	041b      	lsls	r3, r3, #16
 8003a36:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003a46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0206 	orr.w	r2, r2, #6
 8003a72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	f000f800 	.word	0xf000f800

08003aa4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003aa4:	b5b0      	push	{r4, r5, r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_LTDC_ConfigLayer+0x1a>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e02c      	b.n	8003b18 <HAL_LTDC_ConfigLayer+0x74>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2134      	movs	r1, #52	@ 0x34
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	4413      	add	r3, r2
 8003ada:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4614      	mov	r4, r2
 8003ae2:	461d      	mov	r5, r3
 8003ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f811 	bl	8003b20 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2201      	movs	r2, #1
 8003b04:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bdb0      	pop	{r4, r5, r7, pc}

08003b20 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b089      	sub	sp, #36	@ 0x24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	0c1b      	lsrs	r3, r3, #16
 8003b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3c:	4413      	add	r3, r2
 8003b3e:	041b      	lsls	r3, r3, #16
 8003b40:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	01db      	lsls	r3, r3, #7
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3384      	adds	r3, #132	@ 0x84
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	4611      	mov	r1, r2
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	01d2      	lsls	r2, r2, #7
 8003b5c:	440a      	add	r2, r1
 8003b5e:	3284      	adds	r2, #132	@ 0x84
 8003b60:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003b64:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	0c1b      	lsrs	r3, r3, #16
 8003b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b76:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b78:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4619      	mov	r1, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	01db      	lsls	r3, r3, #7
 8003b84:	440b      	add	r3, r1
 8003b86:	3384      	adds	r3, #132	@ 0x84
 8003b88:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b8e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b9e:	4413      	add	r3, r2
 8003ba0:	041b      	lsls	r3, r3, #16
 8003ba2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	01db      	lsls	r3, r3, #7
 8003bae:	4413      	add	r3, r2
 8003bb0:	3384      	adds	r3, #132	@ 0x84
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	6812      	ldr	r2, [r2, #0]
 8003bb8:	4611      	mov	r1, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	01d2      	lsls	r2, r2, #7
 8003bbe:	440a      	add	r2, r1
 8003bc0:	3284      	adds	r2, #132	@ 0x84
 8003bc2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003bc6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bd6:	4413      	add	r3, r2
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4619      	mov	r1, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	01db      	lsls	r3, r3, #7
 8003be4:	440b      	add	r3, r1
 8003be6:	3384      	adds	r3, #132	@ 0x84
 8003be8:	4619      	mov	r1, r3
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	01db      	lsls	r3, r3, #7
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3384      	adds	r3, #132	@ 0x84
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	4611      	mov	r1, r2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	01d2      	lsls	r2, r2, #7
 8003c0a:	440a      	add	r2, r1
 8003c0c:	3284      	adds	r2, #132	@ 0x84
 8003c0e:	f023 0307 	bic.w	r3, r3, #7
 8003c12:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	01db      	lsls	r3, r3, #7
 8003c1e:	4413      	add	r3, r2
 8003c20:	3384      	adds	r3, #132	@ 0x84
 8003c22:	461a      	mov	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003c30:	021b      	lsls	r3, r3, #8
 8003c32:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003c3a:	041b      	lsls	r3, r3, #16
 8003c3c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	061b      	lsls	r3, r3, #24
 8003c44:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	01db      	lsls	r3, r3, #7
 8003c50:	4413      	add	r3, r2
 8003c52:	3384      	adds	r3, #132	@ 0x84
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	01db      	lsls	r3, r3, #7
 8003c60:	4413      	add	r3, r2
 8003c62:	3384      	adds	r3, #132	@ 0x84
 8003c64:	461a      	mov	r2, r3
 8003c66:	2300      	movs	r3, #0
 8003c68:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003c70:	461a      	mov	r2, r3
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	431a      	orrs	r2, r3
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	01db      	lsls	r3, r3, #7
 8003c84:	440b      	add	r3, r1
 8003c86:	3384      	adds	r3, #132	@ 0x84
 8003c88:	4619      	mov	r1, r3
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	461a      	mov	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	01db      	lsls	r3, r3, #7
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3384      	adds	r3, #132	@ 0x84
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	01d2      	lsls	r2, r2, #7
 8003caa:	440a      	add	r2, r1
 8003cac:	3284      	adds	r2, #132	@ 0x84
 8003cae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003cb2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	01db      	lsls	r3, r3, #7
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3384      	adds	r3, #132	@ 0x84
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	01db      	lsls	r3, r3, #7
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3384      	adds	r3, #132	@ 0x84
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	4611      	mov	r1, r2
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	01d2      	lsls	r2, r2, #7
 8003ce4:	440a      	add	r2, r1
 8003ce6:	3284      	adds	r2, #132	@ 0x84
 8003ce8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003cec:	f023 0307 	bic.w	r3, r3, #7
 8003cf0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	69da      	ldr	r2, [r3, #28]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	68f9      	ldr	r1, [r7, #12]
 8003cfc:	6809      	ldr	r1, [r1, #0]
 8003cfe:	4608      	mov	r0, r1
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	01c9      	lsls	r1, r1, #7
 8003d04:	4401      	add	r1, r0
 8003d06:	3184      	adds	r1, #132	@ 0x84
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	01db      	lsls	r3, r3, #7
 8003d16:	4413      	add	r3, r2
 8003d18:	3384      	adds	r3, #132	@ 0x84
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	01db      	lsls	r3, r3, #7
 8003d26:	4413      	add	r3, r2
 8003d28:	3384      	adds	r3, #132	@ 0x84
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	01db      	lsls	r3, r3, #7
 8003d3a:	4413      	add	r3, r2
 8003d3c:	3384      	adds	r3, #132	@ 0x84
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d44:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d102      	bne.n	8003d54 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003d4e:	2304      	movs	r3, #4
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	e01b      	b.n	8003d8c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d102      	bne.n	8003d62 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	61fb      	str	r3, [r7, #28]
 8003d60:	e014      	b.n	8003d8c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d00b      	beq.n	8003d82 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d007      	beq.n	8003d82 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003d76:	2b03      	cmp	r3, #3
 8003d78:	d003      	beq.n	8003d82 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003d7e:	2b07      	cmp	r3, #7
 8003d80:	d102      	bne.n	8003d88 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003d82:	2302      	movs	r3, #2
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	e001      	b.n	8003d8c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	01db      	lsls	r3, r3, #7
 8003d96:	4413      	add	r3, r2
 8003d98:	3384      	adds	r3, #132	@ 0x84
 8003d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	4611      	mov	r1, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	01d2      	lsls	r2, r2, #7
 8003da6:	440a      	add	r2, r1
 8003da8:	3284      	adds	r2, #132	@ 0x84
 8003daa:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8003dae:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	fb02 f303 	mul.w	r3, r2, r3
 8003dba:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	6859      	ldr	r1, [r3, #4]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	1acb      	subs	r3, r1, r3
 8003dc6:	69f9      	ldr	r1, [r7, #28]
 8003dc8:	fb01 f303 	mul.w	r3, r1, r3
 8003dcc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003dce:	68f9      	ldr	r1, [r7, #12]
 8003dd0:	6809      	ldr	r1, [r1, #0]
 8003dd2:	4608      	mov	r0, r1
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	01c9      	lsls	r1, r1, #7
 8003dd8:	4401      	add	r1, r0
 8003dda:	3184      	adds	r1, #132	@ 0x84
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	01db      	lsls	r3, r3, #7
 8003dea:	4413      	add	r3, r2
 8003dec:	3384      	adds	r3, #132	@ 0x84
 8003dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	4611      	mov	r1, r2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	01d2      	lsls	r2, r2, #7
 8003dfa:	440a      	add	r2, r1
 8003dfc:	3284      	adds	r2, #132	@ 0x84
 8003dfe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003e02:	f023 0307 	bic.w	r3, r3, #7
 8003e06:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	01db      	lsls	r3, r3, #7
 8003e12:	4413      	add	r3, r2
 8003e14:	3384      	adds	r3, #132	@ 0x84
 8003e16:	461a      	mov	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	01db      	lsls	r3, r3, #7
 8003e28:	4413      	add	r3, r2
 8003e2a:	3384      	adds	r3, #132	@ 0x84
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	4611      	mov	r1, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	01d2      	lsls	r2, r2, #7
 8003e38:	440a      	add	r2, r1
 8003e3a:	3284      	adds	r2, #132	@ 0x84
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6013      	str	r3, [r2, #0]
}
 8003e42:	bf00      	nop
 8003e44:	3724      	adds	r7, #36	@ 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e267      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d075      	beq.n	8003f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e6e:	4b88      	ldr	r3, [pc, #544]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d00c      	beq.n	8003e94 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e7a:	4b85      	ldr	r3, [pc, #532]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d112      	bne.n	8003eac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e86:	4b82      	ldr	r3, [pc, #520]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e92:	d10b      	bne.n	8003eac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e94:	4b7e      	ldr	r3, [pc, #504]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d05b      	beq.n	8003f58 <HAL_RCC_OscConfig+0x108>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d157      	bne.n	8003f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e242      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb4:	d106      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x74>
 8003eb6:	4b76      	ldr	r3, [pc, #472]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a75      	ldr	r2, [pc, #468]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e01d      	b.n	8003f00 <HAL_RCC_OscConfig+0xb0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x98>
 8003ece:	4b70      	ldr	r3, [pc, #448]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a6f      	ldr	r2, [pc, #444]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	4b6d      	ldr	r3, [pc, #436]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a6c      	ldr	r2, [pc, #432]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	e00b      	b.n	8003f00 <HAL_RCC_OscConfig+0xb0>
 8003ee8:	4b69      	ldr	r3, [pc, #420]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a68      	ldr	r2, [pc, #416]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	4b66      	ldr	r3, [pc, #408]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a65      	ldr	r2, [pc, #404]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d013      	beq.n	8003f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f08:	f7fe ff54 	bl	8002db4 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f10:	f7fe ff50 	bl	8002db4 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b64      	cmp	r3, #100	@ 0x64
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e207      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f22:	4b5b      	ldr	r3, [pc, #364]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0xc0>
 8003f2e:	e014      	b.n	8003f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7fe ff40 	bl	8002db4 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f38:	f7fe ff3c 	bl	8002db4 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	@ 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e1f3      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4a:	4b51      	ldr	r3, [pc, #324]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0xe8>
 8003f56:	e000      	b.n	8003f5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d063      	beq.n	800402e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f66:	4b4a      	ldr	r3, [pc, #296]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00b      	beq.n	8003f8a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f72:	4b47      	ldr	r3, [pc, #284]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d11c      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f7e:	4b44      	ldr	r3, [pc, #272]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d116      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8a:	4b41      	ldr	r3, [pc, #260]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x152>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e1c7      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4937      	ldr	r1, [pc, #220]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fb6:	e03a      	b.n	800402e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc0:	4b34      	ldr	r3, [pc, #208]	@ (8004094 <HAL_RCC_OscConfig+0x244>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc6:	f7fe fef5 	bl	8002db4 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fce:	f7fe fef1 	bl	8002db4 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e1a8      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fec:	4b28      	ldr	r3, [pc, #160]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4925      	ldr	r1, [pc, #148]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	600b      	str	r3, [r1, #0]
 8004000:	e015      	b.n	800402e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004002:	4b24      	ldr	r3, [pc, #144]	@ (8004094 <HAL_RCC_OscConfig+0x244>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fe fed4 	bl	8002db4 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004010:	f7fe fed0 	bl	8002db4 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e187      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004022:	4b1b      	ldr	r3, [pc, #108]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d036      	beq.n	80040a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d016      	beq.n	8004070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004042:	4b15      	ldr	r3, [pc, #84]	@ (8004098 <HAL_RCC_OscConfig+0x248>)
 8004044:	2201      	movs	r2, #1
 8004046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7fe feb4 	bl	8002db4 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004050:	f7fe feb0 	bl	8002db4 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e167      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004062:	4b0b      	ldr	r3, [pc, #44]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8004064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0x200>
 800406e:	e01b      	b.n	80040a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004070:	4b09      	ldr	r3, [pc, #36]	@ (8004098 <HAL_RCC_OscConfig+0x248>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004076:	f7fe fe9d 	bl	8002db4 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800407c:	e00e      	b.n	800409c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800407e:	f7fe fe99 	bl	8002db4 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d907      	bls.n	800409c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e150      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
 8004090:	40023800 	.word	0x40023800
 8004094:	42470000 	.word	0x42470000
 8004098:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800409c:	4b88      	ldr	r3, [pc, #544]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800409e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1ea      	bne.n	800407e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8097 	beq.w	80041e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b6:	2300      	movs	r3, #0
 80040b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ba:	4b81      	ldr	r3, [pc, #516]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10f      	bne.n	80040e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	4b7d      	ldr	r3, [pc, #500]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	4a7c      	ldr	r2, [pc, #496]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040d6:	4b7a      	ldr	r3, [pc, #488]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040e2:	2301      	movs	r3, #1
 80040e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e6:	4b77      	ldr	r3, [pc, #476]	@ (80042c4 <HAL_RCC_OscConfig+0x474>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d118      	bne.n	8004124 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040f2:	4b74      	ldr	r3, [pc, #464]	@ (80042c4 <HAL_RCC_OscConfig+0x474>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a73      	ldr	r2, [pc, #460]	@ (80042c4 <HAL_RCC_OscConfig+0x474>)
 80040f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fe:	f7fe fe59 	bl	8002db4 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004106:	f7fe fe55 	bl	8002db4 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e10c      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004118:	4b6a      	ldr	r3, [pc, #424]	@ (80042c4 <HAL_RCC_OscConfig+0x474>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0f0      	beq.n	8004106 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d106      	bne.n	800413a <HAL_RCC_OscConfig+0x2ea>
 800412c:	4b64      	ldr	r3, [pc, #400]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004130:	4a63      	ldr	r2, [pc, #396]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	6713      	str	r3, [r2, #112]	@ 0x70
 8004138:	e01c      	b.n	8004174 <HAL_RCC_OscConfig+0x324>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b05      	cmp	r3, #5
 8004140:	d10c      	bne.n	800415c <HAL_RCC_OscConfig+0x30c>
 8004142:	4b5f      	ldr	r3, [pc, #380]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004146:	4a5e      	ldr	r2, [pc, #376]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004148:	f043 0304 	orr.w	r3, r3, #4
 800414c:	6713      	str	r3, [r2, #112]	@ 0x70
 800414e:	4b5c      	ldr	r3, [pc, #368]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004152:	4a5b      	ldr	r2, [pc, #364]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	6713      	str	r3, [r2, #112]	@ 0x70
 800415a:	e00b      	b.n	8004174 <HAL_RCC_OscConfig+0x324>
 800415c:	4b58      	ldr	r3, [pc, #352]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004160:	4a57      	ldr	r2, [pc, #348]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004162:	f023 0301 	bic.w	r3, r3, #1
 8004166:	6713      	str	r3, [r2, #112]	@ 0x70
 8004168:	4b55      	ldr	r3, [pc, #340]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800416a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800416c:	4a54      	ldr	r2, [pc, #336]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800416e:	f023 0304 	bic.w	r3, r3, #4
 8004172:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d015      	beq.n	80041a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fe fe1a 	bl	8002db4 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004182:	e00a      	b.n	800419a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004184:	f7fe fe16 	bl	8002db4 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e0cb      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419a:	4b49      	ldr	r3, [pc, #292]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0ee      	beq.n	8004184 <HAL_RCC_OscConfig+0x334>
 80041a6:	e014      	b.n	80041d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a8:	f7fe fe04 	bl	8002db4 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ae:	e00a      	b.n	80041c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b0:	f7fe fe00 	bl	8002db4 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041be:	4293      	cmp	r3, r2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e0b5      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c6:	4b3e      	ldr	r3, [pc, #248]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1ee      	bne.n	80041b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041d2:	7dfb      	ldrb	r3, [r7, #23]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d105      	bne.n	80041e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d8:	4b39      	ldr	r3, [pc, #228]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	4a38      	ldr	r2, [pc, #224]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80a1 	beq.w	8004330 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ee:	4b34      	ldr	r3, [pc, #208]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d05c      	beq.n	80042b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d141      	bne.n	8004286 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004202:	4b31      	ldr	r3, [pc, #196]	@ (80042c8 <HAL_RCC_OscConfig+0x478>)
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004208:	f7fe fdd4 	bl	8002db4 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004210:	f7fe fdd0 	bl	8002db4 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e087      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004222:	4b27      	ldr	r3, [pc, #156]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69da      	ldr	r2, [r3, #28]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423c:	019b      	lsls	r3, r3, #6
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	3b01      	subs	r3, #1
 8004248:	041b      	lsls	r3, r3, #16
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004250:	061b      	lsls	r3, r3, #24
 8004252:	491b      	ldr	r1, [pc, #108]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004254:	4313      	orrs	r3, r2
 8004256:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004258:	4b1b      	ldr	r3, [pc, #108]	@ (80042c8 <HAL_RCC_OscConfig+0x478>)
 800425a:	2201      	movs	r2, #1
 800425c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425e:	f7fe fda9 	bl	8002db4 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004266:	f7fe fda5 	bl	8002db4 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e05c      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004278:	4b11      	ldr	r3, [pc, #68]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x416>
 8004284:	e054      	b.n	8004330 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004286:	4b10      	ldr	r3, [pc, #64]	@ (80042c8 <HAL_RCC_OscConfig+0x478>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428c:	f7fe fd92 	bl	8002db4 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004294:	f7fe fd8e 	bl	8002db4 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e045      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a6:	4b06      	ldr	r3, [pc, #24]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x444>
 80042b2:	e03d      	b.n	8004330 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d107      	bne.n	80042cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e038      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40007000 	.word	0x40007000
 80042c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042cc:	4b1b      	ldr	r3, [pc, #108]	@ (800433c <HAL_RCC_OscConfig+0x4ec>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d028      	beq.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d121      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d11a      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042fc:	4013      	ands	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004302:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004304:	4293      	cmp	r3, r2
 8004306:	d111      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004312:	085b      	lsrs	r3, r3, #1
 8004314:	3b01      	subs	r3, #1
 8004316:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004318:	429a      	cmp	r2, r3
 800431a:	d107      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004326:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40023800 	.word	0x40023800

08004340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0cc      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004354:	4b68      	ldr	r3, [pc, #416]	@ (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 030f 	and.w	r3, r3, #15
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d90c      	bls.n	800437c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	4b65      	ldr	r3, [pc, #404]	@ (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b63      	ldr	r3, [pc, #396]	@ (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0b8      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d020      	beq.n	80043ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004394:	4b59      	ldr	r3, [pc, #356]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4a58      	ldr	r2, [pc, #352]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800439e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043ac:	4b53      	ldr	r3, [pc, #332]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	4a52      	ldr	r2, [pc, #328]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80043b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b8:	4b50      	ldr	r3, [pc, #320]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	494d      	ldr	r1, [pc, #308]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d044      	beq.n	8004460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	4b47      	ldr	r3, [pc, #284]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d119      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e07f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d107      	bne.n	800440e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fe:	4b3f      	ldr	r3, [pc, #252]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e06f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440e:	4b3b      	ldr	r3, [pc, #236]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e067      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800441e:	4b37      	ldr	r3, [pc, #220]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f023 0203 	bic.w	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	4934      	ldr	r1, [pc, #208]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	4313      	orrs	r3, r2
 800442e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004430:	f7fe fcc0 	bl	8002db4 <HAL_GetTick>
 8004434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004436:	e00a      	b.n	800444e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004438:	f7fe fcbc 	bl	8002db4 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e04f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444e:	4b2b      	ldr	r3, [pc, #172]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 020c 	and.w	r2, r3, #12
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	429a      	cmp	r2, r3
 800445e:	d1eb      	bne.n	8004438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004460:	4b25      	ldr	r3, [pc, #148]	@ (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 030f 	and.w	r3, r3, #15
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d20c      	bcs.n	8004488 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b22      	ldr	r3, [pc, #136]	@ (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004476:	4b20      	ldr	r3, [pc, #128]	@ (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e032      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004494:	4b19      	ldr	r3, [pc, #100]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4916      	ldr	r1, [pc, #88]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b2:	4b12      	ldr	r3, [pc, #72]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	490e      	ldr	r1, [pc, #56]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044c6:	f000 f821 	bl	800450c <HAL_RCC_GetSysClockFreq>
 80044ca:	4602      	mov	r2, r0
 80044cc:	4b0b      	ldr	r3, [pc, #44]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	490a      	ldr	r1, [pc, #40]	@ (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 80044d8:	5ccb      	ldrb	r3, [r1, r3]
 80044da:	fa22 f303 	lsr.w	r3, r2, r3
 80044de:	4a09      	ldr	r2, [pc, #36]	@ (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80044e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80044e2:	4b09      	ldr	r3, [pc, #36]	@ (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fe fc20 	bl	8002d2c <HAL_InitTick>

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40023c00 	.word	0x40023c00
 80044fc:	40023800 	.word	0x40023800
 8004500:	080072e4 	.word	0x080072e4
 8004504:	20000018 	.word	0x20000018
 8004508:	2000001c 	.word	0x2000001c

0800450c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800450c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004510:	b094      	sub	sp, #80	@ 0x50
 8004512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004524:	4b79      	ldr	r3, [pc, #484]	@ (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 030c 	and.w	r3, r3, #12
 800452c:	2b08      	cmp	r3, #8
 800452e:	d00d      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0x40>
 8004530:	2b08      	cmp	r3, #8
 8004532:	f200 80e1 	bhi.w	80046f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <HAL_RCC_GetSysClockFreq+0x34>
 800453a:	2b04      	cmp	r3, #4
 800453c:	d003      	beq.n	8004546 <HAL_RCC_GetSysClockFreq+0x3a>
 800453e:	e0db      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004540:	4b73      	ldr	r3, [pc, #460]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x204>)
 8004542:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004544:	e0db      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004546:	4b73      	ldr	r3, [pc, #460]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x208>)
 8004548:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800454a:	e0d8      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800454c:	4b6f      	ldr	r3, [pc, #444]	@ (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004554:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004556:	4b6d      	ldr	r3, [pc, #436]	@ (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d063      	beq.n	800462a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004562:	4b6a      	ldr	r3, [pc, #424]	@ (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	099b      	lsrs	r3, r3, #6
 8004568:	2200      	movs	r2, #0
 800456a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800456c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800456e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004574:	633b      	str	r3, [r7, #48]	@ 0x30
 8004576:	2300      	movs	r3, #0
 8004578:	637b      	str	r3, [r7, #52]	@ 0x34
 800457a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800457e:	4622      	mov	r2, r4
 8004580:	462b      	mov	r3, r5
 8004582:	f04f 0000 	mov.w	r0, #0
 8004586:	f04f 0100 	mov.w	r1, #0
 800458a:	0159      	lsls	r1, r3, #5
 800458c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004590:	0150      	lsls	r0, r2, #5
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4621      	mov	r1, r4
 8004598:	1a51      	subs	r1, r2, r1
 800459a:	6139      	str	r1, [r7, #16]
 800459c:	4629      	mov	r1, r5
 800459e:	eb63 0301 	sbc.w	r3, r3, r1
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045b0:	4659      	mov	r1, fp
 80045b2:	018b      	lsls	r3, r1, #6
 80045b4:	4651      	mov	r1, sl
 80045b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045ba:	4651      	mov	r1, sl
 80045bc:	018a      	lsls	r2, r1, #6
 80045be:	4651      	mov	r1, sl
 80045c0:	ebb2 0801 	subs.w	r8, r2, r1
 80045c4:	4659      	mov	r1, fp
 80045c6:	eb63 0901 	sbc.w	r9, r3, r1
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045de:	4690      	mov	r8, r2
 80045e0:	4699      	mov	r9, r3
 80045e2:	4623      	mov	r3, r4
 80045e4:	eb18 0303 	adds.w	r3, r8, r3
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	462b      	mov	r3, r5
 80045ec:	eb49 0303 	adc.w	r3, r9, r3
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045fe:	4629      	mov	r1, r5
 8004600:	024b      	lsls	r3, r1, #9
 8004602:	4621      	mov	r1, r4
 8004604:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004608:	4621      	mov	r1, r4
 800460a:	024a      	lsls	r2, r1, #9
 800460c:	4610      	mov	r0, r2
 800460e:	4619      	mov	r1, r3
 8004610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004612:	2200      	movs	r2, #0
 8004614:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004616:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004618:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800461c:	f7fb fde6 	bl	80001ec <__aeabi_uldivmod>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4613      	mov	r3, r2
 8004626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004628:	e058      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800462a:	4b38      	ldr	r3, [pc, #224]	@ (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	099b      	lsrs	r3, r3, #6
 8004630:	2200      	movs	r2, #0
 8004632:	4618      	mov	r0, r3
 8004634:	4611      	mov	r1, r2
 8004636:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800463a:	623b      	str	r3, [r7, #32]
 800463c:	2300      	movs	r3, #0
 800463e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004640:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004644:	4642      	mov	r2, r8
 8004646:	464b      	mov	r3, r9
 8004648:	f04f 0000 	mov.w	r0, #0
 800464c:	f04f 0100 	mov.w	r1, #0
 8004650:	0159      	lsls	r1, r3, #5
 8004652:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004656:	0150      	lsls	r0, r2, #5
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4641      	mov	r1, r8
 800465e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004662:	4649      	mov	r1, r9
 8004664:	eb63 0b01 	sbc.w	fp, r3, r1
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004674:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004678:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800467c:	ebb2 040a 	subs.w	r4, r2, sl
 8004680:	eb63 050b 	sbc.w	r5, r3, fp
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	00eb      	lsls	r3, r5, #3
 800468e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004692:	00e2      	lsls	r2, r4, #3
 8004694:	4614      	mov	r4, r2
 8004696:	461d      	mov	r5, r3
 8004698:	4643      	mov	r3, r8
 800469a:	18e3      	adds	r3, r4, r3
 800469c:	603b      	str	r3, [r7, #0]
 800469e:	464b      	mov	r3, r9
 80046a0:	eb45 0303 	adc.w	r3, r5, r3
 80046a4:	607b      	str	r3, [r7, #4]
 80046a6:	f04f 0200 	mov.w	r2, #0
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046b2:	4629      	mov	r1, r5
 80046b4:	028b      	lsls	r3, r1, #10
 80046b6:	4621      	mov	r1, r4
 80046b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046bc:	4621      	mov	r1, r4
 80046be:	028a      	lsls	r2, r1, #10
 80046c0:	4610      	mov	r0, r2
 80046c2:	4619      	mov	r1, r3
 80046c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046c6:	2200      	movs	r2, #0
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	61fa      	str	r2, [r7, #28]
 80046cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046d0:	f7fb fd8c 	bl	80001ec <__aeabi_uldivmod>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4613      	mov	r3, r2
 80046da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80046dc:	4b0b      	ldr	r3, [pc, #44]	@ (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	0c1b      	lsrs	r3, r3, #16
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	3301      	adds	r3, #1
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80046ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046f6:	e002      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046f8:	4b05      	ldr	r3, [pc, #20]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x204>)
 80046fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004700:	4618      	mov	r0, r3
 8004702:	3750      	adds	r7, #80	@ 0x50
 8004704:	46bd      	mov	sp, r7
 8004706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800470a:	bf00      	nop
 800470c:	40023800 	.word	0x40023800
 8004710:	00f42400 	.word	0x00f42400
 8004714:	007a1200 	.word	0x007a1200

08004718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800471c:	4b03      	ldr	r3, [pc, #12]	@ (800472c <HAL_RCC_GetHCLKFreq+0x14>)
 800471e:	681b      	ldr	r3, [r3, #0]
}
 8004720:	4618      	mov	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000018 	.word	0x20000018

08004730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004734:	f7ff fff0 	bl	8004718 <HAL_RCC_GetHCLKFreq>
 8004738:	4602      	mov	r2, r0
 800473a:	4b05      	ldr	r3, [pc, #20]	@ (8004750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	0a9b      	lsrs	r3, r3, #10
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	4903      	ldr	r1, [pc, #12]	@ (8004754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004746:	5ccb      	ldrb	r3, [r1, r3]
 8004748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800474c:	4618      	mov	r0, r3
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40023800 	.word	0x40023800
 8004754:	080072f4 	.word	0x080072f4

08004758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10b      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800477c:	2b00      	cmp	r3, #0
 800477e:	d105      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004788:	2b00      	cmp	r3, #0
 800478a:	d075      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800478c:	4b91      	ldr	r3, [pc, #580]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004792:	f7fe fb0f 	bl	8002db4 <HAL_GetTick>
 8004796:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004798:	e008      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800479a:	f7fe fb0b 	bl	8002db4 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e189      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047ac:	4b8a      	ldr	r3, [pc, #552]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f0      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d009      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	019a      	lsls	r2, r3, #6
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	071b      	lsls	r3, r3, #28
 80047d0:	4981      	ldr	r1, [pc, #516]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01f      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047e4:	4b7c      	ldr	r3, [pc, #496]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047ea:	0f1b      	lsrs	r3, r3, #28
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	019a      	lsls	r2, r3, #6
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	061b      	lsls	r3, r3, #24
 80047fe:	431a      	orrs	r2, r3
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	071b      	lsls	r3, r3, #28
 8004804:	4974      	ldr	r1, [pc, #464]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800480c:	4b72      	ldr	r3, [pc, #456]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800480e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004812:	f023 021f 	bic.w	r2, r3, #31
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	3b01      	subs	r3, #1
 800481c:	496e      	ldr	r1, [pc, #440]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00d      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	019a      	lsls	r2, r3, #6
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	061b      	lsls	r3, r3, #24
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	071b      	lsls	r3, r3, #28
 8004844:	4964      	ldr	r1, [pc, #400]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800484c:	4b61      	ldr	r3, [pc, #388]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800484e:	2201      	movs	r2, #1
 8004850:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004852:	f7fe faaf 	bl	8002db4 <HAL_GetTick>
 8004856:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004858:	e008      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800485a:	f7fe faab 	bl	8002db4 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e129      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800486c:	4b5a      	ldr	r3, [pc, #360]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d105      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800488c:	2b00      	cmp	r3, #0
 800488e:	d079      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004890:	4b52      	ldr	r3, [pc, #328]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004896:	f7fe fa8d 	bl	8002db4 <HAL_GetTick>
 800489a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800489c:	e008      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800489e:	f7fe fa89 	bl	8002db4 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e107      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048b0:	4b49      	ldr	r3, [pc, #292]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048bc:	d0ef      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d020      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048ca:	4b43      	ldr	r3, [pc, #268]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d0:	0f1b      	lsrs	r3, r3, #28
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	019a      	lsls	r2, r3, #6
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	061b      	lsls	r3, r3, #24
 80048e4:	431a      	orrs	r2, r3
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	071b      	lsls	r3, r3, #28
 80048ea:	493b      	ldr	r1, [pc, #236]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048f2:	4b39      	ldr	r3, [pc, #228]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048f8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	3b01      	subs	r3, #1
 8004902:	021b      	lsls	r3, r3, #8
 8004904:	4934      	ldr	r1, [pc, #208]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01e      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004918:	4b2f      	ldr	r3, [pc, #188]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491e:	0e1b      	lsrs	r3, r3, #24
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	019a      	lsls	r2, r3, #6
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	061b      	lsls	r3, r3, #24
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	071b      	lsls	r3, r3, #28
 8004938:	4927      	ldr	r1, [pc, #156]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004940:	4b25      	ldr	r3, [pc, #148]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004942:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004946:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494e:	4922      	ldr	r1, [pc, #136]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004956:	4b21      	ldr	r3, [pc, #132]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004958:	2201      	movs	r2, #1
 800495a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800495c:	f7fe fa2a 	bl	8002db4 <HAL_GetTick>
 8004960:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004964:	f7fe fa26 	bl	8002db4 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e0a4      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004976:	4b18      	ldr	r3, [pc, #96]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800497e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004982:	d1ef      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 808b 	beq.w	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	4b10      	ldr	r3, [pc, #64]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	4a0f      	ldr	r2, [pc, #60]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800499c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80049a2:	4b0d      	ldr	r3, [pc, #52]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80049ae:	4b0c      	ldr	r3, [pc, #48]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a0b      	ldr	r2, [pc, #44]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80049b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049ba:	f7fe f9fb 	bl	8002db4 <HAL_GetTick>
 80049be:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80049c0:	e010      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c2:	f7fe f9f7 	bl	8002db4 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d909      	bls.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e075      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80049d4:	42470068 	.word	0x42470068
 80049d8:	40023800 	.word	0x40023800
 80049dc:	42470070 	.word	0x42470070
 80049e0:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80049e4:	4b38      	ldr	r3, [pc, #224]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0e8      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049f0:	4b36      	ldr	r3, [pc, #216]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80049f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049f8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d02f      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d028      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a18:	4b2d      	ldr	r3, [pc, #180]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a24:	4a29      	ldr	r2, [pc, #164]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a2a:	4b28      	ldr	r3, [pc, #160]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d114      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004a36:	f7fe f9bd 	bl	8002db4 <HAL_GetTick>
 8004a3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3c:	e00a      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3e:	f7fe f9b9 	bl	8002db4 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e035      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a54:	4b1d      	ldr	r3, [pc, #116]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0ee      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a6c:	d10d      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004a6e:	4b17      	ldr	r3, [pc, #92]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004a7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a82:	4912      	ldr	r1, [pc, #72]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	608b      	str	r3, [r1, #8]
 8004a88:	e005      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004a8a:	4b10      	ldr	r3, [pc, #64]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	4a0f      	ldr	r2, [pc, #60]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a90:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004a94:	6093      	str	r3, [r2, #8]
 8004a96:	4b0d      	ldr	r3, [pc, #52]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a98:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa2:	490a      	ldr	r1, [pc, #40]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0310 	and.w	r3, r3, #16
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d004      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004aba:	4b06      	ldr	r3, [pc, #24]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004abc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40007000 	.word	0x40007000
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	42470e40 	.word	0x42470e40
 8004ad4:	424711e0 	.word	0x424711e0

08004ad8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e01c      	b.n	8004b24 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	795b      	ldrb	r3, [r3, #5]
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d105      	bne.n	8004b00 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fd ffc4 	bl	8002a88 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0204 	orr.w	r2, r2, #4
 8004b14:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e07b      	b.n	8004c36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d108      	bne.n	8004b58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b4e:	d009      	beq.n	8004b64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	61da      	str	r2, [r3, #28]
 8004b56:	e005      	b.n	8004b64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fd ffa4 	bl	8002acc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be8:	ea42 0103 	orr.w	r1, r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	0c1b      	lsrs	r3, r3, #16
 8004c02:	f003 0104 	and.w	r1, r3, #4
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0a:	f003 0210 	and.w	r2, r3, #16
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b082      	sub	sp, #8
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e01a      	b.n	8004c86 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c66:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7fd ff77 	bl	8002b5c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b088      	sub	sp, #32
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	603b      	str	r3, [r7, #0]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c9e:	f7fe f889 	bl	8002db4 <HAL_GetTick>
 8004ca2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004ca4:	88fb      	ldrh	r3, [r7, #6]
 8004ca6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d001      	beq.n	8004cb8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e12a      	b.n	8004f0e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <HAL_SPI_Transmit+0x36>
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e122      	b.n	8004f0e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_SPI_Transmit+0x48>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e11b      	b.n	8004f0e <HAL_SPI_Transmit+0x280>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2203      	movs	r2, #3
 8004ce2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	88fa      	ldrh	r2, [r7, #6]
 8004cf6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	88fa      	ldrh	r2, [r7, #6]
 8004cfc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d24:	d10f      	bne.n	8004d46 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d50:	2b40      	cmp	r3, #64	@ 0x40
 8004d52:	d007      	beq.n	8004d64 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d6c:	d152      	bne.n	8004e14 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <HAL_SPI_Transmit+0xee>
 8004d76:	8b7b      	ldrh	r3, [r7, #26]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d145      	bne.n	8004e08 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d80:	881a      	ldrh	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8c:	1c9a      	adds	r2, r3, #2
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004da0:	e032      	b.n	8004e08 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d112      	bne.n	8004dd6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db4:	881a      	ldrh	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc0:	1c9a      	adds	r2, r3, #2
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004dd4:	e018      	b.n	8004e08 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dd6:	f7fd ffed 	bl	8002db4 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d803      	bhi.n	8004dee <HAL_SPI_Transmit+0x160>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d102      	bne.n	8004df4 <HAL_SPI_Transmit+0x166>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d109      	bne.n	8004e08 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e082      	b.n	8004f0e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1c7      	bne.n	8004da2 <HAL_SPI_Transmit+0x114>
 8004e12:	e053      	b.n	8004ebc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <HAL_SPI_Transmit+0x194>
 8004e1c:	8b7b      	ldrh	r3, [r7, #26]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d147      	bne.n	8004eb2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	330c      	adds	r3, #12
 8004e2c:	7812      	ldrb	r2, [r2, #0]
 8004e2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e48:	e033      	b.n	8004eb2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d113      	bne.n	8004e80 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	330c      	adds	r3, #12
 8004e62:	7812      	ldrb	r2, [r2, #0]
 8004e64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e7e:	e018      	b.n	8004eb2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e80:	f7fd ff98 	bl	8002db4 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d803      	bhi.n	8004e98 <HAL_SPI_Transmit+0x20a>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e96:	d102      	bne.n	8004e9e <HAL_SPI_Transmit+0x210>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d109      	bne.n	8004eb2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e02d      	b.n	8004f0e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1c6      	bne.n	8004e4a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ebc:	69fa      	ldr	r2, [r7, #28]
 8004ebe:	6839      	ldr	r1, [r7, #0]
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 f8bf 	bl	8005044 <SPI_EndRxTxTransaction>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10a      	bne.n	8004ef0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
  }
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3720      	adds	r7, #32
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f24:	b2db      	uxtb	r3, r3
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
	...

08004f34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f44:	f7fd ff36 	bl	8002db4 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4c:	1a9b      	subs	r3, r3, r2
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	4413      	add	r3, r2
 8004f52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f54:	f7fd ff2e 	bl	8002db4 <HAL_GetTick>
 8004f58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f5a:	4b39      	ldr	r3, [pc, #228]	@ (8005040 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	015b      	lsls	r3, r3, #5
 8004f60:	0d1b      	lsrs	r3, r3, #20
 8004f62:	69fa      	ldr	r2, [r7, #28]
 8004f64:	fb02 f303 	mul.w	r3, r2, r3
 8004f68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f6a:	e054      	b.n	8005016 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f72:	d050      	beq.n	8005016 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f74:	f7fd ff1e 	bl	8002db4 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d902      	bls.n	8004f8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d13d      	bne.n	8005006 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fa2:	d111      	bne.n	8004fc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fac:	d004      	beq.n	8004fb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fb6:	d107      	bne.n	8004fc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fd0:	d10f      	bne.n	8004ff2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ff0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e017      	b.n	8005036 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	3b01      	subs	r3, #1
 8005014:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4013      	ands	r3, r2
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	429a      	cmp	r2, r3
 8005024:	bf0c      	ite	eq
 8005026:	2301      	moveq	r3, #1
 8005028:	2300      	movne	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	461a      	mov	r2, r3
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	429a      	cmp	r2, r3
 8005032:	d19b      	bne.n	8004f6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000018 	.word	0x20000018

08005044 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af02      	add	r7, sp, #8
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2201      	movs	r2, #1
 8005058:	2102      	movs	r1, #2
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f7ff ff6a 	bl	8004f34 <SPI_WaitFlagStateUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d007      	beq.n	8005076 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800506a:	f043 0220 	orr.w	r2, r3, #32
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e032      	b.n	80050dc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005076:	4b1b      	ldr	r3, [pc, #108]	@ (80050e4 <SPI_EndRxTxTransaction+0xa0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1b      	ldr	r2, [pc, #108]	@ (80050e8 <SPI_EndRxTxTransaction+0xa4>)
 800507c:	fba2 2303 	umull	r2, r3, r2, r3
 8005080:	0d5b      	lsrs	r3, r3, #21
 8005082:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005086:	fb02 f303 	mul.w	r3, r2, r3
 800508a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005094:	d112      	bne.n	80050bc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2200      	movs	r2, #0
 800509e:	2180      	movs	r1, #128	@ 0x80
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f7ff ff47 	bl	8004f34 <SPI_WaitFlagStateUntilTimeout>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d016      	beq.n	80050da <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b0:	f043 0220 	orr.w	r2, r3, #32
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e00f      	b.n	80050dc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d2:	2b80      	cmp	r3, #128	@ 0x80
 80050d4:	d0f2      	beq.n	80050bc <SPI_EndRxTxTransaction+0x78>
 80050d6:	e000      	b.n	80050da <SPI_EndRxTxTransaction+0x96>
        break;
 80050d8:	bf00      	nop
  }

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20000018 	.word	0x20000018
 80050e8:	165e9f81 	.word	0x165e9f81

080050ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e041      	b.n	8005182 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d106      	bne.n	8005118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fd fd40 	bl	8002b98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3304      	adds	r3, #4
 8005128:	4619      	mov	r1, r3
 800512a:	4610      	mov	r0, r2
 800512c:	f000 f8f4 	bl	8005318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_TIM_ConfigClockSource+0x1c>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e0b4      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x186>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2202      	movs	r2, #2
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80051c4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051cc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051de:	d03e      	beq.n	800525e <HAL_TIM_ConfigClockSource+0xd4>
 80051e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051e4:	f200 8087 	bhi.w	80052f6 <HAL_TIM_ConfigClockSource+0x16c>
 80051e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ec:	f000 8086 	beq.w	80052fc <HAL_TIM_ConfigClockSource+0x172>
 80051f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051f4:	d87f      	bhi.n	80052f6 <HAL_TIM_ConfigClockSource+0x16c>
 80051f6:	2b70      	cmp	r3, #112	@ 0x70
 80051f8:	d01a      	beq.n	8005230 <HAL_TIM_ConfigClockSource+0xa6>
 80051fa:	2b70      	cmp	r3, #112	@ 0x70
 80051fc:	d87b      	bhi.n	80052f6 <HAL_TIM_ConfigClockSource+0x16c>
 80051fe:	2b60      	cmp	r3, #96	@ 0x60
 8005200:	d050      	beq.n	80052a4 <HAL_TIM_ConfigClockSource+0x11a>
 8005202:	2b60      	cmp	r3, #96	@ 0x60
 8005204:	d877      	bhi.n	80052f6 <HAL_TIM_ConfigClockSource+0x16c>
 8005206:	2b50      	cmp	r3, #80	@ 0x50
 8005208:	d03c      	beq.n	8005284 <HAL_TIM_ConfigClockSource+0xfa>
 800520a:	2b50      	cmp	r3, #80	@ 0x50
 800520c:	d873      	bhi.n	80052f6 <HAL_TIM_ConfigClockSource+0x16c>
 800520e:	2b40      	cmp	r3, #64	@ 0x40
 8005210:	d058      	beq.n	80052c4 <HAL_TIM_ConfigClockSource+0x13a>
 8005212:	2b40      	cmp	r3, #64	@ 0x40
 8005214:	d86f      	bhi.n	80052f6 <HAL_TIM_ConfigClockSource+0x16c>
 8005216:	2b30      	cmp	r3, #48	@ 0x30
 8005218:	d064      	beq.n	80052e4 <HAL_TIM_ConfigClockSource+0x15a>
 800521a:	2b30      	cmp	r3, #48	@ 0x30
 800521c:	d86b      	bhi.n	80052f6 <HAL_TIM_ConfigClockSource+0x16c>
 800521e:	2b20      	cmp	r3, #32
 8005220:	d060      	beq.n	80052e4 <HAL_TIM_ConfigClockSource+0x15a>
 8005222:	2b20      	cmp	r3, #32
 8005224:	d867      	bhi.n	80052f6 <HAL_TIM_ConfigClockSource+0x16c>
 8005226:	2b00      	cmp	r3, #0
 8005228:	d05c      	beq.n	80052e4 <HAL_TIM_ConfigClockSource+0x15a>
 800522a:	2b10      	cmp	r3, #16
 800522c:	d05a      	beq.n	80052e4 <HAL_TIM_ConfigClockSource+0x15a>
 800522e:	e062      	b.n	80052f6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005240:	f000 f990 	bl	8005564 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005252:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	609a      	str	r2, [r3, #8]
      break;
 800525c:	e04f      	b.n	80052fe <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800526e:	f000 f979 	bl	8005564 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005280:	609a      	str	r2, [r3, #8]
      break;
 8005282:	e03c      	b.n	80052fe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005290:	461a      	mov	r2, r3
 8005292:	f000 f8ed 	bl	8005470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2150      	movs	r1, #80	@ 0x50
 800529c:	4618      	mov	r0, r3
 800529e:	f000 f946 	bl	800552e <TIM_ITRx_SetConfig>
      break;
 80052a2:	e02c      	b.n	80052fe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052b0:	461a      	mov	r2, r3
 80052b2:	f000 f90c 	bl	80054ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2160      	movs	r1, #96	@ 0x60
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 f936 	bl	800552e <TIM_ITRx_SetConfig>
      break;
 80052c2:	e01c      	b.n	80052fe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d0:	461a      	mov	r2, r3
 80052d2:	f000 f8cd 	bl	8005470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2140      	movs	r1, #64	@ 0x40
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 f926 	bl	800552e <TIM_ITRx_SetConfig>
      break;
 80052e2:	e00c      	b.n	80052fe <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4619      	mov	r1, r3
 80052ee:	4610      	mov	r0, r2
 80052f0:	f000 f91d 	bl	800552e <TIM_ITRx_SetConfig>
      break;
 80052f4:	e003      	b.n	80052fe <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	73fb      	strb	r3, [r7, #15]
      break;
 80052fa:	e000      	b.n	80052fe <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800530e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a46      	ldr	r2, [pc, #280]	@ (8005444 <TIM_Base_SetConfig+0x12c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d013      	beq.n	8005358 <TIM_Base_SetConfig+0x40>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005336:	d00f      	beq.n	8005358 <TIM_Base_SetConfig+0x40>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a43      	ldr	r2, [pc, #268]	@ (8005448 <TIM_Base_SetConfig+0x130>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00b      	beq.n	8005358 <TIM_Base_SetConfig+0x40>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a42      	ldr	r2, [pc, #264]	@ (800544c <TIM_Base_SetConfig+0x134>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d007      	beq.n	8005358 <TIM_Base_SetConfig+0x40>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a41      	ldr	r2, [pc, #260]	@ (8005450 <TIM_Base_SetConfig+0x138>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d003      	beq.n	8005358 <TIM_Base_SetConfig+0x40>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a40      	ldr	r2, [pc, #256]	@ (8005454 <TIM_Base_SetConfig+0x13c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d108      	bne.n	800536a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800535e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a35      	ldr	r2, [pc, #212]	@ (8005444 <TIM_Base_SetConfig+0x12c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d02b      	beq.n	80053ca <TIM_Base_SetConfig+0xb2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005378:	d027      	beq.n	80053ca <TIM_Base_SetConfig+0xb2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a32      	ldr	r2, [pc, #200]	@ (8005448 <TIM_Base_SetConfig+0x130>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d023      	beq.n	80053ca <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a31      	ldr	r2, [pc, #196]	@ (800544c <TIM_Base_SetConfig+0x134>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d01f      	beq.n	80053ca <TIM_Base_SetConfig+0xb2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a30      	ldr	r2, [pc, #192]	@ (8005450 <TIM_Base_SetConfig+0x138>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d01b      	beq.n	80053ca <TIM_Base_SetConfig+0xb2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a2f      	ldr	r2, [pc, #188]	@ (8005454 <TIM_Base_SetConfig+0x13c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d017      	beq.n	80053ca <TIM_Base_SetConfig+0xb2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a2e      	ldr	r2, [pc, #184]	@ (8005458 <TIM_Base_SetConfig+0x140>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d013      	beq.n	80053ca <TIM_Base_SetConfig+0xb2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2d      	ldr	r2, [pc, #180]	@ (800545c <TIM_Base_SetConfig+0x144>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00f      	beq.n	80053ca <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2c      	ldr	r2, [pc, #176]	@ (8005460 <TIM_Base_SetConfig+0x148>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00b      	beq.n	80053ca <TIM_Base_SetConfig+0xb2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005464 <TIM_Base_SetConfig+0x14c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d007      	beq.n	80053ca <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a2a      	ldr	r2, [pc, #168]	@ (8005468 <TIM_Base_SetConfig+0x150>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d003      	beq.n	80053ca <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a29      	ldr	r2, [pc, #164]	@ (800546c <TIM_Base_SetConfig+0x154>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d108      	bne.n	80053dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a10      	ldr	r2, [pc, #64]	@ (8005444 <TIM_Base_SetConfig+0x12c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d003      	beq.n	8005410 <TIM_Base_SetConfig+0xf8>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a12      	ldr	r2, [pc, #72]	@ (8005454 <TIM_Base_SetConfig+0x13c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d103      	bne.n	8005418 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b01      	cmp	r3, #1
 8005428:	d105      	bne.n	8005436 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f023 0201 	bic.w	r2, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	611a      	str	r2, [r3, #16]
  }
}
 8005436:	bf00      	nop
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40010000 	.word	0x40010000
 8005448:	40000400 	.word	0x40000400
 800544c:	40000800 	.word	0x40000800
 8005450:	40000c00 	.word	0x40000c00
 8005454:	40010400 	.word	0x40010400
 8005458:	40014000 	.word	0x40014000
 800545c:	40014400 	.word	0x40014400
 8005460:	40014800 	.word	0x40014800
 8005464:	40001800 	.word	0x40001800
 8005468:	40001c00 	.word	0x40001c00
 800546c:	40002000 	.word	0x40002000

08005470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f023 0201 	bic.w	r2, r3, #1
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800549a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f023 030a 	bic.w	r3, r3, #10
 80054ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	621a      	str	r2, [r3, #32]
}
 80054c2:	bf00      	nop
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b087      	sub	sp, #28
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	f023 0210 	bic.w	r2, r3, #16
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	031b      	lsls	r3, r3, #12
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800550a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	621a      	str	r2, [r3, #32]
}
 8005522:	bf00      	nop
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800552e:	b480      	push	{r7}
 8005530:	b085      	sub	sp, #20
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005544:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4313      	orrs	r3, r2
 800554c:	f043 0307 	orr.w	r3, r3, #7
 8005550:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	609a      	str	r2, [r3, #8]
}
 8005558:	bf00      	nop
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800557e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	021a      	lsls	r2, r3, #8
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	431a      	orrs	r2, r3
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4313      	orrs	r3, r2
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	609a      	str	r2, [r3, #8]
}
 8005598:	bf00      	nop
 800559a:	371c      	adds	r7, #28
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055b8:	2302      	movs	r3, #2
 80055ba:	e05a      	b.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a21      	ldr	r2, [pc, #132]	@ (8005680 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d022      	beq.n	8005646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005608:	d01d      	beq.n	8005646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a1d      	ldr	r2, [pc, #116]	@ (8005684 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d018      	beq.n	8005646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a1b      	ldr	r2, [pc, #108]	@ (8005688 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d013      	beq.n	8005646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a1a      	ldr	r2, [pc, #104]	@ (800568c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00e      	beq.n	8005646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a18      	ldr	r2, [pc, #96]	@ (8005690 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d009      	beq.n	8005646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a17      	ldr	r2, [pc, #92]	@ (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d004      	beq.n	8005646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a15      	ldr	r2, [pc, #84]	@ (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d10c      	bne.n	8005660 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800564c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	4313      	orrs	r3, r2
 8005656:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40010000 	.word	0x40010000
 8005684:	40000400 	.word	0x40000400
 8005688:	40000800 	.word	0x40000800
 800568c:	40000c00 	.word	0x40000c00
 8005690:	40010400 	.word	0x40010400
 8005694:	40014000 	.word	0x40014000
 8005698:	40001800 	.word	0x40001800

0800569c <memset>:
 800569c:	4402      	add	r2, r0
 800569e:	4603      	mov	r3, r0
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d100      	bne.n	80056a6 <memset+0xa>
 80056a4:	4770      	bx	lr
 80056a6:	f803 1b01 	strb.w	r1, [r3], #1
 80056aa:	e7f9      	b.n	80056a0 <memset+0x4>

080056ac <__libc_init_array>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	4d0d      	ldr	r5, [pc, #52]	@ (80056e4 <__libc_init_array+0x38>)
 80056b0:	4c0d      	ldr	r4, [pc, #52]	@ (80056e8 <__libc_init_array+0x3c>)
 80056b2:	1b64      	subs	r4, r4, r5
 80056b4:	10a4      	asrs	r4, r4, #2
 80056b6:	2600      	movs	r6, #0
 80056b8:	42a6      	cmp	r6, r4
 80056ba:	d109      	bne.n	80056d0 <__libc_init_array+0x24>
 80056bc:	4d0b      	ldr	r5, [pc, #44]	@ (80056ec <__libc_init_array+0x40>)
 80056be:	4c0c      	ldr	r4, [pc, #48]	@ (80056f0 <__libc_init_array+0x44>)
 80056c0:	f000 f826 	bl	8005710 <_init>
 80056c4:	1b64      	subs	r4, r4, r5
 80056c6:	10a4      	asrs	r4, r4, #2
 80056c8:	2600      	movs	r6, #0
 80056ca:	42a6      	cmp	r6, r4
 80056cc:	d105      	bne.n	80056da <__libc_init_array+0x2e>
 80056ce:	bd70      	pop	{r4, r5, r6, pc}
 80056d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d4:	4798      	blx	r3
 80056d6:	3601      	adds	r6, #1
 80056d8:	e7ee      	b.n	80056b8 <__libc_init_array+0xc>
 80056da:	f855 3b04 	ldr.w	r3, [r5], #4
 80056de:	4798      	blx	r3
 80056e0:	3601      	adds	r6, #1
 80056e2:	e7f2      	b.n	80056ca <__libc_init_array+0x1e>
 80056e4:	08007304 	.word	0x08007304
 80056e8:	08007304 	.word	0x08007304
 80056ec:	08007304 	.word	0x08007304
 80056f0:	08007308 	.word	0x08007308

080056f4 <memcpy>:
 80056f4:	440a      	add	r2, r1
 80056f6:	4291      	cmp	r1, r2
 80056f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80056fc:	d100      	bne.n	8005700 <memcpy+0xc>
 80056fe:	4770      	bx	lr
 8005700:	b510      	push	{r4, lr}
 8005702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005706:	f803 4f01 	strb.w	r4, [r3, #1]!
 800570a:	4291      	cmp	r1, r2
 800570c:	d1f9      	bne.n	8005702 <memcpy+0xe>
 800570e:	bd10      	pop	{r4, pc}

08005710 <_init>:
 8005710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005712:	bf00      	nop
 8005714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005716:	bc08      	pop	{r3}
 8005718:	469e      	mov	lr, r3
 800571a:	4770      	bx	lr

0800571c <_fini>:
 800571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571e:	bf00      	nop
 8005720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005722:	bc08      	pop	{r3}
 8005724:	469e      	mov	lr, r3
 8005726:	4770      	bx	lr
