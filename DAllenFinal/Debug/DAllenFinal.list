
DAllenFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000825c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bd4  08008408  08008408  00009408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fdc  08009fdc  0000b024  2**0
                  CONTENTS
  4 .ARM          00000008  08009fdc  08009fdc  0000afdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fe4  08009fe4  0000b024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fe4  08009fe4  0000afe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fe8  08009fe8  0000afe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08009fec  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b024  2**0
                  CONTENTS
 10 .bss          00025e28  20000024  20000024  0000b024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025e4c  20025e4c  0000b024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c8d  00000000  00000000  0000b054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037e0  00000000  00000000  00020ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001520  00000000  00000000  000244c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001049  00000000  00000000  000259e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027636  00000000  00000000  00026a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b030  00000000  00000000  0004e067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e30a0  00000000  00000000  00069097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014c137  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005888  00000000  00000000  0014c17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00151a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080083f0 	.word	0x080083f0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	080083f0 	.word	0x080083f0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f004 faac 	bl	8004a3c <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f002 fa46 	bl	8002974 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f002 fa03 	bl	80028f4 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f002 fb09 	bl	8002b08 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80004f6:	f002 fbdf 	bl	8002cb8 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80004fa:	4b04      	ldr	r3, [pc, #16]	@ (800050c <ApplicationInit+0x30>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 8000500:	f000 f80c 	bl	800051c <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED
	#endif // COMPILE_TOUCH_FUNCTIONS
	applicationButtonInit();
 8000504:	f000 f8ba 	bl	800067c <applicationButtonInit>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000040 	.word	0x20000040

08000510 <Application_game_inst>:

void Application_game_inst(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	game_init();
 8000514:	f002 fc06 	bl	8002d24 <game_init>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}

0800051c <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 8000530:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000534:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000536:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800053a:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000540:	2302      	movs	r3, #2
 8000542:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	4b0d      	ldr	r3, [pc, #52]	@ (8000580 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800054a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054c:	4a0c      	ldr	r2, [pc, #48]	@ (8000580 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	6313      	str	r3, [r2, #48]	@ 0x30
 8000554:	4b0a      	ldr	r3, [pc, #40]	@ (8000580 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	603b      	str	r3, [r7, #0]
 800055e:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	4619      	mov	r1, r3
 8000564:	4807      	ldr	r0, [pc, #28]	@ (8000584 <LCDTouchScreenInterruptGPIOInit+0x68>)
 8000566:	f004 fccb 	bl	8004f00 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800056a:	2028      	movs	r0, #40	@ 0x28
 800056c:	f004 fc79 	bl	8004e62 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000570:	4b05      	ldr	r3, [pc, #20]	@ (8000588 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 8000572:	4a06      	ldr	r2, [pc, #24]	@ (800058c <LCDTouchScreenInterruptGPIOInit+0x70>)
 8000574:	601a      	str	r2, [r3, #0]

}
 8000576:	bf00      	nop
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40023800 	.word	0x40023800
 8000584:	40020000 	.word	0x40020000
 8000588:	20000048 	.word	0x20000048
 800058c:	0600000f 	.word	0x0600000f

08000590 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 8000596:	2028      	movs	r0, #40	@ 0x28
 8000598:	f004 fc71 	bl	8004e7e <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 800059c:	2300      	movs	r3, #0
 800059e:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 80005a0:	4b32      	ldr	r3, [pc, #200]	@ (800066c <EXTI15_10_IRQHandler+0xdc>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005a6:	e006      	b.n	80005b6 <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 80005a8:	204c      	movs	r0, #76	@ 0x4c
 80005aa:	f003 ffb6 	bl	800451a <STMPE811_Read>
 80005ae:	4603      	mov	r3, r0
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b2e      	ldr	r3, [pc, #184]	@ (800066c <EXTI15_10_IRQHandler+0xdc>)
 80005b4:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005b6:	4b2d      	ldr	r3, [pc, #180]	@ (800066c <EXTI15_10_IRQHandler+0xdc>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d0f4      	beq.n	80005a8 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 80005be:	200a      	movs	r0, #10
 80005c0:	f002 fb90 	bl	8002ce4 <ReadRegisterFromTouchModule>
 80005c4:	4603      	mov	r3, r0
 80005c6:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 80005c8:	2100      	movs	r1, #0
 80005ca:	200a      	movs	r0, #10
 80005cc:	f002 fb98 	bl	8002d00 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 80005d0:	200b      	movs	r0, #11
 80005d2:	f002 fb87 	bl	8002ce4 <ReadRegisterFromTouchModule>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <EXTI15_10_IRQHandler+0xe0>)
 80005dc:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 80005de:	4b24      	ldr	r3, [pc, #144]	@ (8000670 <EXTI15_10_IRQHandler+0xe0>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	f043 0301 	orr.w	r3, r3, #1
 80005e6:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 80005e8:	797b      	ldrb	r3, [r7, #5]
 80005ea:	4619      	mov	r1, r3
 80005ec:	200b      	movs	r0, #11
 80005ee:	f002 fb87 	bl	8002d00 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 80005f2:	2040      	movs	r0, #64	@ 0x40
 80005f4:	f002 fb76 	bl	8002ce4 <ReadRegisterFromTouchModule>
 80005f8:	4603      	mov	r3, r0
 80005fa:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 80005fc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000600:	2b00      	cmp	r3, #0
 8000602:	da01      	bge.n	8000608 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 8000604:	2301      	movs	r3, #1
 8000606:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d00d      	beq.n	800062a <EXTI15_10_IRQHandler+0x9a>
	{
		//printf("\nPressed");
		// May need to do numerous retries? 
		DetermineTouchPosition(&StaticTouchData);
 800060e:	4819      	ldr	r0, [pc, #100]	@ (8000674 <EXTI15_10_IRQHandler+0xe4>)
 8000610:	f002 fb5d 	bl	8002cce <DetermineTouchPosition>
		/* Touch valid */
		//printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
		if(StaticTouchData.x > 120)
 8000614:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <EXTI15_10_IRQHandler+0xe4>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	2b78      	cmp	r3, #120	@ 0x78
 800061a:	d903      	bls.n	8000624 <EXTI15_10_IRQHandler+0x94>
		{
			game_move(RIGHT);
 800061c:	2001      	movs	r0, #1
 800061e:	f002 fcd3 	bl	8002fc8 <game_move>
 8000622:	e002      	b.n	800062a <EXTI15_10_IRQHandler+0x9a>
		}
		else
		{
			game_move(LEFT);
 8000624:	2000      	movs	r0, #0
 8000626:	f002 fccf 	bl	8002fc8 <game_move>
		/* Touch not pressed */
//		printf("\nNot pressed \n");
//		LCD_Clear(0, LCD_COLOR_GREEN);
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 800062a:	2101      	movs	r1, #1
 800062c:	204b      	movs	r0, #75	@ 0x4b
 800062e:	f003 ff85 	bl	800453c <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 8000632:	2100      	movs	r1, #0
 8000634:	204b      	movs	r0, #75	@ 0x4b
 8000636:	f003 ff81 	bl	800453c <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 800063a:	79bb      	ldrb	r3, [r7, #6]
 800063c:	4619      	mov	r1, r3
 800063e:	200a      	movs	r0, #10
 8000640:	f002 fb5e 	bl	8002d00 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000644:	2103      	movs	r1, #3
 8000646:	480c      	ldr	r0, [pc, #48]	@ (8000678 <EXTI15_10_IRQHandler+0xe8>)
 8000648:	f004 fc42 	bl	8004ed0 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800064c:	2028      	movs	r0, #40	@ 0x28
 800064e:	f004 fc30 	bl	8004eb2 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000652:	2028      	movs	r0, #40	@ 0x28
 8000654:	f004 fc05 	bl	8004e62 <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000658:	797b      	ldrb	r3, [r7, #5]
 800065a:	4619      	mov	r1, r3
 800065c:	200b      	movs	r0, #11
 800065e:	f002 fb4f 	bl	8002d00 <WriteDataToTouchModule>

}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000054 	.word	0x20000054
 8000670:	20000050 	.word	0x20000050
 8000674:	20000040 	.word	0x20000040
 8000678:	20000048 	.word	0x20000048

0800067c <applicationButtonInit>:
#endif // TOUCH_INTERRUPT_ENABLED

void applicationButtonInit()
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	ButtonInit();
 8000680:	f002 f840 	bl	8002704 <ButtonInit>
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}

08000688 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800068c:	2006      	movs	r0, #6
 800068e:	f004 fbf6 	bl	8004e7e <HAL_NVIC_DisableIRQ>
	//EXTI_HandleTypeDef* line = {0};
	HAL_EXTI_ClearPending(EXTI_GPIOA, EXTI_TRIGGER_RISING);
 8000692:	2101      	movs	r1, #1
 8000694:	2000      	movs	r0, #0
 8000696:	f004 fc1b 	bl	8004ed0 <HAL_EXTI_ClearPending>
	//IRQ_enable(EXTI0_IRQ_NUMBER);
	game_rotate();
 800069a:	f002 fc57 	bl	8002f4c <game_rotate>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800069e:	2006      	movs	r0, #6
 80006a0:	f004 fbdf 	bl	8004e62 <HAL_NVIC_EnableIRQ>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <map_draw>:
#include "BlockDriver.h"

static RNG_HandleTypeDef *hrng;

void map_draw()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
	//uint16_t y_len = LCD_PIXEL_HEIGHT;
	uint16_t x_len = LCD_PIXEL_WIDTH;
 80006ae:	23f0      	movs	r3, #240	@ 0xf0
 80006b0:	80fb      	strh	r3, [r7, #6]
	//edges of 5 pixels in width
	uint16_t x = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	80bb      	strh	r3, [r7, #4]

	//VERTICAL
	for(int i = 1; i<LCD_PIXEL_WIDTH; i+=BLOCK_WIDTH)
 80006b6:	2301      	movs	r3, #1
 80006b8:	61fb      	str	r3, [r7, #28]
 80006ba:	e00d      	b.n	80006d8 <map_draw+0x30>
	{
		LCD_Draw_Vertical_Line(EDGE_WIDTH+i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	3304      	adds	r3, #4
 80006c2:	b298      	uxth	r0, r3
 80006c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006c8:	f240 1235 	movw	r2, #309	@ 0x135
 80006cc:	210b      	movs	r1, #11
 80006ce:	f002 f9cd 	bl	8002a6c <LCD_Draw_Vertical_Line>
	for(int i = 1; i<LCD_PIXEL_WIDTH; i+=BLOCK_WIDTH)
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3317      	adds	r3, #23
 80006d6:	61fb      	str	r3, [r7, #28]
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	2bef      	cmp	r3, #239	@ 0xef
 80006dc:	ddee      	ble.n	80006bc <map_draw+0x14>
	}
	for(int i = 1; i<=EDGE_WIDTH; i++)
 80006de:	2301      	movs	r3, #1
 80006e0:	61bb      	str	r3, [r7, #24]
 80006e2:	e00b      	b.n	80006fc <map_draw+0x54>
	{
		LCD_Draw_Vertical_Line(i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	b298      	uxth	r0, r3
 80006e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006ec:	f240 1235 	movw	r2, #309	@ 0x135
 80006f0:	210b      	movs	r1, #11
 80006f2:	f002 f9bb 	bl	8002a6c <LCD_Draw_Vertical_Line>
	for(int i = 1; i<=EDGE_WIDTH; i++)
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	3301      	adds	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	2b04      	cmp	r3, #4
 8000700:	ddf0      	ble.n	80006e4 <map_draw+0x3c>
	}
	for(int i = LCD_PIXEL_WIDTH-EDGE_WIDTH; i<=LCD_PIXEL_WIDTH; i++)
 8000702:	23ec      	movs	r3, #236	@ 0xec
 8000704:	617b      	str	r3, [r7, #20]
 8000706:	e00b      	b.n	8000720 <map_draw+0x78>
	{
		LCD_Draw_Vertical_Line(i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	b298      	uxth	r0, r3
 800070c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000710:	f240 1235 	movw	r2, #309	@ 0x135
 8000714:	210b      	movs	r1, #11
 8000716:	f002 f9a9 	bl	8002a6c <LCD_Draw_Vertical_Line>
	for(int i = LCD_PIXEL_WIDTH-EDGE_WIDTH; i<=LCD_PIXEL_WIDTH; i++)
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	3301      	adds	r3, #1
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	2bf0      	cmp	r3, #240	@ 0xf0
 8000724:	ddf0      	ble.n	8000708 <map_draw+0x60>
	}

	//HORIZONTAL
	for(int i = 1; i<MAP_HEIGHT; i+=BLOCK_WIDTH)
 8000726:	2301      	movs	r3, #1
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	e00c      	b.n	8000746 <map_draw+0x9e>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+EDGE_WIDTH+i, x_len, LCD_COLOR_WHITE);
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	b29b      	uxth	r3, r3
 8000730:	330f      	adds	r3, #15
 8000732:	b299      	uxth	r1, r3
 8000734:	88fa      	ldrh	r2, [r7, #6]
 8000736:	88b8      	ldrh	r0, [r7, #4]
 8000738:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800073c:	f002 f9bd 	bl	8002aba <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<MAP_HEIGHT; i+=BLOCK_WIDTH)
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	3317      	adds	r3, #23
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800074c:	ddee      	ble.n	800072c <map_draw+0x84>
	}
	for(int i = 0; i<=EDGE_WIDTH; i++)
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	e00c      	b.n	800076e <map_draw+0xc6>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+i, x_len, LCD_COLOR_WHITE);
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	b29b      	uxth	r3, r3
 8000758:	330b      	adds	r3, #11
 800075a:	b299      	uxth	r1, r3
 800075c:	88fa      	ldrh	r2, [r7, #6]
 800075e:	88b8      	ldrh	r0, [r7, #4]
 8000760:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000764:	f002 f9a9 	bl	8002aba <LCD_Draw_Horizontal_Line>
	for(int i = 0; i<=EDGE_WIDTH; i++)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3301      	adds	r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2b04      	cmp	r3, #4
 8000772:	ddef      	ble.n	8000754 <map_draw+0xac>
	}
	for(int i = MAP_HEIGHT-EDGE_WIDTH; i<=MAP_HEIGHT; i++)
 8000774:	f240 1331 	movw	r3, #305	@ 0x131
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	e00c      	b.n	8000796 <map_draw+0xee>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+i, x_len, LCD_COLOR_WHITE);
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	b29b      	uxth	r3, r3
 8000780:	330b      	adds	r3, #11
 8000782:	b299      	uxth	r1, r3
 8000784:	88fa      	ldrh	r2, [r7, #6]
 8000786:	88b8      	ldrh	r0, [r7, #4]
 8000788:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800078c:	f002 f995 	bl	8002aba <LCD_Draw_Horizontal_Line>
	for(int i = MAP_HEIGHT-EDGE_WIDTH; i<=MAP_HEIGHT; i++)
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	3301      	adds	r3, #1
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 800079c:	dbee      	blt.n	800077c <map_draw+0xd4>
	}
}
 800079e:	bf00      	nop
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <start_screen>:

void start_screen()
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
	//uint16_t play_x = 68; //to 172
	uint16_t play_y = 106; //to 184
 80007ae:	236a      	movs	r3, #106	@ 0x6a
 80007b0:	80fb      	strh	r3, [r7, #6]
	//uint16_t button_height = 48;
	uint16_t button_width = LCD_PIXEL_WIDTH/2;
 80007b2:	2378      	movs	r3, #120	@ 0x78
 80007b4:	80bb      	strh	r3, [r7, #4]

	for(int i = 1; i<button_width/2; i++)
 80007b6:	2301      	movs	r3, #1
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	e014      	b.n	80007e6 <start_screen+0x3e>
	{
		LCD_Draw_Horizontal_Line(120-i, play_y+i, 2*i, LCD_COLOR_WHITE);
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 80007c4:	b298      	uxth	r0, r3
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	4413      	add	r3, r2
 80007ce:	b299      	uxth	r1, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007dc:	f002 f96d 	bl	8002aba <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<button_width/2; i++)
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	3301      	adds	r3, #1
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	88bb      	ldrh	r3, [r7, #4]
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	461a      	mov	r2, r3
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	4293      	cmp	r3, r2
 80007f2:	dbe3      	blt.n	80007bc <start_screen+0x14>
	}
	for(int i = button_width/2; i>0; i--)
 80007f4:	88bb      	ldrh	r3, [r7, #4]
 80007f6:	085b      	lsrs	r3, r3, #1
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	e020      	b.n	8000840 <start_screen+0x98>
	{
		LCD_Draw_Horizontal_Line(i+button_width/2, play_y + i + (button_width/2) - 1, button_width-(2*i), LCD_COLOR_WHITE);
 80007fe:	88bb      	ldrh	r3, [r7, #4]
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	b29a      	uxth	r2, r3
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	b29b      	uxth	r3, r3
 8000808:	4413      	add	r3, r2
 800080a:	b298      	uxth	r0, r3
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	b29a      	uxth	r2, r3
 8000810:	88fb      	ldrh	r3, [r7, #6]
 8000812:	4413      	add	r3, r2
 8000814:	b29a      	uxth	r2, r3
 8000816:	88bb      	ldrh	r3, [r7, #4]
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	b29b      	uxth	r3, r3
 800081c:	4413      	add	r3, r2
 800081e:	b29b      	uxth	r3, r3
 8000820:	3b01      	subs	r3, #1
 8000822:	b299      	uxth	r1, r3
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	b29b      	uxth	r3, r3
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	b29b      	uxth	r3, r3
 800082c:	88ba      	ldrh	r2, [r7, #4]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	b29a      	uxth	r2, r3
 8000832:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000836:	f002 f940 	bl	8002aba <LCD_Draw_Horizontal_Line>
	for(int i = button_width/2; i>0; i--)
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	3b01      	subs	r3, #1
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	2b00      	cmp	r3, #0
 8000844:	dcdb      	bgt.n	80007fe <start_screen+0x56>
	}
	for(int i = 1; i<button_width/2 -2; i++)
 8000846:	2301      	movs	r3, #1
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	e015      	b.n	8000878 <start_screen+0xd0>
	{
		LCD_Draw_Horizontal_Line(120-i, play_y+i +2 , 2*i, LCD_COLOR_BLACK);
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	b29b      	uxth	r3, r3
 8000850:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 8000854:	b298      	uxth	r0, r3
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	b29a      	uxth	r2, r3
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	4413      	add	r3, r2
 800085e:	b29b      	uxth	r3, r3
 8000860:	3302      	adds	r3, #2
 8000862:	b299      	uxth	r1, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	b29b      	uxth	r3, r3
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	b29a      	uxth	r2, r3
 800086c:	2300      	movs	r3, #0
 800086e:	f002 f924 	bl	8002aba <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<button_width/2 -2; i++)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	3301      	adds	r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	88bb      	ldrh	r3, [r7, #4]
 800087a:	085b      	lsrs	r3, r3, #1
 800087c:	b29b      	uxth	r3, r3
 800087e:	3b02      	subs	r3, #2
 8000880:	68fa      	ldr	r2, [r7, #12]
 8000882:	429a      	cmp	r2, r3
 8000884:	dbe2      	blt.n	800084c <start_screen+0xa4>
	}
	for(int i = button_width/2 -2; i>0; i--)
 8000886:	88bb      	ldrh	r3, [r7, #4]
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	b29b      	uxth	r3, r3
 800088c:	3b02      	subs	r3, #2
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	e023      	b.n	80008da <start_screen+0x132>
	{
		LCD_Draw_Horizontal_Line(i+button_width/2+1, play_y + i + (button_width/2) - 2, button_width-(2*i)-2, LCD_COLOR_BLACK);
 8000892:	88bb      	ldrh	r3, [r7, #4]
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	b29a      	uxth	r2, r3
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	b29b      	uxth	r3, r3
 800089c:	4413      	add	r3, r2
 800089e:	b29b      	uxth	r3, r3
 80008a0:	3301      	adds	r3, #1
 80008a2:	b298      	uxth	r0, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	4413      	add	r3, r2
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	88bb      	ldrh	r3, [r7, #4]
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4413      	add	r3, r2
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	3b02      	subs	r3, #2
 80008ba:	b299      	uxth	r1, r3
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	88ba      	ldrh	r2, [r7, #4]
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	3b02      	subs	r3, #2
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	2300      	movs	r3, #0
 80008d0:	f002 f8f3 	bl	8002aba <LCD_Draw_Horizontal_Line>
	for(int i = button_width/2 -2; i>0; i--)
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	dcd8      	bgt.n	8000892 <start_screen+0xea>
	}

	LCD_SetFont(&Font16x24);
 80008e0:	4815      	ldr	r0, [pc, #84]	@ (8000938 <start_screen+0x190>)
 80008e2:	f002 f943 	bl	8002b6c <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_RED);
 80008e6:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80008ea:	f002 f92f 	bl	8002b4c <LCD_SetTextColor>
	LCD_DisplayChar(76, 154, 'P');
 80008ee:	2250      	movs	r2, #80	@ 0x50
 80008f0:	219a      	movs	r1, #154	@ 0x9a
 80008f2:	204c      	movs	r0, #76	@ 0x4c
 80008f4:	f002 f9b8 	bl	8002c68 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_YELLOW);
 80008f8:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80008fc:	f002 f926 	bl	8002b4c <LCD_SetTextColor>
	LCD_DisplayChar(100, 154, 'L');
 8000900:	224c      	movs	r2, #76	@ 0x4c
 8000902:	219a      	movs	r1, #154	@ 0x9a
 8000904:	2064      	movs	r0, #100	@ 0x64
 8000906:	f002 f9af 	bl	8002c68 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_BLUE2);
 800090a:	f240 501f 	movw	r0, #1311	@ 0x51f
 800090e:	f002 f91d 	bl	8002b4c <LCD_SetTextColor>
	LCD_DisplayChar(124, 154, 'A');
 8000912:	2241      	movs	r2, #65	@ 0x41
 8000914:	219a      	movs	r1, #154	@ 0x9a
 8000916:	207c      	movs	r0, #124	@ 0x7c
 8000918:	f002 f9a6 	bl	8002c68 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_GREEN);
 800091c:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000920:	f002 f914 	bl	8002b4c <LCD_SetTextColor>
	LCD_DisplayChar(148, 154, 'Y');
 8000924:	2259      	movs	r2, #89	@ 0x59
 8000926:	219a      	movs	r1, #154	@ 0x9a
 8000928:	2094      	movs	r0, #148	@ 0x94
 800092a:	f002 f99d 	bl	8002c68 <LCD_DisplayChar>
}
 800092e:	bf00      	nop
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000004 	.word	0x20000004

0800093c <end_screen>:

void end_screen()
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLACK);
 8000940:	2100      	movs	r1, #0
 8000942:	2000      	movs	r0, #0
 8000944:	f002 f8e0 	bl	8002b08 <LCD_Clear>
	LCD_SetFont(&Font16x24);
 8000948:	4818      	ldr	r0, [pc, #96]	@ (80009ac <end_screen+0x70>)
 800094a:	f002 f90f 	bl	8002b6c <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 800094e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000952:	f002 f8fb 	bl	8002b4c <LCD_SetTextColor>
	LCD_DisplayChar(80, 100, 'G');
 8000956:	2247      	movs	r2, #71	@ 0x47
 8000958:	2164      	movs	r1, #100	@ 0x64
 800095a:	2050      	movs	r0, #80	@ 0x50
 800095c:	f002 f984 	bl	8002c68 <LCD_DisplayChar>
	LCD_DisplayChar(102, 100, 'A');
 8000960:	2241      	movs	r2, #65	@ 0x41
 8000962:	2164      	movs	r1, #100	@ 0x64
 8000964:	2066      	movs	r0, #102	@ 0x66
 8000966:	f002 f97f 	bl	8002c68 <LCD_DisplayChar>
	LCD_DisplayChar(122, 100, 'M');
 800096a:	224d      	movs	r2, #77	@ 0x4d
 800096c:	2164      	movs	r1, #100	@ 0x64
 800096e:	207a      	movs	r0, #122	@ 0x7a
 8000970:	f002 f97a 	bl	8002c68 <LCD_DisplayChar>
	LCD_DisplayChar(144, 100, 'E');
 8000974:	2245      	movs	r2, #69	@ 0x45
 8000976:	2164      	movs	r1, #100	@ 0x64
 8000978:	2090      	movs	r0, #144	@ 0x90
 800097a:	f002 f975 	bl	8002c68 <LCD_DisplayChar>
	LCD_DisplayChar(80, 130, 'O');
 800097e:	224f      	movs	r2, #79	@ 0x4f
 8000980:	2182      	movs	r1, #130	@ 0x82
 8000982:	2050      	movs	r0, #80	@ 0x50
 8000984:	f002 f970 	bl	8002c68 <LCD_DisplayChar>
	LCD_DisplayChar(102, 130, 'V');
 8000988:	2256      	movs	r2, #86	@ 0x56
 800098a:	2182      	movs	r1, #130	@ 0x82
 800098c:	2066      	movs	r0, #102	@ 0x66
 800098e:	f002 f96b 	bl	8002c68 <LCD_DisplayChar>
	LCD_DisplayChar(122, 130, 'E');
 8000992:	2245      	movs	r2, #69	@ 0x45
 8000994:	2182      	movs	r1, #130	@ 0x82
 8000996:	207a      	movs	r0, #122	@ 0x7a
 8000998:	f002 f966 	bl	8002c68 <LCD_DisplayChar>
	LCD_DisplayChar(144, 130, 'R');
 800099c:	2252      	movs	r2, #82	@ 0x52
 800099e:	2182      	movs	r1, #130	@ 0x82
 80009a0:	2090      	movs	r0, #144	@ 0x90
 80009a2:	f002 f961 	bl	8002c68 <LCD_DisplayChar>
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000004 	.word	0x20000004

080009b0 <disp_time>:

void disp_time(uint32_t time)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	uint32_t seconds = time / 1000;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a25      	ldr	r2, [pc, #148]	@ (8000a50 <disp_time+0xa0>)
 80009bc:	fba2 2303 	umull	r2, r3, r2, r3
 80009c0:	099b      	lsrs	r3, r3, #6
 80009c2:	61fb      	str	r3, [r7, #28]
	uint32_t min = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61bb      	str	r3, [r7, #24]
	uint32_t sec_tens = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
	while(seconds > 60)
 80009cc:	e005      	b.n	80009da <disp_time+0x2a>
	{
		seconds -= 60;
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3b3c      	subs	r3, #60	@ 0x3c
 80009d2:	61fb      	str	r3, [r7, #28]
		min++;
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	3301      	adds	r3, #1
 80009d8:	61bb      	str	r3, [r7, #24]
	while(seconds > 60)
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	2b3c      	cmp	r3, #60	@ 0x3c
 80009de:	d8f6      	bhi.n	80009ce <disp_time+0x1e>
	}
	while(seconds > 10)
 80009e0:	e005      	b.n	80009ee <disp_time+0x3e>
	{
		seconds -= 10;
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3b0a      	subs	r3, #10
 80009e6:	61fb      	str	r3, [r7, #28]
		sec_tens++;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	3301      	adds	r3, #1
 80009ec:	617b      	str	r3, [r7, #20]
	while(seconds > 10)
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	2b0a      	cmp	r3, #10
 80009f2:	d8f6      	bhi.n	80009e2 <disp_time+0x32>
	}

	uint32_t sec_char = seconds + '0';
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	3330      	adds	r3, #48	@ 0x30
 80009f8:	613b      	str	r3, [r7, #16]
	uint32_t sec_tens_char = sec_tens + '0';
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3330      	adds	r3, #48	@ 0x30
 80009fe:	60fb      	str	r3, [r7, #12]
	uint32_t min_char = min + '0';
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	3330      	adds	r3, #48	@ 0x30
 8000a04:	60bb      	str	r3, [r7, #8]

	LCD_SetFont(&Font12x12);
 8000a06:	4813      	ldr	r0, [pc, #76]	@ (8000a54 <disp_time+0xa4>)
 8000a08:	f002 f8b0 	bl	8002b6c <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a0c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000a10:	f002 f89c 	bl	8002b4c <LCD_SetTextColor>
	LCD_DisplayChar(100, 160, min_char);
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	461a      	mov	r2, r3
 8000a1a:	21a0      	movs	r1, #160	@ 0xa0
 8000a1c:	2064      	movs	r0, #100	@ 0x64
 8000a1e:	f002 f923 	bl	8002c68 <LCD_DisplayChar>
	LCD_DisplayChar(114, 160, ':');
 8000a22:	223a      	movs	r2, #58	@ 0x3a
 8000a24:	21a0      	movs	r1, #160	@ 0xa0
 8000a26:	2072      	movs	r0, #114	@ 0x72
 8000a28:	f002 f91e 	bl	8002c68 <LCD_DisplayChar>
	LCD_DisplayChar(124, 160, sec_tens_char);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	461a      	mov	r2, r3
 8000a32:	21a0      	movs	r1, #160	@ 0xa0
 8000a34:	207c      	movs	r0, #124	@ 0x7c
 8000a36:	f002 f917 	bl	8002c68 <LCD_DisplayChar>
	LCD_DisplayChar(138, 160, sec_char);
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	461a      	mov	r2, r3
 8000a40:	21a0      	movs	r1, #160	@ 0xa0
 8000a42:	208a      	movs	r0, #138	@ 0x8a
 8000a44:	f002 f910 	bl	8002c68 <LCD_DisplayChar>

}
 8000a48:	bf00      	nop
 8000a4a:	3720      	adds	r7, #32
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	10624dd3 	.word	0x10624dd3
 8000a54:	2000000c 	.word	0x2000000c

08000a58 <block_drop>:
		APPLICATION_ASSERT(1);
	}
}

block_t block_drop(block_t *block)
{
 8000a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a5a:	b091      	sub	sp, #68	@ 0x44
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
	//when timer reaches ARR and enters IRQ handler, call this function
	volatile block_t temp_tetromino = *block;
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	461c      	mov	r4, r3
 8000a66:	f107 0608 	add.w	r6, r7, #8
 8000a6a:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8000a6e:	4635      	mov	r5, r6
 8000a70:	4623      	mov	r3, r4
 8000a72:	6818      	ldr	r0, [r3, #0]
 8000a74:	6859      	ldr	r1, [r3, #4]
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a7c:	3410      	adds	r4, #16
 8000a7e:	3610      	adds	r6, #16
 8000a80:	4564      	cmp	r4, ip
 8000a82:	d1f4      	bne.n	8000a6e <block_drop+0x16>
 8000a84:	4633      	mov	r3, r6
 8000a86:	4622      	mov	r2, r4
 8000a88:	6810      	ldr	r0, [r2, #0]
 8000a8a:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < 4; i++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a90:	e013      	b.n	8000aba <block_drop+0x62>
	{
		temp_tetromino.y[i] += BLOCK_WIDTH;
 8000a92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a94:	3314      	adds	r3, #20
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	3340      	adds	r3, #64	@ 0x40
 8000a9a:	443b      	add	r3, r7
 8000a9c:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	3317      	adds	r3, #23
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000aa8:	3314      	adds	r3, #20
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	3340      	adds	r3, #64	@ 0x40
 8000aae:	443b      	add	r3, r7
 8000ab0:	f823 2c34 	strh.w	r2, [r3, #-52]
	for(int i = 0; i < 4; i++)
 8000ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000abc:	2b03      	cmp	r3, #3
 8000abe:	dde8      	ble.n	8000a92 <block_drop+0x3a>
	}
	//*block = temp_tetromino;
	return temp_tetromino;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f107 0408 	add.w	r4, r7, #8
 8000ac6:	469c      	mov	ip, r3
 8000ac8:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8000acc:	4665      	mov	r5, ip
 8000ace:	4626      	mov	r6, r4
 8000ad0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ad2:	6028      	str	r0, [r5, #0]
 8000ad4:	6069      	str	r1, [r5, #4]
 8000ad6:	60aa      	str	r2, [r5, #8]
 8000ad8:	60eb      	str	r3, [r5, #12]
 8000ada:	3410      	adds	r4, #16
 8000adc:	f10c 0c10 	add.w	ip, ip, #16
 8000ae0:	4574      	cmp	r4, lr
 8000ae2:	d1f3      	bne.n	8000acc <block_drop+0x74>
 8000ae4:	4663      	mov	r3, ip
 8000ae6:	4622      	mov	r2, r4
 8000ae8:	6810      	ldr	r0, [r2, #0]
 8000aea:	6018      	str	r0, [r3, #0]
}
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	3744      	adds	r7, #68	@ 0x44
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000af4 <block_create>:

block_t block_create(uint8_t num)
{
 8000af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000af6:	b0b3      	sub	sp, #204	@ 0xcc
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	70fb      	strb	r3, [r7, #3]
	volatile block_t block = {0};
 8000b00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b04:	2234      	movs	r2, #52	@ 0x34
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f007 fc37 	bl	800837c <memset>
	//evaluate rng for color
	//set pos_x, pos_y
	//return the block

	//uint32_t rand = HAL_RNG_GetRandomNumber(hrng);
	uint32_t rand = num;
 8000b0e:	78fb      	ldrb	r3, [r7, #3]
 8000b10:	66fb      	str	r3, [r7, #108]	@ 0x6c
	uint8_t name = rand & 0b111;
 8000b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
		block.name = name;
 8000b1e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000b22:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	//uint32_t rando = HAL_RNG_GetRandomNumber(hrng);
	uint32_t rando = num;
 8000b26:	78fb      	ldrb	r3, [r7, #3]
 8000b28:	667b      	str	r3, [r7, #100]	@ 0x64
	uint8_t color = rando & 0b111;
 8000b2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	//COLOR
	if(color == BLUE)
 8000b36:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <block_create+0x4e>
	{
		block.color = LCD_COLOR_BLUE;
 8000b3e:	231f      	movs	r3, #31
 8000b40:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == RED)
 8000b42:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d102      	bne.n	8000b50 <block_create+0x5c>
	{
		block.color = LCD_COLOR_RED;
 8000b4a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000b4e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == MAGENTA)
 8000b50:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d102      	bne.n	8000b5e <block_create+0x6a>
	{
		block.color = LCD_COLOR_MAGENTA;
 8000b58:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000b5c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == GREEN)
 8000b5e:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000b62:	2b03      	cmp	r3, #3
 8000b64:	d102      	bne.n	8000b6c <block_create+0x78>
	{
		block.color = LCD_COLOR_GREEN;
 8000b66:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000b6a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == CYAN)
 8000b6c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000b70:	2b04      	cmp	r3, #4
 8000b72:	d102      	bne.n	8000b7a <block_create+0x86>
	{
		block.color = LCD_COLOR_CYAN;
 8000b74:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000b78:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == YELLOW)
 8000b7a:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000b7e:	2b05      	cmp	r3, #5
 8000b80:	d102      	bne.n	8000b88 <block_create+0x94>
	{
		block.color = LCD_COLOR_YELLOW;
 8000b82:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000b86:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == ORANGE)
 8000b88:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000b8c:	2b06      	cmp	r3, #6
 8000b8e:	d102      	bne.n	8000b96 <block_create+0xa2>
	{
		block.color = LCD_COLOR_ORANGE;
 8000b90:	f64f 33c1 	movw	r3, #64449	@ 0xfbc1
 8000b94:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == PURPLE)
 8000b96:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000b9a:	2b07      	cmp	r3, #7
 8000b9c:	d102      	bne.n	8000ba4 <block_create+0xb0>
	{
		block.color = LCD_COLOR_PURPLE;
 8000b9e:	f647 0318 	movw	r3, #30744	@ 0x7818
 8000ba2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	//COORDINATES
	for(int i = 0; i < 4; i++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000baa:	e017      	b.n	8000bdc <block_create+0xe8>
	{
		block.x[i] = BLOCK_START_X + i*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000bac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	0052      	lsls	r2, r2, #1
 8000bb6:	441a      	add	r2, r3
 8000bb8:	00d2      	lsls	r2, r2, #3
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	334b      	adds	r3, #75	@ 0x4b
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000bc6:	3310      	adds	r3, #16
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	33c8      	adds	r3, #200	@ 0xc8
 8000bcc:	443b      	add	r3, r7
 8000bce:	f823 2c98 	strh.w	r2, [r3, #-152]
	for(int i = 0; i < 4; i++)
 8000bd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000bdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	dde3      	ble.n	8000bac <block_create+0xb8>
	}

	//BLOCK MATRICES
	if(block.name == O)
 8000be4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d16f      	bne.n	8000cce <block_create+0x1da>
	{
		uint16_t temp[4][4] =
 8000bee:	4bce      	ldr	r3, [pc, #824]	@ (8000f28 <block_create+0x434>)
 8000bf0:	f107 040c 	add.w	r4, r7, #12
 8000bf4:	461d      	mov	r5, r3
 8000bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000bfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,1},
			{0,0,1,1}};

		for(int i = 0; i < 4; i++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000c08:	e028      	b.n	8000c5c <block_create+0x168>
		{
			for(int j = 0; j < 4; j++)
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000c10:	e01b      	b.n	8000c4a <block_create+0x156>
			{
				block.mat[i][j] = temp[j][i];
 8000c12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000c16:	009a      	lsls	r2, r3, #2
 8000c18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000c1c:	4413      	add	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	33c8      	adds	r3, #200	@ 0xc8
 8000c22:	443b      	add	r3, r7
 8000c24:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000c28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000c2c:	009a      	lsls	r2, r3, #2
 8000c2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000c32:	4413      	add	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	33c8      	adds	r3, #200	@ 0xc8
 8000c38:	443b      	add	r3, r7
 8000c3a:	460a      	mov	r2, r1
 8000c3c:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000c40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000c44:	3301      	adds	r3, #1
 8000c46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000c4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	dddf      	ble.n	8000c12 <block_create+0x11e>
		for(int i = 0; i < 4; i++)
 8000c52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000c56:	3301      	adds	r3, #1
 8000c58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000c5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000c60:	2b03      	cmp	r3, #3
 8000c62:	ddd2      	ble.n	8000c0a <block_create+0x116>
			}
		}
		for(int i = 0; i < 4; i++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000c6a:	e02c      	b.n	8000cc6 <block_create+0x1d2>
		{
			block.x[i] = BLOCK_START_X + (i-1)*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000c6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000c70:	3b01      	subs	r3, #1
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	461a      	mov	r2, r3
 8000c76:	0052      	lsls	r2, r2, #1
 8000c78:	441a      	add	r2, r3
 8000c7a:	00d2      	lsls	r2, r2, #3
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	334b      	adds	r3, #75	@ 0x4b
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000c88:	3310      	adds	r3, #16
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	33c8      	adds	r3, #200	@ 0xc8
 8000c8e:	443b      	add	r3, r7
 8000c90:	f823 2c98 	strh.w	r2, [r3, #-152]
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000c94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000c98:	3b02      	subs	r3, #2
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	0052      	lsls	r2, r2, #1
 8000ca0:	441a      	add	r2, r3
 8000ca2:	00d2      	lsls	r2, r2, #3
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	3311      	adds	r3, #17
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000cb0:	3314      	adds	r3, #20
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	33c8      	adds	r3, #200	@ 0xc8
 8000cb6:	443b      	add	r3, r7
 8000cb8:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000cbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000cc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	ddce      	ble.n	8000c6c <block_create+0x178>
		}
	}
	if(block.name == L)
 8000cce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d16f      	bne.n	8000db8 <block_create+0x2c4>
	{
		uint16_t temp[4][4] =
 8000cd8:	4b94      	ldr	r3, [pc, #592]	@ (8000f2c <block_create+0x438>)
 8000cda:	f107 040c 	add.w	r4, r7, #12
 8000cde:	461d      	mov	r5, r3
 8000ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ce8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,1,0},
			{0,0,1,0},
			{0,0,1,1}};
		for(int i = 0; i < 4; i++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000cf2:	e028      	b.n	8000d46 <block_create+0x252>
		{
			for(int j = 0; j < 4; j++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000cfa:	e01b      	b.n	8000d34 <block_create+0x240>
			{
				block.mat[i][j] = temp[j][i];
 8000cfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d00:	009a      	lsls	r2, r3, #2
 8000d02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d06:	4413      	add	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	33c8      	adds	r3, #200	@ 0xc8
 8000d0c:	443b      	add	r3, r7
 8000d0e:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000d12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d16:	009a      	lsls	r2, r3, #2
 8000d18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d1c:	4413      	add	r3, r2
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	33c8      	adds	r3, #200	@ 0xc8
 8000d22:	443b      	add	r3, r7
 8000d24:	460a      	mov	r2, r1
 8000d26:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000d2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d2e:	3301      	adds	r3, #1
 8000d30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000d34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	dddf      	ble.n	8000cfc <block_create+0x208>
		for(int i = 0; i < 4; i++)
 8000d3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d40:	3301      	adds	r3, #1
 8000d42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000d46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	ddd2      	ble.n	8000cf4 <block_create+0x200>
			}
		}
		for(int i = 0; i < 4; i++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000d54:	e02c      	b.n	8000db0 <block_create+0x2bc>
		{
			block.x[i] = BLOCK_START_X + (i-1)*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000d56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	461a      	mov	r2, r3
 8000d60:	0052      	lsls	r2, r2, #1
 8000d62:	441a      	add	r2, r3
 8000d64:	00d2      	lsls	r2, r2, #3
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	334b      	adds	r3, #75	@ 0x4b
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000d72:	3310      	adds	r3, #16
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	33c8      	adds	r3, #200	@ 0xc8
 8000d78:	443b      	add	r3, r7
 8000d7a:	f823 2c98 	strh.w	r2, [r3, #-152]
			block.y[i] = BLOCK_START_Y + (i-1)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000d7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000d82:	3b01      	subs	r3, #1
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	461a      	mov	r2, r3
 8000d88:	0052      	lsls	r2, r2, #1
 8000d8a:	441a      	add	r2, r3
 8000d8c:	00d2      	lsls	r2, r2, #3
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	3311      	adds	r3, #17
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000d9a:	3314      	adds	r3, #20
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	33c8      	adds	r3, #200	@ 0xc8
 8000da0:	443b      	add	r3, r7
 8000da2:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000da6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000daa:	3301      	adds	r3, #1
 8000dac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000db0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000db4:	2b03      	cmp	r3, #3
 8000db6:	ddce      	ble.n	8000d56 <block_create+0x262>
		}
	}
	if(block.name == J)
 8000db8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d16e      	bne.n	8000ea0 <block_create+0x3ac>
	{
		uint16_t temp[4][4] =
 8000dc2:	4b5b      	ldr	r3, [pc, #364]	@ (8000f30 <block_create+0x43c>)
 8000dc4:	f107 040c 	add.w	r4, r7, #12
 8000dc8:	461d      	mov	r5, r3
 8000dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,1,0},
			{0,0,1,0},
			{0,1,1,0}};
		for(int i = 0; i < 4; i++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ddc:	e028      	b.n	8000e30 <block_create+0x33c>
		{
			for(int j = 0; j < 4; j++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000de4:	e01b      	b.n	8000e1e <block_create+0x32a>
			{
				block.mat[i][j] = temp[j][i];
 8000de6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000dea:	009a      	lsls	r2, r3, #2
 8000dec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000df0:	4413      	add	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	33c8      	adds	r3, #200	@ 0xc8
 8000df6:	443b      	add	r3, r7
 8000df8:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000dfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e00:	009a      	lsls	r2, r3, #2
 8000e02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e06:	4413      	add	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	33c8      	adds	r3, #200	@ 0xc8
 8000e0c:	443b      	add	r3, r7
 8000e0e:	460a      	mov	r2, r1
 8000e10:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000e14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e18:	3301      	adds	r3, #1
 8000e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000e1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	dddf      	ble.n	8000de6 <block_create+0x2f2>
		for(int i = 0; i < 4; i++)
 8000e26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000e30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	ddd2      	ble.n	8000dde <block_create+0x2ea>
			}
		}
		for(int i = 0; i < 4; i++)
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000e3e:	e02b      	b.n	8000e98 <block_create+0x3a4>
		{
			block.x[i] = BLOCK_START_X + i*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000e40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	461a      	mov	r2, r3
 8000e48:	0052      	lsls	r2, r2, #1
 8000e4a:	441a      	add	r2, r3
 8000e4c:	00d2      	lsls	r2, r2, #3
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	334b      	adds	r3, #75	@ 0x4b
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e5a:	3310      	adds	r3, #16
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	33c8      	adds	r3, #200	@ 0xc8
 8000e60:	443b      	add	r3, r7
 8000e62:	f823 2c98 	strh.w	r2, [r3, #-152]
			block.y[i] = BLOCK_START_Y + (i-1)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000e66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	461a      	mov	r2, r3
 8000e70:	0052      	lsls	r2, r2, #1
 8000e72:	441a      	add	r2, r3
 8000e74:	00d2      	lsls	r2, r2, #3
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	3311      	adds	r3, #17
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e82:	3314      	adds	r3, #20
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	33c8      	adds	r3, #200	@ 0xc8
 8000e88:	443b      	add	r3, r7
 8000e8a:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e92:	3301      	adds	r3, #1
 8000e94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000e98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	ddcf      	ble.n	8000e40 <block_create+0x34c>
		}
	}
	if(block.name == S)
 8000ea0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d163      	bne.n	8000f72 <block_create+0x47e>
	{
		uint16_t temp[4][4] =
 8000eaa:	4b22      	ldr	r3, [pc, #136]	@ (8000f34 <block_create+0x440>)
 8000eac:	f107 040c 	add.w	r4, r7, #12
 8000eb0:	461d      	mov	r5, r3
 8000eb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000eba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,1},
			{0,1,1,0}};
		for(int i = 0; i < 4; i++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000ec4:	e028      	b.n	8000f18 <block_create+0x424>
		{
			for(int j = 0; j < 4; j++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000ecc:	e01b      	b.n	8000f06 <block_create+0x412>
			{
				block.mat[i][j] = temp[j][i];
 8000ece:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000ed2:	009a      	lsls	r2, r3, #2
 8000ed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ed8:	4413      	add	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	33c8      	adds	r3, #200	@ 0xc8
 8000ede:	443b      	add	r3, r7
 8000ee0:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000ee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ee8:	009a      	lsls	r2, r3, #2
 8000eea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000eee:	4413      	add	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	33c8      	adds	r3, #200	@ 0xc8
 8000ef4:	443b      	add	r3, r7
 8000ef6:	460a      	mov	r2, r1
 8000ef8:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f00:	3301      	adds	r3, #1
 8000f02:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000f06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	dddf      	ble.n	8000ece <block_create+0x3da>
		for(int i = 0; i < 4; i++)
 8000f0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f12:	3301      	adds	r3, #1
 8000f14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000f18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	ddd2      	ble.n	8000ec6 <block_create+0x3d2>
			}
		}
		for(int i = 0; i < 4; i++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000f26:	e020      	b.n	8000f6a <block_create+0x476>
 8000f28:	08008408 	.word	0x08008408
 8000f2c:	08008428 	.word	0x08008428
 8000f30:	08008448 	.word	0x08008448
 8000f34:	08008468 	.word	0x08008468
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000f38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f3c:	3b02      	subs	r3, #2
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	0052      	lsls	r2, r2, #1
 8000f44:	441a      	add	r2, r3
 8000f46:	00d2      	lsls	r2, r2, #3
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	3311      	adds	r3, #17
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f54:	3314      	adds	r3, #20
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	33c8      	adds	r3, #200	@ 0xc8
 8000f5a:	443b      	add	r3, r7
 8000f5c:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000f60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f64:	3301      	adds	r3, #1
 8000f66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000f6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	dde2      	ble.n	8000f38 <block_create+0x444>
		}
	}
	if(block.name == Z)
 8000f72:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b04      	cmp	r3, #4
 8000f7a:	d15b      	bne.n	8001034 <block_create+0x540>
	{
		uint16_t temp[4][4] =
 8000f7c:	4b8f      	ldr	r3, [pc, #572]	@ (80011bc <block_create+0x6c8>)
 8000f7e:	f107 040c 	add.w	r4, r7, #12
 8000f82:	461d      	mov	r5, r3
 8000f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,1,1,0},
			{0,0,1,1}};
		for(int i = 0; i < 4; i++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000f96:	e028      	b.n	8000fea <block_create+0x4f6>
		{
			for(int j = 0; j < 4; j++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000f9e:	e01b      	b.n	8000fd8 <block_create+0x4e4>
			{
				block.mat[i][j] = temp[j][i];
 8000fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000fa4:	009a      	lsls	r2, r3, #2
 8000fa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000faa:	4413      	add	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	33c8      	adds	r3, #200	@ 0xc8
 8000fb0:	443b      	add	r3, r7
 8000fb2:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000fb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000fba:	009a      	lsls	r2, r3, #2
 8000fbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000fc0:	4413      	add	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	33c8      	adds	r3, #200	@ 0xc8
 8000fc6:	443b      	add	r3, r7
 8000fc8:	460a      	mov	r2, r1
 8000fca:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000fce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000fd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	dddf      	ble.n	8000fa0 <block_create+0x4ac>
		for(int i = 0; i < 4; i++)
 8000fe0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000fea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	ddd2      	ble.n	8000f98 <block_create+0x4a4>
			}
		}
		for(int i = 0; i < 4; i++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000ff8:	e018      	b.n	800102c <block_create+0x538>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000ffa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000ffe:	3b02      	subs	r3, #2
 8001000:	b29b      	uxth	r3, r3
 8001002:	461a      	mov	r2, r3
 8001004:	0052      	lsls	r2, r2, #1
 8001006:	441a      	add	r2, r3
 8001008:	00d2      	lsls	r2, r2, #3
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	b29b      	uxth	r3, r3
 800100e:	3311      	adds	r3, #17
 8001010:	b29a      	uxth	r2, r3
 8001012:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001016:	3314      	adds	r3, #20
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	33c8      	adds	r3, #200	@ 0xc8
 800101c:	443b      	add	r3, r7
 800101e:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8001022:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001026:	3301      	adds	r3, #1
 8001028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800102c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001030:	2b03      	cmp	r3, #3
 8001032:	dde2      	ble.n	8000ffa <block_create+0x506>
		}
	}
	if(block.name == T)
 8001034:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b05      	cmp	r3, #5
 800103c:	d155      	bne.n	80010ea <block_create+0x5f6>
	{
		uint16_t temp[4][4] =
 800103e:	4b60      	ldr	r3, [pc, #384]	@ (80011c0 <block_create+0x6cc>)
 8001040:	f107 040c 	add.w	r4, r7, #12
 8001044:	461d      	mov	r5, r3
 8001046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800104e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,1,1,1},
			{0,0,1,0}};
		for(int i = 0; i < 4; i++)
 8001052:	2300      	movs	r3, #0
 8001054:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001058:	e028      	b.n	80010ac <block_create+0x5b8>
		{
			for(int j = 0; j < 4; j++)
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001060:	e01b      	b.n	800109a <block_create+0x5a6>
			{
				block.mat[i][j] = temp[j][i];
 8001062:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001066:	009a      	lsls	r2, r3, #2
 8001068:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800106c:	4413      	add	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	33c8      	adds	r3, #200	@ 0xc8
 8001072:	443b      	add	r3, r7
 8001074:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8001078:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800107c:	009a      	lsls	r2, r3, #2
 800107e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001082:	4413      	add	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	33c8      	adds	r3, #200	@ 0xc8
 8001088:	443b      	add	r3, r7
 800108a:	460a      	mov	r2, r1
 800108c:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8001090:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001094:	3301      	adds	r3, #1
 8001096:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800109a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800109e:	2b03      	cmp	r3, #3
 80010a0:	dddf      	ble.n	8001062 <block_create+0x56e>
		for(int i = 0; i < 4; i++)
 80010a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010a6:	3301      	adds	r3, #1
 80010a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80010ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	ddd2      	ble.n	800105a <block_create+0x566>
			}
		}
		for(int i = 0; i < 4; i++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80010b8:	e014      	b.n	80010e4 <block_create+0x5f0>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 80010ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80010bc:	3b02      	subs	r3, #2
 80010be:	b29b      	uxth	r3, r3
 80010c0:	461a      	mov	r2, r3
 80010c2:	0052      	lsls	r2, r2, #1
 80010c4:	441a      	add	r2, r3
 80010c6:	00d2      	lsls	r2, r2, #3
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	3311      	adds	r3, #17
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80010d2:	3314      	adds	r3, #20
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	33c8      	adds	r3, #200	@ 0xc8
 80010d8:	443b      	add	r3, r7
 80010da:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 80010de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80010e0:	3301      	adds	r3, #1
 80010e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80010e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	dde7      	ble.n	80010ba <block_create+0x5c6>
		}
	}
	if(block.name == I)
 80010ea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b06      	cmp	r3, #6
 80010f2:	d149      	bne.n	8001188 <block_create+0x694>
	{
		uint16_t temp[4][4] =
 80010f4:	4b33      	ldr	r3, [pc, #204]	@ (80011c4 <block_create+0x6d0>)
 80010f6:	f107 040c 	add.w	r4, r7, #12
 80010fa:	461d      	mov	r5, r3
 80010fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001100:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{1,1,1,1},
			{0,0,0,0}};
		for(int i = 0; i < 4; i++)
 8001108:	2300      	movs	r3, #0
 800110a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800110c:	e01e      	b.n	800114c <block_create+0x658>
		{
			for(int j = 0; j < 4; j++)
 800110e:	2300      	movs	r3, #0
 8001110:	677b      	str	r3, [r7, #116]	@ 0x74
 8001112:	e015      	b.n	8001140 <block_create+0x64c>
			{
				block.mat[i][j] = temp[j][i];
 8001114:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001116:	009a      	lsls	r2, r3, #2
 8001118:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800111a:	4413      	add	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	33c8      	adds	r3, #200	@ 0xc8
 8001120:	443b      	add	r3, r7
 8001122:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8001126:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001128:	009a      	lsls	r2, r3, #2
 800112a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800112c:	4413      	add	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	33c8      	adds	r3, #200	@ 0xc8
 8001132:	443b      	add	r3, r7
 8001134:	460a      	mov	r2, r1
 8001136:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 800113a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800113c:	3301      	adds	r3, #1
 800113e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001140:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001142:	2b03      	cmp	r3, #3
 8001144:	dde6      	ble.n	8001114 <block_create+0x620>
		for(int i = 0; i < 4; i++)
 8001146:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001148:	3301      	adds	r3, #1
 800114a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800114c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800114e:	2b03      	cmp	r3, #3
 8001150:	dddd      	ble.n	800110e <block_create+0x61a>
			}
		}
		for(int i = 0; i < 4; i++)
 8001152:	2300      	movs	r3, #0
 8001154:	673b      	str	r3, [r7, #112]	@ 0x70
 8001156:	e014      	b.n	8001182 <block_create+0x68e>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8001158:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800115a:	3b02      	subs	r3, #2
 800115c:	b29b      	uxth	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	0052      	lsls	r2, r2, #1
 8001162:	441a      	add	r2, r3
 8001164:	00d2      	lsls	r2, r2, #3
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	b29b      	uxth	r3, r3
 800116a:	3311      	adds	r3, #17
 800116c:	b29a      	uxth	r2, r3
 800116e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001170:	3314      	adds	r3, #20
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	33c8      	adds	r3, #200	@ 0xc8
 8001176:	443b      	add	r3, r7
 8001178:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 800117c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800117e:	3301      	adds	r3, #1
 8001180:	673b      	str	r3, [r7, #112]	@ 0x70
 8001182:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001184:	2b03      	cmp	r3, #3
 8001186:	dde7      	ble.n	8001158 <block_create+0x664>
		}
	}
	return block;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800118e:	469c      	mov	ip, r3
 8001190:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001194:	4665      	mov	r5, ip
 8001196:	4626      	mov	r6, r4
 8001198:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800119a:	6028      	str	r0, [r5, #0]
 800119c:	6069      	str	r1, [r5, #4]
 800119e:	60aa      	str	r2, [r5, #8]
 80011a0:	60eb      	str	r3, [r5, #12]
 80011a2:	3410      	adds	r4, #16
 80011a4:	f10c 0c10 	add.w	ip, ip, #16
 80011a8:	4574      	cmp	r4, lr
 80011aa:	d1f3      	bne.n	8001194 <block_create+0x6a0>
 80011ac:	4663      	mov	r3, ip
 80011ae:	4622      	mov	r2, r4
 80011b0:	6810      	ldr	r0, [r2, #0]
 80011b2:	6018      	str	r0, [r3, #0]
}
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	37cc      	adds	r7, #204	@ 0xcc
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011bc:	08008488 	.word	0x08008488
 80011c0:	080084a8 	.word	0x080084a8
 80011c4:	080084c8 	.word	0x080084c8

080011c8 <map_init>:

map_t map_init()
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80011d4:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80011d8:	6018      	str	r0, [r3, #0]
	volatile map_t map = {0};
 80011da:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80011de:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80011e2:	4618      	mov	r0, r3
 80011e4:	f240 2336 	movw	r3, #566	@ 0x236
 80011e8:	461a      	mov	r2, r3
 80011ea:	2100      	movs	r1, #0
 80011ec:	f007 f8c6 	bl	800837c <memset>
	for(int i = 0; i < 10; i++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 80011f6:	e019      	b.n	800122c <map_init+0x64>
	{
		map.x[i] = LEFT_EDGE + i*BLOCK_WIDTH;
 80011f8:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	461a      	mov	r2, r3
 8001200:	0052      	lsls	r2, r2, #1
 8001202:	441a      	add	r2, r3
 8001204:	00d2      	lsls	r2, r2, #3
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	b29b      	uxth	r3, r3
 800120a:	3306      	adds	r3, #6
 800120c:	b299      	uxth	r1, r3
 800120e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001212:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001216:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 800121a:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 800121e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 10; i++)
 8001222:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8001226:	3301      	adds	r3, #1
 8001228:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 800122c:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8001230:	2b09      	cmp	r3, #9
 8001232:	dde1      	ble.n	80011f8 <map_init+0x30>
	}
	for(int i = 0; i < 13; i++)
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 800123a:	e01b      	b.n	8001274 <map_init+0xac>
	{
		map.y[i] = MAP_DIFFERENCE + EDGE_WIDTH + i*BLOCK_WIDTH + 2;
 800123c:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001240:	b29b      	uxth	r3, r3
 8001242:	461a      	mov	r2, r3
 8001244:	0052      	lsls	r2, r2, #1
 8001246:	441a      	add	r2, r3
 8001248:	00d2      	lsls	r2, r2, #3
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	b29b      	uxth	r3, r3
 800124e:	3311      	adds	r3, #17
 8001250:	b299      	uxth	r1, r3
 8001252:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001256:	f5a3 7210 	sub.w	r2, r3, #576	@ 0x240
 800125a:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800125e:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	460a      	mov	r2, r1
 8001268:	809a      	strh	r2, [r3, #4]
	for(int i = 0; i < 13; i++)
 800126a:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800126e:	3301      	adds	r3, #1
 8001270:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8001274:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001278:	2b0c      	cmp	r3, #12
 800127a:	dddf      	ble.n	800123c <map_init+0x74>
	}
	return map;
 800127c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001280:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800128a:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f240 2336 	movw	r3, #566	@ 0x236
 8001296:	461a      	mov	r2, r3
 8001298:	f007 f89c 	bl	80083d4 <memcpy>
}
 800129c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80012a0:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <rest>:

uint8_t rest(block_t *block, map_t *map)
{
 80012ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b0:	f5ad 7d3f 	sub.w	sp, sp, #764	@ 0x2fc
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80012ba:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80012be:	6018      	str	r0, [r3, #0]
 80012c0:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80012c4:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 80012c8:	6019      	str	r1, [r3, #0]
	volatile block_t temp_tetromino = *block;
 80012ca:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80012ce:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	461c      	mov	r4, r3
 80012d6:	f507 7628 	add.w	r6, r7, #672	@ 0x2a0
 80012da:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80012de:	4635      	mov	r5, r6
 80012e0:	4623      	mov	r3, r4
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	6859      	ldr	r1, [r3, #4]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ec:	3410      	adds	r4, #16
 80012ee:	3610      	adds	r6, #16
 80012f0:	4564      	cmp	r4, ip
 80012f2:	d1f4      	bne.n	80012de <rest+0x30>
 80012f4:	4633      	mov	r3, r6
 80012f6:	4622      	mov	r2, r4
 80012f8:	6810      	ldr	r0, [r2, #0]
 80012fa:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 80012fc:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001300:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001304:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001308:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f240 2336 	movw	r3, #566	@ 0x236
 8001316:	461a      	mov	r2, r3
 8001318:	f007 f85c 	bl	80083d4 <memcpy>

	//evaluate the logical AND between the true blocks in block_t and
	//the next row of map_t (block y_pos + block size)
	uint8_t y_max_index[4] = {0};
 800131c:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001320:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
	uint8_t x_max_index[4] = {0};
 8001328:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800132c:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
	uint16_t y_max[4] = {0};
 8001334:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001338:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800133c:	461a      	mov	r2, r3
 800133e:	2300      	movs	r3, #0
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	6053      	str	r3, [r2, #4]
	uint16_t x_max[4] = {0};
 8001344:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001348:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800134c:	461a      	mov	r2, r3
 800134e:	2300      	movs	r3, #0
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	6053      	str	r3, [r2, #4]
	for(int i = 0; i < 4; i++)
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 800135a:	e04f      	b.n	80013fc <rest+0x14e>
	{
		for(int j = 0; j < 4; j++)
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 8001362:	e036      	b.n	80013d2 <rest+0x124>
		{
			if(temp_tetromino.mat[i][j])
 8001364:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8001368:	009a      	lsls	r2, r3, #2
 800136a:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 800136e:	4413      	add	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001376:	443b      	add	r3, r7
 8001378:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 800137c:	b29b      	uxth	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d019      	beq.n	80013b6 <rest+0x108>
			{
				if(j > y_max_index[i])
 8001382:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001386:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 800138a:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 800138e:	4413      	add	r3, r2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8001398:	4293      	cmp	r3, r2
 800139a:	dd15      	ble.n	80013c8 <rest+0x11a>
				{
					y_max_index[i] = j;
 800139c:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 80013a0:	b2d9      	uxtb	r1, r3
 80013a2:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80013a6:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 80013aa:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 80013ae:	4413      	add	r3, r2
 80013b0:	460a      	mov	r2, r1
 80013b2:	701a      	strb	r2, [r3, #0]
 80013b4:	e008      	b.n	80013c8 <rest+0x11a>
				}
			}
			else
			{
				y_max_index[i] = NO_BLOCK;
 80013b6:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80013ba:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 80013be:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 80013c2:	4413      	add	r3, r2
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++)
 80013c8:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 80013cc:	3301      	adds	r3, #1
 80013ce:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 80013d2:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	ddc4      	ble.n	8001364 <rest+0xb6>
			}
		}
		x_max_index[i] = i;
 80013da:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 80013de:	b2d9      	uxtb	r1, r3
 80013e0:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80013e4:	f5a3 7226 	sub.w	r2, r3, #664	@ 0x298
 80013e8:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 80013ec:	4413      	add	r3, r2
 80013ee:	460a      	mov	r2, r1
 80013f0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i++)
 80013f2:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 80013f6:	3301      	adds	r3, #1
 80013f8:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 80013fc:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8001400:	2b03      	cmp	r3, #3
 8001402:	ddab      	ble.n	800135c <rest+0xae>
	}
	for(int i = 0; i < 4; i++)
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 800140a:	e048      	b.n	800149e <rest+0x1f0>
	{
		if(y_max_index[i] == NO_BLOCK)
 800140c:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001410:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 8001414:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8001418:	4413      	add	r3, r2
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d109      	bne.n	8001434 <rest+0x186>
		{
			y_max[i] = NO_BLOCK;
 8001420:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001424:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001428:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 800142c:	2100      	movs	r1, #0
 800142e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001432:	e02f      	b.n	8001494 <rest+0x1e6>
		}
		else
		{
			y_max[i] = temp_tetromino.y[y_max_index[i]];
 8001434:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001438:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 800143c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8001440:	4413      	add	r3, r2
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	3314      	adds	r3, #20
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 800144c:	443b      	add	r3, r7
 800144e:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8001452:	b299      	uxth	r1, r3
 8001454:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001458:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800145c:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 8001460:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			x_max[i] = temp_tetromino.x[x_max_index[i]];
 8001464:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001468:	f5a3 7226 	sub.w	r2, r3, #664	@ 0x298
 800146c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8001470:	4413      	add	r3, r2
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	3310      	adds	r3, #16
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 800147c:	443b      	add	r3, r7
 800147e:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8001482:	b299      	uxth	r1, r3
 8001484:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001488:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800148c:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 8001490:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 4; i++)
 8001494:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8001498:	3301      	adds	r3, #1
 800149a:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 800149e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	ddb2      	ble.n	800140c <rest+0x15e>
		}
	}

	uint8_t map_y_min_index[10] = {UINT8_MAX};
 80014a6:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80014aa:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80014ae:	22ff      	movs	r2, #255	@ 0xff
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	3304      	adds	r3, #4
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	809a      	strh	r2, [r3, #4]
	uint8_t map_x_min_index[10] = {UINT8_MAX};
 80014ba:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80014be:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 80014c2:	22ff      	movs	r2, #255	@ 0xff
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	3304      	adds	r3, #4
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	809a      	strh	r2, [r3, #4]
	uint16_t map_y_min[10];
	uint16_t map_x_min[10];
	for(int i = 0; i < 10; i++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 80014d4:	e054      	b.n	8001580 <rest+0x2d2>
	{
		for(int j = 0; j < 13; j++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 80014dc:	e03b      	b.n	8001556 <rest+0x2a8>
		{
			if(temp_map.map_mat[j][i])
 80014de:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80014e2:	f5a3 7124 	sub.w	r1, r3, #656	@ 0x290
 80014e6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	f8d7 22e8 	ldr.w	r2, [r7, #744]	@ 0x2e8
 80014f6:	4413      	add	r3, r2
 80014f8:	3380      	adds	r3, #128	@ 0x80
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	440b      	add	r3, r1
 80014fe:	889b      	ldrh	r3, [r3, #4]
 8001500:	b29b      	uxth	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d019      	beq.n	800153a <rest+0x28c>
			{
				if(map_y_min_index[i] > j)
 8001506:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800150a:	f5a3 722d 	sub.w	r2, r3, #692	@ 0x2b4
 800150e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8001512:	4413      	add	r3, r2
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 800151c:	4293      	cmp	r3, r2
 800151e:	da15      	bge.n	800154c <rest+0x29e>
				{
					map_y_min_index[i] = j;
 8001520:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001524:	b2d9      	uxtb	r1, r3
 8001526:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800152a:	f5a3 722d 	sub.w	r2, r3, #692	@ 0x2b4
 800152e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8001532:	4413      	add	r3, r2
 8001534:	460a      	mov	r2, r1
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	e008      	b.n	800154c <rest+0x29e>
				}
			}
			else
			{
				map_y_min_index[i] = NO_INDEX;
 800153a:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800153e:	f5a3 722d 	sub.w	r2, r3, #692	@ 0x2b4
 8001542:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8001546:	4413      	add	r3, r2
 8001548:	22ff      	movs	r2, #255	@ 0xff
 800154a:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 13; j++)
 800154c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001550:	3301      	adds	r3, #1
 8001552:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 8001556:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 800155a:	2b0c      	cmp	r3, #12
 800155c:	ddbf      	ble.n	80014de <rest+0x230>
			}
		}
		map_x_min_index[i] = i;
 800155e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8001562:	b2d9      	uxtb	r1, r3
 8001564:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001568:	f5a3 7230 	sub.w	r2, r3, #704	@ 0x2c0
 800156c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8001570:	4413      	add	r3, r2
 8001572:	460a      	mov	r2, r1
 8001574:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++)
 8001576:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 800157a:	3301      	adds	r3, #1
 800157c:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 8001580:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8001584:	2b09      	cmp	r3, #9
 8001586:	dda6      	ble.n	80014d6 <rest+0x228>
	}
	for(int i = 0; i < 10; i++)
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 800158e:	e039      	b.n	8001604 <rest+0x356>
		{
			map_y_min[i] = LCD_PIXEL_HEIGHT;
		}
		else
		{
			map_y_min[i] = temp_map.y[map_y_min_index[i]];
 8001590:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001594:	f5a3 722d 	sub.w	r2, r3, #692	@ 0x2b4
 8001598:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 800159c:	4413      	add	r3, r2
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80015a6:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 80015aa:	f501 7386 	add.w	r3, r1, #268	@ 0x10c
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	889b      	ldrh	r3, [r3, #4]
 80015b4:	b299      	uxth	r1, r3
 80015b6:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80015ba:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 80015be:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 80015c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			map_x_min[i] = temp_map.x[map_x_min_index[i]];
 80015c6:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80015ca:	f5a3 7230 	sub.w	r2, r3, #704	@ 0x2c0
 80015ce:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 80015d2:	4413      	add	r3, r2
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80015dc:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80015e0:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80015e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80015e8:	b299      	uxth	r1, r3
 80015ea:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80015ee:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80015f2:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 80015f6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 10; i++)
 80015fa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 80015fe:	3301      	adds	r3, #1
 8001600:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8001604:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001608:	2b09      	cmp	r3, #9
 800160a:	ddc1      	ble.n	8001590 <rest+0x2e2>
		}
	}

	uint8_t overlap_map_x_index[4];
	for(int i = 0; i < 4; i++)
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 8001612:	e02f      	b.n	8001674 <rest+0x3c6>
	{
		for(int j = 0; j < 10; j++)
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 800161a:	e022      	b.n	8001662 <rest+0x3b4>
		{
			if(x_max[i] == map_x_min[j])
 800161c:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001620:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8001624:	f8d7 22dc 	ldr.w	r2, [r7, #732]	@ 0x2dc
 8001628:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800162c:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001630:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8001634:	f8d7 12d8 	ldr.w	r1, [r7, #728]	@ 0x2d8
 8001638:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800163c:	429a      	cmp	r2, r3
 800163e:	d10b      	bne.n	8001658 <rest+0x3aa>
			{
				overlap_map_x_index[i] = j;
 8001640:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8001644:	b2d9      	uxtb	r1, r3
 8001646:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800164a:	f5a3 723b 	sub.w	r2, r3, #748	@ 0x2ec
 800164e:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8001652:	4413      	add	r3, r2
 8001654:	460a      	mov	r2, r1
 8001656:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 10; j++)
 8001658:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 800165c:	3301      	adds	r3, #1
 800165e:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 8001662:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8001666:	2b09      	cmp	r3, #9
 8001668:	ddd8      	ble.n	800161c <rest+0x36e>
	for(int i = 0; i < 4; i++)
 800166a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 800166e:	3301      	adds	r3, #1
 8001670:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 8001674:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8001678:	2b03      	cmp	r3, #3
 800167a:	ddcb      	ble.n	8001614 <rest+0x366>
			}
		}
	}

	for(int i = 0; i < 4; i++)
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 8001682:	e02d      	b.n	80016e0 <rest+0x432>
	{
		if(map_y_min[overlap_map_x_index[i]] == y_max[i] + BLOCK_WIDTH || y_max[i] == BOTTOM_ROW)
 8001684:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001688:	f5a3 723b 	sub.w	r2, r3, #748	@ 0x2ec
 800168c:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8001690:	4413      	add	r3, r2
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800169a:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 800169e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80016a2:	4619      	mov	r1, r3
 80016a4:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80016a8:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80016ac:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 80016b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80016b4:	3317      	adds	r3, #23
 80016b6:	4299      	cmp	r1, r3
 80016b8:	d00b      	beq.n	80016d2 <rest+0x424>
 80016ba:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80016be:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80016c2:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 80016c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80016ca:	f240 1225 	movw	r2, #293	@ 0x125
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d101      	bne.n	80016d6 <rest+0x428>
		{
			return 1;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e009      	b.n	80016ea <rest+0x43c>
	for(int i = 0; i < 4; i++)
 80016d6:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 80016da:	3301      	adds	r3, #1
 80016dc:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 80016e0:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	ddcd      	ble.n	8001684 <rest+0x3d6>
		}
	}
	return 0;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	f507 773f 	add.w	r7, r7, #764	@ 0x2fc
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016f4 <map_update>:

map_t map_update(block_t *block, map_t* map)
{
 80016f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f6:	f5ad 7d2d 	sub.w	sp, sp, #692	@ 0x2b4
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001700:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001704:	6018      	str	r0, [r3, #0]
 8001706:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800170a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800170e:	6019      	str	r1, [r3, #0]
 8001710:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001714:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001718:	601a      	str	r2, [r3, #0]
	//append the map array with the new blocks in their respective coordinates
	//create new block
	volatile block_t temp_tetromino = *block;
 800171a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800171e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	461c      	mov	r4, r3
 8001726:	f507 7618 	add.w	r6, r7, #608	@ 0x260
 800172a:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800172e:	4635      	mov	r5, r6
 8001730:	4623      	mov	r3, r4
 8001732:	6818      	ldr	r0, [r3, #0]
 8001734:	6859      	ldr	r1, [r3, #4]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800173c:	3410      	adds	r4, #16
 800173e:	3610      	adds	r6, #16
 8001740:	4564      	cmp	r4, ip
 8001742:	d1f4      	bne.n	800172e <map_update+0x3a>
 8001744:	4633      	mov	r3, r6
 8001746:	4622      	mov	r2, r4
 8001748:	6810      	ldr	r0, [r2, #0]
 800174a:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 800174c:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001750:	f5a3 7222 	sub.w	r2, r3, #648	@ 0x288
 8001754:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001758:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f240 2336 	movw	r3, #566	@ 0x236
 8001766:	461a      	mov	r2, r3
 8001768:	f006 fe34 	bl	80083d4 <memcpy>

	uint8_t y_index[4];
	uint8_t x_index[4];
	uint16_t y_coor[4];
	uint16_t x_coor[4];
	uint8_t ind = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	f887 32af 	strb.w	r3, [r7, #687]	@ 0x2af

	for(int i = 0; i < 4; i++)
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8001778:	e039      	b.n	80017ee <map_update+0xfa>
	{
		for(int j = 0; j < 4; j++)
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8001780:	e02c      	b.n	80017dc <map_update+0xe8>
		{
			if(temp_tetromino.mat[i][j])
 8001782:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8001786:	009a      	lsls	r2, r3, #2
 8001788:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800178c:	4413      	add	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8001794:	443b      	add	r3, r7
 8001796:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800179a:	b29b      	uxth	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d018      	beq.n	80017d2 <map_update+0xde>
			{
				x_index[ind] = i;
 80017a0:	f897 32af 	ldrb.w	r3, [r7, #687]	@ 0x2af
 80017a4:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 80017a8:	b2d1      	uxtb	r1, r2
 80017aa:	f507 722c 	add.w	r2, r7, #688	@ 0x2b0
 80017ae:	f5a2 7224 	sub.w	r2, r2, #656	@ 0x290
 80017b2:	54d1      	strb	r1, [r2, r3]
				y_index[ind] = j;
 80017b4:	f897 32af 	ldrb.w	r3, [r7, #687]	@ 0x2af
 80017b8:	f8d7 22a4 	ldr.w	r2, [r7, #676]	@ 0x2a4
 80017bc:	b2d1      	uxtb	r1, r2
 80017be:	f507 722c 	add.w	r2, r7, #688	@ 0x2b0
 80017c2:	f5a2 7223 	sub.w	r2, r2, #652	@ 0x28c
 80017c6:	54d1      	strb	r1, [r2, r3]
				ind++;
 80017c8:	f897 32af 	ldrb.w	r3, [r7, #687]	@ 0x2af
 80017cc:	3301      	adds	r3, #1
 80017ce:	f887 32af 	strb.w	r3, [r7, #687]	@ 0x2af
		for(int j = 0; j < 4; j++)
 80017d2:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80017d6:	3301      	adds	r3, #1
 80017d8:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 80017dc:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	ddce      	ble.n	8001782 <map_update+0x8e>
	for(int i = 0; i < 4; i++)
 80017e4:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 80017e8:	3301      	adds	r3, #1
 80017ea:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 80017ee:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	ddc1      	ble.n	800177a <map_update+0x86>
			}
		}
	}

	for(int i = 0; i < 4; i++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 80017fc:	e034      	b.n	8001868 <map_update+0x174>
	{
		if(x_index[i]>NO_INDEX && y_index[i]>NO_INDEX)
		{
			x_coor[i] = temp_tetromino.x[x_index[i]];
 80017fe:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001802:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001806:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800180a:	4413      	add	r3, r2
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	3310      	adds	r3, #16
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8001816:	443b      	add	r3, r7
 8001818:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800181c:	b299      	uxth	r1, r3
 800181e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001822:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001826:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 800182a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			y_coor[i] = temp_tetromino.y[y_index[i]];
 800182e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001832:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 8001836:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800183a:	4413      	add	r3, r2
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	3314      	adds	r3, #20
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8001846:	443b      	add	r3, r7
 8001848:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800184c:	b299      	uxth	r1, r3
 800184e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001852:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001856:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 800185a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 4; i++)
 800185e:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001862:	3301      	adds	r3, #1
 8001864:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8001868:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800186c:	2b03      	cmp	r3, #3
 800186e:	ddc6      	ble.n	80017fe <map_update+0x10a>
		}
	}

	//get indices for the map coordinates corresponding to the block coordinates
	//set the map logical matrix, and the color
	uint8_t index = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	f887 329f 	strb.w	r3, [r7, #671]	@ 0x29f
	for(int i = 0; i < 10; i++)
 8001876:	2300      	movs	r3, #0
 8001878:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 800187c:	e066      	b.n	800194c <map_update+0x258>
	{
		for(int j = 0; j < 13; j++)
 800187e:	2300      	movs	r3, #0
 8001880:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8001884:	e059      	b.n	800193a <map_update+0x246>
		{
			if(temp_map.x[i] == x_coor[index] && temp_map.y[j] == y_coor[index])
 8001886:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800188a:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 800188e:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001892:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001896:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800189a:	b29a      	uxth	r2, r3
 800189c:	f897 129f 	ldrb.w	r1, [r7, #671]	@ 0x29f
 80018a0:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018a4:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80018a8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d13f      	bne.n	8001930 <map_update+0x23c>
 80018b0:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018b4:	f5a3 7222 	sub.w	r2, r3, #648	@ 0x288
 80018b8:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 80018bc:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4413      	add	r3, r2
 80018c4:	889b      	ldrh	r3, [r3, #4]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	f897 129f 	ldrb.w	r1, [r7, #671]	@ 0x29f
 80018cc:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018d0:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80018d4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d129      	bne.n	8001930 <map_update+0x23c>
			{
				temp_map.map_mat[j][i] = ON;
 80018dc:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018e0:	f5a3 7122 	sub.w	r1, r3, #648	@ 0x288
 80018e4:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 80018f4:	4413      	add	r3, r2
 80018f6:	3380      	adds	r3, #128	@ 0x80
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	440b      	add	r3, r1
 80018fc:	2201      	movs	r2, #1
 80018fe:	809a      	strh	r2, [r3, #4]
				temp_map.map_color[j][i] = temp_tetromino.color;
 8001900:	f8b7 3262 	ldrh.w	r3, [r7, #610]	@ 0x262
 8001904:	b298      	uxth	r0, r3
 8001906:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800190a:	f5a3 7122 	sub.w	r1, r3, #648	@ 0x288
 800190e:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 800191e:	4413      	add	r3, r2
 8001920:	4602      	mov	r2, r0
 8001922:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				index++;
 8001926:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 800192a:	3301      	adds	r3, #1
 800192c:	f887 329f 	strb.w	r3, [r7, #671]	@ 0x29f
		for(int j = 0; j < 13; j++)
 8001930:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001934:	3301      	adds	r3, #1
 8001936:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 800193a:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 800193e:	2b0c      	cmp	r3, #12
 8001940:	dda1      	ble.n	8001886 <map_update+0x192>
	for(int i = 0; i < 10; i++)
 8001942:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8001946:	3301      	adds	r3, #1
 8001948:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 800194c:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8001950:	2b09      	cmp	r3, #9
 8001952:	dd94      	ble.n	800187e <map_update+0x18a>
//		for(int j = 0; j < 4; j++)
//		{
//
//		}
//	}
	return temp_map;
 8001954:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001958:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001962:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f240 2336 	movw	r3, #566	@ 0x236
 800196e:	461a      	mov	r2, r3
 8001970:	f006 fd30 	bl	80083d4 <memcpy>
}
 8001974:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001978:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 8001982:	46bd      	mov	sp, r7
 8001984:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001988 <block_rotate>:

block_t block_rotate(block_t *block)
{
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198a:	b0a9      	sub	sp, #164	@ 0xa4
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
	block_t temp_block = *block;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	461c      	mov	r4, r3
 8001996:	f107 0640 	add.w	r6, r7, #64	@ 0x40
 800199a:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800199e:	4635      	mov	r5, r6
 80019a0:	4623      	mov	r3, r4
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	6859      	ldr	r1, [r3, #4]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ac:	3410      	adds	r4, #16
 80019ae:	3610      	adds	r6, #16
 80019b0:	4564      	cmp	r4, ip
 80019b2:	d1f4      	bne.n	800199e <block_rotate+0x16>
 80019b4:	4633      	mov	r3, r6
 80019b6:	4622      	mov	r2, r4
 80019b8:	6810      	ldr	r0, [r2, #0]
 80019ba:	6018      	str	r0, [r3, #0]
	if(temp_block.name == O)
 80019bc:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d116      	bne.n	80019f4 <block_rotate+0x6c>
	{
		return temp_block;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80019cc:	469c      	mov	ip, r3
 80019ce:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80019d2:	4665      	mov	r5, ip
 80019d4:	4626      	mov	r6, r4
 80019d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80019d8:	6028      	str	r0, [r5, #0]
 80019da:	6069      	str	r1, [r5, #4]
 80019dc:	60aa      	str	r2, [r5, #8]
 80019de:	60eb      	str	r3, [r5, #12]
 80019e0:	3410      	adds	r4, #16
 80019e2:	f10c 0c10 	add.w	ip, ip, #16
 80019e6:	4574      	cmp	r4, lr
 80019e8:	d1f3      	bne.n	80019d2 <block_rotate+0x4a>
 80019ea:	4663      	mov	r3, ip
 80019ec:	4622      	mov	r2, r4
 80019ee:	6810      	ldr	r0, [r2, #0]
 80019f0:	6018      	str	r0, [r3, #0]
 80019f2:	e15e      	b.n	8001cb2 <block_rotate+0x32a>
	}

	if(temp_block.name == I)
 80019f4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d163      	bne.n	8001ac6 <block_rotate+0x13e>
	{
		uint8_t transpose[4][4];
		for(int i = 0; i < 4; i++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001a04:	e029      	b.n	8001a5a <block_rotate+0xd2>
		{
			for(int j = 0; j < 4; j++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001a0c:	e01c      	b.n	8001a48 <block_rotate+0xc0>
			{
				transpose[i][j] = temp_block.mat[j][i];
 8001a0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a12:	009a      	lsls	r2, r3, #2
 8001a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a18:	4413      	add	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	33a0      	adds	r3, #160	@ 0xa0
 8001a1e:	443b      	add	r3, r7
 8001a20:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	b2d9      	uxtb	r1, r3
 8001a28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	33a0      	adds	r3, #160	@ 0xa0
 8001a30:	19da      	adds	r2, r3, r7
 8001a32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a36:	4413      	add	r3, r2
 8001a38:	3b70      	subs	r3, #112	@ 0x70
 8001a3a:	460a      	mov	r2, r1
 8001a3c:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 4; j++)
 8001a3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a42:	3301      	adds	r3, #1
 8001a44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001a48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	ddde      	ble.n	8001a0e <block_rotate+0x86>
		for(int i = 0; i < 4; i++)
 8001a50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a54:	3301      	adds	r3, #1
 8001a56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001a5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	ddd1      	ble.n	8001a06 <block_rotate+0x7e>
			}
		}
		for(int i = 0; i < 4; i++)
 8001a62:	2300      	movs	r3, #0
 8001a64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a68:	e028      	b.n	8001abc <block_rotate+0x134>
		{
			for(int j = 0; j < 4; j++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001a70:	e01b      	b.n	8001aaa <block_rotate+0x122>
			{
				temp_block.mat[i][j] = transpose[i][j];
 8001a72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	33a0      	adds	r3, #160	@ 0xa0
 8001a7a:	19da      	adds	r2, r3, r7
 8001a7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a80:	4413      	add	r3, r2
 8001a82:	3b70      	subs	r3, #112	@ 0x70
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a8c:	009a      	lsls	r2, r3, #2
 8001a8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a92:	4413      	add	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	33a0      	adds	r3, #160	@ 0xa0
 8001a98:	443b      	add	r3, r7
 8001a9a:	460a      	mov	r2, r1
 8001a9c:	f823 2c5c 	strh.w	r2, [r3, #-92]
			for(int j = 0; j < 4; j++)
 8001aa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001aaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	dddf      	ble.n	8001a72 <block_rotate+0xea>
		for(int i = 0; i < 4; i++)
 8001ab2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001abc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	ddd2      	ble.n	8001a6a <block_rotate+0xe2>
 8001ac4:	e0df      	b.n	8001c86 <block_rotate+0x2fe>
			}
		}
	}


	else if(temp_block.name != O)
 8001ac6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80da 	beq.w	8001c86 <block_rotate+0x2fe>
	{
		uint8_t transpose_3x3[3][3];
		uint8_t transform[3][3];
		uint8_t mirror_identity[3][3] =
 8001ad2:	4a7a      	ldr	r2, [pc, #488]	@ (8001cbc <block_rotate+0x334>)
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ada:	c303      	stmia	r3!, {r0, r1}
 8001adc:	701a      	strb	r2, [r3, #0]
		{{0, 0, 1},
		{0, 1, 0},
		{1, 0, 0}};

		for(int i = 1; i < 4; i++)
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001ae4:	e02d      	b.n	8001b42 <block_rotate+0x1ba>
		{
			for(int j = 1; j < 4; j++)
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001aec:	e020      	b.n	8001b30 <block_rotate+0x1a8>
			{
				transpose_3x3[i-1][j-1] = temp_block.mat[j][i];
 8001aee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001af2:	009a      	lsls	r2, r3, #2
 8001af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001af8:	4413      	add	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	33a0      	adds	r3, #160	@ 0xa0
 8001afe:	443b      	add	r3, r7
 8001b00:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8001b04:	b298      	uxth	r0, r3
 8001b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b0a:	1e5a      	subs	r2, r3, #1
 8001b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b10:	1e59      	subs	r1, r3, #1
 8001b12:	b2c0      	uxtb	r0, r0
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	33a0      	adds	r3, #160	@ 0xa0
 8001b1c:	443b      	add	r3, r7
 8001b1e:	440b      	add	r3, r1
 8001b20:	3b7c      	subs	r3, #124	@ 0x7c
 8001b22:	4602      	mov	r2, r0
 8001b24:	701a      	strb	r2, [r3, #0]
			for(int j = 1; j < 4; j++)
 8001b26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	ddda      	ble.n	8001aee <block_rotate+0x166>
		for(int i = 1; i < 4; i++)
 8001b38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	ddcd      	ble.n	8001ae6 <block_rotate+0x15e>
			}
		}

		for(int k = 0; k < 3; k++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001b50:	e05b      	b.n	8001c0a <block_rotate+0x282>
		{
			for(int i = 0; i < 3; i++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001b58:	e04e      	b.n	8001bf8 <block_rotate+0x270>
			{
				transform[k][i] = 0;
 8001b5a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	33a0      	adds	r3, #160	@ 0xa0
 8001b66:	19da      	adds	r2, r3, r7
 8001b68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3b88      	subs	r3, #136	@ 0x88
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
				for(int j = 0; j < 3; j++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001b78:	e036      	b.n	8001be8 <block_rotate+0x260>
				{
					transform[k][i] += (transpose_3x3[k][j] * mirror_identity[j][i]);
 8001b7a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001b7e:	4613      	mov	r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	33a0      	adds	r3, #160	@ 0xa0
 8001b86:	19da      	adds	r2, r3, r7
 8001b88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3b88      	subs	r3, #136	@ 0x88
 8001b90:	7819      	ldrb	r1, [r3, #0]
 8001b92:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	33a0      	adds	r3, #160	@ 0xa0
 8001b9e:	19da      	adds	r2, r3, r7
 8001ba0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3b7c      	subs	r3, #124	@ 0x7c
 8001ba6:	7818      	ldrb	r0, [r3, #0]
 8001ba8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	33a0      	adds	r3, #160	@ 0xa0
 8001bb2:	19da      	adds	r2, r3, r7
 8001bb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001bb8:	4413      	add	r3, r2
 8001bba:	3b94      	subs	r3, #148	@ 0x94
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	fb10 f303 	smulbb	r3, r0, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	440b      	add	r3, r1
 8001bc6:	b2d9      	uxtb	r1, r3
 8001bc8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	33a0      	adds	r3, #160	@ 0xa0
 8001bd4:	19da      	adds	r2, r3, r7
 8001bd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001bda:	4413      	add	r3, r2
 8001bdc:	3b88      	subs	r3, #136	@ 0x88
 8001bde:	460a      	mov	r2, r1
 8001be0:	701a      	strb	r2, [r3, #0]
				for(int j = 0; j < 3; j++)
 8001be2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001be4:	3301      	adds	r3, #1
 8001be6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001be8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	ddc5      	ble.n	8001b7a <block_rotate+0x1f2>
			for(int i = 0; i < 3; i++)
 8001bee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001bf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	ddac      	ble.n	8001b5a <block_rotate+0x1d2>
		for(int k = 0; k < 3; k++)
 8001c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c04:	3301      	adds	r3, #1
 8001c06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	dd9f      	ble.n	8001b52 <block_rotate+0x1ca>
				}
			}
		}

		for(int i = 0; i < 4; i++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001c16:	e033      	b.n	8001c80 <block_rotate+0x2f8>
		{
			for(int j = 0; j < 4; j++)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c1c:	e02a      	b.n	8001c74 <block_rotate+0x2ec>
			{
				if(i == 0 || j == 0)
 8001c1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <block_rotate+0x2a2>
 8001c24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10a      	bne.n	8001c40 <block_rotate+0x2b8>
				{
					temp_block.mat[i][j] = 0;
 8001c2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c2c:	009a      	lsls	r2, r3, #2
 8001c2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c30:	4413      	add	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	33a0      	adds	r3, #160	@ 0xa0
 8001c36:	443b      	add	r3, r7
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f823 2c5c 	strh.w	r2, [r3, #-92]
 8001c3e:	e016      	b.n	8001c6e <block_rotate+0x2e6>
				}
				else
				{
					temp_block.mat[i][j] = transform[i-1][j-1];
 8001c40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c42:	1e5a      	subs	r2, r3, #1
 8001c44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c46:	1e59      	subs	r1, r3, #1
 8001c48:	4613      	mov	r3, r2
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4413      	add	r3, r2
 8001c4e:	33a0      	adds	r3, #160	@ 0xa0
 8001c50:	443b      	add	r3, r7
 8001c52:	440b      	add	r3, r1
 8001c54:	3b88      	subs	r3, #136	@ 0x88
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c5c:	009a      	lsls	r2, r3, #2
 8001c5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c60:	4413      	add	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	33a0      	adds	r3, #160	@ 0xa0
 8001c66:	443b      	add	r3, r7
 8001c68:	460a      	mov	r2, r1
 8001c6a:	f823 2c5c 	strh.w	r2, [r3, #-92]
			for(int j = 0; j < 4; j++)
 8001c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c70:	3301      	adds	r3, #1
 8001c72:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	ddd1      	ble.n	8001c1e <block_rotate+0x296>
		for(int i = 0; i < 4; i++)
 8001c7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001c80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	ddc8      	ble.n	8001c18 <block_rotate+0x290>
				}
			}
		}
	}
	return temp_block;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001c8c:	469c      	mov	ip, r3
 8001c8e:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001c92:	4665      	mov	r5, ip
 8001c94:	4626      	mov	r6, r4
 8001c96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c98:	6028      	str	r0, [r5, #0]
 8001c9a:	6069      	str	r1, [r5, #4]
 8001c9c:	60aa      	str	r2, [r5, #8]
 8001c9e:	60eb      	str	r3, [r5, #12]
 8001ca0:	3410      	adds	r4, #16
 8001ca2:	f10c 0c10 	add.w	ip, ip, #16
 8001ca6:	4574      	cmp	r4, lr
 8001ca8:	d1f3      	bne.n	8001c92 <block_rotate+0x30a>
 8001caa:	4663      	mov	r3, ip
 8001cac:	4622      	mov	r2, r4
 8001cae:	6810      	ldr	r0, [r2, #0]
 8001cb0:	6018      	str	r0, [r3, #0]
}
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	37a4      	adds	r7, #164	@ 0xa4
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	080084e8 	.word	0x080084e8

08001cc0 <can_move>:

uint8_t can_move(block_t *block, map_t *map, uint8_t dir)
{
 8001cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cc4:	f5ad 7d47 	sub.w	sp, sp, #796	@ 0x31c
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001cce:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8001cd2:	6018      	str	r0, [r3, #0]
 8001cd4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001cd8:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8001cdc:	6019      	str	r1, [r3, #0]
 8001cde:	4611      	mov	r1, r2
 8001ce0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001ce4:	f2a3 22e1 	subw	r2, r3, #737	@ 0x2e1
 8001ce8:	460b      	mov	r3, r1
 8001cea:	7013      	strb	r3, [r2, #0]
 8001cec:	466b      	mov	r3, sp
 8001cee:	633b      	str	r3, [r7, #48]	@ 0x30
	//dir is 1 if R, 0 if L

	//evaluate the L/R touchpad input
	//erase current and draw new

	volatile block_t temp_tetromino = *block;
 8001cf0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001cf4:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	461d      	mov	r5, r3
 8001cfc:	f507 7624 	add.w	r6, r7, #656	@ 0x290
 8001d00:	f105 0c30 	add.w	ip, r5, #48	@ 0x30
 8001d04:	4634      	mov	r4, r6
 8001d06:	462b      	mov	r3, r5
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	6859      	ldr	r1, [r3, #4]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d12:	3510      	adds	r5, #16
 8001d14:	3610      	adds	r6, #16
 8001d16:	4565      	cmp	r5, ip
 8001d18:	d1f4      	bne.n	8001d04 <can_move+0x44>
 8001d1a:	4632      	mov	r2, r6
 8001d1c:	462b      	mov	r3, r5
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	6010      	str	r0, [r2, #0]
	volatile map_t temp_map = *map;
 8001d22:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001d26:	f5a3 7230 	sub.w	r2, r3, #704	@ 0x2c0
 8001d2a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001d2e:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	f240 2336 	movw	r3, #566	@ 0x236
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f006 fb49 	bl	80083d4 <memcpy>

	//evaluate the logical AND between the true blocks in block_t and
	//the next row of map_t (block y_pos + block size)
	uint16_t y_block[4] = {0};
 8001d42:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001d46:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	6053      	str	r3, [r2, #4]
	uint16_t x_block[4] = {0};
 8001d52:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001d56:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	6053      	str	r3, [r2, #4]
	uint8_t ind = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
	for(int j = 0; j < 4; j++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 8001d6e:	e051      	b.n	8001e14 <can_move+0x154>
	{
		for(int i = 0; i < 4; i++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8001d76:	e044      	b.n	8001e02 <can_move+0x142>
		{
			if(temp_tetromino.mat[i][j])
 8001d78:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8001d7c:	009a      	lsls	r2, r3, #2
 8001d7e:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8001d82:	4413      	add	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001d8a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001d8e:	4413      	add	r3, r2
 8001d90:	f833 3c84 	ldrh.w	r3, [r3, #-132]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d02e      	beq.n	8001df8 <can_move+0x138>
			{
				y_block[ind] = temp_tetromino.y[j];
 8001d9a:	f897 0317 	ldrb.w	r0, [r7, #791]	@ 0x317
 8001d9e:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8001da2:	3314      	adds	r3, #20
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001daa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001dae:	4413      	add	r3, r2
 8001db0:	f833 3c84 	ldrh.w	r3, [r3, #-132]
 8001db4:	b299      	uxth	r1, r3
 8001db6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001dba:	f5a3 7232 	sub.w	r2, r3, #712	@ 0x2c8
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
				x_block[ind] = temp_tetromino.x[i];
 8001dc4:	f897 0317 	ldrb.w	r0, [r7, #791]	@ 0x317
 8001dc8:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8001dcc:	3310      	adds	r3, #16
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001dd4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001dd8:	4413      	add	r3, r2
 8001dda:	f833 3c84 	ldrh.w	r3, [r3, #-132]
 8001dde:	b299      	uxth	r1, r3
 8001de0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001de4:	f5a3 7234 	sub.w	r2, r3, #720	@ 0x2d0
 8001de8:	460b      	mov	r3, r1
 8001dea:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
				ind++;
 8001dee:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 8001df2:	3301      	adds	r3, #1
 8001df4:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
		for(int i = 0; i < 4; i++)
 8001df8:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8001e02:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	ddb6      	ble.n	8001d78 <can_move+0xb8>
	for(int j = 0; j < 4; j++)
 8001e0a:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 8001e14:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	dda9      	ble.n	8001d70 <can_move+0xb0>
			}
		}
	}

	uint16_t map_points = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f8a7 330a 	strh.w	r3, [r7, #778]	@ 0x30a
	for(int i = 0; i < 10; i++)
 8001e22:	2300      	movs	r3, #0
 8001e24:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 8001e28:	e02b      	b.n	8001e82 <can_move+0x1c2>
	{
		for(int j = 0; j < 13; j++)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 8001e30:	e01e      	b.n	8001e70 <can_move+0x1b0>
		{
			if(temp_map.map_mat[j][i])
 8001e32:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001e36:	f5a3 7130 	sub.w	r1, r3, #704	@ 0x2c0
 8001e3a:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8001e3e:	461a      	mov	r2, r3
 8001e40:	0092      	lsls	r2, r2, #2
 8001e42:	441a      	add	r2, r3
 8001e44:	0053      	lsls	r3, r2, #1
 8001e46:	461a      	mov	r2, r3
 8001e48:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3380      	adds	r3, #128	@ 0x80
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	440b      	add	r3, r1
 8001e54:	889b      	ldrh	r3, [r3, #4]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d004      	beq.n	8001e66 <can_move+0x1a6>
			{
				map_points++;
 8001e5c:	f8b7 330a 	ldrh.w	r3, [r7, #778]	@ 0x30a
 8001e60:	3301      	adds	r3, #1
 8001e62:	f8a7 330a 	strh.w	r3, [r7, #778]	@ 0x30a
		for(int j = 0; j < 13; j++)
 8001e66:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 8001e70:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8001e74:	2b0c      	cmp	r3, #12
 8001e76:	dddc      	ble.n	8001e32 <can_move+0x172>
	for(int i = 0; i < 10; i++)
 8001e78:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 8001e82:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8001e86:	2b09      	cmp	r3, #9
 8001e88:	ddcf      	ble.n	8001e2a <can_move+0x16a>
			}
		}
	}
	uint8_t map_y_index[map_points];
 8001e8a:	f8b7 130a 	ldrh.w	r1, [r7, #778]	@ 0x30a
 8001e8e:	460b      	mov	r3, r1
 8001e90:	3b01      	subs	r3, #1
 8001e92:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8001e96:	b28b      	uxth	r3, r1
 8001e98:	2200      	movs	r2, #0
 8001e9a:	4698      	mov	r8, r3
 8001e9c:	4691      	mov	r9, r2
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001eae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eb2:	b28b      	uxth	r3, r1
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	469a      	mov	sl, r3
 8001eb8:	4693      	mov	fp, r2
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ec6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001eca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ece:	460b      	mov	r3, r1
 8001ed0:	3307      	adds	r3, #7
 8001ed2:	08db      	lsrs	r3, r3, #3
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	ebad 0d03 	sub.w	sp, sp, r3
 8001eda:	466b      	mov	r3, sp
 8001edc:	3300      	adds	r3, #0
 8001ede:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
	uint8_t map_x_index[map_points];
 8001ee2:	f8b7 130a 	ldrh.w	r1, [r7, #778]	@ 0x30a
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 8001eee:	b28b      	uxth	r3, r1
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ef4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001f02:	4628      	mov	r0, r5
 8001f04:	00c3      	lsls	r3, r0, #3
 8001f06:	4620      	mov	r0, r4
 8001f08:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	00c2      	lsls	r2, r0, #3
 8001f10:	b28b      	uxth	r3, r1
 8001f12:	2200      	movs	r2, #0
 8001f14:	623b      	str	r3, [r7, #32]
 8001f16:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f24:	4628      	mov	r0, r5
 8001f26:	00c3      	lsls	r3, r0, #3
 8001f28:	4620      	mov	r0, r4
 8001f2a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001f2e:	4620      	mov	r0, r4
 8001f30:	00c2      	lsls	r2, r0, #3
 8001f32:	460b      	mov	r3, r1
 8001f34:	3307      	adds	r3, #7
 8001f36:	08db      	lsrs	r3, r3, #3
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	ebad 0d03 	sub.w	sp, sp, r3
 8001f3e:	466b      	mov	r3, sp
 8001f40:	3300      	adds	r3, #0
 8001f42:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
	uint16_t map_y[map_points];
 8001f46:	f8b7 130a 	ldrh.w	r1, [r7, #778]	@ 0x30a
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8001f52:	b28b      	uxth	r3, r1
 8001f54:	2200      	movs	r2, #0
 8001f56:	61bb      	str	r3, [r7, #24]
 8001f58:	61fa      	str	r2, [r7, #28]
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001f66:	4628      	mov	r0, r5
 8001f68:	0103      	lsls	r3, r0, #4
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001f70:	4620      	mov	r0, r4
 8001f72:	0102      	lsls	r2, r0, #4
 8001f74:	b28b      	uxth	r3, r1
 8001f76:	2200      	movs	r2, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	617a      	str	r2, [r7, #20]
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001f88:	4628      	mov	r0, r5
 8001f8a:	0103      	lsls	r3, r0, #4
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001f92:	4620      	mov	r0, r4
 8001f94:	0102      	lsls	r2, r0, #4
 8001f96:	460b      	mov	r3, r1
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	3307      	adds	r3, #7
 8001f9c:	08db      	lsrs	r3, r3, #3
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	ebad 0d03 	sub.w	sp, sp, r3
 8001fa4:	466b      	mov	r3, sp
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	085b      	lsrs	r3, r3, #1
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
	uint16_t map_x[map_points];
 8001fb0:	f8b7 130a 	ldrh.w	r1, [r7, #778]	@ 0x30a
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 8001fbc:	b28b      	uxth	r3, r1
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	60fa      	str	r2, [r7, #12]
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fd0:	4628      	mov	r0, r5
 8001fd2:	0103      	lsls	r3, r0, #4
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001fda:	4620      	mov	r0, r4
 8001fdc:	0102      	lsls	r2, r0, #4
 8001fde:	b28b      	uxth	r3, r1
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ff2:	4628      	mov	r0, r5
 8001ff4:	0103      	lsls	r3, r0, #4
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	0102      	lsls	r2, r0, #4
 8002000:	460b      	mov	r3, r1
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	3307      	adds	r3, #7
 8002006:	08db      	lsrs	r3, r3, #3
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	ebad 0d03 	sub.w	sp, sp, r3
 800200e:	466b      	mov	r3, sp
 8002010:	3301      	adds	r3, #1
 8002012:	085b      	lsrs	r3, r3, #1
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
	uint8_t index = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	f887 32ff 	strb.w	r3, [r7, #767]	@ 0x2ff
	for(int i = 0; i < 10; i++)
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 8002026:	e03a      	b.n	800209e <can_move+0x3de>
	{
		for(int j = 0; j < 13; j++)
 8002028:	2300      	movs	r3, #0
 800202a:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 800202e:	e02d      	b.n	800208c <can_move+0x3cc>
		{
			if(temp_map.map_mat[j][i])
 8002030:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002034:	f5a3 7130 	sub.w	r1, r3, #704	@ 0x2c0
 8002038:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 8002048:	4413      	add	r3, r2
 800204a:	3380      	adds	r3, #128	@ 0x80
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	440b      	add	r3, r1
 8002050:	889b      	ldrh	r3, [r3, #4]
 8002052:	b29b      	uxth	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d014      	beq.n	8002082 <can_move+0x3c2>
			{
				map_x_index[index] = i;
 8002058:	f897 32ff 	ldrb.w	r3, [r7, #767]	@ 0x2ff
 800205c:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 8002060:	b2d1      	uxtb	r1, r2
 8002062:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 8002066:	54d1      	strb	r1, [r2, r3]
				map_y_index[index] = j;
 8002068:	f897 32ff 	ldrb.w	r3, [r7, #767]	@ 0x2ff
 800206c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 8002070:	b2d1      	uxtb	r1, r2
 8002072:	f8d7 22dc 	ldr.w	r2, [r7, #732]	@ 0x2dc
 8002076:	54d1      	strb	r1, [r2, r3]
				index++;
 8002078:	f897 32ff 	ldrb.w	r3, [r7, #767]	@ 0x2ff
 800207c:	3301      	adds	r3, #1
 800207e:	f887 32ff 	strb.w	r3, [r7, #767]	@ 0x2ff
		for(int j = 0; j < 13; j++)
 8002082:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8002086:	3301      	adds	r3, #1
 8002088:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 800208c:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8002090:	2b0c      	cmp	r3, #12
 8002092:	ddcd      	ble.n	8002030 <can_move+0x370>
	for(int i = 0; i < 10; i++)
 8002094:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8002098:	3301      	adds	r3, #1
 800209a:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 800209e:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 80020a2:	2b09      	cmp	r3, #9
 80020a4:	ddc0      	ble.n	8002028 <can_move+0x368>
			}
		}
	}
	for(int i = 0; i < map_points; i++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 80020ac:	e031      	b.n	8002112 <can_move+0x452>
	{
		map_y[i] = temp_map.y[map_y_index[i]];
 80020ae:	f8d7 22dc 	ldr.w	r2, [r7, #732]	@ 0x2dc
 80020b2:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 80020b6:	4413      	add	r3, r2
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	4619      	mov	r1, r3
 80020bc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80020c0:	f5a3 7230 	sub.w	r2, r3, #704	@ 0x2c0
 80020c4:	f501 7386 	add.w	r3, r1, #268	@ 0x10c
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	889b      	ldrh	r3, [r3, #4]
 80020ce:	b299      	uxth	r1, r3
 80020d0:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 80020d4:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 80020d8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		map_x[i] = temp_map.x[map_x_index[i]];
 80020dc:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 80020e0:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 80020e4:	4413      	add	r3, r2
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80020ee:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 80020f2:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80020f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80020fa:	b299      	uxth	r1, r3
 80020fc:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 8002100:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 8002104:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < map_points; i++)
 8002108:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 800210c:	3301      	adds	r3, #1
 800210e:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 8002112:	f8b7 330a 	ldrh.w	r3, [r7, #778]	@ 0x30a
 8002116:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 800211a:	429a      	cmp	r2, r3
 800211c:	dbc7      	blt.n	80020ae <can_move+0x3ee>
	}

	uint8_t overlap_map_y_index[4];
	for(int i = 0; i < 4; i++)
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8002124:	e02d      	b.n	8002182 <can_move+0x4c2>
	{
		for(int j = 0; j < 13; j++)
 8002126:	2300      	movs	r3, #0
 8002128:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 800212c:	e020      	b.n	8002170 <can_move+0x4b0>
		{
			if(y_block[i] == map_y[j])
 800212e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002132:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8002136:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 800213a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800213e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8002142:	f8d7 12e8 	ldr.w	r1, [r7, #744]	@ 0x2e8
 8002146:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800214a:	429a      	cmp	r2, r3
 800214c:	d10b      	bne.n	8002166 <can_move+0x4a6>
			{
				overlap_map_y_index[i] = j;
 800214e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8002152:	b2d9      	uxtb	r1, r3
 8002154:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002158:	f5a3 7235 	sub.w	r2, r3, #724	@ 0x2d4
 800215c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8002160:	4413      	add	r3, r2
 8002162:	460a      	mov	r2, r1
 8002164:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 13; j++)
 8002166:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 800216a:	3301      	adds	r3, #1
 800216c:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 8002170:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8002174:	2b0c      	cmp	r3, #12
 8002176:	ddda      	ble.n	800212e <can_move+0x46e>
	for(int i = 0; i < 4; i++)
 8002178:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 800217c:	3301      	adds	r3, #1
 800217e:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8002182:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8002186:	2b03      	cmp	r3, #3
 8002188:	ddcd      	ble.n	8002126 <can_move+0x466>
			}
		}
	}

	for(int i = 0; i < 4; i++)
 800218a:	2300      	movs	r3, #0
 800218c:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 8002190:	e05c      	b.n	800224c <can_move+0x58c>
	{
		if(dir)
 8002192:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002196:	f2a3 23e1 	subw	r3, r3, #737	@ 0x2e1
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d024      	beq.n	80021ea <can_move+0x52a>
		{
			if(map_x[overlap_map_y_index[i]] == x_block[i] + BLOCK_WIDTH || x_block[i] == RIGHT_EDGE)
 80021a0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80021a4:	f5a3 7235 	sub.w	r2, r3, #724	@ 0x2d4
 80021a8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80021ac:	4413      	add	r3, r2
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 80021b6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021ba:	4619      	mov	r1, r3
 80021bc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80021c0:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 80021c4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 80021c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021cc:	3317      	adds	r3, #23
 80021ce:	4299      	cmp	r1, r3
 80021d0:	d009      	beq.n	80021e6 <can_move+0x526>
 80021d2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80021d6:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 80021da:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 80021de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021e2:	2bd5      	cmp	r3, #213	@ 0xd5
 80021e4:	d12d      	bne.n	8002242 <can_move+0x582>
			{
				return 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	e035      	b.n	8002256 <can_move+0x596>
			}
		}
		else if(!dir)
 80021ea:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80021ee:	f2a3 23e1 	subw	r3, r3, #737	@ 0x2e1
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d124      	bne.n	8002242 <can_move+0x582>
		{
			if(map_x[overlap_map_y_index[i]] == x_block[i] - BLOCK_WIDTH || x_block[i] == LEFT_EDGE)
 80021f8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80021fc:	f5a3 7235 	sub.w	r2, r3, #724	@ 0x2d4
 8002200:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8002204:	4413      	add	r3, r2
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 800220e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002212:	4619      	mov	r1, r3
 8002214:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002218:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 800221c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 8002220:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002224:	3b17      	subs	r3, #23
 8002226:	4299      	cmp	r1, r3
 8002228:	d009      	beq.n	800223e <can_move+0x57e>
 800222a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800222e:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8002232:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 8002236:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800223a:	2b06      	cmp	r3, #6
 800223c:	d101      	bne.n	8002242 <can_move+0x582>
			{
				return 0;
 800223e:	2300      	movs	r3, #0
 8002240:	e009      	b.n	8002256 <can_move+0x596>
	for(int i = 0; i < 4; i++)
 8002242:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8002246:	3301      	adds	r3, #1
 8002248:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 800224c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8002250:	2b03      	cmp	r3, #3
 8002252:	dd9e      	ble.n	8002192 <can_move+0x4d2>
			}
		}
	}
	return 1;
 8002254:	2301      	movs	r3, #1
 8002256:	f8d7 d030 	ldr.w	sp, [r7, #48]	@ 0x30
}
 800225a:	4618      	mov	r0, r3
 800225c:	f507 7747 	add.w	r7, r7, #796	@ 0x31c
 8002260:	46bd      	mov	sp, r7
 8002262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002266 <block_move>:

block_t block_move(block_t *block, map_t *map, uint8_t dir)
{
 8002266:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002268:	b095      	sub	sp, #84	@ 0x54
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	70fb      	strb	r3, [r7, #3]
	//when timer reaches ARR and enters IRQ handler, call this function
	//erase current and draw new tetromino
	volatile block_t temp_tetromino = *block;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	461c      	mov	r4, r3
 8002278:	f107 0614 	add.w	r6, r7, #20
 800227c:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002280:	4635      	mov	r5, r6
 8002282:	4623      	mov	r3, r4
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800228e:	3410      	adds	r4, #16
 8002290:	3610      	adds	r6, #16
 8002292:	4564      	cmp	r4, ip
 8002294:	d1f4      	bne.n	8002280 <block_move+0x1a>
 8002296:	4633      	mov	r3, r6
 8002298:	4622      	mov	r2, r4
 800229a:	6810      	ldr	r0, [r2, #0]
 800229c:	6018      	str	r0, [r3, #0]
	if(dir)
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d01a      	beq.n	80022da <block_move+0x74>
	{
		for(int i = 0; i < 4; i++)
 80022a4:	2300      	movs	r3, #0
 80022a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022a8:	e013      	b.n	80022d2 <block_move+0x6c>
		{
			temp_tetromino.x[i] += BLOCK_WIDTH;
 80022aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022ac:	3310      	adds	r3, #16
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	3350      	adds	r3, #80	@ 0x50
 80022b2:	443b      	add	r3, r7
 80022b4:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	3317      	adds	r3, #23
 80022bc:	b29a      	uxth	r2, r3
 80022be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022c0:	3310      	adds	r3, #16
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	3350      	adds	r3, #80	@ 0x50
 80022c6:	443b      	add	r3, r7
 80022c8:	f823 2c38 	strh.w	r2, [r3, #-56]
		for(int i = 0; i < 4; i++)
 80022cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022ce:	3301      	adds	r3, #1
 80022d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	dde8      	ble.n	80022aa <block_move+0x44>
 80022d8:	e019      	b.n	800230e <block_move+0xa8>
		}
	}
	else
	{
		for(int i = 0; i < 4; i++)
 80022da:	2300      	movs	r3, #0
 80022dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022de:	e013      	b.n	8002308 <block_move+0xa2>
		{
			temp_tetromino.x[i] -= BLOCK_WIDTH;
 80022e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022e2:	3310      	adds	r3, #16
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	3350      	adds	r3, #80	@ 0x50
 80022e8:	443b      	add	r3, r7
 80022ea:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b17      	subs	r3, #23
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022f6:	3310      	adds	r3, #16
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	3350      	adds	r3, #80	@ 0x50
 80022fc:	443b      	add	r3, r7
 80022fe:	f823 2c38 	strh.w	r2, [r3, #-56]
		for(int i = 0; i < 4; i++)
 8002302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002304:	3301      	adds	r3, #1
 8002306:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002308:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800230a:	2b03      	cmp	r3, #3
 800230c:	dde8      	ble.n	80022e0 <block_move+0x7a>
		}
	}
	return temp_tetromino;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f107 0414 	add.w	r4, r7, #20
 8002314:	469c      	mov	ip, r3
 8002316:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 800231a:	4665      	mov	r5, ip
 800231c:	4626      	mov	r6, r4
 800231e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002320:	6028      	str	r0, [r5, #0]
 8002322:	6069      	str	r1, [r5, #4]
 8002324:	60aa      	str	r2, [r5, #8]
 8002326:	60eb      	str	r3, [r5, #12]
 8002328:	3410      	adds	r4, #16
 800232a:	f10c 0c10 	add.w	ip, ip, #16
 800232e:	4574      	cmp	r4, lr
 8002330:	d1f3      	bne.n	800231a <block_move+0xb4>
 8002332:	4663      	mov	r3, ip
 8002334:	4622      	mov	r2, r4
 8002336:	6810      	ldr	r0, [r2, #0]
 8002338:	6018      	str	r0, [r3, #0]
}
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	3754      	adds	r7, #84	@ 0x54
 800233e:	46bd      	mov	sp, r7
 8002340:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002342 <draw_block>:

void draw_block(uint16_t x, uint16_t y, uint16_t color)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	4603      	mov	r3, r0
 800234a:	80fb      	strh	r3, [r7, #6]
 800234c:	460b      	mov	r3, r1
 800234e:	80bb      	strh	r3, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	807b      	strh	r3, [r7, #2]
	for(int i = 0; i < BLOCK_WIDTH-1; i++)
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	e00c      	b.n	8002374 <draw_block+0x32>
	{
		LCD_Draw_Horizontal_Line(x, y+i, BLOCK_WIDTH-1, color);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	b29a      	uxth	r2, r3
 800235e:	88bb      	ldrh	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	b299      	uxth	r1, r3
 8002364:	887b      	ldrh	r3, [r7, #2]
 8002366:	88f8      	ldrh	r0, [r7, #6]
 8002368:	2216      	movs	r2, #22
 800236a:	f000 fba6 	bl	8002aba <LCD_Draw_Horizontal_Line>
	for(int i = 0; i < BLOCK_WIDTH-1; i++)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	3301      	adds	r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b15      	cmp	r3, #21
 8002378:	ddef      	ble.n	800235a <draw_block+0x18>
	}
}
 800237a:	bf00      	nop
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <draw_shapes>:

void draw_shapes()
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af00      	add	r7, sp, #0
	uint16_t x_offset = (LCD_PIXEL_WIDTH - (7 * (BLOCK_WIDTH * 4 + 15))) / 2;
 800238a:	f64f 7302 	movw	r3, #65282	@ 0xff02
 800238e:	80fb      	strh	r3, [r7, #6]

	// I tetromino (cyan)
	for (int i = 0; i < 4; i++)
 8002390:	2300      	movs	r3, #0
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	e012      	b.n	80023bc <draw_shapes+0x38>
	{
	   	draw_block(6, 224 + i*BLOCK_WIDTH, LCD_COLOR_CYAN);
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	b29b      	uxth	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	0052      	lsls	r2, r2, #1
 800239e:	441a      	add	r2, r3
 80023a0:	00d2      	lsls	r2, r2, #3
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	33e0      	adds	r3, #224	@ 0xe0
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80023ae:	4619      	mov	r1, r3
 80023b0:	2006      	movs	r0, #6
 80023b2:	f7ff ffc6 	bl	8002342 <draw_block>
	for (int i = 0; i < 4; i++)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3301      	adds	r3, #1
 80023ba:	61fb      	str	r3, [r7, #28]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	dde9      	ble.n	8002396 <draw_shapes+0x12>
	}

	// L tetromino (green)
	x_offset += BLOCK_WIDTH * 4 + 15;
 80023c2:	88fb      	ldrh	r3, [r7, #6]
 80023c4:	336b      	adds	r3, #107	@ 0x6b
 80023c6:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	61bb      	str	r3, [r7, #24]
 80023cc:	e012      	b.n	80023f4 <draw_shapes+0x70>
	{
	   	draw_block(i*BLOCK_WIDTH + 144, 224 + BLOCK_WIDTH, LCD_COLOR_GREEN);
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	461a      	mov	r2, r3
 80023d4:	0052      	lsls	r2, r2, #1
 80023d6:	441a      	add	r2, r3
 80023d8:	00d2      	lsls	r2, r2, #3
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3390      	adds	r3, #144	@ 0x90
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80023e6:	21f7      	movs	r1, #247	@ 0xf7
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ffaa 	bl	8002342 <draw_block>
	for (int i = 0; i < 3; i++)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	3301      	adds	r3, #1
 80023f2:	61bb      	str	r3, [r7, #24]
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	dde9      	ble.n	80023ce <draw_shapes+0x4a>
	}
	draw_block(190, 224, LCD_COLOR_GREEN);
 80023fa:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80023fe:	21e0      	movs	r1, #224	@ 0xe0
 8002400:	20be      	movs	r0, #190	@ 0xbe
 8002402:	f7ff ff9e 	bl	8002342 <draw_block>

	// J tetromino (yellow)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8002406:	88fb      	ldrh	r3, [r7, #6]
 8002408:	336b      	adds	r3, #107	@ 0x6b
 800240a:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++)
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	e013      	b.n	800243a <draw_shapes+0xb6>
	{
	   	draw_block(75 + (i-2)*BLOCK_WIDTH, 224 + BLOCK_WIDTH, LCD_COLOR_YELLOW);
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	3b02      	subs	r3, #2
 8002416:	b29b      	uxth	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	0052      	lsls	r2, r2, #1
 800241c:	441a      	add	r2, r3
 800241e:	00d2      	lsls	r2, r2, #3
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	b29b      	uxth	r3, r3
 8002424:	334b      	adds	r3, #75	@ 0x4b
 8002426:	b29b      	uxth	r3, r3
 8002428:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800242c:	21f7      	movs	r1, #247	@ 0xf7
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff87 	bl	8002342 <draw_block>
	for (int i = 0; i < 3; i++)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	3301      	adds	r3, #1
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b02      	cmp	r3, #2
 800243e:	dde8      	ble.n	8002412 <draw_shapes+0x8e>
	}
	draw_block(52 + BLOCK_WIDTH, 224 + 2*BLOCK_WIDTH, LCD_COLOR_YELLOW);
 8002440:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002444:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002448:	204b      	movs	r0, #75	@ 0x4b
 800244a:	f7ff ff7a 	bl	8002342 <draw_block>

	// O tetromino (orange)
	x_offset += BLOCK_WIDTH * 4 + 15;
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	336b      	adds	r3, #107	@ 0x6b
 8002452:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 2; i++) {
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	e025      	b.n	80024a6 <draw_shapes+0x122>
	    for (int j = 0; j < 2; j++) {
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	e01c      	b.n	800249a <draw_shapes+0x116>
	       	draw_block(67 + i*BLOCK_WIDTH - 38, 270 + j*BLOCK_WIDTH, LCD_COLOR_ORANGE);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	b29b      	uxth	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	0052      	lsls	r2, r2, #1
 8002468:	441a      	add	r2, r3
 800246a:	00d2      	lsls	r2, r2, #3
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	b29b      	uxth	r3, r3
 8002470:	331d      	adds	r3, #29
 8002472:	b298      	uxth	r0, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	b29b      	uxth	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	0052      	lsls	r2, r2, #1
 800247c:	441a      	add	r2, r3
 800247e:	00d2      	lsls	r2, r2, #3
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	b29b      	uxth	r3, r3
 8002484:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 8002488:	b29b      	uxth	r3, r3
 800248a:	f64f 32c1 	movw	r2, #64449	@ 0xfbc1
 800248e:	4619      	mov	r1, r3
 8002490:	f7ff ff57 	bl	8002342 <draw_block>
	    for (int j = 0; j < 2; j++) {
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3301      	adds	r3, #1
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b01      	cmp	r3, #1
 800249e:	dddf      	ble.n	8002460 <draw_shapes+0xdc>
	for (int i = 0; i < 2; i++) {
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	3301      	adds	r3, #1
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	ddd6      	ble.n	800245a <draw_shapes+0xd6>
	    }
	}

	// S tetromino (magenta)
	x_offset += BLOCK_WIDTH * 4 + 15;
 80024ac:	88fb      	ldrh	r3, [r7, #6]
 80024ae:	336b      	adds	r3, #107	@ 0x6b
 80024b0:	80fb      	strh	r3, [r7, #6]
	draw_block(144, 270 + BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 80024b2:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80024b6:	f240 1125 	movw	r1, #293	@ 0x125
 80024ba:	2090      	movs	r0, #144	@ 0x90
 80024bc:	f7ff ff41 	bl	8002342 <draw_block>
	draw_block(144 + BLOCK_WIDTH, 270 + BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 80024c0:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80024c4:	f240 1125 	movw	r1, #293	@ 0x125
 80024c8:	20a7      	movs	r0, #167	@ 0xa7
 80024ca:	f7ff ff3a 	bl	8002342 <draw_block>
	draw_block(144 + BLOCK_WIDTH, 270, LCD_COLOR_MAGENTA);
 80024ce:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80024d2:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80024d6:	20a7      	movs	r0, #167	@ 0xa7
 80024d8:	f7ff ff33 	bl	8002342 <draw_block>
	draw_block(144 + BLOCK_WIDTH * 2, 270, LCD_COLOR_MAGENTA);
 80024dc:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80024e0:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80024e4:	20be      	movs	r0, #190	@ 0xbe
 80024e6:	f7ff ff2c 	bl	8002342 <draw_block>

	// T tetromino (blue2)
	x_offset += BLOCK_WIDTH * 4 + 15;
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	336b      	adds	r3, #107	@ 0x6b
 80024ee:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++) {
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	e014      	b.n	8002520 <draw_shapes+0x19c>
	   	draw_block(LEFT_EDGE + (i+3) * BLOCK_WIDTH, 293, LCD_COLOR_BLUE2);
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	3303      	adds	r3, #3
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	0052      	lsls	r2, r2, #1
 8002500:	441a      	add	r2, r3
 8002502:	00d2      	lsls	r2, r2, #3
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	b29b      	uxth	r3, r3
 8002508:	3306      	adds	r3, #6
 800250a:	b29b      	uxth	r3, r3
 800250c:	f240 521f 	movw	r2, #1311	@ 0x51f
 8002510:	f240 1125 	movw	r1, #293	@ 0x125
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff14 	bl	8002342 <draw_block>
	for (int i = 0; i < 3; i++) {
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3301      	adds	r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b02      	cmp	r3, #2
 8002524:	dde7      	ble.n	80024f6 <draw_shapes+0x172>
	}
	draw_block(LEFT_EDGE + 4*BLOCK_WIDTH, 293 - BLOCK_WIDTH, LCD_COLOR_BLUE2);
 8002526:	f240 521f 	movw	r2, #1311	@ 0x51f
 800252a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800252e:	2062      	movs	r0, #98	@ 0x62
 8002530:	f7ff ff07 	bl	8002342 <draw_block>

	// Z tetromino (strawberry)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	336b      	adds	r3, #107	@ 0x6b
 8002538:	80fb      	strh	r3, [r7, #6]
	draw_block(LEFT_EDGE + 4*BLOCK_WIDTH, 247, LCD_COLOR_STRAWBERRY);
 800253a:	f64f 1287 	movw	r2, #63879	@ 0xf987
 800253e:	21f7      	movs	r1, #247	@ 0xf7
 8002540:	2062      	movs	r0, #98	@ 0x62
 8002542:	f7ff fefe 	bl	8002342 <draw_block>
	draw_block(LEFT_EDGE + 5*BLOCK_WIDTH, 247, LCD_COLOR_STRAWBERRY);
 8002546:	f64f 1287 	movw	r2, #63879	@ 0xf987
 800254a:	21f7      	movs	r1, #247	@ 0xf7
 800254c:	2079      	movs	r0, #121	@ 0x79
 800254e:	f7ff fef8 	bl	8002342 <draw_block>
	draw_block(LEFT_EDGE + 5*BLOCK_WIDTH, 247 + BLOCK_WIDTH, LCD_COLOR_STRAWBERRY);
 8002552:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8002556:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800255a:	2079      	movs	r0, #121	@ 0x79
 800255c:	f7ff fef1 	bl	8002342 <draw_block>
	draw_block(LEFT_EDGE + 6*BLOCK_WIDTH, 247 + BLOCK_WIDTH, LCD_COLOR_STRAWBERRY);
 8002560:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8002564:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002568:	2090      	movs	r0, #144	@ 0x90
 800256a:	f7ff feea 	bl	8002342 <draw_block>

	// "O" shape (magenta)
	draw_block(x_offset - 50 + BLOCK_WIDTH, 246 - 9*BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	3b1b      	subs	r3, #27
 8002572:	b29b      	uxth	r3, r3
 8002574:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002578:	2127      	movs	r1, #39	@ 0x27
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fee1 	bl	8002342 <draw_block>
	draw_block(x_offset - 50 , 246 - 9*BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	3b32      	subs	r3, #50	@ 0x32
 8002584:	b29b      	uxth	r3, r3
 8002586:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800258a:	2127      	movs	r1, #39	@ 0x27
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fed8 	bl	8002342 <draw_block>
	draw_block(x_offset - 50 , 246 - 8*BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	3b32      	subs	r3, #50	@ 0x32
 8002596:	b29b      	uxth	r3, r3
 8002598:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800259c:	213e      	movs	r1, #62	@ 0x3e
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fecf 	bl	8002342 <draw_block>
	draw_block(x_offset - 50 + BLOCK_WIDTH, 246 - 8*BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	3b1b      	subs	r3, #27
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80025ae:	213e      	movs	r1, #62	@ 0x3e
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fec6 	bl	8002342 <draw_block>
}
 80025b6:	bf00      	nop
 80025b8:	3720      	adds	r7, #32
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <draw_tetromino>:

void draw_tetromino(block_t block)
{
 80025be:	b084      	sub	sp, #16
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	f107 0c10 	add.w	ip, r7, #16
 80025ca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i < 4; i++)
 80025ce:	2300      	movs	r3, #0
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	e029      	b.n	8002628 <draw_tetromino+0x6a>
	{
		for(int j = 0; j < 4; j++)
 80025d4:	2300      	movs	r3, #0
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	e020      	b.n	800261c <draw_tetromino+0x5e>
		{
			if(block.mat[i][j])
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	009a      	lsls	r2, r3, #2
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	4413      	add	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	3310      	adds	r3, #16
 80025e6:	443b      	add	r3, r7
 80025e8:	889b      	ldrh	r3, [r3, #4]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d012      	beq.n	8002616 <draw_tetromino+0x58>
			{
				draw_block(block.x[i], block.y[j], block.color);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3310      	adds	r3, #16
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	3310      	adds	r3, #16
 80025f8:	443b      	add	r3, r7
 80025fa:	889b      	ldrh	r3, [r3, #4]
 80025fc:	b298      	uxth	r0, r3
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	3314      	adds	r3, #20
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	3310      	adds	r3, #16
 8002606:	443b      	add	r3, r7
 8002608:	889b      	ldrh	r3, [r3, #4]
 800260a:	b29b      	uxth	r3, r3
 800260c:	8a7a      	ldrh	r2, [r7, #18]
 800260e:	b292      	uxth	r2, r2
 8002610:	4619      	mov	r1, r3
 8002612:	f7ff fe96 	bl	8002342 <draw_block>
		for(int j = 0; j < 4; j++)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	3301      	adds	r3, #1
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b03      	cmp	r3, #3
 8002620:	dddb      	ble.n	80025da <draw_tetromino+0x1c>
	for(int i = 0; i < 4; i++)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3301      	adds	r3, #1
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b03      	cmp	r3, #3
 800262c:	ddd2      	ble.n	80025d4 <draw_tetromino+0x16>
			}
		}
	}
}
 800262e:	bf00      	nop
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800263a:	b004      	add	sp, #16
 800263c:	4770      	bx	lr

0800263e <clear_tetromino>:

void clear_tetromino(block_t block)
{
 800263e:	b084      	sub	sp, #16
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	f107 0c10 	add.w	ip, r7, #16
 800264a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i < 4; i++)
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	e028      	b.n	80026a6 <clear_tetromino+0x68>
	{
		for(int j = 0; j < 4; j++)
 8002654:	2300      	movs	r3, #0
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	e01f      	b.n	800269a <clear_tetromino+0x5c>
		{
			if(block.mat[i][j])
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	009a      	lsls	r2, r3, #2
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	4413      	add	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	3310      	adds	r3, #16
 8002666:	443b      	add	r3, r7
 8002668:	889b      	ldrh	r3, [r3, #4]
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d011      	beq.n	8002694 <clear_tetromino+0x56>
			{
				draw_block(block.x[i], block.y[j], LCD_COLOR_BLACK);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3310      	adds	r3, #16
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	3310      	adds	r3, #16
 8002678:	443b      	add	r3, r7
 800267a:	889b      	ldrh	r3, [r3, #4]
 800267c:	b298      	uxth	r0, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	3314      	adds	r3, #20
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	3310      	adds	r3, #16
 8002686:	443b      	add	r3, r7
 8002688:	889b      	ldrh	r3, [r3, #4]
 800268a:	b29b      	uxth	r3, r3
 800268c:	2200      	movs	r2, #0
 800268e:	4619      	mov	r1, r3
 8002690:	f7ff fe57 	bl	8002342 <draw_block>
		for(int j = 0; j < 4; j++)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b03      	cmp	r3, #3
 800269e:	dddc      	ble.n	800265a <clear_tetromino+0x1c>
	for(int i = 0; i < 4; i++)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3301      	adds	r3, #1
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	ddd3      	ble.n	8002654 <clear_tetromino+0x16>
			}
		}
	}
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026b8:	b004      	add	sp, #16
 80026ba:	4770      	bx	lr

080026bc <is_game_over>:

uint8_t is_game_over(map_t map)
{
 80026bc:	b084      	sub	sp, #16
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	f107 0c10 	add.w	ip, r7, #16
 80026c8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i< 10; i++)
 80026cc:	2300      	movs	r3, #0
 80026ce:	607b      	str	r3, [r7, #4]
 80026d0:	e00c      	b.n	80026ec <is_game_over+0x30>
	{
		if(map.map_mat[0][i])
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3380      	adds	r3, #128	@ 0x80
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	3310      	adds	r3, #16
 80026da:	443b      	add	r3, r7
 80026dc:	889b      	ldrh	r3, [r3, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <is_game_over+0x2a>
		{
			return 1;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e006      	b.n	80026f4 <is_game_over+0x38>
	for(int i = 0; i< 10; i++)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3301      	adds	r3, #1
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b09      	cmp	r3, #9
 80026f0:	ddef      	ble.n	80026d2 <is_game_over+0x16>
		}
	}
	return 0;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	b004      	add	sp, #16
 8002700:	4770      	bx	lr
	...

08002704 <ButtonInit>:
 *      Author: 17202
 */
#include "Button_Driver.h"

void ButtonInit()
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef config = {0};
 800270a:	1d3b      	adds	r3, r7, #4
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]

	config.Pin = GPIO_PIN_0;
 8002718:	2301      	movs	r3, #1
 800271a:	607b      	str	r3, [r7, #4]
	config.Mode = GPIO_MODE_IT_RISING;
 800271c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002720:	60bb      	str	r3, [r7, #8]
	config.Speed = GPIO_SPEED_FREQ_HIGH;
 8002722:	2302      	movs	r3, #2
 8002724:	613b      	str	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	4b0c      	ldr	r3, [pc, #48]	@ (800275c <ButtonInit+0x58>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	4a0b      	ldr	r2, [pc, #44]	@ (800275c <ButtonInit+0x58>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6313      	str	r3, [r2, #48]	@ 0x30
 8002736:	4b09      	ldr	r3, [pc, #36]	@ (800275c <ButtonInit+0x58>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &config);
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	4619      	mov	r1, r3
 8002746:	4806      	ldr	r0, [pc, #24]	@ (8002760 <ButtonInit+0x5c>)
 8002748:	f002 fbda 	bl	8004f00 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800274c:	2006      	movs	r0, #6
 800274e:	f002 fb88 	bl	8004e62 <HAL_NVIC_EnableIRQ>
	//GPIO_Init(BUTTON_PORT_VALUE, config, BUTTON_PIN_NUMBER);
}
 8002752:	bf00      	nop
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	40020000 	.word	0x40020000

08002764 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08c      	sub	sp, #48	@ 0x30
 8002768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	4b5a      	ldr	r3, [pc, #360]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002772:	4a59      	ldr	r2, [pc, #356]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 8002774:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002778:	6453      	str	r3, [r2, #68]	@ 0x44
 800277a:	4b57      	ldr	r3, [pc, #348]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002782:	61bb      	str	r3, [r7, #24]
 8002784:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	4b53      	ldr	r3, [pc, #332]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	4a52      	ldr	r2, [pc, #328]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6313      	str	r3, [r2, #48]	@ 0x30
 8002796:	4b50      	ldr	r3, [pc, #320]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	4b4c      	ldr	r3, [pc, #304]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	4a4b      	ldr	r2, [pc, #300]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b2:	4b49      	ldr	r3, [pc, #292]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b45      	ldr	r3, [pc, #276]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	4a44      	ldr	r2, [pc, #272]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ce:	4b42      	ldr	r3, [pc, #264]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	4b3e      	ldr	r3, [pc, #248]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	4a3d      	ldr	r2, [pc, #244]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 80027e4:	f043 0308 	orr.w	r3, r3, #8
 80027e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ea:	4b3b      	ldr	r3, [pc, #236]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	4b37      	ldr	r3, [pc, #220]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	4a36      	ldr	r2, [pc, #216]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 8002800:	f043 0320 	orr.w	r3, r3, #32
 8002804:	6313      	str	r3, [r2, #48]	@ 0x30
 8002806:	4b34      	ldr	r3, [pc, #208]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	603b      	str	r3, [r7, #0]
 8002816:	4b30      	ldr	r3, [pc, #192]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	4a2f      	ldr	r2, [pc, #188]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 800281c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002820:	6313      	str	r3, [r2, #48]	@ 0x30
 8002822:	4b2d      	ldr	r3, [pc, #180]	@ (80028d8 <LCD_GPIO_Init+0x174>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800282e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002832:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800283c:	2302      	movs	r3, #2
 800283e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002840:	230e      	movs	r3, #14
 8002842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002844:	f107 031c 	add.w	r3, r7, #28
 8002848:	4619      	mov	r1, r3
 800284a:	4824      	ldr	r0, [pc, #144]	@ (80028dc <LCD_GPIO_Init+0x178>)
 800284c:	f002 fb58 	bl	8004f00 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002850:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002854:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002856:	f107 031c 	add.w	r3, r7, #28
 800285a:	4619      	mov	r1, r3
 800285c:	4820      	ldr	r0, [pc, #128]	@ (80028e0 <LCD_GPIO_Init+0x17c>)
 800285e:	f002 fb4f 	bl	8004f00 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002862:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002868:	f107 031c 	add.w	r3, r7, #28
 800286c:	4619      	mov	r1, r3
 800286e:	481d      	ldr	r0, [pc, #116]	@ (80028e4 <LCD_GPIO_Init+0x180>)
 8002870:	f002 fb46 	bl	8004f00 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002874:	2348      	movs	r3, #72	@ 0x48
 8002876:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	4619      	mov	r1, r3
 800287e:	481a      	ldr	r0, [pc, #104]	@ (80028e8 <LCD_GPIO_Init+0x184>)
 8002880:	f002 fb3e 	bl	8004f00 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002884:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800288a:	f107 031c 	add.w	r3, r7, #28
 800288e:	4619      	mov	r1, r3
 8002890:	4816      	ldr	r0, [pc, #88]	@ (80028ec <LCD_GPIO_Init+0x188>)
 8002892:	f002 fb35 	bl	8004f00 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002896:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800289a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800289c:	f107 031c 	add.w	r3, r7, #28
 80028a0:	4619      	mov	r1, r3
 80028a2:	4813      	ldr	r0, [pc, #76]	@ (80028f0 <LCD_GPIO_Init+0x18c>)
 80028a4:	f002 fb2c 	bl	8004f00 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80028a8:	2303      	movs	r3, #3
 80028aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80028ac:	2309      	movs	r3, #9
 80028ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80028b0:	f107 031c 	add.w	r3, r7, #28
 80028b4:	4619      	mov	r1, r3
 80028b6:	480a      	ldr	r0, [pc, #40]	@ (80028e0 <LCD_GPIO_Init+0x17c>)
 80028b8:	f002 fb22 	bl	8004f00 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80028bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80028c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80028c2:	f107 031c 	add.w	r3, r7, #28
 80028c6:	4619      	mov	r1, r3
 80028c8:	4809      	ldr	r0, [pc, #36]	@ (80028f0 <LCD_GPIO_Init+0x18c>)
 80028ca:	f002 fb19 	bl	8004f00 <HAL_GPIO_Init>
}
 80028ce:	bf00      	nop
 80028d0:	3730      	adds	r7, #48	@ 0x30
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020000 	.word	0x40020000
 80028e0:	40020400 	.word	0x40020400
 80028e4:	40020800 	.word	0x40020800
 80028e8:	40020c00 	.word	0x40020c00
 80028ec:	40021400 	.word	0x40021400
 80028f0:	40021800 	.word	0x40021800

080028f4 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b090      	sub	sp, #64	@ 0x40
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8002902:	23f0      	movs	r3, #240	@ 0xf0
 8002904:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800290a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800290e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8002910:	2302      	movs	r3, #2
 8002912:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8002914:	23ff      	movs	r3, #255	@ 0xff
 8002916:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800291c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002920:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002922:	2305      	movs	r3, #5
 8002924:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800292c:	4b0f      	ldr	r3, [pc, #60]	@ (800296c <LTCD_Layer_Init+0x78>)
 800292e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8002930:	23f0      	movs	r3, #240	@ 0xf0
 8002932:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8002934:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002938:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8002946:	2300      	movs	r3, #0
 8002948:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 800294c:	79fa      	ldrb	r2, [r7, #7]
 800294e:	f107 030c 	add.w	r3, r7, #12
 8002952:	4619      	mov	r1, r3
 8002954:	4806      	ldr	r0, [pc, #24]	@ (8002970 <LTCD_Layer_Init+0x7c>)
 8002956:	f003 ff15 	bl	8006784 <HAL_LTDC_ConfigLayer>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8002960:	f000 f9a4 	bl	8002cac <LCD_Error_Handler>
	}
}
 8002964:	bf00      	nop
 8002966:	3740      	adds	r7, #64	@ 0x40
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000134 	.word	0x20000134
 8002970:	20000058 	.word	0x20000058

08002974 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8002978:	4b2a      	ldr	r3, [pc, #168]	@ (8002a24 <LTCD__Init+0xb0>)
 800297a:	4a2b      	ldr	r2, [pc, #172]	@ (8002a28 <LTCD__Init+0xb4>)
 800297c:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800297e:	4b29      	ldr	r3, [pc, #164]	@ (8002a24 <LTCD__Init+0xb0>)
 8002980:	2209      	movs	r2, #9
 8002982:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8002984:	4b27      	ldr	r3, [pc, #156]	@ (8002a24 <LTCD__Init+0xb0>)
 8002986:	2201      	movs	r2, #1
 8002988:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800298a:	4b26      	ldr	r3, [pc, #152]	@ (8002a24 <LTCD__Init+0xb0>)
 800298c:	221d      	movs	r2, #29
 800298e:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8002990:	4b24      	ldr	r3, [pc, #144]	@ (8002a24 <LTCD__Init+0xb0>)
 8002992:	2203      	movs	r2, #3
 8002994:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8002996:	4b23      	ldr	r3, [pc, #140]	@ (8002a24 <LTCD__Init+0xb0>)
 8002998:	f240 120d 	movw	r2, #269	@ 0x10d
 800299c:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800299e:	4b21      	ldr	r3, [pc, #132]	@ (8002a24 <LTCD__Init+0xb0>)
 80029a0:	f240 1243 	movw	r2, #323	@ 0x143
 80029a4:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80029a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a24 <LTCD__Init+0xb0>)
 80029a8:	f240 1217 	movw	r2, #279	@ 0x117
 80029ac:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80029ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002a24 <LTCD__Init+0xb0>)
 80029b0:	f240 1247 	movw	r2, #327	@ 0x147
 80029b4:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80029b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a24 <LTCD__Init+0xb0>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80029be:	4b19      	ldr	r3, [pc, #100]	@ (8002a24 <LTCD__Init+0xb0>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80029c6:	4b17      	ldr	r3, [pc, #92]	@ (8002a24 <LTCD__Init+0xb0>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80029ce:	4b17      	ldr	r3, [pc, #92]	@ (8002a2c <LTCD__Init+0xb8>)
 80029d0:	2208      	movs	r2, #8
 80029d2:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80029d4:	4b15      	ldr	r3, [pc, #84]	@ (8002a2c <LTCD__Init+0xb8>)
 80029d6:	22c0      	movs	r2, #192	@ 0xc0
 80029d8:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80029da:	4b14      	ldr	r3, [pc, #80]	@ (8002a2c <LTCD__Init+0xb8>)
 80029dc:	2204      	movs	r2, #4
 80029de:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80029e0:	4b12      	ldr	r3, [pc, #72]	@ (8002a2c <LTCD__Init+0xb8>)
 80029e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029e6:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80029e8:	4810      	ldr	r0, [pc, #64]	@ (8002a2c <LTCD__Init+0xb8>)
 80029ea:	f004 fd25 	bl	8007438 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80029ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002a24 <LTCD__Init+0xb0>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80029f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a24 <LTCD__Init+0xb0>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80029fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002a24 <LTCD__Init+0xb0>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002a00:	4b08      	ldr	r3, [pc, #32]	@ (8002a24 <LTCD__Init+0xb0>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8002a06:	f7ff fead 	bl	8002764 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002a0a:	4806      	ldr	r0, [pc, #24]	@ (8002a24 <LTCD__Init+0xb0>)
 8002a0c:	f003 fdea 	bl	80065e4 <HAL_LTDC_Init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8002a16:	f000 f949 	bl	8002cac <LCD_Error_Handler>
	 }

	ili9341_Init();
 8002a1a:	f000 fb2c 	bl	8003076 <ili9341_Init>
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000058 	.word	0x20000058
 8002a28:	40016800 	.word	0x40016800
 8002a2c:	20000100 	.word	0x20000100

08002a30 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	80fb      	strh	r3, [r7, #6]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	80bb      	strh	r3, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8002a42:	88ba      	ldrh	r2, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	4413      	add	r3, r2
 8002a52:	4905      	ldr	r1, [pc, #20]	@ (8002a68 <LCD_Draw_Pixel+0x38>)
 8002a54:	887a      	ldrh	r2, [r7, #2]
 8002a56:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	20000134 	.word	0x20000134

08002a6c <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4604      	mov	r4, r0
 8002a74:	4608      	mov	r0, r1
 8002a76:	4611      	mov	r1, r2
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4623      	mov	r3, r4
 8002a7c:	80fb      	strh	r3, [r7, #6]
 8002a7e:	4603      	mov	r3, r0
 8002a80:	80bb      	strh	r3, [r7, #4]
 8002a82:	460b      	mov	r3, r1
 8002a84:	807b      	strh	r3, [r7, #2]
 8002a86:	4613      	mov	r3, r2
 8002a88:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	81fb      	strh	r3, [r7, #14]
 8002a8e:	e00b      	b.n	8002aa8 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8002a90:	89fa      	ldrh	r2, [r7, #14]
 8002a92:	88bb      	ldrh	r3, [r7, #4]
 8002a94:	4413      	add	r3, r2
 8002a96:	b299      	uxth	r1, r3
 8002a98:	883a      	ldrh	r2, [r7, #0]
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff ffc7 	bl	8002a30 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8002aa2:	89fb      	ldrh	r3, [r7, #14]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	81fb      	strh	r3, [r7, #14]
 8002aa8:	89fa      	ldrh	r2, [r7, #14]
 8002aaa:	887b      	ldrh	r3, [r7, #2]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d3ef      	bcc.n	8002a90 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd90      	pop	{r4, r7, pc}

08002aba <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8002aba:	b590      	push	{r4, r7, lr}
 8002abc:	b085      	sub	sp, #20
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4604      	mov	r4, r0
 8002ac2:	4608      	mov	r0, r1
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4623      	mov	r3, r4
 8002aca:	80fb      	strh	r3, [r7, #6]
 8002acc:	4603      	mov	r3, r0
 8002ace:	80bb      	strh	r3, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	807b      	strh	r3, [r7, #2]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	81fb      	strh	r3, [r7, #14]
 8002adc:	e00b      	b.n	8002af6 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8002ade:	89fa      	ldrh	r2, [r7, #14]
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	883a      	ldrh	r2, [r7, #0]
 8002ae8:	88b9      	ldrh	r1, [r7, #4]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff ffa0 	bl	8002a30 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8002af0:	89fb      	ldrh	r3, [r7, #14]
 8002af2:	3301      	adds	r3, #1
 8002af4:	81fb      	strh	r3, [r7, #14]
 8002af6:	89fa      	ldrh	r2, [r7, #14]
 8002af8:	887b      	ldrh	r3, [r7, #2]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d3ef      	bcc.n	8002ade <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8002afe:	bf00      	nop
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd90      	pop	{r4, r7, pc}

08002b08 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	460a      	mov	r2, r1
 8002b12:	71fb      	strb	r3, [r7, #7]
 8002b14:	4613      	mov	r3, r2
 8002b16:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10e      	bne.n	8002b3c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	e007      	b.n	8002b34 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8002b24:	4908      	ldr	r1, [pc, #32]	@ (8002b48 <LCD_Clear+0x40>)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	88ba      	ldrh	r2, [r7, #4]
 8002b2a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	3301      	adds	r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8002b3a:	d3f3      	bcc.n	8002b24 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	20000134 	.word	0x20000134

08002b4c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8002b56:	4a04      	ldr	r2, [pc, #16]	@ (8002b68 <LCD_SetTextColor+0x1c>)
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	8013      	strh	r3, [r2, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	20000000 	.word	0x20000000

08002b6c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8002b74:	4a04      	ldr	r2, [pc, #16]	@ (8002b88 <LCD_SetFont+0x1c>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6013      	str	r3, [r2, #0]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000130 	.word	0x20000130

08002b8c <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	603a      	str	r2, [r7, #0]
 8002b96:	80fb      	strh	r3, [r7, #6]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	e04c      	b.n	8002c44 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	e03f      	b.n	8002c30 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4b27      	ldr	r3, [pc, #156]	@ (8002c5c <LCD_Draw_Char+0xd0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	889b      	ldrh	r3, [r3, #4]
 8002bc2:	4a27      	ldr	r2, [pc, #156]	@ (8002c60 <LCD_Draw_Char+0xd4>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	08db      	lsrs	r3, r3, #3
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	2280      	movs	r2, #128	@ 0x80
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	fa42 f303 	asr.w	r3, r2, r3
 8002bd8:	400b      	ands	r3, r1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d104      	bne.n	8002be8 <LCD_Draw_Char+0x5c>
 8002bde:	4b1f      	ldr	r3, [pc, #124]	@ (8002c5c <LCD_Draw_Char+0xd0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	889b      	ldrh	r3, [r3, #4]
 8002be4:	2b0c      	cmp	r3, #12
 8002be6:	d920      	bls.n	8002c2a <LCD_Draw_Char+0x9e>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	4413      	add	r3, r2
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	fa42 f303 	asr.w	r3, r2, r3
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d104      	bne.n	8002c0c <LCD_Draw_Char+0x80>
 8002c02:	4b16      	ldr	r3, [pc, #88]	@ (8002c5c <LCD_Draw_Char+0xd0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	889b      	ldrh	r3, [r3, #4]
 8002c08:	2b0c      	cmp	r3, #12
 8002c0a:	d80e      	bhi.n	8002c2a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	4413      	add	r3, r2
 8002c14:	b298      	uxth	r0, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	88bb      	ldrh	r3, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	4a10      	ldr	r2, [pc, #64]	@ (8002c64 <LCD_Draw_Char+0xd8>)
 8002c22:	8812      	ldrh	r2, [r2, #0]
 8002c24:	4619      	mov	r1, r3
 8002c26:	f7ff ff03 	bl	8002a30 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	4b0a      	ldr	r3, [pc, #40]	@ (8002c5c <LCD_Draw_Char+0xd0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	889b      	ldrh	r3, [r3, #4]
 8002c36:	461a      	mov	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d3b8      	bcc.n	8002bb0 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3301      	adds	r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	4b05      	ldr	r3, [pc, #20]	@ (8002c5c <LCD_Draw_Char+0xd0>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	88db      	ldrh	r3, [r3, #6]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d3ab      	bcc.n	8002baa <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8002c52:	bf00      	nop
 8002c54:	bf00      	nop
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000130 	.word	0x20000130
 8002c60:	aaaaaaab 	.word	0xaaaaaaab
 8002c64:	20000000 	.word	0x20000000

08002c68 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	80fb      	strh	r3, [r7, #6]
 8002c72:	460b      	mov	r3, r1
 8002c74:	80bb      	strh	r3, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	3b20      	subs	r3, #32
 8002c7e:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8002c80:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <LCD_DisplayChar+0x40>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	4907      	ldr	r1, [pc, #28]	@ (8002ca8 <LCD_DisplayChar+0x40>)
 8002c8a:	6809      	ldr	r1, [r1, #0]
 8002c8c:	88c9      	ldrh	r1, [r1, #6]
 8002c8e:	fb01 f303 	mul.w	r3, r1, r3
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	441a      	add	r2, r3
 8002c96:	88b9      	ldrh	r1, [r7, #4]
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff ff76 	bl	8002b8c <LCD_Draw_Char>
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000130 	.word	0x20000130

08002cac <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb0:	b672      	cpsid	i
}
 8002cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cb4:	bf00      	nop
 8002cb6:	e7fd      	b.n	8002cb4 <LCD_Error_Handler+0x8>

08002cb8 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8002cbc:	f001 fb66 	bl	800438c <STMPE811_Init>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d001      	beq.n	8002cca <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8002cc6:	bf00      	nop
 8002cc8:	e7fd      	b.n	8002cc6 <InitializeLCDTouch+0xe>
  }
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f001 fc42 	bl	8004560 <STMPE811_DetermineTouchPosition>
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f001 fc12 	bl	800451a <STMPE811_Read>
 8002cf6:	4603      	mov	r3, r0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	460a      	mov	r2, r1
 8002d0a:	71fb      	strb	r3, [r7, #7]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8002d10:	79ba      	ldrb	r2, [r7, #6]
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 fc10 	bl	800453c <STMPE811_Write>
}
 8002d1c:	bf00      	nop
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <game_init>:
 */
#include "game.h"
static block_t block;
static map_t map;
void game_init()
{
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	f2ad 4da4 	subw	sp, sp, #1188	@ 0x4a4
 8002d2a:	af8a      	add	r7, sp, #552	@ 0x228
	uint32_t start_time = HAL_GetTick();
 8002d2c:	f001 ff30 	bl	8004b90 <HAL_GetTick>
 8002d30:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
	uint8_t rand = S;
 8002d34:	2303      	movs	r3, #3
 8002d36:	f887 3273 	strb.w	r3, [r7, #627]	@ 0x273
	//STMPE811_t touch_data = {0};

	//while(STMPE811_ReadTouch(touch_data) != STMPE811_State_Pressed)
	//{
		//map_draw();
		draw_shapes();
 8002d3a:	f7ff fb23 	bl	8002384 <draw_shapes>
		start_screen();
 8002d3e:	f7fd fd33 	bl	80007a8 <start_screen>
	//}

	HAL_Delay(2000);
 8002d42:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002d46:	f001 ff2f 	bl	8004ba8 <HAL_Delay>
	LCD_Clear(0,LCD_COLOR_BLACK);
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f7ff fedb 	bl	8002b08 <LCD_Clear>
	map_draw();
 8002d52:	f7fd fca9 	bl	80006a8 <map_draw>
	//rng_init();
	block = block_create(rand);
 8002d56:	4d2a      	ldr	r5, [pc, #168]	@ (8002e00 <game_init+0xdc>)
 8002d58:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8002d5c:	f897 2273 	ldrb.w	r2, [r7, #627]	@ 0x273
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fec6 	bl	8000af4 <block_create>
 8002d68:	f507 740e 	add.w	r4, r7, #568	@ 0x238
 8002d6c:	462e      	mov	r6, r5
 8002d6e:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002d72:	4635      	mov	r5, r6
 8002d74:	4623      	mov	r3, r4
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	6859      	ldr	r1, [r3, #4]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d80:	3410      	adds	r4, #16
 8002d82:	3610      	adds	r6, #16
 8002d84:	4564      	cmp	r4, ip
 8002d86:	d1f4      	bne.n	8002d72 <game_init+0x4e>
 8002d88:	4633      	mov	r3, r6
 8002d8a:	4622      	mov	r2, r4
 8002d8c:	6810      	ldr	r0, [r2, #0]
 8002d8e:	6018      	str	r0, [r3, #0]
	draw_tetromino(block);
 8002d90:	4e1b      	ldr	r6, [pc, #108]	@ (8002e00 <game_init+0xdc>)
 8002d92:	466d      	mov	r5, sp
 8002d94:	f106 0410 	add.w	r4, r6, #16
 8002d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	602b      	str	r3, [r5, #0]
 8002da4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002da8:	f7ff fc09 	bl	80025be <draw_tetromino>

	map = map_init();
 8002dac:	4c15      	ldr	r4, [pc, #84]	@ (8002e04 <game_init+0xe0>)
 8002dae:	463b      	mov	r3, r7
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe fa09 	bl	80011c8 <map_init>
 8002db6:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8002dba:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f240 2336 	movw	r3, #566	@ 0x236
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f005 fb04 	bl	80083d4 <memcpy>
	//game_over(start_time);
	while(!is_game_over(map))
 8002dcc:	e001      	b.n	8002dd2 <game_init+0xae>
	{
		game_drop();
 8002dce:	f000 f82f 	bl	8002e30 <game_drop>
	while(!is_game_over(map))
 8002dd2:	4c0c      	ldr	r4, [pc, #48]	@ (8002e04 <game_init+0xe0>)
 8002dd4:	4668      	mov	r0, sp
 8002dd6:	f104 0310 	add.w	r3, r4, #16
 8002dda:	f240 2226 	movw	r2, #550	@ 0x226
 8002dde:	4619      	mov	r1, r3
 8002de0:	f005 faf8 	bl	80083d4 <memcpy>
 8002de4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002de8:	f7ff fc68 	bl	80026bc <is_game_over>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0ed      	beq.n	8002dce <game_init+0xaa>
	}
	game_over();
 8002df2:	f000 f809 	bl	8002e08 <game_over>
}
 8002df6:	bf00      	nop
 8002df8:	f507 771f 	add.w	r7, r7, #636	@ 0x27c
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e00:	20025934 	.word	0x20025934
 8002e04:	20025968 	.word	0x20025968

08002e08 <game_over>:

void game_over(uint32_t start_time)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	uint32_t end_time = HAL_GetTick();
 8002e10:	f001 febe 	bl	8004b90 <HAL_GetTick>
 8002e14:	60f8      	str	r0, [r7, #12]
	uint32_t total_time = end_time - start_time;
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	60bb      	str	r3, [r7, #8]
	end_screen();
 8002e1e:	f7fd fd8d 	bl	800093c <end_screen>
	disp_time(total_time);
 8002e22:	68b8      	ldr	r0, [r7, #8]
 8002e24:	f7fd fdc4 	bl	80009b0 <disp_time>
}
 8002e28:	bf00      	nop
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <game_drop>:
	uint32_t time = end_time - start_time;
	return time;
}

void game_drop()
{
 8002e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e32:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 8002e36:	af0a      	add	r7, sp, #40	@ 0x28
	if(!rest(&block, &map))
 8002e38:	4942      	ldr	r1, [pc, #264]	@ (8002f44 <game_drop+0x114>)
 8002e3a:	4843      	ldr	r0, [pc, #268]	@ (8002f48 <game_drop+0x118>)
 8002e3c:	f7fe fa37 	bl	80012ae <rest>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d13b      	bne.n	8002ebe <game_drop+0x8e>
		{
			HAL_Delay(500);
 8002e46:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e4a:	f001 fead 	bl	8004ba8 <HAL_Delay>
			clear_tetromino(block);
 8002e4e:	4e3e      	ldr	r6, [pc, #248]	@ (8002f48 <game_drop+0x118>)
 8002e50:	466d      	mov	r5, sp
 8002e52:	f106 0410 	add.w	r4, r6, #16
 8002e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	602b      	str	r3, [r5, #0]
 8002e62:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002e66:	f7ff fbea 	bl	800263e <clear_tetromino>
			block = block_drop(&block);
 8002e6a:	4d37      	ldr	r5, [pc, #220]	@ (8002f48 <game_drop+0x118>)
 8002e6c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8002e70:	4935      	ldr	r1, [pc, #212]	@ (8002f48 <game_drop+0x118>)
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fd fdf0 	bl	8000a58 <block_drop>
 8002e78:	f507 740e 	add.w	r4, r7, #568	@ 0x238
 8002e7c:	462e      	mov	r6, r5
 8002e7e:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002e82:	4635      	mov	r5, r6
 8002e84:	4623      	mov	r3, r4
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	6859      	ldr	r1, [r3, #4]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e90:	3410      	adds	r4, #16
 8002e92:	3610      	adds	r6, #16
 8002e94:	4564      	cmp	r4, ip
 8002e96:	d1f4      	bne.n	8002e82 <game_drop+0x52>
 8002e98:	4633      	mov	r3, r6
 8002e9a:	4622      	mov	r2, r4
 8002e9c:	6810      	ldr	r0, [r2, #0]
 8002e9e:	6018      	str	r0, [r3, #0]
			draw_tetromino(block);
 8002ea0:	4e29      	ldr	r6, [pc, #164]	@ (8002f48 <game_drop+0x118>)
 8002ea2:	466d      	mov	r5, sp
 8002ea4:	f106 0410 	add.w	r4, r6, #16
 8002ea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb0:	6823      	ldr	r3, [r4, #0]
 8002eb2:	602b      	str	r3, [r5, #0]
 8002eb4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002eb8:	f7ff fb81 	bl	80025be <draw_tetromino>
		{
			map = map_update(&block, &map);
			block = block_create(S);
			draw_tetromino(block);
		}
}
 8002ebc:	e03c      	b.n	8002f38 <game_drop+0x108>
			map = map_update(&block, &map);
 8002ebe:	4c21      	ldr	r4, [pc, #132]	@ (8002f44 <game_drop+0x114>)
 8002ec0:	463b      	mov	r3, r7
 8002ec2:	4a20      	ldr	r2, [pc, #128]	@ (8002f44 <game_drop+0x114>)
 8002ec4:	4920      	ldr	r1, [pc, #128]	@ (8002f48 <game_drop+0x118>)
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe fc14 	bl	80016f4 <map_update>
 8002ecc:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8002ed0:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f240 2336 	movw	r3, #566	@ 0x236
 8002edc:	461a      	mov	r2, r3
 8002ede:	f005 fa79 	bl	80083d4 <memcpy>
			block = block_create(S);
 8002ee2:	4d19      	ldr	r5, [pc, #100]	@ (8002f48 <game_drop+0x118>)
 8002ee4:	463b      	mov	r3, r7
 8002ee6:	2103      	movs	r1, #3
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd fe03 	bl	8000af4 <block_create>
 8002eee:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8002ef2:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8002ef6:	461c      	mov	r4, r3
 8002ef8:	462e      	mov	r6, r5
 8002efa:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002efe:	4635      	mov	r5, r6
 8002f00:	4623      	mov	r3, r4
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	6859      	ldr	r1, [r3, #4]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f0c:	3410      	adds	r4, #16
 8002f0e:	3610      	adds	r6, #16
 8002f10:	4564      	cmp	r4, ip
 8002f12:	d1f4      	bne.n	8002efe <game_drop+0xce>
 8002f14:	4633      	mov	r3, r6
 8002f16:	4622      	mov	r2, r4
 8002f18:	6810      	ldr	r0, [r2, #0]
 8002f1a:	6018      	str	r0, [r3, #0]
			draw_tetromino(block);
 8002f1c:	4e0a      	ldr	r6, [pc, #40]	@ (8002f48 <game_drop+0x118>)
 8002f1e:	466d      	mov	r5, sp
 8002f20:	f106 0410 	add.w	r4, r6, #16
 8002f24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	602b      	str	r3, [r5, #0]
 8002f30:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002f34:	f7ff fb43 	bl	80025be <draw_tetromino>
}
 8002f38:	bf00      	nop
 8002f3a:	f507 771d 	add.w	r7, r7, #628	@ 0x274
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20025968 	.word	0x20025968
 8002f48:	20025934 	.word	0x20025934

08002f4c <game_rotate>:

void game_rotate()
{
 8002f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f4e:	b099      	sub	sp, #100	@ 0x64
 8002f50:	af0a      	add	r7, sp, #40	@ 0x28
	//HAL_Delay(500);
	clear_tetromino(block);
 8002f52:	4e1c      	ldr	r6, [pc, #112]	@ (8002fc4 <game_rotate+0x78>)
 8002f54:	466d      	mov	r5, sp
 8002f56:	f106 0410 	add.w	r4, r6, #16
 8002f5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	602b      	str	r3, [r5, #0]
 8002f66:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002f6a:	f7ff fb68 	bl	800263e <clear_tetromino>
	block = block_rotate(&block);
 8002f6e:	4d15      	ldr	r5, [pc, #84]	@ (8002fc4 <game_rotate+0x78>)
 8002f70:	463b      	mov	r3, r7
 8002f72:	4914      	ldr	r1, [pc, #80]	@ (8002fc4 <game_rotate+0x78>)
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe fd07 	bl	8001988 <block_rotate>
 8002f7a:	463c      	mov	r4, r7
 8002f7c:	462e      	mov	r6, r5
 8002f7e:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002f82:	4635      	mov	r5, r6
 8002f84:	4623      	mov	r3, r4
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	6859      	ldr	r1, [r3, #4]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f90:	3410      	adds	r4, #16
 8002f92:	3610      	adds	r6, #16
 8002f94:	4564      	cmp	r4, ip
 8002f96:	d1f4      	bne.n	8002f82 <game_rotate+0x36>
 8002f98:	4633      	mov	r3, r6
 8002f9a:	4622      	mov	r2, r4
 8002f9c:	6810      	ldr	r0, [r2, #0]
 8002f9e:	6018      	str	r0, [r3, #0]
	draw_tetromino(block);
 8002fa0:	4e08      	ldr	r6, [pc, #32]	@ (8002fc4 <game_rotate+0x78>)
 8002fa2:	466d      	mov	r5, sp
 8002fa4:	f106 0410 	add.w	r4, r6, #16
 8002fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002faa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	602b      	str	r3, [r5, #0]
 8002fb4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002fb8:	f7ff fb01 	bl	80025be <draw_tetromino>
}
 8002fbc:	bf00      	nop
 8002fbe:	373c      	adds	r7, #60	@ 0x3c
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fc4:	20025934 	.word	0x20025934

08002fc8 <game_move>:

void game_move(uint8_t dir)
{
 8002fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fca:	b09b      	sub	sp, #108	@ 0x6c
 8002fcc:	af0a      	add	r7, sp, #40	@ 0x28
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if(can_move(&block, &map, dir))
 8002fd4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4921      	ldr	r1, [pc, #132]	@ (8003060 <game_move+0x98>)
 8002fdc:	4821      	ldr	r0, [pc, #132]	@ (8003064 <game_move+0x9c>)
 8002fde:	f7fe fe6f 	bl	8001cc0 <can_move>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d036      	beq.n	8003056 <game_move+0x8e>
	{
		clear_tetromino(block);
 8002fe8:	4e1e      	ldr	r6, [pc, #120]	@ (8003064 <game_move+0x9c>)
 8002fea:	466d      	mov	r5, sp
 8002fec:	f106 0410 	add.w	r4, r6, #16
 8002ff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ff2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	602b      	str	r3, [r5, #0]
 8002ffc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003000:	f7ff fb1d 	bl	800263e <clear_tetromino>
		block = block_move(&block, &map, dir);
 8003004:	4d17      	ldr	r5, [pc, #92]	@ (8003064 <game_move+0x9c>)
 8003006:	4638      	mov	r0, r7
 8003008:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800300c:	4a14      	ldr	r2, [pc, #80]	@ (8003060 <game_move+0x98>)
 800300e:	4915      	ldr	r1, [pc, #84]	@ (8003064 <game_move+0x9c>)
 8003010:	f7ff f929 	bl	8002266 <block_move>
 8003014:	463c      	mov	r4, r7
 8003016:	462e      	mov	r6, r5
 8003018:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800301c:	4635      	mov	r5, r6
 800301e:	4623      	mov	r3, r4
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800302a:	3410      	adds	r4, #16
 800302c:	3610      	adds	r6, #16
 800302e:	4564      	cmp	r4, ip
 8003030:	d1f4      	bne.n	800301c <game_move+0x54>
 8003032:	4633      	mov	r3, r6
 8003034:	4622      	mov	r2, r4
 8003036:	6810      	ldr	r0, [r2, #0]
 8003038:	6018      	str	r0, [r3, #0]
		draw_tetromino(block);
 800303a:	4e0a      	ldr	r6, [pc, #40]	@ (8003064 <game_move+0x9c>)
 800303c:	466d      	mov	r5, sp
 800303e:	f106 0410 	add.w	r4, r6, #16
 8003042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003048:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	602b      	str	r3, [r5, #0]
 800304e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003052:	f7ff fab4 	bl	80025be <draw_tetromino>
	}
}
 8003056:	bf00      	nop
 8003058:	3744      	adds	r7, #68	@ 0x44
 800305a:	46bd      	mov	sp, r7
 800305c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800305e:	bf00      	nop
 8003060:	20025968 	.word	0x20025968
 8003064:	20025934 	.word	0x20025934

08003068 <I2C3_EV_IRQHandler>:

void I2C3_EV_IRQHandler()
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
	//disable IRQ
	//lower flag
	//stuff
	//enable IRQ
}
 800306c:	bf00      	nop
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800307a:	f000 f9ff 	bl	800347c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 800307e:	20ca      	movs	r0, #202	@ 0xca
 8003080:	f000 f943 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8003084:	20c3      	movs	r0, #195	@ 0xc3
 8003086:	f000 f94d 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 800308a:	2008      	movs	r0, #8
 800308c:	f000 f94a 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8003090:	2050      	movs	r0, #80	@ 0x50
 8003092:	f000 f947 	bl	8003324 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8003096:	20cf      	movs	r0, #207	@ 0xcf
 8003098:	f000 f937 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800309c:	2000      	movs	r0, #0
 800309e:	f000 f941 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80030a2:	20c1      	movs	r0, #193	@ 0xc1
 80030a4:	f000 f93e 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80030a8:	2030      	movs	r0, #48	@ 0x30
 80030aa:	f000 f93b 	bl	8003324 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80030ae:	20ed      	movs	r0, #237	@ 0xed
 80030b0:	f000 f92b 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80030b4:	2064      	movs	r0, #100	@ 0x64
 80030b6:	f000 f935 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80030ba:	2003      	movs	r0, #3
 80030bc:	f000 f932 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80030c0:	2012      	movs	r0, #18
 80030c2:	f000 f92f 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80030c6:	2081      	movs	r0, #129	@ 0x81
 80030c8:	f000 f92c 	bl	8003324 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80030cc:	20e8      	movs	r0, #232	@ 0xe8
 80030ce:	f000 f91c 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80030d2:	2085      	movs	r0, #133	@ 0x85
 80030d4:	f000 f926 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80030d8:	2000      	movs	r0, #0
 80030da:	f000 f923 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80030de:	2078      	movs	r0, #120	@ 0x78
 80030e0:	f000 f920 	bl	8003324 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80030e4:	20cb      	movs	r0, #203	@ 0xcb
 80030e6:	f000 f910 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80030ea:	2039      	movs	r0, #57	@ 0x39
 80030ec:	f000 f91a 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80030f0:	202c      	movs	r0, #44	@ 0x2c
 80030f2:	f000 f917 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80030f6:	2000      	movs	r0, #0
 80030f8:	f000 f914 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80030fc:	2034      	movs	r0, #52	@ 0x34
 80030fe:	f000 f911 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8003102:	2002      	movs	r0, #2
 8003104:	f000 f90e 	bl	8003324 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8003108:	20f7      	movs	r0, #247	@ 0xf7
 800310a:	f000 f8fe 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 800310e:	2020      	movs	r0, #32
 8003110:	f000 f908 	bl	8003324 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8003114:	20ea      	movs	r0, #234	@ 0xea
 8003116:	f000 f8f8 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800311a:	2000      	movs	r0, #0
 800311c:	f000 f902 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003120:	2000      	movs	r0, #0
 8003122:	f000 f8ff 	bl	8003324 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8003126:	20b1      	movs	r0, #177	@ 0xb1
 8003128:	f000 f8ef 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800312c:	2000      	movs	r0, #0
 800312e:	f000 f8f9 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8003132:	201b      	movs	r0, #27
 8003134:	f000 f8f6 	bl	8003324 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8003138:	20b6      	movs	r0, #182	@ 0xb6
 800313a:	f000 f8e6 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800313e:	200a      	movs	r0, #10
 8003140:	f000 f8f0 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8003144:	20a2      	movs	r0, #162	@ 0xa2
 8003146:	f000 f8ed 	bl	8003324 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800314a:	20c0      	movs	r0, #192	@ 0xc0
 800314c:	f000 f8dd 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8003150:	2010      	movs	r0, #16
 8003152:	f000 f8e7 	bl	8003324 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8003156:	20c1      	movs	r0, #193	@ 0xc1
 8003158:	f000 f8d7 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800315c:	2010      	movs	r0, #16
 800315e:	f000 f8e1 	bl	8003324 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8003162:	20c5      	movs	r0, #197	@ 0xc5
 8003164:	f000 f8d1 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8003168:	2045      	movs	r0, #69	@ 0x45
 800316a:	f000 f8db 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 800316e:	2015      	movs	r0, #21
 8003170:	f000 f8d8 	bl	8003324 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8003174:	20c7      	movs	r0, #199	@ 0xc7
 8003176:	f000 f8c8 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 800317a:	2090      	movs	r0, #144	@ 0x90
 800317c:	f000 f8d2 	bl	8003324 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8003180:	2036      	movs	r0, #54	@ 0x36
 8003182:	f000 f8c2 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8003186:	20c8      	movs	r0, #200	@ 0xc8
 8003188:	f000 f8cc 	bl	8003324 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800318c:	20f2      	movs	r0, #242	@ 0xf2
 800318e:	f000 f8bc 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003192:	2000      	movs	r0, #0
 8003194:	f000 f8c6 	bl	8003324 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8003198:	20b0      	movs	r0, #176	@ 0xb0
 800319a:	f000 f8b6 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 800319e:	20c2      	movs	r0, #194	@ 0xc2
 80031a0:	f000 f8c0 	bl	8003324 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80031a4:	20b6      	movs	r0, #182	@ 0xb6
 80031a6:	f000 f8b0 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80031aa:	200a      	movs	r0, #10
 80031ac:	f000 f8ba 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80031b0:	20a7      	movs	r0, #167	@ 0xa7
 80031b2:	f000 f8b7 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80031b6:	2027      	movs	r0, #39	@ 0x27
 80031b8:	f000 f8b4 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80031bc:	2004      	movs	r0, #4
 80031be:	f000 f8b1 	bl	8003324 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80031c2:	202a      	movs	r0, #42	@ 0x2a
 80031c4:	f000 f8a1 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80031c8:	2000      	movs	r0, #0
 80031ca:	f000 f8ab 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80031ce:	2000      	movs	r0, #0
 80031d0:	f000 f8a8 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80031d4:	2000      	movs	r0, #0
 80031d6:	f000 f8a5 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80031da:	20ef      	movs	r0, #239	@ 0xef
 80031dc:	f000 f8a2 	bl	8003324 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80031e0:	202b      	movs	r0, #43	@ 0x2b
 80031e2:	f000 f892 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80031e6:	2000      	movs	r0, #0
 80031e8:	f000 f89c 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80031ec:	2000      	movs	r0, #0
 80031ee:	f000 f899 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80031f2:	2001      	movs	r0, #1
 80031f4:	f000 f896 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80031f8:	203f      	movs	r0, #63	@ 0x3f
 80031fa:	f000 f893 	bl	8003324 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80031fe:	20f6      	movs	r0, #246	@ 0xf6
 8003200:	f000 f883 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8003204:	2001      	movs	r0, #1
 8003206:	f000 f88d 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800320a:	2000      	movs	r0, #0
 800320c:	f000 f88a 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8003210:	2006      	movs	r0, #6
 8003212:	f000 f887 	bl	8003324 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8003216:	202c      	movs	r0, #44	@ 0x2c
 8003218:	f000 f877 	bl	800330a <ili9341_Write_Reg>
  LCD_Delay(200);
 800321c:	20c8      	movs	r0, #200	@ 0xc8
 800321e:	f000 f9e9 	bl	80035f4 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8003222:	2026      	movs	r0, #38	@ 0x26
 8003224:	f000 f871 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8003228:	2001      	movs	r0, #1
 800322a:	f000 f87b 	bl	8003324 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 800322e:	20e0      	movs	r0, #224	@ 0xe0
 8003230:	f000 f86b 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8003234:	200f      	movs	r0, #15
 8003236:	f000 f875 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 800323a:	2029      	movs	r0, #41	@ 0x29
 800323c:	f000 f872 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8003240:	2024      	movs	r0, #36	@ 0x24
 8003242:	f000 f86f 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8003246:	200c      	movs	r0, #12
 8003248:	f000 f86c 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800324c:	200e      	movs	r0, #14
 800324e:	f000 f869 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003252:	2009      	movs	r0, #9
 8003254:	f000 f866 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8003258:	204e      	movs	r0, #78	@ 0x4e
 800325a:	f000 f863 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800325e:	2078      	movs	r0, #120	@ 0x78
 8003260:	f000 f860 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8003264:	203c      	movs	r0, #60	@ 0x3c
 8003266:	f000 f85d 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800326a:	2009      	movs	r0, #9
 800326c:	f000 f85a 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8003270:	2013      	movs	r0, #19
 8003272:	f000 f857 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8003276:	2005      	movs	r0, #5
 8003278:	f000 f854 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800327c:	2017      	movs	r0, #23
 800327e:	f000 f851 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8003282:	2011      	movs	r0, #17
 8003284:	f000 f84e 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003288:	2000      	movs	r0, #0
 800328a:	f000 f84b 	bl	8003324 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 800328e:	20e1      	movs	r0, #225	@ 0xe1
 8003290:	f000 f83b 	bl	800330a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003294:	2000      	movs	r0, #0
 8003296:	f000 f845 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800329a:	2016      	movs	r0, #22
 800329c:	f000 f842 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80032a0:	201b      	movs	r0, #27
 80032a2:	f000 f83f 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80032a6:	2004      	movs	r0, #4
 80032a8:	f000 f83c 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80032ac:	2011      	movs	r0, #17
 80032ae:	f000 f839 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80032b2:	2007      	movs	r0, #7
 80032b4:	f000 f836 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80032b8:	2031      	movs	r0, #49	@ 0x31
 80032ba:	f000 f833 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80032be:	2033      	movs	r0, #51	@ 0x33
 80032c0:	f000 f830 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80032c4:	2042      	movs	r0, #66	@ 0x42
 80032c6:	f000 f82d 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80032ca:	2005      	movs	r0, #5
 80032cc:	f000 f82a 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80032d0:	200c      	movs	r0, #12
 80032d2:	f000 f827 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80032d6:	200a      	movs	r0, #10
 80032d8:	f000 f824 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80032dc:	2028      	movs	r0, #40	@ 0x28
 80032de:	f000 f821 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80032e2:	202f      	movs	r0, #47	@ 0x2f
 80032e4:	f000 f81e 	bl	8003324 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80032e8:	200f      	movs	r0, #15
 80032ea:	f000 f81b 	bl	8003324 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80032ee:	2011      	movs	r0, #17
 80032f0:	f000 f80b 	bl	800330a <ili9341_Write_Reg>
  LCD_Delay(200);
 80032f4:	20c8      	movs	r0, #200	@ 0xc8
 80032f6:	f000 f97d 	bl	80035f4 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80032fa:	2029      	movs	r0, #41	@ 0x29
 80032fc:	f000 f805 	bl	800330a <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8003300:	202c      	movs	r0, #44	@ 0x2c
 8003302:	f000 f802 	bl	800330a <ili9341_Write_Reg>
}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}

0800330a <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	4603      	mov	r3, r0
 8003312:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	4618      	mov	r0, r3
 8003318:	f000 f94a 	bl	80035b0 <LCD_IO_WriteReg>
}
 800331c:	bf00      	nop
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	4618      	mov	r0, r3
 8003332:	f000 f91b 	bl	800356c <LCD_IO_WriteData>
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003344:	4819      	ldr	r0, [pc, #100]	@ (80033ac <SPI_Init+0x6c>)
 8003346:	f004 fc56 	bl	8007bf6 <HAL_SPI_GetState>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d12b      	bne.n	80033a8 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8003350:	4b16      	ldr	r3, [pc, #88]	@ (80033ac <SPI_Init+0x6c>)
 8003352:	4a17      	ldr	r2, [pc, #92]	@ (80033b0 <SPI_Init+0x70>)
 8003354:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003356:	4b15      	ldr	r3, [pc, #84]	@ (80033ac <SPI_Init+0x6c>)
 8003358:	2218      	movs	r2, #24
 800335a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800335c:	4b13      	ldr	r3, [pc, #76]	@ (80033ac <SPI_Init+0x6c>)
 800335e:	2200      	movs	r2, #0
 8003360:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003362:	4b12      	ldr	r3, [pc, #72]	@ (80033ac <SPI_Init+0x6c>)
 8003364:	2200      	movs	r2, #0
 8003366:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003368:	4b10      	ldr	r3, [pc, #64]	@ (80033ac <SPI_Init+0x6c>)
 800336a:	2200      	movs	r2, #0
 800336c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800336e:	4b0f      	ldr	r3, [pc, #60]	@ (80033ac <SPI_Init+0x6c>)
 8003370:	2200      	movs	r2, #0
 8003372:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003374:	4b0d      	ldr	r3, [pc, #52]	@ (80033ac <SPI_Init+0x6c>)
 8003376:	2207      	movs	r2, #7
 8003378:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800337a:	4b0c      	ldr	r3, [pc, #48]	@ (80033ac <SPI_Init+0x6c>)
 800337c:	2200      	movs	r2, #0
 800337e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003380:	4b0a      	ldr	r3, [pc, #40]	@ (80033ac <SPI_Init+0x6c>)
 8003382:	2200      	movs	r2, #0
 8003384:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003386:	4b09      	ldr	r3, [pc, #36]	@ (80033ac <SPI_Init+0x6c>)
 8003388:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800338c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800338e:	4b07      	ldr	r3, [pc, #28]	@ (80033ac <SPI_Init+0x6c>)
 8003390:	2200      	movs	r2, #0
 8003392:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003394:	4b05      	ldr	r3, [pc, #20]	@ (80033ac <SPI_Init+0x6c>)
 8003396:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800339a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 800339c:	4803      	ldr	r0, [pc, #12]	@ (80033ac <SPI_Init+0x6c>)
 800339e:	f000 f833 	bl	8003408 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80033a2:	4802      	ldr	r0, [pc, #8]	@ (80033ac <SPI_Init+0x6c>)
 80033a4:	f004 fa32 	bl	800780c <HAL_SPI_Init>
  }
}
 80033a8:	bf00      	nop
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20025ba0 	.word	0x20025ba0
 80033b0:	40015000 	.word	0x40015000

080033b4 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80033c2:	4b09      	ldr	r3, [pc, #36]	@ (80033e8 <SPI_Write+0x34>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	1db9      	adds	r1, r7, #6
 80033c8:	2201      	movs	r2, #1
 80033ca:	4808      	ldr	r0, [pc, #32]	@ (80033ec <SPI_Write+0x38>)
 80033cc:	f004 facf 	bl	800796e <HAL_SPI_Transmit>
 80033d0:	4603      	mov	r3, r0
 80033d2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80033da:	f000 f809 	bl	80033f0 <SPI_Error>
  }
}
 80033de:	bf00      	nop
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000014 	.word	0x20000014
 80033ec:	20025ba0 	.word	0x20025ba0

080033f0 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80033f4:	4803      	ldr	r0, [pc, #12]	@ (8003404 <SPI_Error+0x14>)
 80033f6:	f004 fa92 	bl	800791e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80033fa:	f7ff ffa1 	bl	8003340 <SPI_Init>
}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20025ba0 	.word	0x20025ba0

08003408 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	@ 0x28
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8003410:	2300      	movs	r3, #0
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	4b17      	ldr	r3, [pc, #92]	@ (8003474 <SPI_MspInit+0x6c>)
 8003416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003418:	4a16      	ldr	r2, [pc, #88]	@ (8003474 <SPI_MspInit+0x6c>)
 800341a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800341e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003420:	4b14      	ldr	r3, [pc, #80]	@ (8003474 <SPI_MspInit+0x6c>)
 8003422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003424:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	4b10      	ldr	r3, [pc, #64]	@ (8003474 <SPI_MspInit+0x6c>)
 8003432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003434:	4a0f      	ldr	r2, [pc, #60]	@ (8003474 <SPI_MspInit+0x6c>)
 8003436:	f043 0320 	orr.w	r3, r3, #32
 800343a:	6313      	str	r3, [r2, #48]	@ 0x30
 800343c:	4b0d      	ldr	r3, [pc, #52]	@ (8003474 <SPI_MspInit+0x6c>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8003448:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800344c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800344e:	2302      	movs	r3, #2
 8003450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003452:	2302      	movs	r3, #2
 8003454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003456:	2301      	movs	r3, #1
 8003458:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800345a:	2305      	movs	r3, #5
 800345c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800345e:	f107 0314 	add.w	r3, r7, #20
 8003462:	4619      	mov	r1, r3
 8003464:	4804      	ldr	r0, [pc, #16]	@ (8003478 <SPI_MspInit+0x70>)
 8003466:	f001 fd4b 	bl	8004f00 <HAL_GPIO_Init>
}
 800346a:	bf00      	nop
 800346c:	3728      	adds	r7, #40	@ 0x28
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800
 8003478:	40021400 	.word	0x40021400

0800347c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8003482:	4b36      	ldr	r3, [pc, #216]	@ (800355c <LCD_IO_Init+0xe0>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d164      	bne.n	8003554 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800348a:	4b34      	ldr	r3, [pc, #208]	@ (800355c <LCD_IO_Init+0xe0>)
 800348c:	2201      	movs	r2, #1
 800348e:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003490:	2300      	movs	r3, #0
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	4b32      	ldr	r3, [pc, #200]	@ (8003560 <LCD_IO_Init+0xe4>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003498:	4a31      	ldr	r2, [pc, #196]	@ (8003560 <LCD_IO_Init+0xe4>)
 800349a:	f043 0308 	orr.w	r3, r3, #8
 800349e:	6313      	str	r3, [r2, #48]	@ 0x30
 80034a0:	4b2f      	ldr	r3, [pc, #188]	@ (8003560 <LCD_IO_Init+0xe4>)
 80034a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80034ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80034b2:	2301      	movs	r3, #1
 80034b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80034ba:	2302      	movs	r3, #2
 80034bc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80034be:	f107 030c 	add.w	r3, r7, #12
 80034c2:	4619      	mov	r1, r3
 80034c4:	4827      	ldr	r0, [pc, #156]	@ (8003564 <LCD_IO_Init+0xe8>)
 80034c6:	f001 fd1b 	bl	8004f00 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	4b24      	ldr	r3, [pc, #144]	@ (8003560 <LCD_IO_Init+0xe4>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	4a23      	ldr	r2, [pc, #140]	@ (8003560 <LCD_IO_Init+0xe4>)
 80034d4:	f043 0308 	orr.w	r3, r3, #8
 80034d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034da:	4b21      	ldr	r3, [pc, #132]	@ (8003560 <LCD_IO_Init+0xe4>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	607b      	str	r3, [r7, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80034e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80034ec:	2301      	movs	r3, #1
 80034ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80034f4:	2302      	movs	r3, #2
 80034f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80034f8:	f107 030c 	add.w	r3, r7, #12
 80034fc:	4619      	mov	r1, r3
 80034fe:	4819      	ldr	r0, [pc, #100]	@ (8003564 <LCD_IO_Init+0xe8>)
 8003500:	f001 fcfe 	bl	8004f00 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003504:	2300      	movs	r3, #0
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	4b15      	ldr	r3, [pc, #84]	@ (8003560 <LCD_IO_Init+0xe4>)
 800350a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350c:	4a14      	ldr	r2, [pc, #80]	@ (8003560 <LCD_IO_Init+0xe4>)
 800350e:	f043 0304 	orr.w	r3, r3, #4
 8003512:	6313      	str	r3, [r2, #48]	@ 0x30
 8003514:	4b12      	ldr	r3, [pc, #72]	@ (8003560 <LCD_IO_Init+0xe4>)
 8003516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	603b      	str	r3, [r7, #0]
 800351e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003520:	2304      	movs	r3, #4
 8003522:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003524:	2301      	movs	r3, #1
 8003526:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800352c:	2302      	movs	r3, #2
 800352e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003530:	f107 030c 	add.w	r3, r7, #12
 8003534:	4619      	mov	r1, r3
 8003536:	480c      	ldr	r0, [pc, #48]	@ (8003568 <LCD_IO_Init+0xec>)
 8003538:	f001 fce2 	bl	8004f00 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 800353c:	2200      	movs	r2, #0
 800353e:	2104      	movs	r1, #4
 8003540:	4809      	ldr	r0, [pc, #36]	@ (8003568 <LCD_IO_Init+0xec>)
 8003542:	f001 ff95 	bl	8005470 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003546:	2201      	movs	r2, #1
 8003548:	2104      	movs	r1, #4
 800354a:	4807      	ldr	r0, [pc, #28]	@ (8003568 <LCD_IO_Init+0xec>)
 800354c:	f001 ff90 	bl	8005470 <HAL_GPIO_WritePin>

    SPI_Init();
 8003550:	f7ff fef6 	bl	8003340 <SPI_Init>
  }
}
 8003554:	bf00      	nop
 8003556:	3720      	adds	r7, #32
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20025bf8 	.word	0x20025bf8
 8003560:	40023800 	.word	0x40023800
 8003564:	40020c00 	.word	0x40020c00
 8003568:	40020800 	.word	0x40020800

0800356c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003576:	2201      	movs	r2, #1
 8003578:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800357c:	480a      	ldr	r0, [pc, #40]	@ (80035a8 <LCD_IO_WriteData+0x3c>)
 800357e:	f001 ff77 	bl	8005470 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8003582:	2200      	movs	r2, #0
 8003584:	2104      	movs	r1, #4
 8003586:	4809      	ldr	r0, [pc, #36]	@ (80035ac <LCD_IO_WriteData+0x40>)
 8003588:	f001 ff72 	bl	8005470 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 800358c:	88fb      	ldrh	r3, [r7, #6]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff ff10 	bl	80033b4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003594:	2201      	movs	r2, #1
 8003596:	2104      	movs	r1, #4
 8003598:	4804      	ldr	r0, [pc, #16]	@ (80035ac <LCD_IO_WriteData+0x40>)
 800359a:	f001 ff69 	bl	8005470 <HAL_GPIO_WritePin>
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40020c00 	.word	0x40020c00
 80035ac:	40020800 	.word	0x40020800

080035b0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80035ba:	2200      	movs	r2, #0
 80035bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80035c0:	480a      	ldr	r0, [pc, #40]	@ (80035ec <LCD_IO_WriteReg+0x3c>)
 80035c2:	f001 ff55 	bl	8005470 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80035c6:	2200      	movs	r2, #0
 80035c8:	2104      	movs	r1, #4
 80035ca:	4809      	ldr	r0, [pc, #36]	@ (80035f0 <LCD_IO_WriteReg+0x40>)
 80035cc:	f001 ff50 	bl	8005470 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff feed 	bl	80033b4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80035da:	2201      	movs	r2, #1
 80035dc:	2104      	movs	r1, #4
 80035de:	4804      	ldr	r0, [pc, #16]	@ (80035f0 <LCD_IO_WriteReg+0x40>)
 80035e0:	f001 ff46 	bl	8005470 <HAL_GPIO_WritePin>
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40020c00 	.word	0x40020c00
 80035f0:	40020800 	.word	0x40020800

080035f4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f001 fad3 	bl	8004ba8 <HAL_Delay>
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800360e:	f001 fa59 	bl	8004ac4 <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  //SystemClock_Config();
  SystemClockOverride();
 8003612:	f000 fb9d 	bl	8003d50 <SystemClockOverride>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003616:	f000 f9ed 	bl	80039f4 <MX_GPIO_Init>
  MX_I2C3_Init();
 800361a:	f000 f815 	bl	8003648 <MX_I2C3_Init>
  MX_LTDC_Init();
 800361e:	f000 f853 	bl	80036c8 <MX_LTDC_Init>
  MX_SPI5_Init();
 8003622:	f000 f917 	bl	8003854 <MX_SPI5_Init>
  MX_RNG_Init();
 8003626:	f000 f901 	bl	800382c <MX_RNG_Init>
  MX_TIM2_Init();
 800362a:	f000 f949 	bl	80038c0 <MX_TIM2_Init>
  MX_TIM5_Init();
 800362e:	f000 f993 	bl	8003958 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit();
 8003632:	f7fc ff53 	bl	80004dc <ApplicationInit>
  Application_game_inst();
 8003636:	f7fc ff6b 	bl	8000510 <Application_game_inst>
  HAL_Delay(5000);
 800363a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800363e:	f001 fab3 	bl	8004ba8 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003642:	bf00      	nop
 8003644:	e7fd      	b.n	8003642 <main+0x38>
	...

08003648 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800364c:	4b1b      	ldr	r3, [pc, #108]	@ (80036bc <MX_I2C3_Init+0x74>)
 800364e:	4a1c      	ldr	r2, [pc, #112]	@ (80036c0 <MX_I2C3_Init+0x78>)
 8003650:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003652:	4b1a      	ldr	r3, [pc, #104]	@ (80036bc <MX_I2C3_Init+0x74>)
 8003654:	4a1b      	ldr	r2, [pc, #108]	@ (80036c4 <MX_I2C3_Init+0x7c>)
 8003656:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003658:	4b18      	ldr	r3, [pc, #96]	@ (80036bc <MX_I2C3_Init+0x74>)
 800365a:	2200      	movs	r2, #0
 800365c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <MX_I2C3_Init+0x74>)
 8003660:	2200      	movs	r2, #0
 8003662:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003664:	4b15      	ldr	r3, [pc, #84]	@ (80036bc <MX_I2C3_Init+0x74>)
 8003666:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800366a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800366c:	4b13      	ldr	r3, [pc, #76]	@ (80036bc <MX_I2C3_Init+0x74>)
 800366e:	2200      	movs	r2, #0
 8003670:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <MX_I2C3_Init+0x74>)
 8003674:	2200      	movs	r2, #0
 8003676:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003678:	4b10      	ldr	r3, [pc, #64]	@ (80036bc <MX_I2C3_Init+0x74>)
 800367a:	2200      	movs	r2, #0
 800367c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800367e:	4b0f      	ldr	r3, [pc, #60]	@ (80036bc <MX_I2C3_Init+0x74>)
 8003680:	2200      	movs	r2, #0
 8003682:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003684:	480d      	ldr	r0, [pc, #52]	@ (80036bc <MX_I2C3_Init+0x74>)
 8003686:	f001 ff0d 	bl	80054a4 <HAL_I2C_Init>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003690:	f000 fbb0 	bl	8003df4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003694:	2100      	movs	r1, #0
 8003696:	4809      	ldr	r0, [pc, #36]	@ (80036bc <MX_I2C3_Init+0x74>)
 8003698:	f002 ff28 	bl	80064ec <HAL_I2CEx_ConfigAnalogFilter>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80036a2:	f000 fba7 	bl	8003df4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80036a6:	2100      	movs	r1, #0
 80036a8:	4804      	ldr	r0, [pc, #16]	@ (80036bc <MX_I2C3_Init+0x74>)
 80036aa:	f002 ff5b 	bl	8006564 <HAL_I2CEx_ConfigDigitalFilter>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80036b4:	f000 fb9e 	bl	8003df4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80036b8:	bf00      	nop
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	20025bfc 	.word	0x20025bfc
 80036c0:	40005c00 	.word	0x40005c00
 80036c4:	000186a0 	.word	0x000186a0

080036c8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b09a      	sub	sp, #104	@ 0x68
 80036cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80036ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80036d2:	2234      	movs	r2, #52	@ 0x34
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f004 fe50 	bl	800837c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80036dc:	463b      	mov	r3, r7
 80036de:	2234      	movs	r2, #52	@ 0x34
 80036e0:	2100      	movs	r1, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f004 fe4a 	bl	800837c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80036e8:	4b4e      	ldr	r3, [pc, #312]	@ (8003824 <MX_LTDC_Init+0x15c>)
 80036ea:	4a4f      	ldr	r2, [pc, #316]	@ (8003828 <MX_LTDC_Init+0x160>)
 80036ec:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80036ee:	4b4d      	ldr	r3, [pc, #308]	@ (8003824 <MX_LTDC_Init+0x15c>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80036f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003824 <MX_LTDC_Init+0x15c>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80036fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003824 <MX_LTDC_Init+0x15c>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003700:	4b48      	ldr	r3, [pc, #288]	@ (8003824 <MX_LTDC_Init+0x15c>)
 8003702:	2200      	movs	r2, #0
 8003704:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8003706:	4b47      	ldr	r3, [pc, #284]	@ (8003824 <MX_LTDC_Init+0x15c>)
 8003708:	2207      	movs	r2, #7
 800370a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800370c:	4b45      	ldr	r3, [pc, #276]	@ (8003824 <MX_LTDC_Init+0x15c>)
 800370e:	2203      	movs	r2, #3
 8003710:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8003712:	4b44      	ldr	r3, [pc, #272]	@ (8003824 <MX_LTDC_Init+0x15c>)
 8003714:	220e      	movs	r2, #14
 8003716:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8003718:	4b42      	ldr	r3, [pc, #264]	@ (8003824 <MX_LTDC_Init+0x15c>)
 800371a:	2205      	movs	r2, #5
 800371c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800371e:	4b41      	ldr	r3, [pc, #260]	@ (8003824 <MX_LTDC_Init+0x15c>)
 8003720:	f240 228e 	movw	r2, #654	@ 0x28e
 8003724:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8003726:	4b3f      	ldr	r3, [pc, #252]	@ (8003824 <MX_LTDC_Init+0x15c>)
 8003728:	f240 12e5 	movw	r2, #485	@ 0x1e5
 800372c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 800372e:	4b3d      	ldr	r3, [pc, #244]	@ (8003824 <MX_LTDC_Init+0x15c>)
 8003730:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8003734:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8003736:	4b3b      	ldr	r3, [pc, #236]	@ (8003824 <MX_LTDC_Init+0x15c>)
 8003738:	f240 12e7 	movw	r2, #487	@ 0x1e7
 800373c:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800373e:	4b39      	ldr	r3, [pc, #228]	@ (8003824 <MX_LTDC_Init+0x15c>)
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003746:	4b37      	ldr	r3, [pc, #220]	@ (8003824 <MX_LTDC_Init+0x15c>)
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800374e:	4b35      	ldr	r3, [pc, #212]	@ (8003824 <MX_LTDC_Init+0x15c>)
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003756:	4833      	ldr	r0, [pc, #204]	@ (8003824 <MX_LTDC_Init+0x15c>)
 8003758:	f002 ff44 	bl	80065e4 <HAL_LTDC_Init>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8003762:	f000 fb47 	bl	8003df4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003766:	2300      	movs	r3, #0
 8003768:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003776:	2300      	movs	r3, #0
 8003778:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800377a:	2300      	movs	r3, #0
 800377c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800377e:	2300      	movs	r3, #0
 8003780:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003786:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003788:	2305      	movs	r3, #5
 800378a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8003790:	2300      	movs	r3, #0
 8003792:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80037aa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80037ae:	2200      	movs	r2, #0
 80037b0:	4619      	mov	r1, r3
 80037b2:	481c      	ldr	r0, [pc, #112]	@ (8003824 <MX_LTDC_Init+0x15c>)
 80037b4:	f002 ffe6 	bl	8006784 <HAL_LTDC_ConfigLayer>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80037be:	f000 fb19 	bl	8003df4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80037ca:	2300      	movs	r3, #0
 80037cc:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80037de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037e2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80037e4:	2305      	movs	r3, #5
 80037e6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80037ec:	2300      	movs	r3, #0
 80037ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8003806:	463b      	mov	r3, r7
 8003808:	2201      	movs	r2, #1
 800380a:	4619      	mov	r1, r3
 800380c:	4805      	ldr	r0, [pc, #20]	@ (8003824 <MX_LTDC_Init+0x15c>)
 800380e:	f002 ffb9 	bl	8006784 <HAL_LTDC_ConfigLayer>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8003818:	f000 faec 	bl	8003df4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800381c:	bf00      	nop
 800381e:	3768      	adds	r7, #104	@ 0x68
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20025c50 	.word	0x20025c50
 8003828:	40016800 	.word	0x40016800

0800382c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003830:	4b06      	ldr	r3, [pc, #24]	@ (800384c <MX_RNG_Init+0x20>)
 8003832:	4a07      	ldr	r2, [pc, #28]	@ (8003850 <MX_RNG_Init+0x24>)
 8003834:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003836:	4805      	ldr	r0, [pc, #20]	@ (800384c <MX_RNG_Init+0x20>)
 8003838:	f003 ffbe 	bl	80077b8 <HAL_RNG_Init>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8003842:	f000 fad7 	bl	8003df4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20025cf8 	.word	0x20025cf8
 8003850:	50060800 	.word	0x50060800

08003854 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8003858:	4b17      	ldr	r3, [pc, #92]	@ (80038b8 <MX_SPI5_Init+0x64>)
 800385a:	4a18      	ldr	r2, [pc, #96]	@ (80038bc <MX_SPI5_Init+0x68>)
 800385c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800385e:	4b16      	ldr	r3, [pc, #88]	@ (80038b8 <MX_SPI5_Init+0x64>)
 8003860:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003864:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003866:	4b14      	ldr	r3, [pc, #80]	@ (80038b8 <MX_SPI5_Init+0x64>)
 8003868:	2200      	movs	r2, #0
 800386a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800386c:	4b12      	ldr	r3, [pc, #72]	@ (80038b8 <MX_SPI5_Init+0x64>)
 800386e:	2200      	movs	r2, #0
 8003870:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003872:	4b11      	ldr	r3, [pc, #68]	@ (80038b8 <MX_SPI5_Init+0x64>)
 8003874:	2200      	movs	r2, #0
 8003876:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003878:	4b0f      	ldr	r3, [pc, #60]	@ (80038b8 <MX_SPI5_Init+0x64>)
 800387a:	2200      	movs	r2, #0
 800387c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800387e:	4b0e      	ldr	r3, [pc, #56]	@ (80038b8 <MX_SPI5_Init+0x64>)
 8003880:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003884:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003886:	4b0c      	ldr	r3, [pc, #48]	@ (80038b8 <MX_SPI5_Init+0x64>)
 8003888:	2200      	movs	r2, #0
 800388a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800388c:	4b0a      	ldr	r3, [pc, #40]	@ (80038b8 <MX_SPI5_Init+0x64>)
 800388e:	2200      	movs	r2, #0
 8003890:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003892:	4b09      	ldr	r3, [pc, #36]	@ (80038b8 <MX_SPI5_Init+0x64>)
 8003894:	2200      	movs	r2, #0
 8003896:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003898:	4b07      	ldr	r3, [pc, #28]	@ (80038b8 <MX_SPI5_Init+0x64>)
 800389a:	2200      	movs	r2, #0
 800389c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800389e:	4b06      	ldr	r3, [pc, #24]	@ (80038b8 <MX_SPI5_Init+0x64>)
 80038a0:	220a      	movs	r2, #10
 80038a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80038a4:	4804      	ldr	r0, [pc, #16]	@ (80038b8 <MX_SPI5_Init+0x64>)
 80038a6:	f003 ffb1 	bl	800780c <HAL_SPI_Init>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80038b0:	f000 faa0 	bl	8003df4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80038b4:	bf00      	nop
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20025d08 	.word	0x20025d08
 80038bc:	40015000 	.word	0x40015000

080038c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038c6:	f107 0308 	add.w	r3, r7, #8
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038d4:	463b      	mov	r3, r7
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003954 <MX_TIM2_Init+0x94>)
 80038de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80038e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80038e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003954 <MX_TIM2_Init+0x94>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003954 <MX_TIM2_Init+0x94>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80038f0:	4b18      	ldr	r3, [pc, #96]	@ (8003954 <MX_TIM2_Init+0x94>)
 80038f2:	f04f 32ff 	mov.w	r2, #4294967295
 80038f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038f8:	4b16      	ldr	r3, [pc, #88]	@ (8003954 <MX_TIM2_Init+0x94>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038fe:	4b15      	ldr	r3, [pc, #84]	@ (8003954 <MX_TIM2_Init+0x94>)
 8003900:	2200      	movs	r2, #0
 8003902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003904:	4813      	ldr	r0, [pc, #76]	@ (8003954 <MX_TIM2_Init+0x94>)
 8003906:	f004 fa61 	bl	8007dcc <HAL_TIM_Base_Init>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003910:	f000 fa70 	bl	8003df4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003914:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003918:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800391a:	f107 0308 	add.w	r3, r7, #8
 800391e:	4619      	mov	r1, r3
 8003920:	480c      	ldr	r0, [pc, #48]	@ (8003954 <MX_TIM2_Init+0x94>)
 8003922:	f004 faa2 	bl	8007e6a <HAL_TIM_ConfigClockSource>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800392c:	f000 fa62 	bl	8003df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003930:	2300      	movs	r3, #0
 8003932:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003934:	2300      	movs	r3, #0
 8003936:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003938:	463b      	mov	r3, r7
 800393a:	4619      	mov	r1, r3
 800393c:	4805      	ldr	r0, [pc, #20]	@ (8003954 <MX_TIM2_Init+0x94>)
 800393e:	f004 fca1 	bl	8008284 <HAL_TIMEx_MasterConfigSynchronization>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003948:	f000 fa54 	bl	8003df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800394c:	bf00      	nop
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20025d60 	.word	0x20025d60

08003958 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800395e:	f107 0308 	add.w	r3, r7, #8
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	605a      	str	r2, [r3, #4]
 8003968:	609a      	str	r2, [r3, #8]
 800396a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800396c:	463b      	mov	r3, r7
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003974:	4b1d      	ldr	r3, [pc, #116]	@ (80039ec <MX_TIM5_Init+0x94>)
 8003976:	4a1e      	ldr	r2, [pc, #120]	@ (80039f0 <MX_TIM5_Init+0x98>)
 8003978:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800397a:	4b1c      	ldr	r3, [pc, #112]	@ (80039ec <MX_TIM5_Init+0x94>)
 800397c:	2200      	movs	r2, #0
 800397e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003980:	4b1a      	ldr	r3, [pc, #104]	@ (80039ec <MX_TIM5_Init+0x94>)
 8003982:	2200      	movs	r2, #0
 8003984:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003986:	4b19      	ldr	r3, [pc, #100]	@ (80039ec <MX_TIM5_Init+0x94>)
 8003988:	f04f 32ff 	mov.w	r2, #4294967295
 800398c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800398e:	4b17      	ldr	r3, [pc, #92]	@ (80039ec <MX_TIM5_Init+0x94>)
 8003990:	2200      	movs	r2, #0
 8003992:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003994:	4b15      	ldr	r3, [pc, #84]	@ (80039ec <MX_TIM5_Init+0x94>)
 8003996:	2200      	movs	r2, #0
 8003998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800399a:	4814      	ldr	r0, [pc, #80]	@ (80039ec <MX_TIM5_Init+0x94>)
 800399c:	f004 fa16 	bl	8007dcc <HAL_TIM_Base_Init>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80039a6:	f000 fa25 	bl	8003df4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80039b0:	f107 0308 	add.w	r3, r7, #8
 80039b4:	4619      	mov	r1, r3
 80039b6:	480d      	ldr	r0, [pc, #52]	@ (80039ec <MX_TIM5_Init+0x94>)
 80039b8:	f004 fa57 	bl	8007e6a <HAL_TIM_ConfigClockSource>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80039c2:	f000 fa17 	bl	8003df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039c6:	2300      	movs	r3, #0
 80039c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039ca:	2300      	movs	r3, #0
 80039cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80039ce:	463b      	mov	r3, r7
 80039d0:	4619      	mov	r1, r3
 80039d2:	4806      	ldr	r0, [pc, #24]	@ (80039ec <MX_TIM5_Init+0x94>)
 80039d4:	f004 fc56 	bl	8008284 <HAL_TIMEx_MasterConfigSynchronization>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80039de:	f000 fa09 	bl	8003df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80039e2:	bf00      	nop
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20025da8 	.word	0x20025da8
 80039f0:	40000c00 	.word	0x40000c00

080039f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08e      	sub	sp, #56	@ 0x38
 80039f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	605a      	str	r2, [r3, #4]
 8003a04:	609a      	str	r2, [r3, #8]
 8003a06:	60da      	str	r2, [r3, #12]
 8003a08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	623b      	str	r3, [r7, #32]
 8003a0e:	4bb2      	ldr	r3, [pc, #712]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	4ab1      	ldr	r2, [pc, #708]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003a14:	f043 0304 	orr.w	r3, r3, #4
 8003a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a1a:	4baf      	ldr	r3, [pc, #700]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	623b      	str	r3, [r7, #32]
 8003a24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	4bab      	ldr	r3, [pc, #684]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2e:	4aaa      	ldr	r2, [pc, #680]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003a30:	f043 0320 	orr.w	r3, r3, #32
 8003a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a36:	4ba8      	ldr	r3, [pc, #672]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	4ba4      	ldr	r3, [pc, #656]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4a:	4aa3      	ldr	r2, [pc, #652]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003a4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a52:	4ba1      	ldr	r3, [pc, #644]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a5a:	61bb      	str	r3, [r7, #24]
 8003a5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	4b9d      	ldr	r3, [pc, #628]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a66:	4a9c      	ldr	r2, [pc, #624]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a6e:	4b9a      	ldr	r3, [pc, #616]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	4b96      	ldr	r3, [pc, #600]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a82:	4a95      	ldr	r2, [pc, #596]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003a84:	f043 0302 	orr.w	r3, r3, #2
 8003a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a8a:	4b93      	ldr	r3, [pc, #588]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	4b8f      	ldr	r3, [pc, #572]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9e:	4a8e      	ldr	r2, [pc, #568]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003aa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aa6:	4b8c      	ldr	r3, [pc, #560]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	4b88      	ldr	r3, [pc, #544]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aba:	4a87      	ldr	r2, [pc, #540]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003abc:	f043 0310 	orr.w	r3, r3, #16
 8003ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ac2:	4b85      	ldr	r3, [pc, #532]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	607b      	str	r3, [r7, #4]
 8003ad2:	4b81      	ldr	r3, [pc, #516]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad6:	4a80      	ldr	r2, [pc, #512]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003ad8:	f043 0308 	orr.w	r3, r3, #8
 8003adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ade:	4b7e      	ldr	r3, [pc, #504]	@ (8003cd8 <MX_GPIO_Init+0x2e4>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8003aea:	2200      	movs	r2, #0
 8003aec:	2116      	movs	r1, #22
 8003aee:	487b      	ldr	r0, [pc, #492]	@ (8003cdc <MX_GPIO_Init+0x2e8>)
 8003af0:	f001 fcbe 	bl	8005470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8003af4:	2200      	movs	r2, #0
 8003af6:	2180      	movs	r1, #128	@ 0x80
 8003af8:	4879      	ldr	r0, [pc, #484]	@ (8003ce0 <MX_GPIO_Init+0x2ec>)
 8003afa:	f001 fcb9 	bl	8005470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8003afe:	2200      	movs	r2, #0
 8003b00:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8003b04:	4877      	ldr	r0, [pc, #476]	@ (8003ce4 <MX_GPIO_Init+0x2f0>)
 8003b06:	f001 fcb3 	bl	8005470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8003b10:	4875      	ldr	r0, [pc, #468]	@ (8003ce8 <MX_GPIO_Init+0x2f4>)
 8003b12:	f001 fcad 	bl	8005470 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8003b16:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003b1a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b24:	2303      	movs	r3, #3
 8003b26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b28:	230c      	movs	r3, #12
 8003b2a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b30:	4619      	mov	r1, r3
 8003b32:	486e      	ldr	r0, [pc, #440]	@ (8003cec <MX_GPIO_Init+0x2f8>)
 8003b34:	f001 f9e4 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b44:	2303      	movs	r3, #3
 8003b46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b48:	230c      	movs	r3, #12
 8003b4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8003b4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b50:	4619      	mov	r1, r3
 8003b52:	4862      	ldr	r0, [pc, #392]	@ (8003cdc <MX_GPIO_Init+0x2e8>)
 8003b54:	f001 f9d4 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8003b58:	2316      	movs	r3, #22
 8003b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b64:	2300      	movs	r3, #0
 8003b66:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	485b      	ldr	r0, [pc, #364]	@ (8003cdc <MX_GPIO_Init+0x2e8>)
 8003b70:	f001 f9c6 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8003b74:	f248 0307 	movw	r3, #32775	@ 0x8007
 8003b78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003b7a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4855      	ldr	r0, [pc, #340]	@ (8003ce0 <MX_GPIO_Init+0x2ec>)
 8003b8c:	f001 f9b8 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8003b90:	2380      	movs	r3, #128	@ 0x80
 8003b92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b94:	2301      	movs	r3, #1
 8003b96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8003ba0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	484e      	ldr	r0, [pc, #312]	@ (8003ce0 <MX_GPIO_Init+0x2ec>)
 8003ba8:	f001 f9aa 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8003bac:	2320      	movs	r3, #32
 8003bae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003bb0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8003bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4846      	ldr	r0, [pc, #280]	@ (8003cdc <MX_GPIO_Init+0x2e8>)
 8003bc2:	f001 f99d 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003bc6:	2304      	movs	r3, #4
 8003bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4845      	ldr	r0, [pc, #276]	@ (8003cf0 <MX_GPIO_Init+0x2fc>)
 8003bda:	f001 f991 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8003bde:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003be2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be4:	2302      	movs	r3, #2
 8003be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bec:	2303      	movs	r3, #3
 8003bee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003bf0:	230c      	movs	r3, #12
 8003bf2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	483b      	ldr	r0, [pc, #236]	@ (8003ce8 <MX_GPIO_Init+0x2f4>)
 8003bfc:	f001 f980 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8003c00:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003c04:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c06:	2302      	movs	r3, #2
 8003c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c12:	230c      	movs	r3, #12
 8003c14:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4835      	ldr	r0, [pc, #212]	@ (8003cf4 <MX_GPIO_Init+0x300>)
 8003c1e:	f001 f96f 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8003c22:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c28:	2302      	movs	r3, #2
 8003c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c30:	2300      	movs	r3, #0
 8003c32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8003c34:	230c      	movs	r3, #12
 8003c36:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	482c      	ldr	r0, [pc, #176]	@ (8003cf0 <MX_GPIO_Init+0x2fc>)
 8003c40:	f001 f95e 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8003c44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8003c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c56:	4619      	mov	r1, r3
 8003c58:	4825      	ldr	r0, [pc, #148]	@ (8003cf0 <MX_GPIO_Init+0x2fc>)
 8003c5a:	f001 f951 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8003c5e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003c62:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c64:	2302      	movs	r3, #2
 8003c66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c70:	230c      	movs	r3, #12
 8003c72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c78:	4619      	mov	r1, r3
 8003c7a:	481a      	ldr	r0, [pc, #104]	@ (8003ce4 <MX_GPIO_Init+0x2f0>)
 8003c7c:	f001 f940 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8003c80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c86:	2300      	movs	r3, #0
 8003c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8003c8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c92:	4619      	mov	r1, r3
 8003c94:	4813      	ldr	r0, [pc, #76]	@ (8003ce4 <MX_GPIO_Init+0x2f0>)
 8003c96:	f001 f933 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8003c9a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	480c      	ldr	r0, [pc, #48]	@ (8003ce4 <MX_GPIO_Init+0x2f0>)
 8003cb4:	f001 f924 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003cb8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003cca:	2307      	movs	r3, #7
 8003ccc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	e010      	b.n	8003cf8 <MX_GPIO_Init+0x304>
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40020800 	.word	0x40020800
 8003ce0:	40020000 	.word	0x40020000
 8003ce4:	40020c00 	.word	0x40020c00
 8003ce8:	40021800 	.word	0x40021800
 8003cec:	40021400 	.word	0x40021400
 8003cf0:	40020400 	.word	0x40020400
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	4812      	ldr	r0, [pc, #72]	@ (8003d44 <MX_GPIO_Init+0x350>)
 8003cfa:	f001 f901 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8003cfe:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8003d02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d04:	2301      	movs	r3, #1
 8003d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d14:	4619      	mov	r1, r3
 8003d16:	480c      	ldr	r0, [pc, #48]	@ (8003d48 <MX_GPIO_Init+0x354>)
 8003d18:	f001 f8f2 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8003d1c:	2360      	movs	r3, #96	@ 0x60
 8003d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d20:	2302      	movs	r3, #2
 8003d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003d2c:	230c      	movs	r3, #12
 8003d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d34:	4619      	mov	r1, r3
 8003d36:	4805      	ldr	r0, [pc, #20]	@ (8003d4c <MX_GPIO_Init+0x358>)
 8003d38:	f001 f8e2 	bl	8004f00 <HAL_GPIO_Init>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d3c:	bf00      	nop
 8003d3e:	3738      	adds	r7, #56	@ 0x38
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40020000 	.word	0x40020000
 8003d48:	40021800 	.word	0x40021800
 8003d4c:	40020400 	.word	0x40020400

08003d50 <SystemClockOverride>:

/* USER CODE BEGIN 4 */
void SystemClockOverride(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b094      	sub	sp, #80	@ 0x50
 8003d54:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	4b24      	ldr	r3, [pc, #144]	@ (8003dec <SystemClockOverride+0x9c>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	4a23      	ldr	r2, [pc, #140]	@ (8003dec <SystemClockOverride+0x9c>)
 8003d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d66:	4b21      	ldr	r3, [pc, #132]	@ (8003dec <SystemClockOverride+0x9c>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.
 8003d72:	2300      	movs	r3, #0
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	4b1e      	ldr	r3, [pc, #120]	@ (8003df0 <SystemClockOverride+0xa0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003df0 <SystemClockOverride+0xa0>)
 8003d7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	4b1b      	ldr	r3, [pc, #108]	@ (8003df0 <SystemClockOverride+0xa0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003d8a:	607b      	str	r3, [r7, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d96:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d98:	2302      	movs	r3, #2
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d9c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003da0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003da2:	2308      	movs	r3, #8
 8003da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003da6:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003daa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003dac:	2302      	movs	r3, #2
 8003dae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003db0:	2307      	movs	r3, #7
 8003db2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003db4:	f107 030c 	add.w	r3, r7, #12
 8003db8:	4618      	mov	r0, r3
 8003dba:	f002 feb9 	bl	8006b30 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003dbe:	230f      	movs	r3, #15
 8003dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003dca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003dce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003dd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8003dd6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003dda:	2105      	movs	r1, #5
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f003 f91f 	bl	8007020 <HAL_RCC_ClockConfig>
}
 8003de2:	bf00      	nop
 8003de4:	3750      	adds	r7, #80	@ 0x50
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40023800 	.word	0x40023800
 8003df0:	40007000 	.word	0x40007000

08003df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003df8:	b672      	cpsid	i
}
 8003dfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003dfc:	bf00      	nop
 8003dfe:	e7fd      	b.n	8003dfc <Error_Handler+0x8>

08003e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	607b      	str	r3, [r7, #4]
 8003e0a:	4b10      	ldr	r3, [pc, #64]	@ (8003e4c <HAL_MspInit+0x4c>)
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0e:	4a0f      	ldr	r2, [pc, #60]	@ (8003e4c <HAL_MspInit+0x4c>)
 8003e10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e16:	4b0d      	ldr	r3, [pc, #52]	@ (8003e4c <HAL_MspInit+0x4c>)
 8003e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e1e:	607b      	str	r3, [r7, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	603b      	str	r3, [r7, #0]
 8003e26:	4b09      	ldr	r3, [pc, #36]	@ (8003e4c <HAL_MspInit+0x4c>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	4a08      	ldr	r2, [pc, #32]	@ (8003e4c <HAL_MspInit+0x4c>)
 8003e2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e32:	4b06      	ldr	r3, [pc, #24]	@ (8003e4c <HAL_MspInit+0x4c>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003e3e:	2007      	movs	r0, #7
 8003e40:	f000 ffe8 	bl	8004e14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40023800 	.word	0x40023800

08003e50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08a      	sub	sp, #40	@ 0x28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e58:	f107 0314 	add.w	r3, r7, #20
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	605a      	str	r2, [r3, #4]
 8003e62:	609a      	str	r2, [r3, #8]
 8003e64:	60da      	str	r2, [r3, #12]
 8003e66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a29      	ldr	r2, [pc, #164]	@ (8003f14 <HAL_I2C_MspInit+0xc4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d14b      	bne.n	8003f0a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	4b28      	ldr	r3, [pc, #160]	@ (8003f18 <HAL_I2C_MspInit+0xc8>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7a:	4a27      	ldr	r2, [pc, #156]	@ (8003f18 <HAL_I2C_MspInit+0xc8>)
 8003e7c:	f043 0304 	orr.w	r3, r3, #4
 8003e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e82:	4b25      	ldr	r3, [pc, #148]	@ (8003f18 <HAL_I2C_MspInit+0xc8>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	613b      	str	r3, [r7, #16]
 8003e8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	4b21      	ldr	r3, [pc, #132]	@ (8003f18 <HAL_I2C_MspInit+0xc8>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e96:	4a20      	ldr	r2, [pc, #128]	@ (8003f18 <HAL_I2C_MspInit+0xc8>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f18 <HAL_I2C_MspInit+0xc8>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003eaa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003eb0:	2312      	movs	r3, #18
 8003eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003ebc:	2304      	movs	r3, #4
 8003ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003ec0:	f107 0314 	add.w	r3, r7, #20
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4815      	ldr	r0, [pc, #84]	@ (8003f1c <HAL_I2C_MspInit+0xcc>)
 8003ec8:	f001 f81a 	bl	8004f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003ecc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ed2:	2312      	movs	r3, #18
 8003ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eda:	2300      	movs	r3, #0
 8003edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003ede:	2304      	movs	r3, #4
 8003ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003ee2:	f107 0314 	add.w	r3, r7, #20
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	480d      	ldr	r0, [pc, #52]	@ (8003f20 <HAL_I2C_MspInit+0xd0>)
 8003eea:	f001 f809 	bl	8004f00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	4b09      	ldr	r3, [pc, #36]	@ (8003f18 <HAL_I2C_MspInit+0xc8>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef6:	4a08      	ldr	r2, [pc, #32]	@ (8003f18 <HAL_I2C_MspInit+0xc8>)
 8003ef8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003efe:	4b06      	ldr	r3, [pc, #24]	@ (8003f18 <HAL_I2C_MspInit+0xc8>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003f0a:	bf00      	nop
 8003f0c:	3728      	adds	r7, #40	@ 0x28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	40005c00 	.word	0x40005c00
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	40020800 	.word	0x40020800
 8003f20:	40020000 	.word	0x40020000

08003f24 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b09a      	sub	sp, #104	@ 0x68
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	60da      	str	r2, [r3, #12]
 8003f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f40:	2230      	movs	r2, #48	@ 0x30
 8003f42:	2100      	movs	r1, #0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f004 fa19 	bl	800837c <memset>
  if(hltdc->Instance==LTDC)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a81      	ldr	r2, [pc, #516]	@ (8004154 <HAL_LTDC_MspInit+0x230>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	f040 80fa 	bne.w	800414a <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003f56:	2308      	movs	r3, #8
 8003f58:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8003f5a:	2332      	movs	r3, #50	@ 0x32
 8003f5c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003f62:	2300      	movs	r3, #0
 8003f64:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f003 fa64 	bl	8007438 <HAL_RCCEx_PeriphCLKConfig>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8003f76:	f7ff ff3d 	bl	8003df4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	623b      	str	r3, [r7, #32]
 8003f7e:	4b76      	ldr	r3, [pc, #472]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 8003f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f82:	4a75      	ldr	r2, [pc, #468]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 8003f84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f8a:	4b73      	ldr	r3, [pc, #460]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f92:	623b      	str	r3, [r7, #32]
 8003f94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	4b6f      	ldr	r3, [pc, #444]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	4a6e      	ldr	r2, [pc, #440]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 8003fa0:	f043 0320 	orr.w	r3, r3, #32
 8003fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fa6:	4b6c      	ldr	r3, [pc, #432]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	61fb      	str	r3, [r7, #28]
 8003fb0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61bb      	str	r3, [r7, #24]
 8003fb6:	4b68      	ldr	r3, [pc, #416]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fba:	4a67      	ldr	r2, [pc, #412]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fc2:	4b65      	ldr	r3, [pc, #404]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	61bb      	str	r3, [r7, #24]
 8003fcc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	4b61      	ldr	r3, [pc, #388]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd6:	4a60      	ldr	r2, [pc, #384]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 8003fd8:	f043 0302 	orr.w	r3, r3, #2
 8003fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fde:	4b5e      	ldr	r3, [pc, #376]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	613b      	str	r3, [r7, #16]
 8003fee:	4b5a      	ldr	r3, [pc, #360]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff2:	4a59      	ldr	r2, [pc, #356]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 8003ff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ffa:	4b57      	ldr	r3, [pc, #348]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	4b53      	ldr	r3, [pc, #332]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400e:	4a52      	ldr	r2, [pc, #328]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 8004010:	f043 0304 	orr.w	r3, r3, #4
 8004014:	6313      	str	r3, [r2, #48]	@ 0x30
 8004016:	4b50      	ldr	r3, [pc, #320]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	4b4c      	ldr	r3, [pc, #304]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402a:	4a4b      	ldr	r2, [pc, #300]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 800402c:	f043 0308 	orr.w	r3, r3, #8
 8004030:	6313      	str	r3, [r2, #48]	@ 0x30
 8004032:	4b49      	ldr	r3, [pc, #292]	@ (8004158 <HAL_LTDC_MspInit+0x234>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800403e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004042:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004044:	2302      	movs	r3, #2
 8004046:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004048:	2300      	movs	r3, #0
 800404a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800404c:	2300      	movs	r3, #0
 800404e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004050:	230e      	movs	r3, #14
 8004052:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004054:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004058:	4619      	mov	r1, r3
 800405a:	4840      	ldr	r0, [pc, #256]	@ (800415c <HAL_LTDC_MspInit+0x238>)
 800405c:	f000 ff50 	bl	8004f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8004060:	f641 0358 	movw	r3, #6232	@ 0x1858
 8004064:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004066:	2302      	movs	r3, #2
 8004068:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406a:	2300      	movs	r3, #0
 800406c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800406e:	2300      	movs	r3, #0
 8004070:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004072:	230e      	movs	r3, #14
 8004074:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004076:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800407a:	4619      	mov	r1, r3
 800407c:	4838      	ldr	r0, [pc, #224]	@ (8004160 <HAL_LTDC_MspInit+0x23c>)
 800407e:	f000 ff3f 	bl	8004f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8004082:	2303      	movs	r3, #3
 8004084:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004086:	2302      	movs	r3, #2
 8004088:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408a:	2300      	movs	r3, #0
 800408c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800408e:	2300      	movs	r3, #0
 8004090:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004092:	2309      	movs	r3, #9
 8004094:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004096:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800409a:	4619      	mov	r1, r3
 800409c:	4831      	ldr	r0, [pc, #196]	@ (8004164 <HAL_LTDC_MspInit+0x240>)
 800409e:	f000 ff2f 	bl	8004f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80040a2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80040a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a8:	2302      	movs	r3, #2
 80040aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b0:	2300      	movs	r3, #0
 80040b2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80040b4:	230e      	movs	r3, #14
 80040b6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80040bc:	4619      	mov	r1, r3
 80040be:	4829      	ldr	r0, [pc, #164]	@ (8004164 <HAL_LTDC_MspInit+0x240>)
 80040c0:	f000 ff1e 	bl	8004f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80040c4:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80040c8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ca:	2302      	movs	r3, #2
 80040cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d2:	2300      	movs	r3, #0
 80040d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80040d6:	230e      	movs	r3, #14
 80040d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80040de:	4619      	mov	r1, r3
 80040e0:	4821      	ldr	r0, [pc, #132]	@ (8004168 <HAL_LTDC_MspInit+0x244>)
 80040e2:	f000 ff0d 	bl	8004f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80040e6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80040ea:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ec:	2302      	movs	r3, #2
 80040ee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f0:	2300      	movs	r3, #0
 80040f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f4:	2300      	movs	r3, #0
 80040f6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80040f8:	230e      	movs	r3, #14
 80040fa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004100:	4619      	mov	r1, r3
 8004102:	481a      	ldr	r0, [pc, #104]	@ (800416c <HAL_LTDC_MspInit+0x248>)
 8004104:	f000 fefc 	bl	8004f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8004108:	2348      	movs	r3, #72	@ 0x48
 800410a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800410c:	2302      	movs	r3, #2
 800410e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004110:	2300      	movs	r3, #0
 8004112:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004114:	2300      	movs	r3, #0
 8004116:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004118:	230e      	movs	r3, #14
 800411a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800411c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004120:	4619      	mov	r1, r3
 8004122:	4813      	ldr	r0, [pc, #76]	@ (8004170 <HAL_LTDC_MspInit+0x24c>)
 8004124:	f000 feec 	bl	8004f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8004128:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800412c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412e:	2302      	movs	r3, #2
 8004130:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004132:	2300      	movs	r3, #0
 8004134:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004136:	2300      	movs	r3, #0
 8004138:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800413a:	2309      	movs	r3, #9
 800413c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800413e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004142:	4619      	mov	r1, r3
 8004144:	4808      	ldr	r0, [pc, #32]	@ (8004168 <HAL_LTDC_MspInit+0x244>)
 8004146:	f000 fedb 	bl	8004f00 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800414a:	bf00      	nop
 800414c:	3768      	adds	r7, #104	@ 0x68
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40016800 	.word	0x40016800
 8004158:	40023800 	.word	0x40023800
 800415c:	40021400 	.word	0x40021400
 8004160:	40020000 	.word	0x40020000
 8004164:	40020400 	.word	0x40020400
 8004168:	40021800 	.word	0x40021800
 800416c:	40020800 	.word	0x40020800
 8004170:	40020c00 	.word	0x40020c00

08004174 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a0b      	ldr	r2, [pc, #44]	@ (80041b0 <HAL_RNG_MspInit+0x3c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d10d      	bne.n	80041a2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	4b0a      	ldr	r3, [pc, #40]	@ (80041b4 <HAL_RNG_MspInit+0x40>)
 800418c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800418e:	4a09      	ldr	r2, [pc, #36]	@ (80041b4 <HAL_RNG_MspInit+0x40>)
 8004190:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004194:	6353      	str	r3, [r2, #52]	@ 0x34
 8004196:	4b07      	ldr	r3, [pc, #28]	@ (80041b4 <HAL_RNG_MspInit+0x40>)
 8004198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	50060800 	.word	0x50060800
 80041b4:	40023800 	.word	0x40023800

080041b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08a      	sub	sp, #40	@ 0x28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c0:	f107 0314 	add.w	r3, r7, #20
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	605a      	str	r2, [r3, #4]
 80041ca:	609a      	str	r2, [r3, #8]
 80041cc:	60da      	str	r2, [r3, #12]
 80041ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a19      	ldr	r2, [pc, #100]	@ (800423c <HAL_SPI_MspInit+0x84>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d12c      	bne.n	8004234 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	4b18      	ldr	r3, [pc, #96]	@ (8004240 <HAL_SPI_MspInit+0x88>)
 80041e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e2:	4a17      	ldr	r2, [pc, #92]	@ (8004240 <HAL_SPI_MspInit+0x88>)
 80041e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80041ea:	4b15      	ldr	r3, [pc, #84]	@ (8004240 <HAL_SPI_MspInit+0x88>)
 80041ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	4b11      	ldr	r3, [pc, #68]	@ (8004240 <HAL_SPI_MspInit+0x88>)
 80041fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fe:	4a10      	ldr	r2, [pc, #64]	@ (8004240 <HAL_SPI_MspInit+0x88>)
 8004200:	f043 0320 	orr.w	r3, r3, #32
 8004204:	6313      	str	r3, [r2, #48]	@ 0x30
 8004206:	4b0e      	ldr	r3, [pc, #56]	@ (8004240 <HAL_SPI_MspInit+0x88>)
 8004208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8004212:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8004216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004218:	2302      	movs	r3, #2
 800421a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421c:	2300      	movs	r3, #0
 800421e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004220:	2300      	movs	r3, #0
 8004222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004224:	2305      	movs	r3, #5
 8004226:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004228:	f107 0314 	add.w	r3, r7, #20
 800422c:	4619      	mov	r1, r3
 800422e:	4805      	ldr	r0, [pc, #20]	@ (8004244 <HAL_SPI_MspInit+0x8c>)
 8004230:	f000 fe66 	bl	8004f00 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8004234:	bf00      	nop
 8004236:	3728      	adds	r7, #40	@ 0x28
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40015000 	.word	0x40015000
 8004240:	40023800 	.word	0x40023800
 8004244:	40021400 	.word	0x40021400

08004248 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a08      	ldr	r2, [pc, #32]	@ (8004278 <HAL_SPI_MspDeInit+0x30>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d10a      	bne.n	8004270 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800425a:	4b08      	ldr	r3, [pc, #32]	@ (800427c <HAL_SPI_MspDeInit+0x34>)
 800425c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425e:	4a07      	ldr	r2, [pc, #28]	@ (800427c <HAL_SPI_MspDeInit+0x34>)
 8004260:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004264:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8004266:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800426a:	4805      	ldr	r0, [pc, #20]	@ (8004280 <HAL_SPI_MspDeInit+0x38>)
 800426c:	f000 fff4 	bl	8005258 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40015000 	.word	0x40015000
 800427c:	40023800 	.word	0x40023800
 8004280:	40021400 	.word	0x40021400

08004284 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004294:	d10e      	bne.n	80042b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	4b13      	ldr	r3, [pc, #76]	@ (80042e8 <HAL_TIM_Base_MspInit+0x64>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429e:	4a12      	ldr	r2, [pc, #72]	@ (80042e8 <HAL_TIM_Base_MspInit+0x64>)
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80042a6:	4b10      	ldr	r3, [pc, #64]	@ (80042e8 <HAL_TIM_Base_MspInit+0x64>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80042b2:	e012      	b.n	80042da <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a0c      	ldr	r2, [pc, #48]	@ (80042ec <HAL_TIM_Base_MspInit+0x68>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d10d      	bne.n	80042da <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80042be:	2300      	movs	r3, #0
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	4b09      	ldr	r3, [pc, #36]	@ (80042e8 <HAL_TIM_Base_MspInit+0x64>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	4a08      	ldr	r2, [pc, #32]	@ (80042e8 <HAL_TIM_Base_MspInit+0x64>)
 80042c8:	f043 0308 	orr.w	r3, r3, #8
 80042cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80042ce:	4b06      	ldr	r3, [pc, #24]	@ (80042e8 <HAL_TIM_Base_MspInit+0x64>)
 80042d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	60bb      	str	r3, [r7, #8]
 80042d8:	68bb      	ldr	r3, [r7, #8]
}
 80042da:	bf00      	nop
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40023800 	.word	0x40023800
 80042ec:	40000c00 	.word	0x40000c00

080042f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80042f4:	bf00      	nop
 80042f6:	e7fd      	b.n	80042f4 <NMI_Handler+0x4>

080042f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042fc:	bf00      	nop
 80042fe:	e7fd      	b.n	80042fc <HardFault_Handler+0x4>

08004300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004304:	bf00      	nop
 8004306:	e7fd      	b.n	8004304 <MemManage_Handler+0x4>

08004308 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800430c:	bf00      	nop
 800430e:	e7fd      	b.n	800430c <BusFault_Handler+0x4>

08004310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004314:	bf00      	nop
 8004316:	e7fd      	b.n	8004314 <UsageFault_Handler+0x4>

08004318 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800431c:	bf00      	nop
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004326:	b480      	push	{r7}
 8004328:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800432a:	bf00      	nop
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004346:	f000 fc0f 	bl	8004b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800434a:	bf00      	nop
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435e:	2b00      	cmp	r3, #0
 8004360:	db0b      	blt.n	800437a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	f003 021f 	and.w	r2, r3, #31
 8004368:	4907      	ldr	r1, [pc, #28]	@ (8004388 <__NVIC_EnableIRQ+0x38>)
 800436a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	2001      	movs	r0, #1
 8004372:	fa00 f202 	lsl.w	r2, r0, r2
 8004376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	e000e100 	.word	0xe000e100

0800438c <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8004392:	f000 f9dd 	bl	8004750 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8004396:	f000 f99d 	bl	80046d4 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800439a:	2202      	movs	r2, #2
 800439c:	2103      	movs	r1, #3
 800439e:	2082      	movs	r0, #130	@ 0x82
 80043a0:	f000 fa2a 	bl	80047f8 <I2C3_Write>
    HAL_Delay(5);
 80043a4:	2005      	movs	r0, #5
 80043a6:	f000 fbff 	bl	8004ba8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80043aa:	2200      	movs	r2, #0
 80043ac:	2103      	movs	r1, #3
 80043ae:	2082      	movs	r0, #130	@ 0x82
 80043b0:	f000 fa22 	bl	80047f8 <I2C3_Write>
    HAL_Delay(2);
 80043b4:	2002      	movs	r0, #2
 80043b6:	f000 fbf7 	bl	8004ba8 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80043ba:	1cba      	adds	r2, r7, #2
 80043bc:	2302      	movs	r3, #2
 80043be:	2100      	movs	r1, #0
 80043c0:	2082      	movs	r0, #130	@ 0x82
 80043c2:	f000 fa69 	bl	8004898 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80043c6:	887b      	ldrh	r3, [r7, #2]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80043cc:	887b      	ldrh	r3, [r7, #2]
 80043ce:	0a1b      	lsrs	r3, r3, #8
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	88fb      	ldrh	r3, [r7, #6]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 80043d8:	88fb      	ldrh	r3, [r7, #6]
 80043da:	f640 0211 	movw	r2, #2065	@ 0x811
 80043de:	4293      	cmp	r3, r2
 80043e0:	d001      	beq.n	80043e6 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e095      	b.n	8004512 <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80043e6:	2202      	movs	r2, #2
 80043e8:	2103      	movs	r1, #3
 80043ea:	2082      	movs	r0, #130	@ 0x82
 80043ec:	f000 fa04 	bl	80047f8 <I2C3_Write>
    HAL_Delay(5);
 80043f0:	2005      	movs	r0, #5
 80043f2:	f000 fbd9 	bl	8004ba8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80043f6:	2200      	movs	r2, #0
 80043f8:	2103      	movs	r1, #3
 80043fa:	2082      	movs	r0, #130	@ 0x82
 80043fc:	f000 f9fc 	bl	80047f8 <I2C3_Write>
    HAL_Delay(2);
 8004400:	2002      	movs	r0, #2
 8004402:	f000 fbd1 	bl	8004ba8 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8004406:	2004      	movs	r0, #4
 8004408:	f000 f887 	bl	800451a <STMPE811_Read>
 800440c:	4603      	mov	r3, r0
 800440e:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8004410:	797b      	ldrb	r3, [r7, #5]
 8004412:	f023 0301 	bic.w	r3, r3, #1
 8004416:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8004418:	797b      	ldrb	r3, [r7, #5]
 800441a:	461a      	mov	r2, r3
 800441c:	2104      	movs	r1, #4
 800441e:	2082      	movs	r0, #130	@ 0x82
 8004420:	f000 f9ea 	bl	80047f8 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8004424:	2004      	movs	r0, #4
 8004426:	f000 f878 	bl	800451a <STMPE811_Read>
 800442a:	4603      	mov	r3, r0
 800442c:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 800442e:	797b      	ldrb	r3, [r7, #5]
 8004430:	f023 0302 	bic.w	r3, r3, #2
 8004434:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8004436:	797b      	ldrb	r3, [r7, #5]
 8004438:	461a      	mov	r2, r3
 800443a:	2104      	movs	r1, #4
 800443c:	2082      	movs	r0, #130	@ 0x82
 800443e:	f000 f9db 	bl	80047f8 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8004442:	2249      	movs	r2, #73	@ 0x49
 8004444:	2120      	movs	r1, #32
 8004446:	2082      	movs	r0, #130	@ 0x82
 8004448:	f000 f9d6 	bl	80047f8 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 800444c:	2002      	movs	r0, #2
 800444e:	f000 fbab 	bl	8004ba8 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8004452:	2201      	movs	r2, #1
 8004454:	2121      	movs	r1, #33	@ 0x21
 8004456:	2082      	movs	r0, #130	@ 0x82
 8004458:	f000 f9ce 	bl	80047f8 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 800445c:	2017      	movs	r0, #23
 800445e:	f000 f85c 	bl	800451a <STMPE811_Read>
 8004462:	4603      	mov	r3, r0
 8004464:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8004466:	797b      	ldrb	r3, [r7, #5]
 8004468:	f043 031e 	orr.w	r3, r3, #30
 800446c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 800446e:	797b      	ldrb	r3, [r7, #5]
 8004470:	461a      	mov	r2, r3
 8004472:	2117      	movs	r1, #23
 8004474:	2082      	movs	r0, #130	@ 0x82
 8004476:	f000 f9bf 	bl	80047f8 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 800447a:	229a      	movs	r2, #154	@ 0x9a
 800447c:	2141      	movs	r1, #65	@ 0x41
 800447e:	2082      	movs	r0, #130	@ 0x82
 8004480:	f000 f9ba 	bl	80047f8 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8004484:	2201      	movs	r2, #1
 8004486:	214a      	movs	r1, #74	@ 0x4a
 8004488:	2082      	movs	r0, #130	@ 0x82
 800448a:	f000 f9b5 	bl	80047f8 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800448e:	2201      	movs	r2, #1
 8004490:	214b      	movs	r1, #75	@ 0x4b
 8004492:	2082      	movs	r0, #130	@ 0x82
 8004494:	f000 f9b0 	bl	80047f8 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8004498:	2200      	movs	r2, #0
 800449a:	214b      	movs	r1, #75	@ 0x4b
 800449c:	2082      	movs	r0, #130	@ 0x82
 800449e:	f000 f9ab 	bl	80047f8 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80044a2:	2201      	movs	r2, #1
 80044a4:	2156      	movs	r1, #86	@ 0x56
 80044a6:	2082      	movs	r0, #130	@ 0x82
 80044a8:	f000 f9a6 	bl	80047f8 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80044ac:	2201      	movs	r2, #1
 80044ae:	2158      	movs	r1, #88	@ 0x58
 80044b0:	2082      	movs	r0, #130	@ 0x82
 80044b2:	f000 f9a1 	bl	80047f8 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80044b6:	2203      	movs	r2, #3
 80044b8:	2140      	movs	r1, #64	@ 0x40
 80044ba:	2082      	movs	r0, #130	@ 0x82
 80044bc:	f000 f99c 	bl	80047f8 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80044c0:	22ff      	movs	r2, #255	@ 0xff
 80044c2:	210b      	movs	r1, #11
 80044c4:	2082      	movs	r0, #130	@ 0x82
 80044c6:	f000 f997 	bl	80047f8 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 80044ca:	f000 f8c1 	bl	8004650 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 80044ce:	2009      	movs	r0, #9
 80044d0:	f000 f823 	bl	800451a <STMPE811_Read>
 80044d4:	4603      	mov	r3, r0
 80044d6:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 80044d8:	797b      	ldrb	r3, [r7, #5]
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 80044e0:	797b      	ldrb	r3, [r7, #5]
 80044e2:	461a      	mov	r2, r3
 80044e4:	2109      	movs	r1, #9
 80044e6:	2082      	movs	r0, #130	@ 0x82
 80044e8:	f000 f986 	bl	80047f8 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 80044ec:	200a      	movs	r0, #10
 80044ee:	f000 f814 	bl	800451a <STMPE811_Read>
 80044f2:	4603      	mov	r3, r0
 80044f4:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 80044f6:	797b      	ldrb	r3, [r7, #5]
 80044f8:	f043 0301 	orr.w	r3, r3, #1
 80044fc:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 80044fe:	797b      	ldrb	r3, [r7, #5]
 8004500:	461a      	mov	r2, r3
 8004502:	210a      	movs	r1, #10
 8004504:	2082      	movs	r0, #130	@ 0x82
 8004506:	f000 f977 	bl	80047f8 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 800450a:	20c8      	movs	r0, #200	@ 0xc8
 800450c:	f000 fb4c 	bl	8004ba8 <HAL_Delay>

    return STMPE811_State_Ok;
 8004510:	2302      	movs	r3, #2

}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	4603      	mov	r3, r0
 8004522:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8004524:	f107 020f 	add.w	r2, r7, #15
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	4619      	mov	r1, r3
 800452c:	2082      	movs	r0, #130	@ 0x82
 800452e:	f000 f98d 	bl	800484c <I2C3_Read>

    return readData;
 8004532:	7bfb      	ldrb	r3, [r7, #15]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	460a      	mov	r2, r1
 8004546:	71fb      	strb	r3, [r7, #7]
 8004548:	4613      	mov	r3, r2
 800454a:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 800454c:	79ba      	ldrb	r2, [r7, #6]
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	4619      	mov	r1, r3
 8004552:	2082      	movs	r0, #130	@ 0x82
 8004554:	f000 f950 	bl	80047f8 <I2C3_Write>
}
 8004558:	bf00      	nop
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	799b      	ldrb	r3, [r3, #6]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d117      	bne.n	80045a0 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f000 f9b1 	bl	80048dc <TM_STMPE811_ReadX>
 800457a:	4603      	mov	r3, r0
 800457c:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8004580:	b29a      	uxth	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	885b      	ldrh	r3, [r3, #2]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fa04 	bl	8004998 <TM_STMPE811_ReadY>
 8004590:	4603      	mov	r3, r0
 8004592:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8004596:	3301      	adds	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	805a      	strh	r2, [r3, #2]
 800459e:	e048      	b.n	8004632 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	799b      	ldrb	r3, [r3, #6]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d112      	bne.n	80045ce <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 f995 	bl	80048dc <TM_STMPE811_ReadX>
 80045b2:	4603      	mov	r3, r0
 80045b4:	461a      	mov	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	885b      	ldrh	r3, [r3, #2]
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 f9ea 	bl	8004998 <TM_STMPE811_ReadY>
 80045c4:	4603      	mov	r3, r0
 80045c6:	461a      	mov	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	805a      	strh	r2, [r3, #2]
 80045cc:	e031      	b.n	8004632 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	799b      	ldrb	r3, [r3, #6]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d115      	bne.n	8004602 <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	885b      	ldrh	r3, [r3, #2]
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f97e 	bl	80048dc <TM_STMPE811_ReadX>
 80045e0:	4603      	mov	r3, r0
 80045e2:	461a      	mov	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 f9d3 	bl	8004998 <TM_STMPE811_ReadY>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80045f8:	3301      	adds	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	801a      	strh	r2, [r3, #0]
 8004600:	e017      	b.n	8004632 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	799b      	ldrb	r3, [r3, #6]
 8004606:	2b03      	cmp	r3, #3
 8004608:	d113      	bne.n	8004632 <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 f964 	bl	80048dc <TM_STMPE811_ReadX>
 8004614:	4603      	mov	r3, r0
 8004616:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800461a:	b29a      	uxth	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f000 f9b7 	bl	8004998 <TM_STMPE811_ReadY>
 800462a:	4603      	mov	r3, r0
 800462c:	461a      	mov	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8004632:	2201      	movs	r2, #1
 8004634:	214b      	movs	r1, #75	@ 0x4b
 8004636:	2082      	movs	r0, #130	@ 0x82
 8004638:	f000 f8de 	bl	80047f8 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800463c:	2200      	movs	r2, #0
 800463e:	214b      	movs	r1, #75	@ 0x4b
 8004640:	2082      	movs	r0, #130	@ 0x82
 8004642:	f000 f8d9 	bl	80047f8 <I2C3_Write>
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	603b      	str	r3, [r7, #0]
 800465a:	4b14      	ldr	r3, [pc, #80]	@ (80046ac <enableInterruptSupportForTouch+0x5c>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465e:	4a13      	ldr	r2, [pc, #76]	@ (80046ac <enableInterruptSupportForTouch+0x5c>)
 8004660:	f043 0301 	orr.w	r3, r3, #1
 8004664:	6313      	str	r3, [r2, #48]	@ 0x30
 8004666:	4b11      	ldr	r3, [pc, #68]	@ (80046ac <enableInterruptSupportForTouch+0x5c>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004672:	1d3b      	adds	r3, r7, #4
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	605a      	str	r2, [r3, #4]
 800467a:	609a      	str	r2, [r3, #8]
 800467c:	60da      	str	r2, [r3, #12]
 800467e:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004680:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004684:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004686:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800468a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004690:	2302      	movs	r3, #2
 8004692:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004694:	1d3b      	adds	r3, r7, #4
 8004696:	4619      	mov	r1, r3
 8004698:	4805      	ldr	r0, [pc, #20]	@ (80046b0 <enableInterruptSupportForTouch+0x60>)
 800469a:	f000 fc31 	bl	8004f00 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 800469e:	2028      	movs	r0, #40	@ 0x28
 80046a0:	f7ff fe56 	bl	8004350 <__NVIC_EnableIRQ>

}
 80046a4:	bf00      	nop
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40023800 	.word	0x40023800
 80046b0:	40020000 	.word	0x40020000

080046b4 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80046b8:	4b05      	ldr	r3, [pc, #20]	@ (80046d0 <verifyHAL_I2C_IS_OKAY+0x1c>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80046c0:	bf00      	nop
 80046c2:	e7fd      	b.n	80046c0 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80046c4:	bf00      	nop
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20025e44 	.word	0x20025e44

080046d4 <I2C3_Init>:

static void I2C3_Init()
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80046da:	2300      	movs	r3, #0
 80046dc:	603b      	str	r3, [r7, #0]
 80046de:	4b18      	ldr	r3, [pc, #96]	@ (8004740 <I2C3_Init+0x6c>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e2:	4a17      	ldr	r2, [pc, #92]	@ (8004740 <I2C3_Init+0x6c>)
 80046e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80046ea:	4b15      	ldr	r3, [pc, #84]	@ (8004740 <I2C3_Init+0x6c>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80046f6:	4b13      	ldr	r3, [pc, #76]	@ (8004744 <I2C3_Init+0x70>)
 80046f8:	4a13      	ldr	r2, [pc, #76]	@ (8004748 <I2C3_Init+0x74>)
 80046fa:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80046fc:	4b11      	ldr	r3, [pc, #68]	@ (8004744 <I2C3_Init+0x70>)
 80046fe:	4a13      	ldr	r2, [pc, #76]	@ (800474c <I2C3_Init+0x78>)
 8004700:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004702:	4b10      	ldr	r3, [pc, #64]	@ (8004744 <I2C3_Init+0x70>)
 8004704:	2200      	movs	r2, #0
 8004706:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8004708:	4b0e      	ldr	r3, [pc, #56]	@ (8004744 <I2C3_Init+0x70>)
 800470a:	2200      	movs	r2, #0
 800470c:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800470e:	4b0d      	ldr	r3, [pc, #52]	@ (8004744 <I2C3_Init+0x70>)
 8004710:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004714:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8004716:	4b0b      	ldr	r3, [pc, #44]	@ (8004744 <I2C3_Init+0x70>)
 8004718:	2200      	movs	r2, #0
 800471a:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800471c:	4b09      	ldr	r3, [pc, #36]	@ (8004744 <I2C3_Init+0x70>)
 800471e:	2200      	movs	r2, #0
 8004720:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8004722:	4808      	ldr	r0, [pc, #32]	@ (8004744 <I2C3_Init+0x70>)
 8004724:	f000 febe 	bl	80054a4 <HAL_I2C_Init>
 8004728:	4603      	mov	r3, r0
 800472a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8004732:	bf00      	nop
 8004734:	e7fd      	b.n	8004732 <I2C3_Init+0x5e>
    }
    return;
 8004736:	bf00      	nop
}
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40023800 	.word	0x40023800
 8004744:	20025df0 	.word	0x20025df0
 8004748:	40005c00 	.word	0x40005c00
 800474c:	000186a0 	.word	0x000186a0

08004750 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004756:	f107 030c 	add.w	r3, r7, #12
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	605a      	str	r2, [r3, #4]
 8004760:	609a      	str	r2, [r3, #8]
 8004762:	60da      	str	r2, [r3, #12]
 8004764:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	60bb      	str	r3, [r7, #8]
 800476a:	4b20      	ldr	r3, [pc, #128]	@ (80047ec <I2C3_MspInit+0x9c>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476e:	4a1f      	ldr	r2, [pc, #124]	@ (80047ec <I2C3_MspInit+0x9c>)
 8004770:	f043 0304 	orr.w	r3, r3, #4
 8004774:	6313      	str	r3, [r2, #48]	@ 0x30
 8004776:	4b1d      	ldr	r3, [pc, #116]	@ (80047ec <I2C3_MspInit+0x9c>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	60bb      	str	r3, [r7, #8]
 8004780:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004782:	2300      	movs	r3, #0
 8004784:	607b      	str	r3, [r7, #4]
 8004786:	4b19      	ldr	r3, [pc, #100]	@ (80047ec <I2C3_MspInit+0x9c>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478a:	4a18      	ldr	r2, [pc, #96]	@ (80047ec <I2C3_MspInit+0x9c>)
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	6313      	str	r3, [r2, #48]	@ 0x30
 8004792:	4b16      	ldr	r3, [pc, #88]	@ (80047ec <I2C3_MspInit+0x9c>)
 8004794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	607b      	str	r3, [r7, #4]
 800479c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800479e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80047a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047a4:	2312      	movs	r3, #18
 80047a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ac:	2300      	movs	r3, #0
 80047ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80047b0:	2304      	movs	r3, #4
 80047b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80047b4:	f107 030c 	add.w	r3, r7, #12
 80047b8:	4619      	mov	r1, r3
 80047ba:	480d      	ldr	r0, [pc, #52]	@ (80047f0 <I2C3_MspInit+0xa0>)
 80047bc:	f000 fba0 	bl	8004f00 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80047c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047c6:	2312      	movs	r3, #18
 80047c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ce:	2300      	movs	r3, #0
 80047d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80047d2:	2304      	movs	r3, #4
 80047d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80047d6:	f107 030c 	add.w	r3, r7, #12
 80047da:	4619      	mov	r1, r3
 80047dc:	4805      	ldr	r0, [pc, #20]	@ (80047f4 <I2C3_MspInit+0xa4>)
 80047de:	f000 fb8f 	bl	8004f00 <HAL_GPIO_Init>
    
}
 80047e2:	bf00      	nop
 80047e4:	3720      	adds	r7, #32
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40023800 	.word	0x40023800
 80047f0:	40020800 	.word	0x40020800
 80047f4:	40020000 	.word	0x40020000

080047f8 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af04      	add	r7, sp, #16
 80047fe:	4603      	mov	r3, r0
 8004800:	80fb      	strh	r3, [r7, #6]
 8004802:	460b      	mov	r3, r1
 8004804:	717b      	strb	r3, [r7, #5]
 8004806:	4613      	mov	r3, r2
 8004808:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800480a:	793b      	ldrb	r3, [r7, #4]
 800480c:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800480e:	797b      	ldrb	r3, [r7, #5]
 8004810:	b29a      	uxth	r2, r3
 8004812:	88f9      	ldrh	r1, [r7, #6]
 8004814:	4b0a      	ldr	r3, [pc, #40]	@ (8004840 <I2C3_Write+0x48>)
 8004816:	9302      	str	r3, [sp, #8]
 8004818:	2301      	movs	r3, #1
 800481a:	9301      	str	r3, [sp, #4]
 800481c:	f107 030f 	add.w	r3, r7, #15
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	2301      	movs	r3, #1
 8004824:	4807      	ldr	r0, [pc, #28]	@ (8004844 <I2C3_Write+0x4c>)
 8004826:	f000 ff81 	bl	800572c <HAL_I2C_Mem_Write>
 800482a:	4603      	mov	r3, r0
 800482c:	461a      	mov	r2, r3
 800482e:	4b06      	ldr	r3, [pc, #24]	@ (8004848 <I2C3_Write+0x50>)
 8004830:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8004832:	f7ff ff3f 	bl	80046b4 <verifyHAL_I2C_IS_OKAY>
}
 8004836:	bf00      	nop
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	0003d090 	.word	0x0003d090
 8004844:	20025df0 	.word	0x20025df0
 8004848:	20025e44 	.word	0x20025e44

0800484c <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af04      	add	r7, sp, #16
 8004852:	4603      	mov	r3, r0
 8004854:	603a      	str	r2, [r7, #0]
 8004856:	71fb      	strb	r3, [r7, #7]
 8004858:	460b      	mov	r3, r1
 800485a:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	b299      	uxth	r1, r3
 8004860:	79bb      	ldrb	r3, [r7, #6]
 8004862:	b29a      	uxth	r2, r3
 8004864:	4b09      	ldr	r3, [pc, #36]	@ (800488c <I2C3_Read+0x40>)
 8004866:	9302      	str	r3, [sp, #8]
 8004868:	2301      	movs	r3, #1
 800486a:	9301      	str	r3, [sp, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	2301      	movs	r3, #1
 8004872:	4807      	ldr	r0, [pc, #28]	@ (8004890 <I2C3_Read+0x44>)
 8004874:	f001 f854 	bl	8005920 <HAL_I2C_Mem_Read>
 8004878:	4603      	mov	r3, r0
 800487a:	461a      	mov	r2, r3
 800487c:	4b05      	ldr	r3, [pc, #20]	@ (8004894 <I2C3_Read+0x48>)
 800487e:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8004880:	f7ff ff18 	bl	80046b4 <verifyHAL_I2C_IS_OKAY>
}
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	0003d090 	.word	0x0003d090
 8004890:	20025df0 	.word	0x20025df0
 8004894:	20025e44 	.word	0x20025e44

08004898 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af04      	add	r7, sp, #16
 800489e:	603a      	str	r2, [r7, #0]
 80048a0:	461a      	mov	r2, r3
 80048a2:	4603      	mov	r3, r0
 80048a4:	71fb      	strb	r3, [r7, #7]
 80048a6:	460b      	mov	r3, r1
 80048a8:	71bb      	strb	r3, [r7, #6]
 80048aa:	4613      	mov	r3, r2
 80048ac:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	b299      	uxth	r1, r3
 80048b2:	79bb      	ldrb	r3, [r7, #6]
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	4b07      	ldr	r3, [pc, #28]	@ (80048d4 <I2C3_MulitByteRead+0x3c>)
 80048b8:	9302      	str	r3, [sp, #8]
 80048ba:	88bb      	ldrh	r3, [r7, #4]
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	2301      	movs	r3, #1
 80048c4:	4804      	ldr	r0, [pc, #16]	@ (80048d8 <I2C3_MulitByteRead+0x40>)
 80048c6:	f001 f82b 	bl	8005920 <HAL_I2C_Mem_Read>
}
 80048ca:	bf00      	nop
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	0003d090 	.word	0x0003d090
 80048d8:	20025df0 	.word	0x20025df0

080048dc <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80048e6:	204d      	movs	r0, #77	@ 0x4d
 80048e8:	f7ff fe17 	bl	800451a <STMPE811_Read>
 80048ec:	4603      	mov	r3, r0
 80048ee:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80048f0:	204e      	movs	r0, #78	@ 0x4e
 80048f2:	f7ff fe12 	bl	800451a <STMPE811_Read>
 80048f6:	4603      	mov	r3, r0
 80048f8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80048fa:	7a7b      	ldrb	r3, [r7, #9]
 80048fc:	021b      	lsls	r3, r3, #8
 80048fe:	b21a      	sxth	r2, r3
 8004900:	7a3b      	ldrb	r3, [r7, #8]
 8004902:	b21b      	sxth	r3, r3
 8004904:	4313      	orrs	r3, r2
 8004906:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8004908:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800490c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004910:	4293      	cmp	r3, r2
 8004912:	dc06      	bgt.n	8004922 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8004914:	89fb      	ldrh	r3, [r7, #14]
 8004916:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800491a:	330c      	adds	r3, #12
 800491c:	b29b      	uxth	r3, r3
 800491e:	81fb      	strh	r3, [r7, #14]
 8004920:	e005      	b.n	800492e <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8004922:	89fb      	ldrh	r3, [r7, #14]
 8004924:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8004928:	3308      	adds	r3, #8
 800492a:	b29b      	uxth	r3, r3
 800492c:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 800492e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004932:	4a18      	ldr	r2, [pc, #96]	@ (8004994 <TM_STMPE811_ReadX+0xb8>)
 8004934:	fb82 1203 	smull	r1, r2, r2, r3
 8004938:	441a      	add	r2, r3
 800493a:	10d2      	asrs	r2, r2, #3
 800493c:	17db      	asrs	r3, r3, #31
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8004942:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004946:	2bef      	cmp	r3, #239	@ 0xef
 8004948:	dd02      	ble.n	8004950 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800494a:	23ef      	movs	r3, #239	@ 0xef
 800494c:	81fb      	strh	r3, [r7, #14]
 800494e:	e005      	b.n	800495c <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8004950:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004954:	2b00      	cmp	r3, #0
 8004956:	da01      	bge.n	800495c <TM_STMPE811_ReadX+0x80>
        val = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 800495c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	429a      	cmp	r2, r3
 8004964:	dd05      	ble.n	8004972 <TM_STMPE811_ReadX+0x96>
 8004966:	89fa      	ldrh	r2, [r7, #14]
 8004968:	88fb      	ldrh	r3, [r7, #6]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	b29b      	uxth	r3, r3
 800496e:	b21b      	sxth	r3, r3
 8004970:	e004      	b.n	800497c <TM_STMPE811_ReadX+0xa0>
 8004972:	89fb      	ldrh	r3, [r7, #14]
 8004974:	88fa      	ldrh	r2, [r7, #6]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	b29b      	uxth	r3, r3
 800497a:	b21b      	sxth	r3, r3
 800497c:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 800497e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004982:	2b04      	cmp	r3, #4
 8004984:	dd01      	ble.n	800498a <TM_STMPE811_ReadX+0xae>
        return val;
 8004986:	89fb      	ldrh	r3, [r7, #14]
 8004988:	e000      	b.n	800498c <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 800498a:	88fb      	ldrh	r3, [r7, #6]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	88888889 	.word	0x88888889

08004998 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80049a2:	204f      	movs	r0, #79	@ 0x4f
 80049a4:	f7ff fdb9 	bl	800451a <STMPE811_Read>
 80049a8:	4603      	mov	r3, r0
 80049aa:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80049ac:	2050      	movs	r0, #80	@ 0x50
 80049ae:	f7ff fdb4 	bl	800451a <STMPE811_Read>
 80049b2:	4603      	mov	r3, r0
 80049b4:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80049b6:	7a7b      	ldrb	r3, [r7, #9]
 80049b8:	021b      	lsls	r3, r3, #8
 80049ba:	b21a      	sxth	r2, r3
 80049bc:	7a3b      	ldrb	r3, [r7, #8]
 80049be:	b21b      	sxth	r3, r3
 80049c0:	4313      	orrs	r3, r2
 80049c2:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80049c4:	89fb      	ldrh	r3, [r7, #14]
 80049c6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80049ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049d2:	4a19      	ldr	r2, [pc, #100]	@ (8004a38 <TM_STMPE811_ReadY+0xa0>)
 80049d4:	fb82 1203 	smull	r1, r2, r2, r3
 80049d8:	1052      	asrs	r2, r2, #1
 80049da:	17db      	asrs	r3, r3, #31
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80049e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	dc02      	bgt.n	80049ee <TM_STMPE811_ReadY+0x56>
        val = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	81fb      	strh	r3, [r7, #14]
 80049ec:	e007      	b.n	80049fe <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 80049ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049f2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80049f6:	db02      	blt.n	80049fe <TM_STMPE811_ReadY+0x66>
        val = 319;
 80049f8:	f240 133f 	movw	r3, #319	@ 0x13f
 80049fc:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80049fe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004a02:	88fb      	ldrh	r3, [r7, #6]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	dd05      	ble.n	8004a14 <TM_STMPE811_ReadY+0x7c>
 8004a08:	89fa      	ldrh	r2, [r7, #14]
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	b21b      	sxth	r3, r3
 8004a12:	e004      	b.n	8004a1e <TM_STMPE811_ReadY+0x86>
 8004a14:	89fb      	ldrh	r3, [r7, #14]
 8004a16:	88fa      	ldrh	r2, [r7, #6]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	b21b      	sxth	r3, r3
 8004a1e:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8004a20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	dd01      	ble.n	8004a2c <TM_STMPE811_ReadY+0x94>
        return val;
 8004a28:	89fb      	ldrh	r3, [r7, #14]
 8004a2a:	e000      	b.n	8004a2e <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	2e8ba2e9 	.word	0x2e8ba2e9

08004a3c <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
}
 8004a40:	bf00      	nop
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
	...

08004a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a50:	4b06      	ldr	r3, [pc, #24]	@ (8004a6c <SystemInit+0x20>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a56:	4a05      	ldr	r2, [pc, #20]	@ (8004a6c <SystemInit+0x20>)
 8004a58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a60:	bf00      	nop
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	e000ed00 	.word	0xe000ed00

08004a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004a70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004aa8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004a74:	f7ff ffea 	bl	8004a4c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a78:	480c      	ldr	r0, [pc, #48]	@ (8004aac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004a7a:	490d      	ldr	r1, [pc, #52]	@ (8004ab0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8004ab4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a80:	e002      	b.n	8004a88 <LoopCopyDataInit>

08004a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a86:	3304      	adds	r3, #4

08004a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a8c:	d3f9      	bcc.n	8004a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a90:	4c0a      	ldr	r4, [pc, #40]	@ (8004abc <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a94:	e001      	b.n	8004a9a <LoopFillZerobss>

08004a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a98:	3204      	adds	r2, #4

08004a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a9c:	d3fb      	bcc.n	8004a96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004a9e:	f003 fc75 	bl	800838c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004aa2:	f7fe fdb2 	bl	800360a <main>
  bx  lr    
 8004aa6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004aa8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ab0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8004ab4:	08009fec 	.word	0x08009fec
  ldr r2, =_sbss
 8004ab8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8004abc:	20025e4c 	.word	0x20025e4c

08004ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ac0:	e7fe      	b.n	8004ac0 <ADC_IRQHandler>
	...

08004ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8004b04 <HAL_Init+0x40>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a0d      	ldr	r2, [pc, #52]	@ (8004b04 <HAL_Init+0x40>)
 8004ace:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8004b04 <HAL_Init+0x40>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8004b04 <HAL_Init+0x40>)
 8004ada:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ae0:	4b08      	ldr	r3, [pc, #32]	@ (8004b04 <HAL_Init+0x40>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a07      	ldr	r2, [pc, #28]	@ (8004b04 <HAL_Init+0x40>)
 8004ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004aec:	2003      	movs	r0, #3
 8004aee:	f000 f991 	bl	8004e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004af2:	2000      	movs	r0, #0
 8004af4:	f000 f808 	bl	8004b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004af8:	f7ff f982 	bl	8003e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40023c00 	.word	0x40023c00

08004b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b10:	4b12      	ldr	r3, [pc, #72]	@ (8004b5c <HAL_InitTick+0x54>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	4b12      	ldr	r3, [pc, #72]	@ (8004b60 <HAL_InitTick+0x58>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 f9b7 	bl	8004e9a <HAL_SYSTICK_Config>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e00e      	b.n	8004b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b0f      	cmp	r3, #15
 8004b3a:	d80a      	bhi.n	8004b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	f04f 30ff 	mov.w	r0, #4294967295
 8004b44:	f000 f971 	bl	8004e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b48:	4a06      	ldr	r2, [pc, #24]	@ (8004b64 <HAL_InitTick+0x5c>)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e000      	b.n	8004b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20000018 	.word	0x20000018
 8004b60:	20000020 	.word	0x20000020
 8004b64:	2000001c 	.word	0x2000001c

08004b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b6c:	4b06      	ldr	r3, [pc, #24]	@ (8004b88 <HAL_IncTick+0x20>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	461a      	mov	r2, r3
 8004b72:	4b06      	ldr	r3, [pc, #24]	@ (8004b8c <HAL_IncTick+0x24>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4413      	add	r3, r2
 8004b78:	4a04      	ldr	r2, [pc, #16]	@ (8004b8c <HAL_IncTick+0x24>)
 8004b7a:	6013      	str	r3, [r2, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	20000020 	.word	0x20000020
 8004b8c:	20025e48 	.word	0x20025e48

08004b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  return uwTick;
 8004b94:	4b03      	ldr	r3, [pc, #12]	@ (8004ba4 <HAL_GetTick+0x14>)
 8004b96:	681b      	ldr	r3, [r3, #0]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	20025e48 	.word	0x20025e48

08004ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bb0:	f7ff ffee 	bl	8004b90 <HAL_GetTick>
 8004bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d005      	beq.n	8004bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bec <HAL_Delay+0x44>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004bce:	bf00      	nop
 8004bd0:	f7ff ffde 	bl	8004b90 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d8f7      	bhi.n	8004bd0 <HAL_Delay+0x28>
  {
  }
}
 8004be0:	bf00      	nop
 8004be2:	bf00      	nop
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000020 	.word	0x20000020

08004bf0 <__NVIC_SetPriorityGrouping>:
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c00:	4b0c      	ldr	r3, [pc, #48]	@ (8004c34 <__NVIC_SetPriorityGrouping+0x44>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c22:	4a04      	ldr	r2, [pc, #16]	@ (8004c34 <__NVIC_SetPriorityGrouping+0x44>)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	60d3      	str	r3, [r2, #12]
}
 8004c28:	bf00      	nop
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	e000ed00 	.word	0xe000ed00

08004c38 <__NVIC_GetPriorityGrouping>:
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c3c:	4b04      	ldr	r3, [pc, #16]	@ (8004c50 <__NVIC_GetPriorityGrouping+0x18>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	0a1b      	lsrs	r3, r3, #8
 8004c42:	f003 0307 	and.w	r3, r3, #7
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	e000ed00 	.word	0xe000ed00

08004c54 <__NVIC_EnableIRQ>:
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	db0b      	blt.n	8004c7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	f003 021f 	and.w	r2, r3, #31
 8004c6c:	4907      	ldr	r1, [pc, #28]	@ (8004c8c <__NVIC_EnableIRQ+0x38>)
 8004c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	2001      	movs	r0, #1
 8004c76:	fa00 f202 	lsl.w	r2, r0, r2
 8004c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	e000e100 	.word	0xe000e100

08004c90 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	db12      	blt.n	8004cc8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	f003 021f 	and.w	r2, r3, #31
 8004ca8:	490a      	ldr	r1, [pc, #40]	@ (8004cd4 <__NVIC_DisableIRQ+0x44>)
 8004caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8004cb6:	3320      	adds	r3, #32
 8004cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004cbc:	f3bf 8f4f 	dsb	sy
}
 8004cc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004cc2:	f3bf 8f6f 	isb	sy
}
 8004cc6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	e000e100 	.word	0xe000e100

08004cd8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	db0c      	blt.n	8004d04 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cea:	79fb      	ldrb	r3, [r7, #7]
 8004cec:	f003 021f 	and.w	r2, r3, #31
 8004cf0:	4907      	ldr	r1, [pc, #28]	@ (8004d10 <__NVIC_ClearPendingIRQ+0x38>)
 8004cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf6:	095b      	lsrs	r3, r3, #5
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8004cfe:	3360      	adds	r3, #96	@ 0x60
 8004d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	e000e100 	.word	0xe000e100

08004d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	6039      	str	r1, [r7, #0]
 8004d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	db0a      	blt.n	8004d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	490c      	ldr	r1, [pc, #48]	@ (8004d60 <__NVIC_SetPriority+0x4c>)
 8004d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d32:	0112      	lsls	r2, r2, #4
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	440b      	add	r3, r1
 8004d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d3c:	e00a      	b.n	8004d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	4908      	ldr	r1, [pc, #32]	@ (8004d64 <__NVIC_SetPriority+0x50>)
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	3b04      	subs	r3, #4
 8004d4c:	0112      	lsls	r2, r2, #4
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	440b      	add	r3, r1
 8004d52:	761a      	strb	r2, [r3, #24]
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	e000e100 	.word	0xe000e100
 8004d64:	e000ed00 	.word	0xe000ed00

08004d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b089      	sub	sp, #36	@ 0x24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	f1c3 0307 	rsb	r3, r3, #7
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	bf28      	it	cs
 8004d86:	2304      	movcs	r3, #4
 8004d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	2b06      	cmp	r3, #6
 8004d90:	d902      	bls.n	8004d98 <NVIC_EncodePriority+0x30>
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	3b03      	subs	r3, #3
 8004d96:	e000      	b.n	8004d9a <NVIC_EncodePriority+0x32>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	43da      	mvns	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	401a      	ands	r2, r3
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004db0:	f04f 31ff 	mov.w	r1, #4294967295
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dba:	43d9      	mvns	r1, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dc0:	4313      	orrs	r3, r2
         );
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3724      	adds	r7, #36	@ 0x24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
	...

08004dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004de0:	d301      	bcc.n	8004de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004de2:	2301      	movs	r3, #1
 8004de4:	e00f      	b.n	8004e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004de6:	4a0a      	ldr	r2, [pc, #40]	@ (8004e10 <SysTick_Config+0x40>)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004dee:	210f      	movs	r1, #15
 8004df0:	f04f 30ff 	mov.w	r0, #4294967295
 8004df4:	f7ff ff8e 	bl	8004d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004df8:	4b05      	ldr	r3, [pc, #20]	@ (8004e10 <SysTick_Config+0x40>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004dfe:	4b04      	ldr	r3, [pc, #16]	@ (8004e10 <SysTick_Config+0x40>)
 8004e00:	2207      	movs	r2, #7
 8004e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	e000e010 	.word	0xe000e010

08004e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7ff fee7 	bl	8004bf0 <__NVIC_SetPriorityGrouping>
}
 8004e22:	bf00      	nop
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b086      	sub	sp, #24
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	4603      	mov	r3, r0
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	607a      	str	r2, [r7, #4]
 8004e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e3c:	f7ff fefc 	bl	8004c38 <__NVIC_GetPriorityGrouping>
 8004e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	6978      	ldr	r0, [r7, #20]
 8004e48:	f7ff ff8e 	bl	8004d68 <NVIC_EncodePriority>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e52:	4611      	mov	r1, r2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff ff5d 	bl	8004d14 <__NVIC_SetPriority>
}
 8004e5a:	bf00      	nop
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b082      	sub	sp, #8
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	4603      	mov	r3, r0
 8004e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff feef 	bl	8004c54 <__NVIC_EnableIRQ>
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b082      	sub	sp, #8
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	4603      	mov	r3, r0
 8004e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff feff 	bl	8004c90 <__NVIC_DisableIRQ>
}
 8004e92:	bf00      	nop
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b082      	sub	sp, #8
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff ff94 	bl	8004dd0 <SysTick_Config>
 8004ea8:	4603      	mov	r3, r0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b082      	sub	sp, #8
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	4603      	mov	r3, r0
 8004eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff ff09 	bl	8004cd8 <__NVIC_ClearPendingIRQ>
}
 8004ec6:	bf00      	nop
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 031f 	and.w	r3, r3, #31
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8004eea:	4a04      	ldr	r2, [pc, #16]	@ (8004efc <HAL_EXTI_ClearPending+0x2c>)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6153      	str	r3, [r2, #20]
}
 8004ef0:	bf00      	nop
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	40013c00 	.word	0x40013c00

08004f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b089      	sub	sp, #36	@ 0x24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f16:	2300      	movs	r3, #0
 8004f18:	61fb      	str	r3, [r7, #28]
 8004f1a:	e177      	b.n	800520c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	f040 8166 	bne.w	8005206 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d005      	beq.n	8004f52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d130      	bne.n	8004fb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	2203      	movs	r2, #3
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	43db      	mvns	r3, r3
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	4013      	ands	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f88:	2201      	movs	r2, #1
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	43db      	mvns	r3, r3
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	4013      	ands	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	091b      	lsrs	r3, r3, #4
 8004f9e:	f003 0201 	and.w	r2, r3, #1
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f003 0303 	and.w	r3, r3, #3
 8004fbc:	2b03      	cmp	r3, #3
 8004fbe:	d017      	beq.n	8004ff0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	2203      	movs	r2, #3
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f003 0303 	and.w	r3, r3, #3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d123      	bne.n	8005044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	08da      	lsrs	r2, r3, #3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3208      	adds	r2, #8
 8005004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	220f      	movs	r2, #15
 8005014:	fa02 f303 	lsl.w	r3, r2, r3
 8005018:	43db      	mvns	r3, r3
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	4013      	ands	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	4313      	orrs	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	08da      	lsrs	r2, r3, #3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3208      	adds	r2, #8
 800503e:	69b9      	ldr	r1, [r7, #24]
 8005040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	2203      	movs	r2, #3
 8005050:	fa02 f303 	lsl.w	r3, r2, r3
 8005054:	43db      	mvns	r3, r3
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	4013      	ands	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f003 0203 	and.w	r2, r3, #3
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	4313      	orrs	r3, r2
 8005070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 80c0 	beq.w	8005206 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	4b66      	ldr	r3, [pc, #408]	@ (8005224 <HAL_GPIO_Init+0x324>)
 800508c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800508e:	4a65      	ldr	r2, [pc, #404]	@ (8005224 <HAL_GPIO_Init+0x324>)
 8005090:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005094:	6453      	str	r3, [r2, #68]	@ 0x44
 8005096:	4b63      	ldr	r3, [pc, #396]	@ (8005224 <HAL_GPIO_Init+0x324>)
 8005098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050a2:	4a61      	ldr	r2, [pc, #388]	@ (8005228 <HAL_GPIO_Init+0x328>)
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	089b      	lsrs	r3, r3, #2
 80050a8:	3302      	adds	r3, #2
 80050aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	220f      	movs	r2, #15
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	43db      	mvns	r3, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	4013      	ands	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a58      	ldr	r2, [pc, #352]	@ (800522c <HAL_GPIO_Init+0x32c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d037      	beq.n	800513e <HAL_GPIO_Init+0x23e>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a57      	ldr	r2, [pc, #348]	@ (8005230 <HAL_GPIO_Init+0x330>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d031      	beq.n	800513a <HAL_GPIO_Init+0x23a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a56      	ldr	r2, [pc, #344]	@ (8005234 <HAL_GPIO_Init+0x334>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d02b      	beq.n	8005136 <HAL_GPIO_Init+0x236>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a55      	ldr	r2, [pc, #340]	@ (8005238 <HAL_GPIO_Init+0x338>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d025      	beq.n	8005132 <HAL_GPIO_Init+0x232>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a54      	ldr	r2, [pc, #336]	@ (800523c <HAL_GPIO_Init+0x33c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d01f      	beq.n	800512e <HAL_GPIO_Init+0x22e>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a53      	ldr	r2, [pc, #332]	@ (8005240 <HAL_GPIO_Init+0x340>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d019      	beq.n	800512a <HAL_GPIO_Init+0x22a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a52      	ldr	r2, [pc, #328]	@ (8005244 <HAL_GPIO_Init+0x344>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d013      	beq.n	8005126 <HAL_GPIO_Init+0x226>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a51      	ldr	r2, [pc, #324]	@ (8005248 <HAL_GPIO_Init+0x348>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00d      	beq.n	8005122 <HAL_GPIO_Init+0x222>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a50      	ldr	r2, [pc, #320]	@ (800524c <HAL_GPIO_Init+0x34c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d007      	beq.n	800511e <HAL_GPIO_Init+0x21e>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a4f      	ldr	r2, [pc, #316]	@ (8005250 <HAL_GPIO_Init+0x350>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d101      	bne.n	800511a <HAL_GPIO_Init+0x21a>
 8005116:	2309      	movs	r3, #9
 8005118:	e012      	b.n	8005140 <HAL_GPIO_Init+0x240>
 800511a:	230a      	movs	r3, #10
 800511c:	e010      	b.n	8005140 <HAL_GPIO_Init+0x240>
 800511e:	2308      	movs	r3, #8
 8005120:	e00e      	b.n	8005140 <HAL_GPIO_Init+0x240>
 8005122:	2307      	movs	r3, #7
 8005124:	e00c      	b.n	8005140 <HAL_GPIO_Init+0x240>
 8005126:	2306      	movs	r3, #6
 8005128:	e00a      	b.n	8005140 <HAL_GPIO_Init+0x240>
 800512a:	2305      	movs	r3, #5
 800512c:	e008      	b.n	8005140 <HAL_GPIO_Init+0x240>
 800512e:	2304      	movs	r3, #4
 8005130:	e006      	b.n	8005140 <HAL_GPIO_Init+0x240>
 8005132:	2303      	movs	r3, #3
 8005134:	e004      	b.n	8005140 <HAL_GPIO_Init+0x240>
 8005136:	2302      	movs	r3, #2
 8005138:	e002      	b.n	8005140 <HAL_GPIO_Init+0x240>
 800513a:	2301      	movs	r3, #1
 800513c:	e000      	b.n	8005140 <HAL_GPIO_Init+0x240>
 800513e:	2300      	movs	r3, #0
 8005140:	69fa      	ldr	r2, [r7, #28]
 8005142:	f002 0203 	and.w	r2, r2, #3
 8005146:	0092      	lsls	r2, r2, #2
 8005148:	4093      	lsls	r3, r2
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	4313      	orrs	r3, r2
 800514e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005150:	4935      	ldr	r1, [pc, #212]	@ (8005228 <HAL_GPIO_Init+0x328>)
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	089b      	lsrs	r3, r3, #2
 8005156:	3302      	adds	r3, #2
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800515e:	4b3d      	ldr	r3, [pc, #244]	@ (8005254 <HAL_GPIO_Init+0x354>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	43db      	mvns	r3, r3
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	4013      	ands	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005182:	4a34      	ldr	r2, [pc, #208]	@ (8005254 <HAL_GPIO_Init+0x354>)
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005188:	4b32      	ldr	r3, [pc, #200]	@ (8005254 <HAL_GPIO_Init+0x354>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	43db      	mvns	r3, r3
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	4013      	ands	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051ac:	4a29      	ldr	r2, [pc, #164]	@ (8005254 <HAL_GPIO_Init+0x354>)
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80051b2:	4b28      	ldr	r3, [pc, #160]	@ (8005254 <HAL_GPIO_Init+0x354>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	43db      	mvns	r3, r3
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	4013      	ands	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005254 <HAL_GPIO_Init+0x354>)
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005254 <HAL_GPIO_Init+0x354>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	43db      	mvns	r3, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4013      	ands	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005200:	4a14      	ldr	r2, [pc, #80]	@ (8005254 <HAL_GPIO_Init+0x354>)
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	3301      	adds	r3, #1
 800520a:	61fb      	str	r3, [r7, #28]
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	2b0f      	cmp	r3, #15
 8005210:	f67f ae84 	bls.w	8004f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop
 8005218:	3724      	adds	r7, #36	@ 0x24
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40023800 	.word	0x40023800
 8005228:	40013800 	.word	0x40013800
 800522c:	40020000 	.word	0x40020000
 8005230:	40020400 	.word	0x40020400
 8005234:	40020800 	.word	0x40020800
 8005238:	40020c00 	.word	0x40020c00
 800523c:	40021000 	.word	0x40021000
 8005240:	40021400 	.word	0x40021400
 8005244:	40021800 	.word	0x40021800
 8005248:	40021c00 	.word	0x40021c00
 800524c:	40022000 	.word	0x40022000
 8005250:	40022400 	.word	0x40022400
 8005254:	40013c00 	.word	0x40013c00

08005258 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005262:	2300      	movs	r3, #0
 8005264:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800526a:	2300      	movs	r3, #0
 800526c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800526e:	2300      	movs	r3, #0
 8005270:	617b      	str	r3, [r7, #20]
 8005272:	e0d9      	b.n	8005428 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005274:	2201      	movs	r2, #1
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	4013      	ands	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	429a      	cmp	r2, r3
 800528c:	f040 80c9 	bne.w	8005422 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005290:	4a6b      	ldr	r2, [pc, #428]	@ (8005440 <HAL_GPIO_DeInit+0x1e8>)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	089b      	lsrs	r3, r3, #2
 8005296:	3302      	adds	r3, #2
 8005298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800529c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	220f      	movs	r2, #15
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	4013      	ands	r3, r2
 80052b0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a63      	ldr	r2, [pc, #396]	@ (8005444 <HAL_GPIO_DeInit+0x1ec>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d037      	beq.n	800532a <HAL_GPIO_DeInit+0xd2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a62      	ldr	r2, [pc, #392]	@ (8005448 <HAL_GPIO_DeInit+0x1f0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d031      	beq.n	8005326 <HAL_GPIO_DeInit+0xce>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a61      	ldr	r2, [pc, #388]	@ (800544c <HAL_GPIO_DeInit+0x1f4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d02b      	beq.n	8005322 <HAL_GPIO_DeInit+0xca>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a60      	ldr	r2, [pc, #384]	@ (8005450 <HAL_GPIO_DeInit+0x1f8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d025      	beq.n	800531e <HAL_GPIO_DeInit+0xc6>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a5f      	ldr	r2, [pc, #380]	@ (8005454 <HAL_GPIO_DeInit+0x1fc>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d01f      	beq.n	800531a <HAL_GPIO_DeInit+0xc2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a5e      	ldr	r2, [pc, #376]	@ (8005458 <HAL_GPIO_DeInit+0x200>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d019      	beq.n	8005316 <HAL_GPIO_DeInit+0xbe>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a5d      	ldr	r2, [pc, #372]	@ (800545c <HAL_GPIO_DeInit+0x204>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d013      	beq.n	8005312 <HAL_GPIO_DeInit+0xba>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a5c      	ldr	r2, [pc, #368]	@ (8005460 <HAL_GPIO_DeInit+0x208>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00d      	beq.n	800530e <HAL_GPIO_DeInit+0xb6>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a5b      	ldr	r2, [pc, #364]	@ (8005464 <HAL_GPIO_DeInit+0x20c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d007      	beq.n	800530a <HAL_GPIO_DeInit+0xb2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a5a      	ldr	r2, [pc, #360]	@ (8005468 <HAL_GPIO_DeInit+0x210>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d101      	bne.n	8005306 <HAL_GPIO_DeInit+0xae>
 8005302:	2309      	movs	r3, #9
 8005304:	e012      	b.n	800532c <HAL_GPIO_DeInit+0xd4>
 8005306:	230a      	movs	r3, #10
 8005308:	e010      	b.n	800532c <HAL_GPIO_DeInit+0xd4>
 800530a:	2308      	movs	r3, #8
 800530c:	e00e      	b.n	800532c <HAL_GPIO_DeInit+0xd4>
 800530e:	2307      	movs	r3, #7
 8005310:	e00c      	b.n	800532c <HAL_GPIO_DeInit+0xd4>
 8005312:	2306      	movs	r3, #6
 8005314:	e00a      	b.n	800532c <HAL_GPIO_DeInit+0xd4>
 8005316:	2305      	movs	r3, #5
 8005318:	e008      	b.n	800532c <HAL_GPIO_DeInit+0xd4>
 800531a:	2304      	movs	r3, #4
 800531c:	e006      	b.n	800532c <HAL_GPIO_DeInit+0xd4>
 800531e:	2303      	movs	r3, #3
 8005320:	e004      	b.n	800532c <HAL_GPIO_DeInit+0xd4>
 8005322:	2302      	movs	r3, #2
 8005324:	e002      	b.n	800532c <HAL_GPIO_DeInit+0xd4>
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <HAL_GPIO_DeInit+0xd4>
 800532a:	2300      	movs	r3, #0
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	f002 0203 	and.w	r2, r2, #3
 8005332:	0092      	lsls	r2, r2, #2
 8005334:	4093      	lsls	r3, r2
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	429a      	cmp	r2, r3
 800533a:	d132      	bne.n	80053a2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800533c:	4b4b      	ldr	r3, [pc, #300]	@ (800546c <HAL_GPIO_DeInit+0x214>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	43db      	mvns	r3, r3
 8005344:	4949      	ldr	r1, [pc, #292]	@ (800546c <HAL_GPIO_DeInit+0x214>)
 8005346:	4013      	ands	r3, r2
 8005348:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800534a:	4b48      	ldr	r3, [pc, #288]	@ (800546c <HAL_GPIO_DeInit+0x214>)
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	43db      	mvns	r3, r3
 8005352:	4946      	ldr	r1, [pc, #280]	@ (800546c <HAL_GPIO_DeInit+0x214>)
 8005354:	4013      	ands	r3, r2
 8005356:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005358:	4b44      	ldr	r3, [pc, #272]	@ (800546c <HAL_GPIO_DeInit+0x214>)
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	43db      	mvns	r3, r3
 8005360:	4942      	ldr	r1, [pc, #264]	@ (800546c <HAL_GPIO_DeInit+0x214>)
 8005362:	4013      	ands	r3, r2
 8005364:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005366:	4b41      	ldr	r3, [pc, #260]	@ (800546c <HAL_GPIO_DeInit+0x214>)
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	43db      	mvns	r3, r3
 800536e:	493f      	ldr	r1, [pc, #252]	@ (800546c <HAL_GPIO_DeInit+0x214>)
 8005370:	4013      	ands	r3, r2
 8005372:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	220f      	movs	r2, #15
 800537e:	fa02 f303 	lsl.w	r3, r2, r3
 8005382:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005384:	4a2e      	ldr	r2, [pc, #184]	@ (8005440 <HAL_GPIO_DeInit+0x1e8>)
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	089b      	lsrs	r3, r3, #2
 800538a:	3302      	adds	r3, #2
 800538c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	43da      	mvns	r2, r3
 8005394:	482a      	ldr	r0, [pc, #168]	@ (8005440 <HAL_GPIO_DeInit+0x1e8>)
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	089b      	lsrs	r3, r3, #2
 800539a:	400a      	ands	r2, r1
 800539c:	3302      	adds	r3, #2
 800539e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	2103      	movs	r1, #3
 80053ac:	fa01 f303 	lsl.w	r3, r1, r3
 80053b0:	43db      	mvns	r3, r3
 80053b2:	401a      	ands	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	08da      	lsrs	r2, r3, #3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3208      	adds	r2, #8
 80053c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	220f      	movs	r2, #15
 80053ce:	fa02 f303 	lsl.w	r3, r2, r3
 80053d2:	43db      	mvns	r3, r3
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	08d2      	lsrs	r2, r2, #3
 80053d8:	4019      	ands	r1, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3208      	adds	r2, #8
 80053de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	2103      	movs	r1, #3
 80053ec:	fa01 f303 	lsl.w	r3, r1, r3
 80053f0:	43db      	mvns	r3, r3
 80053f2:	401a      	ands	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	2101      	movs	r1, #1
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	fa01 f303 	lsl.w	r3, r1, r3
 8005404:	43db      	mvns	r3, r3
 8005406:	401a      	ands	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	2103      	movs	r1, #3
 8005416:	fa01 f303 	lsl.w	r3, r1, r3
 800541a:	43db      	mvns	r3, r3
 800541c:	401a      	ands	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	3301      	adds	r3, #1
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2b0f      	cmp	r3, #15
 800542c:	f67f af22 	bls.w	8005274 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40013800 	.word	0x40013800
 8005444:	40020000 	.word	0x40020000
 8005448:	40020400 	.word	0x40020400
 800544c:	40020800 	.word	0x40020800
 8005450:	40020c00 	.word	0x40020c00
 8005454:	40021000 	.word	0x40021000
 8005458:	40021400 	.word	0x40021400
 800545c:	40021800 	.word	0x40021800
 8005460:	40021c00 	.word	0x40021c00
 8005464:	40022000 	.word	0x40022000
 8005468:	40022400 	.word	0x40022400
 800546c:	40013c00 	.word	0x40013c00

08005470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	460b      	mov	r3, r1
 800547a:	807b      	strh	r3, [r7, #2]
 800547c:	4613      	mov	r3, r2
 800547e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005480:	787b      	ldrb	r3, [r7, #1]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005486:	887a      	ldrh	r2, [r7, #2]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800548c:	e003      	b.n	8005496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800548e:	887b      	ldrh	r3, [r7, #2]
 8005490:	041a      	lsls	r2, r3, #16
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	619a      	str	r2, [r3, #24]
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
	...

080054a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e12b      	b.n	800570e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7fe fcc0 	bl	8003e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2224      	movs	r2, #36	@ 0x24
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0201 	bic.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005506:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005508:	f001 ff82 	bl	8007410 <HAL_RCC_GetPCLK1Freq>
 800550c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	4a81      	ldr	r2, [pc, #516]	@ (8005718 <HAL_I2C_Init+0x274>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d807      	bhi.n	8005528 <HAL_I2C_Init+0x84>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4a80      	ldr	r2, [pc, #512]	@ (800571c <HAL_I2C_Init+0x278>)
 800551c:	4293      	cmp	r3, r2
 800551e:	bf94      	ite	ls
 8005520:	2301      	movls	r3, #1
 8005522:	2300      	movhi	r3, #0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	e006      	b.n	8005536 <HAL_I2C_Init+0x92>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4a7d      	ldr	r2, [pc, #500]	@ (8005720 <HAL_I2C_Init+0x27c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	bf94      	ite	ls
 8005530:	2301      	movls	r3, #1
 8005532:	2300      	movhi	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e0e7      	b.n	800570e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4a78      	ldr	r2, [pc, #480]	@ (8005724 <HAL_I2C_Init+0x280>)
 8005542:	fba2 2303 	umull	r2, r3, r2, r3
 8005546:	0c9b      	lsrs	r3, r3, #18
 8005548:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4a6a      	ldr	r2, [pc, #424]	@ (8005718 <HAL_I2C_Init+0x274>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d802      	bhi.n	8005578 <HAL_I2C_Init+0xd4>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	3301      	adds	r3, #1
 8005576:	e009      	b.n	800558c <HAL_I2C_Init+0xe8>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800557e:	fb02 f303 	mul.w	r3, r2, r3
 8005582:	4a69      	ldr	r2, [pc, #420]	@ (8005728 <HAL_I2C_Init+0x284>)
 8005584:	fba2 2303 	umull	r2, r3, r2, r3
 8005588:	099b      	lsrs	r3, r3, #6
 800558a:	3301      	adds	r3, #1
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6812      	ldr	r2, [r2, #0]
 8005590:	430b      	orrs	r3, r1
 8005592:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800559e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	495c      	ldr	r1, [pc, #368]	@ (8005718 <HAL_I2C_Init+0x274>)
 80055a8:	428b      	cmp	r3, r1
 80055aa:	d819      	bhi.n	80055e0 <HAL_I2C_Init+0x13c>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	1e59      	subs	r1, r3, #1
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80055ba:	1c59      	adds	r1, r3, #1
 80055bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80055c0:	400b      	ands	r3, r1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_I2C_Init+0x138>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	1e59      	subs	r1, r3, #1
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80055d4:	3301      	adds	r3, #1
 80055d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055da:	e051      	b.n	8005680 <HAL_I2C_Init+0x1dc>
 80055dc:	2304      	movs	r3, #4
 80055de:	e04f      	b.n	8005680 <HAL_I2C_Init+0x1dc>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d111      	bne.n	800560c <HAL_I2C_Init+0x168>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	1e58      	subs	r0, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6859      	ldr	r1, [r3, #4]
 80055f0:	460b      	mov	r3, r1
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	440b      	add	r3, r1
 80055f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055fa:	3301      	adds	r3, #1
 80055fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005600:	2b00      	cmp	r3, #0
 8005602:	bf0c      	ite	eq
 8005604:	2301      	moveq	r3, #1
 8005606:	2300      	movne	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	e012      	b.n	8005632 <HAL_I2C_Init+0x18e>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	1e58      	subs	r0, r3, #1
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6859      	ldr	r1, [r3, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	0099      	lsls	r1, r3, #2
 800561c:	440b      	add	r3, r1
 800561e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005622:	3301      	adds	r3, #1
 8005624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005628:	2b00      	cmp	r3, #0
 800562a:	bf0c      	ite	eq
 800562c:	2301      	moveq	r3, #1
 800562e:	2300      	movne	r3, #0
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <HAL_I2C_Init+0x196>
 8005636:	2301      	movs	r3, #1
 8005638:	e022      	b.n	8005680 <HAL_I2C_Init+0x1dc>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10e      	bne.n	8005660 <HAL_I2C_Init+0x1bc>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	1e58      	subs	r0, r3, #1
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6859      	ldr	r1, [r3, #4]
 800564a:	460b      	mov	r3, r1
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	440b      	add	r3, r1
 8005650:	fbb0 f3f3 	udiv	r3, r0, r3
 8005654:	3301      	adds	r3, #1
 8005656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800565a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800565e:	e00f      	b.n	8005680 <HAL_I2C_Init+0x1dc>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	1e58      	subs	r0, r3, #1
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6859      	ldr	r1, [r3, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	0099      	lsls	r1, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	fbb0 f3f3 	udiv	r3, r0, r3
 8005676:	3301      	adds	r3, #1
 8005678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800567c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	6809      	ldr	r1, [r1, #0]
 8005684:	4313      	orrs	r3, r2
 8005686:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69da      	ldr	r2, [r3, #28]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80056ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6911      	ldr	r1, [r2, #16]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	68d2      	ldr	r2, [r2, #12]
 80056ba:	4311      	orrs	r1, r2
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6812      	ldr	r2, [r2, #0]
 80056c0:	430b      	orrs	r3, r1
 80056c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	695a      	ldr	r2, [r3, #20]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	000186a0 	.word	0x000186a0
 800571c:	001e847f 	.word	0x001e847f
 8005720:	003d08ff 	.word	0x003d08ff
 8005724:	431bde83 	.word	0x431bde83
 8005728:	10624dd3 	.word	0x10624dd3

0800572c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af02      	add	r7, sp, #8
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	4608      	mov	r0, r1
 8005736:	4611      	mov	r1, r2
 8005738:	461a      	mov	r2, r3
 800573a:	4603      	mov	r3, r0
 800573c:	817b      	strh	r3, [r7, #10]
 800573e:	460b      	mov	r3, r1
 8005740:	813b      	strh	r3, [r7, #8]
 8005742:	4613      	mov	r3, r2
 8005744:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005746:	f7ff fa23 	bl	8004b90 <HAL_GetTick>
 800574a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b20      	cmp	r3, #32
 8005756:	f040 80d9 	bne.w	800590c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	2319      	movs	r3, #25
 8005760:	2201      	movs	r2, #1
 8005762:	496d      	ldr	r1, [pc, #436]	@ (8005918 <HAL_I2C_Mem_Write+0x1ec>)
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 fc8b 	bl	8006080 <I2C_WaitOnFlagUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005770:	2302      	movs	r3, #2
 8005772:	e0cc      	b.n	800590e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_I2C_Mem_Write+0x56>
 800577e:	2302      	movs	r3, #2
 8005780:	e0c5      	b.n	800590e <HAL_I2C_Mem_Write+0x1e2>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b01      	cmp	r3, #1
 8005796:	d007      	beq.n	80057a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f042 0201 	orr.w	r2, r2, #1
 80057a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2221      	movs	r2, #33	@ 0x21
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2240      	movs	r2, #64	@ 0x40
 80057c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a3a      	ldr	r2, [r7, #32]
 80057d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80057d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4a4d      	ldr	r2, [pc, #308]	@ (800591c <HAL_I2C_Mem_Write+0x1f0>)
 80057e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057ea:	88f8      	ldrh	r0, [r7, #6]
 80057ec:	893a      	ldrh	r2, [r7, #8]
 80057ee:	8979      	ldrh	r1, [r7, #10]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	9301      	str	r3, [sp, #4]
 80057f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	4603      	mov	r3, r0
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 fac2 	bl	8005d84 <I2C_RequestMemoryWrite>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d052      	beq.n	80058ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e081      	b.n	800590e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 fd50 	bl	80062b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00d      	beq.n	8005836 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581e:	2b04      	cmp	r3, #4
 8005820:	d107      	bne.n	8005832 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005830:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e06b      	b.n	800590e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583a:	781a      	ldrb	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005850:	3b01      	subs	r3, #1
 8005852:	b29a      	uxth	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b04      	cmp	r3, #4
 8005872:	d11b      	bne.n	80058ac <HAL_I2C_Mem_Write+0x180>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005878:	2b00      	cmp	r3, #0
 800587a:	d017      	beq.n	80058ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005880:	781a      	ldrb	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1aa      	bne.n	800580a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 fd43 	bl	8006344 <I2C_WaitOnBTFFlagUntilTimeout>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00d      	beq.n	80058e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d107      	bne.n	80058dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e016      	b.n	800590e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005908:	2300      	movs	r3, #0
 800590a:	e000      	b.n	800590e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800590c:	2302      	movs	r3, #2
  }
}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	00100002 	.word	0x00100002
 800591c:	ffff0000 	.word	0xffff0000

08005920 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b08c      	sub	sp, #48	@ 0x30
 8005924:	af02      	add	r7, sp, #8
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	4608      	mov	r0, r1
 800592a:	4611      	mov	r1, r2
 800592c:	461a      	mov	r2, r3
 800592e:	4603      	mov	r3, r0
 8005930:	817b      	strh	r3, [r7, #10]
 8005932:	460b      	mov	r3, r1
 8005934:	813b      	strh	r3, [r7, #8]
 8005936:	4613      	mov	r3, r2
 8005938:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800593a:	f7ff f929 	bl	8004b90 <HAL_GetTick>
 800593e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b20      	cmp	r3, #32
 800594a:	f040 8214 	bne.w	8005d76 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	2319      	movs	r3, #25
 8005954:	2201      	movs	r2, #1
 8005956:	497b      	ldr	r1, [pc, #492]	@ (8005b44 <HAL_I2C_Mem_Read+0x224>)
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 fb91 	bl	8006080 <I2C_WaitOnFlagUntilTimeout>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005964:	2302      	movs	r3, #2
 8005966:	e207      	b.n	8005d78 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800596e:	2b01      	cmp	r3, #1
 8005970:	d101      	bne.n	8005976 <HAL_I2C_Mem_Read+0x56>
 8005972:	2302      	movs	r3, #2
 8005974:	e200      	b.n	8005d78 <HAL_I2C_Mem_Read+0x458>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b01      	cmp	r3, #1
 800598a:	d007      	beq.n	800599c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2222      	movs	r2, #34	@ 0x22
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2240      	movs	r2, #64	@ 0x40
 80059b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80059cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4a5b      	ldr	r2, [pc, #364]	@ (8005b48 <HAL_I2C_Mem_Read+0x228>)
 80059dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059de:	88f8      	ldrh	r0, [r7, #6]
 80059e0:	893a      	ldrh	r2, [r7, #8]
 80059e2:	8979      	ldrh	r1, [r7, #10]
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	9301      	str	r3, [sp, #4]
 80059e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	4603      	mov	r3, r0
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 fa5e 	bl	8005eb0 <I2C_RequestMemoryRead>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e1bc      	b.n	8005d78 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d113      	bne.n	8005a2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a06:	2300      	movs	r3, #0
 8005a08:	623b      	str	r3, [r7, #32]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	623b      	str	r3, [r7, #32]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	623b      	str	r3, [r7, #32]
 8005a1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	e190      	b.n	8005d50 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d11b      	bne.n	8005a6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a46:	2300      	movs	r3, #0
 8005a48:	61fb      	str	r3, [r7, #28]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	61fb      	str	r3, [r7, #28]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	61fb      	str	r3, [r7, #28]
 8005a5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	e170      	b.n	8005d50 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d11b      	bne.n	8005aae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a96:	2300      	movs	r3, #0
 8005a98:	61bb      	str	r3, [r7, #24]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	61bb      	str	r3, [r7, #24]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	61bb      	str	r3, [r7, #24]
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	e150      	b.n	8005d50 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	617b      	str	r3, [r7, #20]
 8005ac2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ac4:	e144      	b.n	8005d50 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	f200 80f1 	bhi.w	8005cb2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d123      	bne.n	8005b20 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ada:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 fc79 	bl	80063d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e145      	b.n	8005d78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b1e:	e117      	b.n	8005d50 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d14e      	bne.n	8005bc6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2e:	2200      	movs	r2, #0
 8005b30:	4906      	ldr	r1, [pc, #24]	@ (8005b4c <HAL_I2C_Mem_Read+0x22c>)
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 faa4 	bl	8006080 <I2C_WaitOnFlagUntilTimeout>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d008      	beq.n	8005b50 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e11a      	b.n	8005d78 <HAL_I2C_Mem_Read+0x458>
 8005b42:	bf00      	nop
 8005b44:	00100002 	.word	0x00100002
 8005b48:	ffff0000 	.word	0xffff0000
 8005b4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	691a      	ldr	r2, [r3, #16]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005bc4:	e0c4      	b.n	8005d50 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bcc:	2200      	movs	r2, #0
 8005bce:	496c      	ldr	r1, [pc, #432]	@ (8005d80 <HAL_I2C_Mem_Read+0x460>)
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 fa55 	bl	8006080 <I2C_WaitOnFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e0cb      	b.n	8005d78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691a      	ldr	r2, [r3, #16]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c28:	2200      	movs	r2, #0
 8005c2a:	4955      	ldr	r1, [pc, #340]	@ (8005d80 <HAL_I2C_Mem_Read+0x460>)
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 fa27 	bl	8006080 <I2C_WaitOnFlagUntilTimeout>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e09d      	b.n	8005d78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691a      	ldr	r2, [r3, #16]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005cb0:	e04e      	b.n	8005d50 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 fb8c 	bl	80063d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e058      	b.n	8005d78 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691a      	ldr	r2, [r3, #16]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd8:	1c5a      	adds	r2, r3, #1
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d124      	bne.n	8005d50 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d107      	bne.n	8005d1e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d1c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	691a      	ldr	r2, [r3, #16]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f47f aeb6 	bne.w	8005ac6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	e000      	b.n	8005d78 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005d76:	2302      	movs	r3, #2
  }
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3728      	adds	r7, #40	@ 0x28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	00010004 	.word	0x00010004

08005d84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	4611      	mov	r1, r2
 8005d90:	461a      	mov	r2, r3
 8005d92:	4603      	mov	r3, r0
 8005d94:	817b      	strh	r3, [r7, #10]
 8005d96:	460b      	mov	r3, r1
 8005d98:	813b      	strh	r3, [r7, #8]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 f960 	bl	8006080 <I2C_WaitOnFlagUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00d      	beq.n	8005de2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dd4:	d103      	bne.n	8005dde <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ddc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e05f      	b.n	8005ea2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005de2:	897b      	ldrh	r3, [r7, #10]
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	461a      	mov	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005df0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	6a3a      	ldr	r2, [r7, #32]
 8005df6:	492d      	ldr	r1, [pc, #180]	@ (8005eac <I2C_RequestMemoryWrite+0x128>)
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f9bb 	bl	8006174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e04c      	b.n	8005ea2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e08:	2300      	movs	r3, #0
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e20:	6a39      	ldr	r1, [r7, #32]
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 fa46 	bl	80062b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00d      	beq.n	8005e4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d107      	bne.n	8005e46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e02b      	b.n	8005ea2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e4a:	88fb      	ldrh	r3, [r7, #6]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d105      	bne.n	8005e5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e50:	893b      	ldrh	r3, [r7, #8]
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	611a      	str	r2, [r3, #16]
 8005e5a:	e021      	b.n	8005ea0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e5c:	893b      	ldrh	r3, [r7, #8]
 8005e5e:	0a1b      	lsrs	r3, r3, #8
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e6c:	6a39      	ldr	r1, [r7, #32]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 fa20 	bl	80062b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00d      	beq.n	8005e96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d107      	bne.n	8005e92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e005      	b.n	8005ea2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e96:	893b      	ldrh	r3, [r7, #8]
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	00010002 	.word	0x00010002

08005eb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af02      	add	r7, sp, #8
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	4608      	mov	r0, r1
 8005eba:	4611      	mov	r1, r2
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	817b      	strh	r3, [r7, #10]
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	813b      	strh	r3, [r7, #8]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ed8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ee8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 f8c2 	bl	8006080 <I2C_WaitOnFlagUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00d      	beq.n	8005f1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f10:	d103      	bne.n	8005f1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f18:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e0aa      	b.n	8006074 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f1e:	897b      	ldrh	r3, [r7, #10]
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	461a      	mov	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005f2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	6a3a      	ldr	r2, [r7, #32]
 8005f32:	4952      	ldr	r1, [pc, #328]	@ (800607c <I2C_RequestMemoryRead+0x1cc>)
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 f91d 	bl	8006174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e097      	b.n	8006074 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f5c:	6a39      	ldr	r1, [r7, #32]
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 f9a8 	bl	80062b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00d      	beq.n	8005f86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	d107      	bne.n	8005f82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e076      	b.n	8006074 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f86:	88fb      	ldrh	r3, [r7, #6]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d105      	bne.n	8005f98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f8c:	893b      	ldrh	r3, [r7, #8]
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	611a      	str	r2, [r3, #16]
 8005f96:	e021      	b.n	8005fdc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f98:	893b      	ldrh	r3, [r7, #8]
 8005f9a:	0a1b      	lsrs	r3, r3, #8
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fa8:	6a39      	ldr	r1, [r7, #32]
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 f982 	bl	80062b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00d      	beq.n	8005fd2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d107      	bne.n	8005fce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e050      	b.n	8006074 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fd2:	893b      	ldrh	r3, [r7, #8]
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fde:	6a39      	ldr	r1, [r7, #32]
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 f967 	bl	80062b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00d      	beq.n	8006008 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d107      	bne.n	8006004 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006002:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e035      	b.n	8006074 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006016:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	2200      	movs	r2, #0
 8006020:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f82b 	bl	8006080 <I2C_WaitOnFlagUntilTimeout>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00d      	beq.n	800604c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800603a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800603e:	d103      	bne.n	8006048 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006046:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e013      	b.n	8006074 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800604c:	897b      	ldrh	r3, [r7, #10]
 800604e:	b2db      	uxtb	r3, r3
 8006050:	f043 0301 	orr.w	r3, r3, #1
 8006054:	b2da      	uxtb	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800605c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605e:	6a3a      	ldr	r2, [r7, #32]
 8006060:	4906      	ldr	r1, [pc, #24]	@ (800607c <I2C_RequestMemoryRead+0x1cc>)
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 f886 	bl	8006174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e000      	b.n	8006074 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	00010002 	.word	0x00010002

08006080 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	4613      	mov	r3, r2
 800608e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006090:	e048      	b.n	8006124 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006098:	d044      	beq.n	8006124 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800609a:	f7fe fd79 	bl	8004b90 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d302      	bcc.n	80060b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d139      	bne.n	8006124 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	0c1b      	lsrs	r3, r3, #16
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d10d      	bne.n	80060d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	43da      	mvns	r2, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	4013      	ands	r3, r2
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	bf0c      	ite	eq
 80060cc:	2301      	moveq	r3, #1
 80060ce:	2300      	movne	r3, #0
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	461a      	mov	r2, r3
 80060d4:	e00c      	b.n	80060f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	43da      	mvns	r2, r3
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	4013      	ands	r3, r2
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	bf0c      	ite	eq
 80060e8:	2301      	moveq	r3, #1
 80060ea:	2300      	movne	r3, #0
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	461a      	mov	r2, r3
 80060f0:	79fb      	ldrb	r3, [r7, #7]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d116      	bne.n	8006124 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2220      	movs	r2, #32
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006110:	f043 0220 	orr.w	r2, r3, #32
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e023      	b.n	800616c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	0c1b      	lsrs	r3, r3, #16
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b01      	cmp	r3, #1
 800612c:	d10d      	bne.n	800614a <I2C_WaitOnFlagUntilTimeout+0xca>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	43da      	mvns	r2, r3
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	4013      	ands	r3, r2
 800613a:	b29b      	uxth	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	bf0c      	ite	eq
 8006140:	2301      	moveq	r3, #1
 8006142:	2300      	movne	r3, #0
 8006144:	b2db      	uxtb	r3, r3
 8006146:	461a      	mov	r2, r3
 8006148:	e00c      	b.n	8006164 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	43da      	mvns	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	4013      	ands	r3, r2
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	bf0c      	ite	eq
 800615c:	2301      	moveq	r3, #1
 800615e:	2300      	movne	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	461a      	mov	r2, r3
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	429a      	cmp	r2, r3
 8006168:	d093      	beq.n	8006092 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
 8006180:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006182:	e071      	b.n	8006268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800618e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006192:	d123      	bne.n	80061dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80061ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2220      	movs	r2, #32
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c8:	f043 0204 	orr.w	r2, r3, #4
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e067      	b.n	80062ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e2:	d041      	beq.n	8006268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e4:	f7fe fcd4 	bl	8004b90 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d302      	bcc.n	80061fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d136      	bne.n	8006268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	0c1b      	lsrs	r3, r3, #16
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b01      	cmp	r3, #1
 8006202:	d10c      	bne.n	800621e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	43da      	mvns	r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4013      	ands	r3, r2
 8006210:	b29b      	uxth	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	bf14      	ite	ne
 8006216:	2301      	movne	r3, #1
 8006218:	2300      	moveq	r3, #0
 800621a:	b2db      	uxtb	r3, r3
 800621c:	e00b      	b.n	8006236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	43da      	mvns	r2, r3
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	4013      	ands	r3, r2
 800622a:	b29b      	uxth	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	bf14      	ite	ne
 8006230:	2301      	movne	r3, #1
 8006232:	2300      	moveq	r3, #0
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d016      	beq.n	8006268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006254:	f043 0220 	orr.w	r2, r3, #32
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e021      	b.n	80062ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	0c1b      	lsrs	r3, r3, #16
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b01      	cmp	r3, #1
 8006270:	d10c      	bne.n	800628c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	43da      	mvns	r2, r3
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	4013      	ands	r3, r2
 800627e:	b29b      	uxth	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	bf14      	ite	ne
 8006284:	2301      	movne	r3, #1
 8006286:	2300      	moveq	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	e00b      	b.n	80062a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	43da      	mvns	r2, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	4013      	ands	r3, r2
 8006298:	b29b      	uxth	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	bf14      	ite	ne
 800629e:	2301      	movne	r3, #1
 80062a0:	2300      	moveq	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f47f af6d 	bne.w	8006184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062c0:	e034      	b.n	800632c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f000 f8e3 	bl	800648e <I2C_IsAcknowledgeFailed>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e034      	b.n	800633c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d8:	d028      	beq.n	800632c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062da:	f7fe fc59 	bl	8004b90 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d302      	bcc.n	80062f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d11d      	bne.n	800632c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062fa:	2b80      	cmp	r3, #128	@ 0x80
 80062fc:	d016      	beq.n	800632c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2220      	movs	r2, #32
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006318:	f043 0220 	orr.w	r2, r3, #32
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e007      	b.n	800633c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006336:	2b80      	cmp	r3, #128	@ 0x80
 8006338:	d1c3      	bne.n	80062c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006350:	e034      	b.n	80063bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 f89b 	bl	800648e <I2C_IsAcknowledgeFailed>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e034      	b.n	80063cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006368:	d028      	beq.n	80063bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800636a:	f7fe fc11 	bl	8004b90 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	429a      	cmp	r2, r3
 8006378:	d302      	bcc.n	8006380 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d11d      	bne.n	80063bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	f003 0304 	and.w	r3, r3, #4
 800638a:	2b04      	cmp	r3, #4
 800638c:	d016      	beq.n	80063bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a8:	f043 0220 	orr.w	r2, r3, #32
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e007      	b.n	80063cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	f003 0304 	and.w	r3, r3, #4
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d1c3      	bne.n	8006352 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063e0:	e049      	b.n	8006476 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	f003 0310 	and.w	r3, r3, #16
 80063ec:	2b10      	cmp	r3, #16
 80063ee:	d119      	bne.n	8006424 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f06f 0210 	mvn.w	r2, #16
 80063f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2220      	movs	r2, #32
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e030      	b.n	8006486 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006424:	f7fe fbb4 	bl	8004b90 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	429a      	cmp	r2, r3
 8006432:	d302      	bcc.n	800643a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d11d      	bne.n	8006476 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006444:	2b40      	cmp	r3, #64	@ 0x40
 8006446:	d016      	beq.n	8006476 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006462:	f043 0220 	orr.w	r2, r3, #32
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e007      	b.n	8006486 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006480:	2b40      	cmp	r3, #64	@ 0x40
 8006482:	d1ae      	bne.n	80063e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064a4:	d11b      	bne.n	80064de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2220      	movs	r2, #32
 80064ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ca:	f043 0204 	orr.w	r2, r3, #4
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e000      	b.n	80064e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b20      	cmp	r3, #32
 8006500:	d129      	bne.n	8006556 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2224      	movs	r2, #36	@ 0x24
 8006506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 0201 	bic.w	r2, r2, #1
 8006518:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0210 	bic.w	r2, r2, #16
 8006528:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f042 0201 	orr.w	r2, r2, #1
 8006548:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2220      	movs	r2, #32
 800654e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	e000      	b.n	8006558 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006556:	2302      	movs	r3, #2
  }
}
 8006558:	4618      	mov	r0, r3
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800656e:	2300      	movs	r3, #0
 8006570:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b20      	cmp	r3, #32
 800657c:	d12a      	bne.n	80065d4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2224      	movs	r2, #36	@ 0x24
 8006582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0201 	bic.w	r2, r2, #1
 8006594:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800659e:	89fb      	ldrh	r3, [r7, #14]
 80065a0:	f023 030f 	bic.w	r3, r3, #15
 80065a4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	89fb      	ldrh	r3, [r7, #14]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	89fa      	ldrh	r2, [r7, #14]
 80065b6:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0201 	orr.w	r2, r2, #1
 80065c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	e000      	b.n	80065d6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80065d4:	2302      	movs	r3, #2
  }
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
	...

080065e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e0bf      	b.n	8006776 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d106      	bne.n	8006610 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7fd fc8a 	bl	8003f24 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006626:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6999      	ldr	r1, [r3, #24]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800663c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6899      	ldr	r1, [r3, #8]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	4b4a      	ldr	r3, [pc, #296]	@ (8006780 <HAL_LTDC_Init+0x19c>)
 8006658:	400b      	ands	r3, r1
 800665a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	041b      	lsls	r3, r3, #16
 8006662:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6899      	ldr	r1, [r3, #8]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	699a      	ldr	r2, [r3, #24]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68d9      	ldr	r1, [r3, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	4b3e      	ldr	r3, [pc, #248]	@ (8006780 <HAL_LTDC_Init+0x19c>)
 8006686:	400b      	ands	r3, r1
 8006688:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	041b      	lsls	r3, r3, #16
 8006690:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68d9      	ldr	r1, [r3, #12]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a1a      	ldr	r2, [r3, #32]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	431a      	orrs	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	430a      	orrs	r2, r1
 80066a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6919      	ldr	r1, [r3, #16]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	4b33      	ldr	r3, [pc, #204]	@ (8006780 <HAL_LTDC_Init+0x19c>)
 80066b4:	400b      	ands	r3, r1
 80066b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066bc:	041b      	lsls	r3, r3, #16
 80066be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6919      	ldr	r1, [r3, #16]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	431a      	orrs	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6959      	ldr	r1, [r3, #20]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	4b27      	ldr	r3, [pc, #156]	@ (8006780 <HAL_LTDC_Init+0x19c>)
 80066e2:	400b      	ands	r3, r1
 80066e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ea:	041b      	lsls	r3, r3, #16
 80066ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6959      	ldr	r1, [r3, #20]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006714:	041b      	lsls	r3, r3, #16
 8006716:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006726:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0206 	orr.w	r2, r2, #6
 8006752:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699a      	ldr	r2, [r3, #24]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0201 	orr.w	r2, r2, #1
 8006762:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	f000f800 	.word	0xf000f800

08006784 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006784:	b5b0      	push	{r4, r5, r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006796:	2b01      	cmp	r3, #1
 8006798:	d101      	bne.n	800679e <HAL_LTDC_ConfigLayer+0x1a>
 800679a:	2302      	movs	r3, #2
 800679c:	e02c      	b.n	80067f8 <HAL_LTDC_ConfigLayer+0x74>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2202      	movs	r2, #2
 80067aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2134      	movs	r1, #52	@ 0x34
 80067b4:	fb01 f303 	mul.w	r3, r1, r3
 80067b8:	4413      	add	r3, r2
 80067ba:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	4614      	mov	r4, r2
 80067c2:	461d      	mov	r5, r3
 80067c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067d0:	682b      	ldr	r3, [r5, #0]
 80067d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	68b9      	ldr	r1, [r7, #8]
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 f811 	bl	8006800 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2201      	movs	r2, #1
 80067e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bdb0      	pop	{r4, r5, r7, pc}

08006800 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006800:	b480      	push	{r7}
 8006802:	b089      	sub	sp, #36	@ 0x24
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	0c1b      	lsrs	r3, r3, #16
 8006818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800681c:	4413      	add	r3, r2
 800681e:	041b      	lsls	r3, r3, #16
 8006820:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	461a      	mov	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	01db      	lsls	r3, r3, #7
 800682c:	4413      	add	r3, r2
 800682e:	3384      	adds	r3, #132	@ 0x84
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	6812      	ldr	r2, [r2, #0]
 8006836:	4611      	mov	r1, r2
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	01d2      	lsls	r2, r2, #7
 800683c:	440a      	add	r2, r1
 800683e:	3284      	adds	r2, #132	@ 0x84
 8006840:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006844:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	0c1b      	lsrs	r3, r3, #16
 8006852:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006856:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006858:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4619      	mov	r1, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	01db      	lsls	r3, r3, #7
 8006864:	440b      	add	r3, r1
 8006866:	3384      	adds	r3, #132	@ 0x84
 8006868:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800686e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	68da      	ldr	r2, [r3, #12]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800687e:	4413      	add	r3, r2
 8006880:	041b      	lsls	r3, r3, #16
 8006882:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	461a      	mov	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	01db      	lsls	r3, r3, #7
 800688e:	4413      	add	r3, r2
 8006890:	3384      	adds	r3, #132	@ 0x84
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	6812      	ldr	r2, [r2, #0]
 8006898:	4611      	mov	r1, r2
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	01d2      	lsls	r2, r2, #7
 800689e:	440a      	add	r2, r1
 80068a0:	3284      	adds	r2, #132	@ 0x84
 80068a2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80068a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068b6:	4413      	add	r3, r2
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4619      	mov	r1, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	01db      	lsls	r3, r3, #7
 80068c4:	440b      	add	r3, r1
 80068c6:	3384      	adds	r3, #132	@ 0x84
 80068c8:	4619      	mov	r1, r3
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	461a      	mov	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	01db      	lsls	r3, r3, #7
 80068da:	4413      	add	r3, r2
 80068dc:	3384      	adds	r3, #132	@ 0x84
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	6812      	ldr	r2, [r2, #0]
 80068e4:	4611      	mov	r1, r2
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	01d2      	lsls	r2, r2, #7
 80068ea:	440a      	add	r2, r1
 80068ec:	3284      	adds	r2, #132	@ 0x84
 80068ee:	f023 0307 	bic.w	r3, r3, #7
 80068f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	461a      	mov	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	01db      	lsls	r3, r3, #7
 80068fe:	4413      	add	r3, r2
 8006900:	3384      	adds	r3, #132	@ 0x84
 8006902:	461a      	mov	r2, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006910:	021b      	lsls	r3, r3, #8
 8006912:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800691a:	041b      	lsls	r3, r3, #16
 800691c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	061b      	lsls	r3, r3, #24
 8006924:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	461a      	mov	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	01db      	lsls	r3, r3, #7
 8006930:	4413      	add	r3, r2
 8006932:	3384      	adds	r3, #132	@ 0x84
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	01db      	lsls	r3, r3, #7
 8006940:	4413      	add	r3, r2
 8006942:	3384      	adds	r3, #132	@ 0x84
 8006944:	461a      	mov	r2, r3
 8006946:	2300      	movs	r3, #0
 8006948:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006950:	461a      	mov	r2, r3
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	431a      	orrs	r2, r3
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	431a      	orrs	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4619      	mov	r1, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	01db      	lsls	r3, r3, #7
 8006964:	440b      	add	r3, r1
 8006966:	3384      	adds	r3, #132	@ 0x84
 8006968:	4619      	mov	r1, r3
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	4313      	orrs	r3, r2
 800696e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	461a      	mov	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	01db      	lsls	r3, r3, #7
 800697a:	4413      	add	r3, r2
 800697c:	3384      	adds	r3, #132	@ 0x84
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	6812      	ldr	r2, [r2, #0]
 8006984:	4611      	mov	r1, r2
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	01d2      	lsls	r2, r2, #7
 800698a:	440a      	add	r2, r1
 800698c:	3284      	adds	r2, #132	@ 0x84
 800698e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006992:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	461a      	mov	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	01db      	lsls	r3, r3, #7
 800699e:	4413      	add	r3, r2
 80069a0:	3384      	adds	r3, #132	@ 0x84
 80069a2:	461a      	mov	r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	01db      	lsls	r3, r3, #7
 80069b4:	4413      	add	r3, r2
 80069b6:	3384      	adds	r3, #132	@ 0x84
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	6812      	ldr	r2, [r2, #0]
 80069be:	4611      	mov	r1, r2
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	01d2      	lsls	r2, r2, #7
 80069c4:	440a      	add	r2, r1
 80069c6:	3284      	adds	r2, #132	@ 0x84
 80069c8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80069cc:	f023 0307 	bic.w	r3, r3, #7
 80069d0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	69da      	ldr	r2, [r3, #28]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	68f9      	ldr	r1, [r7, #12]
 80069dc:	6809      	ldr	r1, [r1, #0]
 80069de:	4608      	mov	r0, r1
 80069e0:	6879      	ldr	r1, [r7, #4]
 80069e2:	01c9      	lsls	r1, r1, #7
 80069e4:	4401      	add	r1, r0
 80069e6:	3184      	adds	r1, #132	@ 0x84
 80069e8:	4313      	orrs	r3, r2
 80069ea:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	461a      	mov	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	01db      	lsls	r3, r3, #7
 80069f6:	4413      	add	r3, r2
 80069f8:	3384      	adds	r3, #132	@ 0x84
 80069fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	461a      	mov	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	01db      	lsls	r3, r3, #7
 8006a06:	4413      	add	r3, r2
 8006a08:	3384      	adds	r3, #132	@ 0x84
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	461a      	mov	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	01db      	lsls	r3, r3, #7
 8006a1a:	4413      	add	r3, r2
 8006a1c:	3384      	adds	r3, #132	@ 0x84
 8006a1e:	461a      	mov	r2, r3
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a24:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d102      	bne.n	8006a34 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006a2e:	2304      	movs	r3, #4
 8006a30:	61fb      	str	r3, [r7, #28]
 8006a32:	e01b      	b.n	8006a6c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d102      	bne.n	8006a42 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	61fb      	str	r3, [r7, #28]
 8006a40:	e014      	b.n	8006a6c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d00b      	beq.n	8006a62 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d007      	beq.n	8006a62 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d003      	beq.n	8006a62 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006a5e:	2b07      	cmp	r3, #7
 8006a60:	d102      	bne.n	8006a68 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006a62:	2302      	movs	r3, #2
 8006a64:	61fb      	str	r3, [r7, #28]
 8006a66:	e001      	b.n	8006a6c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	461a      	mov	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	01db      	lsls	r3, r3, #7
 8006a76:	4413      	add	r3, r2
 8006a78:	3384      	adds	r3, #132	@ 0x84
 8006a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	6812      	ldr	r2, [r2, #0]
 8006a80:	4611      	mov	r1, r2
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	01d2      	lsls	r2, r2, #7
 8006a86:	440a      	add	r2, r1
 8006a88:	3284      	adds	r2, #132	@ 0x84
 8006a8a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006a8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a94:	69fa      	ldr	r2, [r7, #28]
 8006a96:	fb02 f303 	mul.w	r3, r2, r3
 8006a9a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	6859      	ldr	r1, [r3, #4]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	1acb      	subs	r3, r1, r3
 8006aa6:	69f9      	ldr	r1, [r7, #28]
 8006aa8:	fb01 f303 	mul.w	r3, r1, r3
 8006aac:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006aae:	68f9      	ldr	r1, [r7, #12]
 8006ab0:	6809      	ldr	r1, [r1, #0]
 8006ab2:	4608      	mov	r0, r1
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	01c9      	lsls	r1, r1, #7
 8006ab8:	4401      	add	r1, r0
 8006aba:	3184      	adds	r1, #132	@ 0x84
 8006abc:	4313      	orrs	r3, r2
 8006abe:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	01db      	lsls	r3, r3, #7
 8006aca:	4413      	add	r3, r2
 8006acc:	3384      	adds	r3, #132	@ 0x84
 8006ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	6812      	ldr	r2, [r2, #0]
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	01d2      	lsls	r2, r2, #7
 8006ada:	440a      	add	r2, r1
 8006adc:	3284      	adds	r2, #132	@ 0x84
 8006ade:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006ae2:	f023 0307 	bic.w	r3, r3, #7
 8006ae6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	461a      	mov	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	01db      	lsls	r3, r3, #7
 8006af2:	4413      	add	r3, r2
 8006af4:	3384      	adds	r3, #132	@ 0x84
 8006af6:	461a      	mov	r2, r3
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	01db      	lsls	r3, r3, #7
 8006b08:	4413      	add	r3, r2
 8006b0a:	3384      	adds	r3, #132	@ 0x84
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	6812      	ldr	r2, [r2, #0]
 8006b12:	4611      	mov	r1, r2
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	01d2      	lsls	r2, r2, #7
 8006b18:	440a      	add	r2, r1
 8006b1a:	3284      	adds	r2, #132	@ 0x84
 8006b1c:	f043 0301 	orr.w	r3, r3, #1
 8006b20:	6013      	str	r3, [r2, #0]
}
 8006b22:	bf00      	nop
 8006b24:	3724      	adds	r7, #36	@ 0x24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
	...

08006b30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e267      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d075      	beq.n	8006c3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006b4e:	4b88      	ldr	r3, [pc, #544]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f003 030c 	and.w	r3, r3, #12
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d00c      	beq.n	8006b74 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b5a:	4b85      	ldr	r3, [pc, #532]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006b62:	2b08      	cmp	r3, #8
 8006b64:	d112      	bne.n	8006b8c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b66:	4b82      	ldr	r3, [pc, #520]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b72:	d10b      	bne.n	8006b8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b74:	4b7e      	ldr	r3, [pc, #504]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d05b      	beq.n	8006c38 <HAL_RCC_OscConfig+0x108>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d157      	bne.n	8006c38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e242      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b94:	d106      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x74>
 8006b96:	4b76      	ldr	r3, [pc, #472]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a75      	ldr	r2, [pc, #468]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	e01d      	b.n	8006be0 <HAL_RCC_OscConfig+0xb0>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006bac:	d10c      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x98>
 8006bae:	4b70      	ldr	r3, [pc, #448]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a6f      	ldr	r2, [pc, #444]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bb8:	6013      	str	r3, [r2, #0]
 8006bba:	4b6d      	ldr	r3, [pc, #436]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a6c      	ldr	r2, [pc, #432]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bc4:	6013      	str	r3, [r2, #0]
 8006bc6:	e00b      	b.n	8006be0 <HAL_RCC_OscConfig+0xb0>
 8006bc8:	4b69      	ldr	r3, [pc, #420]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a68      	ldr	r2, [pc, #416]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bd2:	6013      	str	r3, [r2, #0]
 8006bd4:	4b66      	ldr	r3, [pc, #408]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a65      	ldr	r2, [pc, #404]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d013      	beq.n	8006c10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be8:	f7fd ffd2 	bl	8004b90 <HAL_GetTick>
 8006bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bee:	e008      	b.n	8006c02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bf0:	f7fd ffce 	bl	8004b90 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b64      	cmp	r3, #100	@ 0x64
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e207      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c02:	4b5b      	ldr	r3, [pc, #364]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0f0      	beq.n	8006bf0 <HAL_RCC_OscConfig+0xc0>
 8006c0e:	e014      	b.n	8006c3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c10:	f7fd ffbe 	bl	8004b90 <HAL_GetTick>
 8006c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c16:	e008      	b.n	8006c2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c18:	f7fd ffba 	bl	8004b90 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b64      	cmp	r3, #100	@ 0x64
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e1f3      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c2a:	4b51      	ldr	r3, [pc, #324]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1f0      	bne.n	8006c18 <HAL_RCC_OscConfig+0xe8>
 8006c36:	e000      	b.n	8006c3a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d063      	beq.n	8006d0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006c46:	4b4a      	ldr	r3, [pc, #296]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f003 030c 	and.w	r3, r3, #12
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00b      	beq.n	8006c6a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c52:	4b47      	ldr	r3, [pc, #284]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006c5a:	2b08      	cmp	r3, #8
 8006c5c:	d11c      	bne.n	8006c98 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c5e:	4b44      	ldr	r3, [pc, #272]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d116      	bne.n	8006c98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c6a:	4b41      	ldr	r3, [pc, #260]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d005      	beq.n	8006c82 <HAL_RCC_OscConfig+0x152>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d001      	beq.n	8006c82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e1c7      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c82:	4b3b      	ldr	r3, [pc, #236]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	00db      	lsls	r3, r3, #3
 8006c90:	4937      	ldr	r1, [pc, #220]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c96:	e03a      	b.n	8006d0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d020      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ca0:	4b34      	ldr	r3, [pc, #208]	@ (8006d74 <HAL_RCC_OscConfig+0x244>)
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca6:	f7fd ff73 	bl	8004b90 <HAL_GetTick>
 8006caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cac:	e008      	b.n	8006cc0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cae:	f7fd ff6f 	bl	8004b90 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e1a8      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0302 	and.w	r3, r3, #2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0f0      	beq.n	8006cae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ccc:	4b28      	ldr	r3, [pc, #160]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	00db      	lsls	r3, r3, #3
 8006cda:	4925      	ldr	r1, [pc, #148]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	600b      	str	r3, [r1, #0]
 8006ce0:	e015      	b.n	8006d0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ce2:	4b24      	ldr	r3, [pc, #144]	@ (8006d74 <HAL_RCC_OscConfig+0x244>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce8:	f7fd ff52 	bl	8004b90 <HAL_GetTick>
 8006cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cf0:	f7fd ff4e 	bl	8004b90 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e187      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d02:	4b1b      	ldr	r3, [pc, #108]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1f0      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0308 	and.w	r3, r3, #8
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d036      	beq.n	8006d88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d016      	beq.n	8006d50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d22:	4b15      	ldr	r3, [pc, #84]	@ (8006d78 <HAL_RCC_OscConfig+0x248>)
 8006d24:	2201      	movs	r2, #1
 8006d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d28:	f7fd ff32 	bl	8004b90 <HAL_GetTick>
 8006d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d2e:	e008      	b.n	8006d42 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d30:	f7fd ff2e 	bl	8004b90 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e167      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d42:	4b0b      	ldr	r3, [pc, #44]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0f0      	beq.n	8006d30 <HAL_RCC_OscConfig+0x200>
 8006d4e:	e01b      	b.n	8006d88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d50:	4b09      	ldr	r3, [pc, #36]	@ (8006d78 <HAL_RCC_OscConfig+0x248>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d56:	f7fd ff1b 	bl	8004b90 <HAL_GetTick>
 8006d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d5c:	e00e      	b.n	8006d7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d5e:	f7fd ff17 	bl	8004b90 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d907      	bls.n	8006d7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e150      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
 8006d70:	40023800 	.word	0x40023800
 8006d74:	42470000 	.word	0x42470000
 8006d78:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d7c:	4b88      	ldr	r3, [pc, #544]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006d7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d80:	f003 0302 	and.w	r3, r3, #2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1ea      	bne.n	8006d5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 8097 	beq.w	8006ec4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d96:	2300      	movs	r3, #0
 8006d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d9a:	4b81      	ldr	r3, [pc, #516]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10f      	bne.n	8006dc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006da6:	2300      	movs	r3, #0
 8006da8:	60bb      	str	r3, [r7, #8]
 8006daa:	4b7d      	ldr	r3, [pc, #500]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dae:	4a7c      	ldr	r2, [pc, #496]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8006db6:	4b7a      	ldr	r3, [pc, #488]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dbe:	60bb      	str	r3, [r7, #8]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dc6:	4b77      	ldr	r3, [pc, #476]	@ (8006fa4 <HAL_RCC_OscConfig+0x474>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d118      	bne.n	8006e04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dd2:	4b74      	ldr	r3, [pc, #464]	@ (8006fa4 <HAL_RCC_OscConfig+0x474>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a73      	ldr	r2, [pc, #460]	@ (8006fa4 <HAL_RCC_OscConfig+0x474>)
 8006dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dde:	f7fd fed7 	bl	8004b90 <HAL_GetTick>
 8006de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006de4:	e008      	b.n	8006df8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006de6:	f7fd fed3 	bl	8004b90 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d901      	bls.n	8006df8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e10c      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006df8:	4b6a      	ldr	r3, [pc, #424]	@ (8006fa4 <HAL_RCC_OscConfig+0x474>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d0f0      	beq.n	8006de6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d106      	bne.n	8006e1a <HAL_RCC_OscConfig+0x2ea>
 8006e0c:	4b64      	ldr	r3, [pc, #400]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e10:	4a63      	ldr	r2, [pc, #396]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e12:	f043 0301 	orr.w	r3, r3, #1
 8006e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e18:	e01c      	b.n	8006e54 <HAL_RCC_OscConfig+0x324>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	2b05      	cmp	r3, #5
 8006e20:	d10c      	bne.n	8006e3c <HAL_RCC_OscConfig+0x30c>
 8006e22:	4b5f      	ldr	r3, [pc, #380]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e26:	4a5e      	ldr	r2, [pc, #376]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e28:	f043 0304 	orr.w	r3, r3, #4
 8006e2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e2e:	4b5c      	ldr	r3, [pc, #368]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e32:	4a5b      	ldr	r2, [pc, #364]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e34:	f043 0301 	orr.w	r3, r3, #1
 8006e38:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e3a:	e00b      	b.n	8006e54 <HAL_RCC_OscConfig+0x324>
 8006e3c:	4b58      	ldr	r3, [pc, #352]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e40:	4a57      	ldr	r2, [pc, #348]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e42:	f023 0301 	bic.w	r3, r3, #1
 8006e46:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e48:	4b55      	ldr	r3, [pc, #340]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e4c:	4a54      	ldr	r2, [pc, #336]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e4e:	f023 0304 	bic.w	r3, r3, #4
 8006e52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d015      	beq.n	8006e88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e5c:	f7fd fe98 	bl	8004b90 <HAL_GetTick>
 8006e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e62:	e00a      	b.n	8006e7a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e64:	f7fd fe94 	bl	8004b90 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d901      	bls.n	8006e7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e0cb      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e7a:	4b49      	ldr	r3, [pc, #292]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e7e:	f003 0302 	and.w	r3, r3, #2
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d0ee      	beq.n	8006e64 <HAL_RCC_OscConfig+0x334>
 8006e86:	e014      	b.n	8006eb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e88:	f7fd fe82 	bl	8004b90 <HAL_GetTick>
 8006e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e8e:	e00a      	b.n	8006ea6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e90:	f7fd fe7e 	bl	8004b90 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e0b5      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1ee      	bne.n	8006e90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006eb2:	7dfb      	ldrb	r3, [r7, #23]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d105      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eb8:	4b39      	ldr	r3, [pc, #228]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ebc:	4a38      	ldr	r2, [pc, #224]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006ebe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ec2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 80a1 	beq.w	8007010 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ece:	4b34      	ldr	r3, [pc, #208]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f003 030c 	and.w	r3, r3, #12
 8006ed6:	2b08      	cmp	r3, #8
 8006ed8:	d05c      	beq.n	8006f94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d141      	bne.n	8006f66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ee2:	4b31      	ldr	r3, [pc, #196]	@ (8006fa8 <HAL_RCC_OscConfig+0x478>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee8:	f7fd fe52 	bl	8004b90 <HAL_GetTick>
 8006eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ef0:	f7fd fe4e 	bl	8004b90 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e087      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f02:	4b27      	ldr	r3, [pc, #156]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1f0      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69da      	ldr	r2, [r3, #28]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1c:	019b      	lsls	r3, r3, #6
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f24:	085b      	lsrs	r3, r3, #1
 8006f26:	3b01      	subs	r3, #1
 8006f28:	041b      	lsls	r3, r3, #16
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f30:	061b      	lsls	r3, r3, #24
 8006f32:	491b      	ldr	r1, [pc, #108]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f38:	4b1b      	ldr	r3, [pc, #108]	@ (8006fa8 <HAL_RCC_OscConfig+0x478>)
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f3e:	f7fd fe27 	bl	8004b90 <HAL_GetTick>
 8006f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f44:	e008      	b.n	8006f58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f46:	f7fd fe23 	bl	8004b90 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d901      	bls.n	8006f58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e05c      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f58:	4b11      	ldr	r3, [pc, #68]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d0f0      	beq.n	8006f46 <HAL_RCC_OscConfig+0x416>
 8006f64:	e054      	b.n	8007010 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f66:	4b10      	ldr	r3, [pc, #64]	@ (8006fa8 <HAL_RCC_OscConfig+0x478>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f6c:	f7fd fe10 	bl	8004b90 <HAL_GetTick>
 8006f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f72:	e008      	b.n	8006f86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f74:	f7fd fe0c 	bl	8004b90 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d901      	bls.n	8006f86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e045      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f86:	4b06      	ldr	r3, [pc, #24]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1f0      	bne.n	8006f74 <HAL_RCC_OscConfig+0x444>
 8006f92:	e03d      	b.n	8007010 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d107      	bne.n	8006fac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e038      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
 8006fa0:	40023800 	.word	0x40023800
 8006fa4:	40007000 	.word	0x40007000
 8006fa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fac:	4b1b      	ldr	r3, [pc, #108]	@ (800701c <HAL_RCC_OscConfig+0x4ec>)
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d028      	beq.n	800700c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d121      	bne.n	800700c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d11a      	bne.n	800700c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006fdc:	4013      	ands	r3, r2
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006fe2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d111      	bne.n	800700c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff2:	085b      	lsrs	r3, r3, #1
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d107      	bne.n	800700c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007006:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007008:	429a      	cmp	r2, r3
 800700a:	d001      	beq.n	8007010 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e000      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	40023800 	.word	0x40023800

08007020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e0cc      	b.n	80071ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007034:	4b68      	ldr	r3, [pc, #416]	@ (80071d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 030f 	and.w	r3, r3, #15
 800703c:	683a      	ldr	r2, [r7, #0]
 800703e:	429a      	cmp	r2, r3
 8007040:	d90c      	bls.n	800705c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007042:	4b65      	ldr	r3, [pc, #404]	@ (80071d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	b2d2      	uxtb	r2, r2
 8007048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800704a:	4b63      	ldr	r3, [pc, #396]	@ (80071d8 <HAL_RCC_ClockConfig+0x1b8>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 030f 	and.w	r3, r3, #15
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	429a      	cmp	r2, r3
 8007056:	d001      	beq.n	800705c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e0b8      	b.n	80071ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0302 	and.w	r3, r3, #2
 8007064:	2b00      	cmp	r3, #0
 8007066:	d020      	beq.n	80070aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0304 	and.w	r3, r3, #4
 8007070:	2b00      	cmp	r3, #0
 8007072:	d005      	beq.n	8007080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007074:	4b59      	ldr	r3, [pc, #356]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	4a58      	ldr	r2, [pc, #352]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 800707a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800707e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0308 	and.w	r3, r3, #8
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800708c:	4b53      	ldr	r3, [pc, #332]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	4a52      	ldr	r2, [pc, #328]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 8007092:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007098:	4b50      	ldr	r3, [pc, #320]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	494d      	ldr	r1, [pc, #308]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d044      	beq.n	8007140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d107      	bne.n	80070ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070be:	4b47      	ldr	r3, [pc, #284]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d119      	bne.n	80070fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e07f      	b.n	80071ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d003      	beq.n	80070de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d107      	bne.n	80070ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070de:	4b3f      	ldr	r3, [pc, #252]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d109      	bne.n	80070fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e06f      	b.n	80071ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070ee:	4b3b      	ldr	r3, [pc, #236]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e067      	b.n	80071ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070fe:	4b37      	ldr	r3, [pc, #220]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f023 0203 	bic.w	r2, r3, #3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	4934      	ldr	r1, [pc, #208]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 800710c:	4313      	orrs	r3, r2
 800710e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007110:	f7fd fd3e 	bl	8004b90 <HAL_GetTick>
 8007114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007116:	e00a      	b.n	800712e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007118:	f7fd fd3a 	bl	8004b90 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007126:	4293      	cmp	r3, r2
 8007128:	d901      	bls.n	800712e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e04f      	b.n	80071ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800712e:	4b2b      	ldr	r3, [pc, #172]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f003 020c 	and.w	r2, r3, #12
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	429a      	cmp	r2, r3
 800713e:	d1eb      	bne.n	8007118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007140:	4b25      	ldr	r3, [pc, #148]	@ (80071d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 030f 	and.w	r3, r3, #15
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	429a      	cmp	r2, r3
 800714c:	d20c      	bcs.n	8007168 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800714e:	4b22      	ldr	r3, [pc, #136]	@ (80071d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007156:	4b20      	ldr	r3, [pc, #128]	@ (80071d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 030f 	and.w	r3, r3, #15
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	429a      	cmp	r2, r3
 8007162:	d001      	beq.n	8007168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e032      	b.n	80071ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d008      	beq.n	8007186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007174:	4b19      	ldr	r3, [pc, #100]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	4916      	ldr	r1, [pc, #88]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 8007182:	4313      	orrs	r3, r2
 8007184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0308 	and.w	r3, r3, #8
 800718e:	2b00      	cmp	r3, #0
 8007190:	d009      	beq.n	80071a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007192:	4b12      	ldr	r3, [pc, #72]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	00db      	lsls	r3, r3, #3
 80071a0:	490e      	ldr	r1, [pc, #56]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80071a6:	f000 f821 	bl	80071ec <HAL_RCC_GetSysClockFreq>
 80071aa:	4602      	mov	r2, r0
 80071ac:	4b0b      	ldr	r3, [pc, #44]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	091b      	lsrs	r3, r3, #4
 80071b2:	f003 030f 	and.w	r3, r3, #15
 80071b6:	490a      	ldr	r1, [pc, #40]	@ (80071e0 <HAL_RCC_ClockConfig+0x1c0>)
 80071b8:	5ccb      	ldrb	r3, [r1, r3]
 80071ba:	fa22 f303 	lsr.w	r3, r2, r3
 80071be:	4a09      	ldr	r2, [pc, #36]	@ (80071e4 <HAL_RCC_ClockConfig+0x1c4>)
 80071c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80071c2:	4b09      	ldr	r3, [pc, #36]	@ (80071e8 <HAL_RCC_ClockConfig+0x1c8>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fd fc9e 	bl	8004b08 <HAL_InitTick>

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	40023c00 	.word	0x40023c00
 80071dc:	40023800 	.word	0x40023800
 80071e0:	08009fc4 	.word	0x08009fc4
 80071e4:	20000018 	.word	0x20000018
 80071e8:	2000001c 	.word	0x2000001c

080071ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071f0:	b094      	sub	sp, #80	@ 0x50
 80071f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007204:	4b79      	ldr	r3, [pc, #484]	@ (80073ec <HAL_RCC_GetSysClockFreq+0x200>)
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f003 030c 	and.w	r3, r3, #12
 800720c:	2b08      	cmp	r3, #8
 800720e:	d00d      	beq.n	800722c <HAL_RCC_GetSysClockFreq+0x40>
 8007210:	2b08      	cmp	r3, #8
 8007212:	f200 80e1 	bhi.w	80073d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <HAL_RCC_GetSysClockFreq+0x34>
 800721a:	2b04      	cmp	r3, #4
 800721c:	d003      	beq.n	8007226 <HAL_RCC_GetSysClockFreq+0x3a>
 800721e:	e0db      	b.n	80073d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007220:	4b73      	ldr	r3, [pc, #460]	@ (80073f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007222:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007224:	e0db      	b.n	80073de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007226:	4b73      	ldr	r3, [pc, #460]	@ (80073f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007228:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800722a:	e0d8      	b.n	80073de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800722c:	4b6f      	ldr	r3, [pc, #444]	@ (80073ec <HAL_RCC_GetSysClockFreq+0x200>)
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007234:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007236:	4b6d      	ldr	r3, [pc, #436]	@ (80073ec <HAL_RCC_GetSysClockFreq+0x200>)
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d063      	beq.n	800730a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007242:	4b6a      	ldr	r3, [pc, #424]	@ (80073ec <HAL_RCC_GetSysClockFreq+0x200>)
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	099b      	lsrs	r3, r3, #6
 8007248:	2200      	movs	r2, #0
 800724a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800724c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800724e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007254:	633b      	str	r3, [r7, #48]	@ 0x30
 8007256:	2300      	movs	r3, #0
 8007258:	637b      	str	r3, [r7, #52]	@ 0x34
 800725a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800725e:	4622      	mov	r2, r4
 8007260:	462b      	mov	r3, r5
 8007262:	f04f 0000 	mov.w	r0, #0
 8007266:	f04f 0100 	mov.w	r1, #0
 800726a:	0159      	lsls	r1, r3, #5
 800726c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007270:	0150      	lsls	r0, r2, #5
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4621      	mov	r1, r4
 8007278:	1a51      	subs	r1, r2, r1
 800727a:	6139      	str	r1, [r7, #16]
 800727c:	4629      	mov	r1, r5
 800727e:	eb63 0301 	sbc.w	r3, r3, r1
 8007282:	617b      	str	r3, [r7, #20]
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	f04f 0300 	mov.w	r3, #0
 800728c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007290:	4659      	mov	r1, fp
 8007292:	018b      	lsls	r3, r1, #6
 8007294:	4651      	mov	r1, sl
 8007296:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800729a:	4651      	mov	r1, sl
 800729c:	018a      	lsls	r2, r1, #6
 800729e:	4651      	mov	r1, sl
 80072a0:	ebb2 0801 	subs.w	r8, r2, r1
 80072a4:	4659      	mov	r1, fp
 80072a6:	eb63 0901 	sbc.w	r9, r3, r1
 80072aa:	f04f 0200 	mov.w	r2, #0
 80072ae:	f04f 0300 	mov.w	r3, #0
 80072b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072be:	4690      	mov	r8, r2
 80072c0:	4699      	mov	r9, r3
 80072c2:	4623      	mov	r3, r4
 80072c4:	eb18 0303 	adds.w	r3, r8, r3
 80072c8:	60bb      	str	r3, [r7, #8]
 80072ca:	462b      	mov	r3, r5
 80072cc:	eb49 0303 	adc.w	r3, r9, r3
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	f04f 0200 	mov.w	r2, #0
 80072d6:	f04f 0300 	mov.w	r3, #0
 80072da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80072de:	4629      	mov	r1, r5
 80072e0:	024b      	lsls	r3, r1, #9
 80072e2:	4621      	mov	r1, r4
 80072e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80072e8:	4621      	mov	r1, r4
 80072ea:	024a      	lsls	r2, r1, #9
 80072ec:	4610      	mov	r0, r2
 80072ee:	4619      	mov	r1, r3
 80072f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072f2:	2200      	movs	r2, #0
 80072f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80072fc:	f7f8 ff76 	bl	80001ec <__aeabi_uldivmod>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	4613      	mov	r3, r2
 8007306:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007308:	e058      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800730a:	4b38      	ldr	r3, [pc, #224]	@ (80073ec <HAL_RCC_GetSysClockFreq+0x200>)
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	099b      	lsrs	r3, r3, #6
 8007310:	2200      	movs	r2, #0
 8007312:	4618      	mov	r0, r3
 8007314:	4611      	mov	r1, r2
 8007316:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800731a:	623b      	str	r3, [r7, #32]
 800731c:	2300      	movs	r3, #0
 800731e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007320:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007324:	4642      	mov	r2, r8
 8007326:	464b      	mov	r3, r9
 8007328:	f04f 0000 	mov.w	r0, #0
 800732c:	f04f 0100 	mov.w	r1, #0
 8007330:	0159      	lsls	r1, r3, #5
 8007332:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007336:	0150      	lsls	r0, r2, #5
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	4641      	mov	r1, r8
 800733e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007342:	4649      	mov	r1, r9
 8007344:	eb63 0b01 	sbc.w	fp, r3, r1
 8007348:	f04f 0200 	mov.w	r2, #0
 800734c:	f04f 0300 	mov.w	r3, #0
 8007350:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007354:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007358:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800735c:	ebb2 040a 	subs.w	r4, r2, sl
 8007360:	eb63 050b 	sbc.w	r5, r3, fp
 8007364:	f04f 0200 	mov.w	r2, #0
 8007368:	f04f 0300 	mov.w	r3, #0
 800736c:	00eb      	lsls	r3, r5, #3
 800736e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007372:	00e2      	lsls	r2, r4, #3
 8007374:	4614      	mov	r4, r2
 8007376:	461d      	mov	r5, r3
 8007378:	4643      	mov	r3, r8
 800737a:	18e3      	adds	r3, r4, r3
 800737c:	603b      	str	r3, [r7, #0]
 800737e:	464b      	mov	r3, r9
 8007380:	eb45 0303 	adc.w	r3, r5, r3
 8007384:	607b      	str	r3, [r7, #4]
 8007386:	f04f 0200 	mov.w	r2, #0
 800738a:	f04f 0300 	mov.w	r3, #0
 800738e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007392:	4629      	mov	r1, r5
 8007394:	028b      	lsls	r3, r1, #10
 8007396:	4621      	mov	r1, r4
 8007398:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800739c:	4621      	mov	r1, r4
 800739e:	028a      	lsls	r2, r1, #10
 80073a0:	4610      	mov	r0, r2
 80073a2:	4619      	mov	r1, r3
 80073a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073a6:	2200      	movs	r2, #0
 80073a8:	61bb      	str	r3, [r7, #24]
 80073aa:	61fa      	str	r2, [r7, #28]
 80073ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073b0:	f7f8 ff1c 	bl	80001ec <__aeabi_uldivmod>
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	4613      	mov	r3, r2
 80073ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80073bc:	4b0b      	ldr	r3, [pc, #44]	@ (80073ec <HAL_RCC_GetSysClockFreq+0x200>)
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	0c1b      	lsrs	r3, r3, #16
 80073c2:	f003 0303 	and.w	r3, r3, #3
 80073c6:	3301      	adds	r3, #1
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80073cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073d6:	e002      	b.n	80073de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073d8:	4b05      	ldr	r3, [pc, #20]	@ (80073f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80073da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3750      	adds	r7, #80	@ 0x50
 80073e4:	46bd      	mov	sp, r7
 80073e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073ea:	bf00      	nop
 80073ec:	40023800 	.word	0x40023800
 80073f0:	00f42400 	.word	0x00f42400
 80073f4:	007a1200 	.word	0x007a1200

080073f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073f8:	b480      	push	{r7}
 80073fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073fc:	4b03      	ldr	r3, [pc, #12]	@ (800740c <HAL_RCC_GetHCLKFreq+0x14>)
 80073fe:	681b      	ldr	r3, [r3, #0]
}
 8007400:	4618      	mov	r0, r3
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	20000018 	.word	0x20000018

08007410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007414:	f7ff fff0 	bl	80073f8 <HAL_RCC_GetHCLKFreq>
 8007418:	4602      	mov	r2, r0
 800741a:	4b05      	ldr	r3, [pc, #20]	@ (8007430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	0a9b      	lsrs	r3, r3, #10
 8007420:	f003 0307 	and.w	r3, r3, #7
 8007424:	4903      	ldr	r1, [pc, #12]	@ (8007434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007426:	5ccb      	ldrb	r3, [r1, r3]
 8007428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800742c:	4618      	mov	r0, r3
 800742e:	bd80      	pop	{r7, pc}
 8007430:	40023800 	.word	0x40023800
 8007434:	08009fd4 	.word	0x08009fd4

08007438 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007440:	2300      	movs	r3, #0
 8007442:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007444:	2300      	movs	r3, #0
 8007446:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10b      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800745c:	2b00      	cmp	r3, #0
 800745e:	d105      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007468:	2b00      	cmp	r3, #0
 800746a:	d075      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800746c:	4b91      	ldr	r3, [pc, #580]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800746e:	2200      	movs	r2, #0
 8007470:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007472:	f7fd fb8d 	bl	8004b90 <HAL_GetTick>
 8007476:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007478:	e008      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800747a:	f7fd fb89 	bl	8004b90 <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b02      	cmp	r3, #2
 8007486:	d901      	bls.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e189      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800748c:	4b8a      	ldr	r3, [pc, #552]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1f0      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0301 	and.w	r3, r3, #1
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d009      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	019a      	lsls	r2, r3, #6
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	071b      	lsls	r3, r3, #28
 80074b0:	4981      	ldr	r1, [pc, #516]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d01f      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074c4:	4b7c      	ldr	r3, [pc, #496]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074ca:	0f1b      	lsrs	r3, r3, #28
 80074cc:	f003 0307 	and.w	r3, r3, #7
 80074d0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	019a      	lsls	r2, r3, #6
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	061b      	lsls	r3, r3, #24
 80074de:	431a      	orrs	r2, r3
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	071b      	lsls	r3, r3, #28
 80074e4:	4974      	ldr	r1, [pc, #464]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80074ec:	4b72      	ldr	r3, [pc, #456]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074f2:	f023 021f 	bic.w	r2, r3, #31
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	69db      	ldr	r3, [r3, #28]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	496e      	ldr	r1, [pc, #440]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074fe:	4313      	orrs	r3, r2
 8007500:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00d      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	019a      	lsls	r2, r3, #6
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	061b      	lsls	r3, r3, #24
 800751c:	431a      	orrs	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	071b      	lsls	r3, r3, #28
 8007524:	4964      	ldr	r1, [pc, #400]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007526:	4313      	orrs	r3, r2
 8007528:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800752c:	4b61      	ldr	r3, [pc, #388]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800752e:	2201      	movs	r2, #1
 8007530:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007532:	f7fd fb2d 	bl	8004b90 <HAL_GetTick>
 8007536:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007538:	e008      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800753a:	f7fd fb29 	bl	8004b90 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d901      	bls.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e129      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800754c:	4b5a      	ldr	r3, [pc, #360]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d0f0      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	d105      	bne.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800756c:	2b00      	cmp	r3, #0
 800756e:	d079      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007570:	4b52      	ldr	r3, [pc, #328]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007576:	f7fd fb0b 	bl	8004b90 <HAL_GetTick>
 800757a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800757c:	e008      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800757e:	f7fd fb07 	bl	8004b90 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	2b02      	cmp	r3, #2
 800758a:	d901      	bls.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e107      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007590:	4b49      	ldr	r3, [pc, #292]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007598:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800759c:	d0ef      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0304 	and.w	r3, r3, #4
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d020      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80075aa:	4b43      	ldr	r3, [pc, #268]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075b0:	0f1b      	lsrs	r3, r3, #28
 80075b2:	f003 0307 	and.w	r3, r3, #7
 80075b6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	019a      	lsls	r2, r3, #6
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	061b      	lsls	r3, r3, #24
 80075c4:	431a      	orrs	r2, r3
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	071b      	lsls	r3, r3, #28
 80075ca:	493b      	ldr	r1, [pc, #236]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80075d2:	4b39      	ldr	r3, [pc, #228]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075d8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a1b      	ldr	r3, [r3, #32]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	021b      	lsls	r3, r3, #8
 80075e4:	4934      	ldr	r1, [pc, #208]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0308 	and.w	r3, r3, #8
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d01e      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80075f8:	4b2f      	ldr	r3, [pc, #188]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075fe:	0e1b      	lsrs	r3, r3, #24
 8007600:	f003 030f 	and.w	r3, r3, #15
 8007604:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	019a      	lsls	r2, r3, #6
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	061b      	lsls	r3, r3, #24
 8007610:	431a      	orrs	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	071b      	lsls	r3, r3, #28
 8007618:	4927      	ldr	r1, [pc, #156]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800761a:	4313      	orrs	r3, r2
 800761c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007620:	4b25      	ldr	r3, [pc, #148]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007622:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007626:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762e:	4922      	ldr	r1, [pc, #136]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007630:	4313      	orrs	r3, r2
 8007632:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007636:	4b21      	ldr	r3, [pc, #132]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007638:	2201      	movs	r2, #1
 800763a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800763c:	f7fd faa8 	bl	8004b90 <HAL_GetTick>
 8007640:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007642:	e008      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007644:	f7fd faa4 	bl	8004b90 <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b02      	cmp	r3, #2
 8007650:	d901      	bls.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e0a4      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007656:	4b18      	ldr	r3, [pc, #96]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800765e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007662:	d1ef      	bne.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0320 	and.w	r3, r3, #32
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 808b 	beq.w	8007788 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007672:	2300      	movs	r3, #0
 8007674:	60fb      	str	r3, [r7, #12]
 8007676:	4b10      	ldr	r3, [pc, #64]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800767a:	4a0f      	ldr	r2, [pc, #60]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800767c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007680:	6413      	str	r3, [r2, #64]	@ 0x40
 8007682:	4b0d      	ldr	r3, [pc, #52]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800768e:	4b0c      	ldr	r3, [pc, #48]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a0b      	ldr	r2, [pc, #44]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007698:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800769a:	f7fd fa79 	bl	8004b90 <HAL_GetTick>
 800769e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80076a0:	e010      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076a2:	f7fd fa75 	bl	8004b90 <HAL_GetTick>
 80076a6:	4602      	mov	r2, r0
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d909      	bls.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e075      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80076b4:	42470068 	.word	0x42470068
 80076b8:	40023800 	.word	0x40023800
 80076bc:	42470070 	.word	0x42470070
 80076c0:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80076c4:	4b38      	ldr	r3, [pc, #224]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0e8      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80076d0:	4b36      	ldr	r3, [pc, #216]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076d8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d02f      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d028      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076ee:	4b2f      	ldr	r3, [pc, #188]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80076f8:	4b2d      	ldr	r3, [pc, #180]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80076fa:	2201      	movs	r2, #1
 80076fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80076fe:	4b2c      	ldr	r3, [pc, #176]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007700:	2200      	movs	r2, #0
 8007702:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007704:	4a29      	ldr	r2, [pc, #164]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800770a:	4b28      	ldr	r3, [pc, #160]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800770c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b01      	cmp	r3, #1
 8007714:	d114      	bne.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007716:	f7fd fa3b 	bl	8004b90 <HAL_GetTick>
 800771a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800771c:	e00a      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800771e:	f7fd fa37 	bl	8004b90 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800772c:	4293      	cmp	r3, r2
 800772e:	d901      	bls.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e035      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007734:	4b1d      	ldr	r3, [pc, #116]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d0ee      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007744:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007748:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800774c:	d10d      	bne.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800774e:	4b17      	ldr	r3, [pc, #92]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800775e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007762:	4912      	ldr	r1, [pc, #72]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007764:	4313      	orrs	r3, r2
 8007766:	608b      	str	r3, [r1, #8]
 8007768:	e005      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800776a:	4b10      	ldr	r3, [pc, #64]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	4a0f      	ldr	r2, [pc, #60]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007770:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007774:	6093      	str	r3, [r2, #8]
 8007776:	4b0d      	ldr	r3, [pc, #52]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007778:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800777e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007782:	490a      	ldr	r1, [pc, #40]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007784:	4313      	orrs	r3, r2
 8007786:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0310 	and.w	r3, r3, #16
 8007790:	2b00      	cmp	r3, #0
 8007792:	d004      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800779a:	4b06      	ldr	r3, [pc, #24]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800779c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3718      	adds	r7, #24
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	40007000 	.word	0x40007000
 80077ac:	40023800 	.word	0x40023800
 80077b0:	42470e40 	.word	0x42470e40
 80077b4:	424711e0 	.word	0x424711e0

080077b8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e01c      	b.n	8007804 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	795b      	ldrb	r3, [r3, #5]
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d105      	bne.n	80077e0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fc fcca 	bl	8004174 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f042 0204 	orr.w	r2, r2, #4
 80077f4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e07b      	b.n	8007916 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007822:	2b00      	cmp	r3, #0
 8007824:	d108      	bne.n	8007838 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800782e:	d009      	beq.n	8007844 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	61da      	str	r2, [r3, #28]
 8007836:	e005      	b.n	8007844 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d106      	bne.n	8007864 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7fc fcaa 	bl	80041b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800787a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	431a      	orrs	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	431a      	orrs	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078b4:	431a      	orrs	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078be:	431a      	orrs	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a1b      	ldr	r3, [r3, #32]
 80078c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078c8:	ea42 0103 	orr.w	r1, r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	0c1b      	lsrs	r3, r3, #16
 80078e2:	f003 0104 	and.w	r1, r3, #4
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ea:	f003 0210 	and.w	r2, r3, #16
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	430a      	orrs	r2, r1
 80078f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69da      	ldr	r2, [r3, #28]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007904:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b082      	sub	sp, #8
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e01a      	b.n	8007966 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007946:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7fc fc7d 	bl	8004248 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b088      	sub	sp, #32
 8007972:	af00      	add	r7, sp, #0
 8007974:	60f8      	str	r0, [r7, #12]
 8007976:	60b9      	str	r1, [r7, #8]
 8007978:	603b      	str	r3, [r7, #0]
 800797a:	4613      	mov	r3, r2
 800797c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800797e:	f7fd f907 	bl	8004b90 <HAL_GetTick>
 8007982:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007984:	88fb      	ldrh	r3, [r7, #6]
 8007986:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b01      	cmp	r3, #1
 8007992:	d001      	beq.n	8007998 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007994:	2302      	movs	r3, #2
 8007996:	e12a      	b.n	8007bee <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <HAL_SPI_Transmit+0x36>
 800799e:	88fb      	ldrh	r3, [r7, #6]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e122      	b.n	8007bee <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <HAL_SPI_Transmit+0x48>
 80079b2:	2302      	movs	r3, #2
 80079b4:	e11b      	b.n	8007bee <HAL_SPI_Transmit+0x280>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2203      	movs	r2, #3
 80079c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	88fa      	ldrh	r2, [r7, #6]
 80079d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	88fa      	ldrh	r2, [r7, #6]
 80079dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a04:	d10f      	bne.n	8007a26 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a30:	2b40      	cmp	r3, #64	@ 0x40
 8007a32:	d007      	beq.n	8007a44 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a4c:	d152      	bne.n	8007af4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <HAL_SPI_Transmit+0xee>
 8007a56:	8b7b      	ldrh	r3, [r7, #26]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d145      	bne.n	8007ae8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a60:	881a      	ldrh	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a6c:	1c9a      	adds	r2, r3, #2
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a80:	e032      	b.n	8007ae8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d112      	bne.n	8007ab6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a94:	881a      	ldrh	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aa0:	1c9a      	adds	r2, r3, #2
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	3b01      	subs	r3, #1
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007ab4:	e018      	b.n	8007ae8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ab6:	f7fd f86b 	bl	8004b90 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d803      	bhi.n	8007ace <HAL_SPI_Transmit+0x160>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007acc:	d102      	bne.n	8007ad4 <HAL_SPI_Transmit+0x166>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d109      	bne.n	8007ae8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e082      	b.n	8007bee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1c7      	bne.n	8007a82 <HAL_SPI_Transmit+0x114>
 8007af2:	e053      	b.n	8007b9c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <HAL_SPI_Transmit+0x194>
 8007afc:	8b7b      	ldrh	r3, [r7, #26]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d147      	bne.n	8007b92 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	330c      	adds	r3, #12
 8007b0c:	7812      	ldrb	r2, [r2, #0]
 8007b0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	3b01      	subs	r3, #1
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007b28:	e033      	b.n	8007b92 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f003 0302 	and.w	r3, r3, #2
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d113      	bne.n	8007b60 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	330c      	adds	r3, #12
 8007b42:	7812      	ldrb	r2, [r2, #0]
 8007b44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	3b01      	subs	r3, #1
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007b5e:	e018      	b.n	8007b92 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b60:	f7fd f816 	bl	8004b90 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d803      	bhi.n	8007b78 <HAL_SPI_Transmit+0x20a>
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b76:	d102      	bne.n	8007b7e <HAL_SPI_Transmit+0x210>
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d109      	bne.n	8007b92 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e02d      	b.n	8007bee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1c6      	bne.n	8007b2a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b9c:	69fa      	ldr	r2, [r7, #28]
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 f8bf 	bl	8007d24 <SPI_EndRxTxTransaction>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d002      	beq.n	8007bb2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10a      	bne.n	8007bd0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bba:	2300      	movs	r3, #0
 8007bbc:	617b      	str	r3, [r7, #20]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	617b      	str	r3, [r7, #20]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	617b      	str	r3, [r7, #20]
 8007bce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e000      	b.n	8007bee <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007bec:	2300      	movs	r3, #0
  }
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3720      	adds	r7, #32
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c04:	b2db      	uxtb	r3, r3
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
	...

08007c14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b088      	sub	sp, #32
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	603b      	str	r3, [r7, #0]
 8007c20:	4613      	mov	r3, r2
 8007c22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c24:	f7fc ffb4 	bl	8004b90 <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2c:	1a9b      	subs	r3, r3, r2
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	4413      	add	r3, r2
 8007c32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c34:	f7fc ffac 	bl	8004b90 <HAL_GetTick>
 8007c38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c3a:	4b39      	ldr	r3, [pc, #228]	@ (8007d20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	015b      	lsls	r3, r3, #5
 8007c40:	0d1b      	lsrs	r3, r3, #20
 8007c42:	69fa      	ldr	r2, [r7, #28]
 8007c44:	fb02 f303 	mul.w	r3, r2, r3
 8007c48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c4a:	e054      	b.n	8007cf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c52:	d050      	beq.n	8007cf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c54:	f7fc ff9c 	bl	8004b90 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	69fa      	ldr	r2, [r7, #28]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d902      	bls.n	8007c6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d13d      	bne.n	8007ce6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c82:	d111      	bne.n	8007ca8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c8c:	d004      	beq.n	8007c98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c96:	d107      	bne.n	8007ca8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ca6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cb0:	d10f      	bne.n	8007cd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007cd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e017      	b.n	8007d16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	4013      	ands	r3, r2
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	bf0c      	ite	eq
 8007d06:	2301      	moveq	r3, #1
 8007d08:	2300      	movne	r3, #0
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d19b      	bne.n	8007c4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3720      	adds	r7, #32
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	20000018 	.word	0x20000018

08007d24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b088      	sub	sp, #32
 8007d28:	af02      	add	r7, sp, #8
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2201      	movs	r2, #1
 8007d38:	2102      	movs	r1, #2
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f7ff ff6a 	bl	8007c14 <SPI_WaitFlagStateUntilTimeout>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d007      	beq.n	8007d56 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d4a:	f043 0220 	orr.w	r2, r3, #32
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e032      	b.n	8007dbc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d56:	4b1b      	ldr	r3, [pc, #108]	@ (8007dc4 <SPI_EndRxTxTransaction+0xa0>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8007dc8 <SPI_EndRxTxTransaction+0xa4>)
 8007d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d60:	0d5b      	lsrs	r3, r3, #21
 8007d62:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007d66:	fb02 f303 	mul.w	r3, r2, r3
 8007d6a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d74:	d112      	bne.n	8007d9c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2180      	movs	r1, #128	@ 0x80
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f7ff ff47 	bl	8007c14 <SPI_WaitFlagStateUntilTimeout>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d016      	beq.n	8007dba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d90:	f043 0220 	orr.w	r2, r3, #32
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e00f      	b.n	8007dbc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00a      	beq.n	8007db8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	3b01      	subs	r3, #1
 8007da6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007db2:	2b80      	cmp	r3, #128	@ 0x80
 8007db4:	d0f2      	beq.n	8007d9c <SPI_EndRxTxTransaction+0x78>
 8007db6:	e000      	b.n	8007dba <SPI_EndRxTxTransaction+0x96>
        break;
 8007db8:	bf00      	nop
  }

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3718      	adds	r7, #24
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	20000018 	.word	0x20000018
 8007dc8:	165e9f81 	.word	0x165e9f81

08007dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d101      	bne.n	8007dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e041      	b.n	8007e62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d106      	bne.n	8007df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7fc fa46 	bl	8004284 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3304      	adds	r3, #4
 8007e08:	4619      	mov	r1, r3
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	f000 f8f4 	bl	8007ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d101      	bne.n	8007e86 <HAL_TIM_ConfigClockSource+0x1c>
 8007e82:	2302      	movs	r3, #2
 8007e84:	e0b4      	b.n	8007ff0 <HAL_TIM_ConfigClockSource+0x186>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2202      	movs	r2, #2
 8007e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007ea4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007eac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ebe:	d03e      	beq.n	8007f3e <HAL_TIM_ConfigClockSource+0xd4>
 8007ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ec4:	f200 8087 	bhi.w	8007fd6 <HAL_TIM_ConfigClockSource+0x16c>
 8007ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ecc:	f000 8086 	beq.w	8007fdc <HAL_TIM_ConfigClockSource+0x172>
 8007ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ed4:	d87f      	bhi.n	8007fd6 <HAL_TIM_ConfigClockSource+0x16c>
 8007ed6:	2b70      	cmp	r3, #112	@ 0x70
 8007ed8:	d01a      	beq.n	8007f10 <HAL_TIM_ConfigClockSource+0xa6>
 8007eda:	2b70      	cmp	r3, #112	@ 0x70
 8007edc:	d87b      	bhi.n	8007fd6 <HAL_TIM_ConfigClockSource+0x16c>
 8007ede:	2b60      	cmp	r3, #96	@ 0x60
 8007ee0:	d050      	beq.n	8007f84 <HAL_TIM_ConfigClockSource+0x11a>
 8007ee2:	2b60      	cmp	r3, #96	@ 0x60
 8007ee4:	d877      	bhi.n	8007fd6 <HAL_TIM_ConfigClockSource+0x16c>
 8007ee6:	2b50      	cmp	r3, #80	@ 0x50
 8007ee8:	d03c      	beq.n	8007f64 <HAL_TIM_ConfigClockSource+0xfa>
 8007eea:	2b50      	cmp	r3, #80	@ 0x50
 8007eec:	d873      	bhi.n	8007fd6 <HAL_TIM_ConfigClockSource+0x16c>
 8007eee:	2b40      	cmp	r3, #64	@ 0x40
 8007ef0:	d058      	beq.n	8007fa4 <HAL_TIM_ConfigClockSource+0x13a>
 8007ef2:	2b40      	cmp	r3, #64	@ 0x40
 8007ef4:	d86f      	bhi.n	8007fd6 <HAL_TIM_ConfigClockSource+0x16c>
 8007ef6:	2b30      	cmp	r3, #48	@ 0x30
 8007ef8:	d064      	beq.n	8007fc4 <HAL_TIM_ConfigClockSource+0x15a>
 8007efa:	2b30      	cmp	r3, #48	@ 0x30
 8007efc:	d86b      	bhi.n	8007fd6 <HAL_TIM_ConfigClockSource+0x16c>
 8007efe:	2b20      	cmp	r3, #32
 8007f00:	d060      	beq.n	8007fc4 <HAL_TIM_ConfigClockSource+0x15a>
 8007f02:	2b20      	cmp	r3, #32
 8007f04:	d867      	bhi.n	8007fd6 <HAL_TIM_ConfigClockSource+0x16c>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d05c      	beq.n	8007fc4 <HAL_TIM_ConfigClockSource+0x15a>
 8007f0a:	2b10      	cmp	r3, #16
 8007f0c:	d05a      	beq.n	8007fc4 <HAL_TIM_ConfigClockSource+0x15a>
 8007f0e:	e062      	b.n	8007fd6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f20:	f000 f990 	bl	8008244 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f32:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	609a      	str	r2, [r3, #8]
      break;
 8007f3c:	e04f      	b.n	8007fde <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f4e:	f000 f979 	bl	8008244 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	689a      	ldr	r2, [r3, #8]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f60:	609a      	str	r2, [r3, #8]
      break;
 8007f62:	e03c      	b.n	8007fde <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f70:	461a      	mov	r2, r3
 8007f72:	f000 f8ed 	bl	8008150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2150      	movs	r1, #80	@ 0x50
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 f946 	bl	800820e <TIM_ITRx_SetConfig>
      break;
 8007f82:	e02c      	b.n	8007fde <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f90:	461a      	mov	r2, r3
 8007f92:	f000 f90c 	bl	80081ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2160      	movs	r1, #96	@ 0x60
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 f936 	bl	800820e <TIM_ITRx_SetConfig>
      break;
 8007fa2:	e01c      	b.n	8007fde <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	f000 f8cd 	bl	8008150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2140      	movs	r1, #64	@ 0x40
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 f926 	bl	800820e <TIM_ITRx_SetConfig>
      break;
 8007fc2:	e00c      	b.n	8007fde <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4610      	mov	r0, r2
 8007fd0:	f000 f91d 	bl	800820e <TIM_ITRx_SetConfig>
      break;
 8007fd4:	e003      	b.n	8007fde <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8007fda:	e000      	b.n	8007fde <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007fdc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a46      	ldr	r2, [pc, #280]	@ (8008124 <TIM_Base_SetConfig+0x12c>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d013      	beq.n	8008038 <TIM_Base_SetConfig+0x40>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008016:	d00f      	beq.n	8008038 <TIM_Base_SetConfig+0x40>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a43      	ldr	r2, [pc, #268]	@ (8008128 <TIM_Base_SetConfig+0x130>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d00b      	beq.n	8008038 <TIM_Base_SetConfig+0x40>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a42      	ldr	r2, [pc, #264]	@ (800812c <TIM_Base_SetConfig+0x134>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d007      	beq.n	8008038 <TIM_Base_SetConfig+0x40>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a41      	ldr	r2, [pc, #260]	@ (8008130 <TIM_Base_SetConfig+0x138>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d003      	beq.n	8008038 <TIM_Base_SetConfig+0x40>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a40      	ldr	r2, [pc, #256]	@ (8008134 <TIM_Base_SetConfig+0x13c>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d108      	bne.n	800804a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800803e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	4313      	orrs	r3, r2
 8008048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a35      	ldr	r2, [pc, #212]	@ (8008124 <TIM_Base_SetConfig+0x12c>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d02b      	beq.n	80080aa <TIM_Base_SetConfig+0xb2>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008058:	d027      	beq.n	80080aa <TIM_Base_SetConfig+0xb2>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a32      	ldr	r2, [pc, #200]	@ (8008128 <TIM_Base_SetConfig+0x130>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d023      	beq.n	80080aa <TIM_Base_SetConfig+0xb2>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a31      	ldr	r2, [pc, #196]	@ (800812c <TIM_Base_SetConfig+0x134>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d01f      	beq.n	80080aa <TIM_Base_SetConfig+0xb2>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a30      	ldr	r2, [pc, #192]	@ (8008130 <TIM_Base_SetConfig+0x138>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d01b      	beq.n	80080aa <TIM_Base_SetConfig+0xb2>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a2f      	ldr	r2, [pc, #188]	@ (8008134 <TIM_Base_SetConfig+0x13c>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d017      	beq.n	80080aa <TIM_Base_SetConfig+0xb2>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a2e      	ldr	r2, [pc, #184]	@ (8008138 <TIM_Base_SetConfig+0x140>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d013      	beq.n	80080aa <TIM_Base_SetConfig+0xb2>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a2d      	ldr	r2, [pc, #180]	@ (800813c <TIM_Base_SetConfig+0x144>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d00f      	beq.n	80080aa <TIM_Base_SetConfig+0xb2>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a2c      	ldr	r2, [pc, #176]	@ (8008140 <TIM_Base_SetConfig+0x148>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d00b      	beq.n	80080aa <TIM_Base_SetConfig+0xb2>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a2b      	ldr	r2, [pc, #172]	@ (8008144 <TIM_Base_SetConfig+0x14c>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d007      	beq.n	80080aa <TIM_Base_SetConfig+0xb2>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a2a      	ldr	r2, [pc, #168]	@ (8008148 <TIM_Base_SetConfig+0x150>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d003      	beq.n	80080aa <TIM_Base_SetConfig+0xb2>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a29      	ldr	r2, [pc, #164]	@ (800814c <TIM_Base_SetConfig+0x154>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d108      	bne.n	80080bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	689a      	ldr	r2, [r3, #8]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a10      	ldr	r2, [pc, #64]	@ (8008124 <TIM_Base_SetConfig+0x12c>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d003      	beq.n	80080f0 <TIM_Base_SetConfig+0xf8>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a12      	ldr	r2, [pc, #72]	@ (8008134 <TIM_Base_SetConfig+0x13c>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d103      	bne.n	80080f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	691a      	ldr	r2, [r3, #16]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	2b01      	cmp	r3, #1
 8008108:	d105      	bne.n	8008116 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	f023 0201 	bic.w	r2, r3, #1
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	611a      	str	r2, [r3, #16]
  }
}
 8008116:	bf00      	nop
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	40010000 	.word	0x40010000
 8008128:	40000400 	.word	0x40000400
 800812c:	40000800 	.word	0x40000800
 8008130:	40000c00 	.word	0x40000c00
 8008134:	40010400 	.word	0x40010400
 8008138:	40014000 	.word	0x40014000
 800813c:	40014400 	.word	0x40014400
 8008140:	40014800 	.word	0x40014800
 8008144:	40001800 	.word	0x40001800
 8008148:	40001c00 	.word	0x40001c00
 800814c:	40002000 	.word	0x40002000

08008150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008150:	b480      	push	{r7}
 8008152:	b087      	sub	sp, #28
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6a1b      	ldr	r3, [r3, #32]
 8008160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	f023 0201 	bic.w	r2, r3, #1
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800817a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	011b      	lsls	r3, r3, #4
 8008180:	693a      	ldr	r2, [r7, #16]
 8008182:	4313      	orrs	r3, r2
 8008184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f023 030a 	bic.w	r3, r3, #10
 800818c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	4313      	orrs	r3, r2
 8008194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	621a      	str	r2, [r3, #32]
}
 80081a2:	bf00      	nop
 80081a4:	371c      	adds	r7, #28
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b087      	sub	sp, #28
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	60f8      	str	r0, [r7, #12]
 80081b6:	60b9      	str	r1, [r7, #8]
 80081b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	f023 0210 	bic.w	r2, r3, #16
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	699b      	ldr	r3, [r3, #24]
 80081d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80081d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	031b      	lsls	r3, r3, #12
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80081ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	011b      	lsls	r3, r3, #4
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	621a      	str	r2, [r3, #32]
}
 8008202:	bf00      	nop
 8008204:	371c      	adds	r7, #28
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800820e:	b480      	push	{r7}
 8008210:	b085      	sub	sp, #20
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4313      	orrs	r3, r2
 800822c:	f043 0307 	orr.w	r3, r3, #7
 8008230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	609a      	str	r2, [r3, #8]
}
 8008238:	bf00      	nop
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
 8008250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800825e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	021a      	lsls	r2, r3, #8
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	431a      	orrs	r2, r3
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	4313      	orrs	r3, r2
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	4313      	orrs	r3, r2
 8008270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	609a      	str	r2, [r3, #8]
}
 8008278:	bf00      	nop
 800827a:	371c      	adds	r7, #28
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008294:	2b01      	cmp	r3, #1
 8008296:	d101      	bne.n	800829c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008298:	2302      	movs	r3, #2
 800829a:	e05a      	b.n	8008352 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2202      	movs	r2, #2
 80082a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a21      	ldr	r2, [pc, #132]	@ (8008360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d022      	beq.n	8008326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082e8:	d01d      	beq.n	8008326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a1d      	ldr	r2, [pc, #116]	@ (8008364 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d018      	beq.n	8008326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008368 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d013      	beq.n	8008326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a1a      	ldr	r2, [pc, #104]	@ (800836c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d00e      	beq.n	8008326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a18      	ldr	r2, [pc, #96]	@ (8008370 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d009      	beq.n	8008326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a17      	ldr	r2, [pc, #92]	@ (8008374 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d004      	beq.n	8008326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a15      	ldr	r2, [pc, #84]	@ (8008378 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d10c      	bne.n	8008340 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800832c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	4313      	orrs	r3, r2
 8008336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	40010000 	.word	0x40010000
 8008364:	40000400 	.word	0x40000400
 8008368:	40000800 	.word	0x40000800
 800836c:	40000c00 	.word	0x40000c00
 8008370:	40010400 	.word	0x40010400
 8008374:	40014000 	.word	0x40014000
 8008378:	40001800 	.word	0x40001800

0800837c <memset>:
 800837c:	4402      	add	r2, r0
 800837e:	4603      	mov	r3, r0
 8008380:	4293      	cmp	r3, r2
 8008382:	d100      	bne.n	8008386 <memset+0xa>
 8008384:	4770      	bx	lr
 8008386:	f803 1b01 	strb.w	r1, [r3], #1
 800838a:	e7f9      	b.n	8008380 <memset+0x4>

0800838c <__libc_init_array>:
 800838c:	b570      	push	{r4, r5, r6, lr}
 800838e:	4d0d      	ldr	r5, [pc, #52]	@ (80083c4 <__libc_init_array+0x38>)
 8008390:	4c0d      	ldr	r4, [pc, #52]	@ (80083c8 <__libc_init_array+0x3c>)
 8008392:	1b64      	subs	r4, r4, r5
 8008394:	10a4      	asrs	r4, r4, #2
 8008396:	2600      	movs	r6, #0
 8008398:	42a6      	cmp	r6, r4
 800839a:	d109      	bne.n	80083b0 <__libc_init_array+0x24>
 800839c:	4d0b      	ldr	r5, [pc, #44]	@ (80083cc <__libc_init_array+0x40>)
 800839e:	4c0c      	ldr	r4, [pc, #48]	@ (80083d0 <__libc_init_array+0x44>)
 80083a0:	f000 f826 	bl	80083f0 <_init>
 80083a4:	1b64      	subs	r4, r4, r5
 80083a6:	10a4      	asrs	r4, r4, #2
 80083a8:	2600      	movs	r6, #0
 80083aa:	42a6      	cmp	r6, r4
 80083ac:	d105      	bne.n	80083ba <__libc_init_array+0x2e>
 80083ae:	bd70      	pop	{r4, r5, r6, pc}
 80083b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b4:	4798      	blx	r3
 80083b6:	3601      	adds	r6, #1
 80083b8:	e7ee      	b.n	8008398 <__libc_init_array+0xc>
 80083ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80083be:	4798      	blx	r3
 80083c0:	3601      	adds	r6, #1
 80083c2:	e7f2      	b.n	80083aa <__libc_init_array+0x1e>
 80083c4:	08009fe4 	.word	0x08009fe4
 80083c8:	08009fe4 	.word	0x08009fe4
 80083cc:	08009fe4 	.word	0x08009fe4
 80083d0:	08009fe8 	.word	0x08009fe8

080083d4 <memcpy>:
 80083d4:	440a      	add	r2, r1
 80083d6:	4291      	cmp	r1, r2
 80083d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80083dc:	d100      	bne.n	80083e0 <memcpy+0xc>
 80083de:	4770      	bx	lr
 80083e0:	b510      	push	{r4, lr}
 80083e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083ea:	4291      	cmp	r1, r2
 80083ec:	d1f9      	bne.n	80083e2 <memcpy+0xe>
 80083ee:	bd10      	pop	{r4, pc}

080083f0 <_init>:
 80083f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f2:	bf00      	nop
 80083f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083f6:	bc08      	pop	{r3}
 80083f8:	469e      	mov	lr, r3
 80083fa:	4770      	bx	lr

080083fc <_fini>:
 80083fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fe:	bf00      	nop
 8008400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008402:	bc08      	pop	{r3}
 8008404:	469e      	mov	lr, r3
 8008406:	4770      	bx	lr
