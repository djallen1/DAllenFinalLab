
DAllenFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000805c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bd4  08008208  08008208  00009208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ddc  08009ddc  0000b024  2**0
                  CONTENTS
  4 .ARM          00000008  08009ddc  08009ddc  0000addc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009de4  08009de4  0000b024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009de4  08009de4  0000ade4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009de8  08009de8  0000ade8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08009dec  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b024  2**0
                  CONTENTS
 10 .bss          00025de0  20000024  20000024  0000b024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025e04  20025e04  0000b024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015cc4  00000000  00000000  0000b054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000390c  00000000  00000000  00020d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  00024628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001059  00000000  00000000  00025b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027883  00000000  00000000  00026bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b880  00000000  00000000  0004e444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e303c  00000000  00000000  00069cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014cd00  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005898  00000000  00000000  0014cd44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001525dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080081f0 	.word	0x080081f0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	080081f0 	.word	0x080081f0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f004 fa46 	bl	8004970 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f002 fac2 	bl	8002a6c <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f002 fa7f 	bl	80029ec <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f002 fb85 	bl	8002c00 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80004f6:	f002 fc5b 	bl	8002db0 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80004fa:	4b05      	ldr	r3, [pc, #20]	@ (8000510 <ApplicationInit+0x34>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 8000500:	f000 f810 	bl	8000524 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED
	#endif // COMPILE_TOUCH_FUNCTIONS
	applicationButtonInit();
 8000504:	f000 f8c6 	bl	8000694 <applicationButtonInit>
	game_start_screen();
 8000508:	f002 fc94 	bl	8002e34 <game_start_screen>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000088 	.word	0x20000088

08000514 <Application_game_inst>:

void Application_game_inst(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	game_init();
 8000518:	f002 fc9a 	bl	8002e50 <game_init>
	start_timer();
 800051c:	f000 f924 	bl	8000768 <start_timer>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 8000538:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800053c:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 800053e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000542:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000548:	2302      	movs	r3, #2
 800054a:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	4b0d      	ldr	r3, [pc, #52]	@ (8000588 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000554:	4a0c      	ldr	r2, [pc, #48]	@ (8000588 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	6313      	str	r3, [r2, #48]	@ 0x30
 800055c:	4b0a      	ldr	r3, [pc, #40]	@ (8000588 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800055e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000560:	f003 0301 	and.w	r3, r3, #1
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	4619      	mov	r1, r3
 800056c:	4807      	ldr	r0, [pc, #28]	@ (800058c <LCDTouchScreenInterruptGPIOInit+0x68>)
 800056e:	f004 fc61 	bl	8004e34 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000572:	2028      	movs	r0, #40	@ 0x28
 8000574:	f004 fc0f 	bl	8004d96 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000578:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 800057a:	4a06      	ldr	r2, [pc, #24]	@ (8000594 <LCDTouchScreenInterruptGPIOInit+0x70>)
 800057c:	601a      	str	r2, [r3, #0]

}
 800057e:	bf00      	nop
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40023800 	.word	0x40023800
 800058c:	40020000 	.word	0x40020000
 8000590:	20000090 	.word	0x20000090
 8000594:	0600000f 	.word	0x0600000f

08000598 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 800059e:	2028      	movs	r0, #40	@ 0x28
 80005a0:	f004 fc07 	bl	8004db2 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 80005a4:	2300      	movs	r3, #0
 80005a6:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 80005a8:	4b36      	ldr	r3, [pc, #216]	@ (8000684 <EXTI15_10_IRQHandler+0xec>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005ae:	e006      	b.n	80005be <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 80005b0:	204c      	movs	r0, #76	@ 0x4c
 80005b2:	f003 ff60 	bl	8004476 <STMPE811_Read>
 80005b6:	4603      	mov	r3, r0
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b32      	ldr	r3, [pc, #200]	@ (8000684 <EXTI15_10_IRQHandler+0xec>)
 80005bc:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005be:	4b31      	ldr	r3, [pc, #196]	@ (8000684 <EXTI15_10_IRQHandler+0xec>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f4      	beq.n	80005b0 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 80005c6:	200a      	movs	r0, #10
 80005c8:	f002 fc08 	bl	8002ddc <ReadRegisterFromTouchModule>
 80005cc:	4603      	mov	r3, r0
 80005ce:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 80005d0:	2100      	movs	r1, #0
 80005d2:	200a      	movs	r0, #10
 80005d4:	f002 fc10 	bl	8002df8 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 80005d8:	200b      	movs	r0, #11
 80005da:	f002 fbff 	bl	8002ddc <ReadRegisterFromTouchModule>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b29      	ldr	r3, [pc, #164]	@ (8000688 <EXTI15_10_IRQHandler+0xf0>)
 80005e4:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 80005e6:	4b28      	ldr	r3, [pc, #160]	@ (8000688 <EXTI15_10_IRQHandler+0xf0>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 80005f0:	797b      	ldrb	r3, [r7, #5]
 80005f2:	4619      	mov	r1, r3
 80005f4:	200b      	movs	r0, #11
 80005f6:	f002 fbff 	bl	8002df8 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 80005fa:	2040      	movs	r0, #64	@ 0x40
 80005fc:	f002 fbee 	bl	8002ddc <ReadRegisterFromTouchModule>
 8000600:	4603      	mov	r3, r0
 8000602:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 8000604:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000608:	2b00      	cmp	r3, #0
 800060a:	da01      	bge.n	8000610 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 800060c:	2301      	movs	r3, #1
 800060e:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d015      	beq.n	8000642 <EXTI15_10_IRQHandler+0xaa>
	{
		if(is_start_screen())
 8000616:	f002 fc01 	bl	8002e1c <is_start_screen>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <EXTI15_10_IRQHandler+0x8e>
		{
			Application_game_inst();
 8000620:	f7ff ff78 	bl	8000514 <Application_game_inst>
 8000624:	e00d      	b.n	8000642 <EXTI15_10_IRQHandler+0xaa>
		}
		else
		{
			DetermineTouchPosition(&StaticTouchData);
 8000626:	4819      	ldr	r0, [pc, #100]	@ (800068c <EXTI15_10_IRQHandler+0xf4>)
 8000628:	f002 fbcd 	bl	8002dc6 <DetermineTouchPosition>
			if(StaticTouchData.x > 120)
 800062c:	4b17      	ldr	r3, [pc, #92]	@ (800068c <EXTI15_10_IRQHandler+0xf4>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	2b78      	cmp	r3, #120	@ 0x78
 8000632:	d903      	bls.n	800063c <EXTI15_10_IRQHandler+0xa4>
			{
				game_move(RIGHT);
 8000634:	2001      	movs	r0, #1
 8000636:	f002 fd2b 	bl	8003090 <game_move>
 800063a:	e002      	b.n	8000642 <EXTI15_10_IRQHandler+0xaa>
			}
			else
			{
				game_move(LEFT);
 800063c:	2000      	movs	r0, #0
 800063e:	f002 fd27 	bl	8003090 <game_move>
			}
		}
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 8000642:	2101      	movs	r1, #1
 8000644:	204b      	movs	r0, #75	@ 0x4b
 8000646:	f003 ff27 	bl	8004498 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 800064a:	2100      	movs	r1, #0
 800064c:	204b      	movs	r0, #75	@ 0x4b
 800064e:	f003 ff23 	bl	8004498 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 8000652:	79bb      	ldrb	r3, [r7, #6]
 8000654:	4619      	mov	r1, r3
 8000656:	200a      	movs	r0, #10
 8000658:	f002 fbce 	bl	8002df8 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 800065c:	2103      	movs	r1, #3
 800065e:	480c      	ldr	r0, [pc, #48]	@ (8000690 <EXTI15_10_IRQHandler+0xf8>)
 8000660:	f004 fbd0 	bl	8004e04 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000664:	2028      	movs	r0, #40	@ 0x28
 8000666:	f004 fbbe 	bl	8004de6 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800066a:	2028      	movs	r0, #40	@ 0x28
 800066c:	f004 fb93 	bl	8004d96 <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000670:	797b      	ldrb	r3, [r7, #5]
 8000672:	4619      	mov	r1, r3
 8000674:	200b      	movs	r0, #11
 8000676:	f002 fbbf 	bl	8002df8 <WriteDataToTouchModule>

}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2000009c 	.word	0x2000009c
 8000688:	20000098 	.word	0x20000098
 800068c:	20000088 	.word	0x20000088
 8000690:	20000090 	.word	0x20000090

08000694 <applicationButtonInit>:
#endif // TOUCH_INTERRUPT_ENABLED

void applicationButtonInit()
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	ButtonInit();
 8000698:	f002 f89e 	bl	80027d8 <ButtonInit>
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}

080006a0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80006a4:	2006      	movs	r0, #6
 80006a6:	f004 fb84 	bl	8004db2 <HAL_NVIC_DisableIRQ>
	//EXTI_HandleTypeDef* line = {0};
	HAL_EXTI_ClearPending(EXTI_GPIOA, EXTI_TRIGGER_RISING);
 80006aa:	2101      	movs	r1, #1
 80006ac:	2000      	movs	r0, #0
 80006ae:	f004 fba9 	bl	8004e04 <HAL_EXTI_ClearPending>
	//IRQ_enable(EXTI0_IRQ_NUMBER);
	game_rotate();
 80006b2:	f002 fcaf 	bl	8003014 <game_rotate>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006b6:	2006      	movs	r0, #6
 80006b8:	f004 fb6d 	bl	8004d96 <HAL_NVIC_EnableIRQ>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <MX_TIM7_Init>:

static void MX_TIM7_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80006ce:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <MX_TIM7_Init+0x68>)
 80006d0:	4a16      	ldr	r2, [pc, #88]	@ (800072c <MX_TIM7_Init+0x6c>)
 80006d2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = PRESCALAR_VAL;
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_TIM7_Init+0x68>)
 80006d6:	f240 128f 	movw	r2, #399	@ 0x18f
 80006da:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <MX_TIM7_Init+0x68>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = ARR_VAL;
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_TIM7_Init+0x68>)
 80006e4:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80006e8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_TIM7_Init+0x68>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80006f0:	480d      	ldr	r0, [pc, #52]	@ (8000728 <MX_TIM7_Init+0x68>)
 80006f2:	f007 fb5b 	bl	8007dac <HAL_TIM_Base_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d002      	beq.n	8000702 <MX_TIM7_Init+0x42>
  {
    APPLICATION_ASSERT(1);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f002 f89b 	bl	8002838 <APPLICATION_ASSERT>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	4619      	mov	r1, r3
 800070e:	4806      	ldr	r0, [pc, #24]	@ (8000728 <MX_TIM7_Init+0x68>)
 8000710:	f007 fcb8 	bl	8008084 <HAL_TIMEx_MasterConfigSynchronization>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <MX_TIM7_Init+0x60>
  {
	APPLICATION_ASSERT(1);
 800071a:	2001      	movs	r0, #1
 800071c:	f002 f88c 	bl	8002838 <APPLICATION_ASSERT>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000040 	.word	0x20000040
 800072c:	40001400 	.word	0x40001400

08000730 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(TIM7_IRQn);
 8000734:	2037      	movs	r0, #55	@ 0x37
 8000736:	f004 fb3c 	bl	8004db2 <HAL_NVIC_DisableIRQ>
	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 800073a:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <TIM7_IRQHandler+0x34>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f06f 0201 	mvn.w	r2, #1
 8000742:	611a      	str	r2, [r3, #16]
	if(!game_finished())
 8000744:	f002 fcf4 	bl	8003130 <game_finished>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d102      	bne.n	8000754 <TIM7_IRQHandler+0x24>
	{
		game_drop();
 800074e:	f002 fbd1 	bl	8002ef4 <game_drop>
 8000752:	e001      	b.n	8000758 <TIM7_IRQHandler+0x28>
	}
	else
	{
		game_over();
 8000754:	f002 fcfe 	bl	8003154 <game_over>
	}
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000758:	2037      	movs	r0, #55	@ 0x37
 800075a:	f004 fb1c 	bl	8004d96 <HAL_NVIC_EnableIRQ>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000040 	.word	0x20000040

08000768 <start_timer>:

void start_timer()
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	MX_TIM7_Init();
 800076c:	f7ff ffa8 	bl	80006c0 <MX_TIM7_Init>
	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <start_timer+0x24>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f06f 0201 	mvn.w	r2, #1
 8000778:	611a      	str	r2, [r3, #16]
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800077a:	2037      	movs	r0, #55	@ 0x37
 800077c:	f004 fb0b 	bl	8004d96 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim7);
 8000780:	4802      	ldr	r0, [pc, #8]	@ (800078c <start_timer+0x24>)
 8000782:	f007 fb63 	bl	8007e4c <HAL_TIM_Base_Start_IT>
	//((&htim7)->Instance->SR) |= 0;
	//__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000040 	.word	0x20000040

08000790 <map_draw>:

static void MX_RNG_Init(void);
static void MX_RNG_Deinit(void);

void map_draw()
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
	//uint16_t y_len = LCD_PIXEL_HEIGHT;
	uint16_t x_len = LCD_PIXEL_WIDTH;
 8000796:	23f0      	movs	r3, #240	@ 0xf0
 8000798:	80fb      	strh	r3, [r7, #6]
	//edges of 5 pixels in width
	uint16_t x = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	80bb      	strh	r3, [r7, #4]

	//VERTICAL
	for(int i = 1; i<LCD_PIXEL_WIDTH; i+=BLOCK_WIDTH)
 800079e:	2301      	movs	r3, #1
 80007a0:	61fb      	str	r3, [r7, #28]
 80007a2:	e00d      	b.n	80007c0 <map_draw+0x30>
	{
		LCD_Draw_Vertical_Line(EDGE_WIDTH+i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	3304      	adds	r3, #4
 80007aa:	b298      	uxth	r0, r3
 80007ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b0:	f240 1235 	movw	r2, #309	@ 0x135
 80007b4:	210b      	movs	r1, #11
 80007b6:	f002 f9d5 	bl	8002b64 <LCD_Draw_Vertical_Line>
	for(int i = 1; i<LCD_PIXEL_WIDTH; i+=BLOCK_WIDTH)
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3317      	adds	r3, #23
 80007be:	61fb      	str	r3, [r7, #28]
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	2bef      	cmp	r3, #239	@ 0xef
 80007c4:	ddee      	ble.n	80007a4 <map_draw+0x14>
	}
	for(int i = 1; i<=EDGE_WIDTH; i++)
 80007c6:	2301      	movs	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	e00b      	b.n	80007e4 <map_draw+0x54>
	{
		LCD_Draw_Vertical_Line(i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	b298      	uxth	r0, r3
 80007d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007d4:	f240 1235 	movw	r2, #309	@ 0x135
 80007d8:	210b      	movs	r1, #11
 80007da:	f002 f9c3 	bl	8002b64 <LCD_Draw_Vertical_Line>
	for(int i = 1; i<=EDGE_WIDTH; i++)
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	3301      	adds	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	ddf0      	ble.n	80007cc <map_draw+0x3c>
	}
	for(int i = LCD_PIXEL_WIDTH-EDGE_WIDTH; i<=LCD_PIXEL_WIDTH; i++)
 80007ea:	23ec      	movs	r3, #236	@ 0xec
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	e00b      	b.n	8000808 <map_draw+0x78>
	{
		LCD_Draw_Vertical_Line(i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	b298      	uxth	r0, r3
 80007f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007f8:	f240 1235 	movw	r2, #309	@ 0x135
 80007fc:	210b      	movs	r1, #11
 80007fe:	f002 f9b1 	bl	8002b64 <LCD_Draw_Vertical_Line>
	for(int i = LCD_PIXEL_WIDTH-EDGE_WIDTH; i<=LCD_PIXEL_WIDTH; i++)
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	3301      	adds	r3, #1
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	2bf0      	cmp	r3, #240	@ 0xf0
 800080c:	ddf0      	ble.n	80007f0 <map_draw+0x60>
	}

	//HORIZONTAL
	for(int i = 1; i<MAP_HEIGHT; i+=BLOCK_WIDTH)
 800080e:	2301      	movs	r3, #1
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	e00c      	b.n	800082e <map_draw+0x9e>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+EDGE_WIDTH+i, x_len, LCD_COLOR_WHITE);
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	b29b      	uxth	r3, r3
 8000818:	330f      	adds	r3, #15
 800081a:	b299      	uxth	r1, r3
 800081c:	88fa      	ldrh	r2, [r7, #6]
 800081e:	88b8      	ldrh	r0, [r7, #4]
 8000820:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000824:	f002 f9c5 	bl	8002bb2 <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<MAP_HEIGHT; i+=BLOCK_WIDTH)
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	3317      	adds	r3, #23
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8000834:	ddee      	ble.n	8000814 <map_draw+0x84>
	}
	for(int i = 0; i<=EDGE_WIDTH; i++)
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	e00c      	b.n	8000856 <map_draw+0xc6>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+i, x_len, LCD_COLOR_WHITE);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	b29b      	uxth	r3, r3
 8000840:	330b      	adds	r3, #11
 8000842:	b299      	uxth	r1, r3
 8000844:	88fa      	ldrh	r2, [r7, #6]
 8000846:	88b8      	ldrh	r0, [r7, #4]
 8000848:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800084c:	f002 f9b1 	bl	8002bb2 <LCD_Draw_Horizontal_Line>
	for(int i = 0; i<=EDGE_WIDTH; i++)
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	3301      	adds	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2b04      	cmp	r3, #4
 800085a:	ddef      	ble.n	800083c <map_draw+0xac>
	}
	for(int i = MAP_HEIGHT-EDGE_WIDTH; i<=MAP_HEIGHT; i++)
 800085c:	f240 1331 	movw	r3, #305	@ 0x131
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	e00c      	b.n	800087e <map_draw+0xee>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+i, x_len, LCD_COLOR_WHITE);
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	b29b      	uxth	r3, r3
 8000868:	330b      	adds	r3, #11
 800086a:	b299      	uxth	r1, r3
 800086c:	88fa      	ldrh	r2, [r7, #6]
 800086e:	88b8      	ldrh	r0, [r7, #4]
 8000870:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000874:	f002 f99d 	bl	8002bb2 <LCD_Draw_Horizontal_Line>
	for(int i = MAP_HEIGHT-EDGE_WIDTH; i<=MAP_HEIGHT; i++)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	3301      	adds	r3, #1
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 8000884:	dbee      	blt.n	8000864 <map_draw+0xd4>
	}
}
 8000886:	bf00      	nop
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <start_screen>:

void start_screen()
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
	//uint16_t play_x = 68; //to 172
	uint16_t play_y = 106; //to 184
 8000896:	236a      	movs	r3, #106	@ 0x6a
 8000898:	80fb      	strh	r3, [r7, #6]
	//uint16_t button_height = 48;
	uint16_t button_width = LCD_PIXEL_WIDTH/2;
 800089a:	2378      	movs	r3, #120	@ 0x78
 800089c:	80bb      	strh	r3, [r7, #4]

	for(int i = 1; i<button_width/2; i++)
 800089e:	2301      	movs	r3, #1
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	e014      	b.n	80008ce <start_screen+0x3e>
	{
		LCD_Draw_Horizontal_Line(120-i, play_y+i, 2*i, LCD_COLOR_WHITE);
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 80008ac:	b298      	uxth	r0, r3
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	4413      	add	r3, r2
 80008b6:	b299      	uxth	r1, r3
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	b29a      	uxth	r2, r3
 80008c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008c4:	f002 f975 	bl	8002bb2 <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<button_width/2; i++)
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	3301      	adds	r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	88bb      	ldrh	r3, [r7, #4]
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	461a      	mov	r2, r3
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	4293      	cmp	r3, r2
 80008da:	dbe3      	blt.n	80008a4 <start_screen+0x14>
	}
	for(int i = button_width/2; i>0; i--)
 80008dc:	88bb      	ldrh	r3, [r7, #4]
 80008de:	085b      	lsrs	r3, r3, #1
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	e020      	b.n	8000928 <start_screen+0x98>
	{
		LCD_Draw_Horizontal_Line(i+button_width/2, play_y + i + (button_width/2) - 1, button_width-(2*i), LCD_COLOR_WHITE);
 80008e6:	88bb      	ldrh	r3, [r7, #4]
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	4413      	add	r3, r2
 80008f2:	b298      	uxth	r0, r3
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	88fb      	ldrh	r3, [r7, #6]
 80008fa:	4413      	add	r3, r2
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	88bb      	ldrh	r3, [r7, #4]
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	b29b      	uxth	r3, r3
 8000904:	4413      	add	r3, r2
 8000906:	b29b      	uxth	r3, r3
 8000908:	3b01      	subs	r3, #1
 800090a:	b299      	uxth	r1, r3
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	b29b      	uxth	r3, r3
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	b29b      	uxth	r3, r3
 8000914:	88ba      	ldrh	r2, [r7, #4]
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	b29a      	uxth	r2, r3
 800091a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800091e:	f002 f948 	bl	8002bb2 <LCD_Draw_Horizontal_Line>
	for(int i = button_width/2; i>0; i--)
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	3b01      	subs	r3, #1
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	2b00      	cmp	r3, #0
 800092c:	dcdb      	bgt.n	80008e6 <start_screen+0x56>
	}
	for(int i = 1; i<button_width/2 -2; i++)
 800092e:	2301      	movs	r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	e015      	b.n	8000960 <start_screen+0xd0>
	{
		LCD_Draw_Horizontal_Line(120-i, play_y+i +2 , 2*i, LCD_COLOR_BLACK);
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	b29b      	uxth	r3, r3
 8000938:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 800093c:	b298      	uxth	r0, r3
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	b29a      	uxth	r2, r3
 8000942:	88fb      	ldrh	r3, [r7, #6]
 8000944:	4413      	add	r3, r2
 8000946:	b29b      	uxth	r3, r3
 8000948:	3302      	adds	r3, #2
 800094a:	b299      	uxth	r1, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	b29b      	uxth	r3, r3
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	b29a      	uxth	r2, r3
 8000954:	2300      	movs	r3, #0
 8000956:	f002 f92c 	bl	8002bb2 <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<button_width/2 -2; i++)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	3301      	adds	r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	88bb      	ldrh	r3, [r7, #4]
 8000962:	085b      	lsrs	r3, r3, #1
 8000964:	b29b      	uxth	r3, r3
 8000966:	3b02      	subs	r3, #2
 8000968:	68fa      	ldr	r2, [r7, #12]
 800096a:	429a      	cmp	r2, r3
 800096c:	dbe2      	blt.n	8000934 <start_screen+0xa4>
	}
	for(int i = button_width/2 -2; i>0; i--)
 800096e:	88bb      	ldrh	r3, [r7, #4]
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	b29b      	uxth	r3, r3
 8000974:	3b02      	subs	r3, #2
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	e023      	b.n	80009c2 <start_screen+0x132>
	{
		LCD_Draw_Horizontal_Line(i+button_width/2+1, play_y + i + (button_width/2) - 2, button_width-(2*i)-2, LCD_COLOR_BLACK);
 800097a:	88bb      	ldrh	r3, [r7, #4]
 800097c:	085b      	lsrs	r3, r3, #1
 800097e:	b29a      	uxth	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	b29b      	uxth	r3, r3
 8000984:	4413      	add	r3, r2
 8000986:	b29b      	uxth	r3, r3
 8000988:	3301      	adds	r3, #1
 800098a:	b298      	uxth	r0, r3
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	b29a      	uxth	r2, r3
 8000990:	88fb      	ldrh	r3, [r7, #6]
 8000992:	4413      	add	r3, r2
 8000994:	b29a      	uxth	r2, r3
 8000996:	88bb      	ldrh	r3, [r7, #4]
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	b29b      	uxth	r3, r3
 800099c:	4413      	add	r3, r2
 800099e:	b29b      	uxth	r3, r3
 80009a0:	3b02      	subs	r3, #2
 80009a2:	b299      	uxth	r1, r3
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	88ba      	ldrh	r2, [r7, #4]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	3b02      	subs	r3, #2
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	2300      	movs	r3, #0
 80009b8:	f002 f8fb 	bl	8002bb2 <LCD_Draw_Horizontal_Line>
	for(int i = button_width/2 -2; i>0; i--)
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	3b01      	subs	r3, #1
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	dcd8      	bgt.n	800097a <start_screen+0xea>
	}

	LCD_SetFont(&Font16x24);
 80009c8:	4815      	ldr	r0, [pc, #84]	@ (8000a20 <start_screen+0x190>)
 80009ca:	f002 f94b 	bl	8002c64 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_RED);
 80009ce:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80009d2:	f002 f937 	bl	8002c44 <LCD_SetTextColor>
	LCD_DisplayChar(76, 154, 'P');
 80009d6:	2250      	movs	r2, #80	@ 0x50
 80009d8:	219a      	movs	r1, #154	@ 0x9a
 80009da:	204c      	movs	r0, #76	@ 0x4c
 80009dc:	f002 f9c0 	bl	8002d60 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_YELLOW);
 80009e0:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80009e4:	f002 f92e 	bl	8002c44 <LCD_SetTextColor>
	LCD_DisplayChar(100, 154, 'L');
 80009e8:	224c      	movs	r2, #76	@ 0x4c
 80009ea:	219a      	movs	r1, #154	@ 0x9a
 80009ec:	2064      	movs	r0, #100	@ 0x64
 80009ee:	f002 f9b7 	bl	8002d60 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_BLUE2);
 80009f2:	f240 501f 	movw	r0, #1311	@ 0x51f
 80009f6:	f002 f925 	bl	8002c44 <LCD_SetTextColor>
	LCD_DisplayChar(124, 154, 'A');
 80009fa:	2241      	movs	r2, #65	@ 0x41
 80009fc:	219a      	movs	r1, #154	@ 0x9a
 80009fe:	207c      	movs	r0, #124	@ 0x7c
 8000a00:	f002 f9ae 	bl	8002d60 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_GREEN);
 8000a04:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000a08:	f002 f91c 	bl	8002c44 <LCD_SetTextColor>
	LCD_DisplayChar(148, 154, 'Y');
 8000a0c:	2259      	movs	r2, #89	@ 0x59
 8000a0e:	219a      	movs	r1, #154	@ 0x9a
 8000a10:	2094      	movs	r0, #148	@ 0x94
 8000a12:	f002 f9a5 	bl	8002d60 <LCD_DisplayChar>
}
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000004 	.word	0x20000004

08000a24 <end_screen>:

void end_screen()
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLACK);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f002 f8e8 	bl	8002c00 <LCD_Clear>
	LCD_SetFont(&Font16x24);
 8000a30:	4818      	ldr	r0, [pc, #96]	@ (8000a94 <end_screen+0x70>)
 8000a32:	f002 f917 	bl	8002c64 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a36:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000a3a:	f002 f903 	bl	8002c44 <LCD_SetTextColor>
	LCD_DisplayChar(80, 100, 'G');
 8000a3e:	2247      	movs	r2, #71	@ 0x47
 8000a40:	2164      	movs	r1, #100	@ 0x64
 8000a42:	2050      	movs	r0, #80	@ 0x50
 8000a44:	f002 f98c 	bl	8002d60 <LCD_DisplayChar>
	LCD_DisplayChar(102, 100, 'A');
 8000a48:	2241      	movs	r2, #65	@ 0x41
 8000a4a:	2164      	movs	r1, #100	@ 0x64
 8000a4c:	2066      	movs	r0, #102	@ 0x66
 8000a4e:	f002 f987 	bl	8002d60 <LCD_DisplayChar>
	LCD_DisplayChar(122, 100, 'M');
 8000a52:	224d      	movs	r2, #77	@ 0x4d
 8000a54:	2164      	movs	r1, #100	@ 0x64
 8000a56:	207a      	movs	r0, #122	@ 0x7a
 8000a58:	f002 f982 	bl	8002d60 <LCD_DisplayChar>
	LCD_DisplayChar(144, 100, 'E');
 8000a5c:	2245      	movs	r2, #69	@ 0x45
 8000a5e:	2164      	movs	r1, #100	@ 0x64
 8000a60:	2090      	movs	r0, #144	@ 0x90
 8000a62:	f002 f97d 	bl	8002d60 <LCD_DisplayChar>
	LCD_DisplayChar(80, 130, 'O');
 8000a66:	224f      	movs	r2, #79	@ 0x4f
 8000a68:	2182      	movs	r1, #130	@ 0x82
 8000a6a:	2050      	movs	r0, #80	@ 0x50
 8000a6c:	f002 f978 	bl	8002d60 <LCD_DisplayChar>
	LCD_DisplayChar(102, 130, 'V');
 8000a70:	2256      	movs	r2, #86	@ 0x56
 8000a72:	2182      	movs	r1, #130	@ 0x82
 8000a74:	2066      	movs	r0, #102	@ 0x66
 8000a76:	f002 f973 	bl	8002d60 <LCD_DisplayChar>
	LCD_DisplayChar(122, 130, 'E');
 8000a7a:	2245      	movs	r2, #69	@ 0x45
 8000a7c:	2182      	movs	r1, #130	@ 0x82
 8000a7e:	207a      	movs	r0, #122	@ 0x7a
 8000a80:	f002 f96e 	bl	8002d60 <LCD_DisplayChar>
	LCD_DisplayChar(144, 130, 'R');
 8000a84:	2252      	movs	r2, #82	@ 0x52
 8000a86:	2182      	movs	r1, #130	@ 0x82
 8000a88:	2090      	movs	r0, #144	@ 0x90
 8000a8a:	f002 f969 	bl	8002d60 <LCD_DisplayChar>
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000004 	.word	0x20000004

08000a98 <disp_time>:

void disp_time(uint32_t time)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	uint32_t seconds = time / 1000;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a25      	ldr	r2, [pc, #148]	@ (8000b38 <disp_time+0xa0>)
 8000aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa8:	099b      	lsrs	r3, r3, #6
 8000aaa:	61fb      	str	r3, [r7, #28]
	uint32_t min = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
	uint32_t sec_tens = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
	while(seconds > 60)
 8000ab4:	e005      	b.n	8000ac2 <disp_time+0x2a>
	{
		seconds -= 60;
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b3c      	subs	r3, #60	@ 0x3c
 8000aba:	61fb      	str	r3, [r7, #28]
		min++;
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
	while(seconds > 60)
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	2b3c      	cmp	r3, #60	@ 0x3c
 8000ac6:	d8f6      	bhi.n	8000ab6 <disp_time+0x1e>
	}
	while(seconds > 10)
 8000ac8:	e005      	b.n	8000ad6 <disp_time+0x3e>
	{
		seconds -= 10;
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3b0a      	subs	r3, #10
 8000ace:	61fb      	str	r3, [r7, #28]
		sec_tens++;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	617b      	str	r3, [r7, #20]
	while(seconds > 10)
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	2b0a      	cmp	r3, #10
 8000ada:	d8f6      	bhi.n	8000aca <disp_time+0x32>
	}

	uint32_t sec_char = seconds + '0';
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	3330      	adds	r3, #48	@ 0x30
 8000ae0:	613b      	str	r3, [r7, #16]
	uint32_t sec_tens_char = sec_tens + '0';
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3330      	adds	r3, #48	@ 0x30
 8000ae6:	60fb      	str	r3, [r7, #12]
	uint32_t min_char = min + '0';
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	3330      	adds	r3, #48	@ 0x30
 8000aec:	60bb      	str	r3, [r7, #8]

	LCD_SetFont(&Font12x12);
 8000aee:	4813      	ldr	r0, [pc, #76]	@ (8000b3c <disp_time+0xa4>)
 8000af0:	f002 f8b8 	bl	8002c64 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000af4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000af8:	f002 f8a4 	bl	8002c44 <LCD_SetTextColor>
	LCD_DisplayChar(100, 160, min_char);
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	461a      	mov	r2, r3
 8000b02:	21a0      	movs	r1, #160	@ 0xa0
 8000b04:	2064      	movs	r0, #100	@ 0x64
 8000b06:	f002 f92b 	bl	8002d60 <LCD_DisplayChar>
	LCD_DisplayChar(114, 160, ':');
 8000b0a:	223a      	movs	r2, #58	@ 0x3a
 8000b0c:	21a0      	movs	r1, #160	@ 0xa0
 8000b0e:	2072      	movs	r0, #114	@ 0x72
 8000b10:	f002 f926 	bl	8002d60 <LCD_DisplayChar>
	LCD_DisplayChar(124, 160, sec_tens_char);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	21a0      	movs	r1, #160	@ 0xa0
 8000b1c:	207c      	movs	r0, #124	@ 0x7c
 8000b1e:	f002 f91f 	bl	8002d60 <LCD_DisplayChar>
	LCD_DisplayChar(138, 160, sec_char);
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	461a      	mov	r2, r3
 8000b28:	21a0      	movs	r1, #160	@ 0xa0
 8000b2a:	208a      	movs	r0, #138	@ 0x8a
 8000b2c:	f002 f918 	bl	8002d60 <LCD_DisplayChar>

}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	10624dd3 	.word	0x10624dd3
 8000b3c:	2000000c 	.word	0x2000000c

08000b40 <block_drop>:

block_t block_drop(block_t *block)
{
 8000b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b42:	b091      	sub	sp, #68	@ 0x44
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
	//when timer reaches ARR and enters IRQ handler, call this function
	volatile block_t temp_tetromino = *block;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	461c      	mov	r4, r3
 8000b4e:	f107 0608 	add.w	r6, r7, #8
 8000b52:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8000b56:	4635      	mov	r5, r6
 8000b58:	4623      	mov	r3, r4
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	6859      	ldr	r1, [r3, #4]
 8000b5e:	689a      	ldr	r2, [r3, #8]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b64:	3410      	adds	r4, #16
 8000b66:	3610      	adds	r6, #16
 8000b68:	4564      	cmp	r4, ip
 8000b6a:	d1f4      	bne.n	8000b56 <block_drop+0x16>
 8000b6c:	4633      	mov	r3, r6
 8000b6e:	4622      	mov	r2, r4
 8000b70:	6810      	ldr	r0, [r2, #0]
 8000b72:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < 4; i++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b78:	e013      	b.n	8000ba2 <block_drop+0x62>
	{
		temp_tetromino.y[i] += BLOCK_WIDTH;
 8000b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b7c:	3314      	adds	r3, #20
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	3340      	adds	r3, #64	@ 0x40
 8000b82:	443b      	add	r3, r7
 8000b84:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	3317      	adds	r3, #23
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b90:	3314      	adds	r3, #20
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	3340      	adds	r3, #64	@ 0x40
 8000b96:	443b      	add	r3, r7
 8000b98:	f823 2c34 	strh.w	r2, [r3, #-52]
	for(int i = 0; i < 4; i++)
 8000b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	dde8      	ble.n	8000b7a <block_drop+0x3a>
	}
	//*block = temp_tetromino;
	return temp_tetromino;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f107 0408 	add.w	r4, r7, #8
 8000bae:	469c      	mov	ip, r3
 8000bb0:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8000bb4:	4665      	mov	r5, ip
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bba:	6028      	str	r0, [r5, #0]
 8000bbc:	6069      	str	r1, [r5, #4]
 8000bbe:	60aa      	str	r2, [r5, #8]
 8000bc0:	60eb      	str	r3, [r5, #12]
 8000bc2:	3410      	adds	r4, #16
 8000bc4:	f10c 0c10 	add.w	ip, ip, #16
 8000bc8:	4574      	cmp	r4, lr
 8000bca:	d1f3      	bne.n	8000bb4 <block_drop+0x74>
 8000bcc:	4663      	mov	r3, ip
 8000bce:	4622      	mov	r2, r4
 8000bd0:	6810      	ldr	r0, [r2, #0]
 8000bd2:	6018      	str	r0, [r3, #0]
}
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	3744      	adds	r7, #68	@ 0x44
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000bdc <block_create>:

block_t block_create()
{
 8000bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bde:	b0b1      	sub	sp, #196	@ 0xc4
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	MX_RNG_Init();
 8000be4:	f001 fdb4 	bl	8002750 <MX_RNG_Init>
	volatile block_t block = {0};
 8000be8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bec:	2234      	movs	r2, #52	@ 0x34
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f007 fac3 	bl	800817c <memset>
	//evaluate rng for color
	//set pos_x, pos_y
	//return the block

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8000bf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	48d0      	ldr	r0, [pc, #832]	@ (8000f40 <block_create+0x364>)
 8000bfe:	f006 fd9f 	bl	8007740 <HAL_RNG_GenerateRandomNumber>
	rand %= 7;
 8000c02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000c04:	4bcf      	ldr	r3, [pc, #828]	@ (8000f44 <block_create+0x368>)
 8000c06:	fba3 2301 	umull	r2, r3, r3, r1
 8000c0a:	1aca      	subs	r2, r1, r3
 8000c0c:	0852      	lsrs	r2, r2, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	089a      	lsrs	r2, r3, #2
 8000c12:	4613      	mov	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	1aca      	subs	r2, r1, r3
 8000c1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
	MX_RNG_Deinit();
 8000c1c:	f001 fdc0 	bl	80027a0 <MX_RNG_Deinit>

	uint8_t name = rand;
 8000c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		block.name = name;
 8000c26:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000c2a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

	uint8_t color = rand;
 8000c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c30:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

	//COLOR
	if(color == BLUE)
 8000c34:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <block_create+0x64>
	{
		block.color = LCD_COLOR_BLUE;
 8000c3c:	231f      	movs	r3, #31
 8000c3e:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == RED)
 8000c40:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d102      	bne.n	8000c4e <block_create+0x72>
	{
		block.color = LCD_COLOR_RED;
 8000c48:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c4c:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == MAGENTA)
 8000c4e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d102      	bne.n	8000c5c <block_create+0x80>
	{
		block.color = LCD_COLOR_MAGENTA;
 8000c56:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000c5a:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == GREEN)
 8000c5c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c60:	2b03      	cmp	r3, #3
 8000c62:	d102      	bne.n	8000c6a <block_create+0x8e>
	{
		block.color = LCD_COLOR_GREEN;
 8000c64:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000c68:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == CYAN)
 8000c6a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	d102      	bne.n	8000c78 <block_create+0x9c>
	{
		block.color = LCD_COLOR_CYAN;
 8000c72:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000c76:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == YELLOW)
 8000c78:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c7c:	2b05      	cmp	r3, #5
 8000c7e:	d102      	bne.n	8000c86 <block_create+0xaa>
	{
		block.color = LCD_COLOR_YELLOW;
 8000c80:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000c84:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == ORANGE)
 8000c86:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d102      	bne.n	8000c94 <block_create+0xb8>
	{
		block.color = LCD_COLOR_ORANGE;
 8000c8e:	f64f 33c1 	movw	r3, #64449	@ 0xfbc1
 8000c92:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == PURPLE)
 8000c94:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c98:	2b07      	cmp	r3, #7
 8000c9a:	d102      	bne.n	8000ca2 <block_create+0xc6>
	{
		block.color = LCD_COLOR_PURPLE;
 8000c9c:	f647 0318 	movw	r3, #30744	@ 0x7818
 8000ca0:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	//COORDINATES
	for(int i = 0; i < 4; i++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000ca8:	e017      	b.n	8000cda <block_create+0xfe>
	{
		block.x[i] = BLOCK_START_X + i*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000caa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	441a      	add	r2, r3
 8000cb6:	00d2      	lsls	r2, r2, #3
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	334b      	adds	r3, #75	@ 0x4b
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000cc4:	3310      	adds	r3, #16
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	33c0      	adds	r3, #192	@ 0xc0
 8000cca:	443b      	add	r3, r7
 8000ccc:	f823 2c8c 	strh.w	r2, [r3, #-140]
	for(int i = 0; i < 4; i++)
 8000cd0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000cda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	dde3      	ble.n	8000caa <block_create+0xce>
	}

	//BLOCK MATRICES
	if(block.name == O)
 8000ce2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d16f      	bne.n	8000dcc <block_create+0x1f0>
	{
		uint16_t temp[4][4] =
 8000cec:	4b96      	ldr	r3, [pc, #600]	@ (8000f48 <block_create+0x36c>)
 8000cee:	f107 040c 	add.w	r4, r7, #12
 8000cf2:	461d      	mov	r5, r3
 8000cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,1},
			{0,0,1,1}};

		for(int i = 0; i < 4; i++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000d06:	e028      	b.n	8000d5a <block_create+0x17e>
		{
			for(int j = 0; j < 4; j++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000d0e:	e01b      	b.n	8000d48 <block_create+0x16c>
			{
				block.mat[i][j] = temp[j][i];
 8000d10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d14:	009a      	lsls	r2, r3, #2
 8000d16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d1a:	4413      	add	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	33c0      	adds	r3, #192	@ 0xc0
 8000d20:	443b      	add	r3, r7
 8000d22:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8000d26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d2a:	009a      	lsls	r2, r3, #2
 8000d2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d30:	4413      	add	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	33c0      	adds	r3, #192	@ 0xc0
 8000d36:	443b      	add	r3, r7
 8000d38:	460a      	mov	r2, r1
 8000d3a:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8000d3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d42:	3301      	adds	r3, #1
 8000d44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000d48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	dddf      	ble.n	8000d10 <block_create+0x134>
		for(int i = 0; i < 4; i++)
 8000d50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d54:	3301      	adds	r3, #1
 8000d56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000d5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	ddd2      	ble.n	8000d08 <block_create+0x12c>
			}
		}
		for(int i = 0; i < 4; i++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000d68:	e02c      	b.n	8000dc4 <block_create+0x1e8>
		{
			block.x[i] = BLOCK_START_X + (i-1)*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000d6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	0052      	lsls	r2, r2, #1
 8000d76:	441a      	add	r2, r3
 8000d78:	00d2      	lsls	r2, r2, #3
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	334b      	adds	r3, #75	@ 0x4b
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d86:	3310      	adds	r3, #16
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	33c0      	adds	r3, #192	@ 0xc0
 8000d8c:	443b      	add	r3, r7
 8000d8e:	f823 2c8c 	strh.w	r2, [r3, #-140]
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000d92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d96:	3b02      	subs	r3, #2
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	0052      	lsls	r2, r2, #1
 8000d9e:	441a      	add	r2, r3
 8000da0:	00d2      	lsls	r2, r2, #3
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	3311      	adds	r3, #17
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000dae:	3314      	adds	r3, #20
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	33c0      	adds	r3, #192	@ 0xc0
 8000db4:	443b      	add	r3, r7
 8000db6:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 8000dba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000dc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000dc8:	2b03      	cmp	r3, #3
 8000dca:	ddce      	ble.n	8000d6a <block_create+0x18e>
		}
	}
	if(block.name == L)
 8000dcc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d16f      	bne.n	8000eb6 <block_create+0x2da>
	{
		uint16_t temp[4][4] =
 8000dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8000f4c <block_create+0x370>)
 8000dd8:	f107 040c 	add.w	r4, r7, #12
 8000ddc:	461d      	mov	r5, r3
 8000dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000de6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,1,0},
			{0,0,1,0},
			{0,0,1,1}};
		for(int i = 0; i < 4; i++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000df0:	e028      	b.n	8000e44 <block_create+0x268>
		{
			for(int j = 0; j < 4; j++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000df8:	e01b      	b.n	8000e32 <block_create+0x256>
			{
				block.mat[i][j] = temp[j][i];
 8000dfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000dfe:	009a      	lsls	r2, r3, #2
 8000e00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e04:	4413      	add	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	33c0      	adds	r3, #192	@ 0xc0
 8000e0a:	443b      	add	r3, r7
 8000e0c:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8000e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e14:	009a      	lsls	r2, r3, #2
 8000e16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e1a:	4413      	add	r3, r2
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	33c0      	adds	r3, #192	@ 0xc0
 8000e20:	443b      	add	r3, r7
 8000e22:	460a      	mov	r2, r1
 8000e24:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8000e28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000e32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	dddf      	ble.n	8000dfa <block_create+0x21e>
		for(int i = 0; i < 4; i++)
 8000e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e3e:	3301      	adds	r3, #1
 8000e40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000e44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	ddd2      	ble.n	8000df2 <block_create+0x216>
			}
		}
		for(int i = 0; i < 4; i++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000e52:	e02c      	b.n	8000eae <block_create+0x2d2>
		{
			block.x[i] = BLOCK_START_X + (i-1)*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000e54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	0052      	lsls	r2, r2, #1
 8000e60:	441a      	add	r2, r3
 8000e62:	00d2      	lsls	r2, r2, #3
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	334b      	adds	r3, #75	@ 0x4b
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e70:	3310      	adds	r3, #16
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	33c0      	adds	r3, #192	@ 0xc0
 8000e76:	443b      	add	r3, r7
 8000e78:	f823 2c8c 	strh.w	r2, [r3, #-140]
			block.y[i] = BLOCK_START_Y + (i-1)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000e7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e80:	3b01      	subs	r3, #1
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	461a      	mov	r2, r3
 8000e86:	0052      	lsls	r2, r2, #1
 8000e88:	441a      	add	r2, r3
 8000e8a:	00d2      	lsls	r2, r2, #3
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	3311      	adds	r3, #17
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e98:	3314      	adds	r3, #20
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	33c0      	adds	r3, #192	@ 0xc0
 8000e9e:	443b      	add	r3, r7
 8000ea0:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 8000ea4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000eae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	ddce      	ble.n	8000e54 <block_create+0x278>
		}
	}
	if(block.name == J)
 8000eb6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d179      	bne.n	8000fb4 <block_create+0x3d8>
	{
		uint16_t temp[4][4] =
 8000ec0:	4b23      	ldr	r3, [pc, #140]	@ (8000f50 <block_create+0x374>)
 8000ec2:	f107 040c 	add.w	r4, r7, #12
 8000ec6:	461d      	mov	r5, r3
 8000ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ecc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ed0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,1,0},
			{0,0,1,0},
			{0,1,1,0}};
		for(int i = 0; i < 4; i++)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000eda:	e028      	b.n	8000f2e <block_create+0x352>
		{
			for(int j = 0; j < 4; j++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000ee2:	e01b      	b.n	8000f1c <block_create+0x340>
			{
				block.mat[i][j] = temp[j][i];
 8000ee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ee8:	009a      	lsls	r2, r3, #2
 8000eea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000eee:	4413      	add	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	33c0      	adds	r3, #192	@ 0xc0
 8000ef4:	443b      	add	r3, r7
 8000ef6:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8000efa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000efe:	009a      	lsls	r2, r3, #2
 8000f00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f04:	4413      	add	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	33c0      	adds	r3, #192	@ 0xc0
 8000f0a:	443b      	add	r3, r7
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8000f12:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f16:	3301      	adds	r3, #1
 8000f18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000f1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	dddf      	ble.n	8000ee4 <block_create+0x308>
		for(int i = 0; i < 4; i++)
 8000f24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000f28:	3301      	adds	r3, #1
 8000f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	ddd2      	ble.n	8000edc <block_create+0x300>
			}
		}
		for(int i = 0; i < 4; i++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000f3c:	e036      	b.n	8000fac <block_create+0x3d0>
 8000f3e:	bf00      	nop
 8000f40:	200000a0 	.word	0x200000a0
 8000f44:	24924925 	.word	0x24924925
 8000f48:	08008208 	.word	0x08008208
 8000f4c:	08008228 	.word	0x08008228
 8000f50:	08008248 	.word	0x08008248
		{
			block.x[i] = BLOCK_START_X + i*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	0052      	lsls	r2, r2, #1
 8000f5e:	441a      	add	r2, r3
 8000f60:	00d2      	lsls	r2, r2, #3
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	334b      	adds	r3, #75	@ 0x4b
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f6e:	3310      	adds	r3, #16
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	33c0      	adds	r3, #192	@ 0xc0
 8000f74:	443b      	add	r3, r7
 8000f76:	f823 2c8c 	strh.w	r2, [r3, #-140]
			block.y[i] = BLOCK_START_Y + (i-1)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000f7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	461a      	mov	r2, r3
 8000f84:	0052      	lsls	r2, r2, #1
 8000f86:	441a      	add	r2, r3
 8000f88:	00d2      	lsls	r2, r2, #3
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	3311      	adds	r3, #17
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f96:	3314      	adds	r3, #20
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	33c0      	adds	r3, #192	@ 0xc0
 8000f9c:	443b      	add	r3, r7
 8000f9e:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 8000fa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	ddcf      	ble.n	8000f54 <block_create+0x378>
		}
	}
	if(block.name == S)
 8000fb4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d15b      	bne.n	8001076 <block_create+0x49a>
	{
		uint16_t temp[4][4] =
 8000fbe:	4bba      	ldr	r3, [pc, #744]	@ (80012a8 <block_create+0x6cc>)
 8000fc0:	f107 040c 	add.w	r4, r7, #12
 8000fc4:	461d      	mov	r5, r3
 8000fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,1},
			{0,1,1,0}};
		for(int i = 0; i < 4; i++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000fd8:	e028      	b.n	800102c <block_create+0x450>
		{
			for(int j = 0; j < 4; j++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000fe0:	e01b      	b.n	800101a <block_create+0x43e>
			{
				block.mat[i][j] = temp[j][i];
 8000fe2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000fe6:	009a      	lsls	r2, r3, #2
 8000fe8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000fec:	4413      	add	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	33c0      	adds	r3, #192	@ 0xc0
 8000ff2:	443b      	add	r3, r7
 8000ff4:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8000ff8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ffc:	009a      	lsls	r2, r3, #2
 8000ffe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001002:	4413      	add	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	33c0      	adds	r3, #192	@ 0xc0
 8001008:	443b      	add	r3, r7
 800100a:	460a      	mov	r2, r1
 800100c:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8001010:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001014:	3301      	adds	r3, #1
 8001016:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800101a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800101e:	2b03      	cmp	r3, #3
 8001020:	dddf      	ble.n	8000fe2 <block_create+0x406>
		for(int i = 0; i < 4; i++)
 8001022:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001026:	3301      	adds	r3, #1
 8001028:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800102c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001030:	2b03      	cmp	r3, #3
 8001032:	ddd2      	ble.n	8000fda <block_create+0x3fe>
			}
		}
		for(int i = 0; i < 4; i++)
 8001034:	2300      	movs	r3, #0
 8001036:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800103a:	e018      	b.n	800106e <block_create+0x492>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 800103c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001040:	3b02      	subs	r3, #2
 8001042:	b29b      	uxth	r3, r3
 8001044:	461a      	mov	r2, r3
 8001046:	0052      	lsls	r2, r2, #1
 8001048:	441a      	add	r2, r3
 800104a:	00d2      	lsls	r2, r2, #3
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	b29b      	uxth	r3, r3
 8001050:	3311      	adds	r3, #17
 8001052:	b29a      	uxth	r2, r3
 8001054:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001058:	3314      	adds	r3, #20
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	33c0      	adds	r3, #192	@ 0xc0
 800105e:	443b      	add	r3, r7
 8001060:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 8001064:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001068:	3301      	adds	r3, #1
 800106a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800106e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001072:	2b03      	cmp	r3, #3
 8001074:	dde2      	ble.n	800103c <block_create+0x460>
		}
	}
	if(block.name == Z)
 8001076:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b04      	cmp	r3, #4
 800107e:	d15b      	bne.n	8001138 <block_create+0x55c>
	{
		uint16_t temp[4][4] =
 8001080:	4b8a      	ldr	r3, [pc, #552]	@ (80012ac <block_create+0x6d0>)
 8001082:	f107 040c 	add.w	r4, r7, #12
 8001086:	461d      	mov	r5, r3
 8001088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800108a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800108c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001090:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,1,1,0},
			{0,0,1,1}};
		for(int i = 0; i < 4; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800109a:	e028      	b.n	80010ee <block_create+0x512>
		{
			for(int j = 0; j < 4; j++)
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80010a2:	e01b      	b.n	80010dc <block_create+0x500>
			{
				block.mat[i][j] = temp[j][i];
 80010a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010a8:	009a      	lsls	r2, r3, #2
 80010aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010ae:	4413      	add	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	33c0      	adds	r3, #192	@ 0xc0
 80010b4:	443b      	add	r3, r7
 80010b6:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 80010ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010be:	009a      	lsls	r2, r3, #2
 80010c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010c4:	4413      	add	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	33c0      	adds	r3, #192	@ 0xc0
 80010ca:	443b      	add	r3, r7
 80010cc:	460a      	mov	r2, r1
 80010ce:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 80010d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010d6:	3301      	adds	r3, #1
 80010d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80010dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	dddf      	ble.n	80010a4 <block_create+0x4c8>
		for(int i = 0; i < 4; i++)
 80010e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010e8:	3301      	adds	r3, #1
 80010ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80010ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	ddd2      	ble.n	800109c <block_create+0x4c0>
			}
		}
		for(int i = 0; i < 4; i++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80010fc:	e018      	b.n	8001130 <block_create+0x554>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 80010fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001102:	3b02      	subs	r3, #2
 8001104:	b29b      	uxth	r3, r3
 8001106:	461a      	mov	r2, r3
 8001108:	0052      	lsls	r2, r2, #1
 800110a:	441a      	add	r2, r3
 800110c:	00d2      	lsls	r2, r2, #3
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	b29b      	uxth	r3, r3
 8001112:	3311      	adds	r3, #17
 8001114:	b29a      	uxth	r2, r3
 8001116:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800111a:	3314      	adds	r3, #20
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	33c0      	adds	r3, #192	@ 0xc0
 8001120:	443b      	add	r3, r7
 8001122:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 8001126:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800112a:	3301      	adds	r3, #1
 800112c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001130:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001134:	2b03      	cmp	r3, #3
 8001136:	dde2      	ble.n	80010fe <block_create+0x522>
		}
	}
	if(block.name == T)
 8001138:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b05      	cmp	r3, #5
 8001140:	d149      	bne.n	80011d6 <block_create+0x5fa>
	{
		uint16_t temp[4][4] =
 8001142:	4b5b      	ldr	r3, [pc, #364]	@ (80012b0 <block_create+0x6d4>)
 8001144:	f107 040c 	add.w	r4, r7, #12
 8001148:	461d      	mov	r5, r3
 800114a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001152:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,0},
			{0,1,1,1}};
		for(int i = 0; i < 4; i++)
 8001156:	2300      	movs	r3, #0
 8001158:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800115a:	e01e      	b.n	800119a <block_create+0x5be>
		{
			for(int j = 0; j < 4; j++)
 800115c:	2300      	movs	r3, #0
 800115e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001160:	e015      	b.n	800118e <block_create+0x5b2>
			{
				block.mat[i][j] = temp[j][i];
 8001162:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001164:	009a      	lsls	r2, r3, #2
 8001166:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001168:	4413      	add	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	33c0      	adds	r3, #192	@ 0xc0
 800116e:	443b      	add	r3, r7
 8001170:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8001174:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001176:	009a      	lsls	r2, r3, #2
 8001178:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800117a:	4413      	add	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	33c0      	adds	r3, #192	@ 0xc0
 8001180:	443b      	add	r3, r7
 8001182:	460a      	mov	r2, r1
 8001184:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8001188:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800118a:	3301      	adds	r3, #1
 800118c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800118e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001190:	2b03      	cmp	r3, #3
 8001192:	dde6      	ble.n	8001162 <block_create+0x586>
		for(int i = 0; i < 4; i++)
 8001194:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001196:	3301      	adds	r3, #1
 8001198:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800119a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800119c:	2b03      	cmp	r3, #3
 800119e:	dddd      	ble.n	800115c <block_create+0x580>
			}
		}
		for(int i = 0; i < 4; i++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80011a4:	e014      	b.n	80011d0 <block_create+0x5f4>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 80011a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011a8:	3b02      	subs	r3, #2
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	461a      	mov	r2, r3
 80011ae:	0052      	lsls	r2, r2, #1
 80011b0:	441a      	add	r2, r3
 80011b2:	00d2      	lsls	r2, r2, #3
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	3311      	adds	r3, #17
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011be:	3314      	adds	r3, #20
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	33c0      	adds	r3, #192	@ 0xc0
 80011c4:	443b      	add	r3, r7
 80011c6:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 80011ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011cc:	3301      	adds	r3, #1
 80011ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80011d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	dde7      	ble.n	80011a6 <block_create+0x5ca>
		}
	}
	if(block.name == I)
 80011d6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b06      	cmp	r3, #6
 80011de:	d149      	bne.n	8001274 <block_create+0x698>
	{
		uint16_t temp[4][4] =
 80011e0:	4b34      	ldr	r3, [pc, #208]	@ (80012b4 <block_create+0x6d8>)
 80011e2:	f107 040c 	add.w	r4, r7, #12
 80011e6:	461d      	mov	r5, r3
 80011e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0},
			{1,1,1,1}};
		for(int i = 0; i < 4; i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80011f8:	e01e      	b.n	8001238 <block_create+0x65c>
		{
			for(int j = 0; j < 4; j++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80011fe:	e015      	b.n	800122c <block_create+0x650>
			{
				block.mat[i][j] = temp[j][i];
 8001200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001202:	009a      	lsls	r2, r3, #2
 8001204:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001206:	4413      	add	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	33c0      	adds	r3, #192	@ 0xc0
 800120c:	443b      	add	r3, r7
 800120e:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8001212:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001214:	009a      	lsls	r2, r3, #2
 8001216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001218:	4413      	add	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	33c0      	adds	r3, #192	@ 0xc0
 800121e:	443b      	add	r3, r7
 8001220:	460a      	mov	r2, r1
 8001222:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8001226:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001228:	3301      	adds	r3, #1
 800122a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800122c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800122e:	2b03      	cmp	r3, #3
 8001230:	dde6      	ble.n	8001200 <block_create+0x624>
		for(int i = 0; i < 4; i++)
 8001232:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001234:	3301      	adds	r3, #1
 8001236:	673b      	str	r3, [r7, #112]	@ 0x70
 8001238:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800123a:	2b03      	cmp	r3, #3
 800123c:	dddd      	ble.n	80011fa <block_create+0x61e>
			}
		}
		for(int i = 0; i < 4; i++)
 800123e:	2300      	movs	r3, #0
 8001240:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001242:	e014      	b.n	800126e <block_create+0x692>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8001244:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001246:	3b02      	subs	r3, #2
 8001248:	b29b      	uxth	r3, r3
 800124a:	461a      	mov	r2, r3
 800124c:	0052      	lsls	r2, r2, #1
 800124e:	441a      	add	r2, r3
 8001250:	00d2      	lsls	r2, r2, #3
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	b29b      	uxth	r3, r3
 8001256:	3311      	adds	r3, #17
 8001258:	b29a      	uxth	r2, r3
 800125a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800125c:	3314      	adds	r3, #20
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	33c0      	adds	r3, #192	@ 0xc0
 8001262:	443b      	add	r3, r7
 8001264:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 8001268:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800126a:	3301      	adds	r3, #1
 800126c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800126e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001270:	2b03      	cmp	r3, #3
 8001272:	dde7      	ble.n	8001244 <block_create+0x668>
		}
	}
	return block;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800127a:	469c      	mov	ip, r3
 800127c:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001280:	4665      	mov	r5, ip
 8001282:	4626      	mov	r6, r4
 8001284:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001286:	6028      	str	r0, [r5, #0]
 8001288:	6069      	str	r1, [r5, #4]
 800128a:	60aa      	str	r2, [r5, #8]
 800128c:	60eb      	str	r3, [r5, #12]
 800128e:	3410      	adds	r4, #16
 8001290:	f10c 0c10 	add.w	ip, ip, #16
 8001294:	4574      	cmp	r4, lr
 8001296:	d1f3      	bne.n	8001280 <block_create+0x6a4>
 8001298:	4663      	mov	r3, ip
 800129a:	4622      	mov	r2, r4
 800129c:	6810      	ldr	r0, [r2, #0]
 800129e:	6018      	str	r0, [r3, #0]
}
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	37c4      	adds	r7, #196	@ 0xc4
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a8:	08008268 	.word	0x08008268
 80012ac:	08008288 	.word	0x08008288
 80012b0:	080082a8 	.word	0x080082a8
 80012b4:	080082c8 	.word	0x080082c8

080012b8 <map_init>:

map_t map_init()
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 80012be:	af00      	add	r7, sp, #0
 80012c0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80012c4:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80012c8:	6018      	str	r0, [r3, #0]
	volatile map_t map = {0};
 80012ca:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80012ce:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80012d2:	4618      	mov	r0, r3
 80012d4:	f240 2336 	movw	r3, #566	@ 0x236
 80012d8:	461a      	mov	r2, r3
 80012da:	2100      	movs	r1, #0
 80012dc:	f006 ff4e 	bl	800817c <memset>
	for(int i = 0; i < 10; i++)
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 80012e6:	e019      	b.n	800131c <map_init+0x64>
	{
		map.x[i] = LEFT_EDGE + i*BLOCK_WIDTH;
 80012e8:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	461a      	mov	r2, r3
 80012f0:	0052      	lsls	r2, r2, #1
 80012f2:	441a      	add	r2, r3
 80012f4:	00d2      	lsls	r2, r2, #3
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	3306      	adds	r3, #6
 80012fc:	b299      	uxth	r1, r3
 80012fe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001302:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001306:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 800130a:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 800130e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 10; i++)
 8001312:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8001316:	3301      	adds	r3, #1
 8001318:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 800131c:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8001320:	2b09      	cmp	r3, #9
 8001322:	dde1      	ble.n	80012e8 <map_init+0x30>
	}
	for(int i = 0; i < 13; i++)
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 800132a:	e01b      	b.n	8001364 <map_init+0xac>
	{
		map.y[i] = MAP_DIFFERENCE + EDGE_WIDTH + i*BLOCK_WIDTH + 2;
 800132c:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001330:	b29b      	uxth	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	0052      	lsls	r2, r2, #1
 8001336:	441a      	add	r2, r3
 8001338:	00d2      	lsls	r2, r2, #3
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	b29b      	uxth	r3, r3
 800133e:	3311      	adds	r3, #17
 8001340:	b299      	uxth	r1, r3
 8001342:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001346:	f5a3 7210 	sub.w	r2, r3, #576	@ 0x240
 800134a:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800134e:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	460a      	mov	r2, r1
 8001358:	809a      	strh	r2, [r3, #4]
	for(int i = 0; i < 13; i++)
 800135a:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800135e:	3301      	adds	r3, #1
 8001360:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8001364:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001368:	2b0c      	cmp	r3, #12
 800136a:	dddf      	ble.n	800132c <map_init+0x74>
	}
	return map;
 800136c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001370:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800137a:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f240 2336 	movw	r3, #566	@ 0x236
 8001386:	461a      	mov	r2, r3
 8001388:	f006 ff24 	bl	80081d4 <memcpy>
}
 800138c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001390:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <collision>:

uint8_t collision(block_t *block, map_t* map, uint8_t dir)
{
 800139e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a0:	f5ad 7d2d 	sub.w	sp, sp, #692	@ 0x2b4
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80013aa:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80013ae:	6018      	str	r0, [r3, #0]
 80013b0:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80013b4:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80013b8:	6019      	str	r1, [r3, #0]
 80013ba:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80013be:	f2a3 23a9 	subw	r3, r3, #681	@ 0x2a9
 80013c2:	701a      	strb	r2, [r3, #0]
	volatile block_t temp_tetromino = *block;
 80013c4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80013c8:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	461c      	mov	r4, r3
 80013d0:	f507 7616 	add.w	r6, r7, #600	@ 0x258
 80013d4:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80013d8:	4635      	mov	r5, r6
 80013da:	4623      	mov	r3, r4
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	6859      	ldr	r1, [r3, #4]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e6:	3410      	adds	r4, #16
 80013e8:	3610      	adds	r6, #16
 80013ea:	4564      	cmp	r4, ip
 80013ec:	d1f4      	bne.n	80013d8 <collision+0x3a>
 80013ee:	4633      	mov	r3, r6
 80013f0:	4622      	mov	r2, r4
 80013f2:	6810      	ldr	r0, [r2, #0]
 80013f4:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 80013f6:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80013fa:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 80013fe:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001402:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	f240 2336 	movw	r3, #566	@ 0x236
 8001410:	461a      	mov	r2, r3
 8001412:	f006 fedf 	bl	80081d4 <memcpy>

	uint16_t y_coor[4];
	uint16_t x_coor[4];
	uint8_t ind = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	f887 32af 	strb.w	r3, [r7, #687]	@ 0x2af

	for(int i = 0; i < 4; i++)
 800141c:	2300      	movs	r3, #0
 800141e:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8001422:	e049      	b.n	80014b8 <collision+0x11a>
	{
		for(int j = 0; j < 4; j++)
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 800142a:	e03c      	b.n	80014a6 <collision+0x108>
		{
			if(temp_tetromino.mat[i][j])
 800142c:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8001430:	009a      	lsls	r2, r3, #2
 8001432:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8001436:	4413      	add	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800143e:	443b      	add	r3, r7
 8001440:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8001444:	b29b      	uxth	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d028      	beq.n	800149c <collision+0xfe>
			{
				x_coor[ind] = temp_tetromino.x[i];
 800144a:	f897 22af 	ldrb.w	r2, [r7, #687]	@ 0x2af
 800144e:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8001452:	3310      	adds	r3, #16
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800145a:	443b      	add	r3, r7
 800145c:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8001460:	b299      	uxth	r1, r3
 8001462:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001466:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800146a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				y_coor[ind] = temp_tetromino.y[j];
 800146e:	f897 22af 	ldrb.w	r2, [r7, #687]	@ 0x2af
 8001472:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8001476:	3314      	adds	r3, #20
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800147e:	443b      	add	r3, r7
 8001480:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8001484:	b299      	uxth	r1, r3
 8001486:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800148a:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 800148e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				ind++;
 8001492:	f897 32af 	ldrb.w	r3, [r7, #687]	@ 0x2af
 8001496:	3301      	adds	r3, #1
 8001498:	f887 32af 	strb.w	r3, [r7, #687]	@ 0x2af
		for(int j = 0; j < 4; j++)
 800149c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80014a0:	3301      	adds	r3, #1
 80014a2:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 80014a6:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	ddbe      	ble.n	800142c <collision+0x8e>
	for(int i = 0; i < 4; i++)
 80014ae:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 80014b2:	3301      	adds	r3, #1
 80014b4:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 80014b8:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 80014bc:	2b03      	cmp	r3, #3
 80014be:	ddb1      	ble.n	8001424 <collision+0x86>
			}
		}
	}

	if(dir == LEFT)
 80014c0:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80014c4:	f2a3 23a9 	subw	r3, r3, #681	@ 0x2a9
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f040 80f4 	bne.w	80016b8 <collision+0x31a>
	{
		for(int i = 0; i < 10; i++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 80014d6:	e0cc      	b.n	8001672 <collision+0x2d4>
		{
			for(int j = 0; j < 13; j++)
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 80014de:	e0be      	b.n	800165e <collision+0x2c0>
			{
				if(temp_map.map_mat[i][j])
 80014e0:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80014e4:	f5a3 7124 	sub.w	r1, r3, #656	@ 0x290
 80014e8:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80014ec:	4613      	mov	r3, r2
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 80014fa:	4413      	add	r3, r2
 80014fc:	3380      	adds	r3, #128	@ 0x80
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	440b      	add	r3, r1
 8001502:	889b      	ldrh	r3, [r3, #4]
 8001504:	b29b      	uxth	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80a4 	beq.w	8001654 <collision+0x2b6>
				{
					if(temp_map.x[i] == x_coor[0] - BLOCK_WIDTH && temp_map.y[j] == y_coor[0])
 800150c:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001510:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001514:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 8001518:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 800151c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001520:	b29b      	uxth	r3, r3
 8001522:	461a      	mov	r2, r3
 8001524:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001528:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	3b17      	subs	r3, #23
 8001530:	429a      	cmp	r2, r3
 8001532:	d114      	bne.n	800155e <collision+0x1c0>
 8001534:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001538:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 800153c:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001540:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	889b      	ldrh	r3, [r3, #4]
 800154a:	b29a      	uxth	r2, r3
 800154c:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001550:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d101      	bne.n	800155e <collision+0x1c0>
					{
						return 1;
 800155a:	2301      	movs	r3, #1
 800155c:	e2ad      	b.n	8001aba <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[1] - BLOCK_WIDTH && temp_map.y[j] == y_coor[1])
 800155e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001562:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001566:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 800156a:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 800156e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001572:	b29b      	uxth	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800157a:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800157e:	885b      	ldrh	r3, [r3, #2]
 8001580:	3b17      	subs	r3, #23
 8001582:	429a      	cmp	r2, r3
 8001584:	d114      	bne.n	80015b0 <collision+0x212>
 8001586:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800158a:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 800158e:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001592:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	889b      	ldrh	r3, [r3, #4]
 800159c:	b29a      	uxth	r2, r3
 800159e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80015a2:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80015a6:	885b      	ldrh	r3, [r3, #2]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d101      	bne.n	80015b0 <collision+0x212>
					{
						return 1;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e284      	b.n	8001aba <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[2] - BLOCK_WIDTH && temp_map.y[j] == y_coor[2])
 80015b0:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80015b4:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80015b8:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80015bc:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80015c0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	461a      	mov	r2, r3
 80015c8:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80015cc:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80015d0:	889b      	ldrh	r3, [r3, #4]
 80015d2:	3b17      	subs	r3, #23
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d114      	bne.n	8001602 <collision+0x264>
 80015d8:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80015dc:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 80015e0:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80015e4:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	889b      	ldrh	r3, [r3, #4]
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80015f4:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80015f8:	889b      	ldrh	r3, [r3, #4]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d101      	bne.n	8001602 <collision+0x264>
					{
						return 1;
 80015fe:	2301      	movs	r3, #1
 8001600:	e25b      	b.n	8001aba <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[3] - BLOCK_WIDTH && temp_map.y[j] == y_coor[3])
 8001602:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001606:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 800160a:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 800160e:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001612:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001616:	b29b      	uxth	r3, r3
 8001618:	461a      	mov	r2, r3
 800161a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800161e:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001622:	88db      	ldrh	r3, [r3, #6]
 8001624:	3b17      	subs	r3, #23
 8001626:	429a      	cmp	r2, r3
 8001628:	d114      	bne.n	8001654 <collision+0x2b6>
 800162a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800162e:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001632:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001636:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4413      	add	r3, r2
 800163e:	889b      	ldrh	r3, [r3, #4]
 8001640:	b29a      	uxth	r2, r3
 8001642:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001646:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 800164a:	88db      	ldrh	r3, [r3, #6]
 800164c:	429a      	cmp	r2, r3
 800164e:	d101      	bne.n	8001654 <collision+0x2b6>
					{
						return 1;
 8001650:	2301      	movs	r3, #1
 8001652:	e232      	b.n	8001aba <collision+0x71c>
			for(int j = 0; j < 13; j++)
 8001654:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001658:	3301      	adds	r3, #1
 800165a:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 800165e:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001662:	2b0c      	cmp	r3, #12
 8001664:	f77f af3c 	ble.w	80014e0 <collision+0x142>
		for(int i = 0; i < 10; i++)
 8001668:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800166c:	3301      	adds	r3, #1
 800166e:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8001672:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001676:	2b09      	cmp	r3, #9
 8001678:	f77f af2e 	ble.w	80014d8 <collision+0x13a>
					}
				}
			}
		}
		if(x_coor[0] == LEFT_EDGE || x_coor[1] == LEFT_EDGE || x_coor[2] == LEFT_EDGE || x_coor[3] == LEFT_EDGE)
 800167c:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001680:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	2b06      	cmp	r3, #6
 8001688:	d014      	beq.n	80016b4 <collision+0x316>
 800168a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800168e:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001692:	885b      	ldrh	r3, [r3, #2]
 8001694:	2b06      	cmp	r3, #6
 8001696:	d00d      	beq.n	80016b4 <collision+0x316>
 8001698:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800169c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80016a0:	889b      	ldrh	r3, [r3, #4]
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d006      	beq.n	80016b4 <collision+0x316>
 80016a6:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80016aa:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80016ae:	88db      	ldrh	r3, [r3, #6]
 80016b0:	2b06      	cmp	r3, #6
 80016b2:	d101      	bne.n	80016b8 <collision+0x31a>
		{
			return 1;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e200      	b.n	8001aba <collision+0x71c>
		}
	}

	if(dir == RIGHT)
 80016b8:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80016bc:	f2a3 23a9 	subw	r3, r3, #681	@ 0x2a9
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	f040 80f4 	bne.w	80018b0 <collision+0x512>
	{
		for(int i = 0; i < 10; i++)
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 80016ce:	e0cc      	b.n	800186a <collision+0x4cc>
		{
			for(int j = 0; j < 13; j++)
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 80016d6:	e0be      	b.n	8001856 <collision+0x4b8>
			{
				if(temp_map.map_mat[i][j])
 80016d8:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80016dc:	f5a3 7124 	sub.w	r1, r3, #656	@ 0x290
 80016e0:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 80016f2:	4413      	add	r3, r2
 80016f4:	3380      	adds	r3, #128	@ 0x80
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	440b      	add	r3, r1
 80016fa:	889b      	ldrh	r3, [r3, #4]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 80a4 	beq.w	800184c <collision+0x4ae>
				{
					if(temp_map.x[i] == x_coor[0] + BLOCK_WIDTH && temp_map.y[j] == y_coor[0])
 8001704:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001708:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 800170c:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001710:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001714:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001718:	b29b      	uxth	r3, r3
 800171a:	461a      	mov	r2, r3
 800171c:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001720:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	3317      	adds	r3, #23
 8001728:	429a      	cmp	r2, r3
 800172a:	d114      	bne.n	8001756 <collision+0x3b8>
 800172c:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001730:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001734:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001738:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	889b      	ldrh	r3, [r3, #4]
 8001742:	b29a      	uxth	r2, r3
 8001744:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001748:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d101      	bne.n	8001756 <collision+0x3b8>
					{
						return 1;
 8001752:	2301      	movs	r3, #1
 8001754:	e1b1      	b.n	8001aba <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[1] + BLOCK_WIDTH && temp_map.y[j] == y_coor[1])
 8001756:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800175a:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 800175e:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001762:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001766:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800176a:	b29b      	uxth	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001772:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001776:	885b      	ldrh	r3, [r3, #2]
 8001778:	3317      	adds	r3, #23
 800177a:	429a      	cmp	r2, r3
 800177c:	d114      	bne.n	80017a8 <collision+0x40a>
 800177e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001782:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001786:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 800178a:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	889b      	ldrh	r3, [r3, #4]
 8001794:	b29a      	uxth	r2, r3
 8001796:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800179a:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 800179e:	885b      	ldrh	r3, [r3, #2]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d101      	bne.n	80017a8 <collision+0x40a>
					{
						return 1;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e188      	b.n	8001aba <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[2] + BLOCK_WIDTH && temp_map.y[j] == y_coor[2])
 80017a8:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80017ac:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80017b0:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 80017b4:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80017b8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	461a      	mov	r2, r3
 80017c0:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80017c4:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80017c8:	889b      	ldrh	r3, [r3, #4]
 80017ca:	3317      	adds	r3, #23
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d114      	bne.n	80017fa <collision+0x45c>
 80017d0:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80017d4:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 80017d8:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 80017dc:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	889b      	ldrh	r3, [r3, #4]
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80017ec:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80017f0:	889b      	ldrh	r3, [r3, #4]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d101      	bne.n	80017fa <collision+0x45c>
					{
						return 1;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e15f      	b.n	8001aba <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[3] + BLOCK_WIDTH && temp_map.y[j] == y_coor[3])
 80017fa:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80017fe:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001802:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001806:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 800180a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800180e:	b29b      	uxth	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001816:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800181a:	88db      	ldrh	r3, [r3, #6]
 800181c:	3317      	adds	r3, #23
 800181e:	429a      	cmp	r2, r3
 8001820:	d114      	bne.n	800184c <collision+0x4ae>
 8001822:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001826:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 800182a:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 800182e:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	889b      	ldrh	r3, [r3, #4]
 8001838:	b29a      	uxth	r2, r3
 800183a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800183e:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001842:	88db      	ldrh	r3, [r3, #6]
 8001844:	429a      	cmp	r2, r3
 8001846:	d101      	bne.n	800184c <collision+0x4ae>
					{
						return 1;
 8001848:	2301      	movs	r3, #1
 800184a:	e136      	b.n	8001aba <collision+0x71c>
			for(int j = 0; j < 13; j++)
 800184c:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001850:	3301      	adds	r3, #1
 8001852:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8001856:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 800185a:	2b0c      	cmp	r3, #12
 800185c:	f77f af3c 	ble.w	80016d8 <collision+0x33a>
		for(int i = 0; i < 10; i++)
 8001860:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8001864:	3301      	adds	r3, #1
 8001866:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 800186a:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 800186e:	2b09      	cmp	r3, #9
 8001870:	f77f af2e 	ble.w	80016d0 <collision+0x332>
					}
				}
			}
		}
		if(x_coor[0] == RIGHT_EDGE || x_coor[1] == RIGHT_EDGE || x_coor[2] == RIGHT_EDGE || x_coor[3] == RIGHT_EDGE)
 8001874:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001878:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	2bd5      	cmp	r3, #213	@ 0xd5
 8001880:	d014      	beq.n	80018ac <collision+0x50e>
 8001882:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001886:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800188a:	885b      	ldrh	r3, [r3, #2]
 800188c:	2bd5      	cmp	r3, #213	@ 0xd5
 800188e:	d00d      	beq.n	80018ac <collision+0x50e>
 8001890:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001894:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001898:	889b      	ldrh	r3, [r3, #4]
 800189a:	2bd5      	cmp	r3, #213	@ 0xd5
 800189c:	d006      	beq.n	80018ac <collision+0x50e>
 800189e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018a2:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80018a6:	88db      	ldrh	r3, [r3, #6]
 80018a8:	2bd5      	cmp	r3, #213	@ 0xd5
 80018aa:	d101      	bne.n	80018b0 <collision+0x512>
		{
			return 1;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e104      	b.n	8001aba <collision+0x71c>
		}
	}

	if(dir == DOWN)
 80018b0:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018b4:	f2a3 23a9 	subw	r3, r3, #681	@ 0x2a9
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	f040 80fc 	bne.w	8001ab8 <collision+0x71a>
	{
		for(int i = 0; i < 10; i++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 80018c6:	e0cc      	b.n	8001a62 <collision+0x6c4>
		{
			for(int j = 0; j < 13; j++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 80018ce:	e0be      	b.n	8001a4e <collision+0x6b0>
			{
				if(temp_map.map_mat[i][j])
 80018d0:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018d4:	f5a3 7124 	sub.w	r1, r3, #656	@ 0x290
 80018d8:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	f8d7 228c 	ldr.w	r2, [r7, #652]	@ 0x28c
 80018ea:	4413      	add	r3, r2
 80018ec:	3380      	adds	r3, #128	@ 0x80
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	440b      	add	r3, r1
 80018f2:	889b      	ldrh	r3, [r3, #4]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 80a4 	beq.w	8001a44 <collision+0x6a6>
				{
					if(temp_map.x[i] == x_coor[0] && temp_map.y[j] == y_coor[0] + BLOCK_WIDTH)
 80018fc:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001900:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001904:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 8001908:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 800190c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001910:	b29a      	uxth	r2, r3
 8001912:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001916:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d116      	bne.n	800194e <collision+0x5b0>
 8001920:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001924:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001928:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 800192c:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	889b      	ldrh	r3, [r3, #4]
 8001936:	b29b      	uxth	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800193e:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	3317      	adds	r3, #23
 8001946:	429a      	cmp	r2, r3
 8001948:	d101      	bne.n	800194e <collision+0x5b0>
					{
						return 1;
 800194a:	2301      	movs	r3, #1
 800194c:	e0b5      	b.n	8001aba <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[1] && temp_map.y[j] == y_coor[1] + BLOCK_WIDTH)
 800194e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001952:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001956:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 800195a:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 800195e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001962:	b29a      	uxth	r2, r3
 8001964:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001968:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800196c:	885b      	ldrh	r3, [r3, #2]
 800196e:	429a      	cmp	r2, r3
 8001970:	d116      	bne.n	80019a0 <collision+0x602>
 8001972:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001976:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 800197a:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 800197e:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	889b      	ldrh	r3, [r3, #4]
 8001988:	b29b      	uxth	r3, r3
 800198a:	461a      	mov	r2, r3
 800198c:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001990:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001994:	885b      	ldrh	r3, [r3, #2]
 8001996:	3317      	adds	r3, #23
 8001998:	429a      	cmp	r2, r3
 800199a:	d101      	bne.n	80019a0 <collision+0x602>
					{
						return 1;
 800199c:	2301      	movs	r3, #1
 800199e:	e08c      	b.n	8001aba <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[2] && temp_map.y[j] == y_coor[2] + BLOCK_WIDTH)
 80019a0:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80019a4:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80019a8:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 80019ac:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80019b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80019ba:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80019be:	889b      	ldrh	r3, [r3, #4]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d116      	bne.n	80019f2 <collision+0x654>
 80019c4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80019c8:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 80019cc:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 80019d0:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	889b      	ldrh	r3, [r3, #4]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	461a      	mov	r2, r3
 80019de:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80019e2:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80019e6:	889b      	ldrh	r3, [r3, #4]
 80019e8:	3317      	adds	r3, #23
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d101      	bne.n	80019f2 <collision+0x654>
					{
						return 1;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e063      	b.n	8001aba <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[3] && temp_map.y[j] == y_coor[3] + BLOCK_WIDTH)
 80019f2:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80019f6:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80019fa:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 80019fe:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001a02:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a0c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001a10:	88db      	ldrh	r3, [r3, #6]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d116      	bne.n	8001a44 <collision+0x6a6>
 8001a16:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a1a:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001a1e:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8001a22:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	889b      	ldrh	r3, [r3, #4]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a34:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001a38:	88db      	ldrh	r3, [r3, #6]
 8001a3a:	3317      	adds	r3, #23
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d101      	bne.n	8001a44 <collision+0x6a6>
					{
						return 1;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e03a      	b.n	8001aba <collision+0x71c>
			for(int j = 0; j < 13; j++)
 8001a44:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8001a48:	3301      	adds	r3, #1
 8001a4a:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8001a4e:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	f77f af3c 	ble.w	80018d0 <collision+0x532>
		for(int i = 0; i < 10; i++)
 8001a58:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001a62:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001a66:	2b09      	cmp	r3, #9
 8001a68:	f77f af2e 	ble.w	80018c8 <collision+0x52a>
					}
				}
			}
		}
		if(y_coor[0] == BOTTOM_ROW || y_coor[1] == BOTTOM_ROW || y_coor[2] == BOTTOM_ROW || y_coor[3] == BOTTOM_ROW)
 8001a6c:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a70:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	f240 1225 	movw	r2, #293	@ 0x125
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d01a      	beq.n	8001ab4 <collision+0x716>
 8001a7e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a82:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001a86:	885b      	ldrh	r3, [r3, #2]
 8001a88:	f240 1225 	movw	r2, #293	@ 0x125
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d011      	beq.n	8001ab4 <collision+0x716>
 8001a90:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a94:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001a98:	889b      	ldrh	r3, [r3, #4]
 8001a9a:	f240 1225 	movw	r2, #293	@ 0x125
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d008      	beq.n	8001ab4 <collision+0x716>
 8001aa2:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001aa6:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001aaa:	88db      	ldrh	r3, [r3, #6]
 8001aac:	f240 1225 	movw	r2, #293	@ 0x125
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d101      	bne.n	8001ab8 <collision+0x71a>
		{
			return 1;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <collision+0x71c>
		}
	}
	return 0;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ac4 <map_update>:

map_t map_update(block_t *block, map_t* map)
{
 8001ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac6:	f5ad 7d2b 	sub.w	sp, sp, #684	@ 0x2ac
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001ad0:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001ad4:	6018      	str	r0, [r3, #0]
 8001ad6:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001ada:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001ade:	6019      	str	r1, [r3, #0]
 8001ae0:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001ae4:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001ae8:	601a      	str	r2, [r3, #0]
	//append the map array with the new blocks in their respective coordinates
	//create new block
	volatile block_t temp_tetromino = *block;
 8001aea:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001aee:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	461c      	mov	r4, r3
 8001af6:	f507 7617 	add.w	r6, r7, #604	@ 0x25c
 8001afa:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8001afe:	4635      	mov	r5, r6
 8001b00:	4623      	mov	r3, r4
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	6859      	ldr	r1, [r3, #4]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b0c:	3410      	adds	r4, #16
 8001b0e:	3610      	adds	r6, #16
 8001b10:	4564      	cmp	r4, ip
 8001b12:	d1f4      	bne.n	8001afe <map_update+0x3a>
 8001b14:	4633      	mov	r3, r6
 8001b16:	4622      	mov	r2, r4
 8001b18:	6810      	ldr	r0, [r2, #0]
 8001b1a:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 8001b1c:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001b20:	f5a3 7221 	sub.w	r2, r3, #644	@ 0x284
 8001b24:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001b28:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f240 2336 	movw	r3, #566	@ 0x236
 8001b36:	461a      	mov	r2, r3
 8001b38:	f006 fb4c 	bl	80081d4 <memcpy>

	uint16_t y_coor[4];
	uint16_t x_coor[4];
	uint8_t ind = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7

	for(int i = 0; i < 4; i++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8001b48:	e049      	b.n	8001bde <map_update+0x11a>
	{
		for(int j = 0; j < 4; j++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8001b50:	e03c      	b.n	8001bcc <map_update+0x108>
		{
			if(temp_tetromino.mat[i][j])
 8001b52:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001b56:	009a      	lsls	r2, r3, #2
 8001b58:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001b5c:	4413      	add	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8001b64:	443b      	add	r3, r7
 8001b66:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d028      	beq.n	8001bc2 <map_update+0xfe>
			{
				x_coor[ind] = temp_tetromino.x[i];
 8001b70:	f897 22a7 	ldrb.w	r2, [r7, #679]	@ 0x2a7
 8001b74:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001b78:	3310      	adds	r3, #16
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8001b80:	443b      	add	r3, r7
 8001b82:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8001b86:	b299      	uxth	r1, r3
 8001b88:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001b8c:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8001b90:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				y_coor[ind] = temp_tetromino.y[j];
 8001b94:	f897 22a7 	ldrb.w	r2, [r7, #679]	@ 0x2a7
 8001b98:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001b9c:	3314      	adds	r3, #20
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8001ba4:	443b      	add	r3, r7
 8001ba6:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8001baa:	b299      	uxth	r1, r3
 8001bac:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001bb0:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001bb4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				ind++;
 8001bb8:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		for(int j = 0; j < 4; j++)
 8001bc2:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8001bcc:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	ddbe      	ble.n	8001b52 <map_update+0x8e>
	for(int i = 0; i < 4; i++)
 8001bd4:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8001bde:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	ddb1      	ble.n	8001b4a <map_update+0x86>
		}
	}

	//get indices for the map coordinates corresponding to the block coordinates
	//set the map logical matrix, and the color
	uint8_t index = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f887 329b 	strb.w	r3, [r7, #667]	@ 0x29b
	for(int i = 0; i < 10; i++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8001bf2:	e068      	b.n	8001cc6 <map_update+0x202>
	{
		for(int j = 0; j < 13; j++)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001bfa:	e05b      	b.n	8001cb4 <map_update+0x1f0>
		{
			if(temp_map.x[i] == x_coor[index] && temp_map.y[j] == y_coor[index])
 8001bfc:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001c00:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001c04:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8001c08:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001c0c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	f897 129b 	ldrb.w	r1, [r7, #667]	@ 0x29b
 8001c16:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001c1a:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8001c1e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d141      	bne.n	8001caa <map_update+0x1e6>
 8001c26:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001c2a:	f5a3 7221 	sub.w	r2, r3, #644	@ 0x284
 8001c2e:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001c32:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	889b      	ldrh	r3, [r3, #4]
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	f897 129b 	ldrb.w	r1, [r7, #667]	@ 0x29b
 8001c42:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001c46:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001c4a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d12b      	bne.n	8001caa <map_update+0x1e6>
			{
				temp_map.map_mat[i][j] = ON;
 8001c52:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001c56:	f5a3 7121 	sub.w	r1, r3, #644	@ 0x284
 8001c5a:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8001c5e:	4613      	mov	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3380      	adds	r3, #128	@ 0x80
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	440b      	add	r3, r1
 8001c74:	2201      	movs	r2, #1
 8001c76:	809a      	strh	r2, [r3, #4]
				temp_map.map_color[i][j] = temp_tetromino.color;
 8001c78:	f8b7 325e 	ldrh.w	r3, [r7, #606]	@ 0x25e
 8001c7c:	b298      	uxth	r0, r3
 8001c7e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001c82:	f5a3 7121 	sub.w	r1, r3, #644	@ 0x284
 8001c86:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 8001c98:	4413      	add	r3, r2
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				index++;
 8001ca0:	f897 329b 	ldrb.w	r3, [r7, #667]	@ 0x29b
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f887 329b 	strb.w	r3, [r7, #667]	@ 0x29b
		for(int j = 0; j < 13; j++)
 8001caa:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001cae:	3301      	adds	r3, #1
 8001cb0:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001cb4:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001cb8:	2b0c      	cmp	r3, #12
 8001cba:	dd9f      	ble.n	8001bfc <map_update+0x138>
	for(int i = 0; i < 10; i++)
 8001cbc:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8001cc6:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001cca:	2b09      	cmp	r3, #9
 8001ccc:	dd92      	ble.n	8001bf4 <map_update+0x130>
			}
		}
	}

	return temp_map;
 8001cce:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001cd2:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001cdc:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f240 2336 	movw	r3, #566	@ 0x236
 8001ce8:	461a      	mov	r2, r3
 8001cea:	f006 fa73 	bl	80081d4 <memcpy>
}
 8001cee:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001cf2:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	f507 772b 	add.w	r7, r7, #684	@ 0x2ac
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d00 <block_rotate>:

block_t block_rotate(block_t *block)
{
 8001d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d02:	b0a9      	sub	sp, #164	@ 0xa4
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
	block_t temp_block = *block;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	461c      	mov	r4, r3
 8001d0e:	f107 0640 	add.w	r6, r7, #64	@ 0x40
 8001d12:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8001d16:	4635      	mov	r5, r6
 8001d18:	4623      	mov	r3, r4
 8001d1a:	6818      	ldr	r0, [r3, #0]
 8001d1c:	6859      	ldr	r1, [r3, #4]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d24:	3410      	adds	r4, #16
 8001d26:	3610      	adds	r6, #16
 8001d28:	4564      	cmp	r4, ip
 8001d2a:	d1f4      	bne.n	8001d16 <block_rotate+0x16>
 8001d2c:	4633      	mov	r3, r6
 8001d2e:	4622      	mov	r2, r4
 8001d30:	6810      	ldr	r0, [r2, #0]
 8001d32:	6018      	str	r0, [r3, #0]
	if(temp_block.name == O)
 8001d34:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d116      	bne.n	8001d6c <block_rotate+0x6c>
	{
		return temp_block;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001d44:	469c      	mov	ip, r3
 8001d46:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001d4a:	4665      	mov	r5, ip
 8001d4c:	4626      	mov	r6, r4
 8001d4e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d50:	6028      	str	r0, [r5, #0]
 8001d52:	6069      	str	r1, [r5, #4]
 8001d54:	60aa      	str	r2, [r5, #8]
 8001d56:	60eb      	str	r3, [r5, #12]
 8001d58:	3410      	adds	r4, #16
 8001d5a:	f10c 0c10 	add.w	ip, ip, #16
 8001d5e:	4574      	cmp	r4, lr
 8001d60:	d1f3      	bne.n	8001d4a <block_rotate+0x4a>
 8001d62:	4663      	mov	r3, ip
 8001d64:	4622      	mov	r2, r4
 8001d66:	6810      	ldr	r0, [r2, #0]
 8001d68:	6018      	str	r0, [r3, #0]
 8001d6a:	e15e      	b.n	800202a <block_rotate+0x32a>
	}

	if(temp_block.name == I)
 8001d6c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d163      	bne.n	8001e3e <block_rotate+0x13e>
	{
		uint8_t transpose[4][4];
		for(int i = 0; i < 4; i++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001d7c:	e029      	b.n	8001dd2 <block_rotate+0xd2>
		{
			for(int j = 0; j < 4; j++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001d84:	e01c      	b.n	8001dc0 <block_rotate+0xc0>
			{
				transpose[i][j] = temp_block.mat[j][i];
 8001d86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d8a:	009a      	lsls	r2, r3, #2
 8001d8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d90:	4413      	add	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	33a0      	adds	r3, #160	@ 0xa0
 8001d96:	443b      	add	r3, r7
 8001d98:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	b2d9      	uxtb	r1, r3
 8001da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	33a0      	adds	r3, #160	@ 0xa0
 8001da8:	19da      	adds	r2, r3, r7
 8001daa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001dae:	4413      	add	r3, r2
 8001db0:	3b70      	subs	r3, #112	@ 0x70
 8001db2:	460a      	mov	r2, r1
 8001db4:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 4; j++)
 8001db6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001dba:	3301      	adds	r3, #1
 8001dbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	ddde      	ble.n	8001d86 <block_rotate+0x86>
		for(int i = 0; i < 4; i++)
 8001dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001dcc:	3301      	adds	r3, #1
 8001dce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001dd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	ddd1      	ble.n	8001d7e <block_rotate+0x7e>
			}
		}
		for(int i = 0; i < 4; i++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001de0:	e028      	b.n	8001e34 <block_rotate+0x134>
		{
			for(int j = 0; j < 4; j++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001de8:	e01b      	b.n	8001e22 <block_rotate+0x122>
			{
				temp_block.mat[i][j] = transpose[i][j];
 8001dea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	33a0      	adds	r3, #160	@ 0xa0
 8001df2:	19da      	adds	r2, r3, r7
 8001df4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001df8:	4413      	add	r3, r2
 8001dfa:	3b70      	subs	r3, #112	@ 0x70
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e04:	009a      	lsls	r2, r3, #2
 8001e06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e0a:	4413      	add	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	33a0      	adds	r3, #160	@ 0xa0
 8001e10:	443b      	add	r3, r7
 8001e12:	460a      	mov	r2, r1
 8001e14:	f823 2c5c 	strh.w	r2, [r3, #-92]
			for(int j = 0; j < 4; j++)
 8001e18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	dddf      	ble.n	8001dea <block_rotate+0xea>
		for(int i = 0; i < 4; i++)
 8001e2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001e34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	ddd2      	ble.n	8001de2 <block_rotate+0xe2>
 8001e3c:	e0df      	b.n	8001ffe <block_rotate+0x2fe>
			}
		}
	}


	else if(temp_block.name != O)
 8001e3e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 80da 	beq.w	8001ffe <block_rotate+0x2fe>
	{
		uint8_t transpose_3x3[3][3];
		uint8_t transform[3][3];
		uint8_t mirror_identity[3][3] =
 8001e4a:	4a7a      	ldr	r2, [pc, #488]	@ (8002034 <block_rotate+0x334>)
 8001e4c:	f107 030c 	add.w	r3, r7, #12
 8001e50:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e52:	c303      	stmia	r3!, {r0, r1}
 8001e54:	701a      	strb	r2, [r3, #0]
		{{0, 0, 1},
		{0, 1, 0},
		{1, 0, 0}};

		for(int i = 1; i < 4; i++)
 8001e56:	2301      	movs	r3, #1
 8001e58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001e5c:	e02d      	b.n	8001eba <block_rotate+0x1ba>
		{
			for(int j = 1; j < 4; j++)
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001e64:	e020      	b.n	8001ea8 <block_rotate+0x1a8>
			{
				transpose_3x3[i-1][j-1] = temp_block.mat[j][i];
 8001e66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e6a:	009a      	lsls	r2, r3, #2
 8001e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e70:	4413      	add	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	33a0      	adds	r3, #160	@ 0xa0
 8001e76:	443b      	add	r3, r7
 8001e78:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8001e7c:	b298      	uxth	r0, r3
 8001e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e82:	1e5a      	subs	r2, r3, #1
 8001e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e88:	1e59      	subs	r1, r3, #1
 8001e8a:	b2c0      	uxtb	r0, r0
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	33a0      	adds	r3, #160	@ 0xa0
 8001e94:	443b      	add	r3, r7
 8001e96:	440b      	add	r3, r1
 8001e98:	3b7c      	subs	r3, #124	@ 0x7c
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	701a      	strb	r2, [r3, #0]
			for(int j = 1; j < 4; j++)
 8001e9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ea8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	ddda      	ble.n	8001e66 <block_rotate+0x166>
		for(int i = 1; i < 4; i++)
 8001eb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	ddcd      	ble.n	8001e5e <block_rotate+0x15e>
			}
		}

		for(int k = 0; k < 3; k++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001ec8:	e05b      	b.n	8001f82 <block_rotate+0x282>
		{
			for(int i = 0; i < 3; i++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001ed0:	e04e      	b.n	8001f70 <block_rotate+0x270>
			{
				transform[k][i] = 0;
 8001ed2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	33a0      	adds	r3, #160	@ 0xa0
 8001ede:	19da      	adds	r2, r3, r7
 8001ee0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3b88      	subs	r3, #136	@ 0x88
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
				for(int j = 0; j < 3; j++)
 8001eec:	2300      	movs	r3, #0
 8001eee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001ef0:	e036      	b.n	8001f60 <block_rotate+0x260>
				{
					transform[k][i] += (transpose_3x3[k][j] * mirror_identity[j][i]);
 8001ef2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	33a0      	adds	r3, #160	@ 0xa0
 8001efe:	19da      	adds	r2, r3, r7
 8001f00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f04:	4413      	add	r3, r2
 8001f06:	3b88      	subs	r3, #136	@ 0x88
 8001f08:	7819      	ldrb	r1, [r3, #0]
 8001f0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	33a0      	adds	r3, #160	@ 0xa0
 8001f16:	19da      	adds	r2, r3, r7
 8001f18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3b7c      	subs	r3, #124	@ 0x7c
 8001f1e:	7818      	ldrb	r0, [r3, #0]
 8001f20:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	33a0      	adds	r3, #160	@ 0xa0
 8001f2a:	19da      	adds	r2, r3, r7
 8001f2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f30:	4413      	add	r3, r2
 8001f32:	3b94      	subs	r3, #148	@ 0x94
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	fb10 f303 	smulbb	r3, r0, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	b2d9      	uxtb	r1, r3
 8001f40:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001f44:	4613      	mov	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4413      	add	r3, r2
 8001f4a:	33a0      	adds	r3, #160	@ 0xa0
 8001f4c:	19da      	adds	r2, r3, r7
 8001f4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f52:	4413      	add	r3, r2
 8001f54:	3b88      	subs	r3, #136	@ 0x88
 8001f56:	460a      	mov	r2, r1
 8001f58:	701a      	strb	r2, [r3, #0]
				for(int j = 0; j < 3; j++)
 8001f5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	ddc5      	ble.n	8001ef2 <block_rotate+0x1f2>
			for(int i = 0; i < 3; i++)
 8001f66:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	ddac      	ble.n	8001ed2 <block_rotate+0x1d2>
		for(int k = 0; k < 3; k++)
 8001f78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001f82:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	dd9f      	ble.n	8001eca <block_rotate+0x1ca>
				}
			}
		}

		for(int i = 0; i < 4; i++)
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f8e:	e033      	b.n	8001ff8 <block_rotate+0x2f8>
		{
			for(int j = 0; j < 4; j++)
 8001f90:	2300      	movs	r3, #0
 8001f92:	677b      	str	r3, [r7, #116]	@ 0x74
 8001f94:	e02a      	b.n	8001fec <block_rotate+0x2ec>
			{
				if(i == 0 || j == 0)
 8001f96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <block_rotate+0x2a2>
 8001f9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10a      	bne.n	8001fb8 <block_rotate+0x2b8>
				{
					temp_block.mat[i][j] = 0;
 8001fa2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fa4:	009a      	lsls	r2, r3, #2
 8001fa6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fa8:	4413      	add	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	33a0      	adds	r3, #160	@ 0xa0
 8001fae:	443b      	add	r3, r7
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f823 2c5c 	strh.w	r2, [r3, #-92]
 8001fb6:	e016      	b.n	8001fe6 <block_rotate+0x2e6>
				}
				else
				{
					temp_block.mat[i][j] = transform[i-1][j-1];
 8001fb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fba:	1e5a      	subs	r2, r3, #1
 8001fbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fbe:	1e59      	subs	r1, r3, #1
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	33a0      	adds	r3, #160	@ 0xa0
 8001fc8:	443b      	add	r3, r7
 8001fca:	440b      	add	r3, r1
 8001fcc:	3b88      	subs	r3, #136	@ 0x88
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fd4:	009a      	lsls	r2, r3, #2
 8001fd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fd8:	4413      	add	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	33a0      	adds	r3, #160	@ 0xa0
 8001fde:	443b      	add	r3, r7
 8001fe0:	460a      	mov	r2, r1
 8001fe2:	f823 2c5c 	strh.w	r2, [r3, #-92]
			for(int j = 0; j < 4; j++)
 8001fe6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fe8:	3301      	adds	r3, #1
 8001fea:	677b      	str	r3, [r7, #116]	@ 0x74
 8001fec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	ddd1      	ble.n	8001f96 <block_rotate+0x296>
		for(int i = 0; i < 4; i++)
 8001ff2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001ff8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	ddc8      	ble.n	8001f90 <block_rotate+0x290>
				}
			}
		}
	}
	return temp_block;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002004:	469c      	mov	ip, r3
 8002006:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 800200a:	4665      	mov	r5, ip
 800200c:	4626      	mov	r6, r4
 800200e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002010:	6028      	str	r0, [r5, #0]
 8002012:	6069      	str	r1, [r5, #4]
 8002014:	60aa      	str	r2, [r5, #8]
 8002016:	60eb      	str	r3, [r5, #12]
 8002018:	3410      	adds	r4, #16
 800201a:	f10c 0c10 	add.w	ip, ip, #16
 800201e:	4574      	cmp	r4, lr
 8002020:	d1f3      	bne.n	800200a <block_rotate+0x30a>
 8002022:	4663      	mov	r3, ip
 8002024:	4622      	mov	r2, r4
 8002026:	6810      	ldr	r0, [r2, #0]
 8002028:	6018      	str	r0, [r3, #0]
}
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	37a4      	adds	r7, #164	@ 0xa4
 800202e:	46bd      	mov	sp, r7
 8002030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002032:	bf00      	nop
 8002034:	080082e8 	.word	0x080082e8

08002038 <block_move>:

block_t block_move(block_t *block, map_t *map, uint8_t dir)
{
 8002038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203a:	b095      	sub	sp, #84	@ 0x54
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	70fb      	strb	r3, [r7, #3]
	//when timer reaches ARR and enters IRQ handler, call this function
	//erase current and draw new tetromino
	volatile block_t temp_tetromino = *block;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	461c      	mov	r4, r3
 800204a:	f107 0614 	add.w	r6, r7, #20
 800204e:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002052:	4635      	mov	r5, r6
 8002054:	4623      	mov	r3, r4
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	6859      	ldr	r1, [r3, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002060:	3410      	adds	r4, #16
 8002062:	3610      	adds	r6, #16
 8002064:	4564      	cmp	r4, ip
 8002066:	d1f4      	bne.n	8002052 <block_move+0x1a>
 8002068:	4633      	mov	r3, r6
 800206a:	4622      	mov	r2, r4
 800206c:	6810      	ldr	r0, [r2, #0]
 800206e:	6018      	str	r0, [r3, #0]
	if(dir)
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d01a      	beq.n	80020ac <block_move+0x74>
	{
		for(int i = 0; i < 4; i++)
 8002076:	2300      	movs	r3, #0
 8002078:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800207a:	e013      	b.n	80020a4 <block_move+0x6c>
		{
			temp_tetromino.x[i] += BLOCK_WIDTH;
 800207c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800207e:	3310      	adds	r3, #16
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	3350      	adds	r3, #80	@ 0x50
 8002084:	443b      	add	r3, r7
 8002086:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 800208a:	b29b      	uxth	r3, r3
 800208c:	3317      	adds	r3, #23
 800208e:	b29a      	uxth	r2, r3
 8002090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002092:	3310      	adds	r3, #16
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	3350      	adds	r3, #80	@ 0x50
 8002098:	443b      	add	r3, r7
 800209a:	f823 2c38 	strh.w	r2, [r3, #-56]
		for(int i = 0; i < 4; i++)
 800209e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020a0:	3301      	adds	r3, #1
 80020a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	dde8      	ble.n	800207c <block_move+0x44>
 80020aa:	e019      	b.n	80020e0 <block_move+0xa8>
		}
	}
	else
	{
		for(int i = 0; i < 4; i++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020b0:	e013      	b.n	80020da <block_move+0xa2>
		{
			temp_tetromino.x[i] -= BLOCK_WIDTH;
 80020b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020b4:	3310      	adds	r3, #16
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	3350      	adds	r3, #80	@ 0x50
 80020ba:	443b      	add	r3, r7
 80020bc:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	3b17      	subs	r3, #23
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020c8:	3310      	adds	r3, #16
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	3350      	adds	r3, #80	@ 0x50
 80020ce:	443b      	add	r3, r7
 80020d0:	f823 2c38 	strh.w	r2, [r3, #-56]
		for(int i = 0; i < 4; i++)
 80020d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020d6:	3301      	adds	r3, #1
 80020d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020dc:	2b03      	cmp	r3, #3
 80020de:	dde8      	ble.n	80020b2 <block_move+0x7a>
		}
	}
	return temp_tetromino;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f107 0414 	add.w	r4, r7, #20
 80020e6:	469c      	mov	ip, r3
 80020e8:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80020ec:	4665      	mov	r5, ip
 80020ee:	4626      	mov	r6, r4
 80020f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80020f2:	6028      	str	r0, [r5, #0]
 80020f4:	6069      	str	r1, [r5, #4]
 80020f6:	60aa      	str	r2, [r5, #8]
 80020f8:	60eb      	str	r3, [r5, #12]
 80020fa:	3410      	adds	r4, #16
 80020fc:	f10c 0c10 	add.w	ip, ip, #16
 8002100:	4574      	cmp	r4, lr
 8002102:	d1f3      	bne.n	80020ec <block_move+0xb4>
 8002104:	4663      	mov	r3, ip
 8002106:	4622      	mov	r2, r4
 8002108:	6810      	ldr	r0, [r2, #0]
 800210a:	6018      	str	r0, [r3, #0]
}
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	3754      	adds	r7, #84	@ 0x54
 8002110:	46bd      	mov	sp, r7
 8002112:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002114 <draw_block>:

void draw_block(uint16_t x, uint16_t y, uint16_t color)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	80fb      	strh	r3, [r7, #6]
 800211e:	460b      	mov	r3, r1
 8002120:	80bb      	strh	r3, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	807b      	strh	r3, [r7, #2]
	for(int i = 0; i < BLOCK_WIDTH-1; i++)
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	e00c      	b.n	8002146 <draw_block+0x32>
	{
		LCD_Draw_Horizontal_Line(x, y+i, BLOCK_WIDTH-1, color);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	b29a      	uxth	r2, r3
 8002130:	88bb      	ldrh	r3, [r7, #4]
 8002132:	4413      	add	r3, r2
 8002134:	b299      	uxth	r1, r3
 8002136:	887b      	ldrh	r3, [r7, #2]
 8002138:	88f8      	ldrh	r0, [r7, #6]
 800213a:	2216      	movs	r2, #22
 800213c:	f000 fd39 	bl	8002bb2 <LCD_Draw_Horizontal_Line>
	for(int i = 0; i < BLOCK_WIDTH-1; i++)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3301      	adds	r3, #1
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b15      	cmp	r3, #21
 800214a:	ddef      	ble.n	800212c <draw_block+0x18>
	}
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <draw_shapes>:

void draw_shapes()
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b088      	sub	sp, #32
 800215a:	af00      	add	r7, sp, #0
	uint16_t x_offset = (LCD_PIXEL_WIDTH - (7 * (BLOCK_WIDTH * 4 + 15))) / 2;
 800215c:	f64f 7302 	movw	r3, #65282	@ 0xff02
 8002160:	80fb      	strh	r3, [r7, #6]

	// I tetromino (cyan)
	for (int i = 0; i < 4; i++)
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	e012      	b.n	800218e <draw_shapes+0x38>
	{
	   	draw_block(6, 224 + i*BLOCK_WIDTH, LCD_COLOR_CYAN);
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	b29b      	uxth	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	0052      	lsls	r2, r2, #1
 8002170:	441a      	add	r2, r3
 8002172:	00d2      	lsls	r2, r2, #3
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	b29b      	uxth	r3, r3
 8002178:	33e0      	adds	r3, #224	@ 0xe0
 800217a:	b29b      	uxth	r3, r3
 800217c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002180:	4619      	mov	r1, r3
 8002182:	2006      	movs	r0, #6
 8002184:	f7ff ffc6 	bl	8002114 <draw_block>
	for (int i = 0; i < 4; i++)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	3301      	adds	r3, #1
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	2b03      	cmp	r3, #3
 8002192:	dde9      	ble.n	8002168 <draw_shapes+0x12>
	}

	// L tetromino (green)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	336b      	adds	r3, #107	@ 0x6b
 8002198:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++)
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	e012      	b.n	80021c6 <draw_shapes+0x70>
	{
	   	draw_block(i*BLOCK_WIDTH + 144, 224 + BLOCK_WIDTH, LCD_COLOR_GREEN);
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	0052      	lsls	r2, r2, #1
 80021a8:	441a      	add	r2, r3
 80021aa:	00d2      	lsls	r2, r2, #3
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	3390      	adds	r3, #144	@ 0x90
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80021b8:	21f7      	movs	r1, #247	@ 0xf7
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ffaa 	bl	8002114 <draw_block>
	for (int i = 0; i < 3; i++)
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	3301      	adds	r3, #1
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	dde9      	ble.n	80021a0 <draw_shapes+0x4a>
	}
	draw_block(190, 224, LCD_COLOR_GREEN);
 80021cc:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80021d0:	21e0      	movs	r1, #224	@ 0xe0
 80021d2:	20be      	movs	r0, #190	@ 0xbe
 80021d4:	f7ff ff9e 	bl	8002114 <draw_block>

	// J tetromino (yellow)
	x_offset += BLOCK_WIDTH * 4 + 15;
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	336b      	adds	r3, #107	@ 0x6b
 80021dc:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++)
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	e013      	b.n	800220c <draw_shapes+0xb6>
	{
	   	draw_block(75 + (i-2)*BLOCK_WIDTH, 224 + BLOCK_WIDTH, LCD_COLOR_YELLOW);
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	3b02      	subs	r3, #2
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	0052      	lsls	r2, r2, #1
 80021ee:	441a      	add	r2, r3
 80021f0:	00d2      	lsls	r2, r2, #3
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	334b      	adds	r3, #75	@ 0x4b
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80021fe:	21f7      	movs	r1, #247	@ 0xf7
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff87 	bl	8002114 <draw_block>
	for (int i = 0; i < 3; i++)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	3301      	adds	r3, #1
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2b02      	cmp	r3, #2
 8002210:	dde8      	ble.n	80021e4 <draw_shapes+0x8e>
	}
	draw_block(52 + BLOCK_WIDTH, 224 + 2*BLOCK_WIDTH, LCD_COLOR_YELLOW);
 8002212:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002216:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800221a:	204b      	movs	r0, #75	@ 0x4b
 800221c:	f7ff ff7a 	bl	8002114 <draw_block>

	// O tetromino (orange)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	336b      	adds	r3, #107	@ 0x6b
 8002224:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 2; i++) {
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	e025      	b.n	8002278 <draw_shapes+0x122>
	    for (int j = 0; j < 2; j++) {
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	e01c      	b.n	800226c <draw_shapes+0x116>
	       	draw_block(67 + i*BLOCK_WIDTH - 38, 270 + j*BLOCK_WIDTH, LCD_COLOR_ORANGE);
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	b29b      	uxth	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	0052      	lsls	r2, r2, #1
 800223a:	441a      	add	r2, r3
 800223c:	00d2      	lsls	r2, r2, #3
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	b29b      	uxth	r3, r3
 8002242:	331d      	adds	r3, #29
 8002244:	b298      	uxth	r0, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	b29b      	uxth	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	0052      	lsls	r2, r2, #1
 800224e:	441a      	add	r2, r3
 8002250:	00d2      	lsls	r2, r2, #3
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	b29b      	uxth	r3, r3
 8002256:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 800225a:	b29b      	uxth	r3, r3
 800225c:	f64f 32c1 	movw	r2, #64449	@ 0xfbc1
 8002260:	4619      	mov	r1, r3
 8002262:	f7ff ff57 	bl	8002114 <draw_block>
	    for (int j = 0; j < 2; j++) {
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3301      	adds	r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b01      	cmp	r3, #1
 8002270:	dddf      	ble.n	8002232 <draw_shapes+0xdc>
	for (int i = 0; i < 2; i++) {
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	3301      	adds	r3, #1
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	2b01      	cmp	r3, #1
 800227c:	ddd6      	ble.n	800222c <draw_shapes+0xd6>
	    }
	}

	// S tetromino (magenta)
	x_offset += BLOCK_WIDTH * 4 + 15;
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	336b      	adds	r3, #107	@ 0x6b
 8002282:	80fb      	strh	r3, [r7, #6]
	draw_block(144, 270 + BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 8002284:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002288:	f240 1125 	movw	r1, #293	@ 0x125
 800228c:	2090      	movs	r0, #144	@ 0x90
 800228e:	f7ff ff41 	bl	8002114 <draw_block>
	draw_block(144 + BLOCK_WIDTH, 270 + BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 8002292:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002296:	f240 1125 	movw	r1, #293	@ 0x125
 800229a:	20a7      	movs	r0, #167	@ 0xa7
 800229c:	f7ff ff3a 	bl	8002114 <draw_block>
	draw_block(144 + BLOCK_WIDTH, 270, LCD_COLOR_MAGENTA);
 80022a0:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80022a4:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80022a8:	20a7      	movs	r0, #167	@ 0xa7
 80022aa:	f7ff ff33 	bl	8002114 <draw_block>
	draw_block(144 + BLOCK_WIDTH * 2, 270, LCD_COLOR_MAGENTA);
 80022ae:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80022b2:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80022b6:	20be      	movs	r0, #190	@ 0xbe
 80022b8:	f7ff ff2c 	bl	8002114 <draw_block>

	// T tetromino (blue2)
	x_offset += BLOCK_WIDTH * 4 + 15;
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	336b      	adds	r3, #107	@ 0x6b
 80022c0:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++) {
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	e014      	b.n	80022f2 <draw_shapes+0x19c>
	   	draw_block(LEFT_EDGE + (i+3) * BLOCK_WIDTH, 293, LCD_COLOR_BLUE2);
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	3303      	adds	r3, #3
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	461a      	mov	r2, r3
 80022d0:	0052      	lsls	r2, r2, #1
 80022d2:	441a      	add	r2, r3
 80022d4:	00d2      	lsls	r2, r2, #3
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	b29b      	uxth	r3, r3
 80022da:	3306      	adds	r3, #6
 80022dc:	b29b      	uxth	r3, r3
 80022de:	f240 521f 	movw	r2, #1311	@ 0x51f
 80022e2:	f240 1125 	movw	r1, #293	@ 0x125
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff14 	bl	8002114 <draw_block>
	for (int i = 0; i < 3; i++) {
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	3301      	adds	r3, #1
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	dde7      	ble.n	80022c8 <draw_shapes+0x172>
	}
	draw_block(LEFT_EDGE + 4*BLOCK_WIDTH, 293 - BLOCK_WIDTH, LCD_COLOR_BLUE2);
 80022f8:	f240 521f 	movw	r2, #1311	@ 0x51f
 80022fc:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002300:	2062      	movs	r0, #98	@ 0x62
 8002302:	f7ff ff07 	bl	8002114 <draw_block>

	// Z tetromino (strawberry)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	336b      	adds	r3, #107	@ 0x6b
 800230a:	80fb      	strh	r3, [r7, #6]
	draw_block(LEFT_EDGE + 4*BLOCK_WIDTH, 247, LCD_COLOR_STRAWBERRY);
 800230c:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8002310:	21f7      	movs	r1, #247	@ 0xf7
 8002312:	2062      	movs	r0, #98	@ 0x62
 8002314:	f7ff fefe 	bl	8002114 <draw_block>
	draw_block(LEFT_EDGE + 5*BLOCK_WIDTH, 247, LCD_COLOR_STRAWBERRY);
 8002318:	f64f 1287 	movw	r2, #63879	@ 0xf987
 800231c:	21f7      	movs	r1, #247	@ 0xf7
 800231e:	2079      	movs	r0, #121	@ 0x79
 8002320:	f7ff fef8 	bl	8002114 <draw_block>
	draw_block(LEFT_EDGE + 5*BLOCK_WIDTH, 247 + BLOCK_WIDTH, LCD_COLOR_STRAWBERRY);
 8002324:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8002328:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800232c:	2079      	movs	r0, #121	@ 0x79
 800232e:	f7ff fef1 	bl	8002114 <draw_block>
	draw_block(LEFT_EDGE + 6*BLOCK_WIDTH, 247 + BLOCK_WIDTH, LCD_COLOR_STRAWBERRY);
 8002332:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8002336:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800233a:	2090      	movs	r0, #144	@ 0x90
 800233c:	f7ff feea 	bl	8002114 <draw_block>

	// "O" shape (magenta)
	draw_block(x_offset - 50 + BLOCK_WIDTH, 246 - 9*BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	3b1b      	subs	r3, #27
 8002344:	b29b      	uxth	r3, r3
 8002346:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800234a:	2127      	movs	r1, #39	@ 0x27
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fee1 	bl	8002114 <draw_block>
	draw_block(x_offset - 50 , 246 - 9*BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	3b32      	subs	r3, #50	@ 0x32
 8002356:	b29b      	uxth	r3, r3
 8002358:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800235c:	2127      	movs	r1, #39	@ 0x27
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fed8 	bl	8002114 <draw_block>
	draw_block(x_offset - 50 , 246 - 8*BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	3b32      	subs	r3, #50	@ 0x32
 8002368:	b29b      	uxth	r3, r3
 800236a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800236e:	213e      	movs	r1, #62	@ 0x3e
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fecf 	bl	8002114 <draw_block>
	draw_block(x_offset - 50 + BLOCK_WIDTH, 246 - 8*BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	3b1b      	subs	r3, #27
 800237a:	b29b      	uxth	r3, r3
 800237c:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002380:	213e      	movs	r1, #62	@ 0x3e
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fec6 	bl	8002114 <draw_block>
}
 8002388:	bf00      	nop
 800238a:	3720      	adds	r7, #32
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <draw_tetromino>:

void draw_tetromino(block_t block)
{
 8002390:	b084      	sub	sp, #16
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	f107 0c10 	add.w	ip, r7, #16
 800239c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i < 4; i++)
 80023a0:	2300      	movs	r3, #0
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	e029      	b.n	80023fa <draw_tetromino+0x6a>
	{
		for(int j = 0; j < 4; j++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	e020      	b.n	80023ee <draw_tetromino+0x5e>
		{
			if(block.mat[i][j])
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	009a      	lsls	r2, r3, #2
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	3310      	adds	r3, #16
 80023b8:	443b      	add	r3, r7
 80023ba:	889b      	ldrh	r3, [r3, #4]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d012      	beq.n	80023e8 <draw_tetromino+0x58>
			{
				draw_block(block.x[i], block.y[j], block.color);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3310      	adds	r3, #16
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	3310      	adds	r3, #16
 80023ca:	443b      	add	r3, r7
 80023cc:	889b      	ldrh	r3, [r3, #4]
 80023ce:	b298      	uxth	r0, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	3314      	adds	r3, #20
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	3310      	adds	r3, #16
 80023d8:	443b      	add	r3, r7
 80023da:	889b      	ldrh	r3, [r3, #4]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	8a7a      	ldrh	r2, [r7, #18]
 80023e0:	b292      	uxth	r2, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	f7ff fe96 	bl	8002114 <draw_block>
		for(int j = 0; j < 4; j++)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	3301      	adds	r3, #1
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	dddb      	ble.n	80023ac <draw_tetromino+0x1c>
	for(int i = 0; i < 4; i++)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3301      	adds	r3, #1
 80023f8:	607b      	str	r3, [r7, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	ddd2      	ble.n	80023a6 <draw_tetromino+0x16>
			}
		}
	}
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800240c:	b004      	add	sp, #16
 800240e:	4770      	bx	lr

08002410 <clear_tetromino>:

void clear_tetromino(block_t block)
{
 8002410:	b084      	sub	sp, #16
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	f107 0c10 	add.w	ip, r7, #16
 800241c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i < 4; i++)
 8002420:	2300      	movs	r3, #0
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	e028      	b.n	8002478 <clear_tetromino+0x68>
	{
		for(int j = 0; j < 4; j++)
 8002426:	2300      	movs	r3, #0
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	e01f      	b.n	800246c <clear_tetromino+0x5c>
		{
			if(block.mat[i][j])
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	009a      	lsls	r2, r3, #2
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4413      	add	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	3310      	adds	r3, #16
 8002438:	443b      	add	r3, r7
 800243a:	889b      	ldrh	r3, [r3, #4]
 800243c:	b29b      	uxth	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d011      	beq.n	8002466 <clear_tetromino+0x56>
			{
				draw_block(block.x[i], block.y[j], LCD_COLOR_BLACK);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3310      	adds	r3, #16
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	3310      	adds	r3, #16
 800244a:	443b      	add	r3, r7
 800244c:	889b      	ldrh	r3, [r3, #4]
 800244e:	b298      	uxth	r0, r3
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	3314      	adds	r3, #20
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	3310      	adds	r3, #16
 8002458:	443b      	add	r3, r7
 800245a:	889b      	ldrh	r3, [r3, #4]
 800245c:	b29b      	uxth	r3, r3
 800245e:	2200      	movs	r2, #0
 8002460:	4619      	mov	r1, r3
 8002462:	f7ff fe57 	bl	8002114 <draw_block>
		for(int j = 0; j < 4; j++)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	3301      	adds	r3, #1
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b03      	cmp	r3, #3
 8002470:	dddc      	ble.n	800242c <clear_tetromino+0x1c>
	for(int i = 0; i < 4; i++)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3301      	adds	r3, #1
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b03      	cmp	r3, #3
 800247c:	ddd3      	ble.n	8002426 <clear_tetromino+0x16>
			}
		}
	}
}
 800247e:	bf00      	nop
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800248a:	b004      	add	sp, #16
 800248c:	4770      	bx	lr

0800248e <can_spawn>:

uint8_t can_spawn(block_t *block, map_t *map)
{
 800248e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002490:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 8002494:	af00      	add	r7, sp, #0
 8002496:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800249a:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 800249e:	6018      	str	r0, [r3, #0]
 80024a0:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80024a4:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80024a8:	6019      	str	r1, [r3, #0]
	volatile block_t temp_tetromino = *block;
 80024aa:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80024ae:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	461c      	mov	r4, r3
 80024b6:	f507 7614 	add.w	r6, r7, #592	@ 0x250
 80024ba:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80024be:	4635      	mov	r5, r6
 80024c0:	4623      	mov	r3, r4
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	6859      	ldr	r1, [r3, #4]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024cc:	3410      	adds	r4, #16
 80024ce:	3610      	adds	r6, #16
 80024d0:	4564      	cmp	r4, ip
 80024d2:	d1f4      	bne.n	80024be <can_spawn+0x30>
 80024d4:	4633      	mov	r3, r6
 80024d6:	4622      	mov	r2, r4
 80024d8:	6810      	ldr	r0, [r2, #0]
 80024da:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 80024dc:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80024e0:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 80024e4:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80024e8:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4610      	mov	r0, r2
 80024f0:	4619      	mov	r1, r3
 80024f2:	f240 2336 	movw	r3, #566	@ 0x236
 80024f6:	461a      	mov	r2, r3
 80024f8:	f005 fe6c 	bl	80081d4 <memcpy>

	uint16_t block_x[4];
	uint16_t block_y[4];
	uint8_t ind = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297

	for(int i = 0; i < 4; i++)
 8002502:	2300      	movs	r3, #0
 8002504:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8002508:	e049      	b.n	800259e <can_spawn+0x110>
	{
		for(int j = 0; j < 4; j++)
 800250a:	2300      	movs	r3, #0
 800250c:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8002510:	e03c      	b.n	800258c <can_spawn+0xfe>
		{
			if(temp_tetromino.mat[i][j])
 8002512:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8002516:	009a      	lsls	r2, r3, #2
 8002518:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 800251c:	4413      	add	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002524:	443b      	add	r3, r7
 8002526:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 800252a:	b29b      	uxth	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d028      	beq.n	8002582 <can_spawn+0xf4>
			{
				block_x[ind] = temp_tetromino.x[i];
 8002530:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 8002534:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8002538:	3310      	adds	r3, #16
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002540:	443b      	add	r3, r7
 8002542:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8002546:	b299      	uxth	r1, r3
 8002548:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800254c:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8002550:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				block_y[ind] = temp_tetromino.y[j];
 8002554:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 8002558:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 800255c:	3314      	adds	r3, #20
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002564:	443b      	add	r3, r7
 8002566:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 800256a:	b299      	uxth	r1, r3
 800256c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002570:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002574:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				ind++;
 8002578:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 800257c:	3301      	adds	r3, #1
 800257e:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
		for(int j = 0; j < 4; j++)
 8002582:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8002586:	3301      	adds	r3, #1
 8002588:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 800258c:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8002590:	2b03      	cmp	r3, #3
 8002592:	ddbe      	ble.n	8002512 <can_spawn+0x84>
	for(int i = 0; i < 4; i++)
 8002594:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8002598:	3301      	adds	r3, #1
 800259a:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 800259e:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	ddb1      	ble.n	800250a <can_spawn+0x7c>
			}
		}
	}

	//iterate through the columns in the first 3 rows of the map, and if overlap, return 0
	for(int i = 3; i < 7; i++)
 80025a6:	2303      	movs	r3, #3
 80025a8:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 80025ac:	e0c4      	b.n	8002738 <can_spawn+0x2aa>
	{
		for(int j = 0; j < 3; j++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 80025b4:	e0b6      	b.n	8002724 <can_spawn+0x296>
		{
			if(temp_map.map_mat[i][j])
 80025b6:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80025ba:	f5a3 7120 	sub.w	r1, r3, #640	@ 0x280
 80025be:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 80025c2:	4613      	mov	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 80025d0:	4413      	add	r3, r2
 80025d2:	3380      	adds	r3, #128	@ 0x80
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	440b      	add	r3, r1
 80025d8:	889b      	ldrh	r3, [r3, #4]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 809c 	beq.w	800271a <can_spawn+0x28c>
			{
				if(temp_map.x[i] == block_x[0] && temp_map.y[j] == block_y[0])
 80025e2:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80025e6:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80025ea:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 80025ee:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80025f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80025fc:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d114      	bne.n	8002630 <can_spawn+0x1a2>
 8002606:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800260a:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 800260e:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002612:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	889b      	ldrh	r3, [r3, #4]
 800261c:	b29a      	uxth	r2, r3
 800261e:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002622:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d101      	bne.n	8002630 <can_spawn+0x1a2>
				{
					return 0;
 800262c:	2300      	movs	r3, #0
 800262e:	e089      	b.n	8002744 <can_spawn+0x2b6>
				}
				else if(temp_map.x[i] == block_x[1] && temp_map.y[j] == block_y[1])
 8002630:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002634:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8002638:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 800263c:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8002640:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002644:	b29a      	uxth	r2, r3
 8002646:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800264a:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 800264e:	885b      	ldrh	r3, [r3, #2]
 8002650:	429a      	cmp	r2, r3
 8002652:	d114      	bne.n	800267e <can_spawn+0x1f0>
 8002654:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002658:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 800265c:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002660:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	889b      	ldrh	r3, [r3, #4]
 800266a:	b29a      	uxth	r2, r3
 800266c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002670:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002674:	885b      	ldrh	r3, [r3, #2]
 8002676:	429a      	cmp	r2, r3
 8002678:	d101      	bne.n	800267e <can_spawn+0x1f0>
				{
					return 0;
 800267a:	2300      	movs	r3, #0
 800267c:	e062      	b.n	8002744 <can_spawn+0x2b6>
				}
				else if(temp_map.x[i] == block_x[2] && temp_map.y[j] == block_y[2])
 800267e:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002682:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8002686:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 800268a:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 800268e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002692:	b29a      	uxth	r2, r3
 8002694:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002698:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 800269c:	889b      	ldrh	r3, [r3, #4]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d114      	bne.n	80026cc <can_spawn+0x23e>
 80026a2:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80026a6:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 80026aa:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80026ae:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	889b      	ldrh	r3, [r3, #4]
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80026be:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80026c2:	889b      	ldrh	r3, [r3, #4]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d101      	bne.n	80026cc <can_spawn+0x23e>
				{
					return 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e03b      	b.n	8002744 <can_spawn+0x2b6>
				}
				else if(temp_map.x[i] == block_x[3] && temp_map.y[j] == block_y[3])
 80026cc:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80026d0:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80026d4:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 80026d8:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80026dc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80026e6:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 80026ea:	88db      	ldrh	r3, [r3, #6]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d114      	bne.n	800271a <can_spawn+0x28c>
 80026f0:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80026f4:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 80026f8:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80026fc:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	889b      	ldrh	r3, [r3, #4]
 8002706:	b29a      	uxth	r2, r3
 8002708:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800270c:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002710:	88db      	ldrh	r3, [r3, #6]
 8002712:	429a      	cmp	r2, r3
 8002714:	d101      	bne.n	800271a <can_spawn+0x28c>
				{
					return 0;
 8002716:	2300      	movs	r3, #0
 8002718:	e014      	b.n	8002744 <can_spawn+0x2b6>
		for(int j = 0; j < 3; j++)
 800271a:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800271e:	3301      	adds	r3, #1
 8002720:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8002724:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002728:	2b02      	cmp	r3, #2
 800272a:	f77f af44 	ble.w	80025b6 <can_spawn+0x128>
	for(int i = 3; i < 7; i++)
 800272e:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8002732:	3301      	adds	r3, #1
 8002734:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8002738:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 800273c:	2b06      	cmp	r3, #6
 800273e:	f77f af36 	ble.w	80025ae <can_spawn+0x120>
				}
			}
		}
	}
	return 1;
 8002742:	2301      	movs	r3, #1
}
 8002744:	4618      	mov	r0, r3
 8002746:	f507 7727 	add.w	r7, r7, #668	@ 0x29c
 800274a:	46bd      	mov	sp, r7
 800274c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002750 <MX_RNG_Init>:

static void MX_RNG_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
  __HAL_RCC_RNG_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	607b      	str	r3, [r7, #4]
 800275a:	4b0e      	ldr	r3, [pc, #56]	@ (8002794 <MX_RNG_Init+0x44>)
 800275c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800275e:	4a0d      	ldr	r2, [pc, #52]	@ (8002794 <MX_RNG_Init+0x44>)
 8002760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002764:	6353      	str	r3, [r2, #52]	@ 0x34
 8002766:	4b0b      	ldr	r3, [pc, #44]	@ (8002794 <MX_RNG_Init+0x44>)
 8002768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800276a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
  hrng.Instance = RNG;
 8002772:	4b09      	ldr	r3, [pc, #36]	@ (8002798 <MX_RNG_Init+0x48>)
 8002774:	4a09      	ldr	r2, [pc, #36]	@ (800279c <MX_RNG_Init+0x4c>)
 8002776:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002778:	4807      	ldr	r0, [pc, #28]	@ (8002798 <MX_RNG_Init+0x48>)
 800277a:	f004 ffb7 	bl	80076ec <HAL_RNG_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <MX_RNG_Init+0x3a>
  {
	  APPLICATION_ASSERT(1);
 8002784:	2001      	movs	r0, #1
 8002786:	f000 f857 	bl	8002838 <APPLICATION_ASSERT>
  }
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800
 8002798:	200000a0 	.word	0x200000a0
 800279c:	50060800 	.word	0x50060800

080027a0 <MX_RNG_Deinit>:

static void MX_RNG_Deinit(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  __HAL_RCC_RNG_CLK_DISABLE();
 80027a4:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <MX_RNG_Deinit+0x2c>)
 80027a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a8:	4a08      	ldr	r2, [pc, #32]	@ (80027cc <MX_RNG_Deinit+0x2c>)
 80027aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027ae:	6353      	str	r3, [r2, #52]	@ 0x34
  hrng.Instance = RNG;
 80027b0:	4b07      	ldr	r3, [pc, #28]	@ (80027d0 <MX_RNG_Deinit+0x30>)
 80027b2:	4a08      	ldr	r2, [pc, #32]	@ (80027d4 <MX_RNG_Deinit+0x34>)
 80027b4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80027b6:	4806      	ldr	r0, [pc, #24]	@ (80027d0 <MX_RNG_Deinit+0x30>)
 80027b8:	f004 ff98 	bl	80076ec <HAL_RNG_Init>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <MX_RNG_Deinit+0x28>
  {
	  APPLICATION_ASSERT(1);
 80027c2:	2001      	movs	r0, #1
 80027c4:	f000 f838 	bl	8002838 <APPLICATION_ASSERT>
  }
}
 80027c8:	bf00      	nop
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40023800 	.word	0x40023800
 80027d0:	200000a0 	.word	0x200000a0
 80027d4:	50060800 	.word	0x50060800

080027d8 <ButtonInit>:
 *      Author: 17202
 */
#include "Button_Driver.h"

void ButtonInit()
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef config = {0};
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]

	config.Pin = GPIO_PIN_0;
 80027ec:	2301      	movs	r3, #1
 80027ee:	607b      	str	r3, [r7, #4]
	config.Mode = GPIO_MODE_IT_RISING;
 80027f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027f4:	60bb      	str	r3, [r7, #8]
	config.Speed = GPIO_SPEED_FREQ_HIGH;
 80027f6:	2302      	movs	r3, #2
 80027f8:	613b      	str	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002830 <ButtonInit+0x58>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	4a0b      	ldr	r2, [pc, #44]	@ (8002830 <ButtonInit+0x58>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6313      	str	r3, [r2, #48]	@ 0x30
 800280a:	4b09      	ldr	r3, [pc, #36]	@ (8002830 <ButtonInit+0x58>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &config);
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	4619      	mov	r1, r3
 800281a:	4806      	ldr	r0, [pc, #24]	@ (8002834 <ButtonInit+0x5c>)
 800281c:	f002 fb0a 	bl	8004e34 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002820:	2006      	movs	r0, #6
 8002822:	f002 fab8 	bl	8004d96 <HAL_NVIC_EnableIRQ>
	//GPIO_Init(BUTTON_PORT_VALUE, config, BUTTON_PIN_NUMBER);
}
 8002826:	bf00      	nop
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800
 8002834:	40020000 	.word	0x40020000

08002838 <APPLICATION_ASSERT>:
 */
#include "ErrorHandling.h"


void APPLICATION_ASSERT(bool tf)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002842:	b672      	cpsid	i
}
 8002844:	bf00      	nop
	__disable_irq();
	while(tf!=HAL_OK)
 8002846:	bf00      	nop
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1fc      	bne.n	8002848 <APPLICATION_ASSERT+0x10>
	{}		//loop forever
}
 800284e:	bf00      	nop
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08c      	sub	sp, #48	@ 0x30
 8002860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	4b5a      	ldr	r3, [pc, #360]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	4a59      	ldr	r2, [pc, #356]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 800286c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002870:	6453      	str	r3, [r2, #68]	@ 0x44
 8002872:	4b57      	ldr	r3, [pc, #348]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002876:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800287a:	61bb      	str	r3, [r7, #24]
 800287c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	4b53      	ldr	r3, [pc, #332]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	4a52      	ldr	r2, [pc, #328]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6313      	str	r3, [r2, #48]	@ 0x30
 800288e:	4b50      	ldr	r3, [pc, #320]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	4b4c      	ldr	r3, [pc, #304]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	4a4b      	ldr	r2, [pc, #300]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 80028a4:	f043 0302 	orr.w	r3, r3, #2
 80028a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028aa:	4b49      	ldr	r3, [pc, #292]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	4b45      	ldr	r3, [pc, #276]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	4a44      	ldr	r2, [pc, #272]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 80028c0:	f043 0304 	orr.w	r3, r3, #4
 80028c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c6:	4b42      	ldr	r3, [pc, #264]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	4b3e      	ldr	r3, [pc, #248]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	4a3d      	ldr	r2, [pc, #244]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 80028dc:	f043 0308 	orr.w	r3, r3, #8
 80028e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e2:	4b3b      	ldr	r3, [pc, #236]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	4b37      	ldr	r3, [pc, #220]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	4a36      	ldr	r2, [pc, #216]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 80028f8:	f043 0320 	orr.w	r3, r3, #32
 80028fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fe:	4b34      	ldr	r3, [pc, #208]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	607b      	str	r3, [r7, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	4b30      	ldr	r3, [pc, #192]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	4a2f      	ldr	r2, [pc, #188]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 8002914:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002918:	6313      	str	r3, [r2, #48]	@ 0x30
 800291a:	4b2d      	ldr	r3, [pc, #180]	@ (80029d0 <LCD_GPIO_Init+0x174>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002926:	f641 0358 	movw	r3, #6232	@ 0x1858
 800292a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800292c:	2302      	movs	r3, #2
 800292e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002934:	2302      	movs	r3, #2
 8002936:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002938:	230e      	movs	r3, #14
 800293a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800293c:	f107 031c 	add.w	r3, r7, #28
 8002940:	4619      	mov	r1, r3
 8002942:	4824      	ldr	r0, [pc, #144]	@ (80029d4 <LCD_GPIO_Init+0x178>)
 8002944:	f002 fa76 	bl	8004e34 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002948:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800294c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800294e:	f107 031c 	add.w	r3, r7, #28
 8002952:	4619      	mov	r1, r3
 8002954:	4820      	ldr	r0, [pc, #128]	@ (80029d8 <LCD_GPIO_Init+0x17c>)
 8002956:	f002 fa6d 	bl	8004e34 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800295a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800295e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	4619      	mov	r1, r3
 8002966:	481d      	ldr	r0, [pc, #116]	@ (80029dc <LCD_GPIO_Init+0x180>)
 8002968:	f002 fa64 	bl	8004e34 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800296c:	2348      	movs	r3, #72	@ 0x48
 800296e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002970:	f107 031c 	add.w	r3, r7, #28
 8002974:	4619      	mov	r1, r3
 8002976:	481a      	ldr	r0, [pc, #104]	@ (80029e0 <LCD_GPIO_Init+0x184>)
 8002978:	f002 fa5c 	bl	8004e34 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800297c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002980:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002982:	f107 031c 	add.w	r3, r7, #28
 8002986:	4619      	mov	r1, r3
 8002988:	4816      	ldr	r0, [pc, #88]	@ (80029e4 <LCD_GPIO_Init+0x188>)
 800298a:	f002 fa53 	bl	8004e34 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800298e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002992:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002994:	f107 031c 	add.w	r3, r7, #28
 8002998:	4619      	mov	r1, r3
 800299a:	4813      	ldr	r0, [pc, #76]	@ (80029e8 <LCD_GPIO_Init+0x18c>)
 800299c:	f002 fa4a 	bl	8004e34 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80029a0:	2303      	movs	r3, #3
 80029a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80029a4:	2309      	movs	r3, #9
 80029a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80029a8:	f107 031c 	add.w	r3, r7, #28
 80029ac:	4619      	mov	r1, r3
 80029ae:	480a      	ldr	r0, [pc, #40]	@ (80029d8 <LCD_GPIO_Init+0x17c>)
 80029b0:	f002 fa40 	bl	8004e34 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80029b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80029b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80029ba:	f107 031c 	add.w	r3, r7, #28
 80029be:	4619      	mov	r1, r3
 80029c0:	4809      	ldr	r0, [pc, #36]	@ (80029e8 <LCD_GPIO_Init+0x18c>)
 80029c2:	f002 fa37 	bl	8004e34 <HAL_GPIO_Init>
}
 80029c6:	bf00      	nop
 80029c8:	3730      	adds	r7, #48	@ 0x30
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40020000 	.word	0x40020000
 80029d8:	40020400 	.word	0x40020400
 80029dc:	40020800 	.word	0x40020800
 80029e0:	40020c00 	.word	0x40020c00
 80029e4:	40021400 	.word	0x40021400
 80029e8:	40021800 	.word	0x40021800

080029ec <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b090      	sub	sp, #64	@ 0x40
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80029fa:	23f0      	movs	r3, #240	@ 0xf0
 80029fc:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8002a02:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002a06:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8002a08:	2302      	movs	r3, #2
 8002a0a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8002a0c:	23ff      	movs	r3, #255	@ 0xff
 8002a0e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002a14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a18:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002a1a:	2305      	movs	r3, #5
 8002a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8002a24:	4b0f      	ldr	r3, [pc, #60]	@ (8002a64 <LTCD_Layer_Init+0x78>)
 8002a26:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8002a28:	23f0      	movs	r3, #240	@ 0xf0
 8002a2a:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8002a2c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002a30:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8002a44:	79fa      	ldrb	r2, [r7, #7]
 8002a46:	f107 030c 	add.w	r3, r7, #12
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4806      	ldr	r0, [pc, #24]	@ (8002a68 <LTCD_Layer_Init+0x7c>)
 8002a4e:	f003 fe33 	bl	80066b8 <HAL_LTDC_ConfigLayer>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8002a58:	f000 f9a4 	bl	8002da4 <LCD_Error_Handler>
	}
}
 8002a5c:	bf00      	nop
 8002a5e:	3740      	adds	r7, #64	@ 0x40
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	2000018c 	.word	0x2000018c
 8002a68:	200000b0 	.word	0x200000b0

08002a6c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8002a70:	4b2a      	ldr	r3, [pc, #168]	@ (8002b1c <LTCD__Init+0xb0>)
 8002a72:	4a2b      	ldr	r2, [pc, #172]	@ (8002b20 <LTCD__Init+0xb4>)
 8002a74:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8002a76:	4b29      	ldr	r3, [pc, #164]	@ (8002b1c <LTCD__Init+0xb0>)
 8002a78:	2209      	movs	r2, #9
 8002a7a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8002a7c:	4b27      	ldr	r3, [pc, #156]	@ (8002b1c <LTCD__Init+0xb0>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8002a82:	4b26      	ldr	r3, [pc, #152]	@ (8002b1c <LTCD__Init+0xb0>)
 8002a84:	221d      	movs	r2, #29
 8002a86:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8002a88:	4b24      	ldr	r3, [pc, #144]	@ (8002b1c <LTCD__Init+0xb0>)
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8002a8e:	4b23      	ldr	r3, [pc, #140]	@ (8002b1c <LTCD__Init+0xb0>)
 8002a90:	f240 120d 	movw	r2, #269	@ 0x10d
 8002a94:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8002a96:	4b21      	ldr	r3, [pc, #132]	@ (8002b1c <LTCD__Init+0xb0>)
 8002a98:	f240 1243 	movw	r2, #323	@ 0x143
 8002a9c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8002a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8002b1c <LTCD__Init+0xb0>)
 8002aa0:	f240 1217 	movw	r2, #279	@ 0x117
 8002aa4:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b1c <LTCD__Init+0xb0>)
 8002aa8:	f240 1247 	movw	r2, #327	@ 0x147
 8002aac:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8002aae:	4b1b      	ldr	r3, [pc, #108]	@ (8002b1c <LTCD__Init+0xb0>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8002ab6:	4b19      	ldr	r3, [pc, #100]	@ (8002b1c <LTCD__Init+0xb0>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8002abe:	4b17      	ldr	r3, [pc, #92]	@ (8002b1c <LTCD__Init+0xb0>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002ac6:	4b17      	ldr	r3, [pc, #92]	@ (8002b24 <LTCD__Init+0xb8>)
 8002ac8:	2208      	movs	r2, #8
 8002aca:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002acc:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <LTCD__Init+0xb8>)
 8002ace:	22c0      	movs	r2, #192	@ 0xc0
 8002ad0:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002ad2:	4b14      	ldr	r3, [pc, #80]	@ (8002b24 <LTCD__Init+0xb8>)
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002ad8:	4b12      	ldr	r3, [pc, #72]	@ (8002b24 <LTCD__Init+0xb8>)
 8002ada:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ade:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002ae0:	4810      	ldr	r0, [pc, #64]	@ (8002b24 <LTCD__Init+0xb8>)
 8002ae2:	f004 fc43 	bl	800736c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <LTCD__Init+0xb0>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002aec:	4b0b      	ldr	r3, [pc, #44]	@ (8002b1c <LTCD__Init+0xb0>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002af2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b1c <LTCD__Init+0xb0>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002af8:	4b08      	ldr	r3, [pc, #32]	@ (8002b1c <LTCD__Init+0xb0>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8002afe:	f7ff fead 	bl	800285c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002b02:	4806      	ldr	r0, [pc, #24]	@ (8002b1c <LTCD__Init+0xb0>)
 8002b04:	f003 fd08 	bl	8006518 <HAL_LTDC_Init>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8002b0e:	f000 f949 	bl	8002da4 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8002b12:	f000 fb2c 	bl	800316e <ili9341_Init>
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200000b0 	.word	0x200000b0
 8002b20:	40016800 	.word	0x40016800
 8002b24:	20000158 	.word	0x20000158

08002b28 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	80fb      	strh	r3, [r7, #6]
 8002b32:	460b      	mov	r3, r1
 8002b34:	80bb      	strh	r3, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8002b3a:	88ba      	ldrh	r2, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	461a      	mov	r2, r3
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	4413      	add	r3, r2
 8002b4a:	4905      	ldr	r1, [pc, #20]	@ (8002b60 <LCD_Draw_Pixel+0x38>)
 8002b4c:	887a      	ldrh	r2, [r7, #2]
 8002b4e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	2000018c 	.word	0x2000018c

08002b64 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4604      	mov	r4, r0
 8002b6c:	4608      	mov	r0, r1
 8002b6e:	4611      	mov	r1, r2
 8002b70:	461a      	mov	r2, r3
 8002b72:	4623      	mov	r3, r4
 8002b74:	80fb      	strh	r3, [r7, #6]
 8002b76:	4603      	mov	r3, r0
 8002b78:	80bb      	strh	r3, [r7, #4]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	807b      	strh	r3, [r7, #2]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	81fb      	strh	r3, [r7, #14]
 8002b86:	e00b      	b.n	8002ba0 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8002b88:	89fa      	ldrh	r2, [r7, #14]
 8002b8a:	88bb      	ldrh	r3, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	b299      	uxth	r1, r3
 8002b90:	883a      	ldrh	r2, [r7, #0]
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ffc7 	bl	8002b28 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8002b9a:	89fb      	ldrh	r3, [r7, #14]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	81fb      	strh	r3, [r7, #14]
 8002ba0:	89fa      	ldrh	r2, [r7, #14]
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d3ef      	bcc.n	8002b88 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd90      	pop	{r4, r7, pc}

08002bb2 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8002bb2:	b590      	push	{r4, r7, lr}
 8002bb4:	b085      	sub	sp, #20
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	4604      	mov	r4, r0
 8002bba:	4608      	mov	r0, r1
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	4623      	mov	r3, r4
 8002bc2:	80fb      	strh	r3, [r7, #6]
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	80bb      	strh	r3, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	807b      	strh	r3, [r7, #2]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	81fb      	strh	r3, [r7, #14]
 8002bd4:	e00b      	b.n	8002bee <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8002bd6:	89fa      	ldrh	r2, [r7, #14]
 8002bd8:	88fb      	ldrh	r3, [r7, #6]
 8002bda:	4413      	add	r3, r2
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	883a      	ldrh	r2, [r7, #0]
 8002be0:	88b9      	ldrh	r1, [r7, #4]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff ffa0 	bl	8002b28 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8002be8:	89fb      	ldrh	r3, [r7, #14]
 8002bea:	3301      	adds	r3, #1
 8002bec:	81fb      	strh	r3, [r7, #14]
 8002bee:	89fa      	ldrh	r2, [r7, #14]
 8002bf0:	887b      	ldrh	r3, [r7, #2]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d3ef      	bcc.n	8002bd6 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8002bf6:	bf00      	nop
 8002bf8:	bf00      	nop
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd90      	pop	{r4, r7, pc}

08002c00 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	460a      	mov	r2, r1
 8002c0a:	71fb      	strb	r3, [r7, #7]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10e      	bne.n	8002c34 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	e007      	b.n	8002c2c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8002c1c:	4908      	ldr	r1, [pc, #32]	@ (8002c40 <LCD_Clear+0x40>)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	88ba      	ldrh	r2, [r7, #4]
 8002c22:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8002c32:	d3f3      	bcc.n	8002c1c <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	2000018c 	.word	0x2000018c

08002c44 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8002c4e:	4a04      	ldr	r2, [pc, #16]	@ (8002c60 <LCD_SetTextColor+0x1c>)
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	8013      	strh	r3, [r2, #0]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	20000000 	.word	0x20000000

08002c64 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8002c6c:	4a04      	ldr	r2, [pc, #16]	@ (8002c80 <LCD_SetFont+0x1c>)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6013      	str	r3, [r2, #0]
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20000188 	.word	0x20000188

08002c84 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	603a      	str	r2, [r7, #0]
 8002c8e:	80fb      	strh	r3, [r7, #6]
 8002c90:	460b      	mov	r3, r1
 8002c92:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e04c      	b.n	8002d3c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	e03f      	b.n	8002d28 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	4413      	add	r3, r2
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4b27      	ldr	r3, [pc, #156]	@ (8002d54 <LCD_Draw_Char+0xd0>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	889b      	ldrh	r3, [r3, #4]
 8002cba:	4a27      	ldr	r2, [pc, #156]	@ (8002d58 <LCD_Draw_Char+0xd4>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	08db      	lsrs	r3, r3, #3
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	2280      	movs	r2, #128	@ 0x80
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	fa42 f303 	asr.w	r3, r2, r3
 8002cd0:	400b      	ands	r3, r1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d104      	bne.n	8002ce0 <LCD_Draw_Char+0x5c>
 8002cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d54 <LCD_Draw_Char+0xd0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	889b      	ldrh	r3, [r3, #4]
 8002cdc:	2b0c      	cmp	r3, #12
 8002cde:	d920      	bls.n	8002d22 <LCD_Draw_Char+0x9e>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	fa42 f303 	asr.w	r3, r2, r3
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d104      	bne.n	8002d04 <LCD_Draw_Char+0x80>
 8002cfa:	4b16      	ldr	r3, [pc, #88]	@ (8002d54 <LCD_Draw_Char+0xd0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	889b      	ldrh	r3, [r3, #4]
 8002d00:	2b0c      	cmp	r3, #12
 8002d02:	d80e      	bhi.n	8002d22 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	b298      	uxth	r0, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	88bb      	ldrh	r3, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	4a10      	ldr	r2, [pc, #64]	@ (8002d5c <LCD_Draw_Char+0xd8>)
 8002d1a:	8812      	ldrh	r2, [r2, #0]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f7ff ff03 	bl	8002b28 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	3301      	adds	r3, #1
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	4b0a      	ldr	r3, [pc, #40]	@ (8002d54 <LCD_Draw_Char+0xd0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	889b      	ldrh	r3, [r3, #4]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d3b8      	bcc.n	8002ca8 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	4b05      	ldr	r3, [pc, #20]	@ (8002d54 <LCD_Draw_Char+0xd0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	88db      	ldrh	r3, [r3, #6]
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d3ab      	bcc.n	8002ca2 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	bf00      	nop
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000188 	.word	0x20000188
 8002d58:	aaaaaaab 	.word	0xaaaaaaab
 8002d5c:	20000000 	.word	0x20000000

08002d60 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	80fb      	strh	r3, [r7, #6]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	80bb      	strh	r3, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	3b20      	subs	r3, #32
 8002d76:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8002d78:	4b09      	ldr	r3, [pc, #36]	@ (8002da0 <LCD_DisplayChar+0x40>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	4907      	ldr	r1, [pc, #28]	@ (8002da0 <LCD_DisplayChar+0x40>)
 8002d82:	6809      	ldr	r1, [r1, #0]
 8002d84:	88c9      	ldrh	r1, [r1, #6]
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	441a      	add	r2, r3
 8002d8e:	88b9      	ldrh	r1, [r7, #4]
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ff76 	bl	8002c84 <LCD_Draw_Char>
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20000188 	.word	0x20000188

08002da4 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002da8:	b672      	cpsid	i
}
 8002daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dac:	bf00      	nop
 8002dae:	e7fd      	b.n	8002dac <LCD_Error_Handler+0x8>

08002db0 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8002db4:	f001 fa98 	bl	80042e8 <STMPE811_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d001      	beq.n	8002dc2 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8002dbe:	bf00      	nop
 8002dc0:	e7fd      	b.n	8002dbe <InitializeLCDTouch+0xe>
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f001 fb74 	bl	80044bc <STMPE811_DetermineTouchPosition>
}
 8002dd4:	bf00      	nop
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f001 fb44 	bl	8004476 <STMPE811_Read>
 8002dee:	4603      	mov	r3, r0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	460a      	mov	r2, r1
 8002e02:	71fb      	strb	r3, [r7, #7]
 8002e04:	4613      	mov	r3, r2
 8002e06:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8002e08:	79ba      	ldrb	r2, [r7, #6]
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f001 fb42 	bl	8004498 <STMPE811_Write>
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <is_start_screen>:
static block_t block;
static map_t map;
static uint8_t game_started;

uint8_t is_start_screen()
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
	return game_started;
 8002e20:	4b03      	ldr	r3, [pc, #12]	@ (8002e30 <is_start_screen+0x14>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20025bf6 	.word	0x20025bf6

08002e34 <game_start_screen>:

void game_start_screen()
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
	game_started = NOT_STARTED;
 8002e38:	4b04      	ldr	r3, [pc, #16]	@ (8002e4c <game_start_screen+0x18>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
	draw_shapes();
 8002e3e:	f7ff f98a 	bl	8002156 <draw_shapes>
	start_screen();
 8002e42:	f7fd fd25 	bl	8000890 <start_screen>
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20025bf6 	.word	0x20025bf6

08002e50 <game_init>:

void game_init()
{
 8002e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e52:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8002e56:	af0a      	add	r7, sp, #40	@ 0x28
	game_started = STARTED;
 8002e58:	4b23      	ldr	r3, [pc, #140]	@ (8002ee8 <game_init+0x98>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
	LCD_Clear(0,LCD_COLOR_BLACK);
 8002e5e:	2100      	movs	r1, #0
 8002e60:	2000      	movs	r0, #0
 8002e62:	f7ff fecd 	bl	8002c00 <LCD_Clear>

	map = map_init();
 8002e66:	4c21      	ldr	r4, [pc, #132]	@ (8002eec <game_init+0x9c>)
 8002e68:	463b      	mov	r3, r7
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe fa24 	bl	80012b8 <map_init>
 8002e70:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8002e74:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8002e78:	4620      	mov	r0, r4
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	f240 2336 	movw	r3, #566	@ 0x236
 8002e80:	461a      	mov	r2, r3
 8002e82:	f005 f9a7 	bl	80081d4 <memcpy>
	map_draw();
 8002e86:	f7fd fc83 	bl	8000790 <map_draw>
	block = block_create();
 8002e8a:	4d19      	ldr	r5, [pc, #100]	@ (8002ef0 <game_init+0xa0>)
 8002e8c:	463b      	mov	r3, r7
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fea4 	bl	8000bdc <block_create>
 8002e94:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8002e98:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8002e9c:	461c      	mov	r4, r3
 8002e9e:	462e      	mov	r6, r5
 8002ea0:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002ea4:	4635      	mov	r5, r6
 8002ea6:	4623      	mov	r3, r4
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	6859      	ldr	r1, [r3, #4]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb2:	3410      	adds	r4, #16
 8002eb4:	3610      	adds	r6, #16
 8002eb6:	4564      	cmp	r4, ip
 8002eb8:	d1f4      	bne.n	8002ea4 <game_init+0x54>
 8002eba:	4633      	mov	r3, r6
 8002ebc:	4622      	mov	r2, r4
 8002ebe:	6810      	ldr	r0, [r2, #0]
 8002ec0:	6018      	str	r0, [r3, #0]
	draw_tetromino(block);
 8002ec2:	4e0b      	ldr	r6, [pc, #44]	@ (8002ef0 <game_init+0xa0>)
 8002ec4:	466d      	mov	r5, sp
 8002ec6:	f106 0410 	add.w	r4, r6, #16
 8002eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ecc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	602b      	str	r3, [r5, #0]
 8002ed6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002eda:	f7ff fa59 	bl	8002390 <draw_tetromino>
}
 8002ede:	bf00      	nop
 8002ee0:	f507 770f 	add.w	r7, r7, #572	@ 0x23c
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ee8:	20025bf6 	.word	0x20025bf6
 8002eec:	200259c0 	.word	0x200259c0
 8002ef0:	2002598c 	.word	0x2002598c

08002ef4 <game_drop>:

void game_drop()
{
 8002ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef6:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 8002efa:	af0a      	add	r7, sp, #40	@ 0x28
	if(!collision(&block, &map, DOWN))
 8002efc:	2202      	movs	r2, #2
 8002efe:	4943      	ldr	r1, [pc, #268]	@ (800300c <game_drop+0x118>)
 8002f00:	4843      	ldr	r0, [pc, #268]	@ (8003010 <game_drop+0x11c>)
 8002f02:	f7fe fa4c 	bl	800139e <collision>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d137      	bne.n	8002f7c <game_drop+0x88>
	{
		//HAL_Delay(500);
		clear_tetromino(block);
 8002f0c:	4e40      	ldr	r6, [pc, #256]	@ (8003010 <game_drop+0x11c>)
 8002f0e:	466d      	mov	r5, sp
 8002f10:	f106 0410 	add.w	r4, r6, #16
 8002f14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	602b      	str	r3, [r5, #0]
 8002f20:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002f24:	f7ff fa74 	bl	8002410 <clear_tetromino>
		block = block_drop(&block);
 8002f28:	4d39      	ldr	r5, [pc, #228]	@ (8003010 <game_drop+0x11c>)
 8002f2a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8002f2e:	4938      	ldr	r1, [pc, #224]	@ (8003010 <game_drop+0x11c>)
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fd fe05 	bl	8000b40 <block_drop>
 8002f36:	f507 740e 	add.w	r4, r7, #568	@ 0x238
 8002f3a:	462e      	mov	r6, r5
 8002f3c:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002f40:	4635      	mov	r5, r6
 8002f42:	4623      	mov	r3, r4
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f4e:	3410      	adds	r4, #16
 8002f50:	3610      	adds	r6, #16
 8002f52:	4564      	cmp	r4, ip
 8002f54:	d1f4      	bne.n	8002f40 <game_drop+0x4c>
 8002f56:	4633      	mov	r3, r6
 8002f58:	4622      	mov	r2, r4
 8002f5a:	6810      	ldr	r0, [r2, #0]
 8002f5c:	6018      	str	r0, [r3, #0]
		draw_tetromino(block);
 8002f5e:	4e2c      	ldr	r6, [pc, #176]	@ (8003010 <game_drop+0x11c>)
 8002f60:	466d      	mov	r5, sp
 8002f62:	f106 0410 	add.w	r4, r6, #16
 8002f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	602b      	str	r3, [r5, #0]
 8002f72:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002f76:	f7ff fa0b 	bl	8002390 <draw_tetromino>
		if(can_spawn(&block, &map))
		{
			draw_tetromino(block);
		}
	}
}
 8002f7a:	e042      	b.n	8003002 <game_drop+0x10e>
		map = map_update(&block, &map);
 8002f7c:	4c23      	ldr	r4, [pc, #140]	@ (800300c <game_drop+0x118>)
 8002f7e:	463b      	mov	r3, r7
 8002f80:	4a22      	ldr	r2, [pc, #136]	@ (800300c <game_drop+0x118>)
 8002f82:	4923      	ldr	r1, [pc, #140]	@ (8003010 <game_drop+0x11c>)
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fe fd9d 	bl	8001ac4 <map_update>
 8002f8a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8002f8e:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8002f92:	4620      	mov	r0, r4
 8002f94:	4619      	mov	r1, r3
 8002f96:	f240 2336 	movw	r3, #566	@ 0x236
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f005 f91a 	bl	80081d4 <memcpy>
		block = block_create();
 8002fa0:	4d1b      	ldr	r5, [pc, #108]	@ (8003010 <game_drop+0x11c>)
 8002fa2:	463b      	mov	r3, r7
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fd fe19 	bl	8000bdc <block_create>
 8002faa:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8002fae:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8002fb2:	461c      	mov	r4, r3
 8002fb4:	462e      	mov	r6, r5
 8002fb6:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002fba:	4635      	mov	r5, r6
 8002fbc:	4623      	mov	r3, r4
 8002fbe:	6818      	ldr	r0, [r3, #0]
 8002fc0:	6859      	ldr	r1, [r3, #4]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc8:	3410      	adds	r4, #16
 8002fca:	3610      	adds	r6, #16
 8002fcc:	4564      	cmp	r4, ip
 8002fce:	d1f4      	bne.n	8002fba <game_drop+0xc6>
 8002fd0:	4633      	mov	r3, r6
 8002fd2:	4622      	mov	r2, r4
 8002fd4:	6810      	ldr	r0, [r2, #0]
 8002fd6:	6018      	str	r0, [r3, #0]
		if(can_spawn(&block, &map))
 8002fd8:	490c      	ldr	r1, [pc, #48]	@ (800300c <game_drop+0x118>)
 8002fda:	480d      	ldr	r0, [pc, #52]	@ (8003010 <game_drop+0x11c>)
 8002fdc:	f7ff fa57 	bl	800248e <can_spawn>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00d      	beq.n	8003002 <game_drop+0x10e>
			draw_tetromino(block);
 8002fe6:	4e0a      	ldr	r6, [pc, #40]	@ (8003010 <game_drop+0x11c>)
 8002fe8:	466d      	mov	r5, sp
 8002fea:	f106 0410 	add.w	r4, r6, #16
 8002fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	602b      	str	r3, [r5, #0]
 8002ffa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002ffe:	f7ff f9c7 	bl	8002390 <draw_tetromino>
}
 8003002:	bf00      	nop
 8003004:	f507 771d 	add.w	r7, r7, #628	@ 0x274
 8003008:	46bd      	mov	sp, r7
 800300a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800300c:	200259c0 	.word	0x200259c0
 8003010:	2002598c 	.word	0x2002598c

08003014 <game_rotate>:

void game_rotate()
{
 8003014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003016:	b099      	sub	sp, #100	@ 0x64
 8003018:	af0a      	add	r7, sp, #40	@ 0x28
	clear_tetromino(block);
 800301a:	4e1c      	ldr	r6, [pc, #112]	@ (800308c <game_rotate+0x78>)
 800301c:	466d      	mov	r5, sp
 800301e:	f106 0410 	add.w	r4, r6, #16
 8003022:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003024:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	602b      	str	r3, [r5, #0]
 800302e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003032:	f7ff f9ed 	bl	8002410 <clear_tetromino>
	block = block_rotate(&block);
 8003036:	4d15      	ldr	r5, [pc, #84]	@ (800308c <game_rotate+0x78>)
 8003038:	463b      	mov	r3, r7
 800303a:	4914      	ldr	r1, [pc, #80]	@ (800308c <game_rotate+0x78>)
 800303c:	4618      	mov	r0, r3
 800303e:	f7fe fe5f 	bl	8001d00 <block_rotate>
 8003042:	463c      	mov	r4, r7
 8003044:	462e      	mov	r6, r5
 8003046:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800304a:	4635      	mov	r5, r6
 800304c:	4623      	mov	r3, r4
 800304e:	6818      	ldr	r0, [r3, #0]
 8003050:	6859      	ldr	r1, [r3, #4]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003058:	3410      	adds	r4, #16
 800305a:	3610      	adds	r6, #16
 800305c:	4564      	cmp	r4, ip
 800305e:	d1f4      	bne.n	800304a <game_rotate+0x36>
 8003060:	4633      	mov	r3, r6
 8003062:	4622      	mov	r2, r4
 8003064:	6810      	ldr	r0, [r2, #0]
 8003066:	6018      	str	r0, [r3, #0]
	draw_tetromino(block);
 8003068:	4e08      	ldr	r6, [pc, #32]	@ (800308c <game_rotate+0x78>)
 800306a:	466d      	mov	r5, sp
 800306c:	f106 0410 	add.w	r4, r6, #16
 8003070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	602b      	str	r3, [r5, #0]
 800307c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003080:	f7ff f986 	bl	8002390 <draw_tetromino>
}
 8003084:	bf00      	nop
 8003086:	373c      	adds	r7, #60	@ 0x3c
 8003088:	46bd      	mov	sp, r7
 800308a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800308c:	2002598c 	.word	0x2002598c

08003090 <game_move>:

void game_move(uint8_t dir)
{
 8003090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003092:	b09b      	sub	sp, #108	@ 0x6c
 8003094:	af0a      	add	r7, sp, #40	@ 0x28
 8003096:	4603      	mov	r3, r0
 8003098:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if(!collision(&block, &map, dir))
 800309c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80030a0:	461a      	mov	r2, r3
 80030a2:	4921      	ldr	r1, [pc, #132]	@ (8003128 <game_move+0x98>)
 80030a4:	4821      	ldr	r0, [pc, #132]	@ (800312c <game_move+0x9c>)
 80030a6:	f7fe f97a 	bl	800139e <collision>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d136      	bne.n	800311e <game_move+0x8e>
	{
		clear_tetromino(block);
 80030b0:	4e1e      	ldr	r6, [pc, #120]	@ (800312c <game_move+0x9c>)
 80030b2:	466d      	mov	r5, sp
 80030b4:	f106 0410 	add.w	r4, r6, #16
 80030b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	602b      	str	r3, [r5, #0]
 80030c4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80030c8:	f7ff f9a2 	bl	8002410 <clear_tetromino>
		block = block_move(&block, &map, dir);
 80030cc:	4d17      	ldr	r5, [pc, #92]	@ (800312c <game_move+0x9c>)
 80030ce:	4638      	mov	r0, r7
 80030d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80030d4:	4a14      	ldr	r2, [pc, #80]	@ (8003128 <game_move+0x98>)
 80030d6:	4915      	ldr	r1, [pc, #84]	@ (800312c <game_move+0x9c>)
 80030d8:	f7fe ffae 	bl	8002038 <block_move>
 80030dc:	463c      	mov	r4, r7
 80030de:	462e      	mov	r6, r5
 80030e0:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80030e4:	4635      	mov	r5, r6
 80030e6:	4623      	mov	r3, r4
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	6859      	ldr	r1, [r3, #4]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030f2:	3410      	adds	r4, #16
 80030f4:	3610      	adds	r6, #16
 80030f6:	4564      	cmp	r4, ip
 80030f8:	d1f4      	bne.n	80030e4 <game_move+0x54>
 80030fa:	4633      	mov	r3, r6
 80030fc:	4622      	mov	r2, r4
 80030fe:	6810      	ldr	r0, [r2, #0]
 8003100:	6018      	str	r0, [r3, #0]
		draw_tetromino(block);
 8003102:	4e0a      	ldr	r6, [pc, #40]	@ (800312c <game_move+0x9c>)
 8003104:	466d      	mov	r5, sp
 8003106:	f106 0410 	add.w	r4, r6, #16
 800310a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800310c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800310e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	602b      	str	r3, [r5, #0]
 8003116:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800311a:	f7ff f939 	bl	8002390 <draw_tetromino>
	}
}
 800311e:	bf00      	nop
 8003120:	3744      	adds	r7, #68	@ 0x44
 8003122:	46bd      	mov	sp, r7
 8003124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003126:	bf00      	nop
 8003128:	200259c0 	.word	0x200259c0
 800312c:	2002598c 	.word	0x2002598c

08003130 <game_finished>:

uint8_t game_finished()
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
	if(can_spawn(&block, &map))
 8003134:	4905      	ldr	r1, [pc, #20]	@ (800314c <game_finished+0x1c>)
 8003136:	4806      	ldr	r0, [pc, #24]	@ (8003150 <game_finished+0x20>)
 8003138:	f7ff f9a9 	bl	800248e <can_spawn>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <game_finished+0x16>
	{
		return 0;
 8003142:	2300      	movs	r3, #0
 8003144:	e000      	b.n	8003148 <game_finished+0x18>
	}
	return 1;
 8003146:	2301      	movs	r3, #1
}
 8003148:	4618      	mov	r0, r3
 800314a:	bd80      	pop	{r7, pc}
 800314c:	200259c0 	.word	0x200259c0
 8003150:	2002598c 	.word	0x2002598c

08003154 <game_over>:

void game_over()
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
	end_screen();
 800315a:	f7fd fc63 	bl	8000a24 <end_screen>
	uint32_t time = HAL_GetTick();
 800315e:	f001 fcb1 	bl	8004ac4 <HAL_GetTick>
 8003162:	6078      	str	r0, [r7, #4]
	disp_time(time);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7fd fc97 	bl	8000a98 <disp_time>
	while(1){}
 800316a:	bf00      	nop
 800316c:	e7fd      	b.n	800316a <game_over+0x16>

0800316e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003172:	f000 f9ff 	bl	8003574 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8003176:	20ca      	movs	r0, #202	@ 0xca
 8003178:	f000 f943 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 800317c:	20c3      	movs	r0, #195	@ 0xc3
 800317e:	f000 f94d 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8003182:	2008      	movs	r0, #8
 8003184:	f000 f94a 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8003188:	2050      	movs	r0, #80	@ 0x50
 800318a:	f000 f947 	bl	800341c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 800318e:	20cf      	movs	r0, #207	@ 0xcf
 8003190:	f000 f937 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8003194:	2000      	movs	r0, #0
 8003196:	f000 f941 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 800319a:	20c1      	movs	r0, #193	@ 0xc1
 800319c:	f000 f93e 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80031a0:	2030      	movs	r0, #48	@ 0x30
 80031a2:	f000 f93b 	bl	800341c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80031a6:	20ed      	movs	r0, #237	@ 0xed
 80031a8:	f000 f92b 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80031ac:	2064      	movs	r0, #100	@ 0x64
 80031ae:	f000 f935 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80031b2:	2003      	movs	r0, #3
 80031b4:	f000 f932 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80031b8:	2012      	movs	r0, #18
 80031ba:	f000 f92f 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80031be:	2081      	movs	r0, #129	@ 0x81
 80031c0:	f000 f92c 	bl	800341c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80031c4:	20e8      	movs	r0, #232	@ 0xe8
 80031c6:	f000 f91c 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80031ca:	2085      	movs	r0, #133	@ 0x85
 80031cc:	f000 f926 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80031d0:	2000      	movs	r0, #0
 80031d2:	f000 f923 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80031d6:	2078      	movs	r0, #120	@ 0x78
 80031d8:	f000 f920 	bl	800341c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80031dc:	20cb      	movs	r0, #203	@ 0xcb
 80031de:	f000 f910 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80031e2:	2039      	movs	r0, #57	@ 0x39
 80031e4:	f000 f91a 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80031e8:	202c      	movs	r0, #44	@ 0x2c
 80031ea:	f000 f917 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80031ee:	2000      	movs	r0, #0
 80031f0:	f000 f914 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80031f4:	2034      	movs	r0, #52	@ 0x34
 80031f6:	f000 f911 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80031fa:	2002      	movs	r0, #2
 80031fc:	f000 f90e 	bl	800341c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8003200:	20f7      	movs	r0, #247	@ 0xf7
 8003202:	f000 f8fe 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8003206:	2020      	movs	r0, #32
 8003208:	f000 f908 	bl	800341c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 800320c:	20ea      	movs	r0, #234	@ 0xea
 800320e:	f000 f8f8 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003212:	2000      	movs	r0, #0
 8003214:	f000 f902 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003218:	2000      	movs	r0, #0
 800321a:	f000 f8ff 	bl	800341c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 800321e:	20b1      	movs	r0, #177	@ 0xb1
 8003220:	f000 f8ef 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003224:	2000      	movs	r0, #0
 8003226:	f000 f8f9 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800322a:	201b      	movs	r0, #27
 800322c:	f000 f8f6 	bl	800341c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8003230:	20b6      	movs	r0, #182	@ 0xb6
 8003232:	f000 f8e6 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003236:	200a      	movs	r0, #10
 8003238:	f000 f8f0 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 800323c:	20a2      	movs	r0, #162	@ 0xa2
 800323e:	f000 f8ed 	bl	800341c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8003242:	20c0      	movs	r0, #192	@ 0xc0
 8003244:	f000 f8dd 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8003248:	2010      	movs	r0, #16
 800324a:	f000 f8e7 	bl	800341c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 800324e:	20c1      	movs	r0, #193	@ 0xc1
 8003250:	f000 f8d7 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8003254:	2010      	movs	r0, #16
 8003256:	f000 f8e1 	bl	800341c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 800325a:	20c5      	movs	r0, #197	@ 0xc5
 800325c:	f000 f8d1 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8003260:	2045      	movs	r0, #69	@ 0x45
 8003262:	f000 f8db 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8003266:	2015      	movs	r0, #21
 8003268:	f000 f8d8 	bl	800341c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 800326c:	20c7      	movs	r0, #199	@ 0xc7
 800326e:	f000 f8c8 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8003272:	2090      	movs	r0, #144	@ 0x90
 8003274:	f000 f8d2 	bl	800341c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8003278:	2036      	movs	r0, #54	@ 0x36
 800327a:	f000 f8c2 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 800327e:	20c8      	movs	r0, #200	@ 0xc8
 8003280:	f000 f8cc 	bl	800341c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8003284:	20f2      	movs	r0, #242	@ 0xf2
 8003286:	f000 f8bc 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800328a:	2000      	movs	r0, #0
 800328c:	f000 f8c6 	bl	800341c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8003290:	20b0      	movs	r0, #176	@ 0xb0
 8003292:	f000 f8b6 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8003296:	20c2      	movs	r0, #194	@ 0xc2
 8003298:	f000 f8c0 	bl	800341c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800329c:	20b6      	movs	r0, #182	@ 0xb6
 800329e:	f000 f8b0 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80032a2:	200a      	movs	r0, #10
 80032a4:	f000 f8ba 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80032a8:	20a7      	movs	r0, #167	@ 0xa7
 80032aa:	f000 f8b7 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80032ae:	2027      	movs	r0, #39	@ 0x27
 80032b0:	f000 f8b4 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80032b4:	2004      	movs	r0, #4
 80032b6:	f000 f8b1 	bl	800341c <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80032ba:	202a      	movs	r0, #42	@ 0x2a
 80032bc:	f000 f8a1 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80032c0:	2000      	movs	r0, #0
 80032c2:	f000 f8ab 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80032c6:	2000      	movs	r0, #0
 80032c8:	f000 f8a8 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80032cc:	2000      	movs	r0, #0
 80032ce:	f000 f8a5 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80032d2:	20ef      	movs	r0, #239	@ 0xef
 80032d4:	f000 f8a2 	bl	800341c <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80032d8:	202b      	movs	r0, #43	@ 0x2b
 80032da:	f000 f892 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80032de:	2000      	movs	r0, #0
 80032e0:	f000 f89c 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80032e4:	2000      	movs	r0, #0
 80032e6:	f000 f899 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80032ea:	2001      	movs	r0, #1
 80032ec:	f000 f896 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80032f0:	203f      	movs	r0, #63	@ 0x3f
 80032f2:	f000 f893 	bl	800341c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80032f6:	20f6      	movs	r0, #246	@ 0xf6
 80032f8:	f000 f883 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80032fc:	2001      	movs	r0, #1
 80032fe:	f000 f88d 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003302:	2000      	movs	r0, #0
 8003304:	f000 f88a 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8003308:	2006      	movs	r0, #6
 800330a:	f000 f887 	bl	800341c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 800330e:	202c      	movs	r0, #44	@ 0x2c
 8003310:	f000 f877 	bl	8003402 <ili9341_Write_Reg>
  LCD_Delay(200);
 8003314:	20c8      	movs	r0, #200	@ 0xc8
 8003316:	f000 f9e9 	bl	80036ec <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 800331a:	2026      	movs	r0, #38	@ 0x26
 800331c:	f000 f871 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8003320:	2001      	movs	r0, #1
 8003322:	f000 f87b 	bl	800341c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8003326:	20e0      	movs	r0, #224	@ 0xe0
 8003328:	f000 f86b 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 800332c:	200f      	movs	r0, #15
 800332e:	f000 f875 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8003332:	2029      	movs	r0, #41	@ 0x29
 8003334:	f000 f872 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8003338:	2024      	movs	r0, #36	@ 0x24
 800333a:	f000 f86f 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800333e:	200c      	movs	r0, #12
 8003340:	f000 f86c 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8003344:	200e      	movs	r0, #14
 8003346:	f000 f869 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800334a:	2009      	movs	r0, #9
 800334c:	f000 f866 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8003350:	204e      	movs	r0, #78	@ 0x4e
 8003352:	f000 f863 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8003356:	2078      	movs	r0, #120	@ 0x78
 8003358:	f000 f860 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 800335c:	203c      	movs	r0, #60	@ 0x3c
 800335e:	f000 f85d 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003362:	2009      	movs	r0, #9
 8003364:	f000 f85a 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8003368:	2013      	movs	r0, #19
 800336a:	f000 f857 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800336e:	2005      	movs	r0, #5
 8003370:	f000 f854 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8003374:	2017      	movs	r0, #23
 8003376:	f000 f851 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800337a:	2011      	movs	r0, #17
 800337c:	f000 f84e 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003380:	2000      	movs	r0, #0
 8003382:	f000 f84b 	bl	800341c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8003386:	20e1      	movs	r0, #225	@ 0xe1
 8003388:	f000 f83b 	bl	8003402 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800338c:	2000      	movs	r0, #0
 800338e:	f000 f845 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8003392:	2016      	movs	r0, #22
 8003394:	f000 f842 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8003398:	201b      	movs	r0, #27
 800339a:	f000 f83f 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800339e:	2004      	movs	r0, #4
 80033a0:	f000 f83c 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80033a4:	2011      	movs	r0, #17
 80033a6:	f000 f839 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80033aa:	2007      	movs	r0, #7
 80033ac:	f000 f836 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80033b0:	2031      	movs	r0, #49	@ 0x31
 80033b2:	f000 f833 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80033b6:	2033      	movs	r0, #51	@ 0x33
 80033b8:	f000 f830 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80033bc:	2042      	movs	r0, #66	@ 0x42
 80033be:	f000 f82d 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80033c2:	2005      	movs	r0, #5
 80033c4:	f000 f82a 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80033c8:	200c      	movs	r0, #12
 80033ca:	f000 f827 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80033ce:	200a      	movs	r0, #10
 80033d0:	f000 f824 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80033d4:	2028      	movs	r0, #40	@ 0x28
 80033d6:	f000 f821 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80033da:	202f      	movs	r0, #47	@ 0x2f
 80033dc:	f000 f81e 	bl	800341c <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80033e0:	200f      	movs	r0, #15
 80033e2:	f000 f81b 	bl	800341c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80033e6:	2011      	movs	r0, #17
 80033e8:	f000 f80b 	bl	8003402 <ili9341_Write_Reg>
  LCD_Delay(200);
 80033ec:	20c8      	movs	r0, #200	@ 0xc8
 80033ee:	f000 f97d 	bl	80036ec <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80033f2:	2029      	movs	r0, #41	@ 0x29
 80033f4:	f000 f805 	bl	8003402 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80033f8:	202c      	movs	r0, #44	@ 0x2c
 80033fa:	f000 f802 	bl	8003402 <ili9341_Write_Reg>
}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}

08003402 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	4603      	mov	r3, r0
 800340a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f94a 	bl	80036a8 <LCD_IO_WriteReg>
}
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	4618      	mov	r0, r3
 800342a:	f000 f91b 	bl	8003664 <LCD_IO_WriteData>
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
	...

08003438 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800343c:	4819      	ldr	r0, [pc, #100]	@ (80034a4 <SPI_Init+0x6c>)
 800343e:	f004 fbca 	bl	8007bd6 <HAL_SPI_GetState>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d12b      	bne.n	80034a0 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8003448:	4b16      	ldr	r3, [pc, #88]	@ (80034a4 <SPI_Init+0x6c>)
 800344a:	4a17      	ldr	r2, [pc, #92]	@ (80034a8 <SPI_Init+0x70>)
 800344c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800344e:	4b15      	ldr	r3, [pc, #84]	@ (80034a4 <SPI_Init+0x6c>)
 8003450:	2218      	movs	r2, #24
 8003452:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003454:	4b13      	ldr	r3, [pc, #76]	@ (80034a4 <SPI_Init+0x6c>)
 8003456:	2200      	movs	r2, #0
 8003458:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800345a:	4b12      	ldr	r3, [pc, #72]	@ (80034a4 <SPI_Init+0x6c>)
 800345c:	2200      	movs	r2, #0
 800345e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003460:	4b10      	ldr	r3, [pc, #64]	@ (80034a4 <SPI_Init+0x6c>)
 8003462:	2200      	movs	r2, #0
 8003464:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003466:	4b0f      	ldr	r3, [pc, #60]	@ (80034a4 <SPI_Init+0x6c>)
 8003468:	2200      	movs	r2, #0
 800346a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800346c:	4b0d      	ldr	r3, [pc, #52]	@ (80034a4 <SPI_Init+0x6c>)
 800346e:	2207      	movs	r2, #7
 8003470:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003472:	4b0c      	ldr	r3, [pc, #48]	@ (80034a4 <SPI_Init+0x6c>)
 8003474:	2200      	movs	r2, #0
 8003476:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003478:	4b0a      	ldr	r3, [pc, #40]	@ (80034a4 <SPI_Init+0x6c>)
 800347a:	2200      	movs	r2, #0
 800347c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800347e:	4b09      	ldr	r3, [pc, #36]	@ (80034a4 <SPI_Init+0x6c>)
 8003480:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003484:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003486:	4b07      	ldr	r3, [pc, #28]	@ (80034a4 <SPI_Init+0x6c>)
 8003488:	2200      	movs	r2, #0
 800348a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800348c:	4b05      	ldr	r3, [pc, #20]	@ (80034a4 <SPI_Init+0x6c>)
 800348e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003492:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8003494:	4803      	ldr	r0, [pc, #12]	@ (80034a4 <SPI_Init+0x6c>)
 8003496:	f000 f833 	bl	8003500 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800349a:	4802      	ldr	r0, [pc, #8]	@ (80034a4 <SPI_Init+0x6c>)
 800349c:	f004 f9a6 	bl	80077ec <HAL_SPI_Init>
  }
}
 80034a0:	bf00      	nop
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20025bf8 	.word	0x20025bf8
 80034a8:	40015000 	.word	0x40015000

080034ac <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80034ba:	4b09      	ldr	r3, [pc, #36]	@ (80034e0 <SPI_Write+0x34>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	1db9      	adds	r1, r7, #6
 80034c0:	2201      	movs	r2, #1
 80034c2:	4808      	ldr	r0, [pc, #32]	@ (80034e4 <SPI_Write+0x38>)
 80034c4:	f004 fa43 	bl	800794e <HAL_SPI_Transmit>
 80034c8:	4603      	mov	r3, r0
 80034ca:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80034d2:	f000 f809 	bl	80034e8 <SPI_Error>
  }
}
 80034d6:	bf00      	nop
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000014 	.word	0x20000014
 80034e4:	20025bf8 	.word	0x20025bf8

080034e8 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80034ec:	4803      	ldr	r0, [pc, #12]	@ (80034fc <SPI_Error+0x14>)
 80034ee:	f004 fa06 	bl	80078fe <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80034f2:	f7ff ffa1 	bl	8003438 <SPI_Init>
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20025bf8 	.word	0x20025bf8

08003500 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	@ 0x28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8003508:	2300      	movs	r3, #0
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	4b17      	ldr	r3, [pc, #92]	@ (800356c <SPI_MspInit+0x6c>)
 800350e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003510:	4a16      	ldr	r2, [pc, #88]	@ (800356c <SPI_MspInit+0x6c>)
 8003512:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003516:	6453      	str	r3, [r2, #68]	@ 0x44
 8003518:	4b14      	ldr	r3, [pc, #80]	@ (800356c <SPI_MspInit+0x6c>)
 800351a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003520:	613b      	str	r3, [r7, #16]
 8003522:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	4b10      	ldr	r3, [pc, #64]	@ (800356c <SPI_MspInit+0x6c>)
 800352a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352c:	4a0f      	ldr	r2, [pc, #60]	@ (800356c <SPI_MspInit+0x6c>)
 800352e:	f043 0320 	orr.w	r3, r3, #32
 8003532:	6313      	str	r3, [r2, #48]	@ 0x30
 8003534:	4b0d      	ldr	r3, [pc, #52]	@ (800356c <SPI_MspInit+0x6c>)
 8003536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8003540:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003544:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003546:	2302      	movs	r3, #2
 8003548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800354a:	2302      	movs	r3, #2
 800354c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800354e:	2301      	movs	r3, #1
 8003550:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8003552:	2305      	movs	r3, #5
 8003554:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8003556:	f107 0314 	add.w	r3, r7, #20
 800355a:	4619      	mov	r1, r3
 800355c:	4804      	ldr	r0, [pc, #16]	@ (8003570 <SPI_MspInit+0x70>)
 800355e:	f001 fc69 	bl	8004e34 <HAL_GPIO_Init>
}
 8003562:	bf00      	nop
 8003564:	3728      	adds	r7, #40	@ 0x28
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40023800 	.word	0x40023800
 8003570:	40021400 	.word	0x40021400

08003574 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800357a:	4b36      	ldr	r3, [pc, #216]	@ (8003654 <LCD_IO_Init+0xe0>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d164      	bne.n	800364c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8003582:	4b34      	ldr	r3, [pc, #208]	@ (8003654 <LCD_IO_Init+0xe0>)
 8003584:	2201      	movs	r2, #1
 8003586:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003588:	2300      	movs	r3, #0
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	4b32      	ldr	r3, [pc, #200]	@ (8003658 <LCD_IO_Init+0xe4>)
 800358e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003590:	4a31      	ldr	r2, [pc, #196]	@ (8003658 <LCD_IO_Init+0xe4>)
 8003592:	f043 0308 	orr.w	r3, r3, #8
 8003596:	6313      	str	r3, [r2, #48]	@ 0x30
 8003598:	4b2f      	ldr	r3, [pc, #188]	@ (8003658 <LCD_IO_Init+0xe4>)
 800359a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80035a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80035aa:	2301      	movs	r3, #1
 80035ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80035b2:	2302      	movs	r3, #2
 80035b4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80035b6:	f107 030c 	add.w	r3, r7, #12
 80035ba:	4619      	mov	r1, r3
 80035bc:	4827      	ldr	r0, [pc, #156]	@ (800365c <LCD_IO_Init+0xe8>)
 80035be:	f001 fc39 	bl	8004e34 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	4b24      	ldr	r3, [pc, #144]	@ (8003658 <LCD_IO_Init+0xe4>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	4a23      	ldr	r2, [pc, #140]	@ (8003658 <LCD_IO_Init+0xe4>)
 80035cc:	f043 0308 	orr.w	r3, r3, #8
 80035d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035d2:	4b21      	ldr	r3, [pc, #132]	@ (8003658 <LCD_IO_Init+0xe4>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	607b      	str	r3, [r7, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80035de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80035e4:	2301      	movs	r3, #1
 80035e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80035ec:	2302      	movs	r3, #2
 80035ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80035f0:	f107 030c 	add.w	r3, r7, #12
 80035f4:	4619      	mov	r1, r3
 80035f6:	4819      	ldr	r0, [pc, #100]	@ (800365c <LCD_IO_Init+0xe8>)
 80035f8:	f001 fc1c 	bl	8004e34 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80035fc:	2300      	movs	r3, #0
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4b15      	ldr	r3, [pc, #84]	@ (8003658 <LCD_IO_Init+0xe4>)
 8003602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003604:	4a14      	ldr	r2, [pc, #80]	@ (8003658 <LCD_IO_Init+0xe4>)
 8003606:	f043 0304 	orr.w	r3, r3, #4
 800360a:	6313      	str	r3, [r2, #48]	@ 0x30
 800360c:	4b12      	ldr	r3, [pc, #72]	@ (8003658 <LCD_IO_Init+0xe4>)
 800360e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	603b      	str	r3, [r7, #0]
 8003616:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003618:	2304      	movs	r3, #4
 800361a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800361c:	2301      	movs	r3, #1
 800361e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003624:	2302      	movs	r3, #2
 8003626:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003628:	f107 030c 	add.w	r3, r7, #12
 800362c:	4619      	mov	r1, r3
 800362e:	480c      	ldr	r0, [pc, #48]	@ (8003660 <LCD_IO_Init+0xec>)
 8003630:	f001 fc00 	bl	8004e34 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003634:	2200      	movs	r2, #0
 8003636:	2104      	movs	r1, #4
 8003638:	4809      	ldr	r0, [pc, #36]	@ (8003660 <LCD_IO_Init+0xec>)
 800363a:	f001 feb3 	bl	80053a4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800363e:	2201      	movs	r2, #1
 8003640:	2104      	movs	r1, #4
 8003642:	4807      	ldr	r0, [pc, #28]	@ (8003660 <LCD_IO_Init+0xec>)
 8003644:	f001 feae 	bl	80053a4 <HAL_GPIO_WritePin>

    SPI_Init();
 8003648:	f7ff fef6 	bl	8003438 <SPI_Init>
  }
}
 800364c:	bf00      	nop
 800364e:	3720      	adds	r7, #32
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	20025c50 	.word	0x20025c50
 8003658:	40023800 	.word	0x40023800
 800365c:	40020c00 	.word	0x40020c00
 8003660:	40020800 	.word	0x40020800

08003664 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800366e:	2201      	movs	r2, #1
 8003670:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003674:	480a      	ldr	r0, [pc, #40]	@ (80036a0 <LCD_IO_WriteData+0x3c>)
 8003676:	f001 fe95 	bl	80053a4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800367a:	2200      	movs	r2, #0
 800367c:	2104      	movs	r1, #4
 800367e:	4809      	ldr	r0, [pc, #36]	@ (80036a4 <LCD_IO_WriteData+0x40>)
 8003680:	f001 fe90 	bl	80053a4 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8003684:	88fb      	ldrh	r3, [r7, #6]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff ff10 	bl	80034ac <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800368c:	2201      	movs	r2, #1
 800368e:	2104      	movs	r1, #4
 8003690:	4804      	ldr	r0, [pc, #16]	@ (80036a4 <LCD_IO_WriteData+0x40>)
 8003692:	f001 fe87 	bl	80053a4 <HAL_GPIO_WritePin>
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40020c00 	.word	0x40020c00
 80036a4:	40020800 	.word	0x40020800

080036a8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80036b2:	2200      	movs	r2, #0
 80036b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80036b8:	480a      	ldr	r0, [pc, #40]	@ (80036e4 <LCD_IO_WriteReg+0x3c>)
 80036ba:	f001 fe73 	bl	80053a4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80036be:	2200      	movs	r2, #0
 80036c0:	2104      	movs	r1, #4
 80036c2:	4809      	ldr	r0, [pc, #36]	@ (80036e8 <LCD_IO_WriteReg+0x40>)
 80036c4:	f001 fe6e 	bl	80053a4 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff feed 	bl	80034ac <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80036d2:	2201      	movs	r2, #1
 80036d4:	2104      	movs	r1, #4
 80036d6:	4804      	ldr	r0, [pc, #16]	@ (80036e8 <LCD_IO_WriteReg+0x40>)
 80036d8:	f001 fe64 	bl	80053a4 <HAL_GPIO_WritePin>
}
 80036dc:	bf00      	nop
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40020c00 	.word	0x40020c00
 80036e8:	40020800 	.word	0x40020800

080036ec <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f001 f9f1 	bl	8004adc <HAL_Delay>
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003706:	f001 f977 	bl	80049f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClockOverride();
 800370a:	f000 f80d 	bl	8003728 <SystemClockOverride>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800370e:	f000 f985 	bl	8003a1c <MX_GPIO_Init>
  MX_I2C3_Init();
 8003712:	f000 f85b 	bl	80037cc <MX_I2C3_Init>
  MX_LTDC_Init();
 8003716:	f000 f899 	bl	800384c <MX_LTDC_Init>
  MX_SPI5_Init();
 800371a:	f000 f949 	bl	80039b0 <MX_SPI5_Init>

  /* USER CODE BEGIN 2 */
  ApplicationInit();
 800371e:	f7fc fedd 	bl	80004dc <ApplicationInit>
  //HAL_Delay(5000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003722:	bf00      	nop
 8003724:	e7fd      	b.n	8003722 <main+0x20>
	...

08003728 <SystemClockOverride>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClockOverride(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b094      	sub	sp, #80	@ 0x50
 800372c:	af00      	add	r7, sp, #0
 RCC_ClkInitTypeDef RCC_ClkInitStruct;
 RCC_OscInitTypeDef RCC_OscInitStruct;
 __HAL_RCC_PWR_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	4b24      	ldr	r3, [pc, #144]	@ (80037c4 <SystemClockOverride+0x9c>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	4a23      	ldr	r2, [pc, #140]	@ (80037c4 <SystemClockOverride+0x9c>)
 8003738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800373c:	6413      	str	r3, [r2, #64]	@ 0x40
 800373e:	4b21      	ldr	r3, [pc, #132]	@ (80037c4 <SystemClockOverride+0x9c>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]
 __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.
 800374a:	2300      	movs	r3, #0
 800374c:	607b      	str	r3, [r7, #4]
 800374e:	4b1e      	ldr	r3, [pc, #120]	@ (80037c8 <SystemClockOverride+0xa0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a1d      	ldr	r2, [pc, #116]	@ (80037c8 <SystemClockOverride+0xa0>)
 8003754:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	4b1b      	ldr	r3, [pc, #108]	@ (80037c8 <SystemClockOverride+0xa0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003762:	607b      	str	r3, [r7, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 /* Enable HSE Osc and activate PLL with HSE source */
 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003766:	2301      	movs	r3, #1
 8003768:	60fb      	str	r3, [r7, #12]
 RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800376a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800376e:	613b      	str	r3, [r7, #16]
 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003770:	2302      	movs	r3, #2
 8003772:	627b      	str	r3, [r7, #36]	@ 0x24
 RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003774:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003778:	62bb      	str	r3, [r7, #40]	@ 0x28
 RCC_OscInitStruct.PLL.PLLM = 8;
 800377a:	2308      	movs	r3, #8
 800377c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 RCC_OscInitStruct.PLL.PLLN = 336;
 800377e:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003782:	633b      	str	r3, [r7, #48]	@ 0x30
 RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003784:	2302      	movs	r3, #2
 8003786:	637b      	str	r3, [r7, #52]	@ 0x34
 RCC_OscInitStruct.PLL.PLLQ = 7;
 8003788:	2307      	movs	r3, #7
 800378a:	63bb      	str	r3, [r7, #56]	@ 0x38
 HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800378c:	f107 030c 	add.w	r3, r7, #12
 8003790:	4618      	mov	r0, r3
 8003792:	f003 f967 	bl	8006a64 <HAL_RCC_OscConfig>
 /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
 RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003796:	230f      	movs	r3, #15
 8003798:	63fb      	str	r3, [r7, #60]	@ 0x3c
 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800379a:	2302      	movs	r3, #2
 800379c:	643b      	str	r3, [r7, #64]	@ 0x40
 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800379e:	2300      	movs	r3, #0
 80037a0:	647b      	str	r3, [r7, #68]	@ 0x44
 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80037a2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80037a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80037a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80037ae:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80037b2:	2105      	movs	r1, #5
 80037b4:	4618      	mov	r0, r3
 80037b6:	f003 fbcd 	bl	8006f54 <HAL_RCC_ClockConfig>
}
 80037ba:	bf00      	nop
 80037bc:	3750      	adds	r7, #80	@ 0x50
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40023800 	.word	0x40023800
 80037c8:	40007000 	.word	0x40007000

080037cc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80037d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003840 <MX_I2C3_Init+0x74>)
 80037d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003844 <MX_I2C3_Init+0x78>)
 80037d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80037d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003840 <MX_I2C3_Init+0x74>)
 80037d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003848 <MX_I2C3_Init+0x7c>)
 80037da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80037dc:	4b18      	ldr	r3, [pc, #96]	@ (8003840 <MX_I2C3_Init+0x74>)
 80037de:	2200      	movs	r2, #0
 80037e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80037e2:	4b17      	ldr	r3, [pc, #92]	@ (8003840 <MX_I2C3_Init+0x74>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037e8:	4b15      	ldr	r3, [pc, #84]	@ (8003840 <MX_I2C3_Init+0x74>)
 80037ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80037ee:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037f0:	4b13      	ldr	r3, [pc, #76]	@ (8003840 <MX_I2C3_Init+0x74>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80037f6:	4b12      	ldr	r3, [pc, #72]	@ (8003840 <MX_I2C3_Init+0x74>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037fc:	4b10      	ldr	r3, [pc, #64]	@ (8003840 <MX_I2C3_Init+0x74>)
 80037fe:	2200      	movs	r2, #0
 8003800:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003802:	4b0f      	ldr	r3, [pc, #60]	@ (8003840 <MX_I2C3_Init+0x74>)
 8003804:	2200      	movs	r2, #0
 8003806:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003808:	480d      	ldr	r0, [pc, #52]	@ (8003840 <MX_I2C3_Init+0x74>)
 800380a:	f001 fde5 	bl	80053d8 <HAL_I2C_Init>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003814:	f000 fab0 	bl	8003d78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003818:	2100      	movs	r1, #0
 800381a:	4809      	ldr	r0, [pc, #36]	@ (8003840 <MX_I2C3_Init+0x74>)
 800381c:	f002 fe00 	bl	8006420 <HAL_I2CEx_ConfigAnalogFilter>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8003826:	f000 faa7 	bl	8003d78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800382a:	2100      	movs	r1, #0
 800382c:	4804      	ldr	r0, [pc, #16]	@ (8003840 <MX_I2C3_Init+0x74>)
 800382e:	f002 fe33 	bl	8006498 <HAL_I2CEx_ConfigDigitalFilter>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8003838:	f000 fa9e 	bl	8003d78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800383c:	bf00      	nop
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20025c54 	.word	0x20025c54
 8003844:	40005c00 	.word	0x40005c00
 8003848:	000186a0 	.word	0x000186a0

0800384c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b09a      	sub	sp, #104	@ 0x68
 8003850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003852:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003856:	2234      	movs	r2, #52	@ 0x34
 8003858:	2100      	movs	r1, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f004 fc8e 	bl	800817c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8003860:	463b      	mov	r3, r7
 8003862:	2234      	movs	r2, #52	@ 0x34
 8003864:	2100      	movs	r1, #0
 8003866:	4618      	mov	r0, r3
 8003868:	f004 fc88 	bl	800817c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800386c:	4b4e      	ldr	r3, [pc, #312]	@ (80039a8 <MX_LTDC_Init+0x15c>)
 800386e:	4a4f      	ldr	r2, [pc, #316]	@ (80039ac <MX_LTDC_Init+0x160>)
 8003870:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003872:	4b4d      	ldr	r3, [pc, #308]	@ (80039a8 <MX_LTDC_Init+0x15c>)
 8003874:	2200      	movs	r2, #0
 8003876:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003878:	4b4b      	ldr	r3, [pc, #300]	@ (80039a8 <MX_LTDC_Init+0x15c>)
 800387a:	2200      	movs	r2, #0
 800387c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800387e:	4b4a      	ldr	r3, [pc, #296]	@ (80039a8 <MX_LTDC_Init+0x15c>)
 8003880:	2200      	movs	r2, #0
 8003882:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003884:	4b48      	ldr	r3, [pc, #288]	@ (80039a8 <MX_LTDC_Init+0x15c>)
 8003886:	2200      	movs	r2, #0
 8003888:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800388a:	4b47      	ldr	r3, [pc, #284]	@ (80039a8 <MX_LTDC_Init+0x15c>)
 800388c:	2207      	movs	r2, #7
 800388e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8003890:	4b45      	ldr	r3, [pc, #276]	@ (80039a8 <MX_LTDC_Init+0x15c>)
 8003892:	2203      	movs	r2, #3
 8003894:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8003896:	4b44      	ldr	r3, [pc, #272]	@ (80039a8 <MX_LTDC_Init+0x15c>)
 8003898:	220e      	movs	r2, #14
 800389a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800389c:	4b42      	ldr	r3, [pc, #264]	@ (80039a8 <MX_LTDC_Init+0x15c>)
 800389e:	2205      	movs	r2, #5
 80038a0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80038a2:	4b41      	ldr	r3, [pc, #260]	@ (80039a8 <MX_LTDC_Init+0x15c>)
 80038a4:	f240 228e 	movw	r2, #654	@ 0x28e
 80038a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80038aa:	4b3f      	ldr	r3, [pc, #252]	@ (80039a8 <MX_LTDC_Init+0x15c>)
 80038ac:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80038b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80038b2:	4b3d      	ldr	r3, [pc, #244]	@ (80039a8 <MX_LTDC_Init+0x15c>)
 80038b4:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80038b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80038ba:	4b3b      	ldr	r3, [pc, #236]	@ (80039a8 <MX_LTDC_Init+0x15c>)
 80038bc:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80038c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80038c2:	4b39      	ldr	r3, [pc, #228]	@ (80039a8 <MX_LTDC_Init+0x15c>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80038ca:	4b37      	ldr	r3, [pc, #220]	@ (80039a8 <MX_LTDC_Init+0x15c>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80038d2:	4b35      	ldr	r3, [pc, #212]	@ (80039a8 <MX_LTDC_Init+0x15c>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80038da:	4833      	ldr	r0, [pc, #204]	@ (80039a8 <MX_LTDC_Init+0x15c>)
 80038dc:	f002 fe1c 	bl	8006518 <HAL_LTDC_Init>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80038e6:	f000 fa47 	bl	8003d78 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80038fa:	2300      	movs	r3, #0
 80038fc:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003906:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800390a:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800390c:	2305      	movs	r3, #5
 800390e:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8003914:	2300      	movs	r3, #0
 8003916:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800391c:	2300      	movs	r3, #0
 800391e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800392e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003932:	2200      	movs	r2, #0
 8003934:	4619      	mov	r1, r3
 8003936:	481c      	ldr	r0, [pc, #112]	@ (80039a8 <MX_LTDC_Init+0x15c>)
 8003938:	f002 febe 	bl	80066b8 <HAL_LTDC_ConfigLayer>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8003942:	f000 fa19 	bl	8003d78 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003962:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003966:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003968:	2305      	movs	r3, #5
 800396a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800397e:	2300      	movs	r3, #0
 8003980:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800398a:	463b      	mov	r3, r7
 800398c:	2201      	movs	r2, #1
 800398e:	4619      	mov	r1, r3
 8003990:	4805      	ldr	r0, [pc, #20]	@ (80039a8 <MX_LTDC_Init+0x15c>)
 8003992:	f002 fe91 	bl	80066b8 <HAL_LTDC_ConfigLayer>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800399c:	f000 f9ec 	bl	8003d78 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80039a0:	bf00      	nop
 80039a2:	3768      	adds	r7, #104	@ 0x68
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20025ca8 	.word	0x20025ca8
 80039ac:	40016800 	.word	0x40016800

080039b0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80039b4:	4b17      	ldr	r3, [pc, #92]	@ (8003a14 <MX_SPI5_Init+0x64>)
 80039b6:	4a18      	ldr	r2, [pc, #96]	@ (8003a18 <MX_SPI5_Init+0x68>)
 80039b8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80039ba:	4b16      	ldr	r3, [pc, #88]	@ (8003a14 <MX_SPI5_Init+0x64>)
 80039bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80039c0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80039c2:	4b14      	ldr	r3, [pc, #80]	@ (8003a14 <MX_SPI5_Init+0x64>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80039c8:	4b12      	ldr	r3, [pc, #72]	@ (8003a14 <MX_SPI5_Init+0x64>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039ce:	4b11      	ldr	r3, [pc, #68]	@ (8003a14 <MX_SPI5_Init+0x64>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003a14 <MX_SPI5_Init+0x64>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80039da:	4b0e      	ldr	r3, [pc, #56]	@ (8003a14 <MX_SPI5_Init+0x64>)
 80039dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039e0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003a14 <MX_SPI5_Init+0x64>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <MX_SPI5_Init+0x64>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80039ee:	4b09      	ldr	r3, [pc, #36]	@ (8003a14 <MX_SPI5_Init+0x64>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039f4:	4b07      	ldr	r3, [pc, #28]	@ (8003a14 <MX_SPI5_Init+0x64>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80039fa:	4b06      	ldr	r3, [pc, #24]	@ (8003a14 <MX_SPI5_Init+0x64>)
 80039fc:	220a      	movs	r2, #10
 80039fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003a00:	4804      	ldr	r0, [pc, #16]	@ (8003a14 <MX_SPI5_Init+0x64>)
 8003a02:	f003 fef3 	bl	80077ec <HAL_SPI_Init>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003a0c:	f000 f9b4 	bl	8003d78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003a10:	bf00      	nop
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20025d50 	.word	0x20025d50
 8003a18:	40015000 	.word	0x40015000

08003a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08e      	sub	sp, #56	@ 0x38
 8003a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	605a      	str	r2, [r3, #4]
 8003a2c:	609a      	str	r2, [r3, #8]
 8003a2e:	60da      	str	r2, [r3, #12]
 8003a30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	623b      	str	r3, [r7, #32]
 8003a36:	4bb2      	ldr	r3, [pc, #712]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3a:	4ab1      	ldr	r2, [pc, #708]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003a3c:	f043 0304 	orr.w	r3, r3, #4
 8003a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a42:	4baf      	ldr	r3, [pc, #700]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	623b      	str	r3, [r7, #32]
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
 8003a52:	4bab      	ldr	r3, [pc, #684]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a56:	4aaa      	ldr	r2, [pc, #680]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003a58:	f043 0320 	orr.w	r3, r3, #32
 8003a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a5e:	4ba8      	ldr	r3, [pc, #672]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	4ba4      	ldr	r3, [pc, #656]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a72:	4aa3      	ldr	r2, [pc, #652]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a7a:	4ba1      	ldr	r3, [pc, #644]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a82:	61bb      	str	r3, [r7, #24]
 8003a84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	4b9d      	ldr	r3, [pc, #628]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8e:	4a9c      	ldr	r2, [pc, #624]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a96:	4b9a      	ldr	r3, [pc, #616]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	4b96      	ldr	r3, [pc, #600]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aaa:	4a95      	ldr	r2, [pc, #596]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003aac:	f043 0302 	orr.w	r3, r3, #2
 8003ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ab2:	4b93      	ldr	r3, [pc, #588]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	4b8f      	ldr	r3, [pc, #572]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	4a8e      	ldr	r2, [pc, #568]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003ac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ace:	4b8c      	ldr	r3, [pc, #560]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	4b88      	ldr	r3, [pc, #544]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae2:	4a87      	ldr	r2, [pc, #540]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003ae4:	f043 0310 	orr.w	r3, r3, #16
 8003ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aea:	4b85      	ldr	r3, [pc, #532]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	4b81      	ldr	r3, [pc, #516]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afe:	4a80      	ldr	r2, [pc, #512]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003b00:	f043 0308 	orr.w	r3, r3, #8
 8003b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b06:	4b7e      	ldr	r3, [pc, #504]	@ (8003d00 <MX_GPIO_Init+0x2e4>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	607b      	str	r3, [r7, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8003b12:	2200      	movs	r2, #0
 8003b14:	2116      	movs	r1, #22
 8003b16:	487b      	ldr	r0, [pc, #492]	@ (8003d04 <MX_GPIO_Init+0x2e8>)
 8003b18:	f001 fc44 	bl	80053a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	2180      	movs	r1, #128	@ 0x80
 8003b20:	4879      	ldr	r0, [pc, #484]	@ (8003d08 <MX_GPIO_Init+0x2ec>)
 8003b22:	f001 fc3f 	bl	80053a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8003b26:	2200      	movs	r2, #0
 8003b28:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8003b2c:	4877      	ldr	r0, [pc, #476]	@ (8003d0c <MX_GPIO_Init+0x2f0>)
 8003b2e:	f001 fc39 	bl	80053a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8003b32:	2200      	movs	r2, #0
 8003b34:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8003b38:	4875      	ldr	r0, [pc, #468]	@ (8003d10 <MX_GPIO_Init+0x2f4>)
 8003b3a:	f001 fc33 	bl	80053a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8003b3e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003b42:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b44:	2302      	movs	r3, #2
 8003b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b50:	230c      	movs	r3, #12
 8003b52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b58:	4619      	mov	r1, r3
 8003b5a:	486e      	ldr	r0, [pc, #440]	@ (8003d14 <MX_GPIO_Init+0x2f8>)
 8003b5c:	f001 f96a 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8003b60:	2301      	movs	r3, #1
 8003b62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b64:	2302      	movs	r3, #2
 8003b66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b70:	230c      	movs	r3, #12
 8003b72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8003b74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4862      	ldr	r0, [pc, #392]	@ (8003d04 <MX_GPIO_Init+0x2e8>)
 8003b7c:	f001 f95a 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8003b80:	2316      	movs	r3, #22
 8003b82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b84:	2301      	movs	r3, #1
 8003b86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b94:	4619      	mov	r1, r3
 8003b96:	485b      	ldr	r0, [pc, #364]	@ (8003d04 <MX_GPIO_Init+0x2e8>)
 8003b98:	f001 f94c 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8003b9c:	f248 0307 	movw	r3, #32775	@ 0x8007
 8003ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003ba2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4855      	ldr	r0, [pc, #340]	@ (8003d08 <MX_GPIO_Init+0x2ec>)
 8003bb4:	f001 f93e 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8003bb8:	2380      	movs	r3, #128	@ 0x80
 8003bba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8003bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bcc:	4619      	mov	r1, r3
 8003bce:	484e      	ldr	r0, [pc, #312]	@ (8003d08 <MX_GPIO_Init+0x2ec>)
 8003bd0:	f001 f930 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8003bd4:	2320      	movs	r3, #32
 8003bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003bd8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8003be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003be6:	4619      	mov	r1, r3
 8003be8:	4846      	ldr	r0, [pc, #280]	@ (8003d04 <MX_GPIO_Init+0x2e8>)
 8003bea:	f001 f923 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003bee:	2304      	movs	r3, #4
 8003bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003bfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4845      	ldr	r0, [pc, #276]	@ (8003d18 <MX_GPIO_Init+0x2fc>)
 8003c02:	f001 f917 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8003c06:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003c0a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c14:	2303      	movs	r3, #3
 8003c16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c18:	230c      	movs	r3, #12
 8003c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c20:	4619      	mov	r1, r3
 8003c22:	483b      	ldr	r0, [pc, #236]	@ (8003d10 <MX_GPIO_Init+0x2f4>)
 8003c24:	f001 f906 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8003c28:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003c2c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c36:	2303      	movs	r3, #3
 8003c38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c3a:	230c      	movs	r3, #12
 8003c3c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c42:	4619      	mov	r1, r3
 8003c44:	4835      	ldr	r0, [pc, #212]	@ (8003d1c <MX_GPIO_Init+0x300>)
 8003c46:	f001 f8f5 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8003c4a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8003c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c50:	2302      	movs	r3, #2
 8003c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c54:	2300      	movs	r3, #0
 8003c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8003c5c:	230c      	movs	r3, #12
 8003c5e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c64:	4619      	mov	r1, r3
 8003c66:	482c      	ldr	r0, [pc, #176]	@ (8003d18 <MX_GPIO_Init+0x2fc>)
 8003c68:	f001 f8e4 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8003c6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c72:	2300      	movs	r3, #0
 8003c74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8003c7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4825      	ldr	r0, [pc, #148]	@ (8003d18 <MX_GPIO_Init+0x2fc>)
 8003c82:	f001 f8d7 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8003c86:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003c8a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c94:	2303      	movs	r3, #3
 8003c96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c98:	230c      	movs	r3, #12
 8003c9a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	481a      	ldr	r0, [pc, #104]	@ (8003d0c <MX_GPIO_Init+0x2f0>)
 8003ca4:	f001 f8c6 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8003ca8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003cac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8003cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4813      	ldr	r0, [pc, #76]	@ (8003d0c <MX_GPIO_Init+0x2f0>)
 8003cbe:	f001 f8b9 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8003cc2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cd8:	4619      	mov	r1, r3
 8003cda:	480c      	ldr	r0, [pc, #48]	@ (8003d0c <MX_GPIO_Init+0x2f0>)
 8003cdc:	f001 f8aa 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003ce0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003cf2:	2307      	movs	r3, #7
 8003cf4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	e010      	b.n	8003d20 <MX_GPIO_Init+0x304>
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40020800 	.word	0x40020800
 8003d08:	40020000 	.word	0x40020000
 8003d0c:	40020c00 	.word	0x40020c00
 8003d10:	40021800 	.word	0x40021800
 8003d14:	40021400 	.word	0x40021400
 8003d18:	40020400 	.word	0x40020400
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	4812      	ldr	r0, [pc, #72]	@ (8003d6c <MX_GPIO_Init+0x350>)
 8003d22:	f001 f887 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8003d26:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8003d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d34:	2300      	movs	r3, #0
 8003d36:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	480c      	ldr	r0, [pc, #48]	@ (8003d70 <MX_GPIO_Init+0x354>)
 8003d40:	f001 f878 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8003d44:	2360      	movs	r3, #96	@ 0x60
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d50:	2303      	movs	r3, #3
 8003d52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003d54:	230c      	movs	r3, #12
 8003d56:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4805      	ldr	r0, [pc, #20]	@ (8003d74 <MX_GPIO_Init+0x358>)
 8003d60:	f001 f868 	bl	8004e34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d64:	bf00      	nop
 8003d66:	3738      	adds	r7, #56	@ 0x38
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40020000 	.word	0x40020000
 8003d70:	40021800 	.word	0x40021800
 8003d74:	40020400 	.word	0x40020400

08003d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003d7c:	b672      	cpsid	i
}
 8003d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d80:	bf00      	nop
 8003d82:	e7fd      	b.n	8003d80 <Error_Handler+0x8>

08003d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	607b      	str	r3, [r7, #4]
 8003d8e:	4b10      	ldr	r3, [pc, #64]	@ (8003dd0 <HAL_MspInit+0x4c>)
 8003d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d92:	4a0f      	ldr	r2, [pc, #60]	@ (8003dd0 <HAL_MspInit+0x4c>)
 8003d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd0 <HAL_MspInit+0x4c>)
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003da2:	607b      	str	r3, [r7, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003da6:	2300      	movs	r3, #0
 8003da8:	603b      	str	r3, [r7, #0]
 8003daa:	4b09      	ldr	r3, [pc, #36]	@ (8003dd0 <HAL_MspInit+0x4c>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dae:	4a08      	ldr	r2, [pc, #32]	@ (8003dd0 <HAL_MspInit+0x4c>)
 8003db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003db6:	4b06      	ldr	r3, [pc, #24]	@ (8003dd0 <HAL_MspInit+0x4c>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003dc2:	2007      	movs	r0, #7
 8003dc4:	f000 ffc0 	bl	8004d48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dc8:	bf00      	nop
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40023800 	.word	0x40023800

08003dd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08a      	sub	sp, #40	@ 0x28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ddc:	f107 0314 	add.w	r3, r7, #20
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	605a      	str	r2, [r3, #4]
 8003de6:	609a      	str	r2, [r3, #8]
 8003de8:	60da      	str	r2, [r3, #12]
 8003dea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a29      	ldr	r2, [pc, #164]	@ (8003e98 <HAL_I2C_MspInit+0xc4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d14b      	bne.n	8003e8e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	4b28      	ldr	r3, [pc, #160]	@ (8003e9c <HAL_I2C_MspInit+0xc8>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	4a27      	ldr	r2, [pc, #156]	@ (8003e9c <HAL_I2C_MspInit+0xc8>)
 8003e00:	f043 0304 	orr.w	r3, r3, #4
 8003e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e06:	4b25      	ldr	r3, [pc, #148]	@ (8003e9c <HAL_I2C_MspInit+0xc8>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	4b21      	ldr	r3, [pc, #132]	@ (8003e9c <HAL_I2C_MspInit+0xc8>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1a:	4a20      	ldr	r2, [pc, #128]	@ (8003e9c <HAL_I2C_MspInit+0xc8>)
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e22:	4b1e      	ldr	r3, [pc, #120]	@ (8003e9c <HAL_I2C_MspInit+0xc8>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003e2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e34:	2312      	movs	r3, #18
 8003e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003e40:	2304      	movs	r3, #4
 8003e42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003e44:	f107 0314 	add.w	r3, r7, #20
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4815      	ldr	r0, [pc, #84]	@ (8003ea0 <HAL_I2C_MspInit+0xcc>)
 8003e4c:	f000 fff2 	bl	8004e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003e50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e56:	2312      	movs	r3, #18
 8003e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003e62:	2304      	movs	r3, #4
 8003e64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003e66:	f107 0314 	add.w	r3, r7, #20
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	480d      	ldr	r0, [pc, #52]	@ (8003ea4 <HAL_I2C_MspInit+0xd0>)
 8003e6e:	f000 ffe1 	bl	8004e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	4b09      	ldr	r3, [pc, #36]	@ (8003e9c <HAL_I2C_MspInit+0xc8>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7a:	4a08      	ldr	r2, [pc, #32]	@ (8003e9c <HAL_I2C_MspInit+0xc8>)
 8003e7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e82:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <HAL_I2C_MspInit+0xc8>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003e8e:	bf00      	nop
 8003e90:	3728      	adds	r7, #40	@ 0x28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40005c00 	.word	0x40005c00
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40020800 	.word	0x40020800
 8003ea4:	40020000 	.word	0x40020000

08003ea8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b09a      	sub	sp, #104	@ 0x68
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	605a      	str	r2, [r3, #4]
 8003eba:	609a      	str	r2, [r3, #8]
 8003ebc:	60da      	str	r2, [r3, #12]
 8003ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ec4:	2230      	movs	r2, #48	@ 0x30
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f004 f957 	bl	800817c <memset>
  if(hltdc->Instance==LTDC)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a81      	ldr	r2, [pc, #516]	@ (80040d8 <HAL_LTDC_MspInit+0x230>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	f040 80fa 	bne.w	80040ce <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003eda:	2308      	movs	r3, #8
 8003edc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8003ede:	2332      	movs	r3, #50	@ 0x32
 8003ee0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003eea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f003 fa3c 	bl	800736c <HAL_RCCEx_PeriphCLKConfig>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8003efa:	f7ff ff3d 	bl	8003d78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	623b      	str	r3, [r7, #32]
 8003f02:	4b76      	ldr	r3, [pc, #472]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f06:	4a75      	ldr	r2, [pc, #468]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003f08:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f0e:	4b73      	ldr	r3, [pc, #460]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f12:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f16:	623b      	str	r3, [r7, #32]
 8003f18:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61fb      	str	r3, [r7, #28]
 8003f1e:	4b6f      	ldr	r3, [pc, #444]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f22:	4a6e      	ldr	r2, [pc, #440]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003f24:	f043 0320 	orr.w	r3, r3, #32
 8003f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f2a:	4b6c      	ldr	r3, [pc, #432]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	61fb      	str	r3, [r7, #28]
 8003f34:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	4b68      	ldr	r3, [pc, #416]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3e:	4a67      	ldr	r2, [pc, #412]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f46:	4b65      	ldr	r3, [pc, #404]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	4b61      	ldr	r3, [pc, #388]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5a:	4a60      	ldr	r2, [pc, #384]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003f5c:	f043 0302 	orr.w	r3, r3, #2
 8003f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f62:	4b5e      	ldr	r3, [pc, #376]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	4b5a      	ldr	r3, [pc, #360]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f76:	4a59      	ldr	r2, [pc, #356]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003f78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f7e:	4b57      	ldr	r3, [pc, #348]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	4b53      	ldr	r3, [pc, #332]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f92:	4a52      	ldr	r2, [pc, #328]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003f94:	f043 0304 	orr.w	r3, r3, #4
 8003f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f9a:	4b50      	ldr	r3, [pc, #320]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	4b4c      	ldr	r3, [pc, #304]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fae:	4a4b      	ldr	r2, [pc, #300]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003fb0:	f043 0308 	orr.w	r3, r3, #8
 8003fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fb6:	4b49      	ldr	r3, [pc, #292]	@ (80040dc <HAL_LTDC_MspInit+0x234>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	60bb      	str	r3, [r7, #8]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003fc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fc6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003fd4:	230e      	movs	r3, #14
 8003fd6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003fd8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4840      	ldr	r0, [pc, #256]	@ (80040e0 <HAL_LTDC_MspInit+0x238>)
 8003fe0:	f000 ff28 	bl	8004e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003fe4:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003fe8:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fea:	2302      	movs	r3, #2
 8003fec:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ff6:	230e      	movs	r3, #14
 8003ff8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ffa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003ffe:	4619      	mov	r1, r3
 8004000:	4838      	ldr	r0, [pc, #224]	@ (80040e4 <HAL_LTDC_MspInit+0x23c>)
 8004002:	f000 ff17 	bl	8004e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8004006:	2303      	movs	r3, #3
 8004008:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800400a:	2302      	movs	r3, #2
 800400c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400e:	2300      	movs	r3, #0
 8004010:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004012:	2300      	movs	r3, #0
 8004014:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004016:	2309      	movs	r3, #9
 8004018:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800401a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800401e:	4619      	mov	r1, r3
 8004020:	4831      	ldr	r0, [pc, #196]	@ (80040e8 <HAL_LTDC_MspInit+0x240>)
 8004022:	f000 ff07 	bl	8004e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8004026:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800402a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402c:	2302      	movs	r3, #2
 800402e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004030:	2300      	movs	r3, #0
 8004032:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004034:	2300      	movs	r3, #0
 8004036:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004038:	230e      	movs	r3, #14
 800403a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800403c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004040:	4619      	mov	r1, r3
 8004042:	4829      	ldr	r0, [pc, #164]	@ (80040e8 <HAL_LTDC_MspInit+0x240>)
 8004044:	f000 fef6 	bl	8004e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8004048:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800404c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404e:	2302      	movs	r3, #2
 8004050:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004052:	2300      	movs	r3, #0
 8004054:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004056:	2300      	movs	r3, #0
 8004058:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800405a:	230e      	movs	r3, #14
 800405c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800405e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004062:	4619      	mov	r1, r3
 8004064:	4821      	ldr	r0, [pc, #132]	@ (80040ec <HAL_LTDC_MspInit+0x244>)
 8004066:	f000 fee5 	bl	8004e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800406a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800406e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004070:	2302      	movs	r3, #2
 8004072:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004074:	2300      	movs	r3, #0
 8004076:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004078:	2300      	movs	r3, #0
 800407a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800407c:	230e      	movs	r3, #14
 800407e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004080:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004084:	4619      	mov	r1, r3
 8004086:	481a      	ldr	r0, [pc, #104]	@ (80040f0 <HAL_LTDC_MspInit+0x248>)
 8004088:	f000 fed4 	bl	8004e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800408c:	2348      	movs	r3, #72	@ 0x48
 800408e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004090:	2302      	movs	r3, #2
 8004092:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004094:	2300      	movs	r3, #0
 8004096:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004098:	2300      	movs	r3, #0
 800409a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800409c:	230e      	movs	r3, #14
 800409e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80040a4:	4619      	mov	r1, r3
 80040a6:	4813      	ldr	r0, [pc, #76]	@ (80040f4 <HAL_LTDC_MspInit+0x24c>)
 80040a8:	f000 fec4 	bl	8004e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80040ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80040b0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b2:	2302      	movs	r3, #2
 80040b4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ba:	2300      	movs	r3, #0
 80040bc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80040be:	2309      	movs	r3, #9
 80040c0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040c2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80040c6:	4619      	mov	r1, r3
 80040c8:	4808      	ldr	r0, [pc, #32]	@ (80040ec <HAL_LTDC_MspInit+0x244>)
 80040ca:	f000 feb3 	bl	8004e34 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80040ce:	bf00      	nop
 80040d0:	3768      	adds	r7, #104	@ 0x68
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40016800 	.word	0x40016800
 80040dc:	40023800 	.word	0x40023800
 80040e0:	40021400 	.word	0x40021400
 80040e4:	40020000 	.word	0x40020000
 80040e8:	40020400 	.word	0x40020400
 80040ec:	40021800 	.word	0x40021800
 80040f0:	40020800 	.word	0x40020800
 80040f4:	40020c00 	.word	0x40020c00

080040f8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a0b      	ldr	r2, [pc, #44]	@ (8004134 <HAL_RNG_MspInit+0x3c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d10d      	bne.n	8004126 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	4b0a      	ldr	r3, [pc, #40]	@ (8004138 <HAL_RNG_MspInit+0x40>)
 8004110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004112:	4a09      	ldr	r2, [pc, #36]	@ (8004138 <HAL_RNG_MspInit+0x40>)
 8004114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004118:	6353      	str	r3, [r2, #52]	@ 0x34
 800411a:	4b07      	ldr	r3, [pc, #28]	@ (8004138 <HAL_RNG_MspInit+0x40>)
 800411c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800411e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8004126:	bf00      	nop
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	50060800 	.word	0x50060800
 8004138:	40023800 	.word	0x40023800

0800413c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08a      	sub	sp, #40	@ 0x28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004144:	f107 0314 	add.w	r3, r7, #20
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	609a      	str	r2, [r3, #8]
 8004150:	60da      	str	r2, [r3, #12]
 8004152:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a19      	ldr	r2, [pc, #100]	@ (80041c0 <HAL_SPI_MspInit+0x84>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d12c      	bne.n	80041b8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800415e:	2300      	movs	r3, #0
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	4b18      	ldr	r3, [pc, #96]	@ (80041c4 <HAL_SPI_MspInit+0x88>)
 8004164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004166:	4a17      	ldr	r2, [pc, #92]	@ (80041c4 <HAL_SPI_MspInit+0x88>)
 8004168:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800416c:	6453      	str	r3, [r2, #68]	@ 0x44
 800416e:	4b15      	ldr	r3, [pc, #84]	@ (80041c4 <HAL_SPI_MspInit+0x88>)
 8004170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004172:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	4b11      	ldr	r3, [pc, #68]	@ (80041c4 <HAL_SPI_MspInit+0x88>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004182:	4a10      	ldr	r2, [pc, #64]	@ (80041c4 <HAL_SPI_MspInit+0x88>)
 8004184:	f043 0320 	orr.w	r3, r3, #32
 8004188:	6313      	str	r3, [r2, #48]	@ 0x30
 800418a:	4b0e      	ldr	r3, [pc, #56]	@ (80041c4 <HAL_SPI_MspInit+0x88>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418e:	f003 0320 	and.w	r3, r3, #32
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8004196:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800419a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800419c:	2302      	movs	r3, #2
 800419e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041a4:	2300      	movs	r3, #0
 80041a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80041a8:	2305      	movs	r3, #5
 80041aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80041ac:	f107 0314 	add.w	r3, r7, #20
 80041b0:	4619      	mov	r1, r3
 80041b2:	4805      	ldr	r0, [pc, #20]	@ (80041c8 <HAL_SPI_MspInit+0x8c>)
 80041b4:	f000 fe3e 	bl	8004e34 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80041b8:	bf00      	nop
 80041ba:	3728      	adds	r7, #40	@ 0x28
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40015000 	.word	0x40015000
 80041c4:	40023800 	.word	0x40023800
 80041c8:	40021400 	.word	0x40021400

080041cc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a08      	ldr	r2, [pc, #32]	@ (80041fc <HAL_SPI_MspDeInit+0x30>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d10a      	bne.n	80041f4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80041de:	4b08      	ldr	r3, [pc, #32]	@ (8004200 <HAL_SPI_MspDeInit+0x34>)
 80041e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e2:	4a07      	ldr	r2, [pc, #28]	@ (8004200 <HAL_SPI_MspDeInit+0x34>)
 80041e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80041e8:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80041ea:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80041ee:	4805      	ldr	r0, [pc, #20]	@ (8004204 <HAL_SPI_MspDeInit+0x38>)
 80041f0:	f000 ffcc 	bl	800518c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40015000 	.word	0x40015000
 8004200:	40023800 	.word	0x40023800
 8004204:	40021400 	.word	0x40021400

08004208 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a0b      	ldr	r2, [pc, #44]	@ (8004244 <HAL_TIM_Base_MspInit+0x3c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d10d      	bne.n	8004236 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	4b0a      	ldr	r3, [pc, #40]	@ (8004248 <HAL_TIM_Base_MspInit+0x40>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004222:	4a09      	ldr	r2, [pc, #36]	@ (8004248 <HAL_TIM_Base_MspInit+0x40>)
 8004224:	f043 0320 	orr.w	r3, r3, #32
 8004228:	6413      	str	r3, [r2, #64]	@ 0x40
 800422a:	4b07      	ldr	r3, [pc, #28]	@ (8004248 <HAL_TIM_Base_MspInit+0x40>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8004236:	bf00      	nop
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40001400 	.word	0x40001400
 8004248:	40023800 	.word	0x40023800

0800424c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004250:	bf00      	nop
 8004252:	e7fd      	b.n	8004250 <NMI_Handler+0x4>

08004254 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004258:	bf00      	nop
 800425a:	e7fd      	b.n	8004258 <HardFault_Handler+0x4>

0800425c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004260:	bf00      	nop
 8004262:	e7fd      	b.n	8004260 <MemManage_Handler+0x4>

08004264 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004268:	bf00      	nop
 800426a:	e7fd      	b.n	8004268 <BusFault_Handler+0x4>

0800426c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004270:	bf00      	nop
 8004272:	e7fd      	b.n	8004270 <UsageFault_Handler+0x4>

08004274 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004278:	bf00      	nop
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004282:	b480      	push	{r7}
 8004284:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004286:	bf00      	nop
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004294:	bf00      	nop
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042a2:	f000 fbfb 	bl	8004a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	db0b      	blt.n	80042d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042be:	79fb      	ldrb	r3, [r7, #7]
 80042c0:	f003 021f 	and.w	r2, r3, #31
 80042c4:	4907      	ldr	r1, [pc, #28]	@ (80042e4 <__NVIC_EnableIRQ+0x38>)
 80042c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	2001      	movs	r0, #1
 80042ce:	fa00 f202 	lsl.w	r2, r0, r2
 80042d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	e000e100 	.word	0xe000e100

080042e8 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80042ee:	f000 f9cd 	bl	800468c <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80042f2:	f000 f98d 	bl	8004610 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80042f6:	2202      	movs	r2, #2
 80042f8:	2103      	movs	r1, #3
 80042fa:	2082      	movs	r0, #130	@ 0x82
 80042fc:	f000 fa1a 	bl	8004734 <I2C3_Write>
    HAL_Delay(5);
 8004300:	2005      	movs	r0, #5
 8004302:	f000 fbeb 	bl	8004adc <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8004306:	2200      	movs	r2, #0
 8004308:	2103      	movs	r1, #3
 800430a:	2082      	movs	r0, #130	@ 0x82
 800430c:	f000 fa12 	bl	8004734 <I2C3_Write>
    HAL_Delay(2);
 8004310:	2002      	movs	r0, #2
 8004312:	f000 fbe3 	bl	8004adc <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8004316:	1cba      	adds	r2, r7, #2
 8004318:	2302      	movs	r3, #2
 800431a:	2100      	movs	r1, #0
 800431c:	2082      	movs	r0, #130	@ 0x82
 800431e:	f000 fa55 	bl	80047cc <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8004322:	887b      	ldrh	r3, [r7, #2]
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8004328:	887b      	ldrh	r3, [r7, #2]
 800432a:	0a1b      	lsrs	r3, r3, #8
 800432c:	b29a      	uxth	r2, r3
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	4313      	orrs	r3, r2
 8004332:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8004334:	88fb      	ldrh	r3, [r7, #6]
 8004336:	f640 0211 	movw	r2, #2065	@ 0x811
 800433a:	4293      	cmp	r3, r2
 800433c:	d001      	beq.n	8004342 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 800433e:	2303      	movs	r3, #3
 8004340:	e095      	b.n	800446e <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8004342:	2202      	movs	r2, #2
 8004344:	2103      	movs	r1, #3
 8004346:	2082      	movs	r0, #130	@ 0x82
 8004348:	f000 f9f4 	bl	8004734 <I2C3_Write>
    HAL_Delay(5);
 800434c:	2005      	movs	r0, #5
 800434e:	f000 fbc5 	bl	8004adc <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8004352:	2200      	movs	r2, #0
 8004354:	2103      	movs	r1, #3
 8004356:	2082      	movs	r0, #130	@ 0x82
 8004358:	f000 f9ec 	bl	8004734 <I2C3_Write>
    HAL_Delay(2);
 800435c:	2002      	movs	r0, #2
 800435e:	f000 fbbd 	bl	8004adc <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8004362:	2004      	movs	r0, #4
 8004364:	f000 f887 	bl	8004476 <STMPE811_Read>
 8004368:	4603      	mov	r3, r0
 800436a:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 800436c:	797b      	ldrb	r3, [r7, #5]
 800436e:	f023 0301 	bic.w	r3, r3, #1
 8004372:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8004374:	797b      	ldrb	r3, [r7, #5]
 8004376:	461a      	mov	r2, r3
 8004378:	2104      	movs	r1, #4
 800437a:	2082      	movs	r0, #130	@ 0x82
 800437c:	f000 f9da 	bl	8004734 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8004380:	2004      	movs	r0, #4
 8004382:	f000 f878 	bl	8004476 <STMPE811_Read>
 8004386:	4603      	mov	r3, r0
 8004388:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 800438a:	797b      	ldrb	r3, [r7, #5]
 800438c:	f023 0302 	bic.w	r3, r3, #2
 8004390:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8004392:	797b      	ldrb	r3, [r7, #5]
 8004394:	461a      	mov	r2, r3
 8004396:	2104      	movs	r1, #4
 8004398:	2082      	movs	r0, #130	@ 0x82
 800439a:	f000 f9cb 	bl	8004734 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 800439e:	2249      	movs	r2, #73	@ 0x49
 80043a0:	2120      	movs	r1, #32
 80043a2:	2082      	movs	r0, #130	@ 0x82
 80043a4:	f000 f9c6 	bl	8004734 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80043a8:	2002      	movs	r0, #2
 80043aa:	f000 fb97 	bl	8004adc <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80043ae:	2201      	movs	r2, #1
 80043b0:	2121      	movs	r1, #33	@ 0x21
 80043b2:	2082      	movs	r0, #130	@ 0x82
 80043b4:	f000 f9be 	bl	8004734 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80043b8:	2017      	movs	r0, #23
 80043ba:	f000 f85c 	bl	8004476 <STMPE811_Read>
 80043be:	4603      	mov	r3, r0
 80043c0:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80043c2:	797b      	ldrb	r3, [r7, #5]
 80043c4:	f043 031e 	orr.w	r3, r3, #30
 80043c8:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80043ca:	797b      	ldrb	r3, [r7, #5]
 80043cc:	461a      	mov	r2, r3
 80043ce:	2117      	movs	r1, #23
 80043d0:	2082      	movs	r0, #130	@ 0x82
 80043d2:	f000 f9af 	bl	8004734 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80043d6:	229a      	movs	r2, #154	@ 0x9a
 80043d8:	2141      	movs	r1, #65	@ 0x41
 80043da:	2082      	movs	r0, #130	@ 0x82
 80043dc:	f000 f9aa 	bl	8004734 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80043e0:	2201      	movs	r2, #1
 80043e2:	214a      	movs	r1, #74	@ 0x4a
 80043e4:	2082      	movs	r0, #130	@ 0x82
 80043e6:	f000 f9a5 	bl	8004734 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80043ea:	2201      	movs	r2, #1
 80043ec:	214b      	movs	r1, #75	@ 0x4b
 80043ee:	2082      	movs	r0, #130	@ 0x82
 80043f0:	f000 f9a0 	bl	8004734 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80043f4:	2200      	movs	r2, #0
 80043f6:	214b      	movs	r1, #75	@ 0x4b
 80043f8:	2082      	movs	r0, #130	@ 0x82
 80043fa:	f000 f99b 	bl	8004734 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80043fe:	2201      	movs	r2, #1
 8004400:	2156      	movs	r1, #86	@ 0x56
 8004402:	2082      	movs	r0, #130	@ 0x82
 8004404:	f000 f996 	bl	8004734 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8004408:	2201      	movs	r2, #1
 800440a:	2158      	movs	r1, #88	@ 0x58
 800440c:	2082      	movs	r0, #130	@ 0x82
 800440e:	f000 f991 	bl	8004734 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8004412:	2203      	movs	r2, #3
 8004414:	2140      	movs	r1, #64	@ 0x40
 8004416:	2082      	movs	r0, #130	@ 0x82
 8004418:	f000 f98c 	bl	8004734 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 800441c:	22ff      	movs	r2, #255	@ 0xff
 800441e:	210b      	movs	r1, #11
 8004420:	2082      	movs	r0, #130	@ 0x82
 8004422:	f000 f987 	bl	8004734 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8004426:	f000 f8c1 	bl	80045ac <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 800442a:	2009      	movs	r0, #9
 800442c:	f000 f823 	bl	8004476 <STMPE811_Read>
 8004430:	4603      	mov	r3, r0
 8004432:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8004434:	797b      	ldrb	r3, [r7, #5]
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 800443c:	797b      	ldrb	r3, [r7, #5]
 800443e:	461a      	mov	r2, r3
 8004440:	2109      	movs	r1, #9
 8004442:	2082      	movs	r0, #130	@ 0x82
 8004444:	f000 f976 	bl	8004734 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8004448:	200a      	movs	r0, #10
 800444a:	f000 f814 	bl	8004476 <STMPE811_Read>
 800444e:	4603      	mov	r3, r0
 8004450:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8004452:	797b      	ldrb	r3, [r7, #5]
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 800445a:	797b      	ldrb	r3, [r7, #5]
 800445c:	461a      	mov	r2, r3
 800445e:	210a      	movs	r1, #10
 8004460:	2082      	movs	r0, #130	@ 0x82
 8004462:	f000 f967 	bl	8004734 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8004466:	20c8      	movs	r0, #200	@ 0xc8
 8004468:	f000 fb38 	bl	8004adc <HAL_Delay>

    return STMPE811_State_Ok;
 800446c:	2302      	movs	r3, #2

}
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b084      	sub	sp, #16
 800447a:	af00      	add	r7, sp, #0
 800447c:	4603      	mov	r3, r0
 800447e:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8004480:	f107 020f 	add.w	r2, r7, #15
 8004484:	79fb      	ldrb	r3, [r7, #7]
 8004486:	4619      	mov	r1, r3
 8004488:	2082      	movs	r0, #130	@ 0x82
 800448a:	f000 f97b 	bl	8004784 <I2C3_Read>

    return readData;
 800448e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	460a      	mov	r2, r1
 80044a2:	71fb      	strb	r3, [r7, #7]
 80044a4:	4613      	mov	r3, r2
 80044a6:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 80044a8:	79ba      	ldrb	r2, [r7, #6]
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	4619      	mov	r1, r3
 80044ae:	2082      	movs	r0, #130	@ 0x82
 80044b0:	f000 f940 	bl	8004734 <I2C3_Write>
}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	799b      	ldrb	r3, [r3, #6]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d117      	bne.n	80044fc <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 f99d 	bl	8004810 <TM_STMPE811_ReadX>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80044dc:	b29a      	uxth	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	885b      	ldrh	r3, [r3, #2]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f9f0 	bl	80048cc <TM_STMPE811_ReadY>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80044f2:	3301      	adds	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	805a      	strh	r2, [r3, #2]
 80044fa:	e048      	b.n	800458e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	799b      	ldrb	r3, [r3, #6]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d112      	bne.n	800452a <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f000 f981 	bl	8004810 <TM_STMPE811_ReadX>
 800450e:	4603      	mov	r3, r0
 8004510:	461a      	mov	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	885b      	ldrh	r3, [r3, #2]
 800451a:	4618      	mov	r0, r3
 800451c:	f000 f9d6 	bl	80048cc <TM_STMPE811_ReadY>
 8004520:	4603      	mov	r3, r0
 8004522:	461a      	mov	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	805a      	strh	r2, [r3, #2]
 8004528:	e031      	b.n	800458e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	799b      	ldrb	r3, [r3, #6]
 800452e:	2b02      	cmp	r3, #2
 8004530:	d115      	bne.n	800455e <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	885b      	ldrh	r3, [r3, #2]
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f96a 	bl	8004810 <TM_STMPE811_ReadX>
 800453c:	4603      	mov	r3, r0
 800453e:	461a      	mov	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	4618      	mov	r0, r3
 800454a:	f000 f9bf 	bl	80048cc <TM_STMPE811_ReadY>
 800454e:	4603      	mov	r3, r0
 8004550:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8004554:	3301      	adds	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	801a      	strh	r2, [r3, #0]
 800455c:	e017      	b.n	800458e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	799b      	ldrb	r3, [r3, #6]
 8004562:	2b03      	cmp	r3, #3
 8004564:	d113      	bne.n	800458e <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f000 f950 	bl	8004810 <TM_STMPE811_ReadX>
 8004570:	4603      	mov	r3, r0
 8004572:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8004576:	b29a      	uxth	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 f9a3 	bl	80048cc <TM_STMPE811_ReadY>
 8004586:	4603      	mov	r3, r0
 8004588:	461a      	mov	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800458e:	2201      	movs	r2, #1
 8004590:	214b      	movs	r1, #75	@ 0x4b
 8004592:	2082      	movs	r0, #130	@ 0x82
 8004594:	f000 f8ce 	bl	8004734 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8004598:	2200      	movs	r2, #0
 800459a:	214b      	movs	r1, #75	@ 0x4b
 800459c:	2082      	movs	r0, #130	@ 0x82
 800459e:	f000 f8c9 	bl	8004734 <I2C3_Write>
}
 80045a2:	bf00      	nop
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	603b      	str	r3, [r7, #0]
 80045b6:	4b14      	ldr	r3, [pc, #80]	@ (8004608 <enableInterruptSupportForTouch+0x5c>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ba:	4a13      	ldr	r2, [pc, #76]	@ (8004608 <enableInterruptSupportForTouch+0x5c>)
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80045c2:	4b11      	ldr	r3, [pc, #68]	@ (8004608 <enableInterruptSupportForTouch+0x5c>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	603b      	str	r3, [r7, #0]
 80045cc:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ce:	1d3b      	adds	r3, r7, #4
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	605a      	str	r2, [r3, #4]
 80045d6:	609a      	str	r2, [r3, #8]
 80045d8:	60da      	str	r2, [r3, #12]
 80045da:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80045dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045e0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80045e2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80045e6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045ec:	2302      	movs	r3, #2
 80045ee:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f0:	1d3b      	adds	r3, r7, #4
 80045f2:	4619      	mov	r1, r3
 80045f4:	4805      	ldr	r0, [pc, #20]	@ (800460c <enableInterruptSupportForTouch+0x60>)
 80045f6:	f000 fc1d 	bl	8004e34 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80045fa:	2028      	movs	r0, #40	@ 0x28
 80045fc:	f7ff fe56 	bl	80042ac <__NVIC_EnableIRQ>

}
 8004600:	bf00      	nop
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40023800 	.word	0x40023800
 800460c:	40020000 	.word	0x40020000

08004610 <I2C3_Init>:
        while(1);
    }
}

static void I2C3_Init()
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8004616:	2300      	movs	r3, #0
 8004618:	603b      	str	r3, [r7, #0]
 800461a:	4b18      	ldr	r3, [pc, #96]	@ (800467c <I2C3_Init+0x6c>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	4a17      	ldr	r2, [pc, #92]	@ (800467c <I2C3_Init+0x6c>)
 8004620:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004624:	6413      	str	r3, [r2, #64]	@ 0x40
 8004626:	4b15      	ldr	r3, [pc, #84]	@ (800467c <I2C3_Init+0x6c>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8004632:	4b13      	ldr	r3, [pc, #76]	@ (8004680 <I2C3_Init+0x70>)
 8004634:	4a13      	ldr	r2, [pc, #76]	@ (8004684 <I2C3_Init+0x74>)
 8004636:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8004638:	4b11      	ldr	r3, [pc, #68]	@ (8004680 <I2C3_Init+0x70>)
 800463a:	4a13      	ldr	r2, [pc, #76]	@ (8004688 <I2C3_Init+0x78>)
 800463c:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800463e:	4b10      	ldr	r3, [pc, #64]	@ (8004680 <I2C3_Init+0x70>)
 8004640:	2200      	movs	r2, #0
 8004642:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8004644:	4b0e      	ldr	r3, [pc, #56]	@ (8004680 <I2C3_Init+0x70>)
 8004646:	2200      	movs	r2, #0
 8004648:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800464a:	4b0d      	ldr	r3, [pc, #52]	@ (8004680 <I2C3_Init+0x70>)
 800464c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004650:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8004652:	4b0b      	ldr	r3, [pc, #44]	@ (8004680 <I2C3_Init+0x70>)
 8004654:	2200      	movs	r2, #0
 8004656:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004658:	4b09      	ldr	r3, [pc, #36]	@ (8004680 <I2C3_Init+0x70>)
 800465a:	2200      	movs	r2, #0
 800465c:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800465e:	4808      	ldr	r0, [pc, #32]	@ (8004680 <I2C3_Init+0x70>)
 8004660:	f000 feba 	bl	80053d8 <HAL_I2C_Init>
 8004664:	4603      	mov	r3, r0
 8004666:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800466e:	bf00      	nop
 8004670:	e7fd      	b.n	800466e <I2C3_Init+0x5e>
    }
    return;
 8004672:	bf00      	nop
}
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40023800 	.word	0x40023800
 8004680:	20025da8 	.word	0x20025da8
 8004684:	40005c00 	.word	0x40005c00
 8004688:	000186a0 	.word	0x000186a0

0800468c <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004692:	f107 030c 	add.w	r3, r7, #12
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	605a      	str	r2, [r3, #4]
 800469c:	609a      	str	r2, [r3, #8]
 800469e:	60da      	str	r2, [r3, #12]
 80046a0:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	4b20      	ldr	r3, [pc, #128]	@ (8004728 <I2C3_MspInit+0x9c>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004728 <I2C3_MspInit+0x9c>)
 80046ac:	f043 0304 	orr.w	r3, r3, #4
 80046b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80046b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004728 <I2C3_MspInit+0x9c>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	60bb      	str	r3, [r7, #8]
 80046bc:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046be:	2300      	movs	r3, #0
 80046c0:	607b      	str	r3, [r7, #4]
 80046c2:	4b19      	ldr	r3, [pc, #100]	@ (8004728 <I2C3_MspInit+0x9c>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c6:	4a18      	ldr	r2, [pc, #96]	@ (8004728 <I2C3_MspInit+0x9c>)
 80046c8:	f043 0301 	orr.w	r3, r3, #1
 80046cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80046ce:	4b16      	ldr	r3, [pc, #88]	@ (8004728 <I2C3_MspInit+0x9c>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	607b      	str	r3, [r7, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80046da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046e0:	2312      	movs	r3, #18
 80046e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e8:	2300      	movs	r3, #0
 80046ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80046ec:	2304      	movs	r3, #4
 80046ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80046f0:	f107 030c 	add.w	r3, r7, #12
 80046f4:	4619      	mov	r1, r3
 80046f6:	480d      	ldr	r0, [pc, #52]	@ (800472c <I2C3_MspInit+0xa0>)
 80046f8:	f000 fb9c 	bl	8004e34 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80046fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004700:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004702:	2312      	movs	r3, #18
 8004704:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800470a:	2300      	movs	r3, #0
 800470c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800470e:	2304      	movs	r3, #4
 8004710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8004712:	f107 030c 	add.w	r3, r7, #12
 8004716:	4619      	mov	r1, r3
 8004718:	4805      	ldr	r0, [pc, #20]	@ (8004730 <I2C3_MspInit+0xa4>)
 800471a:	f000 fb8b 	bl	8004e34 <HAL_GPIO_Init>
    
}
 800471e:	bf00      	nop
 8004720:	3720      	adds	r7, #32
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40023800 	.word	0x40023800
 800472c:	40020800 	.word	0x40020800
 8004730:	40020000 	.word	0x40020000

08004734 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af04      	add	r7, sp, #16
 800473a:	4603      	mov	r3, r0
 800473c:	80fb      	strh	r3, [r7, #6]
 800473e:	460b      	mov	r3, r1
 8004740:	717b      	strb	r3, [r7, #5]
 8004742:	4613      	mov	r3, r2
 8004744:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8004746:	793b      	ldrb	r3, [r7, #4]
 8004748:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800474a:	797b      	ldrb	r3, [r7, #5]
 800474c:	b29a      	uxth	r2, r3
 800474e:	88f9      	ldrh	r1, [r7, #6]
 8004750:	4b09      	ldr	r3, [pc, #36]	@ (8004778 <I2C3_Write+0x44>)
 8004752:	9302      	str	r3, [sp, #8]
 8004754:	2301      	movs	r3, #1
 8004756:	9301      	str	r3, [sp, #4]
 8004758:	f107 030f 	add.w	r3, r7, #15
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	2301      	movs	r3, #1
 8004760:	4806      	ldr	r0, [pc, #24]	@ (800477c <I2C3_Write+0x48>)
 8004762:	f000 ff7d 	bl	8005660 <HAL_I2C_Mem_Write>
 8004766:	4603      	mov	r3, r0
 8004768:	461a      	mov	r2, r3
 800476a:	4b05      	ldr	r3, [pc, #20]	@ (8004780 <I2C3_Write+0x4c>)
 800476c:	701a      	strb	r2, [r3, #0]
    //verifyHAL_I2C_IS_OKAY();
}
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	0003d090 	.word	0x0003d090
 800477c:	20025da8 	.word	0x20025da8
 8004780:	20025dfc 	.word	0x20025dfc

08004784 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af04      	add	r7, sp, #16
 800478a:	4603      	mov	r3, r0
 800478c:	603a      	str	r2, [r7, #0]
 800478e:	71fb      	strb	r3, [r7, #7]
 8004790:	460b      	mov	r3, r1
 8004792:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8004794:	79fb      	ldrb	r3, [r7, #7]
 8004796:	b299      	uxth	r1, r3
 8004798:	79bb      	ldrb	r3, [r7, #6]
 800479a:	b29a      	uxth	r2, r3
 800479c:	4b08      	ldr	r3, [pc, #32]	@ (80047c0 <I2C3_Read+0x3c>)
 800479e:	9302      	str	r3, [sp, #8]
 80047a0:	2301      	movs	r3, #1
 80047a2:	9301      	str	r3, [sp, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	2301      	movs	r3, #1
 80047aa:	4806      	ldr	r0, [pc, #24]	@ (80047c4 <I2C3_Read+0x40>)
 80047ac:	f001 f852 	bl	8005854 <HAL_I2C_Mem_Read>
 80047b0:	4603      	mov	r3, r0
 80047b2:	461a      	mov	r2, r3
 80047b4:	4b04      	ldr	r3, [pc, #16]	@ (80047c8 <I2C3_Read+0x44>)
 80047b6:	701a      	strb	r2, [r3, #0]
    //verifyHAL_I2C_IS_OKAY();
}
 80047b8:	bf00      	nop
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	0003d090 	.word	0x0003d090
 80047c4:	20025da8 	.word	0x20025da8
 80047c8:	20025dfc 	.word	0x20025dfc

080047cc <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af04      	add	r7, sp, #16
 80047d2:	603a      	str	r2, [r7, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	4603      	mov	r3, r0
 80047d8:	71fb      	strb	r3, [r7, #7]
 80047da:	460b      	mov	r3, r1
 80047dc:	71bb      	strb	r3, [r7, #6]
 80047de:	4613      	mov	r3, r2
 80047e0:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	b299      	uxth	r1, r3
 80047e6:	79bb      	ldrb	r3, [r7, #6]
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	4b07      	ldr	r3, [pc, #28]	@ (8004808 <I2C3_MulitByteRead+0x3c>)
 80047ec:	9302      	str	r3, [sp, #8]
 80047ee:	88bb      	ldrh	r3, [r7, #4]
 80047f0:	9301      	str	r3, [sp, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	2301      	movs	r3, #1
 80047f8:	4804      	ldr	r0, [pc, #16]	@ (800480c <I2C3_MulitByteRead+0x40>)
 80047fa:	f001 f82b 	bl	8005854 <HAL_I2C_Mem_Read>
}
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	0003d090 	.word	0x0003d090
 800480c:	20025da8 	.word	0x20025da8

08004810 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	4603      	mov	r3, r0
 8004818:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800481a:	204d      	movs	r0, #77	@ 0x4d
 800481c:	f7ff fe2b 	bl	8004476 <STMPE811_Read>
 8004820:	4603      	mov	r3, r0
 8004822:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8004824:	204e      	movs	r0, #78	@ 0x4e
 8004826:	f7ff fe26 	bl	8004476 <STMPE811_Read>
 800482a:	4603      	mov	r3, r0
 800482c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800482e:	7a7b      	ldrb	r3, [r7, #9]
 8004830:	021b      	lsls	r3, r3, #8
 8004832:	b21a      	sxth	r2, r3
 8004834:	7a3b      	ldrb	r3, [r7, #8]
 8004836:	b21b      	sxth	r3, r3
 8004838:	4313      	orrs	r3, r2
 800483a:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 800483c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004840:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004844:	4293      	cmp	r3, r2
 8004846:	dc06      	bgt.n	8004856 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8004848:	89fb      	ldrh	r3, [r7, #14]
 800484a:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800484e:	330c      	adds	r3, #12
 8004850:	b29b      	uxth	r3, r3
 8004852:	81fb      	strh	r3, [r7, #14]
 8004854:	e005      	b.n	8004862 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8004856:	89fb      	ldrh	r3, [r7, #14]
 8004858:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800485c:	3308      	adds	r3, #8
 800485e:	b29b      	uxth	r3, r3
 8004860:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8004862:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004866:	4a18      	ldr	r2, [pc, #96]	@ (80048c8 <TM_STMPE811_ReadX+0xb8>)
 8004868:	fb82 1203 	smull	r1, r2, r2, r3
 800486c:	441a      	add	r2, r3
 800486e:	10d2      	asrs	r2, r2, #3
 8004870:	17db      	asrs	r3, r3, #31
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8004876:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800487a:	2bef      	cmp	r3, #239	@ 0xef
 800487c:	dd02      	ble.n	8004884 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800487e:	23ef      	movs	r3, #239	@ 0xef
 8004880:	81fb      	strh	r3, [r7, #14]
 8004882:	e005      	b.n	8004890 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8004884:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004888:	2b00      	cmp	r3, #0
 800488a:	da01      	bge.n	8004890 <TM_STMPE811_ReadX+0x80>
        val = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8004890:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004894:	88fb      	ldrh	r3, [r7, #6]
 8004896:	429a      	cmp	r2, r3
 8004898:	dd05      	ble.n	80048a6 <TM_STMPE811_ReadX+0x96>
 800489a:	89fa      	ldrh	r2, [r7, #14]
 800489c:	88fb      	ldrh	r3, [r7, #6]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	b21b      	sxth	r3, r3
 80048a4:	e004      	b.n	80048b0 <TM_STMPE811_ReadX+0xa0>
 80048a6:	89fb      	ldrh	r3, [r7, #14]
 80048a8:	88fa      	ldrh	r2, [r7, #6]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	b21b      	sxth	r3, r3
 80048b0:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80048b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	dd01      	ble.n	80048be <TM_STMPE811_ReadX+0xae>
        return val;
 80048ba:	89fb      	ldrh	r3, [r7, #14]
 80048bc:	e000      	b.n	80048c0 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 80048be:	88fb      	ldrh	r3, [r7, #6]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	88888889 	.word	0x88888889

080048cc <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80048d6:	204f      	movs	r0, #79	@ 0x4f
 80048d8:	f7ff fdcd 	bl	8004476 <STMPE811_Read>
 80048dc:	4603      	mov	r3, r0
 80048de:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80048e0:	2050      	movs	r0, #80	@ 0x50
 80048e2:	f7ff fdc8 	bl	8004476 <STMPE811_Read>
 80048e6:	4603      	mov	r3, r0
 80048e8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80048ea:	7a7b      	ldrb	r3, [r7, #9]
 80048ec:	021b      	lsls	r3, r3, #8
 80048ee:	b21a      	sxth	r2, r3
 80048f0:	7a3b      	ldrb	r3, [r7, #8]
 80048f2:	b21b      	sxth	r3, r3
 80048f4:	4313      	orrs	r3, r2
 80048f6:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80048f8:	89fb      	ldrh	r3, [r7, #14]
 80048fa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80048fe:	b29b      	uxth	r3, r3
 8004900:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8004902:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004906:	4a19      	ldr	r2, [pc, #100]	@ (800496c <TM_STMPE811_ReadY+0xa0>)
 8004908:	fb82 1203 	smull	r1, r2, r2, r3
 800490c:	1052      	asrs	r2, r2, #1
 800490e:	17db      	asrs	r3, r3, #31
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8004914:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004918:	2b00      	cmp	r3, #0
 800491a:	dc02      	bgt.n	8004922 <TM_STMPE811_ReadY+0x56>
        val = 0;
 800491c:	2300      	movs	r3, #0
 800491e:	81fb      	strh	r3, [r7, #14]
 8004920:	e007      	b.n	8004932 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8004922:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004926:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800492a:	db02      	blt.n	8004932 <TM_STMPE811_ReadY+0x66>
        val = 319;
 800492c:	f240 133f 	movw	r3, #319	@ 0x13f
 8004930:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8004932:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	429a      	cmp	r2, r3
 800493a:	dd05      	ble.n	8004948 <TM_STMPE811_ReadY+0x7c>
 800493c:	89fa      	ldrh	r2, [r7, #14]
 800493e:	88fb      	ldrh	r3, [r7, #6]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	b29b      	uxth	r3, r3
 8004944:	b21b      	sxth	r3, r3
 8004946:	e004      	b.n	8004952 <TM_STMPE811_ReadY+0x86>
 8004948:	89fb      	ldrh	r3, [r7, #14]
 800494a:	88fa      	ldrh	r2, [r7, #6]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	b29b      	uxth	r3, r3
 8004950:	b21b      	sxth	r3, r3
 8004952:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8004954:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004958:	2b04      	cmp	r3, #4
 800495a:	dd01      	ble.n	8004960 <TM_STMPE811_ReadY+0x94>
        return val;
 800495c:	89fb      	ldrh	r3, [r7, #14]
 800495e:	e000      	b.n	8004962 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8004960:	88fb      	ldrh	r3, [r7, #6]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	2e8ba2e9 	.word	0x2e8ba2e9

08004970 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
}
 8004974:	bf00      	nop
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
	...

08004980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004984:	4b06      	ldr	r3, [pc, #24]	@ (80049a0 <SystemInit+0x20>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498a:	4a05      	ldr	r2, [pc, #20]	@ (80049a0 <SystemInit+0x20>)
 800498c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004990:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	e000ed00 	.word	0xe000ed00

080049a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80049a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80049dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80049a8:	f7ff ffea 	bl	8004980 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049ac:	480c      	ldr	r0, [pc, #48]	@ (80049e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80049ae:	490d      	ldr	r1, [pc, #52]	@ (80049e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80049b0:	4a0d      	ldr	r2, [pc, #52]	@ (80049e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80049b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049b4:	e002      	b.n	80049bc <LoopCopyDataInit>

080049b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049ba:	3304      	adds	r3, #4

080049bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049c0:	d3f9      	bcc.n	80049b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049c2:	4a0a      	ldr	r2, [pc, #40]	@ (80049ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80049c4:	4c0a      	ldr	r4, [pc, #40]	@ (80049f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80049c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049c8:	e001      	b.n	80049ce <LoopFillZerobss>

080049ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049cc:	3204      	adds	r2, #4

080049ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049d0:	d3fb      	bcc.n	80049ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80049d2:	f003 fbdb 	bl	800818c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049d6:	f7fe fe94 	bl	8003702 <main>
  bx  lr    
 80049da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80049dc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80049e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049e4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80049e8:	08009dec 	.word	0x08009dec
  ldr r2, =_sbss
 80049ec:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80049f0:	20025e04 	.word	0x20025e04

080049f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049f4:	e7fe      	b.n	80049f4 <ADC_IRQHandler>
	...

080049f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004a38 <HAL_Init+0x40>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a0d      	ldr	r2, [pc, #52]	@ (8004a38 <HAL_Init+0x40>)
 8004a02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a08:	4b0b      	ldr	r3, [pc, #44]	@ (8004a38 <HAL_Init+0x40>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8004a38 <HAL_Init+0x40>)
 8004a0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a14:	4b08      	ldr	r3, [pc, #32]	@ (8004a38 <HAL_Init+0x40>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a07      	ldr	r2, [pc, #28]	@ (8004a38 <HAL_Init+0x40>)
 8004a1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a20:	2003      	movs	r0, #3
 8004a22:	f000 f991 	bl	8004d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a26:	2000      	movs	r0, #0
 8004a28:	f000 f808 	bl	8004a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a2c:	f7ff f9aa 	bl	8003d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40023c00 	.word	0x40023c00

08004a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a44:	4b12      	ldr	r3, [pc, #72]	@ (8004a90 <HAL_InitTick+0x54>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	4b12      	ldr	r3, [pc, #72]	@ (8004a94 <HAL_InitTick+0x58>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 f9b7 	bl	8004dce <HAL_SYSTICK_Config>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e00e      	b.n	8004a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b0f      	cmp	r3, #15
 8004a6e:	d80a      	bhi.n	8004a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a70:	2200      	movs	r2, #0
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	f04f 30ff 	mov.w	r0, #4294967295
 8004a78:	f000 f971 	bl	8004d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a7c:	4a06      	ldr	r2, [pc, #24]	@ (8004a98 <HAL_InitTick+0x5c>)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	e000      	b.n	8004a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20000018 	.word	0x20000018
 8004a94:	20000020 	.word	0x20000020
 8004a98:	2000001c 	.word	0x2000001c

08004a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004aa0:	4b06      	ldr	r3, [pc, #24]	@ (8004abc <HAL_IncTick+0x20>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4b06      	ldr	r3, [pc, #24]	@ (8004ac0 <HAL_IncTick+0x24>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4413      	add	r3, r2
 8004aac:	4a04      	ldr	r2, [pc, #16]	@ (8004ac0 <HAL_IncTick+0x24>)
 8004aae:	6013      	str	r3, [r2, #0]
}
 8004ab0:	bf00      	nop
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20000020 	.word	0x20000020
 8004ac0:	20025e00 	.word	0x20025e00

08004ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ac8:	4b03      	ldr	r3, [pc, #12]	@ (8004ad8 <HAL_GetTick+0x14>)
 8004aca:	681b      	ldr	r3, [r3, #0]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20025e00 	.word	0x20025e00

08004adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ae4:	f7ff ffee 	bl	8004ac4 <HAL_GetTick>
 8004ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af4:	d005      	beq.n	8004b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004af6:	4b0a      	ldr	r3, [pc, #40]	@ (8004b20 <HAL_Delay+0x44>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b02:	bf00      	nop
 8004b04:	f7ff ffde 	bl	8004ac4 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d8f7      	bhi.n	8004b04 <HAL_Delay+0x28>
  {
  }
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000020 	.word	0x20000020

08004b24 <__NVIC_SetPriorityGrouping>:
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b34:	4b0c      	ldr	r3, [pc, #48]	@ (8004b68 <__NVIC_SetPriorityGrouping+0x44>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b40:	4013      	ands	r3, r2
 8004b42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b56:	4a04      	ldr	r2, [pc, #16]	@ (8004b68 <__NVIC_SetPriorityGrouping+0x44>)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	60d3      	str	r3, [r2, #12]
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	e000ed00 	.word	0xe000ed00

08004b6c <__NVIC_GetPriorityGrouping>:
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b70:	4b04      	ldr	r3, [pc, #16]	@ (8004b84 <__NVIC_GetPriorityGrouping+0x18>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	0a1b      	lsrs	r3, r3, #8
 8004b76:	f003 0307 	and.w	r3, r3, #7
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	e000ed00 	.word	0xe000ed00

08004b88 <__NVIC_EnableIRQ>:
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	db0b      	blt.n	8004bb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	f003 021f 	and.w	r2, r3, #31
 8004ba0:	4907      	ldr	r1, [pc, #28]	@ (8004bc0 <__NVIC_EnableIRQ+0x38>)
 8004ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	2001      	movs	r0, #1
 8004baa:	fa00 f202 	lsl.w	r2, r0, r2
 8004bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	e000e100 	.word	0xe000e100

08004bc4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	db12      	blt.n	8004bfc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	f003 021f 	and.w	r2, r3, #31
 8004bdc:	490a      	ldr	r1, [pc, #40]	@ (8004c08 <__NVIC_DisableIRQ+0x44>)
 8004bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be2:	095b      	lsrs	r3, r3, #5
 8004be4:	2001      	movs	r0, #1
 8004be6:	fa00 f202 	lsl.w	r2, r0, r2
 8004bea:	3320      	adds	r3, #32
 8004bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004bf0:	f3bf 8f4f 	dsb	sy
}
 8004bf4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004bf6:	f3bf 8f6f 	isb	sy
}
 8004bfa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	e000e100 	.word	0xe000e100

08004c0c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	4603      	mov	r3, r0
 8004c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	db0c      	blt.n	8004c38 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c1e:	79fb      	ldrb	r3, [r7, #7]
 8004c20:	f003 021f 	and.w	r2, r3, #31
 8004c24:	4907      	ldr	r1, [pc, #28]	@ (8004c44 <__NVIC_ClearPendingIRQ+0x38>)
 8004c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	2001      	movs	r0, #1
 8004c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c32:	3360      	adds	r3, #96	@ 0x60
 8004c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	e000e100 	.word	0xe000e100

08004c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	4603      	mov	r3, r0
 8004c50:	6039      	str	r1, [r7, #0]
 8004c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	db0a      	blt.n	8004c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	490c      	ldr	r1, [pc, #48]	@ (8004c94 <__NVIC_SetPriority+0x4c>)
 8004c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c66:	0112      	lsls	r2, r2, #4
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c70:	e00a      	b.n	8004c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	4908      	ldr	r1, [pc, #32]	@ (8004c98 <__NVIC_SetPriority+0x50>)
 8004c78:	79fb      	ldrb	r3, [r7, #7]
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	3b04      	subs	r3, #4
 8004c80:	0112      	lsls	r2, r2, #4
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	440b      	add	r3, r1
 8004c86:	761a      	strb	r2, [r3, #24]
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	e000e100 	.word	0xe000e100
 8004c98:	e000ed00 	.word	0xe000ed00

08004c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b089      	sub	sp, #36	@ 0x24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	f1c3 0307 	rsb	r3, r3, #7
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	bf28      	it	cs
 8004cba:	2304      	movcs	r3, #4
 8004cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	2b06      	cmp	r3, #6
 8004cc4:	d902      	bls.n	8004ccc <NVIC_EncodePriority+0x30>
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	3b03      	subs	r3, #3
 8004cca:	e000      	b.n	8004cce <NVIC_EncodePriority+0x32>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	43da      	mvns	r2, r3
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	401a      	ands	r2, r3
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	fa01 f303 	lsl.w	r3, r1, r3
 8004cee:	43d9      	mvns	r1, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf4:	4313      	orrs	r3, r2
         );
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3724      	adds	r7, #36	@ 0x24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
	...

08004d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d14:	d301      	bcc.n	8004d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d16:	2301      	movs	r3, #1
 8004d18:	e00f      	b.n	8004d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d44 <SysTick_Config+0x40>)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d22:	210f      	movs	r1, #15
 8004d24:	f04f 30ff 	mov.w	r0, #4294967295
 8004d28:	f7ff ff8e 	bl	8004c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d2c:	4b05      	ldr	r3, [pc, #20]	@ (8004d44 <SysTick_Config+0x40>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d32:	4b04      	ldr	r3, [pc, #16]	@ (8004d44 <SysTick_Config+0x40>)
 8004d34:	2207      	movs	r2, #7
 8004d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	e000e010 	.word	0xe000e010

08004d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff fee7 	bl	8004b24 <__NVIC_SetPriorityGrouping>
}
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b086      	sub	sp, #24
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	4603      	mov	r3, r0
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d70:	f7ff fefc 	bl	8004b6c <__NVIC_GetPriorityGrouping>
 8004d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	6978      	ldr	r0, [r7, #20]
 8004d7c:	f7ff ff8e 	bl	8004c9c <NVIC_EncodePriority>
 8004d80:	4602      	mov	r2, r0
 8004d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d86:	4611      	mov	r1, r2
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff ff5d 	bl	8004c48 <__NVIC_SetPriority>
}
 8004d8e:	bf00      	nop
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b082      	sub	sp, #8
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff feef 	bl	8004b88 <__NVIC_EnableIRQ>
}
 8004daa:	bf00      	nop
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	4603      	mov	r3, r0
 8004dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff feff 	bl	8004bc4 <__NVIC_DisableIRQ>
}
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b082      	sub	sp, #8
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7ff ff94 	bl	8004d04 <SysTick_Config>
 8004ddc:	4603      	mov	r3, r0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b082      	sub	sp, #8
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	4603      	mov	r3, r0
 8004dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff ff09 	bl	8004c0c <__NVIC_ClearPendingIRQ>
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 031f 	and.w	r3, r3, #31
 8004e16:	2201      	movs	r2, #1
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8004e1e:	4a04      	ldr	r2, [pc, #16]	@ (8004e30 <HAL_EXTI_ClearPending+0x2c>)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6153      	str	r3, [r2, #20]
}
 8004e24:	bf00      	nop
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	40013c00 	.word	0x40013c00

08004e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b089      	sub	sp, #36	@ 0x24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61fb      	str	r3, [r7, #28]
 8004e4e:	e177      	b.n	8005140 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e50:	2201      	movs	r2, #1
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	fa02 f303 	lsl.w	r3, r2, r3
 8004e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4013      	ands	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	f040 8166 	bne.w	800513a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d005      	beq.n	8004e86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d130      	bne.n	8004ee8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	2203      	movs	r2, #3
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	43db      	mvns	r3, r3
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	f003 0201 	and.w	r2, r3, #1
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d017      	beq.n	8004f24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	2203      	movs	r2, #3
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	43db      	mvns	r3, r3
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	fa02 f303 	lsl.w	r3, r2, r3
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f003 0303 	and.w	r3, r3, #3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d123      	bne.n	8004f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	08da      	lsrs	r2, r3, #3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3208      	adds	r2, #8
 8004f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	220f      	movs	r2, #15
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	4013      	ands	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	fa02 f303 	lsl.w	r3, r2, r3
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	08da      	lsrs	r2, r3, #3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3208      	adds	r2, #8
 8004f72:	69b9      	ldr	r1, [r7, #24]
 8004f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	2203      	movs	r2, #3
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f003 0203 	and.w	r2, r3, #3
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 80c0 	beq.w	800513a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	4b66      	ldr	r3, [pc, #408]	@ (8005158 <HAL_GPIO_Init+0x324>)
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc2:	4a65      	ldr	r2, [pc, #404]	@ (8005158 <HAL_GPIO_Init+0x324>)
 8004fc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004fca:	4b63      	ldr	r3, [pc, #396]	@ (8005158 <HAL_GPIO_Init+0x324>)
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fd6:	4a61      	ldr	r2, [pc, #388]	@ (800515c <HAL_GPIO_Init+0x328>)
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	089b      	lsrs	r3, r3, #2
 8004fdc:	3302      	adds	r3, #2
 8004fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	220f      	movs	r2, #15
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a58      	ldr	r2, [pc, #352]	@ (8005160 <HAL_GPIO_Init+0x32c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d037      	beq.n	8005072 <HAL_GPIO_Init+0x23e>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a57      	ldr	r2, [pc, #348]	@ (8005164 <HAL_GPIO_Init+0x330>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d031      	beq.n	800506e <HAL_GPIO_Init+0x23a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a56      	ldr	r2, [pc, #344]	@ (8005168 <HAL_GPIO_Init+0x334>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d02b      	beq.n	800506a <HAL_GPIO_Init+0x236>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a55      	ldr	r2, [pc, #340]	@ (800516c <HAL_GPIO_Init+0x338>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d025      	beq.n	8005066 <HAL_GPIO_Init+0x232>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a54      	ldr	r2, [pc, #336]	@ (8005170 <HAL_GPIO_Init+0x33c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d01f      	beq.n	8005062 <HAL_GPIO_Init+0x22e>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a53      	ldr	r2, [pc, #332]	@ (8005174 <HAL_GPIO_Init+0x340>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d019      	beq.n	800505e <HAL_GPIO_Init+0x22a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a52      	ldr	r2, [pc, #328]	@ (8005178 <HAL_GPIO_Init+0x344>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <HAL_GPIO_Init+0x226>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a51      	ldr	r2, [pc, #324]	@ (800517c <HAL_GPIO_Init+0x348>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00d      	beq.n	8005056 <HAL_GPIO_Init+0x222>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a50      	ldr	r2, [pc, #320]	@ (8005180 <HAL_GPIO_Init+0x34c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d007      	beq.n	8005052 <HAL_GPIO_Init+0x21e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a4f      	ldr	r2, [pc, #316]	@ (8005184 <HAL_GPIO_Init+0x350>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d101      	bne.n	800504e <HAL_GPIO_Init+0x21a>
 800504a:	2309      	movs	r3, #9
 800504c:	e012      	b.n	8005074 <HAL_GPIO_Init+0x240>
 800504e:	230a      	movs	r3, #10
 8005050:	e010      	b.n	8005074 <HAL_GPIO_Init+0x240>
 8005052:	2308      	movs	r3, #8
 8005054:	e00e      	b.n	8005074 <HAL_GPIO_Init+0x240>
 8005056:	2307      	movs	r3, #7
 8005058:	e00c      	b.n	8005074 <HAL_GPIO_Init+0x240>
 800505a:	2306      	movs	r3, #6
 800505c:	e00a      	b.n	8005074 <HAL_GPIO_Init+0x240>
 800505e:	2305      	movs	r3, #5
 8005060:	e008      	b.n	8005074 <HAL_GPIO_Init+0x240>
 8005062:	2304      	movs	r3, #4
 8005064:	e006      	b.n	8005074 <HAL_GPIO_Init+0x240>
 8005066:	2303      	movs	r3, #3
 8005068:	e004      	b.n	8005074 <HAL_GPIO_Init+0x240>
 800506a:	2302      	movs	r3, #2
 800506c:	e002      	b.n	8005074 <HAL_GPIO_Init+0x240>
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <HAL_GPIO_Init+0x240>
 8005072:	2300      	movs	r3, #0
 8005074:	69fa      	ldr	r2, [r7, #28]
 8005076:	f002 0203 	and.w	r2, r2, #3
 800507a:	0092      	lsls	r2, r2, #2
 800507c:	4093      	lsls	r3, r2
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	4313      	orrs	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005084:	4935      	ldr	r1, [pc, #212]	@ (800515c <HAL_GPIO_Init+0x328>)
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	089b      	lsrs	r3, r3, #2
 800508a:	3302      	adds	r3, #2
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005092:	4b3d      	ldr	r3, [pc, #244]	@ (8005188 <HAL_GPIO_Init+0x354>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	43db      	mvns	r3, r3
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	4013      	ands	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050b6:	4a34      	ldr	r2, [pc, #208]	@ (8005188 <HAL_GPIO_Init+0x354>)
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050bc:	4b32      	ldr	r3, [pc, #200]	@ (8005188 <HAL_GPIO_Init+0x354>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	43db      	mvns	r3, r3
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	4013      	ands	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	4313      	orrs	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050e0:	4a29      	ldr	r2, [pc, #164]	@ (8005188 <HAL_GPIO_Init+0x354>)
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80050e6:	4b28      	ldr	r3, [pc, #160]	@ (8005188 <HAL_GPIO_Init+0x354>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	43db      	mvns	r3, r3
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	4013      	ands	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800510a:	4a1f      	ldr	r2, [pc, #124]	@ (8005188 <HAL_GPIO_Init+0x354>)
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005110:	4b1d      	ldr	r3, [pc, #116]	@ (8005188 <HAL_GPIO_Init+0x354>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	43db      	mvns	r3, r3
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	4013      	ands	r3, r2
 800511e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	4313      	orrs	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005134:	4a14      	ldr	r2, [pc, #80]	@ (8005188 <HAL_GPIO_Init+0x354>)
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	3301      	adds	r3, #1
 800513e:	61fb      	str	r3, [r7, #28]
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	2b0f      	cmp	r3, #15
 8005144:	f67f ae84 	bls.w	8004e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005148:	bf00      	nop
 800514a:	bf00      	nop
 800514c:	3724      	adds	r7, #36	@ 0x24
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40023800 	.word	0x40023800
 800515c:	40013800 	.word	0x40013800
 8005160:	40020000 	.word	0x40020000
 8005164:	40020400 	.word	0x40020400
 8005168:	40020800 	.word	0x40020800
 800516c:	40020c00 	.word	0x40020c00
 8005170:	40021000 	.word	0x40021000
 8005174:	40021400 	.word	0x40021400
 8005178:	40021800 	.word	0x40021800
 800517c:	40021c00 	.word	0x40021c00
 8005180:	40022000 	.word	0x40022000
 8005184:	40022400 	.word	0x40022400
 8005188:	40013c00 	.word	0x40013c00

0800518c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005196:	2300      	movs	r3, #0
 8005198:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800519e:	2300      	movs	r3, #0
 80051a0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	e0d9      	b.n	800535c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051a8:	2201      	movs	r2, #1
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4013      	ands	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	429a      	cmp	r2, r3
 80051c0:	f040 80c9 	bne.w	8005356 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80051c4:	4a6b      	ldr	r2, [pc, #428]	@ (8005374 <HAL_GPIO_DeInit+0x1e8>)
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	089b      	lsrs	r3, r3, #2
 80051ca:	3302      	adds	r3, #2
 80051cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	220f      	movs	r2, #15
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	4013      	ands	r3, r2
 80051e4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a63      	ldr	r2, [pc, #396]	@ (8005378 <HAL_GPIO_DeInit+0x1ec>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d037      	beq.n	800525e <HAL_GPIO_DeInit+0xd2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a62      	ldr	r2, [pc, #392]	@ (800537c <HAL_GPIO_DeInit+0x1f0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d031      	beq.n	800525a <HAL_GPIO_DeInit+0xce>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a61      	ldr	r2, [pc, #388]	@ (8005380 <HAL_GPIO_DeInit+0x1f4>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d02b      	beq.n	8005256 <HAL_GPIO_DeInit+0xca>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a60      	ldr	r2, [pc, #384]	@ (8005384 <HAL_GPIO_DeInit+0x1f8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d025      	beq.n	8005252 <HAL_GPIO_DeInit+0xc6>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a5f      	ldr	r2, [pc, #380]	@ (8005388 <HAL_GPIO_DeInit+0x1fc>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d01f      	beq.n	800524e <HAL_GPIO_DeInit+0xc2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a5e      	ldr	r2, [pc, #376]	@ (800538c <HAL_GPIO_DeInit+0x200>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d019      	beq.n	800524a <HAL_GPIO_DeInit+0xbe>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a5d      	ldr	r2, [pc, #372]	@ (8005390 <HAL_GPIO_DeInit+0x204>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d013      	beq.n	8005246 <HAL_GPIO_DeInit+0xba>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a5c      	ldr	r2, [pc, #368]	@ (8005394 <HAL_GPIO_DeInit+0x208>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00d      	beq.n	8005242 <HAL_GPIO_DeInit+0xb6>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a5b      	ldr	r2, [pc, #364]	@ (8005398 <HAL_GPIO_DeInit+0x20c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d007      	beq.n	800523e <HAL_GPIO_DeInit+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a5a      	ldr	r2, [pc, #360]	@ (800539c <HAL_GPIO_DeInit+0x210>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d101      	bne.n	800523a <HAL_GPIO_DeInit+0xae>
 8005236:	2309      	movs	r3, #9
 8005238:	e012      	b.n	8005260 <HAL_GPIO_DeInit+0xd4>
 800523a:	230a      	movs	r3, #10
 800523c:	e010      	b.n	8005260 <HAL_GPIO_DeInit+0xd4>
 800523e:	2308      	movs	r3, #8
 8005240:	e00e      	b.n	8005260 <HAL_GPIO_DeInit+0xd4>
 8005242:	2307      	movs	r3, #7
 8005244:	e00c      	b.n	8005260 <HAL_GPIO_DeInit+0xd4>
 8005246:	2306      	movs	r3, #6
 8005248:	e00a      	b.n	8005260 <HAL_GPIO_DeInit+0xd4>
 800524a:	2305      	movs	r3, #5
 800524c:	e008      	b.n	8005260 <HAL_GPIO_DeInit+0xd4>
 800524e:	2304      	movs	r3, #4
 8005250:	e006      	b.n	8005260 <HAL_GPIO_DeInit+0xd4>
 8005252:	2303      	movs	r3, #3
 8005254:	e004      	b.n	8005260 <HAL_GPIO_DeInit+0xd4>
 8005256:	2302      	movs	r3, #2
 8005258:	e002      	b.n	8005260 <HAL_GPIO_DeInit+0xd4>
 800525a:	2301      	movs	r3, #1
 800525c:	e000      	b.n	8005260 <HAL_GPIO_DeInit+0xd4>
 800525e:	2300      	movs	r3, #0
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	f002 0203 	and.w	r2, r2, #3
 8005266:	0092      	lsls	r2, r2, #2
 8005268:	4093      	lsls	r3, r2
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	429a      	cmp	r2, r3
 800526e:	d132      	bne.n	80052d6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005270:	4b4b      	ldr	r3, [pc, #300]	@ (80053a0 <HAL_GPIO_DeInit+0x214>)
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	43db      	mvns	r3, r3
 8005278:	4949      	ldr	r1, [pc, #292]	@ (80053a0 <HAL_GPIO_DeInit+0x214>)
 800527a:	4013      	ands	r3, r2
 800527c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800527e:	4b48      	ldr	r3, [pc, #288]	@ (80053a0 <HAL_GPIO_DeInit+0x214>)
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	43db      	mvns	r3, r3
 8005286:	4946      	ldr	r1, [pc, #280]	@ (80053a0 <HAL_GPIO_DeInit+0x214>)
 8005288:	4013      	ands	r3, r2
 800528a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800528c:	4b44      	ldr	r3, [pc, #272]	@ (80053a0 <HAL_GPIO_DeInit+0x214>)
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	43db      	mvns	r3, r3
 8005294:	4942      	ldr	r1, [pc, #264]	@ (80053a0 <HAL_GPIO_DeInit+0x214>)
 8005296:	4013      	ands	r3, r2
 8005298:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800529a:	4b41      	ldr	r3, [pc, #260]	@ (80053a0 <HAL_GPIO_DeInit+0x214>)
 800529c:	689a      	ldr	r2, [r3, #8]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	43db      	mvns	r3, r3
 80052a2:	493f      	ldr	r1, [pc, #252]	@ (80053a0 <HAL_GPIO_DeInit+0x214>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	220f      	movs	r2, #15
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80052b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005374 <HAL_GPIO_DeInit+0x1e8>)
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	089b      	lsrs	r3, r3, #2
 80052be:	3302      	adds	r3, #2
 80052c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	43da      	mvns	r2, r3
 80052c8:	482a      	ldr	r0, [pc, #168]	@ (8005374 <HAL_GPIO_DeInit+0x1e8>)
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	089b      	lsrs	r3, r3, #2
 80052ce:	400a      	ands	r2, r1
 80052d0:	3302      	adds	r3, #2
 80052d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	2103      	movs	r1, #3
 80052e0:	fa01 f303 	lsl.w	r3, r1, r3
 80052e4:	43db      	mvns	r3, r3
 80052e6:	401a      	ands	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	08da      	lsrs	r2, r3, #3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3208      	adds	r2, #8
 80052f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	220f      	movs	r2, #15
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43db      	mvns	r3, r3
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	08d2      	lsrs	r2, r2, #3
 800530c:	4019      	ands	r1, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3208      	adds	r2, #8
 8005312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68da      	ldr	r2, [r3, #12]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	2103      	movs	r1, #3
 8005320:	fa01 f303 	lsl.w	r3, r1, r3
 8005324:	43db      	mvns	r3, r3
 8005326:	401a      	ands	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	2101      	movs	r1, #1
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	fa01 f303 	lsl.w	r3, r1, r3
 8005338:	43db      	mvns	r3, r3
 800533a:	401a      	ands	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	2103      	movs	r1, #3
 800534a:	fa01 f303 	lsl.w	r3, r1, r3
 800534e:	43db      	mvns	r3, r3
 8005350:	401a      	ands	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	3301      	adds	r3, #1
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2b0f      	cmp	r3, #15
 8005360:	f67f af22 	bls.w	80051a8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop
 8005368:	371c      	adds	r7, #28
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40013800 	.word	0x40013800
 8005378:	40020000 	.word	0x40020000
 800537c:	40020400 	.word	0x40020400
 8005380:	40020800 	.word	0x40020800
 8005384:	40020c00 	.word	0x40020c00
 8005388:	40021000 	.word	0x40021000
 800538c:	40021400 	.word	0x40021400
 8005390:	40021800 	.word	0x40021800
 8005394:	40021c00 	.word	0x40021c00
 8005398:	40022000 	.word	0x40022000
 800539c:	40022400 	.word	0x40022400
 80053a0:	40013c00 	.word	0x40013c00

080053a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	807b      	strh	r3, [r7, #2]
 80053b0:	4613      	mov	r3, r2
 80053b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053b4:	787b      	ldrb	r3, [r7, #1]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053ba:	887a      	ldrh	r2, [r7, #2]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053c0:	e003      	b.n	80053ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053c2:	887b      	ldrh	r3, [r7, #2]
 80053c4:	041a      	lsls	r2, r3, #16
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	619a      	str	r2, [r3, #24]
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
	...

080053d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e12b      	b.n	8005642 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fe fce8 	bl	8003dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2224      	movs	r2, #36	@ 0x24
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0201 	bic.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800542a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800543a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800543c:	f001 ff82 	bl	8007344 <HAL_RCC_GetPCLK1Freq>
 8005440:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	4a81      	ldr	r2, [pc, #516]	@ (800564c <HAL_I2C_Init+0x274>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d807      	bhi.n	800545c <HAL_I2C_Init+0x84>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4a80      	ldr	r2, [pc, #512]	@ (8005650 <HAL_I2C_Init+0x278>)
 8005450:	4293      	cmp	r3, r2
 8005452:	bf94      	ite	ls
 8005454:	2301      	movls	r3, #1
 8005456:	2300      	movhi	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	e006      	b.n	800546a <HAL_I2C_Init+0x92>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4a7d      	ldr	r2, [pc, #500]	@ (8005654 <HAL_I2C_Init+0x27c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	bf94      	ite	ls
 8005464:	2301      	movls	r3, #1
 8005466:	2300      	movhi	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e0e7      	b.n	8005642 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4a78      	ldr	r2, [pc, #480]	@ (8005658 <HAL_I2C_Init+0x280>)
 8005476:	fba2 2303 	umull	r2, r3, r2, r3
 800547a:	0c9b      	lsrs	r3, r3, #18
 800547c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	430a      	orrs	r2, r1
 8005490:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	4a6a      	ldr	r2, [pc, #424]	@ (800564c <HAL_I2C_Init+0x274>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d802      	bhi.n	80054ac <HAL_I2C_Init+0xd4>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	3301      	adds	r3, #1
 80054aa:	e009      	b.n	80054c0 <HAL_I2C_Init+0xe8>
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80054b2:	fb02 f303 	mul.w	r3, r2, r3
 80054b6:	4a69      	ldr	r2, [pc, #420]	@ (800565c <HAL_I2C_Init+0x284>)
 80054b8:	fba2 2303 	umull	r2, r3, r2, r3
 80054bc:	099b      	lsrs	r3, r3, #6
 80054be:	3301      	adds	r3, #1
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6812      	ldr	r2, [r2, #0]
 80054c4:	430b      	orrs	r3, r1
 80054c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80054d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	495c      	ldr	r1, [pc, #368]	@ (800564c <HAL_I2C_Init+0x274>)
 80054dc:	428b      	cmp	r3, r1
 80054de:	d819      	bhi.n	8005514 <HAL_I2C_Init+0x13c>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	1e59      	subs	r1, r3, #1
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80054ee:	1c59      	adds	r1, r3, #1
 80054f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80054f4:	400b      	ands	r3, r1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <HAL_I2C_Init+0x138>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	1e59      	subs	r1, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	fbb1 f3f3 	udiv	r3, r1, r3
 8005508:	3301      	adds	r3, #1
 800550a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800550e:	e051      	b.n	80055b4 <HAL_I2C_Init+0x1dc>
 8005510:	2304      	movs	r3, #4
 8005512:	e04f      	b.n	80055b4 <HAL_I2C_Init+0x1dc>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d111      	bne.n	8005540 <HAL_I2C_Init+0x168>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	1e58      	subs	r0, r3, #1
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6859      	ldr	r1, [r3, #4]
 8005524:	460b      	mov	r3, r1
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	440b      	add	r3, r1
 800552a:	fbb0 f3f3 	udiv	r3, r0, r3
 800552e:	3301      	adds	r3, #1
 8005530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005534:	2b00      	cmp	r3, #0
 8005536:	bf0c      	ite	eq
 8005538:	2301      	moveq	r3, #1
 800553a:	2300      	movne	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	e012      	b.n	8005566 <HAL_I2C_Init+0x18e>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1e58      	subs	r0, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6859      	ldr	r1, [r3, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	0099      	lsls	r1, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	fbb0 f3f3 	udiv	r3, r0, r3
 8005556:	3301      	adds	r3, #1
 8005558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800555c:	2b00      	cmp	r3, #0
 800555e:	bf0c      	ite	eq
 8005560:	2301      	moveq	r3, #1
 8005562:	2300      	movne	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <HAL_I2C_Init+0x196>
 800556a:	2301      	movs	r3, #1
 800556c:	e022      	b.n	80055b4 <HAL_I2C_Init+0x1dc>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10e      	bne.n	8005594 <HAL_I2C_Init+0x1bc>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1e58      	subs	r0, r3, #1
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6859      	ldr	r1, [r3, #4]
 800557e:	460b      	mov	r3, r1
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	440b      	add	r3, r1
 8005584:	fbb0 f3f3 	udiv	r3, r0, r3
 8005588:	3301      	adds	r3, #1
 800558a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800558e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005592:	e00f      	b.n	80055b4 <HAL_I2C_Init+0x1dc>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	1e58      	subs	r0, r3, #1
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6859      	ldr	r1, [r3, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	0099      	lsls	r1, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055aa:	3301      	adds	r3, #1
 80055ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	6809      	ldr	r1, [r1, #0]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69da      	ldr	r2, [r3, #28]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80055e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6911      	ldr	r1, [r2, #16]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	68d2      	ldr	r2, [r2, #12]
 80055ee:	4311      	orrs	r1, r2
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6812      	ldr	r2, [r2, #0]
 80055f4:	430b      	orrs	r3, r1
 80055f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	695a      	ldr	r2, [r3, #20]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	000186a0 	.word	0x000186a0
 8005650:	001e847f 	.word	0x001e847f
 8005654:	003d08ff 	.word	0x003d08ff
 8005658:	431bde83 	.word	0x431bde83
 800565c:	10624dd3 	.word	0x10624dd3

08005660 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af02      	add	r7, sp, #8
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	4608      	mov	r0, r1
 800566a:	4611      	mov	r1, r2
 800566c:	461a      	mov	r2, r3
 800566e:	4603      	mov	r3, r0
 8005670:	817b      	strh	r3, [r7, #10]
 8005672:	460b      	mov	r3, r1
 8005674:	813b      	strh	r3, [r7, #8]
 8005676:	4613      	mov	r3, r2
 8005678:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800567a:	f7ff fa23 	bl	8004ac4 <HAL_GetTick>
 800567e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b20      	cmp	r3, #32
 800568a:	f040 80d9 	bne.w	8005840 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	2319      	movs	r3, #25
 8005694:	2201      	movs	r2, #1
 8005696:	496d      	ldr	r1, [pc, #436]	@ (800584c <HAL_I2C_Mem_Write+0x1ec>)
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 fc8b 	bl	8005fb4 <I2C_WaitOnFlagUntilTimeout>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80056a4:	2302      	movs	r3, #2
 80056a6:	e0cc      	b.n	8005842 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <HAL_I2C_Mem_Write+0x56>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e0c5      	b.n	8005842 <HAL_I2C_Mem_Write+0x1e2>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d007      	beq.n	80056dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 0201 	orr.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2221      	movs	r2, #33	@ 0x21
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2240      	movs	r2, #64	@ 0x40
 80056f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a3a      	ldr	r2, [r7, #32]
 8005706:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800570c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005712:	b29a      	uxth	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4a4d      	ldr	r2, [pc, #308]	@ (8005850 <HAL_I2C_Mem_Write+0x1f0>)
 800571c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800571e:	88f8      	ldrh	r0, [r7, #6]
 8005720:	893a      	ldrh	r2, [r7, #8]
 8005722:	8979      	ldrh	r1, [r7, #10]
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	9301      	str	r3, [sp, #4]
 8005728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	4603      	mov	r3, r0
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 fac2 	bl	8005cb8 <I2C_RequestMemoryWrite>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d052      	beq.n	80057e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e081      	b.n	8005842 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 fd50 	bl	80061e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00d      	beq.n	800576a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005752:	2b04      	cmp	r3, #4
 8005754:	d107      	bne.n	8005766 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005764:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e06b      	b.n	8005842 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576e:	781a      	ldrb	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d11b      	bne.n	80057e0 <HAL_I2C_Mem_Write+0x180>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d017      	beq.n	80057e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b4:	781a      	ldrb	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1aa      	bne.n	800573e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 fd43 	bl	8006278 <I2C_WaitOnBTFFlagUntilTimeout>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00d      	beq.n	8005814 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d107      	bne.n	8005810 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800580e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e016      	b.n	8005842 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2220      	movs	r2, #32
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	e000      	b.n	8005842 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005840:	2302      	movs	r3, #2
  }
}
 8005842:	4618      	mov	r0, r3
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	00100002 	.word	0x00100002
 8005850:	ffff0000 	.word	0xffff0000

08005854 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08c      	sub	sp, #48	@ 0x30
 8005858:	af02      	add	r7, sp, #8
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	4608      	mov	r0, r1
 800585e:	4611      	mov	r1, r2
 8005860:	461a      	mov	r2, r3
 8005862:	4603      	mov	r3, r0
 8005864:	817b      	strh	r3, [r7, #10]
 8005866:	460b      	mov	r3, r1
 8005868:	813b      	strh	r3, [r7, #8]
 800586a:	4613      	mov	r3, r2
 800586c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800586e:	f7ff f929 	bl	8004ac4 <HAL_GetTick>
 8005872:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b20      	cmp	r3, #32
 800587e:	f040 8214 	bne.w	8005caa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	2319      	movs	r3, #25
 8005888:	2201      	movs	r2, #1
 800588a:	497b      	ldr	r1, [pc, #492]	@ (8005a78 <HAL_I2C_Mem_Read+0x224>)
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 fb91 	bl	8005fb4 <I2C_WaitOnFlagUntilTimeout>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005898:	2302      	movs	r3, #2
 800589a:	e207      	b.n	8005cac <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d101      	bne.n	80058aa <HAL_I2C_Mem_Read+0x56>
 80058a6:	2302      	movs	r3, #2
 80058a8:	e200      	b.n	8005cac <HAL_I2C_Mem_Read+0x458>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d007      	beq.n	80058d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f042 0201 	orr.w	r2, r2, #1
 80058ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2222      	movs	r2, #34	@ 0x22
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2240      	movs	r2, #64	@ 0x40
 80058ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005900:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005906:	b29a      	uxth	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4a5b      	ldr	r2, [pc, #364]	@ (8005a7c <HAL_I2C_Mem_Read+0x228>)
 8005910:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005912:	88f8      	ldrh	r0, [r7, #6]
 8005914:	893a      	ldrh	r2, [r7, #8]
 8005916:	8979      	ldrh	r1, [r7, #10]
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	9301      	str	r3, [sp, #4]
 800591c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	4603      	mov	r3, r0
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fa5e 	bl	8005de4 <I2C_RequestMemoryRead>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e1bc      	b.n	8005cac <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005936:	2b00      	cmp	r3, #0
 8005938:	d113      	bne.n	8005962 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800593a:	2300      	movs	r3, #0
 800593c:	623b      	str	r3, [r7, #32]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	623b      	str	r3, [r7, #32]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	623b      	str	r3, [r7, #32]
 800594e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	e190      	b.n	8005c84 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005966:	2b01      	cmp	r3, #1
 8005968:	d11b      	bne.n	80059a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005978:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800597a:	2300      	movs	r3, #0
 800597c:	61fb      	str	r3, [r7, #28]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	61fb      	str	r3, [r7, #28]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	61fb      	str	r3, [r7, #28]
 800598e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	e170      	b.n	8005c84 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d11b      	bne.n	80059e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ca:	2300      	movs	r3, #0
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	61bb      	str	r3, [r7, #24]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	61bb      	str	r3, [r7, #24]
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	e150      	b.n	8005c84 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059e2:	2300      	movs	r3, #0
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80059f8:	e144      	b.n	8005c84 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	f200 80f1 	bhi.w	8005be6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d123      	bne.n	8005a54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a0e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fc79 	bl	8006308 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e145      	b.n	8005cac <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691a      	ldr	r2, [r3, #16]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a52:	e117      	b.n	8005c84 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d14e      	bne.n	8005afa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a62:	2200      	movs	r2, #0
 8005a64:	4906      	ldr	r1, [pc, #24]	@ (8005a80 <HAL_I2C_Mem_Read+0x22c>)
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 faa4 	bl	8005fb4 <I2C_WaitOnFlagUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d008      	beq.n	8005a84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e11a      	b.n	8005cac <HAL_I2C_Mem_Read+0x458>
 8005a76:	bf00      	nop
 8005a78:	00100002 	.word	0x00100002
 8005a7c:	ffff0000 	.word	0xffff0000
 8005a80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691a      	ldr	r2, [r3, #16]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	3b01      	subs	r3, #1
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005af8:	e0c4      	b.n	8005c84 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b00:	2200      	movs	r2, #0
 8005b02:	496c      	ldr	r1, [pc, #432]	@ (8005cb4 <HAL_I2C_Mem_Read+0x460>)
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 fa55 	bl	8005fb4 <I2C_WaitOnFlagUntilTimeout>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0cb      	b.n	8005cac <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691a      	ldr	r2, [r3, #16]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	4955      	ldr	r1, [pc, #340]	@ (8005cb4 <HAL_I2C_Mem_Read+0x460>)
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 fa27 	bl	8005fb4 <I2C_WaitOnFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e09d      	b.n	8005cac <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691a      	ldr	r2, [r3, #16]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8a:	b2d2      	uxtb	r2, r2
 8005b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005be4:	e04e      	b.n	8005c84 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005be8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 fb8c 	bl	8006308 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e058      	b.n	8005cac <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	691a      	ldr	r2, [r3, #16]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c04:	b2d2      	uxtb	r2, r2
 8005c06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d124      	bne.n	8005c84 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d107      	bne.n	8005c52 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c50:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f47f aeb6 	bne.w	80059fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e000      	b.n	8005cac <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005caa:	2302      	movs	r3, #2
  }
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3728      	adds	r7, #40	@ 0x28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	00010004 	.word	0x00010004

08005cb8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b088      	sub	sp, #32
 8005cbc:	af02      	add	r7, sp, #8
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	4608      	mov	r0, r1
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	817b      	strh	r3, [r7, #10]
 8005cca:	460b      	mov	r3, r1
 8005ccc:	813b      	strh	r3, [r7, #8]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ce0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 f960 	bl	8005fb4 <I2C_WaitOnFlagUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00d      	beq.n	8005d16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d08:	d103      	bne.n	8005d12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e05f      	b.n	8005dd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d16:	897b      	ldrh	r3, [r7, #10]
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	6a3a      	ldr	r2, [r7, #32]
 8005d2a:	492d      	ldr	r1, [pc, #180]	@ (8005de0 <I2C_RequestMemoryWrite+0x128>)
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f9bb 	bl	80060a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e04c      	b.n	8005dd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	617b      	str	r3, [r7, #20]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d54:	6a39      	ldr	r1, [r7, #32]
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 fa46 	bl	80061e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00d      	beq.n	8005d7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d107      	bne.n	8005d7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e02b      	b.n	8005dd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d7e:	88fb      	ldrh	r3, [r7, #6]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d105      	bne.n	8005d90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d84:	893b      	ldrh	r3, [r7, #8]
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	611a      	str	r2, [r3, #16]
 8005d8e:	e021      	b.n	8005dd4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d90:	893b      	ldrh	r3, [r7, #8]
 8005d92:	0a1b      	lsrs	r3, r3, #8
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005da0:	6a39      	ldr	r1, [r7, #32]
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 fa20 	bl	80061e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00d      	beq.n	8005dca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d107      	bne.n	8005dc6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e005      	b.n	8005dd6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dca:	893b      	ldrh	r3, [r7, #8]
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	00010002 	.word	0x00010002

08005de4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	4608      	mov	r0, r1
 8005dee:	4611      	mov	r1, r2
 8005df0:	461a      	mov	r2, r3
 8005df2:	4603      	mov	r3, r0
 8005df4:	817b      	strh	r3, [r7, #10]
 8005df6:	460b      	mov	r3, r1
 8005df8:	813b      	strh	r3, [r7, #8]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 f8c2 	bl	8005fb4 <I2C_WaitOnFlagUntilTimeout>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00d      	beq.n	8005e52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e44:	d103      	bne.n	8005e4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e0aa      	b.n	8005fa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e52:	897b      	ldrh	r3, [r7, #10]
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	461a      	mov	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e64:	6a3a      	ldr	r2, [r7, #32]
 8005e66:	4952      	ldr	r1, [pc, #328]	@ (8005fb0 <I2C_RequestMemoryRead+0x1cc>)
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 f91d 	bl	80060a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e097      	b.n	8005fa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e78:	2300      	movs	r3, #0
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e90:	6a39      	ldr	r1, [r7, #32]
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 f9a8 	bl	80061e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00d      	beq.n	8005eba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d107      	bne.n	8005eb6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005eb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e076      	b.n	8005fa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005eba:	88fb      	ldrh	r3, [r7, #6]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d105      	bne.n	8005ecc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ec0:	893b      	ldrh	r3, [r7, #8]
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	611a      	str	r2, [r3, #16]
 8005eca:	e021      	b.n	8005f10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ecc:	893b      	ldrh	r3, [r7, #8]
 8005ece:	0a1b      	lsrs	r3, r3, #8
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005edc:	6a39      	ldr	r1, [r7, #32]
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 f982 	bl	80061e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00d      	beq.n	8005f06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d107      	bne.n	8005f02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e050      	b.n	8005fa8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f06:	893b      	ldrh	r3, [r7, #8]
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f12:	6a39      	ldr	r1, [r7, #32]
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 f967 	bl	80061e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00d      	beq.n	8005f3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d107      	bne.n	8005f38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e035      	b.n	8005fa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f82b 	bl	8005fb4 <I2C_WaitOnFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00d      	beq.n	8005f80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f72:	d103      	bne.n	8005f7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e013      	b.n	8005fa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f80:	897b      	ldrh	r3, [r7, #10]
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	f043 0301 	orr.w	r3, r3, #1
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f92:	6a3a      	ldr	r2, [r7, #32]
 8005f94:	4906      	ldr	r1, [pc, #24]	@ (8005fb0 <I2C_RequestMemoryRead+0x1cc>)
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 f886 	bl	80060a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	00010002 	.word	0x00010002

08005fb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	603b      	str	r3, [r7, #0]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fc4:	e048      	b.n	8006058 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fcc:	d044      	beq.n	8006058 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fce:	f7fe fd79 	bl	8004ac4 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d302      	bcc.n	8005fe4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d139      	bne.n	8006058 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	0c1b      	lsrs	r3, r3, #16
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d10d      	bne.n	800600a <I2C_WaitOnFlagUntilTimeout+0x56>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	43da      	mvns	r2, r3
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	bf0c      	ite	eq
 8006000:	2301      	moveq	r3, #1
 8006002:	2300      	movne	r3, #0
 8006004:	b2db      	uxtb	r3, r3
 8006006:	461a      	mov	r2, r3
 8006008:	e00c      	b.n	8006024 <I2C_WaitOnFlagUntilTimeout+0x70>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	43da      	mvns	r2, r3
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	4013      	ands	r3, r2
 8006016:	b29b      	uxth	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	bf0c      	ite	eq
 800601c:	2301      	moveq	r3, #1
 800601e:	2300      	movne	r3, #0
 8006020:	b2db      	uxtb	r3, r3
 8006022:	461a      	mov	r2, r3
 8006024:	79fb      	ldrb	r3, [r7, #7]
 8006026:	429a      	cmp	r2, r3
 8006028:	d116      	bne.n	8006058 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006044:	f043 0220 	orr.w	r2, r3, #32
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e023      	b.n	80060a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	0c1b      	lsrs	r3, r3, #16
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b01      	cmp	r3, #1
 8006060:	d10d      	bne.n	800607e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	43da      	mvns	r2, r3
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	4013      	ands	r3, r2
 800606e:	b29b      	uxth	r3, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	bf0c      	ite	eq
 8006074:	2301      	moveq	r3, #1
 8006076:	2300      	movne	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	461a      	mov	r2, r3
 800607c:	e00c      	b.n	8006098 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	43da      	mvns	r2, r3
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	4013      	ands	r3, r2
 800608a:	b29b      	uxth	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	bf0c      	ite	eq
 8006090:	2301      	moveq	r3, #1
 8006092:	2300      	movne	r3, #0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	461a      	mov	r2, r3
 8006098:	79fb      	ldrb	r3, [r7, #7]
 800609a:	429a      	cmp	r2, r3
 800609c:	d093      	beq.n	8005fc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060b6:	e071      	b.n	800619c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060c6:	d123      	bne.n	8006110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80060e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2220      	movs	r2, #32
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fc:	f043 0204 	orr.w	r2, r3, #4
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e067      	b.n	80061e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006116:	d041      	beq.n	800619c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006118:	f7fe fcd4 	bl	8004ac4 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	429a      	cmp	r2, r3
 8006126:	d302      	bcc.n	800612e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d136      	bne.n	800619c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	0c1b      	lsrs	r3, r3, #16
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b01      	cmp	r3, #1
 8006136:	d10c      	bne.n	8006152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	43da      	mvns	r2, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4013      	ands	r3, r2
 8006144:	b29b      	uxth	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	bf14      	ite	ne
 800614a:	2301      	movne	r3, #1
 800614c:	2300      	moveq	r3, #0
 800614e:	b2db      	uxtb	r3, r3
 8006150:	e00b      	b.n	800616a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	43da      	mvns	r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	4013      	ands	r3, r2
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	bf14      	ite	ne
 8006164:	2301      	movne	r3, #1
 8006166:	2300      	moveq	r3, #0
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d016      	beq.n	800619c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006188:	f043 0220 	orr.w	r2, r3, #32
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e021      	b.n	80061e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	0c1b      	lsrs	r3, r3, #16
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d10c      	bne.n	80061c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	43da      	mvns	r2, r3
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	4013      	ands	r3, r2
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	bf14      	ite	ne
 80061b8:	2301      	movne	r3, #1
 80061ba:	2300      	moveq	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	e00b      	b.n	80061d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	43da      	mvns	r2, r3
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4013      	ands	r3, r2
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	bf14      	ite	ne
 80061d2:	2301      	movne	r3, #1
 80061d4:	2300      	moveq	r3, #0
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f47f af6d 	bne.w	80060b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061f4:	e034      	b.n	8006260 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 f8e3 	bl	80063c2 <I2C_IsAcknowledgeFailed>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e034      	b.n	8006270 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620c:	d028      	beq.n	8006260 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800620e:	f7fe fc59 	bl	8004ac4 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	429a      	cmp	r2, r3
 800621c:	d302      	bcc.n	8006224 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d11d      	bne.n	8006260 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800622e:	2b80      	cmp	r3, #128	@ 0x80
 8006230:	d016      	beq.n	8006260 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624c:	f043 0220 	orr.w	r2, r3, #32
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e007      	b.n	8006270 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800626a:	2b80      	cmp	r3, #128	@ 0x80
 800626c:	d1c3      	bne.n	80061f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006284:	e034      	b.n	80062f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 f89b 	bl	80063c2 <I2C_IsAcknowledgeFailed>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e034      	b.n	8006300 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629c:	d028      	beq.n	80062f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800629e:	f7fe fc11 	bl	8004ac4 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d302      	bcc.n	80062b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d11d      	bne.n	80062f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	f003 0304 	and.w	r3, r3, #4
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d016      	beq.n	80062f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062dc:	f043 0220 	orr.w	r2, r3, #32
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e007      	b.n	8006300 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	f003 0304 	and.w	r3, r3, #4
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d1c3      	bne.n	8006286 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006314:	e049      	b.n	80063aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	f003 0310 	and.w	r3, r3, #16
 8006320:	2b10      	cmp	r3, #16
 8006322:	d119      	bne.n	8006358 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0210 	mvn.w	r2, #16
 800632c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2220      	movs	r2, #32
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e030      	b.n	80063ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006358:	f7fe fbb4 	bl	8004ac4 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	429a      	cmp	r2, r3
 8006366:	d302      	bcc.n	800636e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d11d      	bne.n	80063aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006378:	2b40      	cmp	r3, #64	@ 0x40
 800637a:	d016      	beq.n	80063aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2220      	movs	r2, #32
 8006386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006396:	f043 0220 	orr.w	r2, r3, #32
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e007      	b.n	80063ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b4:	2b40      	cmp	r3, #64	@ 0x40
 80063b6:	d1ae      	bne.n	8006316 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063d8:	d11b      	bne.n	8006412 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80063e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2220      	movs	r2, #32
 80063ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fe:	f043 0204 	orr.w	r2, r3, #4
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e000      	b.n	8006414 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b20      	cmp	r3, #32
 8006434:	d129      	bne.n	800648a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2224      	movs	r2, #36	@ 0x24
 800643a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0201 	bic.w	r2, r2, #1
 800644c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0210 	bic.w	r2, r2, #16
 800645c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f042 0201 	orr.w	r2, r2, #1
 800647c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2220      	movs	r2, #32
 8006482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	e000      	b.n	800648c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800648a:	2302      	movs	r3, #2
  }
}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b20      	cmp	r3, #32
 80064b0:	d12a      	bne.n	8006508 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2224      	movs	r2, #36	@ 0x24
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0201 	bic.w	r2, r2, #1
 80064c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80064d2:	89fb      	ldrh	r3, [r7, #14]
 80064d4:	f023 030f 	bic.w	r3, r3, #15
 80064d8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	b29a      	uxth	r2, r3
 80064de:	89fb      	ldrh	r3, [r7, #14]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	89fa      	ldrh	r2, [r7, #14]
 80064ea:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f042 0201 	orr.w	r2, r2, #1
 80064fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2220      	movs	r2, #32
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	e000      	b.n	800650a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006508:	2302      	movs	r3, #2
  }
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
	...

08006518 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e0bf      	b.n	80066aa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d106      	bne.n	8006544 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7fd fcb2 	bl	8003ea8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699a      	ldr	r2, [r3, #24]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800655a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6999      	ldr	r1, [r3, #24]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006570:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6899      	ldr	r1, [r3, #8]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	4b4a      	ldr	r3, [pc, #296]	@ (80066b4 <HAL_LTDC_Init+0x19c>)
 800658c:	400b      	ands	r3, r1
 800658e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	041b      	lsls	r3, r3, #16
 8006596:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6899      	ldr	r1, [r3, #8]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699a      	ldr	r2, [r3, #24]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	431a      	orrs	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68d9      	ldr	r1, [r3, #12]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	4b3e      	ldr	r3, [pc, #248]	@ (80066b4 <HAL_LTDC_Init+0x19c>)
 80065ba:	400b      	ands	r3, r1
 80065bc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	041b      	lsls	r3, r3, #16
 80065c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68d9      	ldr	r1, [r3, #12]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1a      	ldr	r2, [r3, #32]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	431a      	orrs	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6919      	ldr	r1, [r3, #16]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	4b33      	ldr	r3, [pc, #204]	@ (80066b4 <HAL_LTDC_Init+0x19c>)
 80065e8:	400b      	ands	r3, r1
 80065ea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f0:	041b      	lsls	r3, r3, #16
 80065f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6919      	ldr	r1, [r3, #16]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	431a      	orrs	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6959      	ldr	r1, [r3, #20]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	4b27      	ldr	r3, [pc, #156]	@ (80066b4 <HAL_LTDC_Init+0x19c>)
 8006616:	400b      	ands	r3, r1
 8006618:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661e:	041b      	lsls	r3, r3, #16
 8006620:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6959      	ldr	r1, [r3, #20]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	431a      	orrs	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800663e:	021b      	lsls	r3, r3, #8
 8006640:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006648:	041b      	lsls	r3, r3, #16
 800664a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800665a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800666e:	431a      	orrs	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0206 	orr.w	r2, r2, #6
 8006686:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699a      	ldr	r2, [r3, #24]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0201 	orr.w	r2, r2, #1
 8006696:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	f000f800 	.word	0xf000f800

080066b8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80066b8:	b5b0      	push	{r4, r5, r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d101      	bne.n	80066d2 <HAL_LTDC_ConfigLayer+0x1a>
 80066ce:	2302      	movs	r3, #2
 80066d0:	e02c      	b.n	800672c <HAL_LTDC_ConfigLayer+0x74>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2202      	movs	r2, #2
 80066de:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2134      	movs	r1, #52	@ 0x34
 80066e8:	fb01 f303 	mul.w	r3, r1, r3
 80066ec:	4413      	add	r3, r2
 80066ee:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	4614      	mov	r4, r2
 80066f6:	461d      	mov	r5, r3
 80066f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006704:	682b      	ldr	r3, [r5, #0]
 8006706:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	68b9      	ldr	r1, [r7, #8]
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 f811 	bl	8006734 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2201      	movs	r2, #1
 8006718:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bdb0      	pop	{r4, r5, r7, pc}

08006734 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006734:	b480      	push	{r7}
 8006736:	b089      	sub	sp, #36	@ 0x24
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	0c1b      	lsrs	r3, r3, #16
 800674c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006750:	4413      	add	r3, r2
 8006752:	041b      	lsls	r3, r3, #16
 8006754:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	01db      	lsls	r3, r3, #7
 8006760:	4413      	add	r3, r2
 8006762:	3384      	adds	r3, #132	@ 0x84
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	6812      	ldr	r2, [r2, #0]
 800676a:	4611      	mov	r1, r2
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	01d2      	lsls	r2, r2, #7
 8006770:	440a      	add	r2, r1
 8006772:	3284      	adds	r2, #132	@ 0x84
 8006774:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006778:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	0c1b      	lsrs	r3, r3, #16
 8006786:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800678a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800678c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4619      	mov	r1, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	01db      	lsls	r3, r3, #7
 8006798:	440b      	add	r3, r1
 800679a:	3384      	adds	r3, #132	@ 0x84
 800679c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80067a2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	68da      	ldr	r2, [r3, #12]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067b2:	4413      	add	r3, r2
 80067b4:	041b      	lsls	r3, r3, #16
 80067b6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	461a      	mov	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	01db      	lsls	r3, r3, #7
 80067c2:	4413      	add	r3, r2
 80067c4:	3384      	adds	r3, #132	@ 0x84
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	6812      	ldr	r2, [r2, #0]
 80067cc:	4611      	mov	r1, r2
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	01d2      	lsls	r2, r2, #7
 80067d2:	440a      	add	r2, r1
 80067d4:	3284      	adds	r2, #132	@ 0x84
 80067d6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80067da:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067ea:	4413      	add	r3, r2
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4619      	mov	r1, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	01db      	lsls	r3, r3, #7
 80067f8:	440b      	add	r3, r1
 80067fa:	3384      	adds	r3, #132	@ 0x84
 80067fc:	4619      	mov	r1, r3
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	4313      	orrs	r3, r2
 8006802:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	01db      	lsls	r3, r3, #7
 800680e:	4413      	add	r3, r2
 8006810:	3384      	adds	r3, #132	@ 0x84
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	6812      	ldr	r2, [r2, #0]
 8006818:	4611      	mov	r1, r2
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	01d2      	lsls	r2, r2, #7
 800681e:	440a      	add	r2, r1
 8006820:	3284      	adds	r2, #132	@ 0x84
 8006822:	f023 0307 	bic.w	r3, r3, #7
 8006826:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	01db      	lsls	r3, r3, #7
 8006832:	4413      	add	r3, r2
 8006834:	3384      	adds	r3, #132	@ 0x84
 8006836:	461a      	mov	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006844:	021b      	lsls	r3, r3, #8
 8006846:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800684e:	041b      	lsls	r3, r3, #16
 8006850:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	061b      	lsls	r3, r3, #24
 8006858:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	01db      	lsls	r3, r3, #7
 8006864:	4413      	add	r3, r2
 8006866:	3384      	adds	r3, #132	@ 0x84
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	01db      	lsls	r3, r3, #7
 8006874:	4413      	add	r3, r2
 8006876:	3384      	adds	r3, #132	@ 0x84
 8006878:	461a      	mov	r2, r3
 800687a:	2300      	movs	r3, #0
 800687c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006884:	461a      	mov	r2, r3
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	431a      	orrs	r2, r3
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	431a      	orrs	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4619      	mov	r1, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	01db      	lsls	r3, r3, #7
 8006898:	440b      	add	r3, r1
 800689a:	3384      	adds	r3, #132	@ 0x84
 800689c:	4619      	mov	r1, r3
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	461a      	mov	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	01db      	lsls	r3, r3, #7
 80068ae:	4413      	add	r3, r2
 80068b0:	3384      	adds	r3, #132	@ 0x84
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	6812      	ldr	r2, [r2, #0]
 80068b8:	4611      	mov	r1, r2
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	01d2      	lsls	r2, r2, #7
 80068be:	440a      	add	r2, r1
 80068c0:	3284      	adds	r2, #132	@ 0x84
 80068c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80068c6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	461a      	mov	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	01db      	lsls	r3, r3, #7
 80068d2:	4413      	add	r3, r2
 80068d4:	3384      	adds	r3, #132	@ 0x84
 80068d6:	461a      	mov	r2, r3
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	461a      	mov	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	01db      	lsls	r3, r3, #7
 80068e8:	4413      	add	r3, r2
 80068ea:	3384      	adds	r3, #132	@ 0x84
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	6812      	ldr	r2, [r2, #0]
 80068f2:	4611      	mov	r1, r2
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	01d2      	lsls	r2, r2, #7
 80068f8:	440a      	add	r2, r1
 80068fa:	3284      	adds	r2, #132	@ 0x84
 80068fc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006900:	f023 0307 	bic.w	r3, r3, #7
 8006904:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	69da      	ldr	r2, [r3, #28]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	68f9      	ldr	r1, [r7, #12]
 8006910:	6809      	ldr	r1, [r1, #0]
 8006912:	4608      	mov	r0, r1
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	01c9      	lsls	r1, r1, #7
 8006918:	4401      	add	r1, r0
 800691a:	3184      	adds	r1, #132	@ 0x84
 800691c:	4313      	orrs	r3, r2
 800691e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	461a      	mov	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	01db      	lsls	r3, r3, #7
 800692a:	4413      	add	r3, r2
 800692c:	3384      	adds	r3, #132	@ 0x84
 800692e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	01db      	lsls	r3, r3, #7
 800693a:	4413      	add	r3, r2
 800693c:	3384      	adds	r3, #132	@ 0x84
 800693e:	461a      	mov	r2, r3
 8006940:	2300      	movs	r3, #0
 8006942:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	461a      	mov	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	01db      	lsls	r3, r3, #7
 800694e:	4413      	add	r3, r2
 8006950:	3384      	adds	r3, #132	@ 0x84
 8006952:	461a      	mov	r2, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006958:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d102      	bne.n	8006968 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006962:	2304      	movs	r3, #4
 8006964:	61fb      	str	r3, [r7, #28]
 8006966:	e01b      	b.n	80069a0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d102      	bne.n	8006976 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006970:	2303      	movs	r3, #3
 8006972:	61fb      	str	r3, [r7, #28]
 8006974:	e014      	b.n	80069a0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b04      	cmp	r3, #4
 800697c:	d00b      	beq.n	8006996 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006982:	2b02      	cmp	r3, #2
 8006984:	d007      	beq.n	8006996 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800698a:	2b03      	cmp	r3, #3
 800698c:	d003      	beq.n	8006996 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006992:	2b07      	cmp	r3, #7
 8006994:	d102      	bne.n	800699c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006996:	2302      	movs	r3, #2
 8006998:	61fb      	str	r3, [r7, #28]
 800699a:	e001      	b.n	80069a0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800699c:	2301      	movs	r3, #1
 800699e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	461a      	mov	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	01db      	lsls	r3, r3, #7
 80069aa:	4413      	add	r3, r2
 80069ac:	3384      	adds	r3, #132	@ 0x84
 80069ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	6812      	ldr	r2, [r2, #0]
 80069b4:	4611      	mov	r1, r2
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	01d2      	lsls	r2, r2, #7
 80069ba:	440a      	add	r2, r1
 80069bc:	3284      	adds	r2, #132	@ 0x84
 80069be:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80069c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c8:	69fa      	ldr	r2, [r7, #28]
 80069ca:	fb02 f303 	mul.w	r3, r2, r3
 80069ce:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	6859      	ldr	r1, [r3, #4]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	1acb      	subs	r3, r1, r3
 80069da:	69f9      	ldr	r1, [r7, #28]
 80069dc:	fb01 f303 	mul.w	r3, r1, r3
 80069e0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80069e2:	68f9      	ldr	r1, [r7, #12]
 80069e4:	6809      	ldr	r1, [r1, #0]
 80069e6:	4608      	mov	r0, r1
 80069e8:	6879      	ldr	r1, [r7, #4]
 80069ea:	01c9      	lsls	r1, r1, #7
 80069ec:	4401      	add	r1, r0
 80069ee:	3184      	adds	r1, #132	@ 0x84
 80069f0:	4313      	orrs	r3, r2
 80069f2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	01db      	lsls	r3, r3, #7
 80069fe:	4413      	add	r3, r2
 8006a00:	3384      	adds	r3, #132	@ 0x84
 8006a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	6812      	ldr	r2, [r2, #0]
 8006a08:	4611      	mov	r1, r2
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	01d2      	lsls	r2, r2, #7
 8006a0e:	440a      	add	r2, r1
 8006a10:	3284      	adds	r2, #132	@ 0x84
 8006a12:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006a16:	f023 0307 	bic.w	r3, r3, #7
 8006a1a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	461a      	mov	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	01db      	lsls	r3, r3, #7
 8006a26:	4413      	add	r3, r2
 8006a28:	3384      	adds	r3, #132	@ 0x84
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a30:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	01db      	lsls	r3, r3, #7
 8006a3c:	4413      	add	r3, r2
 8006a3e:	3384      	adds	r3, #132	@ 0x84
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	6812      	ldr	r2, [r2, #0]
 8006a46:	4611      	mov	r1, r2
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	01d2      	lsls	r2, r2, #7
 8006a4c:	440a      	add	r2, r1
 8006a4e:	3284      	adds	r2, #132	@ 0x84
 8006a50:	f043 0301 	orr.w	r3, r3, #1
 8006a54:	6013      	str	r3, [r2, #0]
}
 8006a56:	bf00      	nop
 8006a58:	3724      	adds	r7, #36	@ 0x24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
	...

08006a64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e267      	b.n	8006f46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d075      	beq.n	8006b6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a82:	4b88      	ldr	r3, [pc, #544]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f003 030c 	and.w	r3, r3, #12
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	d00c      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a8e:	4b85      	ldr	r3, [pc, #532]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	d112      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a9a:	4b82      	ldr	r3, [pc, #520]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006aa2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006aa6:	d10b      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aa8:	4b7e      	ldr	r3, [pc, #504]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d05b      	beq.n	8006b6c <HAL_RCC_OscConfig+0x108>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d157      	bne.n	8006b6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e242      	b.n	8006f46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ac8:	d106      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x74>
 8006aca:	4b76      	ldr	r3, [pc, #472]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a75      	ldr	r2, [pc, #468]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ad4:	6013      	str	r3, [r2, #0]
 8006ad6:	e01d      	b.n	8006b14 <HAL_RCC_OscConfig+0xb0>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ae0:	d10c      	bne.n	8006afc <HAL_RCC_OscConfig+0x98>
 8006ae2:	4b70      	ldr	r3, [pc, #448]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a6f      	ldr	r2, [pc, #444]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006ae8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	4b6d      	ldr	r3, [pc, #436]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a6c      	ldr	r2, [pc, #432]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006af8:	6013      	str	r3, [r2, #0]
 8006afa:	e00b      	b.n	8006b14 <HAL_RCC_OscConfig+0xb0>
 8006afc:	4b69      	ldr	r3, [pc, #420]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a68      	ldr	r2, [pc, #416]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006b02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b06:	6013      	str	r3, [r2, #0]
 8006b08:	4b66      	ldr	r3, [pc, #408]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a65      	ldr	r2, [pc, #404]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006b0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d013      	beq.n	8006b44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b1c:	f7fd ffd2 	bl	8004ac4 <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b22:	e008      	b.n	8006b36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b24:	f7fd ffce 	bl	8004ac4 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b64      	cmp	r3, #100	@ 0x64
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e207      	b.n	8006f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b36:	4b5b      	ldr	r3, [pc, #364]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d0f0      	beq.n	8006b24 <HAL_RCC_OscConfig+0xc0>
 8006b42:	e014      	b.n	8006b6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b44:	f7fd ffbe 	bl	8004ac4 <HAL_GetTick>
 8006b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b4a:	e008      	b.n	8006b5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b4c:	f7fd ffba 	bl	8004ac4 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	2b64      	cmp	r3, #100	@ 0x64
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e1f3      	b.n	8006f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b5e:	4b51      	ldr	r3, [pc, #324]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1f0      	bne.n	8006b4c <HAL_RCC_OscConfig+0xe8>
 8006b6a:	e000      	b.n	8006b6e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d063      	beq.n	8006c42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 030c 	and.w	r3, r3, #12
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00b      	beq.n	8006b9e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b86:	4b47      	ldr	r3, [pc, #284]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	d11c      	bne.n	8006bcc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b92:	4b44      	ldr	r3, [pc, #272]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d116      	bne.n	8006bcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b9e:	4b41      	ldr	r3, [pc, #260]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d005      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x152>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d001      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e1c7      	b.n	8006f46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	00db      	lsls	r3, r3, #3
 8006bc4:	4937      	ldr	r1, [pc, #220]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bca:	e03a      	b.n	8006c42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d020      	beq.n	8006c16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bd4:	4b34      	ldr	r3, [pc, #208]	@ (8006ca8 <HAL_RCC_OscConfig+0x244>)
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bda:	f7fd ff73 	bl	8004ac4 <HAL_GetTick>
 8006bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006be0:	e008      	b.n	8006bf4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006be2:	f7fd ff6f 	bl	8004ac4 <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d901      	bls.n	8006bf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e1a8      	b.n	8006f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d0f0      	beq.n	8006be2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c00:	4b28      	ldr	r3, [pc, #160]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	4925      	ldr	r1, [pc, #148]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	600b      	str	r3, [r1, #0]
 8006c14:	e015      	b.n	8006c42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c16:	4b24      	ldr	r3, [pc, #144]	@ (8006ca8 <HAL_RCC_OscConfig+0x244>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c1c:	f7fd ff52 	bl	8004ac4 <HAL_GetTick>
 8006c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c22:	e008      	b.n	8006c36 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c24:	f7fd ff4e 	bl	8004ac4 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d901      	bls.n	8006c36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e187      	b.n	8006f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c36:	4b1b      	ldr	r3, [pc, #108]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1f0      	bne.n	8006c24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d036      	beq.n	8006cbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d016      	beq.n	8006c84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c56:	4b15      	ldr	r3, [pc, #84]	@ (8006cac <HAL_RCC_OscConfig+0x248>)
 8006c58:	2201      	movs	r2, #1
 8006c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c5c:	f7fd ff32 	bl	8004ac4 <HAL_GetTick>
 8006c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c64:	f7fd ff2e 	bl	8004ac4 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e167      	b.n	8006f46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c76:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca4 <HAL_RCC_OscConfig+0x240>)
 8006c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0f0      	beq.n	8006c64 <HAL_RCC_OscConfig+0x200>
 8006c82:	e01b      	b.n	8006cbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c84:	4b09      	ldr	r3, [pc, #36]	@ (8006cac <HAL_RCC_OscConfig+0x248>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c8a:	f7fd ff1b 	bl	8004ac4 <HAL_GetTick>
 8006c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c90:	e00e      	b.n	8006cb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c92:	f7fd ff17 	bl	8004ac4 <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d907      	bls.n	8006cb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e150      	b.n	8006f46 <HAL_RCC_OscConfig+0x4e2>
 8006ca4:	40023800 	.word	0x40023800
 8006ca8:	42470000 	.word	0x42470000
 8006cac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cb0:	4b88      	ldr	r3, [pc, #544]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006cb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1ea      	bne.n	8006c92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 8097 	beq.w	8006df8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cce:	4b81      	ldr	r3, [pc, #516]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10f      	bne.n	8006cfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60bb      	str	r3, [r7, #8]
 8006cde:	4b7d      	ldr	r3, [pc, #500]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce2:	4a7c      	ldr	r2, [pc, #496]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006cea:	4b7a      	ldr	r3, [pc, #488]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cf2:	60bb      	str	r3, [r7, #8]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cfa:	4b77      	ldr	r3, [pc, #476]	@ (8006ed8 <HAL_RCC_OscConfig+0x474>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d118      	bne.n	8006d38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d06:	4b74      	ldr	r3, [pc, #464]	@ (8006ed8 <HAL_RCC_OscConfig+0x474>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a73      	ldr	r2, [pc, #460]	@ (8006ed8 <HAL_RCC_OscConfig+0x474>)
 8006d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d12:	f7fd fed7 	bl	8004ac4 <HAL_GetTick>
 8006d16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d18:	e008      	b.n	8006d2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d1a:	f7fd fed3 	bl	8004ac4 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d901      	bls.n	8006d2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e10c      	b.n	8006f46 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d2c:	4b6a      	ldr	r3, [pc, #424]	@ (8006ed8 <HAL_RCC_OscConfig+0x474>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d0f0      	beq.n	8006d1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d106      	bne.n	8006d4e <HAL_RCC_OscConfig+0x2ea>
 8006d40:	4b64      	ldr	r3, [pc, #400]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d44:	4a63      	ldr	r2, [pc, #396]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006d46:	f043 0301 	orr.w	r3, r3, #1
 8006d4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d4c:	e01c      	b.n	8006d88 <HAL_RCC_OscConfig+0x324>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	2b05      	cmp	r3, #5
 8006d54:	d10c      	bne.n	8006d70 <HAL_RCC_OscConfig+0x30c>
 8006d56:	4b5f      	ldr	r3, [pc, #380]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d5a:	4a5e      	ldr	r2, [pc, #376]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006d5c:	f043 0304 	orr.w	r3, r3, #4
 8006d60:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d62:	4b5c      	ldr	r3, [pc, #368]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d66:	4a5b      	ldr	r2, [pc, #364]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006d68:	f043 0301 	orr.w	r3, r3, #1
 8006d6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d6e:	e00b      	b.n	8006d88 <HAL_RCC_OscConfig+0x324>
 8006d70:	4b58      	ldr	r3, [pc, #352]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d74:	4a57      	ldr	r2, [pc, #348]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006d76:	f023 0301 	bic.w	r3, r3, #1
 8006d7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d7c:	4b55      	ldr	r3, [pc, #340]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d80:	4a54      	ldr	r2, [pc, #336]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006d82:	f023 0304 	bic.w	r3, r3, #4
 8006d86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d015      	beq.n	8006dbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d90:	f7fd fe98 	bl	8004ac4 <HAL_GetTick>
 8006d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d96:	e00a      	b.n	8006dae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d98:	f7fd fe94 	bl	8004ac4 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e0cb      	b.n	8006f46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dae:	4b49      	ldr	r3, [pc, #292]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0ee      	beq.n	8006d98 <HAL_RCC_OscConfig+0x334>
 8006dba:	e014      	b.n	8006de6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dbc:	f7fd fe82 	bl	8004ac4 <HAL_GetTick>
 8006dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dc2:	e00a      	b.n	8006dda <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dc4:	f7fd fe7e 	bl	8004ac4 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e0b5      	b.n	8006f46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dda:	4b3e      	ldr	r3, [pc, #248]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1ee      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d105      	bne.n	8006df8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dec:	4b39      	ldr	r3, [pc, #228]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df0:	4a38      	ldr	r2, [pc, #224]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006df2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006df6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 80a1 	beq.w	8006f44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e02:	4b34      	ldr	r3, [pc, #208]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 030c 	and.w	r3, r3, #12
 8006e0a:	2b08      	cmp	r3, #8
 8006e0c:	d05c      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d141      	bne.n	8006e9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e16:	4b31      	ldr	r3, [pc, #196]	@ (8006edc <HAL_RCC_OscConfig+0x478>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e1c:	f7fd fe52 	bl	8004ac4 <HAL_GetTick>
 8006e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e22:	e008      	b.n	8006e36 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e24:	f7fd fe4e 	bl	8004ac4 <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d901      	bls.n	8006e36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e087      	b.n	8006f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e36:	4b27      	ldr	r3, [pc, #156]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1f0      	bne.n	8006e24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	69da      	ldr	r2, [r3, #28]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e50:	019b      	lsls	r3, r3, #6
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e58:	085b      	lsrs	r3, r3, #1
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	041b      	lsls	r3, r3, #16
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e64:	061b      	lsls	r3, r3, #24
 8006e66:	491b      	ldr	r1, [pc, #108]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8006edc <HAL_RCC_OscConfig+0x478>)
 8006e6e:	2201      	movs	r2, #1
 8006e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e72:	f7fd fe27 	bl	8004ac4 <HAL_GetTick>
 8006e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e78:	e008      	b.n	8006e8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e7a:	f7fd fe23 	bl	8004ac4 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d901      	bls.n	8006e8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e05c      	b.n	8006f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e8c:	4b11      	ldr	r3, [pc, #68]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0f0      	beq.n	8006e7a <HAL_RCC_OscConfig+0x416>
 8006e98:	e054      	b.n	8006f44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e9a:	4b10      	ldr	r3, [pc, #64]	@ (8006edc <HAL_RCC_OscConfig+0x478>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ea0:	f7fd fe10 	bl	8004ac4 <HAL_GetTick>
 8006ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ea6:	e008      	b.n	8006eba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ea8:	f7fd fe0c 	bl	8004ac4 <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d901      	bls.n	8006eba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e045      	b.n	8006f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eba:	4b06      	ldr	r3, [pc, #24]	@ (8006ed4 <HAL_RCC_OscConfig+0x470>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1f0      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x444>
 8006ec6:	e03d      	b.n	8006f44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d107      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e038      	b.n	8006f46 <HAL_RCC_OscConfig+0x4e2>
 8006ed4:	40023800 	.word	0x40023800
 8006ed8:	40007000 	.word	0x40007000
 8006edc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8006f50 <HAL_RCC_OscConfig+0x4ec>)
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d028      	beq.n	8006f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d121      	bne.n	8006f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d11a      	bne.n	8006f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006f10:	4013      	ands	r3, r2
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d111      	bne.n	8006f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f26:	085b      	lsrs	r3, r3, #1
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d107      	bne.n	8006f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d001      	beq.n	8006f44 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e000      	b.n	8006f46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	40023800 	.word	0x40023800

08006f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e0cc      	b.n	8007102 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f68:	4b68      	ldr	r3, [pc, #416]	@ (800710c <HAL_RCC_ClockConfig+0x1b8>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 030f 	and.w	r3, r3, #15
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d90c      	bls.n	8006f90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f76:	4b65      	ldr	r3, [pc, #404]	@ (800710c <HAL_RCC_ClockConfig+0x1b8>)
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	b2d2      	uxtb	r2, r2
 8006f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f7e:	4b63      	ldr	r3, [pc, #396]	@ (800710c <HAL_RCC_ClockConfig+0x1b8>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 030f 	and.w	r3, r3, #15
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d001      	beq.n	8006f90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e0b8      	b.n	8007102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0302 	and.w	r3, r3, #2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d020      	beq.n	8006fde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d005      	beq.n	8006fb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fa8:	4b59      	ldr	r3, [pc, #356]	@ (8007110 <HAL_RCC_ClockConfig+0x1bc>)
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	4a58      	ldr	r2, [pc, #352]	@ (8007110 <HAL_RCC_ClockConfig+0x1bc>)
 8006fae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006fb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0308 	and.w	r3, r3, #8
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d005      	beq.n	8006fcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fc0:	4b53      	ldr	r3, [pc, #332]	@ (8007110 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	4a52      	ldr	r2, [pc, #328]	@ (8007110 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006fca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fcc:	4b50      	ldr	r3, [pc, #320]	@ (8007110 <HAL_RCC_ClockConfig+0x1bc>)
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	494d      	ldr	r1, [pc, #308]	@ (8007110 <HAL_RCC_ClockConfig+0x1bc>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d044      	beq.n	8007074 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d107      	bne.n	8007002 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ff2:	4b47      	ldr	r3, [pc, #284]	@ (8007110 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d119      	bne.n	8007032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e07f      	b.n	8007102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	2b02      	cmp	r3, #2
 8007008:	d003      	beq.n	8007012 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800700e:	2b03      	cmp	r3, #3
 8007010:	d107      	bne.n	8007022 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007012:	4b3f      	ldr	r3, [pc, #252]	@ (8007110 <HAL_RCC_ClockConfig+0x1bc>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d109      	bne.n	8007032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e06f      	b.n	8007102 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007022:	4b3b      	ldr	r3, [pc, #236]	@ (8007110 <HAL_RCC_ClockConfig+0x1bc>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e067      	b.n	8007102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007032:	4b37      	ldr	r3, [pc, #220]	@ (8007110 <HAL_RCC_ClockConfig+0x1bc>)
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f023 0203 	bic.w	r2, r3, #3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	4934      	ldr	r1, [pc, #208]	@ (8007110 <HAL_RCC_ClockConfig+0x1bc>)
 8007040:	4313      	orrs	r3, r2
 8007042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007044:	f7fd fd3e 	bl	8004ac4 <HAL_GetTick>
 8007048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800704a:	e00a      	b.n	8007062 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800704c:	f7fd fd3a 	bl	8004ac4 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800705a:	4293      	cmp	r3, r2
 800705c:	d901      	bls.n	8007062 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e04f      	b.n	8007102 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007062:	4b2b      	ldr	r3, [pc, #172]	@ (8007110 <HAL_RCC_ClockConfig+0x1bc>)
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f003 020c 	and.w	r2, r3, #12
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	429a      	cmp	r2, r3
 8007072:	d1eb      	bne.n	800704c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007074:	4b25      	ldr	r3, [pc, #148]	@ (800710c <HAL_RCC_ClockConfig+0x1b8>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 030f 	and.w	r3, r3, #15
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	429a      	cmp	r2, r3
 8007080:	d20c      	bcs.n	800709c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007082:	4b22      	ldr	r3, [pc, #136]	@ (800710c <HAL_RCC_ClockConfig+0x1b8>)
 8007084:	683a      	ldr	r2, [r7, #0]
 8007086:	b2d2      	uxtb	r2, r2
 8007088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800708a:	4b20      	ldr	r3, [pc, #128]	@ (800710c <HAL_RCC_ClockConfig+0x1b8>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 030f 	and.w	r3, r3, #15
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	d001      	beq.n	800709c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e032      	b.n	8007102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d008      	beq.n	80070ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070a8:	4b19      	ldr	r3, [pc, #100]	@ (8007110 <HAL_RCC_ClockConfig+0x1bc>)
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	4916      	ldr	r1, [pc, #88]	@ (8007110 <HAL_RCC_ClockConfig+0x1bc>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0308 	and.w	r3, r3, #8
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d009      	beq.n	80070da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070c6:	4b12      	ldr	r3, [pc, #72]	@ (8007110 <HAL_RCC_ClockConfig+0x1bc>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	490e      	ldr	r1, [pc, #56]	@ (8007110 <HAL_RCC_ClockConfig+0x1bc>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80070da:	f000 f821 	bl	8007120 <HAL_RCC_GetSysClockFreq>
 80070de:	4602      	mov	r2, r0
 80070e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007110 <HAL_RCC_ClockConfig+0x1bc>)
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	091b      	lsrs	r3, r3, #4
 80070e6:	f003 030f 	and.w	r3, r3, #15
 80070ea:	490a      	ldr	r1, [pc, #40]	@ (8007114 <HAL_RCC_ClockConfig+0x1c0>)
 80070ec:	5ccb      	ldrb	r3, [r1, r3]
 80070ee:	fa22 f303 	lsr.w	r3, r2, r3
 80070f2:	4a09      	ldr	r2, [pc, #36]	@ (8007118 <HAL_RCC_ClockConfig+0x1c4>)
 80070f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80070f6:	4b09      	ldr	r3, [pc, #36]	@ (800711c <HAL_RCC_ClockConfig+0x1c8>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fd fc9e 	bl	8004a3c <HAL_InitTick>

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	40023c00 	.word	0x40023c00
 8007110:	40023800 	.word	0x40023800
 8007114:	08009dc4 	.word	0x08009dc4
 8007118:	20000018 	.word	0x20000018
 800711c:	2000001c 	.word	0x2000001c

08007120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007124:	b094      	sub	sp, #80	@ 0x50
 8007126:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007138:	4b79      	ldr	r3, [pc, #484]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x200>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f003 030c 	and.w	r3, r3, #12
 8007140:	2b08      	cmp	r3, #8
 8007142:	d00d      	beq.n	8007160 <HAL_RCC_GetSysClockFreq+0x40>
 8007144:	2b08      	cmp	r3, #8
 8007146:	f200 80e1 	bhi.w	800730c <HAL_RCC_GetSysClockFreq+0x1ec>
 800714a:	2b00      	cmp	r3, #0
 800714c:	d002      	beq.n	8007154 <HAL_RCC_GetSysClockFreq+0x34>
 800714e:	2b04      	cmp	r3, #4
 8007150:	d003      	beq.n	800715a <HAL_RCC_GetSysClockFreq+0x3a>
 8007152:	e0db      	b.n	800730c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007154:	4b73      	ldr	r3, [pc, #460]	@ (8007324 <HAL_RCC_GetSysClockFreq+0x204>)
 8007156:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007158:	e0db      	b.n	8007312 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800715a:	4b73      	ldr	r3, [pc, #460]	@ (8007328 <HAL_RCC_GetSysClockFreq+0x208>)
 800715c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800715e:	e0d8      	b.n	8007312 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007160:	4b6f      	ldr	r3, [pc, #444]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x200>)
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007168:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800716a:	4b6d      	ldr	r3, [pc, #436]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x200>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d063      	beq.n	800723e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007176:	4b6a      	ldr	r3, [pc, #424]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x200>)
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	099b      	lsrs	r3, r3, #6
 800717c:	2200      	movs	r2, #0
 800717e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007180:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007188:	633b      	str	r3, [r7, #48]	@ 0x30
 800718a:	2300      	movs	r3, #0
 800718c:	637b      	str	r3, [r7, #52]	@ 0x34
 800718e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007192:	4622      	mov	r2, r4
 8007194:	462b      	mov	r3, r5
 8007196:	f04f 0000 	mov.w	r0, #0
 800719a:	f04f 0100 	mov.w	r1, #0
 800719e:	0159      	lsls	r1, r3, #5
 80071a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071a4:	0150      	lsls	r0, r2, #5
 80071a6:	4602      	mov	r2, r0
 80071a8:	460b      	mov	r3, r1
 80071aa:	4621      	mov	r1, r4
 80071ac:	1a51      	subs	r1, r2, r1
 80071ae:	6139      	str	r1, [r7, #16]
 80071b0:	4629      	mov	r1, r5
 80071b2:	eb63 0301 	sbc.w	r3, r3, r1
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	f04f 0200 	mov.w	r2, #0
 80071bc:	f04f 0300 	mov.w	r3, #0
 80071c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071c4:	4659      	mov	r1, fp
 80071c6:	018b      	lsls	r3, r1, #6
 80071c8:	4651      	mov	r1, sl
 80071ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071ce:	4651      	mov	r1, sl
 80071d0:	018a      	lsls	r2, r1, #6
 80071d2:	4651      	mov	r1, sl
 80071d4:	ebb2 0801 	subs.w	r8, r2, r1
 80071d8:	4659      	mov	r1, fp
 80071da:	eb63 0901 	sbc.w	r9, r3, r1
 80071de:	f04f 0200 	mov.w	r2, #0
 80071e2:	f04f 0300 	mov.w	r3, #0
 80071e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071f2:	4690      	mov	r8, r2
 80071f4:	4699      	mov	r9, r3
 80071f6:	4623      	mov	r3, r4
 80071f8:	eb18 0303 	adds.w	r3, r8, r3
 80071fc:	60bb      	str	r3, [r7, #8]
 80071fe:	462b      	mov	r3, r5
 8007200:	eb49 0303 	adc.w	r3, r9, r3
 8007204:	60fb      	str	r3, [r7, #12]
 8007206:	f04f 0200 	mov.w	r2, #0
 800720a:	f04f 0300 	mov.w	r3, #0
 800720e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007212:	4629      	mov	r1, r5
 8007214:	024b      	lsls	r3, r1, #9
 8007216:	4621      	mov	r1, r4
 8007218:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800721c:	4621      	mov	r1, r4
 800721e:	024a      	lsls	r2, r1, #9
 8007220:	4610      	mov	r0, r2
 8007222:	4619      	mov	r1, r3
 8007224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007226:	2200      	movs	r2, #0
 8007228:	62bb      	str	r3, [r7, #40]	@ 0x28
 800722a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800722c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007230:	f7f8 ffdc 	bl	80001ec <__aeabi_uldivmod>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	4613      	mov	r3, r2
 800723a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800723c:	e058      	b.n	80072f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800723e:	4b38      	ldr	r3, [pc, #224]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x200>)
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	099b      	lsrs	r3, r3, #6
 8007244:	2200      	movs	r2, #0
 8007246:	4618      	mov	r0, r3
 8007248:	4611      	mov	r1, r2
 800724a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800724e:	623b      	str	r3, [r7, #32]
 8007250:	2300      	movs	r3, #0
 8007252:	627b      	str	r3, [r7, #36]	@ 0x24
 8007254:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007258:	4642      	mov	r2, r8
 800725a:	464b      	mov	r3, r9
 800725c:	f04f 0000 	mov.w	r0, #0
 8007260:	f04f 0100 	mov.w	r1, #0
 8007264:	0159      	lsls	r1, r3, #5
 8007266:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800726a:	0150      	lsls	r0, r2, #5
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4641      	mov	r1, r8
 8007272:	ebb2 0a01 	subs.w	sl, r2, r1
 8007276:	4649      	mov	r1, r9
 8007278:	eb63 0b01 	sbc.w	fp, r3, r1
 800727c:	f04f 0200 	mov.w	r2, #0
 8007280:	f04f 0300 	mov.w	r3, #0
 8007284:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007288:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800728c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007290:	ebb2 040a 	subs.w	r4, r2, sl
 8007294:	eb63 050b 	sbc.w	r5, r3, fp
 8007298:	f04f 0200 	mov.w	r2, #0
 800729c:	f04f 0300 	mov.w	r3, #0
 80072a0:	00eb      	lsls	r3, r5, #3
 80072a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072a6:	00e2      	lsls	r2, r4, #3
 80072a8:	4614      	mov	r4, r2
 80072aa:	461d      	mov	r5, r3
 80072ac:	4643      	mov	r3, r8
 80072ae:	18e3      	adds	r3, r4, r3
 80072b0:	603b      	str	r3, [r7, #0]
 80072b2:	464b      	mov	r3, r9
 80072b4:	eb45 0303 	adc.w	r3, r5, r3
 80072b8:	607b      	str	r3, [r7, #4]
 80072ba:	f04f 0200 	mov.w	r2, #0
 80072be:	f04f 0300 	mov.w	r3, #0
 80072c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072c6:	4629      	mov	r1, r5
 80072c8:	028b      	lsls	r3, r1, #10
 80072ca:	4621      	mov	r1, r4
 80072cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072d0:	4621      	mov	r1, r4
 80072d2:	028a      	lsls	r2, r1, #10
 80072d4:	4610      	mov	r0, r2
 80072d6:	4619      	mov	r1, r3
 80072d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072da:	2200      	movs	r2, #0
 80072dc:	61bb      	str	r3, [r7, #24]
 80072de:	61fa      	str	r2, [r7, #28]
 80072e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072e4:	f7f8 ff82 	bl	80001ec <__aeabi_uldivmod>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4613      	mov	r3, r2
 80072ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80072f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x200>)
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	0c1b      	lsrs	r3, r3, #16
 80072f6:	f003 0303 	and.w	r3, r3, #3
 80072fa:	3301      	adds	r3, #1
 80072fc:	005b      	lsls	r3, r3, #1
 80072fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007300:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007302:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007304:	fbb2 f3f3 	udiv	r3, r2, r3
 8007308:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800730a:	e002      	b.n	8007312 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800730c:	4b05      	ldr	r3, [pc, #20]	@ (8007324 <HAL_RCC_GetSysClockFreq+0x204>)
 800730e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007314:	4618      	mov	r0, r3
 8007316:	3750      	adds	r7, #80	@ 0x50
 8007318:	46bd      	mov	sp, r7
 800731a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800731e:	bf00      	nop
 8007320:	40023800 	.word	0x40023800
 8007324:	00f42400 	.word	0x00f42400
 8007328:	007a1200 	.word	0x007a1200

0800732c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800732c:	b480      	push	{r7}
 800732e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007330:	4b03      	ldr	r3, [pc, #12]	@ (8007340 <HAL_RCC_GetHCLKFreq+0x14>)
 8007332:	681b      	ldr	r3, [r3, #0]
}
 8007334:	4618      	mov	r0, r3
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	20000018 	.word	0x20000018

08007344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007348:	f7ff fff0 	bl	800732c <HAL_RCC_GetHCLKFreq>
 800734c:	4602      	mov	r2, r0
 800734e:	4b05      	ldr	r3, [pc, #20]	@ (8007364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	0a9b      	lsrs	r3, r3, #10
 8007354:	f003 0307 	and.w	r3, r3, #7
 8007358:	4903      	ldr	r1, [pc, #12]	@ (8007368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800735a:	5ccb      	ldrb	r3, [r1, r3]
 800735c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007360:	4618      	mov	r0, r3
 8007362:	bd80      	pop	{r7, pc}
 8007364:	40023800 	.word	0x40023800
 8007368:	08009dd4 	.word	0x08009dd4

0800736c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10b      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007390:	2b00      	cmp	r3, #0
 8007392:	d105      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800739c:	2b00      	cmp	r3, #0
 800739e:	d075      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073a0:	4b91      	ldr	r3, [pc, #580]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073a6:	f7fd fb8d 	bl	8004ac4 <HAL_GetTick>
 80073aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073ac:	e008      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80073ae:	f7fd fb89 	bl	8004ac4 <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d901      	bls.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e189      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073c0:	4b8a      	ldr	r3, [pc, #552]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1f0      	bne.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d009      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	019a      	lsls	r2, r3, #6
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	071b      	lsls	r3, r3, #28
 80073e4:	4981      	ldr	r1, [pc, #516]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0302 	and.w	r3, r3, #2
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d01f      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073f8:	4b7c      	ldr	r3, [pc, #496]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073fe:	0f1b      	lsrs	r3, r3, #28
 8007400:	f003 0307 	and.w	r3, r3, #7
 8007404:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	019a      	lsls	r2, r3, #6
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	061b      	lsls	r3, r3, #24
 8007412:	431a      	orrs	r2, r3
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	071b      	lsls	r3, r3, #28
 8007418:	4974      	ldr	r1, [pc, #464]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800741a:	4313      	orrs	r3, r2
 800741c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007420:	4b72      	ldr	r3, [pc, #456]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007422:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007426:	f023 021f 	bic.w	r2, r3, #31
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	3b01      	subs	r3, #1
 8007430:	496e      	ldr	r1, [pc, #440]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007432:	4313      	orrs	r3, r2
 8007434:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00d      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	019a      	lsls	r2, r3, #6
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	061b      	lsls	r3, r3, #24
 8007450:	431a      	orrs	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	071b      	lsls	r3, r3, #28
 8007458:	4964      	ldr	r1, [pc, #400]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800745a:	4313      	orrs	r3, r2
 800745c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007460:	4b61      	ldr	r3, [pc, #388]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007462:	2201      	movs	r2, #1
 8007464:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007466:	f7fd fb2d 	bl	8004ac4 <HAL_GetTick>
 800746a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800746c:	e008      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800746e:	f7fd fb29 	bl	8004ac4 <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	2b02      	cmp	r3, #2
 800747a:	d901      	bls.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e129      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007480:	4b5a      	ldr	r3, [pc, #360]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d0f0      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b00      	cmp	r3, #0
 8007496:	d105      	bne.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d079      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80074a4:	4b52      	ldr	r3, [pc, #328]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074aa:	f7fd fb0b 	bl	8004ac4 <HAL_GetTick>
 80074ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074b0:	e008      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80074b2:	f7fd fb07 	bl	8004ac4 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d901      	bls.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e107      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074c4:	4b49      	ldr	r3, [pc, #292]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074d0:	d0ef      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0304 	and.w	r3, r3, #4
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d020      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80074de:	4b43      	ldr	r3, [pc, #268]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074e4:	0f1b      	lsrs	r3, r3, #28
 80074e6:	f003 0307 	and.w	r3, r3, #7
 80074ea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	019a      	lsls	r2, r3, #6
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	061b      	lsls	r3, r3, #24
 80074f8:	431a      	orrs	r2, r3
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	071b      	lsls	r3, r3, #28
 80074fe:	493b      	ldr	r1, [pc, #236]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007500:	4313      	orrs	r3, r2
 8007502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007506:	4b39      	ldr	r3, [pc, #228]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800750c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	3b01      	subs	r3, #1
 8007516:	021b      	lsls	r3, r3, #8
 8007518:	4934      	ldr	r1, [pc, #208]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800751a:	4313      	orrs	r3, r2
 800751c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0308 	and.w	r3, r3, #8
 8007528:	2b00      	cmp	r3, #0
 800752a:	d01e      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800752c:	4b2f      	ldr	r3, [pc, #188]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800752e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007532:	0e1b      	lsrs	r3, r3, #24
 8007534:	f003 030f 	and.w	r3, r3, #15
 8007538:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	019a      	lsls	r2, r3, #6
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	061b      	lsls	r3, r3, #24
 8007544:	431a      	orrs	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	071b      	lsls	r3, r3, #28
 800754c:	4927      	ldr	r1, [pc, #156]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800754e:	4313      	orrs	r3, r2
 8007550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007554:	4b25      	ldr	r3, [pc, #148]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007556:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800755a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007562:	4922      	ldr	r1, [pc, #136]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007564:	4313      	orrs	r3, r2
 8007566:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800756a:	4b21      	ldr	r3, [pc, #132]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800756c:	2201      	movs	r2, #1
 800756e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007570:	f7fd faa8 	bl	8004ac4 <HAL_GetTick>
 8007574:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007576:	e008      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007578:	f7fd faa4 	bl	8004ac4 <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	2b02      	cmp	r3, #2
 8007584:	d901      	bls.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e0a4      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800758a:	4b18      	ldr	r3, [pc, #96]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007592:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007596:	d1ef      	bne.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0320 	and.w	r3, r3, #32
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 808b 	beq.w	80076bc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80075a6:	2300      	movs	r3, #0
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	4b10      	ldr	r3, [pc, #64]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ae:	4a0f      	ldr	r2, [pc, #60]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80075b6:	4b0d      	ldr	r3, [pc, #52]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80075c2:	4b0c      	ldr	r3, [pc, #48]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a0b      	ldr	r2, [pc, #44]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80075c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80075ce:	f7fd fa79 	bl	8004ac4 <HAL_GetTick>
 80075d2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80075d4:	e010      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075d6:	f7fd fa75 	bl	8004ac4 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d909      	bls.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e075      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80075e8:	42470068 	.word	0x42470068
 80075ec:	40023800 	.word	0x40023800
 80075f0:	42470070 	.word	0x42470070
 80075f4:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80075f8:	4b38      	ldr	r3, [pc, #224]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0e8      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007604:	4b36      	ldr	r3, [pc, #216]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007608:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800760c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d02f      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007618:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	429a      	cmp	r2, r3
 8007620:	d028      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007622:	4b2f      	ldr	r3, [pc, #188]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007626:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800762a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800762c:	4b2d      	ldr	r3, [pc, #180]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800762e:	2201      	movs	r2, #1
 8007630:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007632:	4b2c      	ldr	r3, [pc, #176]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007634:	2200      	movs	r2, #0
 8007636:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007638:	4a29      	ldr	r2, [pc, #164]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800763e:	4b28      	ldr	r3, [pc, #160]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b01      	cmp	r3, #1
 8007648:	d114      	bne.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800764a:	f7fd fa3b 	bl	8004ac4 <HAL_GetTick>
 800764e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007650:	e00a      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007652:	f7fd fa37 	bl	8004ac4 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007660:	4293      	cmp	r3, r2
 8007662:	d901      	bls.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e035      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007668:	4b1d      	ldr	r3, [pc, #116]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800766a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800766c:	f003 0302 	and.w	r3, r3, #2
 8007670:	2b00      	cmp	r3, #0
 8007672:	d0ee      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007678:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800767c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007680:	d10d      	bne.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007682:	4b17      	ldr	r3, [pc, #92]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007696:	4912      	ldr	r1, [pc, #72]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007698:	4313      	orrs	r3, r2
 800769a:	608b      	str	r3, [r1, #8]
 800769c:	e005      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800769e:	4b10      	ldr	r3, [pc, #64]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	4a0f      	ldr	r2, [pc, #60]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076a4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80076a8:	6093      	str	r3, [r2, #8]
 80076aa:	4b0d      	ldr	r3, [pc, #52]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076ac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076b6:	490a      	ldr	r1, [pc, #40]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0310 	and.w	r3, r3, #16
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d004      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80076ce:	4b06      	ldr	r3, [pc, #24]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80076d0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	40007000 	.word	0x40007000
 80076e0:	40023800 	.word	0x40023800
 80076e4:	42470e40 	.word	0x42470e40
 80076e8:	424711e0 	.word	0x424711e0

080076ec <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e01c      	b.n	8007738 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	795b      	ldrb	r3, [r3, #5]
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b00      	cmp	r3, #0
 8007706:	d105      	bne.n	8007714 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7fc fcf2 	bl	80040f8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2202      	movs	r2, #2
 8007718:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f042 0204 	orr.w	r2, r2, #4
 8007728:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	791b      	ldrb	r3, [r3, #4]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d101      	bne.n	800775a <HAL_RNG_GenerateRandomNumber+0x1a>
 8007756:	2302      	movs	r3, #2
 8007758:	e044      	b.n	80077e4 <HAL_RNG_GenerateRandomNumber+0xa4>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	795b      	ldrb	r3, [r3, #5]
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b01      	cmp	r3, #1
 8007768:	d133      	bne.n	80077d2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2202      	movs	r2, #2
 800776e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007770:	f7fd f9a8 	bl	8004ac4 <HAL_GetTick>
 8007774:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007776:	e018      	b.n	80077aa <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007778:	f7fd f9a4 	bl	8004ac4 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	2b02      	cmp	r3, #2
 8007784:	d911      	bls.n	80077aa <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b01      	cmp	r3, #1
 8007792:	d00a      	beq.n	80077aa <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2202      	movs	r2, #2
 800779e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e01c      	b.n	80077e4 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d1df      	bne.n	8007778 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689a      	ldr	r2, [r3, #8]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68da      	ldr	r2, [r3, #12]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	715a      	strb	r2, [r3, #5]
 80077d0:	e004      	b.n	80077dc <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2204      	movs	r2, #4
 80077d6:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	711a      	strb	r2, [r3, #4]

  return status;
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e07b      	b.n	80078f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007802:	2b00      	cmp	r3, #0
 8007804:	d108      	bne.n	8007818 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800780e:	d009      	beq.n	8007824 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	61da      	str	r2, [r3, #28]
 8007816:	e005      	b.n	8007824 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d106      	bne.n	8007844 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7fc fc7c 	bl	800413c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2202      	movs	r2, #2
 8007848:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800785a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800786c:	431a      	orrs	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007876:	431a      	orrs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	431a      	orrs	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	431a      	orrs	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007894:	431a      	orrs	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800789e:	431a      	orrs	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078a8:	ea42 0103 	orr.w	r1, r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	430a      	orrs	r2, r1
 80078ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	0c1b      	lsrs	r3, r3, #16
 80078c2:	f003 0104 	and.w	r1, r3, #4
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ca:	f003 0210 	and.w	r2, r3, #16
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	430a      	orrs	r2, r1
 80078d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	69da      	ldr	r2, [r3, #28]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b082      	sub	sp, #8
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e01a      	b.n	8007946 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2202      	movs	r2, #2
 8007914:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007926:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f7fc fc4f 	bl	80041cc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b088      	sub	sp, #32
 8007952:	af00      	add	r7, sp, #0
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	603b      	str	r3, [r7, #0]
 800795a:	4613      	mov	r3, r2
 800795c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800795e:	f7fd f8b1 	bl	8004ac4 <HAL_GetTick>
 8007962:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007964:	88fb      	ldrh	r3, [r7, #6]
 8007966:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b01      	cmp	r3, #1
 8007972:	d001      	beq.n	8007978 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007974:	2302      	movs	r3, #2
 8007976:	e12a      	b.n	8007bce <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d002      	beq.n	8007984 <HAL_SPI_Transmit+0x36>
 800797e:	88fb      	ldrh	r3, [r7, #6]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e122      	b.n	8007bce <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800798e:	2b01      	cmp	r3, #1
 8007990:	d101      	bne.n	8007996 <HAL_SPI_Transmit+0x48>
 8007992:	2302      	movs	r3, #2
 8007994:	e11b      	b.n	8007bce <HAL_SPI_Transmit+0x280>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2203      	movs	r2, #3
 80079a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	88fa      	ldrh	r2, [r7, #6]
 80079b6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	88fa      	ldrh	r2, [r7, #6]
 80079bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079e4:	d10f      	bne.n	8007a06 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a10:	2b40      	cmp	r3, #64	@ 0x40
 8007a12:	d007      	beq.n	8007a24 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a2c:	d152      	bne.n	8007ad4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d002      	beq.n	8007a3c <HAL_SPI_Transmit+0xee>
 8007a36:	8b7b      	ldrh	r3, [r7, #26]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d145      	bne.n	8007ac8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a40:	881a      	ldrh	r2, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a4c:	1c9a      	adds	r2, r3, #2
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a60:	e032      	b.n	8007ac8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f003 0302 	and.w	r3, r3, #2
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d112      	bne.n	8007a96 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a74:	881a      	ldrh	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a80:	1c9a      	adds	r2, r3, #2
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007a94:	e018      	b.n	8007ac8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a96:	f7fd f815 	bl	8004ac4 <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d803      	bhi.n	8007aae <HAL_SPI_Transmit+0x160>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aac:	d102      	bne.n	8007ab4 <HAL_SPI_Transmit+0x166>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d109      	bne.n	8007ac8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e082      	b.n	8007bce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1c7      	bne.n	8007a62 <HAL_SPI_Transmit+0x114>
 8007ad2:	e053      	b.n	8007b7c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <HAL_SPI_Transmit+0x194>
 8007adc:	8b7b      	ldrh	r3, [r7, #26]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d147      	bne.n	8007b72 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	330c      	adds	r3, #12
 8007aec:	7812      	ldrb	r2, [r2, #0]
 8007aee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	3b01      	subs	r3, #1
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007b08:	e033      	b.n	8007b72 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d113      	bne.n	8007b40 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	330c      	adds	r3, #12
 8007b22:	7812      	ldrb	r2, [r2, #0]
 8007b24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	3b01      	subs	r3, #1
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007b3e:	e018      	b.n	8007b72 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b40:	f7fc ffc0 	bl	8004ac4 <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d803      	bhi.n	8007b58 <HAL_SPI_Transmit+0x20a>
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b56:	d102      	bne.n	8007b5e <HAL_SPI_Transmit+0x210>
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d109      	bne.n	8007b72 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e02d      	b.n	8007bce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1c6      	bne.n	8007b0a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b7c:	69fa      	ldr	r2, [r7, #28]
 8007b7e:	6839      	ldr	r1, [r7, #0]
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 f8bf 	bl	8007d04 <SPI_EndRxTxTransaction>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d002      	beq.n	8007b92 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2220      	movs	r2, #32
 8007b90:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10a      	bne.n	8007bb0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	617b      	str	r3, [r7, #20]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	617b      	str	r3, [r7, #20]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	617b      	str	r3, [r7, #20]
 8007bae:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d001      	beq.n	8007bcc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e000      	b.n	8007bce <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
  }
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3720      	adds	r7, #32
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007be4:	b2db      	uxtb	r3, r3
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
	...

08007bf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b088      	sub	sp, #32
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	603b      	str	r3, [r7, #0]
 8007c00:	4613      	mov	r3, r2
 8007c02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c04:	f7fc ff5e 	bl	8004ac4 <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0c:	1a9b      	subs	r3, r3, r2
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	4413      	add	r3, r2
 8007c12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c14:	f7fc ff56 	bl	8004ac4 <HAL_GetTick>
 8007c18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c1a:	4b39      	ldr	r3, [pc, #228]	@ (8007d00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	015b      	lsls	r3, r3, #5
 8007c20:	0d1b      	lsrs	r3, r3, #20
 8007c22:	69fa      	ldr	r2, [r7, #28]
 8007c24:	fb02 f303 	mul.w	r3, r2, r3
 8007c28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c2a:	e054      	b.n	8007cd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c32:	d050      	beq.n	8007cd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c34:	f7fc ff46 	bl	8004ac4 <HAL_GetTick>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	69fa      	ldr	r2, [r7, #28]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d902      	bls.n	8007c4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d13d      	bne.n	8007cc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c62:	d111      	bne.n	8007c88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c6c:	d004      	beq.n	8007c78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c76:	d107      	bne.n	8007c88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c90:	d10f      	bne.n	8007cb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007cb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e017      	b.n	8007cf6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	689a      	ldr	r2, [r3, #8]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	4013      	ands	r3, r2
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	bf0c      	ite	eq
 8007ce6:	2301      	moveq	r3, #1
 8007ce8:	2300      	movne	r3, #0
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	461a      	mov	r2, r3
 8007cee:	79fb      	ldrb	r3, [r7, #7]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d19b      	bne.n	8007c2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3720      	adds	r7, #32
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20000018 	.word	0x20000018

08007d04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b088      	sub	sp, #32
 8007d08:	af02      	add	r7, sp, #8
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2201      	movs	r2, #1
 8007d18:	2102      	movs	r1, #2
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f7ff ff6a 	bl	8007bf4 <SPI_WaitFlagStateUntilTimeout>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d007      	beq.n	8007d36 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d2a:	f043 0220 	orr.w	r2, r3, #32
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e032      	b.n	8007d9c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d36:	4b1b      	ldr	r3, [pc, #108]	@ (8007da4 <SPI_EndRxTxTransaction+0xa0>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8007da8 <SPI_EndRxTxTransaction+0xa4>)
 8007d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d40:	0d5b      	lsrs	r3, r3, #21
 8007d42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007d46:	fb02 f303 	mul.w	r3, r2, r3
 8007d4a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d54:	d112      	bne.n	8007d7c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	2180      	movs	r1, #128	@ 0x80
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f7ff ff47 	bl	8007bf4 <SPI_WaitFlagStateUntilTimeout>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d016      	beq.n	8007d9a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d70:	f043 0220 	orr.w	r2, r3, #32
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e00f      	b.n	8007d9c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00a      	beq.n	8007d98 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	3b01      	subs	r3, #1
 8007d86:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d92:	2b80      	cmp	r3, #128	@ 0x80
 8007d94:	d0f2      	beq.n	8007d7c <SPI_EndRxTxTransaction+0x78>
 8007d96:	e000      	b.n	8007d9a <SPI_EndRxTxTransaction+0x96>
        break;
 8007d98:	bf00      	nop
  }

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3718      	adds	r7, #24
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	20000018 	.word	0x20000018
 8007da8:	165e9f81 	.word	0x165e9f81

08007dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e041      	b.n	8007e42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d106      	bne.n	8007dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7fc fa18 	bl	8004208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	3304      	adds	r3, #4
 8007de8:	4619      	mov	r1, r3
 8007dea:	4610      	mov	r0, r2
 8007dec:	f000 f89e 	bl	8007f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
	...

08007e4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d001      	beq.n	8007e64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e04e      	b.n	8007f02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68da      	ldr	r2, [r3, #12]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f042 0201 	orr.w	r2, r2, #1
 8007e7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a23      	ldr	r2, [pc, #140]	@ (8007f10 <HAL_TIM_Base_Start_IT+0xc4>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d022      	beq.n	8007ecc <HAL_TIM_Base_Start_IT+0x80>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e8e:	d01d      	beq.n	8007ecc <HAL_TIM_Base_Start_IT+0x80>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a1f      	ldr	r2, [pc, #124]	@ (8007f14 <HAL_TIM_Base_Start_IT+0xc8>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d018      	beq.n	8007ecc <HAL_TIM_Base_Start_IT+0x80>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8007f18 <HAL_TIM_Base_Start_IT+0xcc>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d013      	beq.n	8007ecc <HAL_TIM_Base_Start_IT+0x80>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a1c      	ldr	r2, [pc, #112]	@ (8007f1c <HAL_TIM_Base_Start_IT+0xd0>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d00e      	beq.n	8007ecc <HAL_TIM_Base_Start_IT+0x80>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8007f20 <HAL_TIM_Base_Start_IT+0xd4>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d009      	beq.n	8007ecc <HAL_TIM_Base_Start_IT+0x80>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a19      	ldr	r2, [pc, #100]	@ (8007f24 <HAL_TIM_Base_Start_IT+0xd8>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d004      	beq.n	8007ecc <HAL_TIM_Base_Start_IT+0x80>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a18      	ldr	r2, [pc, #96]	@ (8007f28 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d111      	bne.n	8007ef0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f003 0307 	and.w	r3, r3, #7
 8007ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2b06      	cmp	r3, #6
 8007edc:	d010      	beq.n	8007f00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f042 0201 	orr.w	r2, r2, #1
 8007eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eee:	e007      	b.n	8007f00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f042 0201 	orr.w	r2, r2, #1
 8007efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	40010000 	.word	0x40010000
 8007f14:	40000400 	.word	0x40000400
 8007f18:	40000800 	.word	0x40000800
 8007f1c:	40000c00 	.word	0x40000c00
 8007f20:	40010400 	.word	0x40010400
 8007f24:	40014000 	.word	0x40014000
 8007f28:	40001800 	.word	0x40001800

08007f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a46      	ldr	r2, [pc, #280]	@ (8008058 <TIM_Base_SetConfig+0x12c>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d013      	beq.n	8007f6c <TIM_Base_SetConfig+0x40>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f4a:	d00f      	beq.n	8007f6c <TIM_Base_SetConfig+0x40>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a43      	ldr	r2, [pc, #268]	@ (800805c <TIM_Base_SetConfig+0x130>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d00b      	beq.n	8007f6c <TIM_Base_SetConfig+0x40>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a42      	ldr	r2, [pc, #264]	@ (8008060 <TIM_Base_SetConfig+0x134>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d007      	beq.n	8007f6c <TIM_Base_SetConfig+0x40>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a41      	ldr	r2, [pc, #260]	@ (8008064 <TIM_Base_SetConfig+0x138>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d003      	beq.n	8007f6c <TIM_Base_SetConfig+0x40>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a40      	ldr	r2, [pc, #256]	@ (8008068 <TIM_Base_SetConfig+0x13c>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d108      	bne.n	8007f7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a35      	ldr	r2, [pc, #212]	@ (8008058 <TIM_Base_SetConfig+0x12c>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d02b      	beq.n	8007fde <TIM_Base_SetConfig+0xb2>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f8c:	d027      	beq.n	8007fde <TIM_Base_SetConfig+0xb2>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a32      	ldr	r2, [pc, #200]	@ (800805c <TIM_Base_SetConfig+0x130>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d023      	beq.n	8007fde <TIM_Base_SetConfig+0xb2>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a31      	ldr	r2, [pc, #196]	@ (8008060 <TIM_Base_SetConfig+0x134>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d01f      	beq.n	8007fde <TIM_Base_SetConfig+0xb2>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a30      	ldr	r2, [pc, #192]	@ (8008064 <TIM_Base_SetConfig+0x138>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d01b      	beq.n	8007fde <TIM_Base_SetConfig+0xb2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a2f      	ldr	r2, [pc, #188]	@ (8008068 <TIM_Base_SetConfig+0x13c>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d017      	beq.n	8007fde <TIM_Base_SetConfig+0xb2>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a2e      	ldr	r2, [pc, #184]	@ (800806c <TIM_Base_SetConfig+0x140>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d013      	beq.n	8007fde <TIM_Base_SetConfig+0xb2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8008070 <TIM_Base_SetConfig+0x144>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d00f      	beq.n	8007fde <TIM_Base_SetConfig+0xb2>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a2c      	ldr	r2, [pc, #176]	@ (8008074 <TIM_Base_SetConfig+0x148>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d00b      	beq.n	8007fde <TIM_Base_SetConfig+0xb2>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a2b      	ldr	r2, [pc, #172]	@ (8008078 <TIM_Base_SetConfig+0x14c>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d007      	beq.n	8007fde <TIM_Base_SetConfig+0xb2>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800807c <TIM_Base_SetConfig+0x150>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d003      	beq.n	8007fde <TIM_Base_SetConfig+0xb2>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a29      	ldr	r2, [pc, #164]	@ (8008080 <TIM_Base_SetConfig+0x154>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d108      	bne.n	8007ff0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	689a      	ldr	r2, [r3, #8]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a10      	ldr	r2, [pc, #64]	@ (8008058 <TIM_Base_SetConfig+0x12c>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d003      	beq.n	8008024 <TIM_Base_SetConfig+0xf8>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a12      	ldr	r2, [pc, #72]	@ (8008068 <TIM_Base_SetConfig+0x13c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d103      	bne.n	800802c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	691a      	ldr	r2, [r3, #16]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	f003 0301 	and.w	r3, r3, #1
 800803a:	2b01      	cmp	r3, #1
 800803c:	d105      	bne.n	800804a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	f023 0201 	bic.w	r2, r3, #1
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	611a      	str	r2, [r3, #16]
  }
}
 800804a:	bf00      	nop
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	40010000 	.word	0x40010000
 800805c:	40000400 	.word	0x40000400
 8008060:	40000800 	.word	0x40000800
 8008064:	40000c00 	.word	0x40000c00
 8008068:	40010400 	.word	0x40010400
 800806c:	40014000 	.word	0x40014000
 8008070:	40014400 	.word	0x40014400
 8008074:	40014800 	.word	0x40014800
 8008078:	40001800 	.word	0x40001800
 800807c:	40001c00 	.word	0x40001c00
 8008080:	40002000 	.word	0x40002000

08008084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008094:	2b01      	cmp	r3, #1
 8008096:	d101      	bne.n	800809c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008098:	2302      	movs	r3, #2
 800809a:	e05a      	b.n	8008152 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2202      	movs	r2, #2
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a21      	ldr	r2, [pc, #132]	@ (8008160 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d022      	beq.n	8008126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080e8:	d01d      	beq.n	8008126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1d      	ldr	r2, [pc, #116]	@ (8008164 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d018      	beq.n	8008126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008168 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d013      	beq.n	8008126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a1a      	ldr	r2, [pc, #104]	@ (800816c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d00e      	beq.n	8008126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a18      	ldr	r2, [pc, #96]	@ (8008170 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d009      	beq.n	8008126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a17      	ldr	r2, [pc, #92]	@ (8008174 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d004      	beq.n	8008126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a15      	ldr	r2, [pc, #84]	@ (8008178 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d10c      	bne.n	8008140 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800812c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	4313      	orrs	r3, r2
 8008136:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	40010000 	.word	0x40010000
 8008164:	40000400 	.word	0x40000400
 8008168:	40000800 	.word	0x40000800
 800816c:	40000c00 	.word	0x40000c00
 8008170:	40010400 	.word	0x40010400
 8008174:	40014000 	.word	0x40014000
 8008178:	40001800 	.word	0x40001800

0800817c <memset>:
 800817c:	4402      	add	r2, r0
 800817e:	4603      	mov	r3, r0
 8008180:	4293      	cmp	r3, r2
 8008182:	d100      	bne.n	8008186 <memset+0xa>
 8008184:	4770      	bx	lr
 8008186:	f803 1b01 	strb.w	r1, [r3], #1
 800818a:	e7f9      	b.n	8008180 <memset+0x4>

0800818c <__libc_init_array>:
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	4d0d      	ldr	r5, [pc, #52]	@ (80081c4 <__libc_init_array+0x38>)
 8008190:	4c0d      	ldr	r4, [pc, #52]	@ (80081c8 <__libc_init_array+0x3c>)
 8008192:	1b64      	subs	r4, r4, r5
 8008194:	10a4      	asrs	r4, r4, #2
 8008196:	2600      	movs	r6, #0
 8008198:	42a6      	cmp	r6, r4
 800819a:	d109      	bne.n	80081b0 <__libc_init_array+0x24>
 800819c:	4d0b      	ldr	r5, [pc, #44]	@ (80081cc <__libc_init_array+0x40>)
 800819e:	4c0c      	ldr	r4, [pc, #48]	@ (80081d0 <__libc_init_array+0x44>)
 80081a0:	f000 f826 	bl	80081f0 <_init>
 80081a4:	1b64      	subs	r4, r4, r5
 80081a6:	10a4      	asrs	r4, r4, #2
 80081a8:	2600      	movs	r6, #0
 80081aa:	42a6      	cmp	r6, r4
 80081ac:	d105      	bne.n	80081ba <__libc_init_array+0x2e>
 80081ae:	bd70      	pop	{r4, r5, r6, pc}
 80081b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80081b4:	4798      	blx	r3
 80081b6:	3601      	adds	r6, #1
 80081b8:	e7ee      	b.n	8008198 <__libc_init_array+0xc>
 80081ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80081be:	4798      	blx	r3
 80081c0:	3601      	adds	r6, #1
 80081c2:	e7f2      	b.n	80081aa <__libc_init_array+0x1e>
 80081c4:	08009de4 	.word	0x08009de4
 80081c8:	08009de4 	.word	0x08009de4
 80081cc:	08009de4 	.word	0x08009de4
 80081d0:	08009de8 	.word	0x08009de8

080081d4 <memcpy>:
 80081d4:	440a      	add	r2, r1
 80081d6:	4291      	cmp	r1, r2
 80081d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80081dc:	d100      	bne.n	80081e0 <memcpy+0xc>
 80081de:	4770      	bx	lr
 80081e0:	b510      	push	{r4, lr}
 80081e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081ea:	4291      	cmp	r1, r2
 80081ec:	d1f9      	bne.n	80081e2 <memcpy+0xe>
 80081ee:	bd10      	pop	{r4, pc}

080081f0 <_init>:
 80081f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f2:	bf00      	nop
 80081f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f6:	bc08      	pop	{r3}
 80081f8:	469e      	mov	lr, r3
 80081fa:	4770      	bx	lr

080081fc <_fini>:
 80081fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fe:	bf00      	nop
 8008200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008202:	bc08      	pop	{r3}
 8008204:	469e      	mov	lr, r3
 8008206:	4770      	bx	lr
