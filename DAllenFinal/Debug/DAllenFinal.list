
DAllenFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a0c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bd4  08008bb8  08008bb8  00009bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a78c  0800a78c  0000c024  2**0
                  CONTENTS
  4 .ARM          00000008  0800a78c  0800a78c  0000b78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a794  0800a794  0000c024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a794  0800a794  0000b794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a798  0800a798  0000b798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  0800a79c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c024  2**0
                  CONTENTS
 10 .bss          00025de4  20000024  20000024  0000c024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025e08  20025e08  0000c024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001605d  00000000  00000000  0000c054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038f5  00000000  00000000  000220b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001560  00000000  00000000  000259a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001076  00000000  00000000  00026f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027825  00000000  00000000  00027f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bb0e  00000000  00000000  0004f7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e30ff  00000000  00000000  0006b2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014e3b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005954  00000000  00000000  0014e3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00153d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008ba0 	.word	0x08008ba0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08008ba0 	.word	0x08008ba0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f004 ff1e 	bl	8005320 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f002 ff1c 	bl	8003320 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f002 fed9 	bl	80032a0 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f002 ffdf 	bl	80034b4 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80004f6:	f003 f8b5 	bl	8003664 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80004fa:	4b05      	ldr	r3, [pc, #20]	@ (8000510 <ApplicationInit+0x34>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 8000500:	f000 f810 	bl	8000524 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED
	#endif // COMPILE_TOUCH_FUNCTIONS
	applicationButtonInit();
 8000504:	f000 f8ca 	bl	800069c <applicationButtonInit>
	game_start_screen();
 8000508:	f003 f8ee 	bl	80036e8 <game_start_screen>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000088 	.word	0x20000088

08000514 <Application_game_inst>:

void Application_game_inst(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	game_init();
 8000518:	f003 f8f4 	bl	8003704 <game_init>
	start_timer();
 800051c:	f000 f928 	bl	8000770 <start_timer>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 8000538:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800053c:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 800053e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000542:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000548:	2302      	movs	r3, #2
 800054a:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	4b0d      	ldr	r3, [pc, #52]	@ (8000588 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000554:	4a0c      	ldr	r2, [pc, #48]	@ (8000588 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	6313      	str	r3, [r2, #48]	@ 0x30
 800055c:	4b0a      	ldr	r3, [pc, #40]	@ (8000588 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800055e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000560:	f003 0301 	and.w	r3, r3, #1
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	4619      	mov	r1, r3
 800056c:	4807      	ldr	r0, [pc, #28]	@ (800058c <LCDTouchScreenInterruptGPIOInit+0x68>)
 800056e:	f005 f939 	bl	80057e4 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000572:	2028      	movs	r0, #40	@ 0x28
 8000574:	f005 f8e7 	bl	8005746 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000578:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 800057a:	4a06      	ldr	r2, [pc, #24]	@ (8000594 <LCDTouchScreenInterruptGPIOInit+0x70>)
 800057c:	601a      	str	r2, [r3, #0]

}
 800057e:	bf00      	nop
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40023800 	.word	0x40023800
 800058c:	40020000 	.word	0x40020000
 8000590:	20000090 	.word	0x20000090
 8000594:	0600000f 	.word	0x0600000f

08000598 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 800059e:	2028      	movs	r0, #40	@ 0x28
 80005a0:	f005 f8df 	bl	8005762 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 80005a4:	2300      	movs	r3, #0
 80005a6:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 80005a8:	4b38      	ldr	r3, [pc, #224]	@ (800068c <EXTI15_10_IRQHandler+0xf4>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005ae:	e006      	b.n	80005be <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 80005b0:	204c      	movs	r0, #76	@ 0x4c
 80005b2:	f004 fc38 	bl	8004e26 <STMPE811_Read>
 80005b6:	4603      	mov	r3, r0
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b34      	ldr	r3, [pc, #208]	@ (800068c <EXTI15_10_IRQHandler+0xf4>)
 80005bc:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005be:	4b33      	ldr	r3, [pc, #204]	@ (800068c <EXTI15_10_IRQHandler+0xf4>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f4      	beq.n	80005b0 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 80005c6:	200a      	movs	r0, #10
 80005c8:	f003 f862 	bl	8003690 <ReadRegisterFromTouchModule>
 80005cc:	4603      	mov	r3, r0
 80005ce:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 80005d0:	2100      	movs	r1, #0
 80005d2:	200a      	movs	r0, #10
 80005d4:	f003 f86a 	bl	80036ac <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 80005d8:	200b      	movs	r0, #11
 80005da:	f003 f859 	bl	8003690 <ReadRegisterFromTouchModule>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <EXTI15_10_IRQHandler+0xf8>)
 80005e4:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 80005e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000690 <EXTI15_10_IRQHandler+0xf8>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 80005f0:	797b      	ldrb	r3, [r7, #5]
 80005f2:	4619      	mov	r1, r3
 80005f4:	200b      	movs	r0, #11
 80005f6:	f003 f859 	bl	80036ac <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 80005fa:	2040      	movs	r0, #64	@ 0x40
 80005fc:	f003 f848 	bl	8003690 <ReadRegisterFromTouchModule>
 8000600:	4603      	mov	r3, r0
 8000602:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 8000604:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000608:	2b00      	cmp	r3, #0
 800060a:	da01      	bge.n	8000610 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 800060c:	2301      	movs	r3, #1
 800060e:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d019      	beq.n	800064a <EXTI15_10_IRQHandler+0xb2>
	{
		if(is_start_screen())
 8000616:	f003 f85b 	bl	80036d0 <is_start_screen>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <EXTI15_10_IRQHandler+0x8e>
		{
			Application_game_inst();
 8000620:	f7ff ff78 	bl	8000514 <Application_game_inst>
 8000624:	e011      	b.n	800064a <EXTI15_10_IRQHandler+0xb2>
		}
		else
		{
			DetermineTouchPosition(&StaticTouchData);
 8000626:	481b      	ldr	r0, [pc, #108]	@ (8000694 <EXTI15_10_IRQHandler+0xfc>)
 8000628:	f003 f827 	bl	800367a <DetermineTouchPosition>
//			{
//				game_rotate();
//			}
////////////////////////////////////////////////////////////////////////

			if(StaticTouchData.x > LCD_PIXEL_WIDTH/2)
 800062c:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <EXTI15_10_IRQHandler+0xfc>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	2b78      	cmp	r3, #120	@ 0x78
 8000632:	d903      	bls.n	800063c <EXTI15_10_IRQHandler+0xa4>
			{
				game_move(RIGHT);
 8000634:	2001      	movs	r0, #1
 8000636:	f003 f9f3 	bl	8003a20 <game_move>
 800063a:	e006      	b.n	800064a <EXTI15_10_IRQHandler+0xb2>
			}
			else if(StaticTouchData.x < LCD_PIXEL_WIDTH/2)
 800063c:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <EXTI15_10_IRQHandler+0xfc>)
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	2b77      	cmp	r3, #119	@ 0x77
 8000642:	d802      	bhi.n	800064a <EXTI15_10_IRQHandler+0xb2>
			{
				game_move(LEFT);
 8000644:	2000      	movs	r0, #0
 8000646:	f003 f9eb 	bl	8003a20 <game_move>
			}
		}
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 800064a:	2101      	movs	r1, #1
 800064c:	204b      	movs	r0, #75	@ 0x4b
 800064e:	f004 fbfb 	bl	8004e48 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 8000652:	2100      	movs	r1, #0
 8000654:	204b      	movs	r0, #75	@ 0x4b
 8000656:	f004 fbf7 	bl	8004e48 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 800065a:	79bb      	ldrb	r3, [r7, #6]
 800065c:	4619      	mov	r1, r3
 800065e:	200a      	movs	r0, #10
 8000660:	f003 f824 	bl	80036ac <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000664:	2103      	movs	r1, #3
 8000666:	480c      	ldr	r0, [pc, #48]	@ (8000698 <EXTI15_10_IRQHandler+0x100>)
 8000668:	f005 f8a4 	bl	80057b4 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800066c:	2028      	movs	r0, #40	@ 0x28
 800066e:	f005 f892 	bl	8005796 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000672:	2028      	movs	r0, #40	@ 0x28
 8000674:	f005 f867 	bl	8005746 <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000678:	797b      	ldrb	r3, [r7, #5]
 800067a:	4619      	mov	r1, r3
 800067c:	200b      	movs	r0, #11
 800067e:	f003 f815 	bl	80036ac <WriteDataToTouchModule>

}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	2000009c 	.word	0x2000009c
 8000690:	20000098 	.word	0x20000098
 8000694:	20000088 	.word	0x20000088
 8000698:	20000090 	.word	0x20000090

0800069c <applicationButtonInit>:
#endif // TOUCH_INTERRUPT_ENABLED

void applicationButtonInit()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	ButtonInit();
 80006a0:	f002 fcf4 	bl	800308c <ButtonInit>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80006ac:	2006      	movs	r0, #6
 80006ae:	f005 f858 	bl	8005762 <HAL_NVIC_DisableIRQ>
	//EXTI_HandleTypeDef* line = {0};
	HAL_EXTI_ClearPending(EXTI_GPIOA, EXTI_TRIGGER_RISING);
 80006b2:	2101      	movs	r1, #1
 80006b4:	2000      	movs	r0, #0
 80006b6:	f005 f87d 	bl	80057b4 <HAL_EXTI_ClearPending>
	//IRQ_enable(EXTI0_IRQ_NUMBER);
	game_rotate();
 80006ba:	f003 f96f 	bl	800399c <game_rotate>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006be:	2006      	movs	r0, #6
 80006c0:	f005 f841 	bl	8005746 <HAL_NVIC_EnableIRQ>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <MX_TIM7_Init>:

static void MX_TIM7_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ce:	463b      	mov	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
  htim7.Instance = TIM7;
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <MX_TIM7_Init+0x68>)
 80006d8:	4a16      	ldr	r2, [pc, #88]	@ (8000734 <MX_TIM7_Init+0x6c>)
 80006da:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = PRESCALAR_VAL;
 80006dc:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_TIM7_Init+0x68>)
 80006de:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80006e2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_TIM7_Init+0x68>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = ARR_VAL;
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_TIM7_Init+0x68>)
 80006ec:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80006f0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_TIM7_Init+0x68>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80006f8:	480d      	ldr	r0, [pc, #52]	@ (8000730 <MX_TIM7_Init+0x68>)
 80006fa:	f008 f82f 	bl	800875c <HAL_TIM_Base_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d002      	beq.n	800070a <MX_TIM7_Init+0x42>
  {
    APPLICATION_ASSERT(1);
 8000704:	2001      	movs	r0, #1
 8000706:	f002 fcf1 	bl	80030ec <APPLICATION_ASSERT>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000712:	463b      	mov	r3, r7
 8000714:	4619      	mov	r1, r3
 8000716:	4806      	ldr	r0, [pc, #24]	@ (8000730 <MX_TIM7_Init+0x68>)
 8000718:	f008 f98c 	bl	8008a34 <HAL_TIMEx_MasterConfigSynchronization>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d002      	beq.n	8000728 <MX_TIM7_Init+0x60>
  {
	APPLICATION_ASSERT(1);
 8000722:	2001      	movs	r0, #1
 8000724:	f002 fce2 	bl	80030ec <APPLICATION_ASSERT>
  }
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000040 	.word	0x20000040
 8000734:	40001400 	.word	0x40001400

08000738 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(TIM7_IRQn);
 800073c:	2037      	movs	r0, #55	@ 0x37
 800073e:	f005 f810 	bl	8005762 <HAL_NVIC_DisableIRQ>
	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 8000742:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <TIM7_IRQHandler+0x34>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f06f 0201 	mvn.w	r2, #1
 800074a:	611a      	str	r2, [r3, #16]
	if(!game_finished())
 800074c:	f003 f9b8 	bl	8003ac0 <game_finished>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d102      	bne.n	800075c <TIM7_IRQHandler+0x24>
	{
		game_drop();
 8000756:	f003 f825 	bl	80037a4 <game_drop>
 800075a:	e001      	b.n	8000760 <TIM7_IRQHandler+0x28>
	}
	else
	{
		game_over();
 800075c:	f003 f9c2 	bl	8003ae4 <game_over>
	}
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000760:	2037      	movs	r0, #55	@ 0x37
 8000762:	f004 fff0 	bl	8005746 <HAL_NVIC_EnableIRQ>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000040 	.word	0x20000040

08000770 <start_timer>:

void start_timer()
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	MX_TIM7_Init();
 8000774:	f7ff ffa8 	bl	80006c8 <MX_TIM7_Init>
	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <start_timer+0x24>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f06f 0201 	mvn.w	r2, #1
 8000780:	611a      	str	r2, [r3, #16]
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000782:	2037      	movs	r0, #55	@ 0x37
 8000784:	f004 ffdf 	bl	8005746 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim7);
 8000788:	4802      	ldr	r0, [pc, #8]	@ (8000794 <start_timer+0x24>)
 800078a:	f008 f837 	bl	80087fc <HAL_TIM_Base_Start_IT>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000040 	.word	0x20000040

08000798 <map_draw>:

static void MX_RNG_Init(void);
static void MX_RNG_Deinit(void);

void map_draw()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
	//uint16_t y_len = LCD_PIXEL_HEIGHT;
	uint16_t x_len = LCD_PIXEL_WIDTH;
 800079e:	23f0      	movs	r3, #240	@ 0xf0
 80007a0:	80fb      	strh	r3, [r7, #6]
	//edges of 5 pixels in width
	uint16_t x = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	80bb      	strh	r3, [r7, #4]

	//VERTICAL
	for(int i = 1; i<LCD_PIXEL_WIDTH; i+=BLOCK_WIDTH)
 80007a6:	2301      	movs	r3, #1
 80007a8:	61fb      	str	r3, [r7, #28]
 80007aa:	e00d      	b.n	80007c8 <map_draw+0x30>
	{
		LCD_Draw_Vertical_Line(EDGE_WIDTH+i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	3304      	adds	r3, #4
 80007b2:	b298      	uxth	r0, r3
 80007b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b8:	f240 1235 	movw	r2, #309	@ 0x135
 80007bc:	210b      	movs	r1, #11
 80007be:	f002 fe2b 	bl	8003418 <LCD_Draw_Vertical_Line>
	for(int i = 1; i<LCD_PIXEL_WIDTH; i+=BLOCK_WIDTH)
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3317      	adds	r3, #23
 80007c6:	61fb      	str	r3, [r7, #28]
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	2bef      	cmp	r3, #239	@ 0xef
 80007cc:	ddee      	ble.n	80007ac <map_draw+0x14>
	}
	for(int i = 1; i<=EDGE_WIDTH; i++)
 80007ce:	2301      	movs	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
 80007d2:	e00b      	b.n	80007ec <map_draw+0x54>
	{
		LCD_Draw_Vertical_Line(i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	b298      	uxth	r0, r3
 80007d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007dc:	f240 1235 	movw	r2, #309	@ 0x135
 80007e0:	210b      	movs	r1, #11
 80007e2:	f002 fe19 	bl	8003418 <LCD_Draw_Vertical_Line>
	for(int i = 1; i<=EDGE_WIDTH; i++)
 80007e6:	69bb      	ldr	r3, [r7, #24]
 80007e8:	3301      	adds	r3, #1
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	ddf0      	ble.n	80007d4 <map_draw+0x3c>
	}
	for(int i = LCD_PIXEL_WIDTH-EDGE_WIDTH; i<=LCD_PIXEL_WIDTH; i++)
 80007f2:	23ec      	movs	r3, #236	@ 0xec
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	e00b      	b.n	8000810 <map_draw+0x78>
	{
		LCD_Draw_Vertical_Line(i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	b298      	uxth	r0, r3
 80007fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000800:	f240 1235 	movw	r2, #309	@ 0x135
 8000804:	210b      	movs	r1, #11
 8000806:	f002 fe07 	bl	8003418 <LCD_Draw_Vertical_Line>
	for(int i = LCD_PIXEL_WIDTH-EDGE_WIDTH; i<=LCD_PIXEL_WIDTH; i++)
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	2bf0      	cmp	r3, #240	@ 0xf0
 8000814:	ddf0      	ble.n	80007f8 <map_draw+0x60>
	}

	//HORIZONTAL
	for(int i = 1; i<MAP_HEIGHT; i+=BLOCK_WIDTH)
 8000816:	2301      	movs	r3, #1
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	e00c      	b.n	8000836 <map_draw+0x9e>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+EDGE_WIDTH+i, x_len, LCD_COLOR_WHITE);
 800081c:	693b      	ldr	r3, [r7, #16]
 800081e:	b29b      	uxth	r3, r3
 8000820:	330f      	adds	r3, #15
 8000822:	b299      	uxth	r1, r3
 8000824:	88fa      	ldrh	r2, [r7, #6]
 8000826:	88b8      	ldrh	r0, [r7, #4]
 8000828:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800082c:	f002 fe1b 	bl	8003466 <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<MAP_HEIGHT; i+=BLOCK_WIDTH)
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	3317      	adds	r3, #23
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800083c:	ddee      	ble.n	800081c <map_draw+0x84>
	}
	for(int i = 0; i<=EDGE_WIDTH; i++)
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	e00c      	b.n	800085e <map_draw+0xc6>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+i, x_len, LCD_COLOR_WHITE);
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	b29b      	uxth	r3, r3
 8000848:	330b      	adds	r3, #11
 800084a:	b299      	uxth	r1, r3
 800084c:	88fa      	ldrh	r2, [r7, #6]
 800084e:	88b8      	ldrh	r0, [r7, #4]
 8000850:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000854:	f002 fe07 	bl	8003466 <LCD_Draw_Horizontal_Line>
	for(int i = 0; i<=EDGE_WIDTH; i++)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	3301      	adds	r3, #1
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	2b04      	cmp	r3, #4
 8000862:	ddef      	ble.n	8000844 <map_draw+0xac>
	}
	for(int i = MAP_HEIGHT-EDGE_WIDTH; i<=MAP_HEIGHT; i++)
 8000864:	f240 1331 	movw	r3, #305	@ 0x131
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	e00c      	b.n	8000886 <map_draw+0xee>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+i, x_len, LCD_COLOR_WHITE);
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	b29b      	uxth	r3, r3
 8000870:	330b      	adds	r3, #11
 8000872:	b299      	uxth	r1, r3
 8000874:	88fa      	ldrh	r2, [r7, #6]
 8000876:	88b8      	ldrh	r0, [r7, #4]
 8000878:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800087c:	f002 fdf3 	bl	8003466 <LCD_Draw_Horizontal_Line>
	for(int i = MAP_HEIGHT-EDGE_WIDTH; i<=MAP_HEIGHT; i++)
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	3301      	adds	r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 800088c:	dbee      	blt.n	800086c <map_draw+0xd4>
	}
}
 800088e:	bf00      	nop
 8000890:	bf00      	nop
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <start_screen>:

void start_screen()
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
	//uint16_t play_x = 68; //to 172
	uint16_t play_y = 106; //to 184
 800089e:	236a      	movs	r3, #106	@ 0x6a
 80008a0:	80fb      	strh	r3, [r7, #6]
	//uint16_t button_height = 48;
	uint16_t button_width = LCD_PIXEL_WIDTH/2;
 80008a2:	2378      	movs	r3, #120	@ 0x78
 80008a4:	80bb      	strh	r3, [r7, #4]

	for(int i = 1; i<button_width/2; i++)
 80008a6:	2301      	movs	r3, #1
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	e014      	b.n	80008d6 <start_screen+0x3e>
	{
		LCD_Draw_Horizontal_Line(120-i, play_y+i, 2*i, LCD_COLOR_WHITE);
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 80008b4:	b298      	uxth	r0, r3
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	88fb      	ldrh	r3, [r7, #6]
 80008bc:	4413      	add	r3, r2
 80008be:	b299      	uxth	r1, r3
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008cc:	f002 fdcb 	bl	8003466 <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<button_width/2; i++)
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	3301      	adds	r3, #1
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	88bb      	ldrh	r3, [r7, #4]
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	b29b      	uxth	r3, r3
 80008dc:	461a      	mov	r2, r3
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	4293      	cmp	r3, r2
 80008e2:	dbe3      	blt.n	80008ac <start_screen+0x14>
	}
	for(int i = button_width/2; i>0; i--)
 80008e4:	88bb      	ldrh	r3, [r7, #4]
 80008e6:	085b      	lsrs	r3, r3, #1
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	e020      	b.n	8000930 <start_screen+0x98>
	{
		LCD_Draw_Horizontal_Line(i+button_width/2, play_y + i + (button_width/2) - 1, button_width-(2*i), LCD_COLOR_WHITE);
 80008ee:	88bb      	ldrh	r3, [r7, #4]
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	4413      	add	r3, r2
 80008fa:	b298      	uxth	r0, r3
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	b29a      	uxth	r2, r3
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	4413      	add	r3, r2
 8000904:	b29a      	uxth	r2, r3
 8000906:	88bb      	ldrh	r3, [r7, #4]
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	b29b      	uxth	r3, r3
 800090c:	4413      	add	r3, r2
 800090e:	b29b      	uxth	r3, r3
 8000910:	3b01      	subs	r3, #1
 8000912:	b299      	uxth	r1, r3
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	b29b      	uxth	r3, r3
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	b29b      	uxth	r3, r3
 800091c:	88ba      	ldrh	r2, [r7, #4]
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	b29a      	uxth	r2, r3
 8000922:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000926:	f002 fd9e 	bl	8003466 <LCD_Draw_Horizontal_Line>
	for(int i = button_width/2; i>0; i--)
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	3b01      	subs	r3, #1
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	2b00      	cmp	r3, #0
 8000934:	dcdb      	bgt.n	80008ee <start_screen+0x56>
	}
	for(int i = 1; i<button_width/2 -2; i++)
 8000936:	2301      	movs	r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	e015      	b.n	8000968 <start_screen+0xd0>
	{
		LCD_Draw_Horizontal_Line(120-i, play_y+i +2 , 2*i, LCD_COLOR_BLACK);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	b29b      	uxth	r3, r3
 8000940:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 8000944:	b298      	uxth	r0, r3
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	b29a      	uxth	r2, r3
 800094a:	88fb      	ldrh	r3, [r7, #6]
 800094c:	4413      	add	r3, r2
 800094e:	b29b      	uxth	r3, r3
 8000950:	3302      	adds	r3, #2
 8000952:	b299      	uxth	r1, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	b29b      	uxth	r3, r3
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	b29a      	uxth	r2, r3
 800095c:	2300      	movs	r3, #0
 800095e:	f002 fd82 	bl	8003466 <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<button_width/2 -2; i++)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	3301      	adds	r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	88bb      	ldrh	r3, [r7, #4]
 800096a:	085b      	lsrs	r3, r3, #1
 800096c:	b29b      	uxth	r3, r3
 800096e:	3b02      	subs	r3, #2
 8000970:	68fa      	ldr	r2, [r7, #12]
 8000972:	429a      	cmp	r2, r3
 8000974:	dbe2      	blt.n	800093c <start_screen+0xa4>
	}
	for(int i = button_width/2 -2; i>0; i--)
 8000976:	88bb      	ldrh	r3, [r7, #4]
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	b29b      	uxth	r3, r3
 800097c:	3b02      	subs	r3, #2
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	e023      	b.n	80009ca <start_screen+0x132>
	{
		LCD_Draw_Horizontal_Line(i+button_width/2+1, play_y + i + (button_width/2) - 2, button_width-(2*i)-2, LCD_COLOR_BLACK);
 8000982:	88bb      	ldrh	r3, [r7, #4]
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	b29a      	uxth	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	b29b      	uxth	r3, r3
 800098c:	4413      	add	r3, r2
 800098e:	b29b      	uxth	r3, r3
 8000990:	3301      	adds	r3, #1
 8000992:	b298      	uxth	r0, r3
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	b29a      	uxth	r2, r3
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	4413      	add	r3, r2
 800099c:	b29a      	uxth	r2, r3
 800099e:	88bb      	ldrh	r3, [r7, #4]
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	4413      	add	r3, r2
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	3b02      	subs	r3, #2
 80009aa:	b299      	uxth	r1, r3
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	88ba      	ldrh	r2, [r7, #4]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	3b02      	subs	r3, #2
 80009bc:	b29a      	uxth	r2, r3
 80009be:	2300      	movs	r3, #0
 80009c0:	f002 fd51 	bl	8003466 <LCD_Draw_Horizontal_Line>
	for(int i = button_width/2 -2; i>0; i--)
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	dcd8      	bgt.n	8000982 <start_screen+0xea>
	}

	LCD_SetFont(&Font16x24);
 80009d0:	4815      	ldr	r0, [pc, #84]	@ (8000a28 <start_screen+0x190>)
 80009d2:	f002 fda1 	bl	8003518 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_RED);
 80009d6:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80009da:	f002 fd8d 	bl	80034f8 <LCD_SetTextColor>
	LCD_DisplayChar(76, 154, 'P');
 80009de:	2250      	movs	r2, #80	@ 0x50
 80009e0:	219a      	movs	r1, #154	@ 0x9a
 80009e2:	204c      	movs	r0, #76	@ 0x4c
 80009e4:	f002 fe16 	bl	8003614 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_YELLOW);
 80009e8:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80009ec:	f002 fd84 	bl	80034f8 <LCD_SetTextColor>
	LCD_DisplayChar(100, 154, 'L');
 80009f0:	224c      	movs	r2, #76	@ 0x4c
 80009f2:	219a      	movs	r1, #154	@ 0x9a
 80009f4:	2064      	movs	r0, #100	@ 0x64
 80009f6:	f002 fe0d 	bl	8003614 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_BLUE2);
 80009fa:	f240 501f 	movw	r0, #1311	@ 0x51f
 80009fe:	f002 fd7b 	bl	80034f8 <LCD_SetTextColor>
	LCD_DisplayChar(124, 154, 'A');
 8000a02:	2241      	movs	r2, #65	@ 0x41
 8000a04:	219a      	movs	r1, #154	@ 0x9a
 8000a06:	207c      	movs	r0, #124	@ 0x7c
 8000a08:	f002 fe04 	bl	8003614 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_GREEN);
 8000a0c:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000a10:	f002 fd72 	bl	80034f8 <LCD_SetTextColor>
	LCD_DisplayChar(148, 154, 'Y');
 8000a14:	2259      	movs	r2, #89	@ 0x59
 8000a16:	219a      	movs	r1, #154	@ 0x9a
 8000a18:	2094      	movs	r0, #148	@ 0x94
 8000a1a:	f002 fdfb 	bl	8003614 <LCD_DisplayChar>
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000004 	.word	0x20000004

08000a2c <end_screen>:

void end_screen(uint8_t singles, uint8_t doubles, uint8_t triples, uint8_t tetris)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b089      	sub	sp, #36	@ 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4604      	mov	r4, r0
 8000a34:	4608      	mov	r0, r1
 8000a36:	4611      	mov	r1, r2
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4623      	mov	r3, r4
 8000a3c:	71fb      	strb	r3, [r7, #7]
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71bb      	strb	r3, [r7, #6]
 8000a42:	460b      	mov	r3, r1
 8000a44:	717b      	strb	r3, [r7, #5]
 8000a46:	4613      	mov	r3, r2
 8000a48:	713b      	strb	r3, [r7, #4]
	uint32_t single_char = singles + '0';
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	3330      	adds	r3, #48	@ 0x30
 8000a4e:	617b      	str	r3, [r7, #20]
	uint32_t double_char = doubles + '0';
 8000a50:	79bb      	ldrb	r3, [r7, #6]
 8000a52:	3330      	adds	r3, #48	@ 0x30
 8000a54:	613b      	str	r3, [r7, #16]
	uint32_t triple_char = triples + '0';
 8000a56:	797b      	ldrb	r3, [r7, #5]
 8000a58:	3330      	adds	r3, #48	@ 0x30
 8000a5a:	60fb      	str	r3, [r7, #12]
	uint32_t tetris_char = tetris + '0';
 8000a5c:	793b      	ldrb	r3, [r7, #4]
 8000a5e:	3330      	adds	r3, #48	@ 0x30
 8000a60:	60bb      	str	r3, [r7, #8]

	uint32_t score = singles + 3*doubles + 5*triples + 8*tetris;
 8000a62:	79f9      	ldrb	r1, [r7, #7]
 8000a64:	79ba      	ldrb	r2, [r7, #6]
 8000a66:	4613      	mov	r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4419      	add	r1, r3
 8000a6e:	797a      	ldrb	r2, [r7, #5]
 8000a70:	4613      	mov	r3, r2
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	4413      	add	r3, r2
 8000a76:	18ca      	adds	r2, r1, r3
 8000a78:	793b      	ldrb	r3, [r7, #4]
 8000a7a:	00db      	lsls	r3, r3, #3
 8000a7c:	4413      	add	r3, r2
 8000a7e:	61fb      	str	r3, [r7, #28]
	uint32_t score_tens = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
	while(score > 10)
 8000a84:	e005      	b.n	8000a92 <end_screen+0x66>
	{
		score -= 10;
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3b0a      	subs	r3, #10
 8000a8a:	61fb      	str	r3, [r7, #28]
		score_tens++;
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	61bb      	str	r3, [r7, #24]
	while(score > 10)
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	2b0a      	cmp	r3, #10
 8000a96:	d8f6      	bhi.n	8000a86 <end_screen+0x5a>
	}

	score += '0';
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	3330      	adds	r3, #48	@ 0x30
 8000a9c:	61fb      	str	r3, [r7, #28]
	score_tens += '0';
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	3330      	adds	r3, #48	@ 0x30
 8000aa2:	61bb      	str	r3, [r7, #24]

	LCD_Clear(0,LCD_COLOR_BLACK);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f002 fd04 	bl	80034b4 <LCD_Clear>
	LCD_SetFont(&Font16x24);
 8000aac:	48a9      	ldr	r0, [pc, #676]	@ (8000d54 <end_screen+0x328>)
 8000aae:	f002 fd33 	bl	8003518 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ab2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000ab6:	f002 fd1f 	bl	80034f8 <LCD_SetTextColor>
	LCD_DisplayChar(80, 60, 'G');
 8000aba:	2247      	movs	r2, #71	@ 0x47
 8000abc:	213c      	movs	r1, #60	@ 0x3c
 8000abe:	2050      	movs	r0, #80	@ 0x50
 8000ac0:	f002 fda8 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(102, 60, 'A');
 8000ac4:	2241      	movs	r2, #65	@ 0x41
 8000ac6:	213c      	movs	r1, #60	@ 0x3c
 8000ac8:	2066      	movs	r0, #102	@ 0x66
 8000aca:	f002 fda3 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(122, 60, 'M');
 8000ace:	224d      	movs	r2, #77	@ 0x4d
 8000ad0:	213c      	movs	r1, #60	@ 0x3c
 8000ad2:	207a      	movs	r0, #122	@ 0x7a
 8000ad4:	f002 fd9e 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(144, 60, 'E');
 8000ad8:	2245      	movs	r2, #69	@ 0x45
 8000ada:	213c      	movs	r1, #60	@ 0x3c
 8000adc:	2090      	movs	r0, #144	@ 0x90
 8000ade:	f002 fd99 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(80, 90, 'O');
 8000ae2:	224f      	movs	r2, #79	@ 0x4f
 8000ae4:	215a      	movs	r1, #90	@ 0x5a
 8000ae6:	2050      	movs	r0, #80	@ 0x50
 8000ae8:	f002 fd94 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(102, 90, 'V');
 8000aec:	2256      	movs	r2, #86	@ 0x56
 8000aee:	215a      	movs	r1, #90	@ 0x5a
 8000af0:	2066      	movs	r0, #102	@ 0x66
 8000af2:	f002 fd8f 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(122, 90, 'E');
 8000af6:	2245      	movs	r2, #69	@ 0x45
 8000af8:	215a      	movs	r1, #90	@ 0x5a
 8000afa:	207a      	movs	r0, #122	@ 0x7a
 8000afc:	f002 fd8a 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(144, 90, 'R');
 8000b00:	2252      	movs	r2, #82	@ 0x52
 8000b02:	215a      	movs	r1, #90	@ 0x5a
 8000b04:	2090      	movs	r0, #144	@ 0x90
 8000b06:	f002 fd85 	bl	8003614 <LCD_DisplayChar>

	LCD_SetFont(&Font12x12);
 8000b0a:	4893      	ldr	r0, [pc, #588]	@ (8000d58 <end_screen+0x32c>)
 8000b0c:	f002 fd04 	bl	8003518 <LCD_SetFont>
	LCD_DisplayChar(88, 190, 'S');
 8000b10:	2253      	movs	r2, #83	@ 0x53
 8000b12:	21be      	movs	r1, #190	@ 0xbe
 8000b14:	2058      	movs	r0, #88	@ 0x58
 8000b16:	f002 fd7d 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(96, 190, 'i');
 8000b1a:	2269      	movs	r2, #105	@ 0x69
 8000b1c:	21be      	movs	r1, #190	@ 0xbe
 8000b1e:	2060      	movs	r0, #96	@ 0x60
 8000b20:	f002 fd78 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(100, 190, 'n');
 8000b24:	226e      	movs	r2, #110	@ 0x6e
 8000b26:	21be      	movs	r1, #190	@ 0xbe
 8000b28:	2064      	movs	r0, #100	@ 0x64
 8000b2a:	f002 fd73 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(108, 190, 'g');
 8000b2e:	2267      	movs	r2, #103	@ 0x67
 8000b30:	21be      	movs	r1, #190	@ 0xbe
 8000b32:	206c      	movs	r0, #108	@ 0x6c
 8000b34:	f002 fd6e 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(116, 190, 'l');
 8000b38:	226c      	movs	r2, #108	@ 0x6c
 8000b3a:	21be      	movs	r1, #190	@ 0xbe
 8000b3c:	2074      	movs	r0, #116	@ 0x74
 8000b3e:	f002 fd69 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(120, 190, 'e');
 8000b42:	2265      	movs	r2, #101	@ 0x65
 8000b44:	21be      	movs	r1, #190	@ 0xbe
 8000b46:	2078      	movs	r0, #120	@ 0x78
 8000b48:	f002 fd64 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(128, 190, 's');
 8000b4c:	2273      	movs	r2, #115	@ 0x73
 8000b4e:	21be      	movs	r1, #190	@ 0xbe
 8000b50:	2080      	movs	r0, #128	@ 0x80
 8000b52:	f002 fd5f 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(136, 190, ':');
 8000b56:	223a      	movs	r2, #58	@ 0x3a
 8000b58:	21be      	movs	r1, #190	@ 0xbe
 8000b5a:	2088      	movs	r0, #136	@ 0x88
 8000b5c:	f002 fd5a 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(146, 190, single_char);
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	461a      	mov	r2, r3
 8000b66:	21be      	movs	r1, #190	@ 0xbe
 8000b68:	2092      	movs	r0, #146	@ 0x92
 8000b6a:	f002 fd53 	bl	8003614 <LCD_DisplayChar>

	LCD_DisplayChar(84, 210, 'D');
 8000b6e:	2244      	movs	r2, #68	@ 0x44
 8000b70:	21d2      	movs	r1, #210	@ 0xd2
 8000b72:	2054      	movs	r0, #84	@ 0x54
 8000b74:	f002 fd4e 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(92, 210, 'o');
 8000b78:	226f      	movs	r2, #111	@ 0x6f
 8000b7a:	21d2      	movs	r1, #210	@ 0xd2
 8000b7c:	205c      	movs	r0, #92	@ 0x5c
 8000b7e:	f002 fd49 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(100, 210, 'u');
 8000b82:	2275      	movs	r2, #117	@ 0x75
 8000b84:	21d2      	movs	r1, #210	@ 0xd2
 8000b86:	2064      	movs	r0, #100	@ 0x64
 8000b88:	f002 fd44 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(108, 210, 'b');
 8000b8c:	2262      	movs	r2, #98	@ 0x62
 8000b8e:	21d2      	movs	r1, #210	@ 0xd2
 8000b90:	206c      	movs	r0, #108	@ 0x6c
 8000b92:	f002 fd3f 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(116, 210, 'l');
 8000b96:	226c      	movs	r2, #108	@ 0x6c
 8000b98:	21d2      	movs	r1, #210	@ 0xd2
 8000b9a:	2074      	movs	r0, #116	@ 0x74
 8000b9c:	f002 fd3a 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(120, 210, 'e');
 8000ba0:	2265      	movs	r2, #101	@ 0x65
 8000ba2:	21d2      	movs	r1, #210	@ 0xd2
 8000ba4:	2078      	movs	r0, #120	@ 0x78
 8000ba6:	f002 fd35 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(128, 210, 's');
 8000baa:	2273      	movs	r2, #115	@ 0x73
 8000bac:	21d2      	movs	r1, #210	@ 0xd2
 8000bae:	2080      	movs	r0, #128	@ 0x80
 8000bb0:	f002 fd30 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(136, 210, ':');
 8000bb4:	223a      	movs	r2, #58	@ 0x3a
 8000bb6:	21d2      	movs	r1, #210	@ 0xd2
 8000bb8:	2088      	movs	r0, #136	@ 0x88
 8000bba:	f002 fd2b 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(146, 210, double_char);
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	21d2      	movs	r1, #210	@ 0xd2
 8000bc6:	2092      	movs	r0, #146	@ 0x92
 8000bc8:	f002 fd24 	bl	8003614 <LCD_DisplayChar>

	LCD_DisplayChar(92, 230, 'T');
 8000bcc:	2254      	movs	r2, #84	@ 0x54
 8000bce:	21e6      	movs	r1, #230	@ 0xe6
 8000bd0:	205c      	movs	r0, #92	@ 0x5c
 8000bd2:	f002 fd1f 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(100, 230, 'r');
 8000bd6:	2272      	movs	r2, #114	@ 0x72
 8000bd8:	21e6      	movs	r1, #230	@ 0xe6
 8000bda:	2064      	movs	r0, #100	@ 0x64
 8000bdc:	f002 fd1a 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(104, 230, 'i');
 8000be0:	2269      	movs	r2, #105	@ 0x69
 8000be2:	21e6      	movs	r1, #230	@ 0xe6
 8000be4:	2068      	movs	r0, #104	@ 0x68
 8000be6:	f002 fd15 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(108, 230, 'p');
 8000bea:	2270      	movs	r2, #112	@ 0x70
 8000bec:	21e6      	movs	r1, #230	@ 0xe6
 8000bee:	206c      	movs	r0, #108	@ 0x6c
 8000bf0:	f002 fd10 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(116, 230, 'l');
 8000bf4:	226c      	movs	r2, #108	@ 0x6c
 8000bf6:	21e6      	movs	r1, #230	@ 0xe6
 8000bf8:	2074      	movs	r0, #116	@ 0x74
 8000bfa:	f002 fd0b 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(120, 230, 'e');
 8000bfe:	2265      	movs	r2, #101	@ 0x65
 8000c00:	21e6      	movs	r1, #230	@ 0xe6
 8000c02:	2078      	movs	r0, #120	@ 0x78
 8000c04:	f002 fd06 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(128, 230, 's');
 8000c08:	2273      	movs	r2, #115	@ 0x73
 8000c0a:	21e6      	movs	r1, #230	@ 0xe6
 8000c0c:	2080      	movs	r0, #128	@ 0x80
 8000c0e:	f002 fd01 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(136, 230, ':');
 8000c12:	223a      	movs	r2, #58	@ 0x3a
 8000c14:	21e6      	movs	r1, #230	@ 0xe6
 8000c16:	2088      	movs	r0, #136	@ 0x88
 8000c18:	f002 fcfc 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(146, 230, triple_char);
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	461a      	mov	r2, r3
 8000c22:	21e6      	movs	r1, #230	@ 0xe6
 8000c24:	2092      	movs	r0, #146	@ 0x92
 8000c26:	f002 fcf5 	bl	8003614 <LCD_DisplayChar>

	LCD_DisplayChar(96, 250, 'T');
 8000c2a:	2254      	movs	r2, #84	@ 0x54
 8000c2c:	21fa      	movs	r1, #250	@ 0xfa
 8000c2e:	2060      	movs	r0, #96	@ 0x60
 8000c30:	f002 fcf0 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(104, 250, 'e');
 8000c34:	2265      	movs	r2, #101	@ 0x65
 8000c36:	21fa      	movs	r1, #250	@ 0xfa
 8000c38:	2068      	movs	r0, #104	@ 0x68
 8000c3a:	f002 fceb 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(112, 250, 't');
 8000c3e:	2274      	movs	r2, #116	@ 0x74
 8000c40:	21fa      	movs	r1, #250	@ 0xfa
 8000c42:	2070      	movs	r0, #112	@ 0x70
 8000c44:	f002 fce6 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(118, 250, 'r');
 8000c48:	2272      	movs	r2, #114	@ 0x72
 8000c4a:	21fa      	movs	r1, #250	@ 0xfa
 8000c4c:	2076      	movs	r0, #118	@ 0x76
 8000c4e:	f002 fce1 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(124, 250, 'i');
 8000c52:	2269      	movs	r2, #105	@ 0x69
 8000c54:	21fa      	movs	r1, #250	@ 0xfa
 8000c56:	207c      	movs	r0, #124	@ 0x7c
 8000c58:	f002 fcdc 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(128, 250, 's');
 8000c5c:	2273      	movs	r2, #115	@ 0x73
 8000c5e:	21fa      	movs	r1, #250	@ 0xfa
 8000c60:	2080      	movs	r0, #128	@ 0x80
 8000c62:	f002 fcd7 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(136, 250, ':');
 8000c66:	223a      	movs	r2, #58	@ 0x3a
 8000c68:	21fa      	movs	r1, #250	@ 0xfa
 8000c6a:	2088      	movs	r0, #136	@ 0x88
 8000c6c:	f002 fcd2 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(146, 250, tetris_char);
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	461a      	mov	r2, r3
 8000c76:	21fa      	movs	r1, #250	@ 0xfa
 8000c78:	2092      	movs	r0, #146	@ 0x92
 8000c7a:	f002 fccb 	bl	8003614 <LCD_DisplayChar>

	LCD_Draw_Horizontal_Line(21, 270, 200, LCD_COLOR_WHITE);
 8000c7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c82:	22c8      	movs	r2, #200	@ 0xc8
 8000c84:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8000c88:	2015      	movs	r0, #21
 8000c8a:	f002 fbec 	bl	8003466 <LCD_Draw_Horizontal_Line>

	LCD_DisplayChar(62, 280, 'F');
 8000c8e:	2246      	movs	r2, #70	@ 0x46
 8000c90:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000c94:	203e      	movs	r0, #62	@ 0x3e
 8000c96:	f002 fcbd 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(70, 280, 'i');
 8000c9a:	2269      	movs	r2, #105	@ 0x69
 8000c9c:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000ca0:	2046      	movs	r0, #70	@ 0x46
 8000ca2:	f002 fcb7 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(74, 280, 'n');
 8000ca6:	226e      	movs	r2, #110	@ 0x6e
 8000ca8:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000cac:	204a      	movs	r0, #74	@ 0x4a
 8000cae:	f002 fcb1 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(82, 280, 'a');
 8000cb2:	2261      	movs	r2, #97	@ 0x61
 8000cb4:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000cb8:	2052      	movs	r0, #82	@ 0x52
 8000cba:	f002 fcab 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(90, 280, 'l');
 8000cbe:	226c      	movs	r2, #108	@ 0x6c
 8000cc0:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000cc4:	205a      	movs	r0, #90	@ 0x5a
 8000cc6:	f002 fca5 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(100, 280, 'S');
 8000cca:	2253      	movs	r2, #83	@ 0x53
 8000ccc:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000cd0:	2064      	movs	r0, #100	@ 0x64
 8000cd2:	f002 fc9f 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(108, 280, 'c');
 8000cd6:	2263      	movs	r2, #99	@ 0x63
 8000cd8:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000cdc:	206c      	movs	r0, #108	@ 0x6c
 8000cde:	f002 fc99 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(114, 280, 'o');
 8000ce2:	226f      	movs	r2, #111	@ 0x6f
 8000ce4:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000ce8:	2072      	movs	r0, #114	@ 0x72
 8000cea:	f002 fc93 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(122, 280, 'r');
 8000cee:	2272      	movs	r2, #114	@ 0x72
 8000cf0:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000cf4:	207a      	movs	r0, #122	@ 0x7a
 8000cf6:	f002 fc8d 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(128, 280, 'e');
 8000cfa:	2265      	movs	r2, #101	@ 0x65
 8000cfc:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000d00:	2080      	movs	r0, #128	@ 0x80
 8000d02:	f002 fc87 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(136, 280, ':');
 8000d06:	223a      	movs	r2, #58	@ 0x3a
 8000d08:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000d0c:	2088      	movs	r0, #136	@ 0x88
 8000d0e:	f002 fc81 	bl	8003614 <LCD_DisplayChar>

	LCD_DisplayChar(146, 280, score_tens);
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	461a      	mov	r2, r3
 8000d18:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000d1c:	2092      	movs	r0, #146	@ 0x92
 8000d1e:	f002 fc79 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(154, 280, score);
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	461a      	mov	r2, r3
 8000d28:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000d2c:	209a      	movs	r0, #154	@ 0x9a
 8000d2e:	f002 fc71 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(162, 280, '0');
 8000d32:	2230      	movs	r2, #48	@ 0x30
 8000d34:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000d38:	20a2      	movs	r0, #162	@ 0xa2
 8000d3a:	f002 fc6b 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(170, 280, '0');
 8000d3e:	2230      	movs	r2, #48	@ 0x30
 8000d40:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000d44:	20aa      	movs	r0, #170	@ 0xaa
 8000d46:	f002 fc65 	bl	8003614 <LCD_DisplayChar>
}
 8000d4a:	bf00      	nop
 8000d4c:	3724      	adds	r7, #36	@ 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd90      	pop	{r4, r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000004 	.word	0x20000004
 8000d58:	2000000c 	.word	0x2000000c

08000d5c <disp_time>:

void disp_time(uint32_t time)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	uint32_t seconds = time / 1000;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a25      	ldr	r2, [pc, #148]	@ (8000dfc <disp_time+0xa0>)
 8000d68:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6c:	099b      	lsrs	r3, r3, #6
 8000d6e:	61fb      	str	r3, [r7, #28]
	uint32_t min = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
	uint32_t sec_tens = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
	while(seconds > 60)
 8000d78:	e005      	b.n	8000d86 <disp_time+0x2a>
	{
		seconds -= 60;
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b3c      	subs	r3, #60	@ 0x3c
 8000d7e:	61fb      	str	r3, [r7, #28]
		min++;
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	3301      	adds	r3, #1
 8000d84:	61bb      	str	r3, [r7, #24]
	while(seconds > 60)
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	2b3c      	cmp	r3, #60	@ 0x3c
 8000d8a:	d8f6      	bhi.n	8000d7a <disp_time+0x1e>
	}
	while(seconds > 10)
 8000d8c:	e005      	b.n	8000d9a <disp_time+0x3e>
	{
		seconds -= 10;
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b0a      	subs	r3, #10
 8000d92:	61fb      	str	r3, [r7, #28]
		sec_tens++;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	3301      	adds	r3, #1
 8000d98:	617b      	str	r3, [r7, #20]
	while(seconds > 10)
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	2b0a      	cmp	r3, #10
 8000d9e:	d8f6      	bhi.n	8000d8e <disp_time+0x32>
	}

	uint32_t sec_char = seconds + '0';
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	3330      	adds	r3, #48	@ 0x30
 8000da4:	613b      	str	r3, [r7, #16]
	uint32_t sec_tens_char = sec_tens + '0';
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3330      	adds	r3, #48	@ 0x30
 8000daa:	60fb      	str	r3, [r7, #12]
	uint32_t min_char = min + '0';
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	3330      	adds	r3, #48	@ 0x30
 8000db0:	60bb      	str	r3, [r7, #8]

	LCD_SetFont(&Font12x12);
 8000db2:	4813      	ldr	r0, [pc, #76]	@ (8000e00 <disp_time+0xa4>)
 8000db4:	f002 fbb0 	bl	8003518 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000db8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000dbc:	f002 fb9c 	bl	80034f8 <LCD_SetTextColor>
	LCD_DisplayChar(95, 144, min_char);
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	2190      	movs	r1, #144	@ 0x90
 8000dc8:	205f      	movs	r0, #95	@ 0x5f
 8000dca:	f002 fc23 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(109, 144, ':');
 8000dce:	223a      	movs	r2, #58	@ 0x3a
 8000dd0:	2190      	movs	r1, #144	@ 0x90
 8000dd2:	206d      	movs	r0, #109	@ 0x6d
 8000dd4:	f002 fc1e 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(119, 144, sec_tens_char);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	2190      	movs	r1, #144	@ 0x90
 8000de0:	2077      	movs	r0, #119	@ 0x77
 8000de2:	f002 fc17 	bl	8003614 <LCD_DisplayChar>
	LCD_DisplayChar(133, 144, sec_char);
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	461a      	mov	r2, r3
 8000dec:	2190      	movs	r1, #144	@ 0x90
 8000dee:	2085      	movs	r0, #133	@ 0x85
 8000df0:	f002 fc10 	bl	8003614 <LCD_DisplayChar>
}
 8000df4:	bf00      	nop
 8000df6:	3720      	adds	r7, #32
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	10624dd3 	.word	0x10624dd3
 8000e00:	2000000c 	.word	0x2000000c

08000e04 <block_drop>:

block_t block_drop(block_t *block)
{
 8000e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e06:	b091      	sub	sp, #68	@ 0x44
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
	//when timer reaches ARR and enters IRQ handler, call this function
	volatile block_t temp_tetromino = *block;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	461c      	mov	r4, r3
 8000e12:	f107 0608 	add.w	r6, r7, #8
 8000e16:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8000e1a:	4635      	mov	r5, r6
 8000e1c:	4623      	mov	r3, r4
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	6859      	ldr	r1, [r3, #4]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e28:	3410      	adds	r4, #16
 8000e2a:	3610      	adds	r6, #16
 8000e2c:	4564      	cmp	r4, ip
 8000e2e:	d1f4      	bne.n	8000e1a <block_drop+0x16>
 8000e30:	4633      	mov	r3, r6
 8000e32:	4622      	mov	r2, r4
 8000e34:	6810      	ldr	r0, [r2, #0]
 8000e36:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < SIZE; i++)
 8000e38:	2300      	movs	r3, #0
 8000e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000e3c:	e013      	b.n	8000e66 <block_drop+0x62>
	{
		temp_tetromino.y[i] += BLOCK_WIDTH;
 8000e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e40:	3314      	adds	r3, #20
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	3340      	adds	r3, #64	@ 0x40
 8000e46:	443b      	add	r3, r7
 8000e48:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	3317      	adds	r3, #23
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e54:	3314      	adds	r3, #20
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	3340      	adds	r3, #64	@ 0x40
 8000e5a:	443b      	add	r3, r7
 8000e5c:	f823 2c34 	strh.w	r2, [r3, #-52]
	for(int i = 0; i < SIZE; i++)
 8000e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e62:	3301      	adds	r3, #1
 8000e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	dde8      	ble.n	8000e3e <block_drop+0x3a>
	}
	//*block = temp_tetromino;
	return temp_tetromino;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f107 0408 	add.w	r4, r7, #8
 8000e72:	469c      	mov	ip, r3
 8000e74:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8000e78:	4665      	mov	r5, ip
 8000e7a:	4626      	mov	r6, r4
 8000e7c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e7e:	6028      	str	r0, [r5, #0]
 8000e80:	6069      	str	r1, [r5, #4]
 8000e82:	60aa      	str	r2, [r5, #8]
 8000e84:	60eb      	str	r3, [r5, #12]
 8000e86:	3410      	adds	r4, #16
 8000e88:	f10c 0c10 	add.w	ip, ip, #16
 8000e8c:	4574      	cmp	r4, lr
 8000e8e:	d1f3      	bne.n	8000e78 <block_drop+0x74>
 8000e90:	4663      	mov	r3, ip
 8000e92:	4622      	mov	r2, r4
 8000e94:	6810      	ldr	r0, [r2, #0]
 8000e96:	6018      	str	r0, [r3, #0]
}
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	3744      	adds	r7, #68	@ 0x44
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ea0 <block_create>:

block_t block_create()
{
 8000ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea2:	b0b1      	sub	sp, #196	@ 0xc4
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	MX_RNG_Init();
 8000ea8:	f002 f8ac 	bl	8003004 <MX_RNG_Init>
	volatile block_t block = {0};
 8000eac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000eb0:	2234      	movs	r2, #52	@ 0x34
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f007 fe39 	bl	8008b2c <memset>

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8000eba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	48cd      	ldr	r0, [pc, #820]	@ (80011f8 <block_create+0x358>)
 8000ec2:	f007 f915 	bl	80080f0 <HAL_RNG_GenerateRandomNumber>
	rand %= 7;
 8000ec6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000ec8:	4bcc      	ldr	r3, [pc, #816]	@ (80011fc <block_create+0x35c>)
 8000eca:	fba3 2301 	umull	r2, r3, r3, r1
 8000ece:	1aca      	subs	r2, r1, r3
 8000ed0:	0852      	lsrs	r2, r2, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	089a      	lsrs	r2, r3, #2
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	1a9b      	subs	r3, r3, r2
 8000edc:	1aca      	subs	r2, r1, r3
 8000ede:	62fa      	str	r2, [r7, #44]	@ 0x2c
	MX_RNG_Deinit();
 8000ee0:	f002 f8b8 	bl	8003054 <MX_RNG_Deinit>

	uint8_t name = rand;
 8000ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ee6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		block.name = name;
 8000eea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000eee:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

	uint8_t color = rand;
 8000ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

	//COLOR
	if(color == BLUE)
 8000ef8:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d102      	bne.n	8000f06 <block_create+0x66>
	{
		block.color = LCD_COLOR_BLUE2;
 8000f00:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000f04:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == RED)
 8000f06:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d102      	bne.n	8000f14 <block_create+0x74>
	{
		block.color = LCD_COLOR_RED;
 8000f0e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000f12:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == GREEN)
 8000f14:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d102      	bne.n	8000f22 <block_create+0x82>
	{
		block.color = LCD_COLOR_GREEN;
 8000f1c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000f20:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == CYAN)
 8000f22:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d102      	bne.n	8000f30 <block_create+0x90>
	{
		block.color = LCD_COLOR_CYAN;
 8000f2a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000f2e:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == YELLOW)
 8000f30:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d102      	bne.n	8000f3e <block_create+0x9e>
	{
		block.color = LCD_COLOR_YELLOW;
 8000f38:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000f3c:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == ORANGE)
 8000f3e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d102      	bne.n	8000f4c <block_create+0xac>
	{
		block.color = LCD_COLOR_ORANGE;
 8000f46:	f64f 33c1 	movw	r3, #64449	@ 0xfbc1
 8000f4a:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == PURPLE)
 8000f4c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000f50:	2b05      	cmp	r3, #5
 8000f52:	d102      	bne.n	8000f5a <block_create+0xba>
	{
		block.color = LCD_COLOR_PURPLE;
 8000f54:	f64b 0318 	movw	r3, #47128	@ 0xb818
 8000f58:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	//COORDINATES
	for(int i = 0; i < SIZE; i++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000f60:	e017      	b.n	8000f92 <block_create+0xf2>
	{
		block.x[i] = BLOCK_START_X + i*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000f62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	461a      	mov	r2, r3
 8000f6a:	0052      	lsls	r2, r2, #1
 8000f6c:	441a      	add	r2, r3
 8000f6e:	00d2      	lsls	r2, r2, #3
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	334b      	adds	r3, #75	@ 0x4b
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000f7c:	3310      	adds	r3, #16
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	33c0      	adds	r3, #192	@ 0xc0
 8000f82:	443b      	add	r3, r7
 8000f84:	f823 2c8c 	strh.w	r2, [r3, #-140]
	for(int i = 0; i < SIZE; i++)
 8000f88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000f92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	dde3      	ble.n	8000f62 <block_create+0xc2>
	}

	//BLOCK MATRICES
	if(block.name == O)
 8000f9a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d16f      	bne.n	8001084 <block_create+0x1e4>
	{
		uint16_t temp[SIZE][SIZE] =
 8000fa4:	4b96      	ldr	r3, [pc, #600]	@ (8001200 <block_create+0x360>)
 8000fa6:	f107 040c 	add.w	r4, r7, #12
 8000faa:	461d      	mov	r5, r3
 8000fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,1},
			{0,0,1,1}};

		for(int i = 0; i < SIZE; i++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000fbe:	e028      	b.n	8001012 <block_create+0x172>
		{
			for(int j = 0; j < SIZE; j++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000fc6:	e01b      	b.n	8001000 <block_create+0x160>
			{
				block.mat[i][j] = temp[j][i];
 8000fc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000fcc:	009a      	lsls	r2, r3, #2
 8000fce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000fd2:	4413      	add	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	33c0      	adds	r3, #192	@ 0xc0
 8000fd8:	443b      	add	r3, r7
 8000fda:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8000fde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000fe2:	009a      	lsls	r2, r3, #2
 8000fe4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000fe8:	4413      	add	r3, r2
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	33c0      	adds	r3, #192	@ 0xc0
 8000fee:	443b      	add	r3, r7
 8000ff0:	460a      	mov	r2, r1
 8000ff2:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < SIZE; j++)
 8000ff6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001000:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001004:	2b03      	cmp	r3, #3
 8001006:	dddf      	ble.n	8000fc8 <block_create+0x128>
		for(int i = 0; i < SIZE; i++)
 8001008:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800100c:	3301      	adds	r3, #1
 800100e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001012:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001016:	2b03      	cmp	r3, #3
 8001018:	ddd2      	ble.n	8000fc0 <block_create+0x120>
			}
		}
		for(int i = 0; i < SIZE; i++)
 800101a:	2300      	movs	r3, #0
 800101c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001020:	e02c      	b.n	800107c <block_create+0x1dc>
		{
			block.x[i] = BLOCK_START_X + (i-1)*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8001022:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001026:	3b01      	subs	r3, #1
 8001028:	b29b      	uxth	r3, r3
 800102a:	461a      	mov	r2, r3
 800102c:	0052      	lsls	r2, r2, #1
 800102e:	441a      	add	r2, r3
 8001030:	00d2      	lsls	r2, r2, #3
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	b29b      	uxth	r3, r3
 8001036:	334b      	adds	r3, #75	@ 0x4b
 8001038:	b29a      	uxth	r2, r3
 800103a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800103e:	3310      	adds	r3, #16
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	33c0      	adds	r3, #192	@ 0xc0
 8001044:	443b      	add	r3, r7
 8001046:	f823 2c8c 	strh.w	r2, [r3, #-140]
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 800104a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800104e:	3b02      	subs	r3, #2
 8001050:	b29b      	uxth	r3, r3
 8001052:	461a      	mov	r2, r3
 8001054:	0052      	lsls	r2, r2, #1
 8001056:	441a      	add	r2, r3
 8001058:	00d2      	lsls	r2, r2, #3
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	b29b      	uxth	r3, r3
 800105e:	3311      	adds	r3, #17
 8001060:	b29a      	uxth	r2, r3
 8001062:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001066:	3314      	adds	r3, #20
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	33c0      	adds	r3, #192	@ 0xc0
 800106c:	443b      	add	r3, r7
 800106e:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < SIZE; i++)
 8001072:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001076:	3301      	adds	r3, #1
 8001078:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800107c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001080:	2b03      	cmp	r3, #3
 8001082:	ddce      	ble.n	8001022 <block_create+0x182>
		}
	}
	if(block.name == L)
 8001084:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d16f      	bne.n	800116e <block_create+0x2ce>
	{
		uint16_t temp[SIZE][SIZE] =
 800108e:	4b5d      	ldr	r3, [pc, #372]	@ (8001204 <block_create+0x364>)
 8001090:	f107 040c 	add.w	r4, r7, #12
 8001094:	461d      	mov	r5, r3
 8001096:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800109e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,1,0},
			{0,0,1,0},
			{0,0,1,1}};
		for(int i = 0; i < SIZE; i++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80010a8:	e028      	b.n	80010fc <block_create+0x25c>
		{
			for(int j = 0; j < SIZE; j++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80010b0:	e01b      	b.n	80010ea <block_create+0x24a>
			{
				block.mat[i][j] = temp[j][i];
 80010b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80010b6:	009a      	lsls	r2, r3, #2
 80010b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80010bc:	4413      	add	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	33c0      	adds	r3, #192	@ 0xc0
 80010c2:	443b      	add	r3, r7
 80010c4:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 80010c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80010cc:	009a      	lsls	r2, r3, #2
 80010ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80010d2:	4413      	add	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	33c0      	adds	r3, #192	@ 0xc0
 80010d8:	443b      	add	r3, r7
 80010da:	460a      	mov	r2, r1
 80010dc:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < SIZE; j++)
 80010e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80010e4:	3301      	adds	r3, #1
 80010e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80010ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	dddf      	ble.n	80010b2 <block_create+0x212>
		for(int i = 0; i < SIZE; i++)
 80010f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80010f6:	3301      	adds	r3, #1
 80010f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80010fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001100:	2b03      	cmp	r3, #3
 8001102:	ddd2      	ble.n	80010aa <block_create+0x20a>
			}
		}
		for(int i = 0; i < SIZE; i++)
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800110a:	e02c      	b.n	8001166 <block_create+0x2c6>
		{
			block.x[i] = BLOCK_START_X + (i-1)*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 800110c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001110:	3b01      	subs	r3, #1
 8001112:	b29b      	uxth	r3, r3
 8001114:	461a      	mov	r2, r3
 8001116:	0052      	lsls	r2, r2, #1
 8001118:	441a      	add	r2, r3
 800111a:	00d2      	lsls	r2, r2, #3
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	b29b      	uxth	r3, r3
 8001120:	334b      	adds	r3, #75	@ 0x4b
 8001122:	b29a      	uxth	r2, r3
 8001124:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001128:	3310      	adds	r3, #16
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	33c0      	adds	r3, #192	@ 0xc0
 800112e:	443b      	add	r3, r7
 8001130:	f823 2c8c 	strh.w	r2, [r3, #-140]
			block.y[i] = BLOCK_START_Y + (i-1)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8001134:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001138:	3b01      	subs	r3, #1
 800113a:	b29b      	uxth	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	0052      	lsls	r2, r2, #1
 8001140:	441a      	add	r2, r3
 8001142:	00d2      	lsls	r2, r2, #3
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	b29b      	uxth	r3, r3
 8001148:	3311      	adds	r3, #17
 800114a:	b29a      	uxth	r2, r3
 800114c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001150:	3314      	adds	r3, #20
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	33c0      	adds	r3, #192	@ 0xc0
 8001156:	443b      	add	r3, r7
 8001158:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < SIZE; i++)
 800115c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001160:	3301      	adds	r3, #1
 8001162:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001166:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800116a:	2b03      	cmp	r3, #3
 800116c:	ddce      	ble.n	800110c <block_create+0x26c>
		}
	}
	if(block.name == J)
 800116e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d179      	bne.n	800126c <block_create+0x3cc>
	{
		uint16_t temp[SIZE][SIZE] =
 8001178:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <block_create+0x368>)
 800117a:	f107 040c 	add.w	r4, r7, #12
 800117e:	461d      	mov	r5, r3
 8001180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001184:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,1,0},
			{0,0,1,0},
			{0,1,1,0}};
		for(int i = 0; i < SIZE; i++)
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001192:	e028      	b.n	80011e6 <block_create+0x346>
		{
			for(int j = 0; j < SIZE; j++)
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800119a:	e01b      	b.n	80011d4 <block_create+0x334>
			{
				block.mat[i][j] = temp[j][i];
 800119c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011a0:	009a      	lsls	r2, r3, #2
 80011a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80011a6:	4413      	add	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	33c0      	adds	r3, #192	@ 0xc0
 80011ac:	443b      	add	r3, r7
 80011ae:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 80011b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80011b6:	009a      	lsls	r2, r3, #2
 80011b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011bc:	4413      	add	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	33c0      	adds	r3, #192	@ 0xc0
 80011c2:	443b      	add	r3, r7
 80011c4:	460a      	mov	r2, r1
 80011c6:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < SIZE; j++)
 80011ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011ce:	3301      	adds	r3, #1
 80011d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80011d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011d8:	2b03      	cmp	r3, #3
 80011da:	dddf      	ble.n	800119c <block_create+0x2fc>
		for(int i = 0; i < SIZE; i++)
 80011dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80011e0:	3301      	adds	r3, #1
 80011e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80011e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	ddd2      	ble.n	8001194 <block_create+0x2f4>
			}
		}
		for(int i = 0; i < SIZE; i++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80011f4:	e036      	b.n	8001264 <block_create+0x3c4>
 80011f6:	bf00      	nop
 80011f8:	200000a0 	.word	0x200000a0
 80011fc:	24924925 	.word	0x24924925
 8001200:	08008bb8 	.word	0x08008bb8
 8001204:	08008bd8 	.word	0x08008bd8
 8001208:	08008bf8 	.word	0x08008bf8
		{
			block.x[i] = BLOCK_START_X + i*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 800120c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001210:	b29b      	uxth	r3, r3
 8001212:	461a      	mov	r2, r3
 8001214:	0052      	lsls	r2, r2, #1
 8001216:	441a      	add	r2, r3
 8001218:	00d2      	lsls	r2, r2, #3
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	b29b      	uxth	r3, r3
 800121e:	334b      	adds	r3, #75	@ 0x4b
 8001220:	b29a      	uxth	r2, r3
 8001222:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001226:	3310      	adds	r3, #16
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	33c0      	adds	r3, #192	@ 0xc0
 800122c:	443b      	add	r3, r7
 800122e:	f823 2c8c 	strh.w	r2, [r3, #-140]
			block.y[i] = BLOCK_START_Y + (i-1)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8001232:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001236:	3b01      	subs	r3, #1
 8001238:	b29b      	uxth	r3, r3
 800123a:	461a      	mov	r2, r3
 800123c:	0052      	lsls	r2, r2, #1
 800123e:	441a      	add	r2, r3
 8001240:	00d2      	lsls	r2, r2, #3
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	b29b      	uxth	r3, r3
 8001246:	3311      	adds	r3, #17
 8001248:	b29a      	uxth	r2, r3
 800124a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800124e:	3314      	adds	r3, #20
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	33c0      	adds	r3, #192	@ 0xc0
 8001254:	443b      	add	r3, r7
 8001256:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < SIZE; i++)
 800125a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800125e:	3301      	adds	r3, #1
 8001260:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001264:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001268:	2b03      	cmp	r3, #3
 800126a:	ddcf      	ble.n	800120c <block_create+0x36c>
		}
	}
	if(block.name == S)
 800126c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b03      	cmp	r3, #3
 8001274:	d15b      	bne.n	800132e <block_create+0x48e>
	{
		uint16_t temp[SIZE][SIZE] =
 8001276:	4bba      	ldr	r3, [pc, #744]	@ (8001560 <block_create+0x6c0>)
 8001278:	f107 040c 	add.w	r4, r7, #12
 800127c:	461d      	mov	r5, r3
 800127e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001282:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001286:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,1},
			{0,1,1,0}};
		for(int i = 0; i < SIZE; i++)
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001290:	e028      	b.n	80012e4 <block_create+0x444>
		{
			for(int j = 0; j < SIZE; j++)
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001298:	e01b      	b.n	80012d2 <block_create+0x432>
			{
				block.mat[i][j] = temp[j][i];
 800129a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800129e:	009a      	lsls	r2, r3, #2
 80012a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80012a4:	4413      	add	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	33c0      	adds	r3, #192	@ 0xc0
 80012aa:	443b      	add	r3, r7
 80012ac:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 80012b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80012b4:	009a      	lsls	r2, r3, #2
 80012b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80012ba:	4413      	add	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	33c0      	adds	r3, #192	@ 0xc0
 80012c0:	443b      	add	r3, r7
 80012c2:	460a      	mov	r2, r1
 80012c4:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < SIZE; j++)
 80012c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80012cc:	3301      	adds	r3, #1
 80012ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80012d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	dddf      	ble.n	800129a <block_create+0x3fa>
		for(int i = 0; i < SIZE; i++)
 80012da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80012de:	3301      	adds	r3, #1
 80012e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80012e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	ddd2      	ble.n	8001292 <block_create+0x3f2>
			}
		}
		for(int i = 0; i < SIZE; i++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80012f2:	e018      	b.n	8001326 <block_create+0x486>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 80012f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80012f8:	3b02      	subs	r3, #2
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	0052      	lsls	r2, r2, #1
 8001300:	441a      	add	r2, r3
 8001302:	00d2      	lsls	r2, r2, #3
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	b29b      	uxth	r3, r3
 8001308:	3311      	adds	r3, #17
 800130a:	b29a      	uxth	r2, r3
 800130c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001310:	3314      	adds	r3, #20
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	33c0      	adds	r3, #192	@ 0xc0
 8001316:	443b      	add	r3, r7
 8001318:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < SIZE; i++)
 800131c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001320:	3301      	adds	r3, #1
 8001322:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001326:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800132a:	2b03      	cmp	r3, #3
 800132c:	dde2      	ble.n	80012f4 <block_create+0x454>
		}
	}
	if(block.name == Z)
 800132e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b04      	cmp	r3, #4
 8001336:	d15b      	bne.n	80013f0 <block_create+0x550>
	{
		uint16_t temp[SIZE][SIZE] =
 8001338:	4b8a      	ldr	r3, [pc, #552]	@ (8001564 <block_create+0x6c4>)
 800133a:	f107 040c 	add.w	r4, r7, #12
 800133e:	461d      	mov	r5, r3
 8001340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001344:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,1,1,0},
			{0,0,1,1}};
		for(int i = 0; i < SIZE; i++)
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001352:	e028      	b.n	80013a6 <block_create+0x506>
		{
			for(int j = 0; j < SIZE; j++)
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800135a:	e01b      	b.n	8001394 <block_create+0x4f4>
			{
				block.mat[i][j] = temp[j][i];
 800135c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001360:	009a      	lsls	r2, r3, #2
 8001362:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001366:	4413      	add	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	33c0      	adds	r3, #192	@ 0xc0
 800136c:	443b      	add	r3, r7
 800136e:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8001372:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001376:	009a      	lsls	r2, r3, #2
 8001378:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800137c:	4413      	add	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	33c0      	adds	r3, #192	@ 0xc0
 8001382:	443b      	add	r3, r7
 8001384:	460a      	mov	r2, r1
 8001386:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < SIZE; j++)
 800138a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800138e:	3301      	adds	r3, #1
 8001390:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001394:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001398:	2b03      	cmp	r3, #3
 800139a:	dddf      	ble.n	800135c <block_create+0x4bc>
		for(int i = 0; i < SIZE; i++)
 800139c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80013a0:	3301      	adds	r3, #1
 80013a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80013a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	ddd2      	ble.n	8001354 <block_create+0x4b4>
			}
		}
		for(int i = 0; i < SIZE; i++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80013b4:	e018      	b.n	80013e8 <block_create+0x548>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 80013b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013ba:	3b02      	subs	r3, #2
 80013bc:	b29b      	uxth	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	0052      	lsls	r2, r2, #1
 80013c2:	441a      	add	r2, r3
 80013c4:	00d2      	lsls	r2, r2, #3
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	3311      	adds	r3, #17
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013d2:	3314      	adds	r3, #20
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	33c0      	adds	r3, #192	@ 0xc0
 80013d8:	443b      	add	r3, r7
 80013da:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < SIZE; i++)
 80013de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013e2:	3301      	adds	r3, #1
 80013e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80013e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	dde2      	ble.n	80013b6 <block_create+0x516>
		}
	}
	if(block.name == T)
 80013f0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b05      	cmp	r3, #5
 80013f8:	d149      	bne.n	800148e <block_create+0x5ee>
	{
		uint16_t temp[SIZE][SIZE] =
 80013fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001568 <block_create+0x6c8>)
 80013fc:	f107 040c 	add.w	r4, r7, #12
 8001400:	461d      	mov	r5, r3
 8001402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001406:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800140a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,0},
			{0,1,1,1}};
		for(int i = 0; i < SIZE; i++)
 800140e:	2300      	movs	r3, #0
 8001410:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001412:	e01e      	b.n	8001452 <block_create+0x5b2>
		{
			for(int j = 0; j < SIZE; j++)
 8001414:	2300      	movs	r3, #0
 8001416:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001418:	e015      	b.n	8001446 <block_create+0x5a6>
			{
				block.mat[i][j] = temp[j][i];
 800141a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800141c:	009a      	lsls	r2, r3, #2
 800141e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001420:	4413      	add	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	33c0      	adds	r3, #192	@ 0xc0
 8001426:	443b      	add	r3, r7
 8001428:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 800142c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800142e:	009a      	lsls	r2, r3, #2
 8001430:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001432:	4413      	add	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	33c0      	adds	r3, #192	@ 0xc0
 8001438:	443b      	add	r3, r7
 800143a:	460a      	mov	r2, r1
 800143c:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < SIZE; j++)
 8001440:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001442:	3301      	adds	r3, #1
 8001444:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001446:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001448:	2b03      	cmp	r3, #3
 800144a:	dde6      	ble.n	800141a <block_create+0x57a>
		for(int i = 0; i < SIZE; i++)
 800144c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800144e:	3301      	adds	r3, #1
 8001450:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001452:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001454:	2b03      	cmp	r3, #3
 8001456:	dddd      	ble.n	8001414 <block_create+0x574>
			}
		}
		for(int i = 0; i < SIZE; i++)
 8001458:	2300      	movs	r3, #0
 800145a:	677b      	str	r3, [r7, #116]	@ 0x74
 800145c:	e014      	b.n	8001488 <block_create+0x5e8>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 800145e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001460:	3b02      	subs	r3, #2
 8001462:	b29b      	uxth	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	0052      	lsls	r2, r2, #1
 8001468:	441a      	add	r2, r3
 800146a:	00d2      	lsls	r2, r2, #3
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	b29b      	uxth	r3, r3
 8001470:	3311      	adds	r3, #17
 8001472:	b29a      	uxth	r2, r3
 8001474:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001476:	3314      	adds	r3, #20
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	33c0      	adds	r3, #192	@ 0xc0
 800147c:	443b      	add	r3, r7
 800147e:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < SIZE; i++)
 8001482:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001484:	3301      	adds	r3, #1
 8001486:	677b      	str	r3, [r7, #116]	@ 0x74
 8001488:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800148a:	2b03      	cmp	r3, #3
 800148c:	dde7      	ble.n	800145e <block_create+0x5be>
		}
	}
	if(block.name == I)
 800148e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b06      	cmp	r3, #6
 8001496:	d149      	bne.n	800152c <block_create+0x68c>
	{
		uint16_t temp[SIZE][SIZE] =
 8001498:	4b34      	ldr	r3, [pc, #208]	@ (800156c <block_create+0x6cc>)
 800149a:	f107 040c 	add.w	r4, r7, #12
 800149e:	461d      	mov	r5, r3
 80014a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{1,1,1,1},
			{0,0,0,0}};
		for(int i = 0; i < SIZE; i++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80014b0:	e01e      	b.n	80014f0 <block_create+0x650>
		{
			for(int j = 0; j < SIZE; j++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80014b6:	e015      	b.n	80014e4 <block_create+0x644>
			{
				block.mat[i][j] = temp[j][i];
 80014b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014ba:	009a      	lsls	r2, r3, #2
 80014bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014be:	4413      	add	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	33c0      	adds	r3, #192	@ 0xc0
 80014c4:	443b      	add	r3, r7
 80014c6:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 80014ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014cc:	009a      	lsls	r2, r3, #2
 80014ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014d0:	4413      	add	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	33c0      	adds	r3, #192	@ 0xc0
 80014d6:	443b      	add	r3, r7
 80014d8:	460a      	mov	r2, r1
 80014da:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < SIZE; j++)
 80014de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014e0:	3301      	adds	r3, #1
 80014e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80014e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	dde6      	ble.n	80014b8 <block_create+0x618>
		for(int i = 0; i < SIZE; i++)
 80014ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014ec:	3301      	adds	r3, #1
 80014ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80014f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	dddd      	ble.n	80014b2 <block_create+0x612>
			}
		}
		for(int i = 0; i < SIZE; i++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80014fa:	e014      	b.n	8001526 <block_create+0x686>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 80014fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014fe:	3b02      	subs	r3, #2
 8001500:	b29b      	uxth	r3, r3
 8001502:	461a      	mov	r2, r3
 8001504:	0052      	lsls	r2, r2, #1
 8001506:	441a      	add	r2, r3
 8001508:	00d2      	lsls	r2, r2, #3
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	b29b      	uxth	r3, r3
 800150e:	3311      	adds	r3, #17
 8001510:	b29a      	uxth	r2, r3
 8001512:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001514:	3314      	adds	r3, #20
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	33c0      	adds	r3, #192	@ 0xc0
 800151a:	443b      	add	r3, r7
 800151c:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < SIZE; i++)
 8001520:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001522:	3301      	adds	r3, #1
 8001524:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001526:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001528:	2b03      	cmp	r3, #3
 800152a:	dde7      	ble.n	80014fc <block_create+0x65c>
		}
	}
	return block;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001532:	469c      	mov	ip, r3
 8001534:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001538:	4665      	mov	r5, ip
 800153a:	4626      	mov	r6, r4
 800153c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800153e:	6028      	str	r0, [r5, #0]
 8001540:	6069      	str	r1, [r5, #4]
 8001542:	60aa      	str	r2, [r5, #8]
 8001544:	60eb      	str	r3, [r5, #12]
 8001546:	3410      	adds	r4, #16
 8001548:	f10c 0c10 	add.w	ip, ip, #16
 800154c:	4574      	cmp	r4, lr
 800154e:	d1f3      	bne.n	8001538 <block_create+0x698>
 8001550:	4663      	mov	r3, ip
 8001552:	4622      	mov	r2, r4
 8001554:	6810      	ldr	r0, [r2, #0]
 8001556:	6018      	str	r0, [r3, #0]
}
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	37c4      	adds	r7, #196	@ 0xc4
 800155c:	46bd      	mov	sp, r7
 800155e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001560:	08008c18 	.word	0x08008c18
 8001564:	08008c38 	.word	0x08008c38
 8001568:	08008c58 	.word	0x08008c58
 800156c:	08008c78 	.word	0x08008c78

08001570 <map_init>:

map_t map_init()
{
 8001570:	b580      	push	{r7, lr}
 8001572:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 8001576:	af00      	add	r7, sp, #0
 8001578:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800157c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001580:	6018      	str	r0, [r3, #0]
	volatile map_t map = {0};
 8001582:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001586:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800158a:	4618      	mov	r0, r3
 800158c:	f240 2336 	movw	r3, #566	@ 0x236
 8001590:	461a      	mov	r2, r3
 8001592:	2100      	movs	r1, #0
 8001594:	f007 faca 	bl	8008b2c <memset>
	for(int i = 0; i < COLS; i++)
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 800159e:	e019      	b.n	80015d4 <map_init+0x64>
	{
		map.x[i] = LEFT_EDGE + i*BLOCK_WIDTH;
 80015a0:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	0052      	lsls	r2, r2, #1
 80015aa:	441a      	add	r2, r3
 80015ac:	00d2      	lsls	r2, r2, #3
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	3306      	adds	r3, #6
 80015b4:	b299      	uxth	r1, r3
 80015b6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80015ba:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80015be:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 80015c2:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80015c6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < COLS; i++)
 80015ca:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80015ce:	3301      	adds	r3, #1
 80015d0:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 80015d4:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80015d8:	2b09      	cmp	r3, #9
 80015da:	dde1      	ble.n	80015a0 <map_init+0x30>
	}
	for(int i = 0; i < ROWS; i++)
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 80015e2:	e01b      	b.n	800161c <map_init+0xac>
	{
		map.y[i] = MAP_DIFFERENCE + EDGE_WIDTH + i*BLOCK_WIDTH + 2;
 80015e4:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	461a      	mov	r2, r3
 80015ec:	0052      	lsls	r2, r2, #1
 80015ee:	441a      	add	r2, r3
 80015f0:	00d2      	lsls	r2, r2, #3
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	3311      	adds	r3, #17
 80015f8:	b299      	uxth	r1, r3
 80015fa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80015fe:	f5a3 7210 	sub.w	r2, r3, #576	@ 0x240
 8001602:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001606:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	460a      	mov	r2, r1
 8001610:	809a      	strh	r2, [r3, #4]
	for(int i = 0; i < ROWS; i++)
 8001612:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001616:	3301      	adds	r3, #1
 8001618:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 800161c:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001620:	2b0c      	cmp	r3, #12
 8001622:	dddf      	ble.n	80015e4 <map_init+0x74>
	}
	return map;
 8001624:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001628:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001632:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f240 2336 	movw	r3, #566	@ 0x236
 800163e:	461a      	mov	r2, r3
 8001640:	f007 faa0 	bl	8008b84 <memcpy>
}
 8001644:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001648:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <collision>:

uint8_t collision(block_t *block, map_t* map, uint8_t dir)
{
 8001656:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001658:	f5ad 7d2d 	sub.w	sp, sp, #692	@ 0x2b4
 800165c:	af00      	add	r7, sp, #0
 800165e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001662:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001666:	6018      	str	r0, [r3, #0]
 8001668:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800166c:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8001670:	6019      	str	r1, [r3, #0]
 8001672:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001676:	f2a3 23a9 	subw	r3, r3, #681	@ 0x2a9
 800167a:	701a      	strb	r2, [r3, #0]
	volatile block_t temp_tetromino = *block;
 800167c:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001680:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	461c      	mov	r4, r3
 8001688:	f507 7616 	add.w	r6, r7, #600	@ 0x258
 800168c:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8001690:	4635      	mov	r5, r6
 8001692:	4623      	mov	r3, r4
 8001694:	6818      	ldr	r0, [r3, #0]
 8001696:	6859      	ldr	r1, [r3, #4]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169e:	3410      	adds	r4, #16
 80016a0:	3610      	adds	r6, #16
 80016a2:	4564      	cmp	r4, ip
 80016a4:	d1f4      	bne.n	8001690 <collision+0x3a>
 80016a6:	4633      	mov	r3, r6
 80016a8:	4622      	mov	r2, r4
 80016aa:	6810      	ldr	r0, [r2, #0]
 80016ac:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 80016ae:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80016b2:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 80016b6:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80016ba:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f240 2336 	movw	r3, #566	@ 0x236
 80016c8:	461a      	mov	r2, r3
 80016ca:	f007 fa5b 	bl	8008b84 <memcpy>

	uint16_t y_coor[SIZE];
	uint16_t x_coor[SIZE];
	uint8_t ind = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f887 32af 	strb.w	r3, [r7, #687]	@ 0x2af

	for(int i = 0; i < SIZE; i++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 80016da:	e049      	b.n	8001770 <collision+0x11a>
	{
		for(int j = 0; j < SIZE; j++)
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 80016e2:	e03c      	b.n	800175e <collision+0x108>
		{
			if(temp_tetromino.mat[i][j])
 80016e4:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 80016e8:	009a      	lsls	r2, r3, #2
 80016ea:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80016ee:	4413      	add	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80016f6:	443b      	add	r3, r7
 80016f8:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d028      	beq.n	8001754 <collision+0xfe>
			{
				x_coor[ind] = temp_tetromino.x[i];
 8001702:	f897 22af 	ldrb.w	r2, [r7, #687]	@ 0x2af
 8001706:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 800170a:	3310      	adds	r3, #16
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8001712:	443b      	add	r3, r7
 8001714:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8001718:	b299      	uxth	r1, r3
 800171a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800171e:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001722:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				y_coor[ind] = temp_tetromino.y[j];
 8001726:	f897 22af 	ldrb.w	r2, [r7, #687]	@ 0x2af
 800172a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800172e:	3314      	adds	r3, #20
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8001736:	443b      	add	r3, r7
 8001738:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 800173c:	b299      	uxth	r1, r3
 800173e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001742:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001746:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				ind++;
 800174a:	f897 32af 	ldrb.w	r3, [r7, #687]	@ 0x2af
 800174e:	3301      	adds	r3, #1
 8001750:	f887 32af 	strb.w	r3, [r7, #687]	@ 0x2af
		for(int j = 0; j < SIZE; j++)
 8001754:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8001758:	3301      	adds	r3, #1
 800175a:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 800175e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8001762:	2b03      	cmp	r3, #3
 8001764:	ddbe      	ble.n	80016e4 <collision+0x8e>
	for(int i = 0; i < SIZE; i++)
 8001766:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 800176a:	3301      	adds	r3, #1
 800176c:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8001770:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8001774:	2b03      	cmp	r3, #3
 8001776:	ddb1      	ble.n	80016dc <collision+0x86>
			}
		}
	}

	if(dir == LEFT)
 8001778:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800177c:	f2a3 23a9 	subw	r3, r3, #681	@ 0x2a9
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f040 80f4 	bne.w	8001970 <collision+0x31a>
	{
		for(int i = 0; i < COLS; i++)
 8001788:	2300      	movs	r3, #0
 800178a:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 800178e:	e0cc      	b.n	800192a <collision+0x2d4>
		{
			for(int j = 0; j < ROWS; j++)
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8001796:	e0be      	b.n	8001916 <collision+0x2c0>
			{
				if(temp_map.map_mat[i][j])
 8001798:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800179c:	f5a3 7124 	sub.w	r1, r3, #656	@ 0x290
 80017a0:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80017a4:	4613      	mov	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 80017b2:	4413      	add	r3, r2
 80017b4:	3380      	adds	r3, #128	@ 0x80
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	440b      	add	r3, r1
 80017ba:	889b      	ldrh	r3, [r3, #4]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 80a4 	beq.w	800190c <collision+0x2b6>
				{
					if(temp_map.x[i] == x_coor[0] - BLOCK_WIDTH && temp_map.y[j] == y_coor[0])
 80017c4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80017c8:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80017cc:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80017d0:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80017d4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80017e0:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	3b17      	subs	r3, #23
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d114      	bne.n	8001816 <collision+0x1c0>
 80017ec:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80017f0:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 80017f4:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80017f8:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	889b      	ldrh	r3, [r3, #4]
 8001802:	b29a      	uxth	r2, r3
 8001804:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001808:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d101      	bne.n	8001816 <collision+0x1c0>
					{
						return 1;
 8001812:	2301      	movs	r3, #1
 8001814:	e2ad      	b.n	8001d72 <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[1] - BLOCK_WIDTH && temp_map.y[j] == y_coor[1])
 8001816:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800181a:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 800181e:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 8001822:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001826:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800182a:	b29b      	uxth	r3, r3
 800182c:	461a      	mov	r2, r3
 800182e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001832:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001836:	885b      	ldrh	r3, [r3, #2]
 8001838:	3b17      	subs	r3, #23
 800183a:	429a      	cmp	r2, r3
 800183c:	d114      	bne.n	8001868 <collision+0x212>
 800183e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001842:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001846:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 800184a:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	4413      	add	r3, r2
 8001852:	889b      	ldrh	r3, [r3, #4]
 8001854:	b29a      	uxth	r2, r3
 8001856:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800185a:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 800185e:	885b      	ldrh	r3, [r3, #2]
 8001860:	429a      	cmp	r2, r3
 8001862:	d101      	bne.n	8001868 <collision+0x212>
					{
						return 1;
 8001864:	2301      	movs	r3, #1
 8001866:	e284      	b.n	8001d72 <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[2] - BLOCK_WIDTH && temp_map.y[j] == y_coor[2])
 8001868:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800186c:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001870:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 8001874:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001878:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800187c:	b29b      	uxth	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001884:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001888:	889b      	ldrh	r3, [r3, #4]
 800188a:	3b17      	subs	r3, #23
 800188c:	429a      	cmp	r2, r3
 800188e:	d114      	bne.n	80018ba <collision+0x264>
 8001890:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001894:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001898:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 800189c:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	889b      	ldrh	r3, [r3, #4]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018ac:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80018b0:	889b      	ldrh	r3, [r3, #4]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d101      	bne.n	80018ba <collision+0x264>
					{
						return 1;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e25b      	b.n	8001d72 <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[3] - BLOCK_WIDTH && temp_map.y[j] == y_coor[3])
 80018ba:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018be:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80018c2:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80018c6:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80018ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018d6:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80018da:	88db      	ldrh	r3, [r3, #6]
 80018dc:	3b17      	subs	r3, #23
 80018de:	429a      	cmp	r2, r3
 80018e0:	d114      	bne.n	800190c <collision+0x2b6>
 80018e2:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018e6:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 80018ea:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80018ee:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	889b      	ldrh	r3, [r3, #4]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018fe:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001902:	88db      	ldrh	r3, [r3, #6]
 8001904:	429a      	cmp	r2, r3
 8001906:	d101      	bne.n	800190c <collision+0x2b6>
					{
						return 1;
 8001908:	2301      	movs	r3, #1
 800190a:	e232      	b.n	8001d72 <collision+0x71c>
			for(int j = 0; j < ROWS; j++)
 800190c:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001910:	3301      	adds	r3, #1
 8001912:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8001916:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 800191a:	2b0c      	cmp	r3, #12
 800191c:	f77f af3c 	ble.w	8001798 <collision+0x142>
		for(int i = 0; i < COLS; i++)
 8001920:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001924:	3301      	adds	r3, #1
 8001926:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 800192a:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800192e:	2b09      	cmp	r3, #9
 8001930:	f77f af2e 	ble.w	8001790 <collision+0x13a>
					}
				}
			}
		}
		if(x_coor[0] == LEFT_EDGE || x_coor[1] == LEFT_EDGE || x_coor[2] == LEFT_EDGE || x_coor[3] == LEFT_EDGE)
 8001934:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001938:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	2b06      	cmp	r3, #6
 8001940:	d014      	beq.n	800196c <collision+0x316>
 8001942:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001946:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800194a:	885b      	ldrh	r3, [r3, #2]
 800194c:	2b06      	cmp	r3, #6
 800194e:	d00d      	beq.n	800196c <collision+0x316>
 8001950:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001954:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001958:	889b      	ldrh	r3, [r3, #4]
 800195a:	2b06      	cmp	r3, #6
 800195c:	d006      	beq.n	800196c <collision+0x316>
 800195e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001962:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001966:	88db      	ldrh	r3, [r3, #6]
 8001968:	2b06      	cmp	r3, #6
 800196a:	d101      	bne.n	8001970 <collision+0x31a>
		{
			return 1;
 800196c:	2301      	movs	r3, #1
 800196e:	e200      	b.n	8001d72 <collision+0x71c>
		}
	}

	if(dir == RIGHT)
 8001970:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001974:	f2a3 23a9 	subw	r3, r3, #681	@ 0x2a9
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b01      	cmp	r3, #1
 800197c:	f040 80f4 	bne.w	8001b68 <collision+0x512>
	{
		for(int i = 0; i < COLS; i++)
 8001980:	2300      	movs	r3, #0
 8001982:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 8001986:	e0cc      	b.n	8001b22 <collision+0x4cc>
		{
			for(int j = 0; j < ROWS; j++)
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 800198e:	e0be      	b.n	8001b0e <collision+0x4b8>
			{
				if(temp_map.map_mat[i][j])
 8001990:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001994:	f5a3 7124 	sub.w	r1, r3, #656	@ 0x290
 8001998:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 800199c:	4613      	mov	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 80019aa:	4413      	add	r3, r2
 80019ac:	3380      	adds	r3, #128	@ 0x80
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	440b      	add	r3, r1
 80019b2:	889b      	ldrh	r3, [r3, #4]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80a4 	beq.w	8001b04 <collision+0x4ae>
				{
					if(temp_map.x[i] == x_coor[0] + BLOCK_WIDTH && temp_map.y[j] == y_coor[0])
 80019bc:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80019c0:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80019c4:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 80019c8:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80019cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80019d8:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	3317      	adds	r3, #23
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d114      	bne.n	8001a0e <collision+0x3b8>
 80019e4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80019e8:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 80019ec:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 80019f0:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	889b      	ldrh	r3, [r3, #4]
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a00:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d101      	bne.n	8001a0e <collision+0x3b8>
					{
						return 1;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e1b1      	b.n	8001d72 <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[1] + BLOCK_WIDTH && temp_map.y[j] == y_coor[1])
 8001a0e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a12:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001a16:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001a1a:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001a1e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a2a:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001a2e:	885b      	ldrh	r3, [r3, #2]
 8001a30:	3317      	adds	r3, #23
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d114      	bne.n	8001a60 <collision+0x40a>
 8001a36:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a3a:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001a3e:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001a42:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	889b      	ldrh	r3, [r3, #4]
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a52:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001a56:	885b      	ldrh	r3, [r3, #2]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d101      	bne.n	8001a60 <collision+0x40a>
					{
						return 1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e188      	b.n	8001d72 <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[2] + BLOCK_WIDTH && temp_map.y[j] == y_coor[2])
 8001a60:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a64:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001a68:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001a6c:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001a70:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a7c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001a80:	889b      	ldrh	r3, [r3, #4]
 8001a82:	3317      	adds	r3, #23
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d114      	bne.n	8001ab2 <collision+0x45c>
 8001a88:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a8c:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001a90:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001a94:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	889b      	ldrh	r3, [r3, #4]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001aa4:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001aa8:	889b      	ldrh	r3, [r3, #4]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d101      	bne.n	8001ab2 <collision+0x45c>
					{
						return 1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e15f      	b.n	8001d72 <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[3] + BLOCK_WIDTH && temp_map.y[j] == y_coor[3])
 8001ab2:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001ab6:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001aba:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001abe:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001ac2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001ace:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001ad2:	88db      	ldrh	r3, [r3, #6]
 8001ad4:	3317      	adds	r3, #23
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d114      	bne.n	8001b04 <collision+0x4ae>
 8001ada:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001ade:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001ae2:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001ae6:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	889b      	ldrh	r3, [r3, #4]
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001af6:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001afa:	88db      	ldrh	r3, [r3, #6]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d101      	bne.n	8001b04 <collision+0x4ae>
					{
						return 1;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e136      	b.n	8001d72 <collision+0x71c>
			for(int j = 0; j < ROWS; j++)
 8001b04:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001b08:	3301      	adds	r3, #1
 8001b0a:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8001b0e:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001b12:	2b0c      	cmp	r3, #12
 8001b14:	f77f af3c 	ble.w	8001990 <collision+0x33a>
		for(int i = 0; i < COLS; i++)
 8001b18:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 8001b22:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8001b26:	2b09      	cmp	r3, #9
 8001b28:	f77f af2e 	ble.w	8001988 <collision+0x332>
					}
				}
			}
		}
		if(x_coor[0] == RIGHT_EDGE || x_coor[1] == RIGHT_EDGE || x_coor[2] == RIGHT_EDGE || x_coor[3] == RIGHT_EDGE)
 8001b2c:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001b30:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	2bd5      	cmp	r3, #213	@ 0xd5
 8001b38:	d014      	beq.n	8001b64 <collision+0x50e>
 8001b3a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001b3e:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001b42:	885b      	ldrh	r3, [r3, #2]
 8001b44:	2bd5      	cmp	r3, #213	@ 0xd5
 8001b46:	d00d      	beq.n	8001b64 <collision+0x50e>
 8001b48:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001b4c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001b50:	889b      	ldrh	r3, [r3, #4]
 8001b52:	2bd5      	cmp	r3, #213	@ 0xd5
 8001b54:	d006      	beq.n	8001b64 <collision+0x50e>
 8001b56:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001b5a:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001b5e:	88db      	ldrh	r3, [r3, #6]
 8001b60:	2bd5      	cmp	r3, #213	@ 0xd5
 8001b62:	d101      	bne.n	8001b68 <collision+0x512>
		{
			return 1;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e104      	b.n	8001d72 <collision+0x71c>
		}
	}

	if(dir == DOWN)
 8001b68:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001b6c:	f2a3 23a9 	subw	r3, r3, #681	@ 0x2a9
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	f040 80fc 	bne.w	8001d70 <collision+0x71a>
	{
		for(int i = 0; i < COLS; i++)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001b7e:	e0cc      	b.n	8001d1a <collision+0x6c4>
		{
			for(int j = 0; j < ROWS; j++)
 8001b80:	2300      	movs	r3, #0
 8001b82:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8001b86:	e0be      	b.n	8001d06 <collision+0x6b0>
			{
				if(temp_map.map_mat[i][j])
 8001b88:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001b8c:	f5a3 7124 	sub.w	r1, r3, #656	@ 0x290
 8001b90:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f8d7 228c 	ldr.w	r2, [r7, #652]	@ 0x28c
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3380      	adds	r3, #128	@ 0x80
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	440b      	add	r3, r1
 8001baa:	889b      	ldrh	r3, [r3, #4]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 80a4 	beq.w	8001cfc <collision+0x6a6>
				{
					if(temp_map.x[i] == x_coor[0] && temp_map.y[j] == y_coor[0] + BLOCK_WIDTH)
 8001bb4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001bb8:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001bbc:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 8001bc0:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001bc4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001bce:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d116      	bne.n	8001c06 <collision+0x5b0>
 8001bd8:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001bdc:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001be0:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8001be4:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	889b      	ldrh	r3, [r3, #4]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001bf6:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	3317      	adds	r3, #23
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d101      	bne.n	8001c06 <collision+0x5b0>
					{
						return 1;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e0b5      	b.n	8001d72 <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[1] && temp_map.y[j] == y_coor[1] + BLOCK_WIDTH)
 8001c06:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001c0a:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001c0e:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 8001c12:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001c16:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001c20:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001c24:	885b      	ldrh	r3, [r3, #2]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d116      	bne.n	8001c58 <collision+0x602>
 8001c2a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001c2e:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001c32:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8001c36:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	889b      	ldrh	r3, [r3, #4]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	461a      	mov	r2, r3
 8001c44:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001c48:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001c4c:	885b      	ldrh	r3, [r3, #2]
 8001c4e:	3317      	adds	r3, #23
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d101      	bne.n	8001c58 <collision+0x602>
					{
						return 1;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e08c      	b.n	8001d72 <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[2] && temp_map.y[j] == y_coor[2] + BLOCK_WIDTH)
 8001c58:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001c5c:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001c60:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 8001c64:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001c68:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001c72:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001c76:	889b      	ldrh	r3, [r3, #4]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d116      	bne.n	8001caa <collision+0x654>
 8001c7c:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001c80:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001c84:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8001c88:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	889b      	ldrh	r3, [r3, #4]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001c9a:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001c9e:	889b      	ldrh	r3, [r3, #4]
 8001ca0:	3317      	adds	r3, #23
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d101      	bne.n	8001caa <collision+0x654>
					{
						return 1;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e063      	b.n	8001d72 <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[3] && temp_map.y[j] == y_coor[3] + BLOCK_WIDTH)
 8001caa:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001cae:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001cb2:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 8001cb6:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001cba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001cc4:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001cc8:	88db      	ldrh	r3, [r3, #6]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d116      	bne.n	8001cfc <collision+0x6a6>
 8001cce:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001cd2:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001cd6:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8001cda:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4413      	add	r3, r2
 8001ce2:	889b      	ldrh	r3, [r3, #4]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001cec:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001cf0:	88db      	ldrh	r3, [r3, #6]
 8001cf2:	3317      	adds	r3, #23
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d101      	bne.n	8001cfc <collision+0x6a6>
					{
						return 1;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e03a      	b.n	8001d72 <collision+0x71c>
			for(int j = 0; j < ROWS; j++)
 8001cfc:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8001d00:	3301      	adds	r3, #1
 8001d02:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8001d06:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8001d0a:	2b0c      	cmp	r3, #12
 8001d0c:	f77f af3c 	ble.w	8001b88 <collision+0x532>
		for(int i = 0; i < COLS; i++)
 8001d10:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001d14:	3301      	adds	r3, #1
 8001d16:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001d1a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001d1e:	2b09      	cmp	r3, #9
 8001d20:	f77f af2e 	ble.w	8001b80 <collision+0x52a>
					}
				}
			}
		}
		if(y_coor[0] == BOTTOM_ROW || y_coor[1] == BOTTOM_ROW || y_coor[2] == BOTTOM_ROW || y_coor[3] == BOTTOM_ROW)
 8001d24:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001d28:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	f240 1225 	movw	r2, #293	@ 0x125
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01a      	beq.n	8001d6c <collision+0x716>
 8001d36:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001d3a:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001d3e:	885b      	ldrh	r3, [r3, #2]
 8001d40:	f240 1225 	movw	r2, #293	@ 0x125
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d011      	beq.n	8001d6c <collision+0x716>
 8001d48:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001d4c:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001d50:	889b      	ldrh	r3, [r3, #4]
 8001d52:	f240 1225 	movw	r2, #293	@ 0x125
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d008      	beq.n	8001d6c <collision+0x716>
 8001d5a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001d5e:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001d62:	88db      	ldrh	r3, [r3, #6]
 8001d64:	f240 1225 	movw	r2, #293	@ 0x125
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d101      	bne.n	8001d70 <collision+0x71a>
		{
			return 1;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <collision+0x71c>
		}
	}
	return 0;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d7c <map_update>:

map_t map_update(block_t *block, map_t* map)
{
 8001d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7e:	f5ad 7d2b 	sub.w	sp, sp, #684	@ 0x2ac
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001d88:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001d8c:	6018      	str	r0, [r3, #0]
 8001d8e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001d92:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001d96:	6019      	str	r1, [r3, #0]
 8001d98:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001d9c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001da0:	601a      	str	r2, [r3, #0]
	//append the map array with the new blocks in their respective coordinates
	//create new block
	volatile block_t temp_tetromino = *block;
 8001da2:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001da6:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	461c      	mov	r4, r3
 8001dae:	f507 7617 	add.w	r6, r7, #604	@ 0x25c
 8001db2:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8001db6:	4635      	mov	r5, r6
 8001db8:	4623      	mov	r3, r4
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	6859      	ldr	r1, [r3, #4]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dc4:	3410      	adds	r4, #16
 8001dc6:	3610      	adds	r6, #16
 8001dc8:	4564      	cmp	r4, ip
 8001dca:	d1f4      	bne.n	8001db6 <map_update+0x3a>
 8001dcc:	4633      	mov	r3, r6
 8001dce:	4622      	mov	r2, r4
 8001dd0:	6810      	ldr	r0, [r2, #0]
 8001dd2:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 8001dd4:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001dd8:	f5a3 7221 	sub.w	r2, r3, #644	@ 0x284
 8001ddc:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001de0:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	f240 2336 	movw	r3, #566	@ 0x236
 8001dee:	461a      	mov	r2, r3
 8001df0:	f006 fec8 	bl	8008b84 <memcpy>

	uint16_t y_coor[SIZE];
	uint16_t x_coor[SIZE];
	uint8_t ind = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7

	for(int i = 0; i < SIZE; i++)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8001e00:	e049      	b.n	8001e96 <map_update+0x11a>
	{
		for(int j = 0; j < SIZE; j++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8001e08:	e03c      	b.n	8001e84 <map_update+0x108>
		{
			if(temp_tetromino.mat[i][j])
 8001e0a:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001e0e:	009a      	lsls	r2, r3, #2
 8001e10:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001e14:	4413      	add	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8001e1c:	443b      	add	r3, r7
 8001e1e:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d028      	beq.n	8001e7a <map_update+0xfe>
			{
				x_coor[ind] = temp_tetromino.x[i];
 8001e28:	f897 22a7 	ldrb.w	r2, [r7, #679]	@ 0x2a7
 8001e2c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001e30:	3310      	adds	r3, #16
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8001e38:	443b      	add	r3, r7
 8001e3a:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8001e3e:	b299      	uxth	r1, r3
 8001e40:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001e44:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8001e48:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				y_coor[ind] = temp_tetromino.y[j];
 8001e4c:	f897 22a7 	ldrb.w	r2, [r7, #679]	@ 0x2a7
 8001e50:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001e54:	3314      	adds	r3, #20
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8001e5c:	443b      	add	r3, r7
 8001e5e:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8001e62:	b299      	uxth	r1, r3
 8001e64:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001e68:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001e6c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				ind++;
 8001e70:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8001e74:	3301      	adds	r3, #1
 8001e76:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		for(int j = 0; j < SIZE; j++)
 8001e7a:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8001e84:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	ddbe      	ble.n	8001e0a <map_update+0x8e>
	for(int i = 0; i < SIZE; i++)
 8001e8c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001e90:	3301      	adds	r3, #1
 8001e92:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8001e96:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	ddb1      	ble.n	8001e02 <map_update+0x86>
		}
	}

	//get indices for the map coordinates corresponding to the block coordinates
	//set the map logical matrix, and the color
	uint8_t index = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f887 329b 	strb.w	r3, [r7, #667]	@ 0x29b
	for(int i = 0; i < COLS; i++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8001eaa:	e068      	b.n	8001f7e <map_update+0x202>
	{
		for(int j = 0; j < ROWS; j++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001eb2:	e05b      	b.n	8001f6c <map_update+0x1f0>
		{
			if(temp_map.x[i] == x_coor[index] && temp_map.y[j] == y_coor[index])
 8001eb4:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001eb8:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001ebc:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8001ec0:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001ec4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	f897 129b 	ldrb.w	r1, [r7, #667]	@ 0x29b
 8001ece:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001ed2:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8001ed6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d141      	bne.n	8001f62 <map_update+0x1e6>
 8001ede:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001ee2:	f5a3 7221 	sub.w	r2, r3, #644	@ 0x284
 8001ee6:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001eea:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	889b      	ldrh	r3, [r3, #4]
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	f897 129b 	ldrb.w	r1, [r7, #667]	@ 0x29b
 8001efa:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001efe:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001f02:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d12b      	bne.n	8001f62 <map_update+0x1e6>
			{
				temp_map.map_mat[i][j] = ON;
 8001f0a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001f0e:	f5a3 7121 	sub.w	r1, r3, #644	@ 0x284
 8001f12:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 8001f24:	4413      	add	r3, r2
 8001f26:	3380      	adds	r3, #128	@ 0x80
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	440b      	add	r3, r1
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	809a      	strh	r2, [r3, #4]
				temp_map.map_color[i][j] = temp_tetromino.color;
 8001f30:	f8b7 325e 	ldrh.w	r3, [r7, #606]	@ 0x25e
 8001f34:	b298      	uxth	r0, r3
 8001f36:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001f3a:	f5a3 7121 	sub.w	r1, r3, #644	@ 0x284
 8001f3e:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 8001f50:	4413      	add	r3, r2
 8001f52:	4602      	mov	r2, r0
 8001f54:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				index++;
 8001f58:	f897 329b 	ldrb.w	r3, [r7, #667]	@ 0x29b
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	f887 329b 	strb.w	r3, [r7, #667]	@ 0x29b
		for(int j = 0; j < ROWS; j++)
 8001f62:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001f66:	3301      	adds	r3, #1
 8001f68:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001f6c:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001f70:	2b0c      	cmp	r3, #12
 8001f72:	dd9f      	ble.n	8001eb4 <map_update+0x138>
	for(int i = 0; i < COLS; i++)
 8001f74:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001f78:	3301      	adds	r3, #1
 8001f7a:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8001f7e:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001f82:	2b09      	cmp	r3, #9
 8001f84:	dd92      	ble.n	8001eac <map_update+0x130>
			}
		}
	}
	return temp_map;
 8001f86:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001f8a:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001f94:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f240 2336 	movw	r3, #566	@ 0x236
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f006 fdef 	bl	8008b84 <memcpy>
}
 8001fa6:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001faa:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	f507 772b 	add.w	r7, r7, #684	@ 0x2ac
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fb8 <num_levels_cleared>:

uint8_t num_levels_cleared(map_t *map)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001fc4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001fc8:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 8001fca:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001fce:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 8001fd2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001fd6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f240 2336 	movw	r3, #566	@ 0x236
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f006 fdcd 	bl	8008b84 <memcpy>

	uint8_t n = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
	for(int j = 0; j < ROWS; j++)
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8001ff6:	e045      	b.n	8002084 <num_levels_cleared+0xcc>
	{
		volatile uint8_t sum = 0;
 8001ff8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001ffc:	f2a3 2345 	subw	r3, r3, #581	@ 0x245
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < COLS; i++)
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 800200a:	e032      	b.n	8002072 <num_levels_cleared+0xba>
		{
			sum += temp_map.map_mat[i][j];
 800200c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002010:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 8002014:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8002026:	4413      	add	r3, r2
 8002028:	3380      	adds	r3, #128	@ 0x80
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	440b      	add	r3, r1
 800202e:	889b      	ldrh	r3, [r3, #4]
 8002030:	b29b      	uxth	r3, r3
 8002032:	b2da      	uxtb	r2, r3
 8002034:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002038:	f2a3 2345 	subw	r3, r3, #581	@ 0x245
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	4413      	add	r3, r2
 8002042:	b2da      	uxtb	r2, r3
 8002044:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002048:	f2a3 2345 	subw	r3, r3, #581	@ 0x245
 800204c:	701a      	strb	r2, [r3, #0]
			if(sum == COLS)
 800204e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002052:	f2a3 2345 	subw	r3, r3, #581	@ 0x245
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b0a      	cmp	r3, #10
 800205c:	d104      	bne.n	8002068 <num_levels_cleared+0xb0>
			{
				n++;
 800205e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002062:	3301      	adds	r3, #1
 8002064:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
		for(int i = 0; i < COLS; i++)
 8002068:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800206c:	3301      	adds	r3, #1
 800206e:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8002072:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8002076:	2b09      	cmp	r3, #9
 8002078:	ddc8      	ble.n	800200c <num_levels_cleared+0x54>
	for(int j = 0; j < ROWS; j++)
 800207a:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800207e:	3301      	adds	r3, #1
 8002080:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8002084:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8002088:	2b0c      	cmp	r3, #12
 800208a:	ddb5      	ble.n	8001ff8 <num_levels_cleared+0x40>
			}
		}
	}
	return n;
 800208c:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
}
 8002090:	4618      	mov	r0, r3
 8002092:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <level_clear>:

map_t level_clear(map_t *map)
{
 800209a:	b590      	push	{r4, r7, lr}
 800209c:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80020a6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80020aa:	6018      	str	r0, [r3, #0]
 80020ac:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80020b0:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80020b4:	6019      	str	r1, [r3, #0]
	volatile map_t temp_map = *map;
 80020b6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80020ba:	f5a3 7214 	sub.w	r2, r3, #592	@ 0x250
 80020be:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80020c2:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	f240 2336 	movw	r3, #566	@ 0x236
 80020d0:	461a      	mov	r2, r3
 80020d2:	f006 fd57 	bl	8008b84 <memcpy>

	uint8_t n = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f887 325f 	strb.w	r3, [r7, #607]	@ 0x25f
	volatile uint8_t row_ind_cleared[SIZE] = {0};
 80020dc:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80020e0:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
	for(int j = 0; j < ROWS; j++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 80020ee:	e04f      	b.n	8002190 <level_clear+0xf6>
	{
		volatile uint8_t sum = 0;
 80020f0:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80020f4:	f2a3 2355 	subw	r3, r3, #597	@ 0x255
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < COLS; i++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 8002102:	e03c      	b.n	800217e <level_clear+0xe4>
		{
			sum += temp_map.map_mat[i][j];
 8002104:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002108:	f5a3 7114 	sub.w	r1, r3, #592	@ 0x250
 800210c:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8002110:	4613      	mov	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 800211e:	4413      	add	r3, r2
 8002120:	3380      	adds	r3, #128	@ 0x80
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	440b      	add	r3, r1
 8002126:	889b      	ldrh	r3, [r3, #4]
 8002128:	b29b      	uxth	r3, r3
 800212a:	b2da      	uxtb	r2, r3
 800212c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002130:	f2a3 2355 	subw	r3, r3, #597	@ 0x255
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	4413      	add	r3, r2
 800213a:	b2da      	uxtb	r2, r3
 800213c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002140:	f2a3 2355 	subw	r3, r3, #597	@ 0x255
 8002144:	701a      	strb	r2, [r3, #0]
			if(sum == COLS)
 8002146:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800214a:	f2a3 2355 	subw	r3, r3, #597	@ 0x255
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b0a      	cmp	r3, #10
 8002154:	d10e      	bne.n	8002174 <level_clear+0xda>
			{
				row_ind_cleared[n] = j;
 8002156:	f897 325f 	ldrb.w	r3, [r7, #607]	@ 0x25f
 800215a:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 800215e:	b2d1      	uxtb	r1, r2
 8002160:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8002164:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8002168:	54d1      	strb	r1, [r2, r3]
				n++;
 800216a:	f897 325f 	ldrb.w	r3, [r7, #607]	@ 0x25f
 800216e:	3301      	adds	r3, #1
 8002170:	f887 325f 	strb.w	r3, [r7, #607]	@ 0x25f
		for(int i = 0; i < COLS; i++)
 8002174:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8002178:	3301      	adds	r3, #1
 800217a:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 800217e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8002182:	2b09      	cmp	r3, #9
 8002184:	ddbe      	ble.n	8002104 <level_clear+0x6a>
	for(int j = 0; j < ROWS; j++)
 8002186:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 800218a:	3301      	adds	r3, #1
 800218c:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8002190:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8002194:	2b0c      	cmp	r3, #12
 8002196:	ddab      	ble.n	80020f0 <level_clear+0x56>
			}
		}
	}

	for(int k = 0; k < n; k++)
 8002198:	2300      	movs	r3, #0
 800219a:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 800219e:	e0b3      	b.n	8002308 <level_clear+0x26e>
	{
		for(int j = row_ind_cleared[k]; j >= 0; j--)
 80021a0:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80021a4:	f5a3 7215 	sub.w	r2, r3, #596	@ 0x254
 80021a8:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80021ac:	4413      	add	r3, r2
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 80021b6:	e09d      	b.n	80022f4 <level_clear+0x25a>
		{
			for(int i = 0; i < COLS; i++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 80021be:	e08f      	b.n	80022e0 <level_clear+0x246>
			{
				if(j == row_ind_cleared[k])
 80021c0:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80021c4:	f5a3 7215 	sub.w	r2, r3, #596	@ 0x254
 80021c8:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80021cc:	4413      	add	r3, r2
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80021d8:	4293      	cmp	r3, r2
 80021da:	d124      	bne.n	8002226 <level_clear+0x18c>
				{
					temp_map.map_mat[i][j] = OFF;
 80021dc:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80021e0:	f5a3 7114 	sub.w	r1, r3, #592	@ 0x250
 80021e4:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 80021f6:	4413      	add	r3, r2
 80021f8:	3380      	adds	r3, #128	@ 0x80
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	440b      	add	r3, r1
 80021fe:	2200      	movs	r2, #0
 8002200:	809a      	strh	r2, [r3, #4]
					temp_map.map_color[i][j] = LCD_COLOR_BLACK;
 8002202:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002206:	f5a3 7114 	sub.w	r1, r3, #592	@ 0x250
 800220a:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 800220e:	4613      	mov	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 800221c:	4413      	add	r3, r2
 800221e:	2200      	movs	r2, #0
 8002220:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8002224:	e057      	b.n	80022d6 <level_clear+0x23c>
				}
				else if(j < row_ind_cleared[k])
 8002226:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800222a:	f5a3 7215 	sub.w	r2, r3, #596	@ 0x254
 800222e:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002232:	4413      	add	r3, r2
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	461a      	mov	r2, r3
 800223a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800223e:	4293      	cmp	r3, r2
 8002240:	da49      	bge.n	80022d6 <level_clear+0x23c>
				{
					temp_map.map_mat[i][j+1] = temp_map.map_mat[i][j];
 8002242:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8002246:	1c58      	adds	r0, r3, #1
 8002248:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800224c:	f5a3 7114 	sub.w	r1, r3, #592	@ 0x250
 8002250:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8002262:	4413      	add	r3, r2
 8002264:	3380      	adds	r3, #128	@ 0x80
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	440b      	add	r3, r1
 800226a:	889b      	ldrh	r3, [r3, #4]
 800226c:	b29c      	uxth	r4, r3
 800226e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002272:	f5a3 7114 	sub.w	r1, r3, #592	@ 0x250
 8002276:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 800227a:	4613      	mov	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	4403      	add	r3, r0
 8002286:	3380      	adds	r3, #128	@ 0x80
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	440b      	add	r3, r1
 800228c:	4622      	mov	r2, r4
 800228e:	809a      	strh	r2, [r3, #4]
					temp_map.map_color[i][j+1] = temp_map.map_color[i][j];
 8002290:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8002294:	1c58      	adds	r0, r3, #1
 8002296:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800229a:	f5a3 7114 	sub.w	r1, r3, #592	@ 0x250
 800229e:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 80022a2:	4613      	mov	r3, r2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	4413      	add	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 80022b0:	4413      	add	r3, r2
 80022b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80022b6:	b29c      	uxth	r4, r3
 80022b8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80022bc:	f5a3 7114 	sub.w	r1, r3, #592	@ 0x250
 80022c0:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 80022c4:	4613      	mov	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	4403      	add	r3, r0
 80022d0:	4622      	mov	r2, r4
 80022d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for(int i = 0; i < COLS; i++)
 80022d6:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80022da:	3301      	adds	r3, #1
 80022dc:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 80022e0:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80022e4:	2b09      	cmp	r3, #9
 80022e6:	f77f af6b 	ble.w	80021c0 <level_clear+0x126>
		for(int j = row_ind_cleared[k]; j >= 0; j--)
 80022ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80022ee:	3b01      	subs	r3, #1
 80022f0:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 80022f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f6bf af5d 	bge.w	80021b8 <level_clear+0x11e>
	for(int k = 0; k < n; k++)
 80022fe:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002302:	3301      	adds	r3, #1
 8002304:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8002308:	f897 325f 	ldrb.w	r3, [r7, #607]	@ 0x25f
 800230c:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8002310:	429a      	cmp	r2, r3
 8002312:	f6ff af45 	blt.w	80021a0 <level_clear+0x106>
				}
			}
		}
	}
	return temp_map;
 8002316:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800231a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002324:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002328:	4610      	mov	r0, r2
 800232a:	4619      	mov	r1, r3
 800232c:	f240 2336 	movw	r3, #566	@ 0x236
 8002330:	461a      	mov	r2, r3
 8002332:	f006 fc27 	bl	8008b84 <memcpy>
}
 8002336:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800233a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	f507 7719 	add.w	r7, r7, #612	@ 0x264
 8002344:	46bd      	mov	sp, r7
 8002346:	bd90      	pop	{r4, r7, pc}

08002348 <draw_updated_map>:

void draw_updated_map(map_t map)
{
 8002348:	b084      	sub	sp, #16
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	f107 0c10 	add.w	ip, r7, #16
 8002354:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i < COLS; i++)
 8002358:	2300      	movs	r3, #0
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	e037      	b.n	80023ce <draw_updated_map+0x86>
	{
		for(int j = 0; j < ROWS; j++)
 800235e:	2300      	movs	r3, #0
 8002360:	603b      	str	r3, [r7, #0]
 8002362:	e02e      	b.n	80023c2 <draw_updated_map+0x7a>
		{
			if(map.map_mat[i][j])
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	4413      	add	r3, r2
 8002374:	3380      	adds	r3, #128	@ 0x80
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	3310      	adds	r3, #16
 800237a:	443b      	add	r3, r7
 800237c:	889b      	ldrh	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d01c      	beq.n	80023bc <draw_updated_map+0x74>
			{
				draw_block(map.x[i], map.y[j], map.map_color[i][j]);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8002388:	f107 0210 	add.w	r2, r7, #16
 800238c:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	3310      	adds	r3, #16
 800239a:	443b      	add	r3, r7
 800239c:	8899      	ldrh	r1, [r3, #4]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	4413      	add	r3, r2
 80023ae:	f107 0210 	add.w	r2, r7, #16
 80023b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023b6:	461a      	mov	r2, r3
 80023b8:	f000 fb06 	bl	80029c8 <draw_block>
		for(int j = 0; j < ROWS; j++)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	3301      	adds	r3, #1
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b0c      	cmp	r3, #12
 80023c6:	ddcd      	ble.n	8002364 <draw_updated_map+0x1c>
	for(int i = 0; i < COLS; i++)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3301      	adds	r3, #1
 80023cc:	607b      	str	r3, [r7, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b09      	cmp	r3, #9
 80023d2:	ddc4      	ble.n	800235e <draw_updated_map+0x16>
			}
		}
	}
}
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023e0:	b004      	add	sp, #16
 80023e2:	4770      	bx	lr

080023e4 <clear_map>:
void clear_map(map_t map)
{
 80023e4:	b084      	sub	sp, #16
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	f107 0c10 	add.w	ip, r7, #16
 80023f0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i < COLS; i++)
 80023f4:	2300      	movs	r3, #0
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	e01d      	b.n	8002436 <clear_map+0x52>
	{
		for(int j = 0; j < ROWS; j++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	603b      	str	r3, [r7, #0]
 80023fe:	e014      	b.n	800242a <clear_map+0x46>
		{
			draw_block(map.x[i], map.y[j], LCD_COLOR_BLACK);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8002406:	f107 0210 	add.w	r2, r7, #16
 800240a:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	3310      	adds	r3, #16
 8002418:	443b      	add	r3, r7
 800241a:	889b      	ldrh	r3, [r3, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	4619      	mov	r1, r3
 8002420:	f000 fad2 	bl	80029c8 <draw_block>
		for(int j = 0; j < ROWS; j++)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	3301      	adds	r3, #1
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b0c      	cmp	r3, #12
 800242e:	dde7      	ble.n	8002400 <clear_map+0x1c>
	for(int i = 0; i < COLS; i++)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3301      	adds	r3, #1
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b09      	cmp	r3, #9
 800243a:	ddde      	ble.n	80023fa <clear_map+0x16>
		}
	}
}
 800243c:	bf00      	nop
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002448:	b004      	add	sp, #16
 800244a:	4770      	bx	lr

0800244c <block_rotate>:

block_t block_rotate(block_t *block, map_t *map)
{
 800244c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244e:	f5ad 7d47 	sub.w	sp, sp, #796	@ 0x31c
 8002452:	af00      	add	r7, sp, #0
 8002454:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002458:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 800245c:	6018      	str	r0, [r3, #0]
 800245e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002462:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8002466:	6019      	str	r1, [r3, #0]
 8002468:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800246c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8002470:	601a      	str	r2, [r3, #0]
	block_t temp_block = *block;
 8002472:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002476:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	461c      	mov	r4, r3
 800247e:	f507 762e 	add.w	r6, r7, #696	@ 0x2b8
 8002482:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002486:	4635      	mov	r5, r6
 8002488:	4623      	mov	r3, r4
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	6859      	ldr	r1, [r3, #4]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002494:	3410      	adds	r4, #16
 8002496:	3610      	adds	r6, #16
 8002498:	4564      	cmp	r4, ip
 800249a:	d1f4      	bne.n	8002486 <block_rotate+0x3a>
 800249c:	4633      	mov	r3, r6
 800249e:	4622      	mov	r2, r4
 80024a0:	6810      	ldr	r0, [r2, #0]
 80024a2:	6018      	str	r0, [r3, #0]
	map_t temp_map = *map;
 80024a4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80024a8:	f5a3 7226 	sub.w	r2, r3, #664	@ 0x298
 80024ac:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80024b0:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4610      	mov	r0, r2
 80024b8:	4619      	mov	r1, r3
 80024ba:	f240 2336 	movw	r3, #566	@ 0x236
 80024be:	461a      	mov	r2, r3
 80024c0:	f006 fb60 	bl	8008b84 <memcpy>

	if(temp_block.name == O || temp_block.y[0] > LCD_PIXEL_HEIGHT)
 80024c4:	f897 32b8 	ldrb.w	r3, [r7, #696]	@ 0x2b8
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d005      	beq.n	80024da <block_rotate+0x8e>
 80024ce:	f8b7 32e4 	ldrh.w	r3, [r7, #740]	@ 0x2e4
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80024d8:	d91a      	bls.n	8002510 <block_rotate+0xc4>
	{
		return temp_block;
 80024da:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80024de:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 80024e8:	469c      	mov	ip, r3
 80024ea:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80024ee:	4665      	mov	r5, ip
 80024f0:	4626      	mov	r6, r4
 80024f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80024f4:	6028      	str	r0, [r5, #0]
 80024f6:	6069      	str	r1, [r5, #4]
 80024f8:	60aa      	str	r2, [r5, #8]
 80024fa:	60eb      	str	r3, [r5, #12]
 80024fc:	3410      	adds	r4, #16
 80024fe:	f10c 0c10 	add.w	ip, ip, #16
 8002502:	4574      	cmp	r4, lr
 8002504:	d1f3      	bne.n	80024ee <block_rotate+0xa2>
 8002506:	4663      	mov	r3, ip
 8002508:	4622      	mov	r2, r4
 800250a:	6810      	ldr	r0, [r2, #0]
 800250c:	6018      	str	r0, [r3, #0]
 800250e:	e1e2      	b.n	80028d6 <block_rotate+0x48a>
	}


	if(temp_block.name == I)
 8002510:	f897 32b8 	ldrb.w	r3, [r7, #696]	@ 0x2b8
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b06      	cmp	r3, #6
 8002518:	d169      	bne.n	80025ee <block_rotate+0x1a2>
	{
		uint8_t transpose[SIZE][SIZE];
		for(int i = 0; i < SIZE; i++)
 800251a:	2300      	movs	r3, #0
 800251c:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 8002520:	e02c      	b.n	800257c <block_rotate+0x130>
		{
			for(int j = 0; j < SIZE; j++)
 8002522:	2300      	movs	r3, #0
 8002524:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 8002528:	e01f      	b.n	800256a <block_rotate+0x11e>
			{
				transpose[i][j] = temp_block.mat[j][i];
 800252a:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 800252e:	009a      	lsls	r2, r3, #2
 8002530:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8002534:	4413      	add	r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	f503 7346 	add.w	r3, r3, #792	@ 0x318
 800253c:	443b      	add	r3, r7
 800253e:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8002542:	b29b      	uxth	r3, r3
 8002544:	b2d9      	uxtb	r1, r3
 8002546:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800254a:	f5a3 722a 	sub.w	r2, r3, #680	@ 0x2a8
 800254e:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	441a      	add	r2, r3
 8002556:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 800255a:	4413      	add	r3, r2
 800255c:	460a      	mov	r2, r1
 800255e:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < SIZE; j++)
 8002560:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8002564:	3301      	adds	r3, #1
 8002566:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 800256a:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 800256e:	2b03      	cmp	r3, #3
 8002570:	dddb      	ble.n	800252a <block_rotate+0xde>
		for(int i = 0; i < SIZE; i++)
 8002572:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8002576:	3301      	adds	r3, #1
 8002578:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 800257c:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8002580:	2b03      	cmp	r3, #3
 8002582:	ddce      	ble.n	8002522 <block_rotate+0xd6>
			}
		}
		for(int i = 0; i < SIZE; i++)
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 800258a:	e02b      	b.n	80025e4 <block_rotate+0x198>
		{
			for(int j = 0; j < SIZE; j++)
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 8002592:	e01e      	b.n	80025d2 <block_rotate+0x186>
			{
				temp_block.mat[i][j] = transpose[i][j];
 8002594:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002598:	f5a3 722a 	sub.w	r2, r3, #680	@ 0x2a8
 800259c:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	441a      	add	r2, r3
 80025a4:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 80025a8:	4413      	add	r3, r2
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	4619      	mov	r1, r3
 80025ae:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80025b2:	009a      	lsls	r2, r3, #2
 80025b4:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 80025b8:	4413      	add	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	f503 7346 	add.w	r3, r3, #792	@ 0x318
 80025c0:	443b      	add	r3, r7
 80025c2:	460a      	mov	r2, r1
 80025c4:	f823 2c5c 	strh.w	r2, [r3, #-92]
			for(int j = 0; j < SIZE; j++)
 80025c8:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 80025cc:	3301      	adds	r3, #1
 80025ce:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 80025d2:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	dddc      	ble.n	8002594 <block_rotate+0x148>
		for(int i = 0; i < SIZE; i++)
 80025da:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80025de:	3301      	adds	r3, #1
 80025e0:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 80025e4:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	ddcf      	ble.n	800258c <block_rotate+0x140>
 80025ec:	e108      	b.n	8002800 <block_rotate+0x3b4>
			}
		}
	}


	else if(temp_block.name != O)
 80025ee:	f897 32b8 	ldrb.w	r3, [r7, #696]	@ 0x2b8
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 8103 	beq.w	8002800 <block_rotate+0x3b4>
	{
		uint8_t transpose_3x3[SIZE-1][SIZE-1];
		uint8_t transform[SIZE-1][SIZE-1];
		uint8_t mirror_identity[SIZE-1][SIZE-1] =
 80025fa:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80025fe:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 8002602:	4ab9      	ldr	r2, [pc, #740]	@ (80028e8 <block_rotate+0x49c>)
 8002604:	ca07      	ldmia	r2, {r0, r1, r2}
 8002606:	c303      	stmia	r3!, {r0, r1}
 8002608:	701a      	strb	r2, [r3, #0]
		{{0, 0, 1},
		{0, 1, 0},
		{1, 0, 0}};

		for(int i = 1; i < SIZE; i++)
 800260a:	2301      	movs	r3, #1
 800260c:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 8002610:	e030      	b.n	8002674 <block_rotate+0x228>
		{
			for(int j = 1; j < SIZE; j++)
 8002612:	2301      	movs	r3, #1
 8002614:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 8002618:	e023      	b.n	8002662 <block_rotate+0x216>
			{
				transpose_3x3[i-1][j-1] = temp_block.mat[j][i];
 800261a:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 800261e:	009a      	lsls	r2, r3, #2
 8002620:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8002624:	4413      	add	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	f503 7346 	add.w	r3, r3, #792	@ 0x318
 800262c:	443b      	add	r3, r7
 800262e:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8002632:	b298      	uxth	r0, r3
 8002634:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8002638:	1e5a      	subs	r2, r3, #1
 800263a:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 800263e:	1e59      	subs	r1, r3, #1
 8002640:	b2c4      	uxtb	r4, r0
 8002642:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002646:	f5a3 702d 	sub.w	r0, r3, #692	@ 0x2b4
 800264a:	4613      	mov	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4413      	add	r3, r2
 8002650:	4403      	add	r3, r0
 8002652:	440b      	add	r3, r1
 8002654:	4622      	mov	r2, r4
 8002656:	701a      	strb	r2, [r3, #0]
			for(int j = 1; j < SIZE; j++)
 8002658:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 800265c:	3301      	adds	r3, #1
 800265e:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 8002662:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8002666:	2b03      	cmp	r3, #3
 8002668:	ddd7      	ble.n	800261a <block_rotate+0x1ce>
		for(int i = 1; i < SIZE; i++)
 800266a:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 800266e:	3301      	adds	r3, #1
 8002670:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 8002674:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8002678:	2b03      	cmp	r3, #3
 800267a:	ddca      	ble.n	8002612 <block_rotate+0x1c6>
			}
		}

		for(int k = 0; k < SIZE-1; k++)
 800267c:	2300      	movs	r3, #0
 800267e:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8002682:	e06b      	b.n	800275c <block_rotate+0x310>
		{
			for(int i = 0; i < SIZE-1; i++)
 8002684:	2300      	movs	r3, #0
 8002686:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 800268a:	e05e      	b.n	800274a <block_rotate+0x2fe>
			{
				transform[k][i] = 0;
 800268c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002690:	f5a3 7130 	sub.w	r1, r3, #704	@ 0x2c0
 8002694:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	18ca      	adds	r2, r1, r3
 80026a0:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 80026a4:	4413      	add	r3, r2
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
				for(int j = 0; j < SIZE-1; j++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 80026b0:	e042      	b.n	8002738 <block_rotate+0x2ec>
				{
					transform[k][i] += (transpose_3x3[k][j] * mirror_identity[j][i]);
 80026b2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80026b6:	f5a3 7130 	sub.w	r1, r3, #704	@ 0x2c0
 80026ba:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 80026be:	4613      	mov	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4413      	add	r3, r2
 80026c4:	18ca      	adds	r2, r1, r3
 80026c6:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 80026ca:	4413      	add	r3, r2
 80026cc:	7819      	ldrb	r1, [r3, #0]
 80026ce:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80026d2:	f5a3 702d 	sub.w	r0, r3, #692	@ 0x2b4
 80026d6:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 80026da:	4613      	mov	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	18c2      	adds	r2, r0, r3
 80026e2:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 80026e6:	4413      	add	r3, r2
 80026e8:	7818      	ldrb	r0, [r3, #0]
 80026ea:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80026ee:	f5a3 7433 	sub.w	r4, r3, #716	@ 0x2cc
 80026f2:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 80026f6:	4613      	mov	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	4413      	add	r3, r2
 80026fc:	18e2      	adds	r2, r4, r3
 80026fe:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8002702:	4413      	add	r3, r2
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	fb10 f303 	smulbb	r3, r0, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	440b      	add	r3, r1
 800270e:	b2d8      	uxtb	r0, r3
 8002710:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002714:	f5a3 7130 	sub.w	r1, r3, #704	@ 0x2c0
 8002718:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	18ca      	adds	r2, r1, r3
 8002724:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8002728:	4413      	add	r3, r2
 800272a:	4602      	mov	r2, r0
 800272c:	701a      	strb	r2, [r3, #0]
				for(int j = 0; j < SIZE-1; j++)
 800272e:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8002732:	3301      	adds	r3, #1
 8002734:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 8002738:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 800273c:	2b02      	cmp	r3, #2
 800273e:	ddb8      	ble.n	80026b2 <block_rotate+0x266>
			for(int i = 0; i < SIZE-1; i++)
 8002740:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8002744:	3301      	adds	r3, #1
 8002746:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 800274a:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 800274e:	2b02      	cmp	r3, #2
 8002750:	dd9c      	ble.n	800268c <block_rotate+0x240>
		for(int k = 0; k < SIZE-1; k++)
 8002752:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8002756:	3301      	adds	r3, #1
 8002758:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 800275c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8002760:	2b02      	cmp	r3, #2
 8002762:	dd8f      	ble.n	8002684 <block_rotate+0x238>
				}
			}
		}

		for(int i = 0; i < SIZE; i++)
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 800276a:	e045      	b.n	80027f8 <block_rotate+0x3ac>
		{
			for(int j = 0; j < SIZE; j++)
 800276c:	2300      	movs	r3, #0
 800276e:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8002772:	e038      	b.n	80027e6 <block_rotate+0x39a>
			{
				if(i == 0 || j == 0)
 8002774:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <block_rotate+0x338>
 800277c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10d      	bne.n	80027a0 <block_rotate+0x354>
				{
					temp_block.mat[i][j] = 0;
 8002784:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8002788:	009a      	lsls	r2, r3, #2
 800278a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 800278e:	4413      	add	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	f503 7346 	add.w	r3, r3, #792	@ 0x318
 8002796:	443b      	add	r3, r7
 8002798:	2200      	movs	r2, #0
 800279a:	f823 2c5c 	strh.w	r2, [r3, #-92]
 800279e:	e01d      	b.n	80027dc <block_rotate+0x390>
				}
				else
				{
					temp_block.mat[i][j] = transform[i-1][j-1];
 80027a0:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 80027a4:	1e5a      	subs	r2, r3, #1
 80027a6:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80027aa:	1e59      	subs	r1, r3, #1
 80027ac:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80027b0:	f5a3 7030 	sub.w	r0, r3, #704	@ 0x2c0
 80027b4:	4613      	mov	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	4403      	add	r3, r0
 80027bc:	440b      	add	r3, r1
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 80027c6:	009a      	lsls	r2, r3, #2
 80027c8:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80027cc:	4413      	add	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	f503 7346 	add.w	r3, r3, #792	@ 0x318
 80027d4:	443b      	add	r3, r7
 80027d6:	460a      	mov	r2, r1
 80027d8:	f823 2c5c 	strh.w	r2, [r3, #-92]
			for(int j = 0; j < SIZE; j++)
 80027dc:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80027e0:	3301      	adds	r3, #1
 80027e2:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 80027e6:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	ddc2      	ble.n	8002774 <block_rotate+0x328>
		for(int i = 0; i < SIZE; i++)
 80027ee:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 80027f2:	3301      	adds	r3, #1
 80027f4:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 80027f8:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	ddb5      	ble.n	800276c <block_rotate+0x320>
				}
			}
		}
	}
	if(temp_block.x[3] > RIGHT_EDGE)
 8002800:	f8b7 32e2 	ldrh.w	r3, [r7, #738]	@ 0x2e2
 8002804:	b29b      	uxth	r3, r3
 8002806:	2bd5      	cmp	r3, #213	@ 0xd5
 8002808:	d920      	bls.n	800284c <block_rotate+0x400>
	{
		temp_block = block_move(&temp_block, &temp_map, LEFT);
 800280a:	4638      	mov	r0, r7
 800280c:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8002810:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002814:	2300      	movs	r3, #0
 8002816:	f000 f869 	bl	80028ec <block_move>
 800281a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800281e:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8002822:	461c      	mov	r4, r3
 8002824:	f507 762e 	add.w	r6, r7, #696	@ 0x2b8
 8002828:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800282c:	4635      	mov	r5, r6
 800282e:	4623      	mov	r3, r4
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	6859      	ldr	r1, [r3, #4]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800283a:	3410      	adds	r4, #16
 800283c:	3610      	adds	r6, #16
 800283e:	4564      	cmp	r4, ip
 8002840:	d1f4      	bne.n	800282c <block_rotate+0x3e0>
 8002842:	4633      	mov	r3, r6
 8002844:	4622      	mov	r2, r4
 8002846:	6810      	ldr	r0, [r2, #0]
 8002848:	6018      	str	r0, [r3, #0]
 800284a:	e02a      	b.n	80028a2 <block_rotate+0x456>
	}
	else if(temp_block.x[0] > LCD_PIXEL_WIDTH)
 800284c:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	@ 0x2dc
 8002850:	b29b      	uxth	r3, r3
 8002852:	2bf0      	cmp	r3, #240	@ 0xf0
 8002854:	d925      	bls.n	80028a2 <block_rotate+0x456>
	{
		while(temp_block.x[0] != LEFT_EDGE)
 8002856:	e01f      	b.n	8002898 <block_rotate+0x44c>
		{
			temp_block = block_move(&temp_block, &temp_map, RIGHT);
 8002858:	4638      	mov	r0, r7
 800285a:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800285e:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002862:	2301      	movs	r3, #1
 8002864:	f000 f842 	bl	80028ec <block_move>
 8002868:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800286c:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8002870:	461c      	mov	r4, r3
 8002872:	f507 762e 	add.w	r6, r7, #696	@ 0x2b8
 8002876:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800287a:	4635      	mov	r5, r6
 800287c:	4623      	mov	r3, r4
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002888:	3410      	adds	r4, #16
 800288a:	3610      	adds	r6, #16
 800288c:	4564      	cmp	r4, ip
 800288e:	d1f4      	bne.n	800287a <block_rotate+0x42e>
 8002890:	4633      	mov	r3, r6
 8002892:	4622      	mov	r2, r4
 8002894:	6810      	ldr	r0, [r2, #0]
 8002896:	6018      	str	r0, [r3, #0]
		while(temp_block.x[0] != LEFT_EDGE)
 8002898:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	@ 0x2dc
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b06      	cmp	r3, #6
 80028a0:	d1da      	bne.n	8002858 <block_rotate+0x40c>
		}
	}
	return temp_block;
 80028a2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80028a6:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 80028b0:	469c      	mov	ip, r3
 80028b2:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80028b6:	4665      	mov	r5, ip
 80028b8:	4626      	mov	r6, r4
 80028ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80028bc:	6028      	str	r0, [r5, #0]
 80028be:	6069      	str	r1, [r5, #4]
 80028c0:	60aa      	str	r2, [r5, #8]
 80028c2:	60eb      	str	r3, [r5, #12]
 80028c4:	3410      	adds	r4, #16
 80028c6:	f10c 0c10 	add.w	ip, ip, #16
 80028ca:	4574      	cmp	r4, lr
 80028cc:	d1f3      	bne.n	80028b6 <block_rotate+0x46a>
 80028ce:	4663      	mov	r3, ip
 80028d0:	4622      	mov	r2, r4
 80028d2:	6810      	ldr	r0, [r2, #0]
 80028d4:	6018      	str	r0, [r3, #0]
}
 80028d6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80028da:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	f507 7747 	add.w	r7, r7, #796	@ 0x31c
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028e8:	08008c98 	.word	0x08008c98

080028ec <block_move>:

block_t block_move(block_t *block, map_t *map, uint8_t dir)
{
 80028ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ee:	b095      	sub	sp, #84	@ 0x54
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	70fb      	strb	r3, [r7, #3]
	//when timer reaches ARR and enters IRQ handler, call this function
	//erase current and draw new tetromino
	volatile block_t temp_tetromino = *block;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	461c      	mov	r4, r3
 80028fe:	f107 0614 	add.w	r6, r7, #20
 8002902:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002906:	4635      	mov	r5, r6
 8002908:	4623      	mov	r3, r4
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	6859      	ldr	r1, [r3, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002914:	3410      	adds	r4, #16
 8002916:	3610      	adds	r6, #16
 8002918:	4564      	cmp	r4, ip
 800291a:	d1f4      	bne.n	8002906 <block_move+0x1a>
 800291c:	4633      	mov	r3, r6
 800291e:	4622      	mov	r2, r4
 8002920:	6810      	ldr	r0, [r2, #0]
 8002922:	6018      	str	r0, [r3, #0]
	if(dir)
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d01a      	beq.n	8002960 <block_move+0x74>
	{
		for(int i = 0; i < SIZE; i++)
 800292a:	2300      	movs	r3, #0
 800292c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800292e:	e013      	b.n	8002958 <block_move+0x6c>
		{
			temp_tetromino.x[i] += BLOCK_WIDTH;
 8002930:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002932:	3310      	adds	r3, #16
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	3350      	adds	r3, #80	@ 0x50
 8002938:	443b      	add	r3, r7
 800293a:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 800293e:	b29b      	uxth	r3, r3
 8002940:	3317      	adds	r3, #23
 8002942:	b29a      	uxth	r2, r3
 8002944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002946:	3310      	adds	r3, #16
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	3350      	adds	r3, #80	@ 0x50
 800294c:	443b      	add	r3, r7
 800294e:	f823 2c38 	strh.w	r2, [r3, #-56]
		for(int i = 0; i < SIZE; i++)
 8002952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002954:	3301      	adds	r3, #1
 8002956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800295a:	2b03      	cmp	r3, #3
 800295c:	dde8      	ble.n	8002930 <block_move+0x44>
 800295e:	e019      	b.n	8002994 <block_move+0xa8>
		}
	}
	else
	{
		for(int i = 0; i < SIZE; i++)
 8002960:	2300      	movs	r3, #0
 8002962:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002964:	e013      	b.n	800298e <block_move+0xa2>
		{
			temp_tetromino.x[i] -= BLOCK_WIDTH;
 8002966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002968:	3310      	adds	r3, #16
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	3350      	adds	r3, #80	@ 0x50
 800296e:	443b      	add	r3, r7
 8002970:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b17      	subs	r3, #23
 8002978:	b29a      	uxth	r2, r3
 800297a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800297c:	3310      	adds	r3, #16
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	3350      	adds	r3, #80	@ 0x50
 8002982:	443b      	add	r3, r7
 8002984:	f823 2c38 	strh.w	r2, [r3, #-56]
		for(int i = 0; i < SIZE; i++)
 8002988:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800298a:	3301      	adds	r3, #1
 800298c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800298e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002990:	2b03      	cmp	r3, #3
 8002992:	dde8      	ble.n	8002966 <block_move+0x7a>
		}
	}
	return temp_tetromino;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f107 0414 	add.w	r4, r7, #20
 800299a:	469c      	mov	ip, r3
 800299c:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80029a0:	4665      	mov	r5, ip
 80029a2:	4626      	mov	r6, r4
 80029a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80029a6:	6028      	str	r0, [r5, #0]
 80029a8:	6069      	str	r1, [r5, #4]
 80029aa:	60aa      	str	r2, [r5, #8]
 80029ac:	60eb      	str	r3, [r5, #12]
 80029ae:	3410      	adds	r4, #16
 80029b0:	f10c 0c10 	add.w	ip, ip, #16
 80029b4:	4574      	cmp	r4, lr
 80029b6:	d1f3      	bne.n	80029a0 <block_move+0xb4>
 80029b8:	4663      	mov	r3, ip
 80029ba:	4622      	mov	r2, r4
 80029bc:	6810      	ldr	r0, [r2, #0]
 80029be:	6018      	str	r0, [r3, #0]
}
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	3754      	adds	r7, #84	@ 0x54
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029c8 <draw_block>:

void draw_block(uint16_t x, uint16_t y, uint16_t color)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	80fb      	strh	r3, [r7, #6]
 80029d2:	460b      	mov	r3, r1
 80029d4:	80bb      	strh	r3, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	807b      	strh	r3, [r7, #2]
	for(int i = 0; i < BLOCK_WIDTH-1; i++)
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	e00c      	b.n	80029fa <draw_block+0x32>
	{
		LCD_Draw_Horizontal_Line(x, y+i, BLOCK_WIDTH-1, color);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	88bb      	ldrh	r3, [r7, #4]
 80029e6:	4413      	add	r3, r2
 80029e8:	b299      	uxth	r1, r3
 80029ea:	887b      	ldrh	r3, [r7, #2]
 80029ec:	88f8      	ldrh	r0, [r7, #6]
 80029ee:	2216      	movs	r2, #22
 80029f0:	f000 fd39 	bl	8003466 <LCD_Draw_Horizontal_Line>
	for(int i = 0; i < BLOCK_WIDTH-1; i++)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3301      	adds	r3, #1
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b15      	cmp	r3, #21
 80029fe:	ddef      	ble.n	80029e0 <draw_block+0x18>
	}
}
 8002a00:	bf00      	nop
 8002a02:	bf00      	nop
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <draw_shapes>:

void draw_shapes()
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b088      	sub	sp, #32
 8002a0e:	af00      	add	r7, sp, #0
	uint16_t x_offset = (LCD_PIXEL_WIDTH - (7 * (BLOCK_WIDTH * 4 + 15))) / 2;
 8002a10:	f64f 7302 	movw	r3, #65282	@ 0xff02
 8002a14:	80fb      	strh	r3, [r7, #6]

	// I tetromino (cyan)
	for (int i = 0; i < 4; i++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	e012      	b.n	8002a42 <draw_shapes+0x38>
	{
	   	draw_block(6, 224 + i*BLOCK_WIDTH, LCD_COLOR_CYAN);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	0052      	lsls	r2, r2, #1
 8002a24:	441a      	add	r2, r3
 8002a26:	00d2      	lsls	r2, r2, #3
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	33e0      	adds	r3, #224	@ 0xe0
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002a34:	4619      	mov	r1, r3
 8002a36:	2006      	movs	r0, #6
 8002a38:	f7ff ffc6 	bl	80029c8 <draw_block>
	for (int i = 0; i < 4; i++)
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	dde9      	ble.n	8002a1c <draw_shapes+0x12>
	}

	// L tetromino (orange)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	336b      	adds	r3, #107	@ 0x6b
 8002a4c:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	e012      	b.n	8002a7a <draw_shapes+0x70>
	{
	   	draw_block(i*BLOCK_WIDTH + 144, 224 + BLOCK_WIDTH, LCD_COLOR_ORANGE);
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	0052      	lsls	r2, r2, #1
 8002a5c:	441a      	add	r2, r3
 8002a5e:	00d2      	lsls	r2, r2, #3
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3390      	adds	r3, #144	@ 0x90
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	f64f 32c1 	movw	r2, #64449	@ 0xfbc1
 8002a6c:	21f7      	movs	r1, #247	@ 0xf7
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff ffaa 	bl	80029c8 <draw_block>
	for (int i = 0; i < 3; i++)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	3301      	adds	r3, #1
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	dde9      	ble.n	8002a54 <draw_shapes+0x4a>
	}
	draw_block(190, 224, LCD_COLOR_ORANGE);
 8002a80:	f64f 32c1 	movw	r2, #64449	@ 0xfbc1
 8002a84:	21e0      	movs	r1, #224	@ 0xe0
 8002a86:	20be      	movs	r0, #190	@ 0xbe
 8002a88:	f7ff ff9e 	bl	80029c8 <draw_block>

	// J tetromino (blue2)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	336b      	adds	r3, #107	@ 0x6b
 8002a90:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++)
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	e013      	b.n	8002ac0 <draw_shapes+0xb6>
	{
	   	draw_block(75 + (i-2)*BLOCK_WIDTH, 224 + BLOCK_WIDTH, LCD_COLOR_BLUE2);
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	3b02      	subs	r3, #2
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	0052      	lsls	r2, r2, #1
 8002aa2:	441a      	add	r2, r3
 8002aa4:	00d2      	lsls	r2, r2, #3
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	334b      	adds	r3, #75	@ 0x4b
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	f240 521f 	movw	r2, #1311	@ 0x51f
 8002ab2:	21f7      	movs	r1, #247	@ 0xf7
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff87 	bl	80029c8 <draw_block>
	for (int i = 0; i < 3; i++)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	3301      	adds	r3, #1
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	dde8      	ble.n	8002a98 <draw_shapes+0x8e>
	}
	draw_block(52 + BLOCK_WIDTH, 224 + 2*BLOCK_WIDTH, LCD_COLOR_BLUE2);
 8002ac6:	f240 521f 	movw	r2, #1311	@ 0x51f
 8002aca:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002ace:	204b      	movs	r0, #75	@ 0x4b
 8002ad0:	f7ff ff7a 	bl	80029c8 <draw_block>

	// O tetromino (yellow)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	336b      	adds	r3, #107	@ 0x6b
 8002ad8:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 2; i++) {
 8002ada:	2300      	movs	r3, #0
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	e025      	b.n	8002b2c <draw_shapes+0x122>
	    for (int j = 0; j < 2; j++) {
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	e01c      	b.n	8002b20 <draw_shapes+0x116>
	       	draw_block(67 + i*BLOCK_WIDTH - 38, 270 + j*BLOCK_WIDTH, LCD_COLOR_YELLOW);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	461a      	mov	r2, r3
 8002aec:	0052      	lsls	r2, r2, #1
 8002aee:	441a      	add	r2, r3
 8002af0:	00d2      	lsls	r2, r2, #3
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	331d      	adds	r3, #29
 8002af8:	b298      	uxth	r0, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	461a      	mov	r2, r3
 8002b00:	0052      	lsls	r2, r2, #1
 8002b02:	441a      	add	r2, r3
 8002b04:	00d2      	lsls	r2, r2, #3
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002b14:	4619      	mov	r1, r3
 8002b16:	f7ff ff57 	bl	80029c8 <draw_block>
	    for (int j = 0; j < 2; j++) {
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	dddf      	ble.n	8002ae6 <draw_shapes+0xdc>
	for (int i = 0; i < 2; i++) {
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	ddd6      	ble.n	8002ae0 <draw_shapes+0xd6>
	    }
	}

	// S tetromino (magenta)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	336b      	adds	r3, #107	@ 0x6b
 8002b36:	80fb      	strh	r3, [r7, #6]
	draw_block(144, 270 + BLOCK_WIDTH, LCD_COLOR_GREEN);
 8002b38:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002b3c:	f240 1125 	movw	r1, #293	@ 0x125
 8002b40:	2090      	movs	r0, #144	@ 0x90
 8002b42:	f7ff ff41 	bl	80029c8 <draw_block>
	draw_block(144 + BLOCK_WIDTH, 270 + BLOCK_WIDTH, LCD_COLOR_GREEN);
 8002b46:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002b4a:	f240 1125 	movw	r1, #293	@ 0x125
 8002b4e:	20a7      	movs	r0, #167	@ 0xa7
 8002b50:	f7ff ff3a 	bl	80029c8 <draw_block>
	draw_block(144 + BLOCK_WIDTH, 270, LCD_COLOR_GREEN);
 8002b54:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002b58:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002b5c:	20a7      	movs	r0, #167	@ 0xa7
 8002b5e:	f7ff ff33 	bl	80029c8 <draw_block>
	draw_block(144 + BLOCK_WIDTH * 2, 270, LCD_COLOR_GREEN);
 8002b62:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002b66:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002b6a:	20be      	movs	r0, #190	@ 0xbe
 8002b6c:	f7ff ff2c 	bl	80029c8 <draw_block>

	// T tetromino (purple)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	336b      	adds	r3, #107	@ 0x6b
 8002b74:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++) {
 8002b76:	2300      	movs	r3, #0
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	e014      	b.n	8002ba6 <draw_shapes+0x19c>
	   	draw_block(LEFT_EDGE + (i+3) * BLOCK_WIDTH, 293, LCD_COLOR_PURPLE);
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	3303      	adds	r3, #3
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	0052      	lsls	r2, r2, #1
 8002b86:	441a      	add	r2, r3
 8002b88:	00d2      	lsls	r2, r2, #3
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	3306      	adds	r3, #6
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	f64b 0218 	movw	r2, #47128	@ 0xb818
 8002b96:	f240 1125 	movw	r1, #293	@ 0x125
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff ff14 	bl	80029c8 <draw_block>
	for (int i = 0; i < 3; i++) {
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	dde7      	ble.n	8002b7c <draw_shapes+0x172>
	}
	draw_block(LEFT_EDGE + 4*BLOCK_WIDTH, 293 - BLOCK_WIDTH, LCD_COLOR_PURPLE);
 8002bac:	f64b 0218 	movw	r2, #47128	@ 0xb818
 8002bb0:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002bb4:	2062      	movs	r0, #98	@ 0x62
 8002bb6:	f7ff ff07 	bl	80029c8 <draw_block>

	// Z tetromino (strawberry)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	336b      	adds	r3, #107	@ 0x6b
 8002bbe:	80fb      	strh	r3, [r7, #6]
	draw_block(LEFT_EDGE + 4*BLOCK_WIDTH, 247, LCD_COLOR_STRAWBERRY);
 8002bc0:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8002bc4:	21f7      	movs	r1, #247	@ 0xf7
 8002bc6:	2062      	movs	r0, #98	@ 0x62
 8002bc8:	f7ff fefe 	bl	80029c8 <draw_block>
	draw_block(LEFT_EDGE + 5*BLOCK_WIDTH, 247, LCD_COLOR_STRAWBERRY);
 8002bcc:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8002bd0:	21f7      	movs	r1, #247	@ 0xf7
 8002bd2:	2079      	movs	r0, #121	@ 0x79
 8002bd4:	f7ff fef8 	bl	80029c8 <draw_block>
	draw_block(LEFT_EDGE + 5*BLOCK_WIDTH, 247 + BLOCK_WIDTH, LCD_COLOR_STRAWBERRY);
 8002bd8:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8002bdc:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002be0:	2079      	movs	r0, #121	@ 0x79
 8002be2:	f7ff fef1 	bl	80029c8 <draw_block>
	draw_block(LEFT_EDGE + 6*BLOCK_WIDTH, 247 + BLOCK_WIDTH, LCD_COLOR_STRAWBERRY);
 8002be6:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8002bea:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002bee:	2090      	movs	r0, #144	@ 0x90
 8002bf0:	f7ff feea 	bl	80029c8 <draw_block>

	// "O" shape (yellow)
	draw_block(x_offset - 50 + BLOCK_WIDTH, 246 - 9*BLOCK_WIDTH, LCD_COLOR_YELLOW);
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	3b1b      	subs	r3, #27
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002bfe:	2127      	movs	r1, #39	@ 0x27
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fee1 	bl	80029c8 <draw_block>
	draw_block(x_offset - 50 , 246 - 9*BLOCK_WIDTH, LCD_COLOR_YELLOW);
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	3b32      	subs	r3, #50	@ 0x32
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002c10:	2127      	movs	r1, #39	@ 0x27
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fed8 	bl	80029c8 <draw_block>
	draw_block(x_offset - 50 , 246 - 8*BLOCK_WIDTH, LCD_COLOR_YELLOW);
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	3b32      	subs	r3, #50	@ 0x32
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002c22:	213e      	movs	r1, #62	@ 0x3e
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fecf 	bl	80029c8 <draw_block>
	draw_block(x_offset - 50 + BLOCK_WIDTH, 246 - 8*BLOCK_WIDTH, LCD_COLOR_YELLOW);
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	3b1b      	subs	r3, #27
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002c34:	213e      	movs	r1, #62	@ 0x3e
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fec6 	bl	80029c8 <draw_block>
}
 8002c3c:	bf00      	nop
 8002c3e:	3720      	adds	r7, #32
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <draw_tetromino>:

void draw_tetromino(block_t block)
{
 8002c44:	b084      	sub	sp, #16
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	f107 0c10 	add.w	ip, r7, #16
 8002c50:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i < SIZE; i++)
 8002c54:	2300      	movs	r3, #0
 8002c56:	607b      	str	r3, [r7, #4]
 8002c58:	e029      	b.n	8002cae <draw_tetromino+0x6a>
	{
		for(int j = 0; j < SIZE; j++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	603b      	str	r3, [r7, #0]
 8002c5e:	e020      	b.n	8002ca2 <draw_tetromino+0x5e>
		{
			if(block.mat[i][j])
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	009a      	lsls	r2, r3, #2
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	4413      	add	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	3310      	adds	r3, #16
 8002c6c:	443b      	add	r3, r7
 8002c6e:	889b      	ldrh	r3, [r3, #4]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d012      	beq.n	8002c9c <draw_tetromino+0x58>
			{
				draw_block(block.x[i], block.y[j], block.color);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3310      	adds	r3, #16
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	3310      	adds	r3, #16
 8002c7e:	443b      	add	r3, r7
 8002c80:	889b      	ldrh	r3, [r3, #4]
 8002c82:	b298      	uxth	r0, r3
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	3314      	adds	r3, #20
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	3310      	adds	r3, #16
 8002c8c:	443b      	add	r3, r7
 8002c8e:	889b      	ldrh	r3, [r3, #4]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	8a7a      	ldrh	r2, [r7, #18]
 8002c94:	b292      	uxth	r2, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	f7ff fe96 	bl	80029c8 <draw_block>
		for(int j = 0; j < SIZE; j++)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	603b      	str	r3, [r7, #0]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	dddb      	ble.n	8002c60 <draw_tetromino+0x1c>
	for(int i = 0; i < SIZE; i++)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3301      	adds	r3, #1
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	ddd2      	ble.n	8002c5a <draw_tetromino+0x16>
			}
		}
	}
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cc0:	b004      	add	sp, #16
 8002cc2:	4770      	bx	lr

08002cc4 <clear_tetromino>:

void clear_tetromino(block_t block)
{
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	f107 0c10 	add.w	ip, r7, #16
 8002cd0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i < SIZE; i++)
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	e028      	b.n	8002d2c <clear_tetromino+0x68>
	{
		for(int j = 0; j < SIZE; j++)
 8002cda:	2300      	movs	r3, #0
 8002cdc:	603b      	str	r3, [r7, #0]
 8002cde:	e01f      	b.n	8002d20 <clear_tetromino+0x5c>
		{
			if(block.mat[i][j])
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	009a      	lsls	r2, r3, #2
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	3310      	adds	r3, #16
 8002cec:	443b      	add	r3, r7
 8002cee:	889b      	ldrh	r3, [r3, #4]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d011      	beq.n	8002d1a <clear_tetromino+0x56>
			{
				draw_block(block.x[i], block.y[j], LCD_COLOR_BLACK);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3310      	adds	r3, #16
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	3310      	adds	r3, #16
 8002cfe:	443b      	add	r3, r7
 8002d00:	889b      	ldrh	r3, [r3, #4]
 8002d02:	b298      	uxth	r0, r3
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	3314      	adds	r3, #20
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	3310      	adds	r3, #16
 8002d0c:	443b      	add	r3, r7
 8002d0e:	889b      	ldrh	r3, [r3, #4]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2200      	movs	r2, #0
 8002d14:	4619      	mov	r1, r3
 8002d16:	f7ff fe57 	bl	80029c8 <draw_block>
		for(int j = 0; j < SIZE; j++)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	dddc      	ble.n	8002ce0 <clear_tetromino+0x1c>
	for(int i = 0; i < SIZE; i++)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	ddd3      	ble.n	8002cda <clear_tetromino+0x16>
			}
		}
	}
}
 8002d32:	bf00      	nop
 8002d34:	bf00      	nop
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d3e:	b004      	add	sp, #16
 8002d40:	4770      	bx	lr

08002d42 <can_spawn>:

uint8_t can_spawn(block_t *block, map_t *map)
{
 8002d42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d44:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002d4e:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8002d52:	6018      	str	r0, [r3, #0]
 8002d54:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002d58:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8002d5c:	6019      	str	r1, [r3, #0]
	volatile block_t temp_tetromino = *block;
 8002d5e:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002d62:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	461c      	mov	r4, r3
 8002d6a:	f507 7614 	add.w	r6, r7, #592	@ 0x250
 8002d6e:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002d72:	4635      	mov	r5, r6
 8002d74:	4623      	mov	r3, r4
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	6859      	ldr	r1, [r3, #4]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d80:	3410      	adds	r4, #16
 8002d82:	3610      	adds	r6, #16
 8002d84:	4564      	cmp	r4, ip
 8002d86:	d1f4      	bne.n	8002d72 <can_spawn+0x30>
 8002d88:	4633      	mov	r3, r6
 8002d8a:	4622      	mov	r2, r4
 8002d8c:	6810      	ldr	r0, [r2, #0]
 8002d8e:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 8002d90:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002d94:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 8002d98:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002d9c:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4610      	mov	r0, r2
 8002da4:	4619      	mov	r1, r3
 8002da6:	f240 2336 	movw	r3, #566	@ 0x236
 8002daa:	461a      	mov	r2, r3
 8002dac:	f005 feea 	bl	8008b84 <memcpy>

	uint16_t block_x[SIZE];
	uint16_t block_y[SIZE];
	uint8_t ind = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297

	for(int i = 0; i < SIZE; i++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8002dbc:	e049      	b.n	8002e52 <can_spawn+0x110>
	{
		for(int j = 0; j < SIZE; j++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8002dc4:	e03c      	b.n	8002e40 <can_spawn+0xfe>
		{
			if(temp_tetromino.mat[i][j])
 8002dc6:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8002dca:	009a      	lsls	r2, r3, #2
 8002dcc:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8002dd0:	4413      	add	r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002dd8:	443b      	add	r3, r7
 8002dda:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d028      	beq.n	8002e36 <can_spawn+0xf4>
			{
				block_x[ind] = temp_tetromino.x[i];
 8002de4:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 8002de8:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8002dec:	3310      	adds	r3, #16
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002df4:	443b      	add	r3, r7
 8002df6:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8002dfa:	b299      	uxth	r1, r3
 8002dfc:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002e00:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8002e04:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				block_y[ind] = temp_tetromino.y[j];
 8002e08:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 8002e0c:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8002e10:	3314      	adds	r3, #20
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002e18:	443b      	add	r3, r7
 8002e1a:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8002e1e:	b299      	uxth	r1, r3
 8002e20:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002e24:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002e28:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				ind++;
 8002e2c:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8002e30:	3301      	adds	r3, #1
 8002e32:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
		for(int j = 0; j < SIZE; j++)
 8002e36:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8002e40:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	ddbe      	ble.n	8002dc6 <can_spawn+0x84>
	for(int i = 0; i < SIZE; i++)
 8002e48:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8002e52:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	ddb1      	ble.n	8002dbe <can_spawn+0x7c>
			}
		}
	}

	//iterate through the columns in the first 3 rows of the map, and if overlap, return 0
	for(int i = 3; i < 7; i++)
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8002e60:	e0c4      	b.n	8002fec <can_spawn+0x2aa>
	{
		for(int j = 0; j < 3; j++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8002e68:	e0b6      	b.n	8002fd8 <can_spawn+0x296>
		{
			if(temp_map.map_mat[i][j])
 8002e6a:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002e6e:	f5a3 7120 	sub.w	r1, r3, #640	@ 0x280
 8002e72:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8002e84:	4413      	add	r3, r2
 8002e86:	3380      	adds	r3, #128	@ 0x80
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	440b      	add	r3, r1
 8002e8c:	889b      	ldrh	r3, [r3, #4]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 809c 	beq.w	8002fce <can_spawn+0x28c>
			{
				if(temp_map.x[i] == block_x[0] && temp_map.y[j] == block_y[0])
 8002e96:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002e9a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8002e9e:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8002ea2:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8002ea6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002eb0:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d114      	bne.n	8002ee4 <can_spawn+0x1a2>
 8002eba:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002ebe:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 8002ec2:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002ec6:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	889b      	ldrh	r3, [r3, #4]
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002ed6:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d101      	bne.n	8002ee4 <can_spawn+0x1a2>
				{
					return 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	e089      	b.n	8002ff8 <can_spawn+0x2b6>
				}
				else if(temp_map.x[i] == block_x[1] && temp_map.y[j] == block_y[1])
 8002ee4:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002ee8:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8002eec:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8002ef0:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8002ef4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002efe:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8002f02:	885b      	ldrh	r3, [r3, #2]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d114      	bne.n	8002f32 <can_spawn+0x1f0>
 8002f08:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002f0c:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 8002f10:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002f14:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4413      	add	r3, r2
 8002f1c:	889b      	ldrh	r3, [r3, #4]
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002f24:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002f28:	885b      	ldrh	r3, [r3, #2]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d101      	bne.n	8002f32 <can_spawn+0x1f0>
				{
					return 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e062      	b.n	8002ff8 <can_spawn+0x2b6>
				}
				else if(temp_map.x[i] == block_x[2] && temp_map.y[j] == block_y[2])
 8002f32:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002f36:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8002f3a:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8002f3e:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8002f42:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002f4c:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8002f50:	889b      	ldrh	r3, [r3, #4]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d114      	bne.n	8002f80 <can_spawn+0x23e>
 8002f56:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002f5a:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 8002f5e:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002f62:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	889b      	ldrh	r3, [r3, #4]
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002f72:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002f76:	889b      	ldrh	r3, [r3, #4]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d101      	bne.n	8002f80 <can_spawn+0x23e>
				{
					return 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	e03b      	b.n	8002ff8 <can_spawn+0x2b6>
				}
				else if(temp_map.x[i] == block_x[3] && temp_map.y[j] == block_y[3])
 8002f80:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002f84:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8002f88:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8002f8c:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8002f90:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002f9a:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8002f9e:	88db      	ldrh	r3, [r3, #6]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d114      	bne.n	8002fce <can_spawn+0x28c>
 8002fa4:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002fa8:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 8002fac:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002fb0:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	889b      	ldrh	r3, [r3, #4]
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002fc0:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002fc4:	88db      	ldrh	r3, [r3, #6]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d101      	bne.n	8002fce <can_spawn+0x28c>
				{
					return 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e014      	b.n	8002ff8 <can_spawn+0x2b6>
		for(int j = 0; j < 3; j++)
 8002fce:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8002fd8:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	f77f af44 	ble.w	8002e6a <can_spawn+0x128>
	for(int i = 3; i < 7; i++)
 8002fe2:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8002fec:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8002ff0:	2b06      	cmp	r3, #6
 8002ff2:	f77f af36 	ble.w	8002e62 <can_spawn+0x120>
				}
			}
		}
	}
	return 1;
 8002ff6:	2301      	movs	r3, #1
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f507 7727 	add.w	r7, r7, #668	@ 0x29c
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003004 <MX_RNG_Init>:

static void MX_RNG_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
  __HAL_RCC_RNG_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	4b0e      	ldr	r3, [pc, #56]	@ (8003048 <MX_RNG_Init+0x44>)
 8003010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003012:	4a0d      	ldr	r2, [pc, #52]	@ (8003048 <MX_RNG_Init+0x44>)
 8003014:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003018:	6353      	str	r3, [r2, #52]	@ 0x34
 800301a:	4b0b      	ldr	r3, [pc, #44]	@ (8003048 <MX_RNG_Init+0x44>)
 800301c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800301e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
  hrng.Instance = RNG;
 8003026:	4b09      	ldr	r3, [pc, #36]	@ (800304c <MX_RNG_Init+0x48>)
 8003028:	4a09      	ldr	r2, [pc, #36]	@ (8003050 <MX_RNG_Init+0x4c>)
 800302a:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800302c:	4807      	ldr	r0, [pc, #28]	@ (800304c <MX_RNG_Init+0x48>)
 800302e:	f005 f835 	bl	800809c <HAL_RNG_Init>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <MX_RNG_Init+0x3a>
  {
	  APPLICATION_ASSERT(1);
 8003038:	2001      	movs	r0, #1
 800303a:	f000 f857 	bl	80030ec <APPLICATION_ASSERT>
  }
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800
 800304c:	200000a0 	.word	0x200000a0
 8003050:	50060800 	.word	0x50060800

08003054 <MX_RNG_Deinit>:

static void MX_RNG_Deinit(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  __HAL_RCC_RNG_CLK_DISABLE();
 8003058:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <MX_RNG_Deinit+0x2c>)
 800305a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800305c:	4a08      	ldr	r2, [pc, #32]	@ (8003080 <MX_RNG_Deinit+0x2c>)
 800305e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003062:	6353      	str	r3, [r2, #52]	@ 0x34
  hrng.Instance = RNG;
 8003064:	4b07      	ldr	r3, [pc, #28]	@ (8003084 <MX_RNG_Deinit+0x30>)
 8003066:	4a08      	ldr	r2, [pc, #32]	@ (8003088 <MX_RNG_Deinit+0x34>)
 8003068:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800306a:	4806      	ldr	r0, [pc, #24]	@ (8003084 <MX_RNG_Deinit+0x30>)
 800306c:	f005 f816 	bl	800809c <HAL_RNG_Init>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <MX_RNG_Deinit+0x28>
  {
	  APPLICATION_ASSERT(1);
 8003076:	2001      	movs	r0, #1
 8003078:	f000 f838 	bl	80030ec <APPLICATION_ASSERT>
  }
}
 800307c:	bf00      	nop
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40023800 	.word	0x40023800
 8003084:	200000a0 	.word	0x200000a0
 8003088:	50060800 	.word	0x50060800

0800308c <ButtonInit>:
 *      Author: 17202
 */
#include "Button_Driver.h"

void ButtonInit()
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef config = {0};
 8003092:	1d3b      	adds	r3, r7, #4
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	60da      	str	r2, [r3, #12]
 800309e:	611a      	str	r2, [r3, #16]

	config.Pin = GPIO_PIN_0;
 80030a0:	2301      	movs	r3, #1
 80030a2:	607b      	str	r3, [r7, #4]
	config.Mode = GPIO_MODE_IT_RISING;
 80030a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80030a8:	60bb      	str	r3, [r7, #8]
	config.Speed = GPIO_SPEED_FREQ_HIGH;
 80030aa:	2302      	movs	r3, #2
 80030ac:	613b      	str	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	4b0c      	ldr	r3, [pc, #48]	@ (80030e4 <ButtonInit+0x58>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	4a0b      	ldr	r2, [pc, #44]	@ (80030e4 <ButtonInit+0x58>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030be:	4b09      	ldr	r3, [pc, #36]	@ (80030e4 <ButtonInit+0x58>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &config);
 80030ca:	1d3b      	adds	r3, r7, #4
 80030cc:	4619      	mov	r1, r3
 80030ce:	4806      	ldr	r0, [pc, #24]	@ (80030e8 <ButtonInit+0x5c>)
 80030d0:	f002 fb88 	bl	80057e4 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80030d4:	2006      	movs	r0, #6
 80030d6:	f002 fb36 	bl	8005746 <HAL_NVIC_EnableIRQ>
	//GPIO_Init(BUTTON_PORT_VALUE, config, BUTTON_PIN_NUMBER);
}
 80030da:	bf00      	nop
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40020000 	.word	0x40020000

080030ec <APPLICATION_ASSERT>:
 */
#include "ErrorHandling.h"


void APPLICATION_ASSERT(bool tf)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030f6:	b672      	cpsid	i
}
 80030f8:	bf00      	nop
	__disable_irq();
	while(tf!=HAL_OK)
 80030fa:	bf00      	nop
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1fc      	bne.n	80030fc <APPLICATION_ASSERT+0x10>
	{}		//loop forever
}
 8003102:	bf00      	nop
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08c      	sub	sp, #48	@ 0x30
 8003114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	4b5a      	ldr	r3, [pc, #360]	@ (8003284 <LCD_GPIO_Init+0x174>)
 800311c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311e:	4a59      	ldr	r2, [pc, #356]	@ (8003284 <LCD_GPIO_Init+0x174>)
 8003120:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003124:	6453      	str	r3, [r2, #68]	@ 0x44
 8003126:	4b57      	ldr	r3, [pc, #348]	@ (8003284 <LCD_GPIO_Init+0x174>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800312e:	61bb      	str	r3, [r7, #24]
 8003130:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	4b53      	ldr	r3, [pc, #332]	@ (8003284 <LCD_GPIO_Init+0x174>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313a:	4a52      	ldr	r2, [pc, #328]	@ (8003284 <LCD_GPIO_Init+0x174>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6313      	str	r3, [r2, #48]	@ 0x30
 8003142:	4b50      	ldr	r3, [pc, #320]	@ (8003284 <LCD_GPIO_Init+0x174>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	4b4c      	ldr	r3, [pc, #304]	@ (8003284 <LCD_GPIO_Init+0x174>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	4a4b      	ldr	r2, [pc, #300]	@ (8003284 <LCD_GPIO_Init+0x174>)
 8003158:	f043 0302 	orr.w	r3, r3, #2
 800315c:	6313      	str	r3, [r2, #48]	@ 0x30
 800315e:	4b49      	ldr	r3, [pc, #292]	@ (8003284 <LCD_GPIO_Init+0x174>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	4b45      	ldr	r3, [pc, #276]	@ (8003284 <LCD_GPIO_Init+0x174>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	4a44      	ldr	r2, [pc, #272]	@ (8003284 <LCD_GPIO_Init+0x174>)
 8003174:	f043 0304 	orr.w	r3, r3, #4
 8003178:	6313      	str	r3, [r2, #48]	@ 0x30
 800317a:	4b42      	ldr	r3, [pc, #264]	@ (8003284 <LCD_GPIO_Init+0x174>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	4b3e      	ldr	r3, [pc, #248]	@ (8003284 <LCD_GPIO_Init+0x174>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	4a3d      	ldr	r2, [pc, #244]	@ (8003284 <LCD_GPIO_Init+0x174>)
 8003190:	f043 0308 	orr.w	r3, r3, #8
 8003194:	6313      	str	r3, [r2, #48]	@ 0x30
 8003196:	4b3b      	ldr	r3, [pc, #236]	@ (8003284 <LCD_GPIO_Init+0x174>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]
 80031a6:	4b37      	ldr	r3, [pc, #220]	@ (8003284 <LCD_GPIO_Init+0x174>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	4a36      	ldr	r2, [pc, #216]	@ (8003284 <LCD_GPIO_Init+0x174>)
 80031ac:	f043 0320 	orr.w	r3, r3, #32
 80031b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031b2:	4b34      	ldr	r3, [pc, #208]	@ (8003284 <LCD_GPIO_Init+0x174>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	607b      	str	r3, [r7, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	4b30      	ldr	r3, [pc, #192]	@ (8003284 <LCD_GPIO_Init+0x174>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c6:	4a2f      	ldr	r2, [pc, #188]	@ (8003284 <LCD_GPIO_Init+0x174>)
 80031c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003284 <LCD_GPIO_Init+0x174>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80031da:	f641 0358 	movw	r3, #6232	@ 0x1858
 80031de:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80031e0:	2302      	movs	r3, #2
 80031e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80031e8:	2302      	movs	r3, #2
 80031ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80031ec:	230e      	movs	r3, #14
 80031ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80031f0:	f107 031c 	add.w	r3, r7, #28
 80031f4:	4619      	mov	r1, r3
 80031f6:	4824      	ldr	r0, [pc, #144]	@ (8003288 <LCD_GPIO_Init+0x178>)
 80031f8:	f002 faf4 	bl	80057e4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80031fc:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003200:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003202:	f107 031c 	add.w	r3, r7, #28
 8003206:	4619      	mov	r1, r3
 8003208:	4820      	ldr	r0, [pc, #128]	@ (800328c <LCD_GPIO_Init+0x17c>)
 800320a:	f002 faeb 	bl	80057e4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800320e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003212:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003214:	f107 031c 	add.w	r3, r7, #28
 8003218:	4619      	mov	r1, r3
 800321a:	481d      	ldr	r0, [pc, #116]	@ (8003290 <LCD_GPIO_Init+0x180>)
 800321c:	f002 fae2 	bl	80057e4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003220:	2348      	movs	r3, #72	@ 0x48
 8003222:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003224:	f107 031c 	add.w	r3, r7, #28
 8003228:	4619      	mov	r1, r3
 800322a:	481a      	ldr	r0, [pc, #104]	@ (8003294 <LCD_GPIO_Init+0x184>)
 800322c:	f002 fada 	bl	80057e4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003230:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003234:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003236:	f107 031c 	add.w	r3, r7, #28
 800323a:	4619      	mov	r1, r3
 800323c:	4816      	ldr	r0, [pc, #88]	@ (8003298 <LCD_GPIO_Init+0x188>)
 800323e:	f002 fad1 	bl	80057e4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003242:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8003246:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003248:	f107 031c 	add.w	r3, r7, #28
 800324c:	4619      	mov	r1, r3
 800324e:	4813      	ldr	r0, [pc, #76]	@ (800329c <LCD_GPIO_Init+0x18c>)
 8003250:	f002 fac8 	bl	80057e4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003254:	2303      	movs	r3, #3
 8003256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003258:	2309      	movs	r3, #9
 800325a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800325c:	f107 031c 	add.w	r3, r7, #28
 8003260:	4619      	mov	r1, r3
 8003262:	480a      	ldr	r0, [pc, #40]	@ (800328c <LCD_GPIO_Init+0x17c>)
 8003264:	f002 fabe 	bl	80057e4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003268:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800326c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800326e:	f107 031c 	add.w	r3, r7, #28
 8003272:	4619      	mov	r1, r3
 8003274:	4809      	ldr	r0, [pc, #36]	@ (800329c <LCD_GPIO_Init+0x18c>)
 8003276:	f002 fab5 	bl	80057e4 <HAL_GPIO_Init>
}
 800327a:	bf00      	nop
 800327c:	3730      	adds	r7, #48	@ 0x30
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40023800 	.word	0x40023800
 8003288:	40020000 	.word	0x40020000
 800328c:	40020400 	.word	0x40020400
 8003290:	40020800 	.word	0x40020800
 8003294:	40020c00 	.word	0x40020c00
 8003298:	40021400 	.word	0x40021400
 800329c:	40021800 	.word	0x40021800

080032a0 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b090      	sub	sp, #64	@ 0x40
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80032ae:	23f0      	movs	r3, #240	@ 0xf0
 80032b0:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80032b6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80032ba:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80032bc:	2302      	movs	r3, #2
 80032be:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80032c0:	23ff      	movs	r3, #255	@ 0xff
 80032c2:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80032c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80032ce:	2305      	movs	r3, #5
 80032d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80032d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003318 <LTCD_Layer_Init+0x78>)
 80032da:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80032dc:	23f0      	movs	r3, #240	@ 0xf0
 80032de:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80032e0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80032e4:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80032f8:	79fa      	ldrb	r2, [r7, #7]
 80032fa:	f107 030c 	add.w	r3, r7, #12
 80032fe:	4619      	mov	r1, r3
 8003300:	4806      	ldr	r0, [pc, #24]	@ (800331c <LTCD_Layer_Init+0x7c>)
 8003302:	f003 feb1 	bl	8007068 <HAL_LTDC_ConfigLayer>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 800330c:	f000 f9a4 	bl	8003658 <LCD_Error_Handler>
	}
}
 8003310:	bf00      	nop
 8003312:	3740      	adds	r7, #64	@ 0x40
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	2000018c 	.word	0x2000018c
 800331c:	200000b0 	.word	0x200000b0

08003320 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8003324:	4b2a      	ldr	r3, [pc, #168]	@ (80033d0 <LTCD__Init+0xb0>)
 8003326:	4a2b      	ldr	r2, [pc, #172]	@ (80033d4 <LTCD__Init+0xb4>)
 8003328:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800332a:	4b29      	ldr	r3, [pc, #164]	@ (80033d0 <LTCD__Init+0xb0>)
 800332c:	2209      	movs	r2, #9
 800332e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8003330:	4b27      	ldr	r3, [pc, #156]	@ (80033d0 <LTCD__Init+0xb0>)
 8003332:	2201      	movs	r2, #1
 8003334:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8003336:	4b26      	ldr	r3, [pc, #152]	@ (80033d0 <LTCD__Init+0xb0>)
 8003338:	221d      	movs	r2, #29
 800333a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 800333c:	4b24      	ldr	r3, [pc, #144]	@ (80033d0 <LTCD__Init+0xb0>)
 800333e:	2203      	movs	r2, #3
 8003340:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8003342:	4b23      	ldr	r3, [pc, #140]	@ (80033d0 <LTCD__Init+0xb0>)
 8003344:	f240 120d 	movw	r2, #269	@ 0x10d
 8003348:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800334a:	4b21      	ldr	r3, [pc, #132]	@ (80033d0 <LTCD__Init+0xb0>)
 800334c:	f240 1243 	movw	r2, #323	@ 0x143
 8003350:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8003352:	4b1f      	ldr	r3, [pc, #124]	@ (80033d0 <LTCD__Init+0xb0>)
 8003354:	f240 1217 	movw	r2, #279	@ 0x117
 8003358:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800335a:	4b1d      	ldr	r3, [pc, #116]	@ (80033d0 <LTCD__Init+0xb0>)
 800335c:	f240 1247 	movw	r2, #327	@ 0x147
 8003360:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8003362:	4b1b      	ldr	r3, [pc, #108]	@ (80033d0 <LTCD__Init+0xb0>)
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800336a:	4b19      	ldr	r3, [pc, #100]	@ (80033d0 <LTCD__Init+0xb0>)
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8003372:	4b17      	ldr	r3, [pc, #92]	@ (80033d0 <LTCD__Init+0xb0>)
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800337a:	4b17      	ldr	r3, [pc, #92]	@ (80033d8 <LTCD__Init+0xb8>)
 800337c:	2208      	movs	r2, #8
 800337e:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003380:	4b15      	ldr	r3, [pc, #84]	@ (80033d8 <LTCD__Init+0xb8>)
 8003382:	22c0      	movs	r2, #192	@ 0xc0
 8003384:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003386:	4b14      	ldr	r3, [pc, #80]	@ (80033d8 <LTCD__Init+0xb8>)
 8003388:	2204      	movs	r2, #4
 800338a:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800338c:	4b12      	ldr	r3, [pc, #72]	@ (80033d8 <LTCD__Init+0xb8>)
 800338e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003392:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003394:	4810      	ldr	r0, [pc, #64]	@ (80033d8 <LTCD__Init+0xb8>)
 8003396:	f004 fcc1 	bl	8007d1c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800339a:	4b0d      	ldr	r3, [pc, #52]	@ (80033d0 <LTCD__Init+0xb0>)
 800339c:	2200      	movs	r2, #0
 800339e:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80033a0:	4b0b      	ldr	r3, [pc, #44]	@ (80033d0 <LTCD__Init+0xb0>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80033a6:	4b0a      	ldr	r3, [pc, #40]	@ (80033d0 <LTCD__Init+0xb0>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80033ac:	4b08      	ldr	r3, [pc, #32]	@ (80033d0 <LTCD__Init+0xb0>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80033b2:	f7ff fead 	bl	8003110 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80033b6:	4806      	ldr	r0, [pc, #24]	@ (80033d0 <LTCD__Init+0xb0>)
 80033b8:	f003 fd86 	bl	8006ec8 <HAL_LTDC_Init>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80033c2:	f000 f949 	bl	8003658 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80033c6:	f000 fbab 	bl	8003b20 <ili9341_Init>
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	200000b0 	.word	0x200000b0
 80033d4:	40016800 	.word	0x40016800
 80033d8:	20000158 	.word	0x20000158

080033dc <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	80fb      	strh	r3, [r7, #6]
 80033e6:	460b      	mov	r3, r1
 80033e8:	80bb      	strh	r3, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80033ee:	88ba      	ldrh	r2, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	461a      	mov	r2, r3
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	4413      	add	r3, r2
 80033fe:	4905      	ldr	r1, [pc, #20]	@ (8003414 <LCD_Draw_Pixel+0x38>)
 8003400:	887a      	ldrh	r2, [r7, #2]
 8003402:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	2000018c 	.word	0x2000018c

08003418 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	4604      	mov	r4, r0
 8003420:	4608      	mov	r0, r1
 8003422:	4611      	mov	r1, r2
 8003424:	461a      	mov	r2, r3
 8003426:	4623      	mov	r3, r4
 8003428:	80fb      	strh	r3, [r7, #6]
 800342a:	4603      	mov	r3, r0
 800342c:	80bb      	strh	r3, [r7, #4]
 800342e:	460b      	mov	r3, r1
 8003430:	807b      	strh	r3, [r7, #2]
 8003432:	4613      	mov	r3, r2
 8003434:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8003436:	2300      	movs	r3, #0
 8003438:	81fb      	strh	r3, [r7, #14]
 800343a:	e00b      	b.n	8003454 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 800343c:	89fa      	ldrh	r2, [r7, #14]
 800343e:	88bb      	ldrh	r3, [r7, #4]
 8003440:	4413      	add	r3, r2
 8003442:	b299      	uxth	r1, r3
 8003444:	883a      	ldrh	r2, [r7, #0]
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff ffc7 	bl	80033dc <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 800344e:	89fb      	ldrh	r3, [r7, #14]
 8003450:	3301      	adds	r3, #1
 8003452:	81fb      	strh	r3, [r7, #14]
 8003454:	89fa      	ldrh	r2, [r7, #14]
 8003456:	887b      	ldrh	r3, [r7, #2]
 8003458:	429a      	cmp	r2, r3
 800345a:	d3ef      	bcc.n	800343c <LCD_Draw_Vertical_Line+0x24>
  }
}
 800345c:	bf00      	nop
 800345e:	bf00      	nop
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	bd90      	pop	{r4, r7, pc}

08003466 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8003466:	b590      	push	{r4, r7, lr}
 8003468:	b085      	sub	sp, #20
 800346a:	af00      	add	r7, sp, #0
 800346c:	4604      	mov	r4, r0
 800346e:	4608      	mov	r0, r1
 8003470:	4611      	mov	r1, r2
 8003472:	461a      	mov	r2, r3
 8003474:	4623      	mov	r3, r4
 8003476:	80fb      	strh	r3, [r7, #6]
 8003478:	4603      	mov	r3, r0
 800347a:	80bb      	strh	r3, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	807b      	strh	r3, [r7, #2]
 8003480:	4613      	mov	r3, r2
 8003482:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8003484:	2300      	movs	r3, #0
 8003486:	81fb      	strh	r3, [r7, #14]
 8003488:	e00b      	b.n	80034a2 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 800348a:	89fa      	ldrh	r2, [r7, #14]
 800348c:	88fb      	ldrh	r3, [r7, #6]
 800348e:	4413      	add	r3, r2
 8003490:	b29b      	uxth	r3, r3
 8003492:	883a      	ldrh	r2, [r7, #0]
 8003494:	88b9      	ldrh	r1, [r7, #4]
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff ffa0 	bl	80033dc <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 800349c:	89fb      	ldrh	r3, [r7, #14]
 800349e:	3301      	adds	r3, #1
 80034a0:	81fb      	strh	r3, [r7, #14]
 80034a2:	89fa      	ldrh	r2, [r7, #14]
 80034a4:	887b      	ldrh	r3, [r7, #2]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d3ef      	bcc.n	800348a <LCD_Draw_Horizontal_Line+0x24>
  }
}
 80034aa:	bf00      	nop
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd90      	pop	{r4, r7, pc}

080034b4 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	460a      	mov	r2, r1
 80034be:	71fb      	strb	r3, [r7, #7]
 80034c0:	4613      	mov	r3, r2
 80034c2:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10e      	bne.n	80034e8 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	e007      	b.n	80034e0 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80034d0:	4908      	ldr	r1, [pc, #32]	@ (80034f4 <LCD_Clear+0x40>)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	88ba      	ldrh	r2, [r7, #4]
 80034d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	3301      	adds	r3, #1
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80034e6:	d3f3      	bcc.n	80034d0 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80034e8:	bf00      	nop
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	2000018c 	.word	0x2000018c

080034f8 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8003502:	4a04      	ldr	r2, [pc, #16]	@ (8003514 <LCD_SetTextColor+0x1c>)
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	8013      	strh	r3, [r2, #0]
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	20000000 	.word	0x20000000

08003518 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8003520:	4a04      	ldr	r2, [pc, #16]	@ (8003534 <LCD_SetFont+0x1c>)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6013      	str	r3, [r2, #0]
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000188 	.word	0x20000188

08003538 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	603a      	str	r2, [r7, #0]
 8003542:	80fb      	strh	r3, [r7, #6]
 8003544:	460b      	mov	r3, r1
 8003546:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	2300      	movs	r3, #0
 800354e:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	e04c      	b.n	80035f0 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	e03f      	b.n	80035dc <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	4413      	add	r3, r2
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	4619      	mov	r1, r3
 8003568:	4b27      	ldr	r3, [pc, #156]	@ (8003608 <LCD_Draw_Char+0xd0>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	889b      	ldrh	r3, [r3, #4]
 800356e:	4a27      	ldr	r2, [pc, #156]	@ (800360c <LCD_Draw_Char+0xd4>)
 8003570:	fba2 2303 	umull	r2, r3, r2, r3
 8003574:	08db      	lsrs	r3, r3, #3
 8003576:	b29b      	uxth	r3, r3
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	2280      	movs	r2, #128	@ 0x80
 800357c:	409a      	lsls	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	fa42 f303 	asr.w	r3, r2, r3
 8003584:	400b      	ands	r3, r1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d104      	bne.n	8003594 <LCD_Draw_Char+0x5c>
 800358a:	4b1f      	ldr	r3, [pc, #124]	@ (8003608 <LCD_Draw_Char+0xd0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	889b      	ldrh	r3, [r3, #4]
 8003590:	2b0c      	cmp	r3, #12
 8003592:	d920      	bls.n	80035d6 <LCD_Draw_Char+0x9e>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	4413      	add	r3, r2
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	fa42 f303 	asr.w	r3, r2, r3
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d104      	bne.n	80035b8 <LCD_Draw_Char+0x80>
 80035ae:	4b16      	ldr	r3, [pc, #88]	@ (8003608 <LCD_Draw_Char+0xd0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	889b      	ldrh	r3, [r3, #4]
 80035b4:	2b0c      	cmp	r3, #12
 80035b6:	d80e      	bhi.n	80035d6 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	4413      	add	r3, r2
 80035c0:	b298      	uxth	r0, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	88bb      	ldrh	r3, [r7, #4]
 80035c8:	4413      	add	r3, r2
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	4a10      	ldr	r2, [pc, #64]	@ (8003610 <LCD_Draw_Char+0xd8>)
 80035ce:	8812      	ldrh	r2, [r2, #0]
 80035d0:	4619      	mov	r1, r3
 80035d2:	f7ff ff03 	bl	80033dc <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	3301      	adds	r3, #1
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003608 <LCD_Draw_Char+0xd0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	889b      	ldrh	r3, [r3, #4]
 80035e2:	461a      	mov	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d3b8      	bcc.n	800355c <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	3301      	adds	r3, #1
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	4b05      	ldr	r3, [pc, #20]	@ (8003608 <LCD_Draw_Char+0xd0>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	88db      	ldrh	r3, [r3, #6]
 80035f6:	461a      	mov	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d3ab      	bcc.n	8003556 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 80035fe:	bf00      	nop
 8003600:	bf00      	nop
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000188 	.word	0x20000188
 800360c:	aaaaaaab 	.word	0xaaaaaaab
 8003610:	20000000 	.word	0x20000000

08003614 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	80fb      	strh	r3, [r7, #6]
 800361e:	460b      	mov	r3, r1
 8003620:	80bb      	strh	r3, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8003626:	78fb      	ldrb	r3, [r7, #3]
 8003628:	3b20      	subs	r3, #32
 800362a:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 800362c:	4b09      	ldr	r3, [pc, #36]	@ (8003654 <LCD_DisplayChar+0x40>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	4907      	ldr	r1, [pc, #28]	@ (8003654 <LCD_DisplayChar+0x40>)
 8003636:	6809      	ldr	r1, [r1, #0]
 8003638:	88c9      	ldrh	r1, [r1, #6]
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	441a      	add	r2, r3
 8003642:	88b9      	ldrh	r1, [r7, #4]
 8003644:	88fb      	ldrh	r3, [r7, #6]
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff ff76 	bl	8003538 <LCD_Draw_Char>
}
 800364c:	bf00      	nop
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	20000188 	.word	0x20000188

08003658 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800365c:	b672      	cpsid	i
}
 800365e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003660:	bf00      	nop
 8003662:	e7fd      	b.n	8003660 <LCD_Error_Handler+0x8>

08003664 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8003668:	f001 fb16 	bl	8004c98 <STMPE811_Init>
 800366c:	4603      	mov	r3, r0
 800366e:	2b02      	cmp	r3, #2
 8003670:	d001      	beq.n	8003676 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8003672:	bf00      	nop
 8003674:	e7fd      	b.n	8003672 <InitializeLCDTouch+0xe>
  }
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}

0800367a <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f001 fbf2 	bl	8004e6c <STMPE811_DetermineTouchPosition>
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	4618      	mov	r0, r3
 800369e:	f001 fbc2 	bl	8004e26 <STMPE811_Read>
 80036a2:	4603      	mov	r3, r0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	460a      	mov	r2, r1
 80036b6:	71fb      	strb	r3, [r7, #7]
 80036b8:	4613      	mov	r3, r2
 80036ba:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 80036bc:	79ba      	ldrb	r2, [r7, #6]
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	4611      	mov	r1, r2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 fbc0 	bl	8004e48 <STMPE811_Write>
}
 80036c8:	bf00      	nop
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <is_start_screen>:
static uint8_t doubles = 0;
static uint8_t triples = 0;
static uint8_t tetris = 0;

uint8_t is_start_screen()
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
	return game_started;
 80036d4:	4b03      	ldr	r3, [pc, #12]	@ (80036e4 <is_start_screen+0x14>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	20025bf6 	.word	0x20025bf6

080036e8 <game_start_screen>:

void game_start_screen()
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
	game_started = NOT_STARTED;
 80036ec:	4b04      	ldr	r3, [pc, #16]	@ (8003700 <game_start_screen+0x18>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	701a      	strb	r2, [r3, #0]
	draw_shapes();
 80036f2:	f7ff f98a 	bl	8002a0a <draw_shapes>
	start_screen();
 80036f6:	f7fd f8cf 	bl	8000898 <start_screen>
}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20025bf6 	.word	0x20025bf6

08003704 <game_init>:

void game_init()
{
 8003704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003706:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 800370a:	af0a      	add	r7, sp, #40	@ 0x28
	game_started = STARTED;
 800370c:	4b22      	ldr	r3, [pc, #136]	@ (8003798 <game_init+0x94>)
 800370e:	2200      	movs	r2, #0
 8003710:	701a      	strb	r2, [r3, #0]
	LCD_Clear(0,LCD_COLOR_BLACK);
 8003712:	2100      	movs	r1, #0
 8003714:	2000      	movs	r0, #0
 8003716:	f7ff fecd 	bl	80034b4 <LCD_Clear>

	map_draw();
 800371a:	f7fd f83d 	bl	8000798 <map_draw>
	block = block_create();
 800371e:	4d1f      	ldr	r5, [pc, #124]	@ (800379c <game_init+0x98>)
 8003720:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8003724:	4618      	mov	r0, r3
 8003726:	f7fd fbbb 	bl	8000ea0 <block_create>
 800372a:	f507 740e 	add.w	r4, r7, #568	@ 0x238
 800372e:	462e      	mov	r6, r5
 8003730:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8003734:	4635      	mov	r5, r6
 8003736:	4623      	mov	r3, r4
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003742:	3410      	adds	r4, #16
 8003744:	3610      	adds	r6, #16
 8003746:	4564      	cmp	r4, ip
 8003748:	d1f4      	bne.n	8003734 <game_init+0x30>
 800374a:	4633      	mov	r3, r6
 800374c:	4622      	mov	r2, r4
 800374e:	6810      	ldr	r0, [r2, #0]
 8003750:	6018      	str	r0, [r3, #0]
	draw_tetromino(block);
 8003752:	4e12      	ldr	r6, [pc, #72]	@ (800379c <game_init+0x98>)
 8003754:	466d      	mov	r5, sp
 8003756:	f106 0410 	add.w	r4, r6, #16
 800375a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800375c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800375e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	602b      	str	r3, [r5, #0]
 8003766:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800376a:	f7ff fa6b 	bl	8002c44 <draw_tetromino>
	map = map_init();
 800376e:	4c0c      	ldr	r4, [pc, #48]	@ (80037a0 <game_init+0x9c>)
 8003770:	463b      	mov	r3, r7
 8003772:	4618      	mov	r0, r3
 8003774:	f7fd fefc 	bl	8001570 <map_init>
 8003778:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800377c:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8003780:	4620      	mov	r0, r4
 8003782:	4619      	mov	r1, r3
 8003784:	f240 2336 	movw	r3, #566	@ 0x236
 8003788:	461a      	mov	r2, r3
 800378a:	f005 f9fb 	bl	8008b84 <memcpy>
}
 800378e:	bf00      	nop
 8003790:	f507 771d 	add.w	r7, r7, #628	@ 0x274
 8003794:	46bd      	mov	sp, r7
 8003796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003798:	20025bf6 	.word	0x20025bf6
 800379c:	2002598c 	.word	0x2002598c
 80037a0:	200259c0 	.word	0x200259c0

080037a4 <game_drop>:

void game_drop()
{
 80037a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037a6:	f2ad 4d9c 	subw	sp, sp, #1180	@ 0x49c
 80037aa:	af8a      	add	r7, sp, #552	@ 0x228
	if(!collision(&block, &map, DOWN))
 80037ac:	2202      	movs	r2, #2
 80037ae:	4975      	ldr	r1, [pc, #468]	@ (8003984 <game_drop+0x1e0>)
 80037b0:	4875      	ldr	r0, [pc, #468]	@ (8003988 <game_drop+0x1e4>)
 80037b2:	f7fd ff50 	bl	8001656 <collision>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d137      	bne.n	800382c <game_drop+0x88>
	{
		//HAL_Delay(500);
		clear_tetromino(block);
 80037bc:	4e72      	ldr	r6, [pc, #456]	@ (8003988 <game_drop+0x1e4>)
 80037be:	466d      	mov	r5, sp
 80037c0:	f106 0410 	add.w	r4, r6, #16
 80037c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	602b      	str	r3, [r5, #0]
 80037d0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80037d4:	f7ff fa76 	bl	8002cc4 <clear_tetromino>
		block = block_drop(&block);
 80037d8:	4d6b      	ldr	r5, [pc, #428]	@ (8003988 <game_drop+0x1e4>)
 80037da:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80037de:	496a      	ldr	r1, [pc, #424]	@ (8003988 <game_drop+0x1e4>)
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fd fb0f 	bl	8000e04 <block_drop>
 80037e6:	f507 740e 	add.w	r4, r7, #568	@ 0x238
 80037ea:	462e      	mov	r6, r5
 80037ec:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80037f0:	4635      	mov	r5, r6
 80037f2:	4623      	mov	r3, r4
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	6859      	ldr	r1, [r3, #4]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037fe:	3410      	adds	r4, #16
 8003800:	3610      	adds	r6, #16
 8003802:	4564      	cmp	r4, ip
 8003804:	d1f4      	bne.n	80037f0 <game_drop+0x4c>
 8003806:	4633      	mov	r3, r6
 8003808:	4622      	mov	r2, r4
 800380a:	6810      	ldr	r0, [r2, #0]
 800380c:	6018      	str	r0, [r3, #0]
		draw_tetromino(block);
 800380e:	4e5e      	ldr	r6, [pc, #376]	@ (8003988 <game_drop+0x1e4>)
 8003810:	466d      	mov	r5, sp
 8003812:	f106 0410 	add.w	r4, r6, #16
 8003816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800381a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800381c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	602b      	str	r3, [r5, #0]
 8003822:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003826:	f7ff fa0d 	bl	8002c44 <draw_tetromino>
		if(can_spawn(&block, &map))
		{
			draw_tetromino(block);
		}
	}
}
 800382a:	e0a6      	b.n	800397a <game_drop+0x1d6>
		map = map_update(&block, &map);
 800382c:	4c55      	ldr	r4, [pc, #340]	@ (8003984 <game_drop+0x1e0>)
 800382e:	463b      	mov	r3, r7
 8003830:	4a54      	ldr	r2, [pc, #336]	@ (8003984 <game_drop+0x1e0>)
 8003832:	4955      	ldr	r1, [pc, #340]	@ (8003988 <game_drop+0x1e4>)
 8003834:	4618      	mov	r0, r3
 8003836:	f7fe faa1 	bl	8001d7c <map_update>
 800383a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800383e:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8003842:	4620      	mov	r0, r4
 8003844:	4619      	mov	r1, r3
 8003846:	f240 2336 	movw	r3, #566	@ 0x236
 800384a:	461a      	mov	r2, r3
 800384c:	f005 f99a 	bl	8008b84 <memcpy>
		if(num_levels_cleared(&map) != 0)
 8003850:	484c      	ldr	r0, [pc, #304]	@ (8003984 <game_drop+0x1e0>)
 8003852:	f7fe fbb1 	bl	8001fb8 <num_levels_cleared>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d05d      	beq.n	8003918 <game_drop+0x174>
			if(num_levels_cleared(&map) == 1)
 800385c:	4849      	ldr	r0, [pc, #292]	@ (8003984 <game_drop+0x1e0>)
 800385e:	f7fe fbab 	bl	8001fb8 <num_levels_cleared>
 8003862:	4603      	mov	r3, r0
 8003864:	2b01      	cmp	r3, #1
 8003866:	d106      	bne.n	8003876 <game_drop+0xd2>
				singles++;
 8003868:	4b48      	ldr	r3, [pc, #288]	@ (800398c <game_drop+0x1e8>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	b2da      	uxtb	r2, r3
 8003870:	4b46      	ldr	r3, [pc, #280]	@ (800398c <game_drop+0x1e8>)
 8003872:	701a      	strb	r2, [r3, #0]
 8003874:	e025      	b.n	80038c2 <game_drop+0x11e>
			else if(num_levels_cleared(&map) == 2)
 8003876:	4843      	ldr	r0, [pc, #268]	@ (8003984 <game_drop+0x1e0>)
 8003878:	f7fe fb9e 	bl	8001fb8 <num_levels_cleared>
 800387c:	4603      	mov	r3, r0
 800387e:	2b02      	cmp	r3, #2
 8003880:	d106      	bne.n	8003890 <game_drop+0xec>
				doubles++;
 8003882:	4b43      	ldr	r3, [pc, #268]	@ (8003990 <game_drop+0x1ec>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	b2da      	uxtb	r2, r3
 800388a:	4b41      	ldr	r3, [pc, #260]	@ (8003990 <game_drop+0x1ec>)
 800388c:	701a      	strb	r2, [r3, #0]
 800388e:	e018      	b.n	80038c2 <game_drop+0x11e>
			else if(num_levels_cleared(&map) == 3)
 8003890:	483c      	ldr	r0, [pc, #240]	@ (8003984 <game_drop+0x1e0>)
 8003892:	f7fe fb91 	bl	8001fb8 <num_levels_cleared>
 8003896:	4603      	mov	r3, r0
 8003898:	2b03      	cmp	r3, #3
 800389a:	d106      	bne.n	80038aa <game_drop+0x106>
				triples++;
 800389c:	4b3d      	ldr	r3, [pc, #244]	@ (8003994 <game_drop+0x1f0>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	3301      	adds	r3, #1
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003994 <game_drop+0x1f0>)
 80038a6:	701a      	strb	r2, [r3, #0]
 80038a8:	e00b      	b.n	80038c2 <game_drop+0x11e>
			else if(num_levels_cleared(&map) == 4)
 80038aa:	4836      	ldr	r0, [pc, #216]	@ (8003984 <game_drop+0x1e0>)
 80038ac:	f7fe fb84 	bl	8001fb8 <num_levels_cleared>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d105      	bne.n	80038c2 <game_drop+0x11e>
				tetris++;
 80038b6:	4b38      	ldr	r3, [pc, #224]	@ (8003998 <game_drop+0x1f4>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	3301      	adds	r3, #1
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	4b36      	ldr	r3, [pc, #216]	@ (8003998 <game_drop+0x1f4>)
 80038c0:	701a      	strb	r2, [r3, #0]
			clear_map(map);
 80038c2:	4c30      	ldr	r4, [pc, #192]	@ (8003984 <game_drop+0x1e0>)
 80038c4:	4668      	mov	r0, sp
 80038c6:	f104 0310 	add.w	r3, r4, #16
 80038ca:	f240 2226 	movw	r2, #550	@ 0x226
 80038ce:	4619      	mov	r1, r3
 80038d0:	f005 f958 	bl	8008b84 <memcpy>
 80038d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80038d8:	f7fe fd84 	bl	80023e4 <clear_map>
			map = level_clear(&map);
 80038dc:	4c29      	ldr	r4, [pc, #164]	@ (8003984 <game_drop+0x1e0>)
 80038de:	463b      	mov	r3, r7
 80038e0:	4928      	ldr	r1, [pc, #160]	@ (8003984 <game_drop+0x1e0>)
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe fbd9 	bl	800209a <level_clear>
 80038e8:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80038ec:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 80038f0:	4620      	mov	r0, r4
 80038f2:	4619      	mov	r1, r3
 80038f4:	f240 2336 	movw	r3, #566	@ 0x236
 80038f8:	461a      	mov	r2, r3
 80038fa:	f005 f943 	bl	8008b84 <memcpy>
			draw_updated_map(map);
 80038fe:	4c21      	ldr	r4, [pc, #132]	@ (8003984 <game_drop+0x1e0>)
 8003900:	4668      	mov	r0, sp
 8003902:	f104 0310 	add.w	r3, r4, #16
 8003906:	f240 2226 	movw	r2, #550	@ 0x226
 800390a:	4619      	mov	r1, r3
 800390c:	f005 f93a 	bl	8008b84 <memcpy>
 8003910:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003914:	f7fe fd18 	bl	8002348 <draw_updated_map>
		block = block_create();
 8003918:	4d1b      	ldr	r5, [pc, #108]	@ (8003988 <game_drop+0x1e4>)
 800391a:	463b      	mov	r3, r7
 800391c:	4618      	mov	r0, r3
 800391e:	f7fd fabf 	bl	8000ea0 <block_create>
 8003922:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003926:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 800392a:	461c      	mov	r4, r3
 800392c:	462e      	mov	r6, r5
 800392e:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8003932:	4635      	mov	r5, r6
 8003934:	4623      	mov	r3, r4
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	6859      	ldr	r1, [r3, #4]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003940:	3410      	adds	r4, #16
 8003942:	3610      	adds	r6, #16
 8003944:	4564      	cmp	r4, ip
 8003946:	d1f4      	bne.n	8003932 <game_drop+0x18e>
 8003948:	4633      	mov	r3, r6
 800394a:	4622      	mov	r2, r4
 800394c:	6810      	ldr	r0, [r2, #0]
 800394e:	6018      	str	r0, [r3, #0]
		if(can_spawn(&block, &map))
 8003950:	490c      	ldr	r1, [pc, #48]	@ (8003984 <game_drop+0x1e0>)
 8003952:	480d      	ldr	r0, [pc, #52]	@ (8003988 <game_drop+0x1e4>)
 8003954:	f7ff f9f5 	bl	8002d42 <can_spawn>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00d      	beq.n	800397a <game_drop+0x1d6>
			draw_tetromino(block);
 800395e:	4e0a      	ldr	r6, [pc, #40]	@ (8003988 <game_drop+0x1e4>)
 8003960:	466d      	mov	r5, sp
 8003962:	f106 0410 	add.w	r4, r6, #16
 8003966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800396a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800396c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	602b      	str	r3, [r5, #0]
 8003972:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003976:	f7ff f965 	bl	8002c44 <draw_tetromino>
}
 800397a:	bf00      	nop
 800397c:	f507 771d 	add.w	r7, r7, #628	@ 0x274
 8003980:	46bd      	mov	sp, r7
 8003982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003984:	200259c0 	.word	0x200259c0
 8003988:	2002598c 	.word	0x2002598c
 800398c:	20025bf7 	.word	0x20025bf7
 8003990:	20025bf8 	.word	0x20025bf8
 8003994:	20025bf9 	.word	0x20025bf9
 8003998:	20025bfa 	.word	0x20025bfa

0800399c <game_rotate>:

void game_rotate()
{
 800399c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399e:	b099      	sub	sp, #100	@ 0x64
 80039a0:	af0a      	add	r7, sp, #40	@ 0x28
	clear_tetromino(block);
 80039a2:	4e1d      	ldr	r6, [pc, #116]	@ (8003a18 <game_rotate+0x7c>)
 80039a4:	466d      	mov	r5, sp
 80039a6:	f106 0410 	add.w	r4, r6, #16
 80039aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	602b      	str	r3, [r5, #0]
 80039b6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80039ba:	f7ff f983 	bl	8002cc4 <clear_tetromino>
	block = block_rotate(&block, &map);
 80039be:	4d16      	ldr	r5, [pc, #88]	@ (8003a18 <game_rotate+0x7c>)
 80039c0:	463b      	mov	r3, r7
 80039c2:	4a16      	ldr	r2, [pc, #88]	@ (8003a1c <game_rotate+0x80>)
 80039c4:	4914      	ldr	r1, [pc, #80]	@ (8003a18 <game_rotate+0x7c>)
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe fd40 	bl	800244c <block_rotate>
 80039cc:	463c      	mov	r4, r7
 80039ce:	462e      	mov	r6, r5
 80039d0:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80039d4:	4635      	mov	r5, r6
 80039d6:	4623      	mov	r3, r4
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	6859      	ldr	r1, [r3, #4]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e2:	3410      	adds	r4, #16
 80039e4:	3610      	adds	r6, #16
 80039e6:	4564      	cmp	r4, ip
 80039e8:	d1f4      	bne.n	80039d4 <game_rotate+0x38>
 80039ea:	4633      	mov	r3, r6
 80039ec:	4622      	mov	r2, r4
 80039ee:	6810      	ldr	r0, [r2, #0]
 80039f0:	6018      	str	r0, [r3, #0]
	draw_tetromino(block);
 80039f2:	4e09      	ldr	r6, [pc, #36]	@ (8003a18 <game_rotate+0x7c>)
 80039f4:	466d      	mov	r5, sp
 80039f6:	f106 0410 	add.w	r4, r6, #16
 80039fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	602b      	str	r3, [r5, #0]
 8003a06:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003a0a:	f7ff f91b 	bl	8002c44 <draw_tetromino>
}
 8003a0e:	bf00      	nop
 8003a10:	373c      	adds	r7, #60	@ 0x3c
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a16:	bf00      	nop
 8003a18:	2002598c 	.word	0x2002598c
 8003a1c:	200259c0 	.word	0x200259c0

08003a20 <game_move>:

void game_move(uint8_t dir)
{
 8003a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a22:	b09b      	sub	sp, #108	@ 0x6c
 8003a24:	af0a      	add	r7, sp, #40	@ 0x28
 8003a26:	4603      	mov	r3, r0
 8003a28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if(!collision(&block, &map, dir))
 8003a2c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003a30:	461a      	mov	r2, r3
 8003a32:	4921      	ldr	r1, [pc, #132]	@ (8003ab8 <game_move+0x98>)
 8003a34:	4821      	ldr	r0, [pc, #132]	@ (8003abc <game_move+0x9c>)
 8003a36:	f7fd fe0e 	bl	8001656 <collision>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d136      	bne.n	8003aae <game_move+0x8e>
	{
		clear_tetromino(block);
 8003a40:	4e1e      	ldr	r6, [pc, #120]	@ (8003abc <game_move+0x9c>)
 8003a42:	466d      	mov	r5, sp
 8003a44:	f106 0410 	add.w	r4, r6, #16
 8003a48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a50:	6823      	ldr	r3, [r4, #0]
 8003a52:	602b      	str	r3, [r5, #0]
 8003a54:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003a58:	f7ff f934 	bl	8002cc4 <clear_tetromino>
		block = block_move(&block, &map, dir);
 8003a5c:	4d17      	ldr	r5, [pc, #92]	@ (8003abc <game_move+0x9c>)
 8003a5e:	4638      	mov	r0, r7
 8003a60:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003a64:	4a14      	ldr	r2, [pc, #80]	@ (8003ab8 <game_move+0x98>)
 8003a66:	4915      	ldr	r1, [pc, #84]	@ (8003abc <game_move+0x9c>)
 8003a68:	f7fe ff40 	bl	80028ec <block_move>
 8003a6c:	463c      	mov	r4, r7
 8003a6e:	462e      	mov	r6, r5
 8003a70:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8003a74:	4635      	mov	r5, r6
 8003a76:	4623      	mov	r3, r4
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a82:	3410      	adds	r4, #16
 8003a84:	3610      	adds	r6, #16
 8003a86:	4564      	cmp	r4, ip
 8003a88:	d1f4      	bne.n	8003a74 <game_move+0x54>
 8003a8a:	4633      	mov	r3, r6
 8003a8c:	4622      	mov	r2, r4
 8003a8e:	6810      	ldr	r0, [r2, #0]
 8003a90:	6018      	str	r0, [r3, #0]
		draw_tetromino(block);
 8003a92:	4e0a      	ldr	r6, [pc, #40]	@ (8003abc <game_move+0x9c>)
 8003a94:	466d      	mov	r5, sp
 8003a96:	f106 0410 	add.w	r4, r6, #16
 8003a9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	602b      	str	r3, [r5, #0]
 8003aa6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003aaa:	f7ff f8cb 	bl	8002c44 <draw_tetromino>
	}
}
 8003aae:	bf00      	nop
 8003ab0:	3744      	adds	r7, #68	@ 0x44
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	200259c0 	.word	0x200259c0
 8003abc:	2002598c 	.word	0x2002598c

08003ac0 <game_finished>:

uint8_t game_finished()
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
	if(can_spawn(&block, &map))
 8003ac4:	4905      	ldr	r1, [pc, #20]	@ (8003adc <game_finished+0x1c>)
 8003ac6:	4806      	ldr	r0, [pc, #24]	@ (8003ae0 <game_finished+0x20>)
 8003ac8:	f7ff f93b 	bl	8002d42 <can_spawn>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <game_finished+0x16>
	{
		return 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e000      	b.n	8003ad8 <game_finished+0x18>
	}
	return 1;
 8003ad6:	2301      	movs	r3, #1
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	200259c0 	.word	0x200259c0
 8003ae0:	2002598c 	.word	0x2002598c

08003ae4 <game_over>:

void game_over()
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
	end_screen(singles, doubles, triples, tetris);
 8003aea:	4b09      	ldr	r3, [pc, #36]	@ (8003b10 <game_over+0x2c>)
 8003aec:	7818      	ldrb	r0, [r3, #0]
 8003aee:	4b09      	ldr	r3, [pc, #36]	@ (8003b14 <game_over+0x30>)
 8003af0:	7819      	ldrb	r1, [r3, #0]
 8003af2:	4b09      	ldr	r3, [pc, #36]	@ (8003b18 <game_over+0x34>)
 8003af4:	781a      	ldrb	r2, [r3, #0]
 8003af6:	4b09      	ldr	r3, [pc, #36]	@ (8003b1c <game_over+0x38>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	f7fc ff97 	bl	8000a2c <end_screen>
	uint32_t time = HAL_GetTick();
 8003afe:	f001 fcb9 	bl	8005474 <HAL_GetTick>
 8003b02:	6078      	str	r0, [r7, #4]
	disp_time(time);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7fd f929 	bl	8000d5c <disp_time>
	while(1){}
 8003b0a:	bf00      	nop
 8003b0c:	e7fd      	b.n	8003b0a <game_over+0x26>
 8003b0e:	bf00      	nop
 8003b10:	20025bf7 	.word	0x20025bf7
 8003b14:	20025bf8 	.word	0x20025bf8
 8003b18:	20025bf9 	.word	0x20025bf9
 8003b1c:	20025bfa 	.word	0x20025bfa

08003b20 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003b24:	f000 f9fe 	bl	8003f24 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8003b28:	20ca      	movs	r0, #202	@ 0xca
 8003b2a:	f000 f943 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8003b2e:	20c3      	movs	r0, #195	@ 0xc3
 8003b30:	f000 f94d 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8003b34:	2008      	movs	r0, #8
 8003b36:	f000 f94a 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8003b3a:	2050      	movs	r0, #80	@ 0x50
 8003b3c:	f000 f947 	bl	8003dce <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8003b40:	20cf      	movs	r0, #207	@ 0xcf
 8003b42:	f000 f937 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8003b46:	2000      	movs	r0, #0
 8003b48:	f000 f941 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8003b4c:	20c1      	movs	r0, #193	@ 0xc1
 8003b4e:	f000 f93e 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8003b52:	2030      	movs	r0, #48	@ 0x30
 8003b54:	f000 f93b 	bl	8003dce <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8003b58:	20ed      	movs	r0, #237	@ 0xed
 8003b5a:	f000 f92b 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8003b5e:	2064      	movs	r0, #100	@ 0x64
 8003b60:	f000 f935 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8003b64:	2003      	movs	r0, #3
 8003b66:	f000 f932 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8003b6a:	2012      	movs	r0, #18
 8003b6c:	f000 f92f 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8003b70:	2081      	movs	r0, #129	@ 0x81
 8003b72:	f000 f92c 	bl	8003dce <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8003b76:	20e8      	movs	r0, #232	@ 0xe8
 8003b78:	f000 f91c 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8003b7c:	2085      	movs	r0, #133	@ 0x85
 8003b7e:	f000 f926 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003b82:	2000      	movs	r0, #0
 8003b84:	f000 f923 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8003b88:	2078      	movs	r0, #120	@ 0x78
 8003b8a:	f000 f920 	bl	8003dce <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8003b8e:	20cb      	movs	r0, #203	@ 0xcb
 8003b90:	f000 f910 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8003b94:	2039      	movs	r0, #57	@ 0x39
 8003b96:	f000 f91a 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8003b9a:	202c      	movs	r0, #44	@ 0x2c
 8003b9c:	f000 f917 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	f000 f914 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8003ba6:	2034      	movs	r0, #52	@ 0x34
 8003ba8:	f000 f911 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8003bac:	2002      	movs	r0, #2
 8003bae:	f000 f90e 	bl	8003dce <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8003bb2:	20f7      	movs	r0, #247	@ 0xf7
 8003bb4:	f000 f8fe 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8003bb8:	2020      	movs	r0, #32
 8003bba:	f000 f908 	bl	8003dce <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8003bbe:	20ea      	movs	r0, #234	@ 0xea
 8003bc0:	f000 f8f8 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	f000 f902 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003bca:	2000      	movs	r0, #0
 8003bcc:	f000 f8ff 	bl	8003dce <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8003bd0:	20b1      	movs	r0, #177	@ 0xb1
 8003bd2:	f000 f8ef 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	f000 f8f9 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8003bdc:	201b      	movs	r0, #27
 8003bde:	f000 f8f6 	bl	8003dce <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8003be2:	20b6      	movs	r0, #182	@ 0xb6
 8003be4:	f000 f8e6 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003be8:	200a      	movs	r0, #10
 8003bea:	f000 f8f0 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8003bee:	20a2      	movs	r0, #162	@ 0xa2
 8003bf0:	f000 f8ed 	bl	8003dce <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8003bf4:	20c0      	movs	r0, #192	@ 0xc0
 8003bf6:	f000 f8dd 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8003bfa:	2010      	movs	r0, #16
 8003bfc:	f000 f8e7 	bl	8003dce <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8003c00:	20c1      	movs	r0, #193	@ 0xc1
 8003c02:	f000 f8d7 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8003c06:	2010      	movs	r0, #16
 8003c08:	f000 f8e1 	bl	8003dce <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8003c0c:	20c5      	movs	r0, #197	@ 0xc5
 8003c0e:	f000 f8d1 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8003c12:	2045      	movs	r0, #69	@ 0x45
 8003c14:	f000 f8db 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8003c18:	2015      	movs	r0, #21
 8003c1a:	f000 f8d8 	bl	8003dce <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8003c1e:	20c7      	movs	r0, #199	@ 0xc7
 8003c20:	f000 f8c8 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8003c24:	2090      	movs	r0, #144	@ 0x90
 8003c26:	f000 f8d2 	bl	8003dce <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8003c2a:	2036      	movs	r0, #54	@ 0x36
 8003c2c:	f000 f8c2 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8003c30:	20c8      	movs	r0, #200	@ 0xc8
 8003c32:	f000 f8cc 	bl	8003dce <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8003c36:	20f2      	movs	r0, #242	@ 0xf2
 8003c38:	f000 f8bc 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003c3c:	2000      	movs	r0, #0
 8003c3e:	f000 f8c6 	bl	8003dce <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8003c42:	20b0      	movs	r0, #176	@ 0xb0
 8003c44:	f000 f8b6 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8003c48:	20c2      	movs	r0, #194	@ 0xc2
 8003c4a:	f000 f8c0 	bl	8003dce <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8003c4e:	20b6      	movs	r0, #182	@ 0xb6
 8003c50:	f000 f8b0 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003c54:	200a      	movs	r0, #10
 8003c56:	f000 f8ba 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8003c5a:	20a7      	movs	r0, #167	@ 0xa7
 8003c5c:	f000 f8b7 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8003c60:	2027      	movs	r0, #39	@ 0x27
 8003c62:	f000 f8b4 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8003c66:	2004      	movs	r0, #4
 8003c68:	f000 f8b1 	bl	8003dce <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8003c6c:	202a      	movs	r0, #42	@ 0x2a
 8003c6e:	f000 f8a1 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003c72:	2000      	movs	r0, #0
 8003c74:	f000 f8ab 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003c78:	2000      	movs	r0, #0
 8003c7a:	f000 f8a8 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003c7e:	2000      	movs	r0, #0
 8003c80:	f000 f8a5 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8003c84:	20ef      	movs	r0, #239	@ 0xef
 8003c86:	f000 f8a2 	bl	8003dce <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8003c8a:	202b      	movs	r0, #43	@ 0x2b
 8003c8c:	f000 f892 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003c90:	2000      	movs	r0, #0
 8003c92:	f000 f89c 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003c96:	2000      	movs	r0, #0
 8003c98:	f000 f899 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	f000 f896 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8003ca2:	203f      	movs	r0, #63	@ 0x3f
 8003ca4:	f000 f893 	bl	8003dce <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8003ca8:	20f6      	movs	r0, #246	@ 0xf6
 8003caa:	f000 f883 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8003cae:	2001      	movs	r0, #1
 8003cb0:	f000 f88d 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	f000 f88a 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8003cba:	2006      	movs	r0, #6
 8003cbc:	f000 f887 	bl	8003dce <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8003cc0:	202c      	movs	r0, #44	@ 0x2c
 8003cc2:	f000 f877 	bl	8003db4 <ili9341_Write_Reg>
  LCD_Delay(200);
 8003cc6:	20c8      	movs	r0, #200	@ 0xc8
 8003cc8:	f000 f9e8 	bl	800409c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8003ccc:	2026      	movs	r0, #38	@ 0x26
 8003cce:	f000 f871 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8003cd2:	2001      	movs	r0, #1
 8003cd4:	f000 f87b 	bl	8003dce <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8003cd8:	20e0      	movs	r0, #224	@ 0xe0
 8003cda:	f000 f86b 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8003cde:	200f      	movs	r0, #15
 8003ce0:	f000 f875 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8003ce4:	2029      	movs	r0, #41	@ 0x29
 8003ce6:	f000 f872 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8003cea:	2024      	movs	r0, #36	@ 0x24
 8003cec:	f000 f86f 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8003cf0:	200c      	movs	r0, #12
 8003cf2:	f000 f86c 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8003cf6:	200e      	movs	r0, #14
 8003cf8:	f000 f869 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003cfc:	2009      	movs	r0, #9
 8003cfe:	f000 f866 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8003d02:	204e      	movs	r0, #78	@ 0x4e
 8003d04:	f000 f863 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8003d08:	2078      	movs	r0, #120	@ 0x78
 8003d0a:	f000 f860 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8003d0e:	203c      	movs	r0, #60	@ 0x3c
 8003d10:	f000 f85d 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003d14:	2009      	movs	r0, #9
 8003d16:	f000 f85a 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8003d1a:	2013      	movs	r0, #19
 8003d1c:	f000 f857 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8003d20:	2005      	movs	r0, #5
 8003d22:	f000 f854 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8003d26:	2017      	movs	r0, #23
 8003d28:	f000 f851 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8003d2c:	2011      	movs	r0, #17
 8003d2e:	f000 f84e 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003d32:	2000      	movs	r0, #0
 8003d34:	f000 f84b 	bl	8003dce <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8003d38:	20e1      	movs	r0, #225	@ 0xe1
 8003d3a:	f000 f83b 	bl	8003db4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003d3e:	2000      	movs	r0, #0
 8003d40:	f000 f845 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8003d44:	2016      	movs	r0, #22
 8003d46:	f000 f842 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8003d4a:	201b      	movs	r0, #27
 8003d4c:	f000 f83f 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8003d50:	2004      	movs	r0, #4
 8003d52:	f000 f83c 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8003d56:	2011      	movs	r0, #17
 8003d58:	f000 f839 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8003d5c:	2007      	movs	r0, #7
 8003d5e:	f000 f836 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8003d62:	2031      	movs	r0, #49	@ 0x31
 8003d64:	f000 f833 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8003d68:	2033      	movs	r0, #51	@ 0x33
 8003d6a:	f000 f830 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8003d6e:	2042      	movs	r0, #66	@ 0x42
 8003d70:	f000 f82d 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8003d74:	2005      	movs	r0, #5
 8003d76:	f000 f82a 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8003d7a:	200c      	movs	r0, #12
 8003d7c:	f000 f827 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8003d80:	200a      	movs	r0, #10
 8003d82:	f000 f824 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8003d86:	2028      	movs	r0, #40	@ 0x28
 8003d88:	f000 f821 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8003d8c:	202f      	movs	r0, #47	@ 0x2f
 8003d8e:	f000 f81e 	bl	8003dce <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8003d92:	200f      	movs	r0, #15
 8003d94:	f000 f81b 	bl	8003dce <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8003d98:	2011      	movs	r0, #17
 8003d9a:	f000 f80b 	bl	8003db4 <ili9341_Write_Reg>
  LCD_Delay(200);
 8003d9e:	20c8      	movs	r0, #200	@ 0xc8
 8003da0:	f000 f97c 	bl	800409c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8003da4:	2029      	movs	r0, #41	@ 0x29
 8003da6:	f000 f805 	bl	8003db4 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8003daa:	202c      	movs	r0, #44	@ 0x2c
 8003dac:	f000 f802 	bl	8003db4 <ili9341_Write_Reg>
}
 8003db0:	bf00      	nop
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 f949 	bl	8004058 <LCD_IO_WriteReg>
}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8003dd8:	88fb      	ldrh	r3, [r7, #6]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f91a 	bl	8004014 <LCD_IO_WriteData>
}
 8003de0:	bf00      	nop
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003dec:	4819      	ldr	r0, [pc, #100]	@ (8003e54 <SPI_Init+0x6c>)
 8003dee:	f004 fbca 	bl	8008586 <HAL_SPI_GetState>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d12b      	bne.n	8003e50 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8003df8:	4b16      	ldr	r3, [pc, #88]	@ (8003e54 <SPI_Init+0x6c>)
 8003dfa:	4a17      	ldr	r2, [pc, #92]	@ (8003e58 <SPI_Init+0x70>)
 8003dfc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003dfe:	4b15      	ldr	r3, [pc, #84]	@ (8003e54 <SPI_Init+0x6c>)
 8003e00:	2218      	movs	r2, #24
 8003e02:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003e04:	4b13      	ldr	r3, [pc, #76]	@ (8003e54 <SPI_Init+0x6c>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003e0a:	4b12      	ldr	r3, [pc, #72]	@ (8003e54 <SPI_Init+0x6c>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003e10:	4b10      	ldr	r3, [pc, #64]	@ (8003e54 <SPI_Init+0x6c>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003e16:	4b0f      	ldr	r3, [pc, #60]	@ (8003e54 <SPI_Init+0x6c>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003e54 <SPI_Init+0x6c>)
 8003e1e:	2207      	movs	r2, #7
 8003e20:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003e22:	4b0c      	ldr	r3, [pc, #48]	@ (8003e54 <SPI_Init+0x6c>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003e28:	4b0a      	ldr	r3, [pc, #40]	@ (8003e54 <SPI_Init+0x6c>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003e2e:	4b09      	ldr	r3, [pc, #36]	@ (8003e54 <SPI_Init+0x6c>)
 8003e30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e34:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003e36:	4b07      	ldr	r3, [pc, #28]	@ (8003e54 <SPI_Init+0x6c>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003e3c:	4b05      	ldr	r3, [pc, #20]	@ (8003e54 <SPI_Init+0x6c>)
 8003e3e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003e42:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8003e44:	4803      	ldr	r0, [pc, #12]	@ (8003e54 <SPI_Init+0x6c>)
 8003e46:	f000 f833 	bl	8003eb0 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003e4a:	4802      	ldr	r0, [pc, #8]	@ (8003e54 <SPI_Init+0x6c>)
 8003e4c:	f004 f9a6 	bl	800819c <HAL_SPI_Init>
  }
}
 8003e50:	bf00      	nop
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20025bfc 	.word	0x20025bfc
 8003e58:	40015000 	.word	0x40015000

08003e5c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8003e6a:	4b09      	ldr	r3, [pc, #36]	@ (8003e90 <SPI_Write+0x34>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	1db9      	adds	r1, r7, #6
 8003e70:	2201      	movs	r2, #1
 8003e72:	4808      	ldr	r0, [pc, #32]	@ (8003e94 <SPI_Write+0x38>)
 8003e74:	f004 fa43 	bl	80082fe <HAL_SPI_Transmit>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8003e82:	f000 f809 	bl	8003e98 <SPI_Error>
  }
}
 8003e86:	bf00      	nop
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000014 	.word	0x20000014
 8003e94:	20025bfc 	.word	0x20025bfc

08003e98 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003e9c:	4803      	ldr	r0, [pc, #12]	@ (8003eac <SPI_Error+0x14>)
 8003e9e:	f004 fa06 	bl	80082ae <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8003ea2:	f7ff ffa1 	bl	8003de8 <SPI_Init>
}
 8003ea6:	bf00      	nop
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20025bfc 	.word	0x20025bfc

08003eb0 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08a      	sub	sp, #40	@ 0x28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8003eb8:	2300      	movs	r3, #0
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	4b17      	ldr	r3, [pc, #92]	@ (8003f1c <SPI_MspInit+0x6c>)
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec0:	4a16      	ldr	r2, [pc, #88]	@ (8003f1c <SPI_MspInit+0x6c>)
 8003ec2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ec6:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ec8:	4b14      	ldr	r3, [pc, #80]	@ (8003f1c <SPI_MspInit+0x6c>)
 8003eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ecc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	4b10      	ldr	r3, [pc, #64]	@ (8003f1c <SPI_MspInit+0x6c>)
 8003eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003edc:	4a0f      	ldr	r2, [pc, #60]	@ (8003f1c <SPI_MspInit+0x6c>)
 8003ede:	f043 0320 	orr.w	r3, r3, #32
 8003ee2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8003f1c <SPI_MspInit+0x6c>)
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8003ef0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003efa:	2302      	movs	r3, #2
 8003efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003efe:	2301      	movs	r3, #1
 8003f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8003f02:	2305      	movs	r3, #5
 8003f04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8003f06:	f107 0314 	add.w	r3, r7, #20
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4804      	ldr	r0, [pc, #16]	@ (8003f20 <SPI_MspInit+0x70>)
 8003f0e:	f001 fc69 	bl	80057e4 <HAL_GPIO_Init>
}
 8003f12:	bf00      	nop
 8003f14:	3728      	adds	r7, #40	@ 0x28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	40021400 	.word	0x40021400

08003f24 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8003f2a:	4b36      	ldr	r3, [pc, #216]	@ (8004004 <LCD_IO_Init+0xe0>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d164      	bne.n	8003ffc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8003f32:	4b34      	ldr	r3, [pc, #208]	@ (8004004 <LCD_IO_Init+0xe0>)
 8003f34:	2201      	movs	r2, #1
 8003f36:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60bb      	str	r3, [r7, #8]
 8003f3c:	4b32      	ldr	r3, [pc, #200]	@ (8004008 <LCD_IO_Init+0xe4>)
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f40:	4a31      	ldr	r2, [pc, #196]	@ (8004008 <LCD_IO_Init+0xe4>)
 8003f42:	f043 0308 	orr.w	r3, r3, #8
 8003f46:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f48:	4b2f      	ldr	r3, [pc, #188]	@ (8004008 <LCD_IO_Init+0xe4>)
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	60bb      	str	r3, [r7, #8]
 8003f52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003f54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003f62:	2302      	movs	r3, #2
 8003f64:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003f66:	f107 030c 	add.w	r3, r7, #12
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4827      	ldr	r0, [pc, #156]	@ (800400c <LCD_IO_Init+0xe8>)
 8003f6e:	f001 fc39 	bl	80057e4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	607b      	str	r3, [r7, #4]
 8003f76:	4b24      	ldr	r3, [pc, #144]	@ (8004008 <LCD_IO_Init+0xe4>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7a:	4a23      	ldr	r2, [pc, #140]	@ (8004008 <LCD_IO_Init+0xe4>)
 8003f7c:	f043 0308 	orr.w	r3, r3, #8
 8003f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f82:	4b21      	ldr	r3, [pc, #132]	@ (8004008 <LCD_IO_Init+0xe4>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	607b      	str	r3, [r7, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003f8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003f94:	2301      	movs	r3, #1
 8003f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003fa0:	f107 030c 	add.w	r3, r7, #12
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4819      	ldr	r0, [pc, #100]	@ (800400c <LCD_IO_Init+0xe8>)
 8003fa8:	f001 fc1c 	bl	80057e4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003fac:	2300      	movs	r3, #0
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	4b15      	ldr	r3, [pc, #84]	@ (8004008 <LCD_IO_Init+0xe4>)
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb4:	4a14      	ldr	r2, [pc, #80]	@ (8004008 <LCD_IO_Init+0xe4>)
 8003fb6:	f043 0304 	orr.w	r3, r3, #4
 8003fba:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fbc:	4b12      	ldr	r3, [pc, #72]	@ (8004008 <LCD_IO_Init+0xe4>)
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003fc8:	2304      	movs	r3, #4
 8003fca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003fd8:	f107 030c 	add.w	r3, r7, #12
 8003fdc:	4619      	mov	r1, r3
 8003fde:	480c      	ldr	r0, [pc, #48]	@ (8004010 <LCD_IO_Init+0xec>)
 8003fe0:	f001 fc00 	bl	80057e4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2104      	movs	r1, #4
 8003fe8:	4809      	ldr	r0, [pc, #36]	@ (8004010 <LCD_IO_Init+0xec>)
 8003fea:	f001 feb3 	bl	8005d54 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003fee:	2201      	movs	r2, #1
 8003ff0:	2104      	movs	r1, #4
 8003ff2:	4807      	ldr	r0, [pc, #28]	@ (8004010 <LCD_IO_Init+0xec>)
 8003ff4:	f001 feae 	bl	8005d54 <HAL_GPIO_WritePin>

    SPI_Init();
 8003ff8:	f7ff fef6 	bl	8003de8 <SPI_Init>
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	3720      	adds	r7, #32
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20025c54 	.word	0x20025c54
 8004008:	40023800 	.word	0x40023800
 800400c:	40020c00 	.word	0x40020c00
 8004010:	40020800 	.word	0x40020800

08004014 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	4603      	mov	r3, r0
 800401c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800401e:	2201      	movs	r2, #1
 8004020:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004024:	480a      	ldr	r0, [pc, #40]	@ (8004050 <LCD_IO_WriteData+0x3c>)
 8004026:	f001 fe95 	bl	8005d54 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800402a:	2200      	movs	r2, #0
 800402c:	2104      	movs	r1, #4
 800402e:	4809      	ldr	r0, [pc, #36]	@ (8004054 <LCD_IO_WriteData+0x40>)
 8004030:	f001 fe90 	bl	8005d54 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff ff10 	bl	8003e5c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800403c:	2201      	movs	r2, #1
 800403e:	2104      	movs	r1, #4
 8004040:	4804      	ldr	r0, [pc, #16]	@ (8004054 <LCD_IO_WriteData+0x40>)
 8004042:	f001 fe87 	bl	8005d54 <HAL_GPIO_WritePin>
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40020c00 	.word	0x40020c00
 8004054:	40020800 	.word	0x40020800

08004058 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8004062:	2200      	movs	r2, #0
 8004064:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004068:	480a      	ldr	r0, [pc, #40]	@ (8004094 <LCD_IO_WriteReg+0x3c>)
 800406a:	f001 fe73 	bl	8005d54 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800406e:	2200      	movs	r2, #0
 8004070:	2104      	movs	r1, #4
 8004072:	4809      	ldr	r0, [pc, #36]	@ (8004098 <LCD_IO_WriteReg+0x40>)
 8004074:	f001 fe6e 	bl	8005d54 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8004078:	79fb      	ldrb	r3, [r7, #7]
 800407a:	b29b      	uxth	r3, r3
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff feed 	bl	8003e5c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004082:	2201      	movs	r2, #1
 8004084:	2104      	movs	r1, #4
 8004086:	4804      	ldr	r0, [pc, #16]	@ (8004098 <LCD_IO_WriteReg+0x40>)
 8004088:	f001 fe64 	bl	8005d54 <HAL_GPIO_WritePin>
}
 800408c:	bf00      	nop
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40020c00 	.word	0x40020c00
 8004098:	40020800 	.word	0x40020800

0800409c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f001 f9f1 	bl	800548c <HAL_Delay>
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80040b6:	f001 f977 	bl	80053a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClockOverride();
 80040ba:	f000 f80d 	bl	80040d8 <SystemClockOverride>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80040be:	f000 f985 	bl	80043cc <MX_GPIO_Init>
  MX_I2C3_Init();
 80040c2:	f000 f85b 	bl	800417c <MX_I2C3_Init>
  MX_LTDC_Init();
 80040c6:	f000 f899 	bl	80041fc <MX_LTDC_Init>
  MX_SPI5_Init();
 80040ca:	f000 f949 	bl	8004360 <MX_SPI5_Init>

  /* USER CODE BEGIN 2 */
  ApplicationInit();
 80040ce:	f7fc fa05 	bl	80004dc <ApplicationInit>
  //HAL_Delay(5000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80040d2:	bf00      	nop
 80040d4:	e7fd      	b.n	80040d2 <main+0x20>
	...

080040d8 <SystemClockOverride>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClockOverride(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b094      	sub	sp, #80	@ 0x50
 80040dc:	af00      	add	r7, sp, #0
 RCC_ClkInitTypeDef RCC_ClkInitStruct;
 RCC_OscInitTypeDef RCC_OscInitStruct;
 __HAL_RCC_PWR_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	4b24      	ldr	r3, [pc, #144]	@ (8004174 <SystemClockOverride+0x9c>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	4a23      	ldr	r2, [pc, #140]	@ (8004174 <SystemClockOverride+0x9c>)
 80040e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80040ee:	4b21      	ldr	r3, [pc, #132]	@ (8004174 <SystemClockOverride+0x9c>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f6:	60bb      	str	r3, [r7, #8]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.
 80040fa:	2300      	movs	r3, #0
 80040fc:	607b      	str	r3, [r7, #4]
 80040fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004178 <SystemClockOverride+0xa0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a1d      	ldr	r2, [pc, #116]	@ (8004178 <SystemClockOverride+0xa0>)
 8004104:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4b1b      	ldr	r3, [pc, #108]	@ (8004178 <SystemClockOverride+0xa0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004112:	607b      	str	r3, [r7, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 /* Enable HSE Osc and activate PLL with HSE source */
 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004116:	2301      	movs	r3, #1
 8004118:	60fb      	str	r3, [r7, #12]
 RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800411a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800411e:	613b      	str	r3, [r7, #16]
 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004120:	2302      	movs	r3, #2
 8004122:	627b      	str	r3, [r7, #36]	@ 0x24
 RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004124:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004128:	62bb      	str	r3, [r7, #40]	@ 0x28
 RCC_OscInitStruct.PLL.PLLM = 8;
 800412a:	2308      	movs	r3, #8
 800412c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 RCC_OscInitStruct.PLL.PLLN = 336;
 800412e:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004132:	633b      	str	r3, [r7, #48]	@ 0x30
 RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004134:	2302      	movs	r3, #2
 8004136:	637b      	str	r3, [r7, #52]	@ 0x34
 RCC_OscInitStruct.PLL.PLLQ = 7;
 8004138:	2307      	movs	r3, #7
 800413a:	63bb      	str	r3, [r7, #56]	@ 0x38
 HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800413c:	f107 030c 	add.w	r3, r7, #12
 8004140:	4618      	mov	r0, r3
 8004142:	f003 f967 	bl	8007414 <HAL_RCC_OscConfig>
 /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
 RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8004146:	230f      	movs	r3, #15
 8004148:	63fb      	str	r3, [r7, #60]	@ 0x3c
 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800414a:	2302      	movs	r3, #2
 800414c:	643b      	str	r3, [r7, #64]	@ 0x40
 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800414e:	2300      	movs	r3, #0
 8004150:	647b      	str	r3, [r7, #68]	@ 0x44
 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004152:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004156:	64bb      	str	r3, [r7, #72]	@ 0x48
 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004158:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800415c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800415e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004162:	2105      	movs	r1, #5
 8004164:	4618      	mov	r0, r3
 8004166:	f003 fbcd 	bl	8007904 <HAL_RCC_ClockConfig>
}
 800416a:	bf00      	nop
 800416c:	3750      	adds	r7, #80	@ 0x50
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40023800 	.word	0x40023800
 8004178:	40007000 	.word	0x40007000

0800417c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004180:	4b1b      	ldr	r3, [pc, #108]	@ (80041f0 <MX_I2C3_Init+0x74>)
 8004182:	4a1c      	ldr	r2, [pc, #112]	@ (80041f4 <MX_I2C3_Init+0x78>)
 8004184:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8004186:	4b1a      	ldr	r3, [pc, #104]	@ (80041f0 <MX_I2C3_Init+0x74>)
 8004188:	4a1b      	ldr	r2, [pc, #108]	@ (80041f8 <MX_I2C3_Init+0x7c>)
 800418a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800418c:	4b18      	ldr	r3, [pc, #96]	@ (80041f0 <MX_I2C3_Init+0x74>)
 800418e:	2200      	movs	r2, #0
 8004190:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004192:	4b17      	ldr	r3, [pc, #92]	@ (80041f0 <MX_I2C3_Init+0x74>)
 8004194:	2200      	movs	r2, #0
 8004196:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004198:	4b15      	ldr	r3, [pc, #84]	@ (80041f0 <MX_I2C3_Init+0x74>)
 800419a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800419e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041a0:	4b13      	ldr	r3, [pc, #76]	@ (80041f0 <MX_I2C3_Init+0x74>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80041a6:	4b12      	ldr	r3, [pc, #72]	@ (80041f0 <MX_I2C3_Init+0x74>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041ac:	4b10      	ldr	r3, [pc, #64]	@ (80041f0 <MX_I2C3_Init+0x74>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041b2:	4b0f      	ldr	r3, [pc, #60]	@ (80041f0 <MX_I2C3_Init+0x74>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80041b8:	480d      	ldr	r0, [pc, #52]	@ (80041f0 <MX_I2C3_Init+0x74>)
 80041ba:	f001 fde5 	bl	8005d88 <HAL_I2C_Init>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80041c4:	f000 fab0 	bl	8004728 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80041c8:	2100      	movs	r1, #0
 80041ca:	4809      	ldr	r0, [pc, #36]	@ (80041f0 <MX_I2C3_Init+0x74>)
 80041cc:	f002 fe00 	bl	8006dd0 <HAL_I2CEx_ConfigAnalogFilter>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80041d6:	f000 faa7 	bl	8004728 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80041da:	2100      	movs	r1, #0
 80041dc:	4804      	ldr	r0, [pc, #16]	@ (80041f0 <MX_I2C3_Init+0x74>)
 80041de:	f002 fe33 	bl	8006e48 <HAL_I2CEx_ConfigDigitalFilter>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80041e8:	f000 fa9e 	bl	8004728 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80041ec:	bf00      	nop
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	20025c58 	.word	0x20025c58
 80041f4:	40005c00 	.word	0x40005c00
 80041f8:	000186a0 	.word	0x000186a0

080041fc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b09a      	sub	sp, #104	@ 0x68
 8004200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8004202:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004206:	2234      	movs	r2, #52	@ 0x34
 8004208:	2100      	movs	r1, #0
 800420a:	4618      	mov	r0, r3
 800420c:	f004 fc8e 	bl	8008b2c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8004210:	463b      	mov	r3, r7
 8004212:	2234      	movs	r2, #52	@ 0x34
 8004214:	2100      	movs	r1, #0
 8004216:	4618      	mov	r0, r3
 8004218:	f004 fc88 	bl	8008b2c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800421c:	4b4e      	ldr	r3, [pc, #312]	@ (8004358 <MX_LTDC_Init+0x15c>)
 800421e:	4a4f      	ldr	r2, [pc, #316]	@ (800435c <MX_LTDC_Init+0x160>)
 8004220:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004222:	4b4d      	ldr	r3, [pc, #308]	@ (8004358 <MX_LTDC_Init+0x15c>)
 8004224:	2200      	movs	r2, #0
 8004226:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8004228:	4b4b      	ldr	r3, [pc, #300]	@ (8004358 <MX_LTDC_Init+0x15c>)
 800422a:	2200      	movs	r2, #0
 800422c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800422e:	4b4a      	ldr	r3, [pc, #296]	@ (8004358 <MX_LTDC_Init+0x15c>)
 8004230:	2200      	movs	r2, #0
 8004232:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004234:	4b48      	ldr	r3, [pc, #288]	@ (8004358 <MX_LTDC_Init+0x15c>)
 8004236:	2200      	movs	r2, #0
 8004238:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800423a:	4b47      	ldr	r3, [pc, #284]	@ (8004358 <MX_LTDC_Init+0x15c>)
 800423c:	2207      	movs	r2, #7
 800423e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8004240:	4b45      	ldr	r3, [pc, #276]	@ (8004358 <MX_LTDC_Init+0x15c>)
 8004242:	2203      	movs	r2, #3
 8004244:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8004246:	4b44      	ldr	r3, [pc, #272]	@ (8004358 <MX_LTDC_Init+0x15c>)
 8004248:	220e      	movs	r2, #14
 800424a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800424c:	4b42      	ldr	r3, [pc, #264]	@ (8004358 <MX_LTDC_Init+0x15c>)
 800424e:	2205      	movs	r2, #5
 8004250:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8004252:	4b41      	ldr	r3, [pc, #260]	@ (8004358 <MX_LTDC_Init+0x15c>)
 8004254:	f240 228e 	movw	r2, #654	@ 0x28e
 8004258:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800425a:	4b3f      	ldr	r3, [pc, #252]	@ (8004358 <MX_LTDC_Init+0x15c>)
 800425c:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8004260:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8004262:	4b3d      	ldr	r3, [pc, #244]	@ (8004358 <MX_LTDC_Init+0x15c>)
 8004264:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8004268:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800426a:	4b3b      	ldr	r3, [pc, #236]	@ (8004358 <MX_LTDC_Init+0x15c>)
 800426c:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8004270:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8004272:	4b39      	ldr	r3, [pc, #228]	@ (8004358 <MX_LTDC_Init+0x15c>)
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800427a:	4b37      	ldr	r3, [pc, #220]	@ (8004358 <MX_LTDC_Init+0x15c>)
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8004282:	4b35      	ldr	r3, [pc, #212]	@ (8004358 <MX_LTDC_Init+0x15c>)
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800428a:	4833      	ldr	r0, [pc, #204]	@ (8004358 <MX_LTDC_Init+0x15c>)
 800428c:	f002 fe1c 	bl	8006ec8 <HAL_LTDC_Init>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8004296:	f000 fa47 	bl	8004728 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800429a:	2300      	movs	r3, #0
 800429c:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800429e:	2300      	movs	r3, #0
 80042a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80042a2:	2300      	movs	r3, #0
 80042a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80042aa:	2300      	movs	r3, #0
 80042ac:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80042b2:	2300      	movs	r3, #0
 80042b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80042b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042ba:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80042bc:	2305      	movs	r3, #5
 80042be:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80042d8:	2300      	movs	r3, #0
 80042da:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80042de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80042e2:	2200      	movs	r2, #0
 80042e4:	4619      	mov	r1, r3
 80042e6:	481c      	ldr	r0, [pc, #112]	@ (8004358 <MX_LTDC_Init+0x15c>)
 80042e8:	f002 febe 	bl	8007068 <HAL_LTDC_ConfigLayer>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80042f2:	f000 fa19 	bl	8004728 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800430a:	2300      	movs	r3, #0
 800430c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8004312:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004316:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8004318:	2305      	movs	r3, #5
 800431a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800431c:	2300      	movs	r3, #0
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8004328:	2300      	movs	r3, #0
 800432a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8004334:	2300      	movs	r3, #0
 8004336:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800433a:	463b      	mov	r3, r7
 800433c:	2201      	movs	r2, #1
 800433e:	4619      	mov	r1, r3
 8004340:	4805      	ldr	r0, [pc, #20]	@ (8004358 <MX_LTDC_Init+0x15c>)
 8004342:	f002 fe91 	bl	8007068 <HAL_LTDC_ConfigLayer>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800434c:	f000 f9ec 	bl	8004728 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8004350:	bf00      	nop
 8004352:	3768      	adds	r7, #104	@ 0x68
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	20025cac 	.word	0x20025cac
 800435c:	40016800 	.word	0x40016800

08004360 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8004364:	4b17      	ldr	r3, [pc, #92]	@ (80043c4 <MX_SPI5_Init+0x64>)
 8004366:	4a18      	ldr	r2, [pc, #96]	@ (80043c8 <MX_SPI5_Init+0x68>)
 8004368:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800436a:	4b16      	ldr	r3, [pc, #88]	@ (80043c4 <MX_SPI5_Init+0x64>)
 800436c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004370:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004372:	4b14      	ldr	r3, [pc, #80]	@ (80043c4 <MX_SPI5_Init+0x64>)
 8004374:	2200      	movs	r2, #0
 8004376:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004378:	4b12      	ldr	r3, [pc, #72]	@ (80043c4 <MX_SPI5_Init+0x64>)
 800437a:	2200      	movs	r2, #0
 800437c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800437e:	4b11      	ldr	r3, [pc, #68]	@ (80043c4 <MX_SPI5_Init+0x64>)
 8004380:	2200      	movs	r2, #0
 8004382:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004384:	4b0f      	ldr	r3, [pc, #60]	@ (80043c4 <MX_SPI5_Init+0x64>)
 8004386:	2200      	movs	r2, #0
 8004388:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800438a:	4b0e      	ldr	r3, [pc, #56]	@ (80043c4 <MX_SPI5_Init+0x64>)
 800438c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004390:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004392:	4b0c      	ldr	r3, [pc, #48]	@ (80043c4 <MX_SPI5_Init+0x64>)
 8004394:	2200      	movs	r2, #0
 8004396:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004398:	4b0a      	ldr	r3, [pc, #40]	@ (80043c4 <MX_SPI5_Init+0x64>)
 800439a:	2200      	movs	r2, #0
 800439c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800439e:	4b09      	ldr	r3, [pc, #36]	@ (80043c4 <MX_SPI5_Init+0x64>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043a4:	4b07      	ldr	r3, [pc, #28]	@ (80043c4 <MX_SPI5_Init+0x64>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80043aa:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <MX_SPI5_Init+0x64>)
 80043ac:	220a      	movs	r2, #10
 80043ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80043b0:	4804      	ldr	r0, [pc, #16]	@ (80043c4 <MX_SPI5_Init+0x64>)
 80043b2:	f003 fef3 	bl	800819c <HAL_SPI_Init>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80043bc:	f000 f9b4 	bl	8004728 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80043c0:	bf00      	nop
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	20025d54 	.word	0x20025d54
 80043c8:	40015000 	.word	0x40015000

080043cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08e      	sub	sp, #56	@ 0x38
 80043d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	605a      	str	r2, [r3, #4]
 80043dc:	609a      	str	r2, [r3, #8]
 80043de:	60da      	str	r2, [r3, #12]
 80043e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	623b      	str	r3, [r7, #32]
 80043e6:	4bb2      	ldr	r3, [pc, #712]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ea:	4ab1      	ldr	r2, [pc, #708]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 80043ec:	f043 0304 	orr.w	r3, r3, #4
 80043f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043f2:	4baf      	ldr	r3, [pc, #700]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 80043f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	623b      	str	r3, [r7, #32]
 80043fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
 8004402:	4bab      	ldr	r3, [pc, #684]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 8004404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004406:	4aaa      	ldr	r2, [pc, #680]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 8004408:	f043 0320 	orr.w	r3, r3, #32
 800440c:	6313      	str	r3, [r2, #48]	@ 0x30
 800440e:	4ba8      	ldr	r3, [pc, #672]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	61fb      	str	r3, [r7, #28]
 8004418:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800441a:	2300      	movs	r3, #0
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	4ba4      	ldr	r3, [pc, #656]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004422:	4aa3      	ldr	r2, [pc, #652]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 8004424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004428:	6313      	str	r3, [r2, #48]	@ 0x30
 800442a:	4ba1      	ldr	r3, [pc, #644]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004432:	61bb      	str	r3, [r7, #24]
 8004434:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	4b9d      	ldr	r3, [pc, #628]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 800443c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443e:	4a9c      	ldr	r2, [pc, #624]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 8004440:	f043 0301 	orr.w	r3, r3, #1
 8004444:	6313      	str	r3, [r2, #48]	@ 0x30
 8004446:	4b9a      	ldr	r3, [pc, #616]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 8004448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004452:	2300      	movs	r3, #0
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	4b96      	ldr	r3, [pc, #600]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445a:	4a95      	ldr	r2, [pc, #596]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 800445c:	f043 0302 	orr.w	r3, r3, #2
 8004460:	6313      	str	r3, [r2, #48]	@ 0x30
 8004462:	4b93      	ldr	r3, [pc, #588]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 8004464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	4b8f      	ldr	r3, [pc, #572]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004476:	4a8e      	ldr	r2, [pc, #568]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 8004478:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800447c:	6313      	str	r3, [r2, #48]	@ 0x30
 800447e:	4b8c      	ldr	r3, [pc, #560]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 8004480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800448a:	2300      	movs	r3, #0
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	4b88      	ldr	r3, [pc, #544]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 8004490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004492:	4a87      	ldr	r2, [pc, #540]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 8004494:	f043 0310 	orr.w	r3, r3, #16
 8004498:	6313      	str	r3, [r2, #48]	@ 0x30
 800449a:	4b85      	ldr	r3, [pc, #532]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449e:	f003 0310 	and.w	r3, r3, #16
 80044a2:	60bb      	str	r3, [r7, #8]
 80044a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044a6:	2300      	movs	r3, #0
 80044a8:	607b      	str	r3, [r7, #4]
 80044aa:	4b81      	ldr	r3, [pc, #516]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ae:	4a80      	ldr	r2, [pc, #512]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 80044b0:	f043 0308 	orr.w	r3, r3, #8
 80044b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80044b6:	4b7e      	ldr	r3, [pc, #504]	@ (80046b0 <MX_GPIO_Init+0x2e4>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	607b      	str	r3, [r7, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80044c2:	2200      	movs	r2, #0
 80044c4:	2116      	movs	r1, #22
 80044c6:	487b      	ldr	r0, [pc, #492]	@ (80046b4 <MX_GPIO_Init+0x2e8>)
 80044c8:	f001 fc44 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80044cc:	2200      	movs	r2, #0
 80044ce:	2180      	movs	r1, #128	@ 0x80
 80044d0:	4879      	ldr	r0, [pc, #484]	@ (80046b8 <MX_GPIO_Init+0x2ec>)
 80044d2:	f001 fc3f 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80044d6:	2200      	movs	r2, #0
 80044d8:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80044dc:	4877      	ldr	r0, [pc, #476]	@ (80046bc <MX_GPIO_Init+0x2f0>)
 80044de:	f001 fc39 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80044e2:	2200      	movs	r2, #0
 80044e4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80044e8:	4875      	ldr	r0, [pc, #468]	@ (80046c0 <MX_GPIO_Init+0x2f4>)
 80044ea:	f001 fc33 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80044ee:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80044f2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f4:	2302      	movs	r3, #2
 80044f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044fc:	2303      	movs	r3, #3
 80044fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004500:	230c      	movs	r3, #12
 8004502:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004504:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004508:	4619      	mov	r1, r3
 800450a:	486e      	ldr	r0, [pc, #440]	@ (80046c4 <MX_GPIO_Init+0x2f8>)
 800450c:	f001 f96a 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8004510:	2301      	movs	r3, #1
 8004512:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004514:	2302      	movs	r3, #2
 8004516:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004518:	2300      	movs	r3, #0
 800451a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800451c:	2303      	movs	r3, #3
 800451e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004520:	230c      	movs	r3, #12
 8004522:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8004524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004528:	4619      	mov	r1, r3
 800452a:	4862      	ldr	r0, [pc, #392]	@ (80046b4 <MX_GPIO_Init+0x2e8>)
 800452c:	f001 f95a 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8004530:	2316      	movs	r3, #22
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004534:	2301      	movs	r3, #1
 8004536:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004538:	2300      	movs	r3, #0
 800453a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800453c:	2300      	movs	r3, #0
 800453e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004540:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004544:	4619      	mov	r1, r3
 8004546:	485b      	ldr	r0, [pc, #364]	@ (80046b4 <MX_GPIO_Init+0x2e8>)
 8004548:	f001 f94c 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800454c:	f248 0307 	movw	r3, #32775	@ 0x8007
 8004550:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004552:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8004556:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004558:	2300      	movs	r3, #0
 800455a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800455c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004560:	4619      	mov	r1, r3
 8004562:	4855      	ldr	r0, [pc, #340]	@ (80046b8 <MX_GPIO_Init+0x2ec>)
 8004564:	f001 f93e 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8004568:	2380      	movs	r3, #128	@ 0x80
 800456a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800456c:	2301      	movs	r3, #1
 800456e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004570:	2300      	movs	r3, #0
 8004572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004574:	2300      	movs	r3, #0
 8004576:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8004578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800457c:	4619      	mov	r1, r3
 800457e:	484e      	ldr	r0, [pc, #312]	@ (80046b8 <MX_GPIO_Init+0x2ec>)
 8004580:	f001 f930 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8004584:	2320      	movs	r3, #32
 8004586:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004588:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800458c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800458e:	2300      	movs	r3, #0
 8004590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8004592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004596:	4619      	mov	r1, r3
 8004598:	4846      	ldr	r0, [pc, #280]	@ (80046b4 <MX_GPIO_Init+0x2e8>)
 800459a:	f001 f923 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800459e:	2304      	movs	r3, #4
 80045a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045a2:	2300      	movs	r3, #0
 80045a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80045aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045ae:	4619      	mov	r1, r3
 80045b0:	4845      	ldr	r0, [pc, #276]	@ (80046c8 <MX_GPIO_Init+0x2fc>)
 80045b2:	f001 f917 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80045b6:	f248 1333 	movw	r3, #33075	@ 0x8133
 80045ba:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045bc:	2302      	movs	r3, #2
 80045be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045c4:	2303      	movs	r3, #3
 80045c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80045c8:	230c      	movs	r3, #12
 80045ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045d0:	4619      	mov	r1, r3
 80045d2:	483b      	ldr	r0, [pc, #236]	@ (80046c0 <MX_GPIO_Init+0x2f4>)
 80045d4:	f001 f906 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80045d8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80045dc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045de:	2302      	movs	r3, #2
 80045e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045e6:	2303      	movs	r3, #3
 80045e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80045ea:	230c      	movs	r3, #12
 80045ec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045f2:	4619      	mov	r1, r3
 80045f4:	4835      	ldr	r0, [pc, #212]	@ (80046cc <MX_GPIO_Init+0x300>)
 80045f6:	f001 f8f5 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80045fa:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80045fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004600:	2302      	movs	r3, #2
 8004602:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004604:	2300      	movs	r3, #0
 8004606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004608:	2300      	movs	r3, #0
 800460a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800460c:	230c      	movs	r3, #12
 800460e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004610:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004614:	4619      	mov	r1, r3
 8004616:	482c      	ldr	r0, [pc, #176]	@ (80046c8 <MX_GPIO_Init+0x2fc>)
 8004618:	f001 f8e4 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800461c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004620:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004622:	2300      	movs	r3, #0
 8004624:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004626:	2300      	movs	r3, #0
 8004628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800462a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800462e:	4619      	mov	r1, r3
 8004630:	4825      	ldr	r0, [pc, #148]	@ (80046c8 <MX_GPIO_Init+0x2fc>)
 8004632:	f001 f8d7 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8004636:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800463a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800463c:	2302      	movs	r3, #2
 800463e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004640:	2300      	movs	r3, #0
 8004642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004644:	2303      	movs	r3, #3
 8004646:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004648:	230c      	movs	r3, #12
 800464a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800464c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004650:	4619      	mov	r1, r3
 8004652:	481a      	ldr	r0, [pc, #104]	@ (80046bc <MX_GPIO_Init+0x2f0>)
 8004654:	f001 f8c6 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8004658:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800465c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800465e:	2300      	movs	r3, #0
 8004660:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004662:	2300      	movs	r3, #0
 8004664:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8004666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800466a:	4619      	mov	r1, r3
 800466c:	4813      	ldr	r0, [pc, #76]	@ (80046bc <MX_GPIO_Init+0x2f0>)
 800466e:	f001 f8b9 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8004672:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004676:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004678:	2301      	movs	r3, #1
 800467a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467c:	2300      	movs	r3, #0
 800467e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004680:	2300      	movs	r3, #0
 8004682:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004688:	4619      	mov	r1, r3
 800468a:	480c      	ldr	r0, [pc, #48]	@ (80046bc <MX_GPIO_Init+0x2f0>)
 800468c:	f001 f8aa 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004690:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004694:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004696:	2302      	movs	r3, #2
 8004698:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469a:	2300      	movs	r3, #0
 800469c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800469e:	2303      	movs	r3, #3
 80046a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80046a2:	2307      	movs	r3, #7
 80046a4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046aa:	4619      	mov	r1, r3
 80046ac:	e010      	b.n	80046d0 <MX_GPIO_Init+0x304>
 80046ae:	bf00      	nop
 80046b0:	40023800 	.word	0x40023800
 80046b4:	40020800 	.word	0x40020800
 80046b8:	40020000 	.word	0x40020000
 80046bc:	40020c00 	.word	0x40020c00
 80046c0:	40021800 	.word	0x40021800
 80046c4:	40021400 	.word	0x40021400
 80046c8:	40020400 	.word	0x40020400
 80046cc:	40021000 	.word	0x40021000
 80046d0:	4812      	ldr	r0, [pc, #72]	@ (800471c <MX_GPIO_Init+0x350>)
 80046d2:	f001 f887 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80046d6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80046da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046dc:	2301      	movs	r3, #1
 80046de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e0:	2300      	movs	r3, #0
 80046e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e4:	2300      	movs	r3, #0
 80046e6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80046e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046ec:	4619      	mov	r1, r3
 80046ee:	480c      	ldr	r0, [pc, #48]	@ (8004720 <MX_GPIO_Init+0x354>)
 80046f0:	f001 f878 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80046f4:	2360      	movs	r3, #96	@ 0x60
 80046f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f8:	2302      	movs	r3, #2
 80046fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046fc:	2300      	movs	r3, #0
 80046fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004700:	2303      	movs	r3, #3
 8004702:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004704:	230c      	movs	r3, #12
 8004706:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800470c:	4619      	mov	r1, r3
 800470e:	4805      	ldr	r0, [pc, #20]	@ (8004724 <MX_GPIO_Init+0x358>)
 8004710:	f001 f868 	bl	80057e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004714:	bf00      	nop
 8004716:	3738      	adds	r7, #56	@ 0x38
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40020000 	.word	0x40020000
 8004720:	40021800 	.word	0x40021800
 8004724:	40020400 	.word	0x40020400

08004728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800472c:	b672      	cpsid	i
}
 800472e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004730:	bf00      	nop
 8004732:	e7fd      	b.n	8004730 <Error_Handler+0x8>

08004734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800473a:	2300      	movs	r3, #0
 800473c:	607b      	str	r3, [r7, #4]
 800473e:	4b10      	ldr	r3, [pc, #64]	@ (8004780 <HAL_MspInit+0x4c>)
 8004740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004742:	4a0f      	ldr	r2, [pc, #60]	@ (8004780 <HAL_MspInit+0x4c>)
 8004744:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004748:	6453      	str	r3, [r2, #68]	@ 0x44
 800474a:	4b0d      	ldr	r3, [pc, #52]	@ (8004780 <HAL_MspInit+0x4c>)
 800474c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004752:	607b      	str	r3, [r7, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004756:	2300      	movs	r3, #0
 8004758:	603b      	str	r3, [r7, #0]
 800475a:	4b09      	ldr	r3, [pc, #36]	@ (8004780 <HAL_MspInit+0x4c>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475e:	4a08      	ldr	r2, [pc, #32]	@ (8004780 <HAL_MspInit+0x4c>)
 8004760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004764:	6413      	str	r3, [r2, #64]	@ 0x40
 8004766:	4b06      	ldr	r3, [pc, #24]	@ (8004780 <HAL_MspInit+0x4c>)
 8004768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004772:	2007      	movs	r0, #7
 8004774:	f000 ffc0 	bl	80056f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004778:	bf00      	nop
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40023800 	.word	0x40023800

08004784 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08a      	sub	sp, #40	@ 0x28
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800478c:	f107 0314 	add.w	r3, r7, #20
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	609a      	str	r2, [r3, #8]
 8004798:	60da      	str	r2, [r3, #12]
 800479a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a29      	ldr	r2, [pc, #164]	@ (8004848 <HAL_I2C_MspInit+0xc4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d14b      	bne.n	800483e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	4b28      	ldr	r3, [pc, #160]	@ (800484c <HAL_I2C_MspInit+0xc8>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ae:	4a27      	ldr	r2, [pc, #156]	@ (800484c <HAL_I2C_MspInit+0xc8>)
 80047b0:	f043 0304 	orr.w	r3, r3, #4
 80047b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80047b6:	4b25      	ldr	r3, [pc, #148]	@ (800484c <HAL_I2C_MspInit+0xc8>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	4b21      	ldr	r3, [pc, #132]	@ (800484c <HAL_I2C_MspInit+0xc8>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ca:	4a20      	ldr	r2, [pc, #128]	@ (800484c <HAL_I2C_MspInit+0xc8>)
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80047d2:	4b1e      	ldr	r3, [pc, #120]	@ (800484c <HAL_I2C_MspInit+0xc8>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80047de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80047e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047e4:	2312      	movs	r3, #18
 80047e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ec:	2300      	movs	r3, #0
 80047ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80047f0:	2304      	movs	r3, #4
 80047f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80047f4:	f107 0314 	add.w	r3, r7, #20
 80047f8:	4619      	mov	r1, r3
 80047fa:	4815      	ldr	r0, [pc, #84]	@ (8004850 <HAL_I2C_MspInit+0xcc>)
 80047fc:	f000 fff2 	bl	80057e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8004800:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004806:	2312      	movs	r3, #18
 8004808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800480e:	2300      	movs	r3, #0
 8004810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004812:	2304      	movs	r3, #4
 8004814:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8004816:	f107 0314 	add.w	r3, r7, #20
 800481a:	4619      	mov	r1, r3
 800481c:	480d      	ldr	r0, [pc, #52]	@ (8004854 <HAL_I2C_MspInit+0xd0>)
 800481e:	f000 ffe1 	bl	80057e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004822:	2300      	movs	r3, #0
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	4b09      	ldr	r3, [pc, #36]	@ (800484c <HAL_I2C_MspInit+0xc8>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482a:	4a08      	ldr	r2, [pc, #32]	@ (800484c <HAL_I2C_MspInit+0xc8>)
 800482c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004830:	6413      	str	r3, [r2, #64]	@ 0x40
 8004832:	4b06      	ldr	r3, [pc, #24]	@ (800484c <HAL_I2C_MspInit+0xc8>)
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800483a:	60bb      	str	r3, [r7, #8]
 800483c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800483e:	bf00      	nop
 8004840:	3728      	adds	r7, #40	@ 0x28
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40005c00 	.word	0x40005c00
 800484c:	40023800 	.word	0x40023800
 8004850:	40020800 	.word	0x40020800
 8004854:	40020000 	.word	0x40020000

08004858 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b09a      	sub	sp, #104	@ 0x68
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004860:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	605a      	str	r2, [r3, #4]
 800486a:	609a      	str	r2, [r3, #8]
 800486c:	60da      	str	r2, [r3, #12]
 800486e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004874:	2230      	movs	r2, #48	@ 0x30
 8004876:	2100      	movs	r1, #0
 8004878:	4618      	mov	r0, r3
 800487a:	f004 f957 	bl	8008b2c <memset>
  if(hltdc->Instance==LTDC)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a81      	ldr	r2, [pc, #516]	@ (8004a88 <HAL_LTDC_MspInit+0x230>)
 8004884:	4293      	cmp	r3, r2
 8004886:	f040 80fa 	bne.w	8004a7e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800488a:	2308      	movs	r3, #8
 800488c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800488e:	2332      	movs	r3, #50	@ 0x32
 8004890:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8004892:	2302      	movs	r3, #2
 8004894:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8004896:	2300      	movs	r3, #0
 8004898:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800489a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800489e:	4618      	mov	r0, r3
 80048a0:	f003 fa3c 	bl	8007d1c <HAL_RCCEx_PeriphCLKConfig>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80048aa:	f7ff ff3d 	bl	8004728 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80048ae:	2300      	movs	r3, #0
 80048b0:	623b      	str	r3, [r7, #32]
 80048b2:	4b76      	ldr	r3, [pc, #472]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 80048b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b6:	4a75      	ldr	r2, [pc, #468]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 80048b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80048be:	4b73      	ldr	r3, [pc, #460]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 80048c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048c6:	623b      	str	r3, [r7, #32]
 80048c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	4b6f      	ldr	r3, [pc, #444]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 80048d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d2:	4a6e      	ldr	r2, [pc, #440]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 80048d4:	f043 0320 	orr.w	r3, r3, #32
 80048d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80048da:	4b6c      	ldr	r3, [pc, #432]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	61fb      	str	r3, [r7, #28]
 80048e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e6:	2300      	movs	r3, #0
 80048e8:	61bb      	str	r3, [r7, #24]
 80048ea:	4b68      	ldr	r3, [pc, #416]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 80048ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ee:	4a67      	ldr	r2, [pc, #412]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80048f6:	4b65      	ldr	r3, [pc, #404]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 80048f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	61bb      	str	r3, [r7, #24]
 8004900:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	4b61      	ldr	r3, [pc, #388]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490a:	4a60      	ldr	r2, [pc, #384]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 800490c:	f043 0302 	orr.w	r3, r3, #2
 8004910:	6313      	str	r3, [r2, #48]	@ 0x30
 8004912:	4b5e      	ldr	r3, [pc, #376]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800491e:	2300      	movs	r3, #0
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	4b5a      	ldr	r3, [pc, #360]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004926:	4a59      	ldr	r2, [pc, #356]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 8004928:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800492c:	6313      	str	r3, [r2, #48]	@ 0x30
 800492e:	4b57      	ldr	r3, [pc, #348]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004936:	613b      	str	r3, [r7, #16]
 8004938:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	4b53      	ldr	r3, [pc, #332]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004942:	4a52      	ldr	r2, [pc, #328]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 8004944:	f043 0304 	orr.w	r3, r3, #4
 8004948:	6313      	str	r3, [r2, #48]	@ 0x30
 800494a:	4b50      	ldr	r3, [pc, #320]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004956:	2300      	movs	r3, #0
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	4b4c      	ldr	r3, [pc, #304]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 800495c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495e:	4a4b      	ldr	r2, [pc, #300]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 8004960:	f043 0308 	orr.w	r3, r3, #8
 8004964:	6313      	str	r3, [r2, #48]	@ 0x30
 8004966:	4b49      	ldr	r3, [pc, #292]	@ (8004a8c <HAL_LTDC_MspInit+0x234>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	60bb      	str	r3, [r7, #8]
 8004970:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8004972:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004976:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004978:	2302      	movs	r3, #2
 800497a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800497c:	2300      	movs	r3, #0
 800497e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004980:	2300      	movs	r3, #0
 8004982:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004984:	230e      	movs	r3, #14
 8004986:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004988:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800498c:	4619      	mov	r1, r3
 800498e:	4840      	ldr	r0, [pc, #256]	@ (8004a90 <HAL_LTDC_MspInit+0x238>)
 8004990:	f000 ff28 	bl	80057e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8004994:	f641 0358 	movw	r3, #6232	@ 0x1858
 8004998:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800499a:	2302      	movs	r3, #2
 800499c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049a2:	2300      	movs	r3, #0
 80049a4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80049a6:	230e      	movs	r3, #14
 80049a8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049aa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80049ae:	4619      	mov	r1, r3
 80049b0:	4838      	ldr	r0, [pc, #224]	@ (8004a94 <HAL_LTDC_MspInit+0x23c>)
 80049b2:	f000 ff17 	bl	80057e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80049b6:	2303      	movs	r3, #3
 80049b8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ba:	2302      	movs	r3, #2
 80049bc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049be:	2300      	movs	r3, #0
 80049c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049c2:	2300      	movs	r3, #0
 80049c4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80049c6:	2309      	movs	r3, #9
 80049c8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80049ce:	4619      	mov	r1, r3
 80049d0:	4831      	ldr	r0, [pc, #196]	@ (8004a98 <HAL_LTDC_MspInit+0x240>)
 80049d2:	f000 ff07 	bl	80057e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80049d6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80049da:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049dc:	2302      	movs	r3, #2
 80049de:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e0:	2300      	movs	r3, #0
 80049e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049e4:	2300      	movs	r3, #0
 80049e6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80049e8:	230e      	movs	r3, #14
 80049ea:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80049f0:	4619      	mov	r1, r3
 80049f2:	4829      	ldr	r0, [pc, #164]	@ (8004a98 <HAL_LTDC_MspInit+0x240>)
 80049f4:	f000 fef6 	bl	80057e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80049f8:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80049fc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049fe:	2302      	movs	r3, #2
 8004a00:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a06:	2300      	movs	r3, #0
 8004a08:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004a0a:	230e      	movs	r3, #14
 8004a0c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004a0e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004a12:	4619      	mov	r1, r3
 8004a14:	4821      	ldr	r0, [pc, #132]	@ (8004a9c <HAL_LTDC_MspInit+0x244>)
 8004a16:	f000 fee5 	bl	80057e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8004a1a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8004a1e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a20:	2302      	movs	r3, #2
 8004a22:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004a2c:	230e      	movs	r3, #14
 8004a2e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a30:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004a34:	4619      	mov	r1, r3
 8004a36:	481a      	ldr	r0, [pc, #104]	@ (8004aa0 <HAL_LTDC_MspInit+0x248>)
 8004a38:	f000 fed4 	bl	80057e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8004a3c:	2348      	movs	r3, #72	@ 0x48
 8004a3e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a40:	2302      	movs	r3, #2
 8004a42:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a44:	2300      	movs	r3, #0
 8004a46:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004a4c:	230e      	movs	r3, #14
 8004a4e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004a54:	4619      	mov	r1, r3
 8004a56:	4813      	ldr	r0, [pc, #76]	@ (8004aa4 <HAL_LTDC_MspInit+0x24c>)
 8004a58:	f000 fec4 	bl	80057e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8004a5c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004a60:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a62:	2302      	movs	r3, #2
 8004a64:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004a6e:	2309      	movs	r3, #9
 8004a70:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004a72:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004a76:	4619      	mov	r1, r3
 8004a78:	4808      	ldr	r0, [pc, #32]	@ (8004a9c <HAL_LTDC_MspInit+0x244>)
 8004a7a:	f000 feb3 	bl	80057e4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8004a7e:	bf00      	nop
 8004a80:	3768      	adds	r7, #104	@ 0x68
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40016800 	.word	0x40016800
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	40021400 	.word	0x40021400
 8004a94:	40020000 	.word	0x40020000
 8004a98:	40020400 	.word	0x40020400
 8004a9c:	40021800 	.word	0x40021800
 8004aa0:	40020800 	.word	0x40020800
 8004aa4:	40020c00 	.word	0x40020c00

08004aa8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8004ae4 <HAL_RNG_MspInit+0x3c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d10d      	bne.n	8004ad6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae8 <HAL_RNG_MspInit+0x40>)
 8004ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac2:	4a09      	ldr	r2, [pc, #36]	@ (8004ae8 <HAL_RNG_MspInit+0x40>)
 8004ac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ac8:	6353      	str	r3, [r2, #52]	@ 0x34
 8004aca:	4b07      	ldr	r3, [pc, #28]	@ (8004ae8 <HAL_RNG_MspInit+0x40>)
 8004acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8004ad6:	bf00      	nop
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	50060800 	.word	0x50060800
 8004ae8:	40023800 	.word	0x40023800

08004aec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08a      	sub	sp, #40	@ 0x28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af4:	f107 0314 	add.w	r3, r7, #20
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	605a      	str	r2, [r3, #4]
 8004afe:	609a      	str	r2, [r3, #8]
 8004b00:	60da      	str	r2, [r3, #12]
 8004b02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a19      	ldr	r2, [pc, #100]	@ (8004b70 <HAL_SPI_MspInit+0x84>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d12c      	bne.n	8004b68 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004b0e:	2300      	movs	r3, #0
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	4b18      	ldr	r3, [pc, #96]	@ (8004b74 <HAL_SPI_MspInit+0x88>)
 8004b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b16:	4a17      	ldr	r2, [pc, #92]	@ (8004b74 <HAL_SPI_MspInit+0x88>)
 8004b18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b1e:	4b15      	ldr	r3, [pc, #84]	@ (8004b74 <HAL_SPI_MspInit+0x88>)
 8004b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	4b11      	ldr	r3, [pc, #68]	@ (8004b74 <HAL_SPI_MspInit+0x88>)
 8004b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b32:	4a10      	ldr	r2, [pc, #64]	@ (8004b74 <HAL_SPI_MspInit+0x88>)
 8004b34:	f043 0320 	orr.w	r3, r3, #32
 8004b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004b74 <HAL_SPI_MspInit+0x88>)
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8004b46:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8004b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b50:	2300      	movs	r3, #0
 8004b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b54:	2300      	movs	r3, #0
 8004b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004b58:	2305      	movs	r3, #5
 8004b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004b5c:	f107 0314 	add.w	r3, r7, #20
 8004b60:	4619      	mov	r1, r3
 8004b62:	4805      	ldr	r0, [pc, #20]	@ (8004b78 <HAL_SPI_MspInit+0x8c>)
 8004b64:	f000 fe3e 	bl	80057e4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8004b68:	bf00      	nop
 8004b6a:	3728      	adds	r7, #40	@ 0x28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40015000 	.word	0x40015000
 8004b74:	40023800 	.word	0x40023800
 8004b78:	40021400 	.word	0x40021400

08004b7c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a08      	ldr	r2, [pc, #32]	@ (8004bac <HAL_SPI_MspDeInit+0x30>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d10a      	bne.n	8004ba4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8004b8e:	4b08      	ldr	r3, [pc, #32]	@ (8004bb0 <HAL_SPI_MspDeInit+0x34>)
 8004b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b92:	4a07      	ldr	r2, [pc, #28]	@ (8004bb0 <HAL_SPI_MspDeInit+0x34>)
 8004b94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004b98:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8004b9a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8004b9e:	4805      	ldr	r0, [pc, #20]	@ (8004bb4 <HAL_SPI_MspDeInit+0x38>)
 8004ba0:	f000 ffcc 	bl	8005b3c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8004ba4:	bf00      	nop
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40015000 	.word	0x40015000
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	40021400 	.word	0x40021400

08004bb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8004bf4 <HAL_TIM_Base_MspInit+0x3c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d10d      	bne.n	8004be6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf8 <HAL_TIM_Base_MspInit+0x40>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd2:	4a09      	ldr	r2, [pc, #36]	@ (8004bf8 <HAL_TIM_Base_MspInit+0x40>)
 8004bd4:	f043 0320 	orr.w	r3, r3, #32
 8004bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bda:	4b07      	ldr	r3, [pc, #28]	@ (8004bf8 <HAL_TIM_Base_MspInit+0x40>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8004be6:	bf00      	nop
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40001400 	.word	0x40001400
 8004bf8:	40023800 	.word	0x40023800

08004bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004c00:	bf00      	nop
 8004c02:	e7fd      	b.n	8004c00 <NMI_Handler+0x4>

08004c04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c08:	bf00      	nop
 8004c0a:	e7fd      	b.n	8004c08 <HardFault_Handler+0x4>

08004c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c10:	bf00      	nop
 8004c12:	e7fd      	b.n	8004c10 <MemManage_Handler+0x4>

08004c14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c18:	bf00      	nop
 8004c1a:	e7fd      	b.n	8004c18 <BusFault_Handler+0x4>

08004c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c20:	bf00      	nop
 8004c22:	e7fd      	b.n	8004c20 <UsageFault_Handler+0x4>

08004c24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c28:	bf00      	nop
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c32:	b480      	push	{r7}
 8004c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c36:	bf00      	nop
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c44:	bf00      	nop
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c52:	f000 fbfb 	bl	800544c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c56:	bf00      	nop
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	4603      	mov	r3, r0
 8004c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	db0b      	blt.n	8004c86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	f003 021f 	and.w	r2, r3, #31
 8004c74:	4907      	ldr	r1, [pc, #28]	@ (8004c94 <__NVIC_EnableIRQ+0x38>)
 8004c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	2001      	movs	r0, #1
 8004c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	e000e100 	.word	0xe000e100

08004c98 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8004c9e:	f000 f9cd 	bl	800503c <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8004ca2:	f000 f98d 	bl	8004fc0 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	2103      	movs	r1, #3
 8004caa:	2082      	movs	r0, #130	@ 0x82
 8004cac:	f000 fa1a 	bl	80050e4 <I2C3_Write>
    HAL_Delay(5);
 8004cb0:	2005      	movs	r0, #5
 8004cb2:	f000 fbeb 	bl	800548c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2103      	movs	r1, #3
 8004cba:	2082      	movs	r0, #130	@ 0x82
 8004cbc:	f000 fa12 	bl	80050e4 <I2C3_Write>
    HAL_Delay(2);
 8004cc0:	2002      	movs	r0, #2
 8004cc2:	f000 fbe3 	bl	800548c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8004cc6:	1cba      	adds	r2, r7, #2
 8004cc8:	2302      	movs	r3, #2
 8004cca:	2100      	movs	r1, #0
 8004ccc:	2082      	movs	r0, #130	@ 0x82
 8004cce:	f000 fa55 	bl	800517c <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8004cd2:	887b      	ldrh	r3, [r7, #2]
 8004cd4:	021b      	lsls	r3, r3, #8
 8004cd6:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8004cd8:	887b      	ldrh	r3, [r7, #2]
 8004cda:	0a1b      	lsrs	r3, r3, #8
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	88fb      	ldrh	r3, [r7, #6]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8004ce4:	88fb      	ldrh	r3, [r7, #6]
 8004ce6:	f640 0211 	movw	r2, #2065	@ 0x811
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d001      	beq.n	8004cf2 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e095      	b.n	8004e1e <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	2103      	movs	r1, #3
 8004cf6:	2082      	movs	r0, #130	@ 0x82
 8004cf8:	f000 f9f4 	bl	80050e4 <I2C3_Write>
    HAL_Delay(5);
 8004cfc:	2005      	movs	r0, #5
 8004cfe:	f000 fbc5 	bl	800548c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8004d02:	2200      	movs	r2, #0
 8004d04:	2103      	movs	r1, #3
 8004d06:	2082      	movs	r0, #130	@ 0x82
 8004d08:	f000 f9ec 	bl	80050e4 <I2C3_Write>
    HAL_Delay(2);
 8004d0c:	2002      	movs	r0, #2
 8004d0e:	f000 fbbd 	bl	800548c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8004d12:	2004      	movs	r0, #4
 8004d14:	f000 f887 	bl	8004e26 <STMPE811_Read>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8004d1c:	797b      	ldrb	r3, [r7, #5]
 8004d1e:	f023 0301 	bic.w	r3, r3, #1
 8004d22:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8004d24:	797b      	ldrb	r3, [r7, #5]
 8004d26:	461a      	mov	r2, r3
 8004d28:	2104      	movs	r1, #4
 8004d2a:	2082      	movs	r0, #130	@ 0x82
 8004d2c:	f000 f9da 	bl	80050e4 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8004d30:	2004      	movs	r0, #4
 8004d32:	f000 f878 	bl	8004e26 <STMPE811_Read>
 8004d36:	4603      	mov	r3, r0
 8004d38:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8004d3a:	797b      	ldrb	r3, [r7, #5]
 8004d3c:	f023 0302 	bic.w	r3, r3, #2
 8004d40:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8004d42:	797b      	ldrb	r3, [r7, #5]
 8004d44:	461a      	mov	r2, r3
 8004d46:	2104      	movs	r1, #4
 8004d48:	2082      	movs	r0, #130	@ 0x82
 8004d4a:	f000 f9cb 	bl	80050e4 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8004d4e:	2249      	movs	r2, #73	@ 0x49
 8004d50:	2120      	movs	r1, #32
 8004d52:	2082      	movs	r0, #130	@ 0x82
 8004d54:	f000 f9c6 	bl	80050e4 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8004d58:	2002      	movs	r0, #2
 8004d5a:	f000 fb97 	bl	800548c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8004d5e:	2201      	movs	r2, #1
 8004d60:	2121      	movs	r1, #33	@ 0x21
 8004d62:	2082      	movs	r0, #130	@ 0x82
 8004d64:	f000 f9be 	bl	80050e4 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8004d68:	2017      	movs	r0, #23
 8004d6a:	f000 f85c 	bl	8004e26 <STMPE811_Read>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8004d72:	797b      	ldrb	r3, [r7, #5]
 8004d74:	f043 031e 	orr.w	r3, r3, #30
 8004d78:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8004d7a:	797b      	ldrb	r3, [r7, #5]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	2117      	movs	r1, #23
 8004d80:	2082      	movs	r0, #130	@ 0x82
 8004d82:	f000 f9af 	bl	80050e4 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8004d86:	229a      	movs	r2, #154	@ 0x9a
 8004d88:	2141      	movs	r1, #65	@ 0x41
 8004d8a:	2082      	movs	r0, #130	@ 0x82
 8004d8c:	f000 f9aa 	bl	80050e4 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8004d90:	2201      	movs	r2, #1
 8004d92:	214a      	movs	r1, #74	@ 0x4a
 8004d94:	2082      	movs	r0, #130	@ 0x82
 8004d96:	f000 f9a5 	bl	80050e4 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	214b      	movs	r1, #75	@ 0x4b
 8004d9e:	2082      	movs	r0, #130	@ 0x82
 8004da0:	f000 f9a0 	bl	80050e4 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8004da4:	2200      	movs	r2, #0
 8004da6:	214b      	movs	r1, #75	@ 0x4b
 8004da8:	2082      	movs	r0, #130	@ 0x82
 8004daa:	f000 f99b 	bl	80050e4 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8004dae:	2201      	movs	r2, #1
 8004db0:	2156      	movs	r1, #86	@ 0x56
 8004db2:	2082      	movs	r0, #130	@ 0x82
 8004db4:	f000 f996 	bl	80050e4 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8004db8:	2201      	movs	r2, #1
 8004dba:	2158      	movs	r1, #88	@ 0x58
 8004dbc:	2082      	movs	r0, #130	@ 0x82
 8004dbe:	f000 f991 	bl	80050e4 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	2140      	movs	r1, #64	@ 0x40
 8004dc6:	2082      	movs	r0, #130	@ 0x82
 8004dc8:	f000 f98c 	bl	80050e4 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8004dcc:	22ff      	movs	r2, #255	@ 0xff
 8004dce:	210b      	movs	r1, #11
 8004dd0:	2082      	movs	r0, #130	@ 0x82
 8004dd2:	f000 f987 	bl	80050e4 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8004dd6:	f000 f8c1 	bl	8004f5c <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8004dda:	2009      	movs	r0, #9
 8004ddc:	f000 f823 	bl	8004e26 <STMPE811_Read>
 8004de0:	4603      	mov	r3, r0
 8004de2:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8004de4:	797b      	ldrb	r3, [r7, #5]
 8004de6:	f043 0301 	orr.w	r3, r3, #1
 8004dea:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8004dec:	797b      	ldrb	r3, [r7, #5]
 8004dee:	461a      	mov	r2, r3
 8004df0:	2109      	movs	r1, #9
 8004df2:	2082      	movs	r0, #130	@ 0x82
 8004df4:	f000 f976 	bl	80050e4 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8004df8:	200a      	movs	r0, #10
 8004dfa:	f000 f814 	bl	8004e26 <STMPE811_Read>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8004e02:	797b      	ldrb	r3, [r7, #5]
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8004e0a:	797b      	ldrb	r3, [r7, #5]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	210a      	movs	r1, #10
 8004e10:	2082      	movs	r0, #130	@ 0x82
 8004e12:	f000 f967 	bl	80050e4 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8004e16:	20c8      	movs	r0, #200	@ 0xc8
 8004e18:	f000 fb38 	bl	800548c <HAL_Delay>

    return STMPE811_State_Ok;
 8004e1c:	2302      	movs	r3, #2

}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8004e30:	f107 020f 	add.w	r2, r7, #15
 8004e34:	79fb      	ldrb	r3, [r7, #7]
 8004e36:	4619      	mov	r1, r3
 8004e38:	2082      	movs	r0, #130	@ 0x82
 8004e3a:	f000 f97b 	bl	8005134 <I2C3_Read>

    return readData;
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	460a      	mov	r2, r1
 8004e52:	71fb      	strb	r3, [r7, #7]
 8004e54:	4613      	mov	r3, r2
 8004e56:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8004e58:	79ba      	ldrb	r2, [r7, #6]
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	2082      	movs	r0, #130	@ 0x82
 8004e60:	f000 f940 	bl	80050e4 <I2C3_Write>
}
 8004e64:	bf00      	nop
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	799b      	ldrb	r3, [r3, #6]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d117      	bne.n	8004eac <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 f99d 	bl	80051c0 <TM_STMPE811_ReadX>
 8004e86:	4603      	mov	r3, r0
 8004e88:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	885b      	ldrh	r3, [r3, #2]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f9f0 	bl	800527c <TM_STMPE811_ReadY>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	805a      	strh	r2, [r3, #2]
 8004eaa:	e048      	b.n	8004f3e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	799b      	ldrb	r3, [r3, #6]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d112      	bne.n	8004eda <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 f981 	bl	80051c0 <TM_STMPE811_ReadX>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	885b      	ldrh	r3, [r3, #2]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 f9d6 	bl	800527c <TM_STMPE811_ReadY>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	805a      	strh	r2, [r3, #2]
 8004ed8:	e031      	b.n	8004f3e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	799b      	ldrb	r3, [r3, #6]
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d115      	bne.n	8004f0e <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	885b      	ldrh	r3, [r3, #2]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 f96a 	bl	80051c0 <TM_STMPE811_ReadX>
 8004eec:	4603      	mov	r3, r0
 8004eee:	461a      	mov	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 f9bf 	bl	800527c <TM_STMPE811_ReadY>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8004f04:	3301      	adds	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	801a      	strh	r2, [r3, #0]
 8004f0c:	e017      	b.n	8004f3e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	799b      	ldrb	r3, [r3, #6]
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d113      	bne.n	8004f3e <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 f950 	bl	80051c0 <TM_STMPE811_ReadX>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 f9a3 	bl	800527c <TM_STMPE811_ReadY>
 8004f36:	4603      	mov	r3, r0
 8004f38:	461a      	mov	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8004f3e:	2201      	movs	r2, #1
 8004f40:	214b      	movs	r1, #75	@ 0x4b
 8004f42:	2082      	movs	r0, #130	@ 0x82
 8004f44:	f000 f8ce 	bl	80050e4 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8004f48:	2200      	movs	r2, #0
 8004f4a:	214b      	movs	r1, #75	@ 0x4b
 8004f4c:	2082      	movs	r0, #130	@ 0x82
 8004f4e:	f000 f8c9 	bl	80050e4 <I2C3_Write>
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f62:	2300      	movs	r3, #0
 8004f64:	603b      	str	r3, [r7, #0]
 8004f66:	4b14      	ldr	r3, [pc, #80]	@ (8004fb8 <enableInterruptSupportForTouch+0x5c>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6a:	4a13      	ldr	r2, [pc, #76]	@ (8004fb8 <enableInterruptSupportForTouch+0x5c>)
 8004f6c:	f043 0301 	orr.w	r3, r3, #1
 8004f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f72:	4b11      	ldr	r3, [pc, #68]	@ (8004fb8 <enableInterruptSupportForTouch+0x5c>)
 8004f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f7e:	1d3b      	adds	r3, r7, #4
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	605a      	str	r2, [r3, #4]
 8004f86:	609a      	str	r2, [r3, #8]
 8004f88:	60da      	str	r2, [r3, #12]
 8004f8a:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004f8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f90:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004f92:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8004f96:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fa0:	1d3b      	adds	r3, r7, #4
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4805      	ldr	r0, [pc, #20]	@ (8004fbc <enableInterruptSupportForTouch+0x60>)
 8004fa6:	f000 fc1d 	bl	80057e4 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004faa:	2028      	movs	r0, #40	@ 0x28
 8004fac:	f7ff fe56 	bl	8004c5c <__NVIC_EnableIRQ>

}
 8004fb0:	bf00      	nop
 8004fb2:	3718      	adds	r7, #24
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	40020000 	.word	0x40020000

08004fc0 <I2C3_Init>:
        while(1);
    }
}

static void I2C3_Init()
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	603b      	str	r3, [r7, #0]
 8004fca:	4b18      	ldr	r3, [pc, #96]	@ (800502c <I2C3_Init+0x6c>)
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fce:	4a17      	ldr	r2, [pc, #92]	@ (800502c <I2C3_Init+0x6c>)
 8004fd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004fd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fd6:	4b15      	ldr	r3, [pc, #84]	@ (800502c <I2C3_Init+0x6c>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8004fe2:	4b13      	ldr	r3, [pc, #76]	@ (8005030 <I2C3_Init+0x70>)
 8004fe4:	4a13      	ldr	r2, [pc, #76]	@ (8005034 <I2C3_Init+0x74>)
 8004fe6:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8004fe8:	4b11      	ldr	r3, [pc, #68]	@ (8005030 <I2C3_Init+0x70>)
 8004fea:	4a13      	ldr	r2, [pc, #76]	@ (8005038 <I2C3_Init+0x78>)
 8004fec:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004fee:	4b10      	ldr	r3, [pc, #64]	@ (8005030 <I2C3_Init+0x70>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8005030 <I2C3_Init+0x70>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8005030 <I2C3_Init+0x70>)
 8004ffc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005000:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8005002:	4b0b      	ldr	r3, [pc, #44]	@ (8005030 <I2C3_Init+0x70>)
 8005004:	2200      	movs	r2, #0
 8005006:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005008:	4b09      	ldr	r3, [pc, #36]	@ (8005030 <I2C3_Init+0x70>)
 800500a:	2200      	movs	r2, #0
 800500c:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800500e:	4808      	ldr	r0, [pc, #32]	@ (8005030 <I2C3_Init+0x70>)
 8005010:	f000 feba 	bl	8005d88 <HAL_I2C_Init>
 8005014:	4603      	mov	r3, r0
 8005016:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8005018:	79fb      	ldrb	r3, [r7, #7]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800501e:	bf00      	nop
 8005020:	e7fd      	b.n	800501e <I2C3_Init+0x5e>
    }
    return;
 8005022:	bf00      	nop
}
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	40023800 	.word	0x40023800
 8005030:	20025dac 	.word	0x20025dac
 8005034:	40005c00 	.word	0x40005c00
 8005038:	000186a0 	.word	0x000186a0

0800503c <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005042:	f107 030c 	add.w	r3, r7, #12
 8005046:	2200      	movs	r2, #0
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	605a      	str	r2, [r3, #4]
 800504c:	609a      	str	r2, [r3, #8]
 800504e:	60da      	str	r2, [r3, #12]
 8005050:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005052:	2300      	movs	r3, #0
 8005054:	60bb      	str	r3, [r7, #8]
 8005056:	4b20      	ldr	r3, [pc, #128]	@ (80050d8 <I2C3_MspInit+0x9c>)
 8005058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505a:	4a1f      	ldr	r2, [pc, #124]	@ (80050d8 <I2C3_MspInit+0x9c>)
 800505c:	f043 0304 	orr.w	r3, r3, #4
 8005060:	6313      	str	r3, [r2, #48]	@ 0x30
 8005062:	4b1d      	ldr	r3, [pc, #116]	@ (80050d8 <I2C3_MspInit+0x9c>)
 8005064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	60bb      	str	r3, [r7, #8]
 800506c:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800506e:	2300      	movs	r3, #0
 8005070:	607b      	str	r3, [r7, #4]
 8005072:	4b19      	ldr	r3, [pc, #100]	@ (80050d8 <I2C3_MspInit+0x9c>)
 8005074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005076:	4a18      	ldr	r2, [pc, #96]	@ (80050d8 <I2C3_MspInit+0x9c>)
 8005078:	f043 0301 	orr.w	r3, r3, #1
 800507c:	6313      	str	r3, [r2, #48]	@ 0x30
 800507e:	4b16      	ldr	r3, [pc, #88]	@ (80050d8 <I2C3_MspInit+0x9c>)
 8005080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	607b      	str	r3, [r7, #4]
 8005088:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800508a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800508e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005090:	2312      	movs	r3, #18
 8005092:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005094:	2300      	movs	r3, #0
 8005096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005098:	2300      	movs	r3, #0
 800509a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800509c:	2304      	movs	r3, #4
 800509e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80050a0:	f107 030c 	add.w	r3, r7, #12
 80050a4:	4619      	mov	r1, r3
 80050a6:	480d      	ldr	r0, [pc, #52]	@ (80050dc <I2C3_MspInit+0xa0>)
 80050a8:	f000 fb9c 	bl	80057e4 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80050ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050b2:	2312      	movs	r3, #18
 80050b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ba:	2300      	movs	r3, #0
 80050bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80050be:	2304      	movs	r3, #4
 80050c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80050c2:	f107 030c 	add.w	r3, r7, #12
 80050c6:	4619      	mov	r1, r3
 80050c8:	4805      	ldr	r0, [pc, #20]	@ (80050e0 <I2C3_MspInit+0xa4>)
 80050ca:	f000 fb8b 	bl	80057e4 <HAL_GPIO_Init>
    
}
 80050ce:	bf00      	nop
 80050d0:	3720      	adds	r7, #32
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	40023800 	.word	0x40023800
 80050dc:	40020800 	.word	0x40020800
 80050e0:	40020000 	.word	0x40020000

080050e4 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af04      	add	r7, sp, #16
 80050ea:	4603      	mov	r3, r0
 80050ec:	80fb      	strh	r3, [r7, #6]
 80050ee:	460b      	mov	r3, r1
 80050f0:	717b      	strb	r3, [r7, #5]
 80050f2:	4613      	mov	r3, r2
 80050f4:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80050f6:	793b      	ldrb	r3, [r7, #4]
 80050f8:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80050fa:	797b      	ldrb	r3, [r7, #5]
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	88f9      	ldrh	r1, [r7, #6]
 8005100:	4b09      	ldr	r3, [pc, #36]	@ (8005128 <I2C3_Write+0x44>)
 8005102:	9302      	str	r3, [sp, #8]
 8005104:	2301      	movs	r3, #1
 8005106:	9301      	str	r3, [sp, #4]
 8005108:	f107 030f 	add.w	r3, r7, #15
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	2301      	movs	r3, #1
 8005110:	4806      	ldr	r0, [pc, #24]	@ (800512c <I2C3_Write+0x48>)
 8005112:	f000 ff7d 	bl	8006010 <HAL_I2C_Mem_Write>
 8005116:	4603      	mov	r3, r0
 8005118:	461a      	mov	r2, r3
 800511a:	4b05      	ldr	r3, [pc, #20]	@ (8005130 <I2C3_Write+0x4c>)
 800511c:	701a      	strb	r2, [r3, #0]
    //verifyHAL_I2C_IS_OKAY();
}
 800511e:	bf00      	nop
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	0003d090 	.word	0x0003d090
 800512c:	20025dac 	.word	0x20025dac
 8005130:	20025e00 	.word	0x20025e00

08005134 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af04      	add	r7, sp, #16
 800513a:	4603      	mov	r3, r0
 800513c:	603a      	str	r2, [r7, #0]
 800513e:	71fb      	strb	r3, [r7, #7]
 8005140:	460b      	mov	r3, r1
 8005142:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8005144:	79fb      	ldrb	r3, [r7, #7]
 8005146:	b299      	uxth	r1, r3
 8005148:	79bb      	ldrb	r3, [r7, #6]
 800514a:	b29a      	uxth	r2, r3
 800514c:	4b08      	ldr	r3, [pc, #32]	@ (8005170 <I2C3_Read+0x3c>)
 800514e:	9302      	str	r3, [sp, #8]
 8005150:	2301      	movs	r3, #1
 8005152:	9301      	str	r3, [sp, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	2301      	movs	r3, #1
 800515a:	4806      	ldr	r0, [pc, #24]	@ (8005174 <I2C3_Read+0x40>)
 800515c:	f001 f852 	bl	8006204 <HAL_I2C_Mem_Read>
 8005160:	4603      	mov	r3, r0
 8005162:	461a      	mov	r2, r3
 8005164:	4b04      	ldr	r3, [pc, #16]	@ (8005178 <I2C3_Read+0x44>)
 8005166:	701a      	strb	r2, [r3, #0]
    //verifyHAL_I2C_IS_OKAY();
}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	0003d090 	.word	0x0003d090
 8005174:	20025dac 	.word	0x20025dac
 8005178:	20025e00 	.word	0x20025e00

0800517c <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af04      	add	r7, sp, #16
 8005182:	603a      	str	r2, [r7, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	4603      	mov	r3, r0
 8005188:	71fb      	strb	r3, [r7, #7]
 800518a:	460b      	mov	r3, r1
 800518c:	71bb      	strb	r3, [r7, #6]
 800518e:	4613      	mov	r3, r2
 8005190:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8005192:	79fb      	ldrb	r3, [r7, #7]
 8005194:	b299      	uxth	r1, r3
 8005196:	79bb      	ldrb	r3, [r7, #6]
 8005198:	b29a      	uxth	r2, r3
 800519a:	4b07      	ldr	r3, [pc, #28]	@ (80051b8 <I2C3_MulitByteRead+0x3c>)
 800519c:	9302      	str	r3, [sp, #8]
 800519e:	88bb      	ldrh	r3, [r7, #4]
 80051a0:	9301      	str	r3, [sp, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	2301      	movs	r3, #1
 80051a8:	4804      	ldr	r0, [pc, #16]	@ (80051bc <I2C3_MulitByteRead+0x40>)
 80051aa:	f001 f82b 	bl	8006204 <HAL_I2C_Mem_Read>
}
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	0003d090 	.word	0x0003d090
 80051bc:	20025dac 	.word	0x20025dac

080051c0 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4603      	mov	r3, r0
 80051c8:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80051ca:	204d      	movs	r0, #77	@ 0x4d
 80051cc:	f7ff fe2b 	bl	8004e26 <STMPE811_Read>
 80051d0:	4603      	mov	r3, r0
 80051d2:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80051d4:	204e      	movs	r0, #78	@ 0x4e
 80051d6:	f7ff fe26 	bl	8004e26 <STMPE811_Read>
 80051da:	4603      	mov	r3, r0
 80051dc:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80051de:	7a7b      	ldrb	r3, [r7, #9]
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	b21a      	sxth	r2, r3
 80051e4:	7a3b      	ldrb	r3, [r7, #8]
 80051e6:	b21b      	sxth	r3, r3
 80051e8:	4313      	orrs	r3, r2
 80051ea:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80051ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051f0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80051f4:	4293      	cmp	r3, r2
 80051f6:	dc06      	bgt.n	8005206 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 80051f8:	89fb      	ldrh	r3, [r7, #14]
 80051fa:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80051fe:	330c      	adds	r3, #12
 8005200:	b29b      	uxth	r3, r3
 8005202:	81fb      	strh	r3, [r7, #14]
 8005204:	e005      	b.n	8005212 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8005206:	89fb      	ldrh	r3, [r7, #14]
 8005208:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800520c:	3308      	adds	r3, #8
 800520e:	b29b      	uxth	r3, r3
 8005210:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8005212:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005216:	4a18      	ldr	r2, [pc, #96]	@ (8005278 <TM_STMPE811_ReadX+0xb8>)
 8005218:	fb82 1203 	smull	r1, r2, r2, r3
 800521c:	441a      	add	r2, r3
 800521e:	10d2      	asrs	r2, r2, #3
 8005220:	17db      	asrs	r3, r3, #31
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8005226:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800522a:	2bef      	cmp	r3, #239	@ 0xef
 800522c:	dd02      	ble.n	8005234 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800522e:	23ef      	movs	r3, #239	@ 0xef
 8005230:	81fb      	strh	r3, [r7, #14]
 8005232:	e005      	b.n	8005240 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8005234:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005238:	2b00      	cmp	r3, #0
 800523a:	da01      	bge.n	8005240 <TM_STMPE811_ReadX+0x80>
        val = 0;
 800523c:	2300      	movs	r3, #0
 800523e:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8005240:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005244:	88fb      	ldrh	r3, [r7, #6]
 8005246:	429a      	cmp	r2, r3
 8005248:	dd05      	ble.n	8005256 <TM_STMPE811_ReadX+0x96>
 800524a:	89fa      	ldrh	r2, [r7, #14]
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	b29b      	uxth	r3, r3
 8005252:	b21b      	sxth	r3, r3
 8005254:	e004      	b.n	8005260 <TM_STMPE811_ReadX+0xa0>
 8005256:	89fb      	ldrh	r3, [r7, #14]
 8005258:	88fa      	ldrh	r2, [r7, #6]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	b29b      	uxth	r3, r3
 800525e:	b21b      	sxth	r3, r3
 8005260:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8005262:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005266:	2b04      	cmp	r3, #4
 8005268:	dd01      	ble.n	800526e <TM_STMPE811_ReadX+0xae>
        return val;
 800526a:	89fb      	ldrh	r3, [r7, #14]
 800526c:	e000      	b.n	8005270 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 800526e:	88fb      	ldrh	r3, [r7, #6]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	88888889 	.word	0x88888889

0800527c <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	4603      	mov	r3, r0
 8005284:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8005286:	204f      	movs	r0, #79	@ 0x4f
 8005288:	f7ff fdcd 	bl	8004e26 <STMPE811_Read>
 800528c:	4603      	mov	r3, r0
 800528e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8005290:	2050      	movs	r0, #80	@ 0x50
 8005292:	f7ff fdc8 	bl	8004e26 <STMPE811_Read>
 8005296:	4603      	mov	r3, r0
 8005298:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800529a:	7a7b      	ldrb	r3, [r7, #9]
 800529c:	021b      	lsls	r3, r3, #8
 800529e:	b21a      	sxth	r2, r3
 80052a0:	7a3b      	ldrb	r3, [r7, #8]
 80052a2:	b21b      	sxth	r3, r3
 80052a4:	4313      	orrs	r3, r2
 80052a6:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80052a8:	89fb      	ldrh	r3, [r7, #14]
 80052aa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80052b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052b6:	4a19      	ldr	r2, [pc, #100]	@ (800531c <TM_STMPE811_ReadY+0xa0>)
 80052b8:	fb82 1203 	smull	r1, r2, r2, r3
 80052bc:	1052      	asrs	r2, r2, #1
 80052be:	17db      	asrs	r3, r3, #31
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80052c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	dc02      	bgt.n	80052d2 <TM_STMPE811_ReadY+0x56>
        val = 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	81fb      	strh	r3, [r7, #14]
 80052d0:	e007      	b.n	80052e2 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 80052d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052d6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80052da:	db02      	blt.n	80052e2 <TM_STMPE811_ReadY+0x66>
        val = 319;
 80052dc:	f240 133f 	movw	r3, #319	@ 0x13f
 80052e0:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80052e2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	dd05      	ble.n	80052f8 <TM_STMPE811_ReadY+0x7c>
 80052ec:	89fa      	ldrh	r2, [r7, #14]
 80052ee:	88fb      	ldrh	r3, [r7, #6]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	b21b      	sxth	r3, r3
 80052f6:	e004      	b.n	8005302 <TM_STMPE811_ReadY+0x86>
 80052f8:	89fb      	ldrh	r3, [r7, #14]
 80052fa:	88fa      	ldrh	r2, [r7, #6]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	b29b      	uxth	r3, r3
 8005300:	b21b      	sxth	r3, r3
 8005302:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8005304:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005308:	2b04      	cmp	r3, #4
 800530a:	dd01      	ble.n	8005310 <TM_STMPE811_ReadY+0x94>
        return val;
 800530c:	89fb      	ldrh	r3, [r7, #14]
 800530e:	e000      	b.n	8005312 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8005310:	88fb      	ldrh	r3, [r7, #6]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	2e8ba2e9 	.word	0x2e8ba2e9

08005320 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
}
 8005324:	bf00      	nop
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
	...

08005330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005334:	4b06      	ldr	r3, [pc, #24]	@ (8005350 <SystemInit+0x20>)
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533a:	4a05      	ldr	r2, [pc, #20]	@ (8005350 <SystemInit+0x20>)
 800533c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005340:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005344:	bf00      	nop
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	e000ed00 	.word	0xe000ed00

08005354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8005354:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800538c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005358:	f7ff ffea 	bl	8005330 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800535c:	480c      	ldr	r0, [pc, #48]	@ (8005390 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800535e:	490d      	ldr	r1, [pc, #52]	@ (8005394 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005360:	4a0d      	ldr	r2, [pc, #52]	@ (8005398 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005364:	e002      	b.n	800536c <LoopCopyDataInit>

08005366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800536a:	3304      	adds	r3, #4

0800536c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800536c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800536e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005370:	d3f9      	bcc.n	8005366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005372:	4a0a      	ldr	r2, [pc, #40]	@ (800539c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005374:	4c0a      	ldr	r4, [pc, #40]	@ (80053a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005378:	e001      	b.n	800537e <LoopFillZerobss>

0800537a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800537a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800537c:	3204      	adds	r2, #4

0800537e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800537e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005380:	d3fb      	bcc.n	800537a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005382:	f003 fbdb 	bl	8008b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005386:	f7fe fe94 	bl	80040b2 <main>
  bx  lr    
 800538a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800538c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8005390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005394:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8005398:	0800a79c 	.word	0x0800a79c
  ldr r2, =_sbss
 800539c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80053a0:	20025e08 	.word	0x20025e08

080053a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053a4:	e7fe      	b.n	80053a4 <ADC_IRQHandler>
	...

080053a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80053ac:	4b0e      	ldr	r3, [pc, #56]	@ (80053e8 <HAL_Init+0x40>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a0d      	ldr	r2, [pc, #52]	@ (80053e8 <HAL_Init+0x40>)
 80053b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80053b8:	4b0b      	ldr	r3, [pc, #44]	@ (80053e8 <HAL_Init+0x40>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a0a      	ldr	r2, [pc, #40]	@ (80053e8 <HAL_Init+0x40>)
 80053be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053c4:	4b08      	ldr	r3, [pc, #32]	@ (80053e8 <HAL_Init+0x40>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a07      	ldr	r2, [pc, #28]	@ (80053e8 <HAL_Init+0x40>)
 80053ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053d0:	2003      	movs	r0, #3
 80053d2:	f000 f991 	bl	80056f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053d6:	2000      	movs	r0, #0
 80053d8:	f000 f808 	bl	80053ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053dc:	f7ff f9aa 	bl	8004734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40023c00 	.word	0x40023c00

080053ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80053f4:	4b12      	ldr	r3, [pc, #72]	@ (8005440 <HAL_InitTick+0x54>)
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	4b12      	ldr	r3, [pc, #72]	@ (8005444 <HAL_InitTick+0x58>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	4619      	mov	r1, r3
 80053fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005402:	fbb3 f3f1 	udiv	r3, r3, r1
 8005406:	fbb2 f3f3 	udiv	r3, r2, r3
 800540a:	4618      	mov	r0, r3
 800540c:	f000 f9b7 	bl	800577e <HAL_SYSTICK_Config>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e00e      	b.n	8005438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b0f      	cmp	r3, #15
 800541e:	d80a      	bhi.n	8005436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005420:	2200      	movs	r2, #0
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	f04f 30ff 	mov.w	r0, #4294967295
 8005428:	f000 f971 	bl	800570e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800542c:	4a06      	ldr	r2, [pc, #24]	@ (8005448 <HAL_InitTick+0x5c>)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	e000      	b.n	8005438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
}
 8005438:	4618      	mov	r0, r3
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	20000018 	.word	0x20000018
 8005444:	20000020 	.word	0x20000020
 8005448:	2000001c 	.word	0x2000001c

0800544c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005450:	4b06      	ldr	r3, [pc, #24]	@ (800546c <HAL_IncTick+0x20>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	461a      	mov	r2, r3
 8005456:	4b06      	ldr	r3, [pc, #24]	@ (8005470 <HAL_IncTick+0x24>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4413      	add	r3, r2
 800545c:	4a04      	ldr	r2, [pc, #16]	@ (8005470 <HAL_IncTick+0x24>)
 800545e:	6013      	str	r3, [r2, #0]
}
 8005460:	bf00      	nop
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	20000020 	.word	0x20000020
 8005470:	20025e04 	.word	0x20025e04

08005474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  return uwTick;
 8005478:	4b03      	ldr	r3, [pc, #12]	@ (8005488 <HAL_GetTick+0x14>)
 800547a:	681b      	ldr	r3, [r3, #0]
}
 800547c:	4618      	mov	r0, r3
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	20025e04 	.word	0x20025e04

0800548c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005494:	f7ff ffee 	bl	8005474 <HAL_GetTick>
 8005498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a4:	d005      	beq.n	80054b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054a6:	4b0a      	ldr	r3, [pc, #40]	@ (80054d0 <HAL_Delay+0x44>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4413      	add	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80054b2:	bf00      	nop
 80054b4:	f7ff ffde 	bl	8005474 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d8f7      	bhi.n	80054b4 <HAL_Delay+0x28>
  {
  }
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20000020 	.word	0x20000020

080054d4 <__NVIC_SetPriorityGrouping>:
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005518 <__NVIC_SetPriorityGrouping+0x44>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80054f0:	4013      	ands	r3, r2
 80054f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005506:	4a04      	ldr	r2, [pc, #16]	@ (8005518 <__NVIC_SetPriorityGrouping+0x44>)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	60d3      	str	r3, [r2, #12]
}
 800550c:	bf00      	nop
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	e000ed00 	.word	0xe000ed00

0800551c <__NVIC_GetPriorityGrouping>:
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005520:	4b04      	ldr	r3, [pc, #16]	@ (8005534 <__NVIC_GetPriorityGrouping+0x18>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	0a1b      	lsrs	r3, r3, #8
 8005526:	f003 0307 	and.w	r3, r3, #7
}
 800552a:	4618      	mov	r0, r3
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	e000ed00 	.word	0xe000ed00

08005538 <__NVIC_EnableIRQ>:
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	4603      	mov	r3, r0
 8005540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005546:	2b00      	cmp	r3, #0
 8005548:	db0b      	blt.n	8005562 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	f003 021f 	and.w	r2, r3, #31
 8005550:	4907      	ldr	r1, [pc, #28]	@ (8005570 <__NVIC_EnableIRQ+0x38>)
 8005552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	2001      	movs	r0, #1
 800555a:	fa00 f202 	lsl.w	r2, r0, r2
 800555e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	e000e100 	.word	0xe000e100

08005574 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800557e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005582:	2b00      	cmp	r3, #0
 8005584:	db12      	blt.n	80055ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	f003 021f 	and.w	r2, r3, #31
 800558c:	490a      	ldr	r1, [pc, #40]	@ (80055b8 <__NVIC_DisableIRQ+0x44>)
 800558e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005592:	095b      	lsrs	r3, r3, #5
 8005594:	2001      	movs	r0, #1
 8005596:	fa00 f202 	lsl.w	r2, r0, r2
 800559a:	3320      	adds	r3, #32
 800559c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80055a0:	f3bf 8f4f 	dsb	sy
}
 80055a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80055a6:	f3bf 8f6f 	isb	sy
}
 80055aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	e000e100 	.word	0xe000e100

080055bc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	4603      	mov	r3, r0
 80055c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	db0c      	blt.n	80055e8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055ce:	79fb      	ldrb	r3, [r7, #7]
 80055d0:	f003 021f 	and.w	r2, r3, #31
 80055d4:	4907      	ldr	r1, [pc, #28]	@ (80055f4 <__NVIC_ClearPendingIRQ+0x38>)
 80055d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055da:	095b      	lsrs	r3, r3, #5
 80055dc:	2001      	movs	r0, #1
 80055de:	fa00 f202 	lsl.w	r2, r0, r2
 80055e2:	3360      	adds	r3, #96	@ 0x60
 80055e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	e000e100 	.word	0xe000e100

080055f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	4603      	mov	r3, r0
 8005600:	6039      	str	r1, [r7, #0]
 8005602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005608:	2b00      	cmp	r3, #0
 800560a:	db0a      	blt.n	8005622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	b2da      	uxtb	r2, r3
 8005610:	490c      	ldr	r1, [pc, #48]	@ (8005644 <__NVIC_SetPriority+0x4c>)
 8005612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005616:	0112      	lsls	r2, r2, #4
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	440b      	add	r3, r1
 800561c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005620:	e00a      	b.n	8005638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	b2da      	uxtb	r2, r3
 8005626:	4908      	ldr	r1, [pc, #32]	@ (8005648 <__NVIC_SetPriority+0x50>)
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	3b04      	subs	r3, #4
 8005630:	0112      	lsls	r2, r2, #4
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	440b      	add	r3, r1
 8005636:	761a      	strb	r2, [r3, #24]
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	e000e100 	.word	0xe000e100
 8005648:	e000ed00 	.word	0xe000ed00

0800564c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800564c:	b480      	push	{r7}
 800564e:	b089      	sub	sp, #36	@ 0x24
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	f1c3 0307 	rsb	r3, r3, #7
 8005666:	2b04      	cmp	r3, #4
 8005668:	bf28      	it	cs
 800566a:	2304      	movcs	r3, #4
 800566c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	3304      	adds	r3, #4
 8005672:	2b06      	cmp	r3, #6
 8005674:	d902      	bls.n	800567c <NVIC_EncodePriority+0x30>
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	3b03      	subs	r3, #3
 800567a:	e000      	b.n	800567e <NVIC_EncodePriority+0x32>
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005680:	f04f 32ff 	mov.w	r2, #4294967295
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	fa02 f303 	lsl.w	r3, r2, r3
 800568a:	43da      	mvns	r2, r3
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	401a      	ands	r2, r3
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005694:	f04f 31ff 	mov.w	r1, #4294967295
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	fa01 f303 	lsl.w	r3, r1, r3
 800569e:	43d9      	mvns	r1, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056a4:	4313      	orrs	r3, r2
         );
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3724      	adds	r7, #36	@ 0x24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
	...

080056b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3b01      	subs	r3, #1
 80056c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056c4:	d301      	bcc.n	80056ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056c6:	2301      	movs	r3, #1
 80056c8:	e00f      	b.n	80056ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056ca:	4a0a      	ldr	r2, [pc, #40]	@ (80056f4 <SysTick_Config+0x40>)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056d2:	210f      	movs	r1, #15
 80056d4:	f04f 30ff 	mov.w	r0, #4294967295
 80056d8:	f7ff ff8e 	bl	80055f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056dc:	4b05      	ldr	r3, [pc, #20]	@ (80056f4 <SysTick_Config+0x40>)
 80056de:	2200      	movs	r2, #0
 80056e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056e2:	4b04      	ldr	r3, [pc, #16]	@ (80056f4 <SysTick_Config+0x40>)
 80056e4:	2207      	movs	r2, #7
 80056e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	e000e010 	.word	0xe000e010

080056f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff fee7 	bl	80054d4 <__NVIC_SetPriorityGrouping>
}
 8005706:	bf00      	nop
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800570e:	b580      	push	{r7, lr}
 8005710:	b086      	sub	sp, #24
 8005712:	af00      	add	r7, sp, #0
 8005714:	4603      	mov	r3, r0
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	607a      	str	r2, [r7, #4]
 800571a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800571c:	2300      	movs	r3, #0
 800571e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005720:	f7ff fefc 	bl	800551c <__NVIC_GetPriorityGrouping>
 8005724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	6978      	ldr	r0, [r7, #20]
 800572c:	f7ff ff8e 	bl	800564c <NVIC_EncodePriority>
 8005730:	4602      	mov	r2, r0
 8005732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005736:	4611      	mov	r1, r2
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff ff5d 	bl	80055f8 <__NVIC_SetPriority>
}
 800573e:	bf00      	nop
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	4603      	mov	r3, r0
 800574e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff feef 	bl	8005538 <__NVIC_EnableIRQ>
}
 800575a:	bf00      	nop
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	4603      	mov	r3, r0
 800576a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800576c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005770:	4618      	mov	r0, r3
 8005772:	f7ff feff 	bl	8005574 <__NVIC_DisableIRQ>
}
 8005776:	bf00      	nop
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b082      	sub	sp, #8
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7ff ff94 	bl	80056b4 <SysTick_Config>
 800578c:	4603      	mov	r3, r0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b082      	sub	sp, #8
 800579a:	af00      	add	r7, sp, #0
 800579c:	4603      	mov	r3, r0
 800579e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80057a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff ff09 	bl	80055bc <__NVIC_ClearPendingIRQ>
}
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 031f 	and.w	r3, r3, #31
 80057c6:	2201      	movs	r2, #1
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 80057ce:	4a04      	ldr	r2, [pc, #16]	@ (80057e0 <HAL_EXTI_ClearPending+0x2c>)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6153      	str	r3, [r2, #20]
}
 80057d4:	bf00      	nop
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	40013c00 	.word	0x40013c00

080057e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b089      	sub	sp, #36	@ 0x24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057fa:	2300      	movs	r3, #0
 80057fc:	61fb      	str	r3, [r7, #28]
 80057fe:	e177      	b.n	8005af0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005800:	2201      	movs	r2, #1
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	fa02 f303 	lsl.w	r3, r2, r3
 8005808:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4013      	ands	r3, r2
 8005812:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	429a      	cmp	r2, r3
 800581a:	f040 8166 	bne.w	8005aea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	2b01      	cmp	r3, #1
 8005828:	d005      	beq.n	8005836 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005832:	2b02      	cmp	r3, #2
 8005834:	d130      	bne.n	8005898 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	2203      	movs	r2, #3
 8005842:	fa02 f303 	lsl.w	r3, r2, r3
 8005846:	43db      	mvns	r3, r3
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	4013      	ands	r3, r2
 800584c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	4313      	orrs	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800586c:	2201      	movs	r2, #1
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	fa02 f303 	lsl.w	r3, r2, r3
 8005874:	43db      	mvns	r3, r3
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	4013      	ands	r3, r2
 800587a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	091b      	lsrs	r3, r3, #4
 8005882:	f003 0201 	and.w	r2, r3, #1
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	fa02 f303 	lsl.w	r3, r2, r3
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	4313      	orrs	r3, r2
 8005890:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 0303 	and.w	r3, r3, #3
 80058a0:	2b03      	cmp	r3, #3
 80058a2:	d017      	beq.n	80058d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	2203      	movs	r2, #3
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	43db      	mvns	r3, r3
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	4013      	ands	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f003 0303 	and.w	r3, r3, #3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d123      	bne.n	8005928 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	08da      	lsrs	r2, r3, #3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3208      	adds	r2, #8
 80058e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	220f      	movs	r2, #15
 80058f8:	fa02 f303 	lsl.w	r3, r2, r3
 80058fc:	43db      	mvns	r3, r3
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	4013      	ands	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	691a      	ldr	r2, [r3, #16]
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	fa02 f303 	lsl.w	r3, r2, r3
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	4313      	orrs	r3, r2
 8005918:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	08da      	lsrs	r2, r3, #3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3208      	adds	r2, #8
 8005922:	69b9      	ldr	r1, [r7, #24]
 8005924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	2203      	movs	r2, #3
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	43db      	mvns	r3, r3
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	4013      	ands	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f003 0203 	and.w	r2, r3, #3
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	4313      	orrs	r3, r2
 8005954:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 80c0 	beq.w	8005aea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	4b66      	ldr	r3, [pc, #408]	@ (8005b08 <HAL_GPIO_Init+0x324>)
 8005970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005972:	4a65      	ldr	r2, [pc, #404]	@ (8005b08 <HAL_GPIO_Init+0x324>)
 8005974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005978:	6453      	str	r3, [r2, #68]	@ 0x44
 800597a:	4b63      	ldr	r3, [pc, #396]	@ (8005b08 <HAL_GPIO_Init+0x324>)
 800597c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800597e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005986:	4a61      	ldr	r2, [pc, #388]	@ (8005b0c <HAL_GPIO_Init+0x328>)
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	089b      	lsrs	r3, r3, #2
 800598c:	3302      	adds	r3, #2
 800598e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	220f      	movs	r2, #15
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	43db      	mvns	r3, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4013      	ands	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a58      	ldr	r2, [pc, #352]	@ (8005b10 <HAL_GPIO_Init+0x32c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d037      	beq.n	8005a22 <HAL_GPIO_Init+0x23e>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a57      	ldr	r2, [pc, #348]	@ (8005b14 <HAL_GPIO_Init+0x330>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d031      	beq.n	8005a1e <HAL_GPIO_Init+0x23a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a56      	ldr	r2, [pc, #344]	@ (8005b18 <HAL_GPIO_Init+0x334>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d02b      	beq.n	8005a1a <HAL_GPIO_Init+0x236>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a55      	ldr	r2, [pc, #340]	@ (8005b1c <HAL_GPIO_Init+0x338>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d025      	beq.n	8005a16 <HAL_GPIO_Init+0x232>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a54      	ldr	r2, [pc, #336]	@ (8005b20 <HAL_GPIO_Init+0x33c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d01f      	beq.n	8005a12 <HAL_GPIO_Init+0x22e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a53      	ldr	r2, [pc, #332]	@ (8005b24 <HAL_GPIO_Init+0x340>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d019      	beq.n	8005a0e <HAL_GPIO_Init+0x22a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a52      	ldr	r2, [pc, #328]	@ (8005b28 <HAL_GPIO_Init+0x344>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d013      	beq.n	8005a0a <HAL_GPIO_Init+0x226>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a51      	ldr	r2, [pc, #324]	@ (8005b2c <HAL_GPIO_Init+0x348>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00d      	beq.n	8005a06 <HAL_GPIO_Init+0x222>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a50      	ldr	r2, [pc, #320]	@ (8005b30 <HAL_GPIO_Init+0x34c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d007      	beq.n	8005a02 <HAL_GPIO_Init+0x21e>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a4f      	ldr	r2, [pc, #316]	@ (8005b34 <HAL_GPIO_Init+0x350>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d101      	bne.n	80059fe <HAL_GPIO_Init+0x21a>
 80059fa:	2309      	movs	r3, #9
 80059fc:	e012      	b.n	8005a24 <HAL_GPIO_Init+0x240>
 80059fe:	230a      	movs	r3, #10
 8005a00:	e010      	b.n	8005a24 <HAL_GPIO_Init+0x240>
 8005a02:	2308      	movs	r3, #8
 8005a04:	e00e      	b.n	8005a24 <HAL_GPIO_Init+0x240>
 8005a06:	2307      	movs	r3, #7
 8005a08:	e00c      	b.n	8005a24 <HAL_GPIO_Init+0x240>
 8005a0a:	2306      	movs	r3, #6
 8005a0c:	e00a      	b.n	8005a24 <HAL_GPIO_Init+0x240>
 8005a0e:	2305      	movs	r3, #5
 8005a10:	e008      	b.n	8005a24 <HAL_GPIO_Init+0x240>
 8005a12:	2304      	movs	r3, #4
 8005a14:	e006      	b.n	8005a24 <HAL_GPIO_Init+0x240>
 8005a16:	2303      	movs	r3, #3
 8005a18:	e004      	b.n	8005a24 <HAL_GPIO_Init+0x240>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	e002      	b.n	8005a24 <HAL_GPIO_Init+0x240>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <HAL_GPIO_Init+0x240>
 8005a22:	2300      	movs	r3, #0
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	f002 0203 	and.w	r2, r2, #3
 8005a2a:	0092      	lsls	r2, r2, #2
 8005a2c:	4093      	lsls	r3, r2
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a34:	4935      	ldr	r1, [pc, #212]	@ (8005b0c <HAL_GPIO_Init+0x328>)
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	089b      	lsrs	r3, r3, #2
 8005a3a:	3302      	adds	r3, #2
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a42:	4b3d      	ldr	r3, [pc, #244]	@ (8005b38 <HAL_GPIO_Init+0x354>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	43db      	mvns	r3, r3
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a66:	4a34      	ldr	r2, [pc, #208]	@ (8005b38 <HAL_GPIO_Init+0x354>)
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a6c:	4b32      	ldr	r3, [pc, #200]	@ (8005b38 <HAL_GPIO_Init+0x354>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	43db      	mvns	r3, r3
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a90:	4a29      	ldr	r2, [pc, #164]	@ (8005b38 <HAL_GPIO_Init+0x354>)
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a96:	4b28      	ldr	r3, [pc, #160]	@ (8005b38 <HAL_GPIO_Init+0x354>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	43db      	mvns	r3, r3
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005aba:	4a1f      	ldr	r2, [pc, #124]	@ (8005b38 <HAL_GPIO_Init+0x354>)
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8005b38 <HAL_GPIO_Init+0x354>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	4013      	ands	r3, r2
 8005ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ae4:	4a14      	ldr	r2, [pc, #80]	@ (8005b38 <HAL_GPIO_Init+0x354>)
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	3301      	adds	r3, #1
 8005aee:	61fb      	str	r3, [r7, #28]
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	2b0f      	cmp	r3, #15
 8005af4:	f67f ae84 	bls.w	8005800 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005af8:	bf00      	nop
 8005afa:	bf00      	nop
 8005afc:	3724      	adds	r7, #36	@ 0x24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	40013800 	.word	0x40013800
 8005b10:	40020000 	.word	0x40020000
 8005b14:	40020400 	.word	0x40020400
 8005b18:	40020800 	.word	0x40020800
 8005b1c:	40020c00 	.word	0x40020c00
 8005b20:	40021000 	.word	0x40021000
 8005b24:	40021400 	.word	0x40021400
 8005b28:	40021800 	.word	0x40021800
 8005b2c:	40021c00 	.word	0x40021c00
 8005b30:	40022000 	.word	0x40022000
 8005b34:	40022400 	.word	0x40022400
 8005b38:	40013c00 	.word	0x40013c00

08005b3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b52:	2300      	movs	r3, #0
 8005b54:	617b      	str	r3, [r7, #20]
 8005b56:	e0d9      	b.n	8005d0c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b58:	2201      	movs	r2, #1
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b60:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	4013      	ands	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	f040 80c9 	bne.w	8005d06 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005b74:	4a6b      	ldr	r2, [pc, #428]	@ (8005d24 <HAL_GPIO_DeInit+0x1e8>)
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	089b      	lsrs	r3, r3, #2
 8005b7a:	3302      	adds	r3, #2
 8005b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b80:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f003 0303 	and.w	r3, r3, #3
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	220f      	movs	r2, #15
 8005b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	4013      	ands	r3, r2
 8005b94:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a63      	ldr	r2, [pc, #396]	@ (8005d28 <HAL_GPIO_DeInit+0x1ec>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d037      	beq.n	8005c0e <HAL_GPIO_DeInit+0xd2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a62      	ldr	r2, [pc, #392]	@ (8005d2c <HAL_GPIO_DeInit+0x1f0>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d031      	beq.n	8005c0a <HAL_GPIO_DeInit+0xce>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a61      	ldr	r2, [pc, #388]	@ (8005d30 <HAL_GPIO_DeInit+0x1f4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d02b      	beq.n	8005c06 <HAL_GPIO_DeInit+0xca>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a60      	ldr	r2, [pc, #384]	@ (8005d34 <HAL_GPIO_DeInit+0x1f8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d025      	beq.n	8005c02 <HAL_GPIO_DeInit+0xc6>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a5f      	ldr	r2, [pc, #380]	@ (8005d38 <HAL_GPIO_DeInit+0x1fc>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d01f      	beq.n	8005bfe <HAL_GPIO_DeInit+0xc2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a5e      	ldr	r2, [pc, #376]	@ (8005d3c <HAL_GPIO_DeInit+0x200>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d019      	beq.n	8005bfa <HAL_GPIO_DeInit+0xbe>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a5d      	ldr	r2, [pc, #372]	@ (8005d40 <HAL_GPIO_DeInit+0x204>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d013      	beq.n	8005bf6 <HAL_GPIO_DeInit+0xba>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a5c      	ldr	r2, [pc, #368]	@ (8005d44 <HAL_GPIO_DeInit+0x208>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00d      	beq.n	8005bf2 <HAL_GPIO_DeInit+0xb6>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a5b      	ldr	r2, [pc, #364]	@ (8005d48 <HAL_GPIO_DeInit+0x20c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d007      	beq.n	8005bee <HAL_GPIO_DeInit+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a5a      	ldr	r2, [pc, #360]	@ (8005d4c <HAL_GPIO_DeInit+0x210>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d101      	bne.n	8005bea <HAL_GPIO_DeInit+0xae>
 8005be6:	2309      	movs	r3, #9
 8005be8:	e012      	b.n	8005c10 <HAL_GPIO_DeInit+0xd4>
 8005bea:	230a      	movs	r3, #10
 8005bec:	e010      	b.n	8005c10 <HAL_GPIO_DeInit+0xd4>
 8005bee:	2308      	movs	r3, #8
 8005bf0:	e00e      	b.n	8005c10 <HAL_GPIO_DeInit+0xd4>
 8005bf2:	2307      	movs	r3, #7
 8005bf4:	e00c      	b.n	8005c10 <HAL_GPIO_DeInit+0xd4>
 8005bf6:	2306      	movs	r3, #6
 8005bf8:	e00a      	b.n	8005c10 <HAL_GPIO_DeInit+0xd4>
 8005bfa:	2305      	movs	r3, #5
 8005bfc:	e008      	b.n	8005c10 <HAL_GPIO_DeInit+0xd4>
 8005bfe:	2304      	movs	r3, #4
 8005c00:	e006      	b.n	8005c10 <HAL_GPIO_DeInit+0xd4>
 8005c02:	2303      	movs	r3, #3
 8005c04:	e004      	b.n	8005c10 <HAL_GPIO_DeInit+0xd4>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e002      	b.n	8005c10 <HAL_GPIO_DeInit+0xd4>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <HAL_GPIO_DeInit+0xd4>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	f002 0203 	and.w	r2, r2, #3
 8005c16:	0092      	lsls	r2, r2, #2
 8005c18:	4093      	lsls	r3, r2
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d132      	bne.n	8005c86 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005c20:	4b4b      	ldr	r3, [pc, #300]	@ (8005d50 <HAL_GPIO_DeInit+0x214>)
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	43db      	mvns	r3, r3
 8005c28:	4949      	ldr	r1, [pc, #292]	@ (8005d50 <HAL_GPIO_DeInit+0x214>)
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005c2e:	4b48      	ldr	r3, [pc, #288]	@ (8005d50 <HAL_GPIO_DeInit+0x214>)
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	43db      	mvns	r3, r3
 8005c36:	4946      	ldr	r1, [pc, #280]	@ (8005d50 <HAL_GPIO_DeInit+0x214>)
 8005c38:	4013      	ands	r3, r2
 8005c3a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005c3c:	4b44      	ldr	r3, [pc, #272]	@ (8005d50 <HAL_GPIO_DeInit+0x214>)
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	43db      	mvns	r3, r3
 8005c44:	4942      	ldr	r1, [pc, #264]	@ (8005d50 <HAL_GPIO_DeInit+0x214>)
 8005c46:	4013      	ands	r3, r2
 8005c48:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005c4a:	4b41      	ldr	r3, [pc, #260]	@ (8005d50 <HAL_GPIO_DeInit+0x214>)
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	43db      	mvns	r3, r3
 8005c52:	493f      	ldr	r1, [pc, #252]	@ (8005d50 <HAL_GPIO_DeInit+0x214>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	220f      	movs	r2, #15
 8005c62:	fa02 f303 	lsl.w	r3, r2, r3
 8005c66:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005c68:	4a2e      	ldr	r2, [pc, #184]	@ (8005d24 <HAL_GPIO_DeInit+0x1e8>)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	089b      	lsrs	r3, r3, #2
 8005c6e:	3302      	adds	r3, #2
 8005c70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	43da      	mvns	r2, r3
 8005c78:	482a      	ldr	r0, [pc, #168]	@ (8005d24 <HAL_GPIO_DeInit+0x1e8>)
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	089b      	lsrs	r3, r3, #2
 8005c7e:	400a      	ands	r2, r1
 8005c80:	3302      	adds	r3, #2
 8005c82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	2103      	movs	r1, #3
 8005c90:	fa01 f303 	lsl.w	r3, r1, r3
 8005c94:	43db      	mvns	r3, r3
 8005c96:	401a      	ands	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	08da      	lsrs	r2, r3, #3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3208      	adds	r2, #8
 8005ca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	220f      	movs	r2, #15
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	43db      	mvns	r3, r3
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	08d2      	lsrs	r2, r2, #3
 8005cbc:	4019      	ands	r1, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	3208      	adds	r2, #8
 8005cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	2103      	movs	r1, #3
 8005cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	401a      	ands	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	401a      	ands	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	2103      	movs	r1, #3
 8005cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8005cfe:	43db      	mvns	r3, r3
 8005d00:	401a      	ands	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2b0f      	cmp	r3, #15
 8005d10:	f67f af22 	bls.w	8005b58 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005d14:	bf00      	nop
 8005d16:	bf00      	nop
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40013800 	.word	0x40013800
 8005d28:	40020000 	.word	0x40020000
 8005d2c:	40020400 	.word	0x40020400
 8005d30:	40020800 	.word	0x40020800
 8005d34:	40020c00 	.word	0x40020c00
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	40021400 	.word	0x40021400
 8005d40:	40021800 	.word	0x40021800
 8005d44:	40021c00 	.word	0x40021c00
 8005d48:	40022000 	.word	0x40022000
 8005d4c:	40022400 	.word	0x40022400
 8005d50:	40013c00 	.word	0x40013c00

08005d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	807b      	strh	r3, [r7, #2]
 8005d60:	4613      	mov	r3, r2
 8005d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d64:	787b      	ldrb	r3, [r7, #1]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d6a:	887a      	ldrh	r2, [r7, #2]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d70:	e003      	b.n	8005d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d72:	887b      	ldrh	r3, [r7, #2]
 8005d74:	041a      	lsls	r2, r3, #16
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	619a      	str	r2, [r3, #24]
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
	...

08005d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e12b      	b.n	8005ff2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d106      	bne.n	8005db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7fe fce8 	bl	8004784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2224      	movs	r2, #36	@ 0x24
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0201 	bic.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005dda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005dea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005dec:	f001 ff82 	bl	8007cf4 <HAL_RCC_GetPCLK1Freq>
 8005df0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	4a81      	ldr	r2, [pc, #516]	@ (8005ffc <HAL_I2C_Init+0x274>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d807      	bhi.n	8005e0c <HAL_I2C_Init+0x84>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4a80      	ldr	r2, [pc, #512]	@ (8006000 <HAL_I2C_Init+0x278>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	bf94      	ite	ls
 8005e04:	2301      	movls	r3, #1
 8005e06:	2300      	movhi	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	e006      	b.n	8005e1a <HAL_I2C_Init+0x92>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4a7d      	ldr	r2, [pc, #500]	@ (8006004 <HAL_I2C_Init+0x27c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	bf94      	ite	ls
 8005e14:	2301      	movls	r3, #1
 8005e16:	2300      	movhi	r3, #0
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e0e7      	b.n	8005ff2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4a78      	ldr	r2, [pc, #480]	@ (8006008 <HAL_I2C_Init+0x280>)
 8005e26:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2a:	0c9b      	lsrs	r3, r3, #18
 8005e2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	4a6a      	ldr	r2, [pc, #424]	@ (8005ffc <HAL_I2C_Init+0x274>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d802      	bhi.n	8005e5c <HAL_I2C_Init+0xd4>
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	e009      	b.n	8005e70 <HAL_I2C_Init+0xe8>
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005e62:	fb02 f303 	mul.w	r3, r2, r3
 8005e66:	4a69      	ldr	r2, [pc, #420]	@ (800600c <HAL_I2C_Init+0x284>)
 8005e68:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6c:	099b      	lsrs	r3, r3, #6
 8005e6e:	3301      	adds	r3, #1
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	430b      	orrs	r3, r1
 8005e76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005e82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	495c      	ldr	r1, [pc, #368]	@ (8005ffc <HAL_I2C_Init+0x274>)
 8005e8c:	428b      	cmp	r3, r1
 8005e8e:	d819      	bhi.n	8005ec4 <HAL_I2C_Init+0x13c>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	1e59      	subs	r1, r3, #1
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e9e:	1c59      	adds	r1, r3, #1
 8005ea0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005ea4:	400b      	ands	r3, r1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <HAL_I2C_Init+0x138>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	1e59      	subs	r1, r3, #1
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005eb8:	3301      	adds	r3, #1
 8005eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ebe:	e051      	b.n	8005f64 <HAL_I2C_Init+0x1dc>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	e04f      	b.n	8005f64 <HAL_I2C_Init+0x1dc>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d111      	bne.n	8005ef0 <HAL_I2C_Init+0x168>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	1e58      	subs	r0, r3, #1
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6859      	ldr	r1, [r3, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	440b      	add	r3, r1
 8005eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ede:	3301      	adds	r3, #1
 8005ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	bf0c      	ite	eq
 8005ee8:	2301      	moveq	r3, #1
 8005eea:	2300      	movne	r3, #0
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	e012      	b.n	8005f16 <HAL_I2C_Init+0x18e>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	1e58      	subs	r0, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6859      	ldr	r1, [r3, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	440b      	add	r3, r1
 8005efe:	0099      	lsls	r1, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f06:	3301      	adds	r3, #1
 8005f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	bf0c      	ite	eq
 8005f10:	2301      	moveq	r3, #1
 8005f12:	2300      	movne	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <HAL_I2C_Init+0x196>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e022      	b.n	8005f64 <HAL_I2C_Init+0x1dc>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10e      	bne.n	8005f44 <HAL_I2C_Init+0x1bc>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	1e58      	subs	r0, r3, #1
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6859      	ldr	r1, [r3, #4]
 8005f2e:	460b      	mov	r3, r1
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	440b      	add	r3, r1
 8005f34:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f38:	3301      	adds	r3, #1
 8005f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f42:	e00f      	b.n	8005f64 <HAL_I2C_Init+0x1dc>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	1e58      	subs	r0, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6859      	ldr	r1, [r3, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	440b      	add	r3, r1
 8005f52:	0099      	lsls	r1, r3, #2
 8005f54:	440b      	add	r3, r1
 8005f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f64:	6879      	ldr	r1, [r7, #4]
 8005f66:	6809      	ldr	r1, [r1, #0]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69da      	ldr	r2, [r3, #28]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005f92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	6911      	ldr	r1, [r2, #16]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	68d2      	ldr	r2, [r2, #12]
 8005f9e:	4311      	orrs	r1, r2
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6812      	ldr	r2, [r2, #0]
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	695a      	ldr	r2, [r3, #20]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0201 	orr.w	r2, r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	000186a0 	.word	0x000186a0
 8006000:	001e847f 	.word	0x001e847f
 8006004:	003d08ff 	.word	0x003d08ff
 8006008:	431bde83 	.word	0x431bde83
 800600c:	10624dd3 	.word	0x10624dd3

08006010 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af02      	add	r7, sp, #8
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	4608      	mov	r0, r1
 800601a:	4611      	mov	r1, r2
 800601c:	461a      	mov	r2, r3
 800601e:	4603      	mov	r3, r0
 8006020:	817b      	strh	r3, [r7, #10]
 8006022:	460b      	mov	r3, r1
 8006024:	813b      	strh	r3, [r7, #8]
 8006026:	4613      	mov	r3, r2
 8006028:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800602a:	f7ff fa23 	bl	8005474 <HAL_GetTick>
 800602e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b20      	cmp	r3, #32
 800603a:	f040 80d9 	bne.w	80061f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	2319      	movs	r3, #25
 8006044:	2201      	movs	r2, #1
 8006046:	496d      	ldr	r1, [pc, #436]	@ (80061fc <HAL_I2C_Mem_Write+0x1ec>)
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 fc8b 	bl	8006964 <I2C_WaitOnFlagUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006054:	2302      	movs	r3, #2
 8006056:	e0cc      	b.n	80061f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800605e:	2b01      	cmp	r3, #1
 8006060:	d101      	bne.n	8006066 <HAL_I2C_Mem_Write+0x56>
 8006062:	2302      	movs	r3, #2
 8006064:	e0c5      	b.n	80061f2 <HAL_I2C_Mem_Write+0x1e2>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b01      	cmp	r3, #1
 800607a:	d007      	beq.n	800608c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0201 	orr.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800609a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2221      	movs	r2, #33	@ 0x21
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2240      	movs	r2, #64	@ 0x40
 80060a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6a3a      	ldr	r2, [r7, #32]
 80060b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80060bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	4a4d      	ldr	r2, [pc, #308]	@ (8006200 <HAL_I2C_Mem_Write+0x1f0>)
 80060cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060ce:	88f8      	ldrh	r0, [r7, #6]
 80060d0:	893a      	ldrh	r2, [r7, #8]
 80060d2:	8979      	ldrh	r1, [r7, #10]
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	9301      	str	r3, [sp, #4]
 80060d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	4603      	mov	r3, r0
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 fac2 	bl	8006668 <I2C_RequestMemoryWrite>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d052      	beq.n	8006190 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e081      	b.n	80061f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 fd50 	bl	8006b98 <I2C_WaitOnTXEFlagUntilTimeout>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00d      	beq.n	800611a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006102:	2b04      	cmp	r3, #4
 8006104:	d107      	bne.n	8006116 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006114:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e06b      	b.n	80061f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611e:	781a      	ldrb	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006134:	3b01      	subs	r3, #1
 8006136:	b29a      	uxth	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b04      	cmp	r3, #4
 8006156:	d11b      	bne.n	8006190 <HAL_I2C_Mem_Write+0x180>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800615c:	2b00      	cmp	r3, #0
 800615e:	d017      	beq.n	8006190 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006164:	781a      	ldrb	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800617a:	3b01      	subs	r3, #1
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006186:	b29b      	uxth	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1aa      	bne.n	80060ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 fd43 	bl	8006c28 <I2C_WaitOnBTFFlagUntilTimeout>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00d      	beq.n	80061c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d107      	bne.n	80061c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e016      	b.n	80061f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80061ec:	2300      	movs	r3, #0
 80061ee:	e000      	b.n	80061f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80061f0:	2302      	movs	r3, #2
  }
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	00100002 	.word	0x00100002
 8006200:	ffff0000 	.word	0xffff0000

08006204 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08c      	sub	sp, #48	@ 0x30
 8006208:	af02      	add	r7, sp, #8
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	4608      	mov	r0, r1
 800620e:	4611      	mov	r1, r2
 8006210:	461a      	mov	r2, r3
 8006212:	4603      	mov	r3, r0
 8006214:	817b      	strh	r3, [r7, #10]
 8006216:	460b      	mov	r3, r1
 8006218:	813b      	strh	r3, [r7, #8]
 800621a:	4613      	mov	r3, r2
 800621c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800621e:	f7ff f929 	bl	8005474 <HAL_GetTick>
 8006222:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b20      	cmp	r3, #32
 800622e:	f040 8214 	bne.w	800665a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	2319      	movs	r3, #25
 8006238:	2201      	movs	r2, #1
 800623a:	497b      	ldr	r1, [pc, #492]	@ (8006428 <HAL_I2C_Mem_Read+0x224>)
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 fb91 	bl	8006964 <I2C_WaitOnFlagUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006248:	2302      	movs	r3, #2
 800624a:	e207      	b.n	800665c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_I2C_Mem_Read+0x56>
 8006256:	2302      	movs	r3, #2
 8006258:	e200      	b.n	800665c <HAL_I2C_Mem_Read+0x458>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b01      	cmp	r3, #1
 800626e:	d007      	beq.n	8006280 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800628e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2222      	movs	r2, #34	@ 0x22
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2240      	movs	r2, #64	@ 0x40
 800629c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80062b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4a5b      	ldr	r2, [pc, #364]	@ (800642c <HAL_I2C_Mem_Read+0x228>)
 80062c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062c2:	88f8      	ldrh	r0, [r7, #6]
 80062c4:	893a      	ldrh	r2, [r7, #8]
 80062c6:	8979      	ldrh	r1, [r7, #10]
 80062c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ca:	9301      	str	r3, [sp, #4]
 80062cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	4603      	mov	r3, r0
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 fa5e 	bl	8006794 <I2C_RequestMemoryRead>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e1bc      	b.n	800665c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d113      	bne.n	8006312 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ea:	2300      	movs	r3, #0
 80062ec:	623b      	str	r3, [r7, #32]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	623b      	str	r3, [r7, #32]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	623b      	str	r3, [r7, #32]
 80062fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	e190      	b.n	8006634 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006316:	2b01      	cmp	r3, #1
 8006318:	d11b      	bne.n	8006352 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006328:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800632a:	2300      	movs	r3, #0
 800632c:	61fb      	str	r3, [r7, #28]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	61fb      	str	r3, [r7, #28]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	61fb      	str	r3, [r7, #28]
 800633e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	e170      	b.n	8006634 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006356:	2b02      	cmp	r3, #2
 8006358:	d11b      	bne.n	8006392 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006368:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006378:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800637a:	2300      	movs	r3, #0
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	61bb      	str	r3, [r7, #24]
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	e150      	b.n	8006634 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006392:	2300      	movs	r3, #0
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80063a8:	e144      	b.n	8006634 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	f200 80f1 	bhi.w	8006596 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d123      	bne.n	8006404 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 fc79 	bl	8006cb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e145      	b.n	800665c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691a      	ldr	r2, [r3, #16]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006402:	e117      	b.n	8006634 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006408:	2b02      	cmp	r3, #2
 800640a:	d14e      	bne.n	80064aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800640c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006412:	2200      	movs	r2, #0
 8006414:	4906      	ldr	r1, [pc, #24]	@ (8006430 <HAL_I2C_Mem_Read+0x22c>)
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 faa4 	bl	8006964 <I2C_WaitOnFlagUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d008      	beq.n	8006434 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e11a      	b.n	800665c <HAL_I2C_Mem_Read+0x458>
 8006426:	bf00      	nop
 8006428:	00100002 	.word	0x00100002
 800642c:	ffff0000 	.word	0xffff0000
 8006430:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006442:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	691a      	ldr	r2, [r3, #16]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644e:	b2d2      	uxtb	r2, r2
 8006450:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006456:	1c5a      	adds	r2, r3, #1
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800646c:	b29b      	uxth	r3, r3
 800646e:	3b01      	subs	r3, #1
 8006470:	b29a      	uxth	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006480:	b2d2      	uxtb	r2, r2
 8006482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006492:	3b01      	subs	r3, #1
 8006494:	b29a      	uxth	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800649e:	b29b      	uxth	r3, r3
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80064a8:	e0c4      	b.n	8006634 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b0:	2200      	movs	r2, #0
 80064b2:	496c      	ldr	r1, [pc, #432]	@ (8006664 <HAL_I2C_Mem_Read+0x460>)
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fa55 	bl	8006964 <I2C_WaitOnFlagUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e0cb      	b.n	800665c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691a      	ldr	r2, [r3, #16]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650c:	2200      	movs	r2, #0
 800650e:	4955      	ldr	r1, [pc, #340]	@ (8006664 <HAL_I2C_Mem_Read+0x460>)
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 fa27 	bl	8006964 <I2C_WaitOnFlagUntilTimeout>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e09d      	b.n	800665c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800652e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691a      	ldr	r2, [r3, #16]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800653a:	b2d2      	uxtb	r2, r2
 800653c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	691a      	ldr	r2, [r3, #16]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656c:	b2d2      	uxtb	r2, r2
 800656e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800657e:	3b01      	subs	r3, #1
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800658a:	b29b      	uxth	r3, r3
 800658c:	3b01      	subs	r3, #1
 800658e:	b29a      	uxth	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006594:	e04e      	b.n	8006634 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006598:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 fb8c 	bl	8006cb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e058      	b.n	800665c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	691a      	ldr	r2, [r3, #16]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	3b01      	subs	r3, #1
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	f003 0304 	and.w	r3, r3, #4
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d124      	bne.n	8006634 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d107      	bne.n	8006602 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006600:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	691a      	ldr	r2, [r3, #16]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800661e:	3b01      	subs	r3, #1
 8006620:	b29a      	uxth	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800662a:	b29b      	uxth	r3, r3
 800662c:	3b01      	subs	r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006638:	2b00      	cmp	r3, #0
 800663a:	f47f aeb6 	bne.w	80063aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2220      	movs	r2, #32
 8006642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	e000      	b.n	800665c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800665a:	2302      	movs	r3, #2
  }
}
 800665c:	4618      	mov	r0, r3
 800665e:	3728      	adds	r7, #40	@ 0x28
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	00010004 	.word	0x00010004

08006668 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b088      	sub	sp, #32
 800666c:	af02      	add	r7, sp, #8
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	4608      	mov	r0, r1
 8006672:	4611      	mov	r1, r2
 8006674:	461a      	mov	r2, r3
 8006676:	4603      	mov	r3, r0
 8006678:	817b      	strh	r3, [r7, #10]
 800667a:	460b      	mov	r3, r1
 800667c:	813b      	strh	r3, [r7, #8]
 800667e:	4613      	mov	r3, r2
 8006680:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006690:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	2200      	movs	r2, #0
 800669a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f000 f960 	bl	8006964 <I2C_WaitOnFlagUntilTimeout>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00d      	beq.n	80066c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066b8:	d103      	bne.n	80066c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e05f      	b.n	8006786 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066c6:	897b      	ldrh	r3, [r7, #10]
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	461a      	mov	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80066d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d8:	6a3a      	ldr	r2, [r7, #32]
 80066da:	492d      	ldr	r1, [pc, #180]	@ (8006790 <I2C_RequestMemoryWrite+0x128>)
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 f9bb 	bl	8006a58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d001      	beq.n	80066ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e04c      	b.n	8006786 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	617b      	str	r3, [r7, #20]
 8006700:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006704:	6a39      	ldr	r1, [r7, #32]
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 fa46 	bl	8006b98 <I2C_WaitOnTXEFlagUntilTimeout>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00d      	beq.n	800672e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006716:	2b04      	cmp	r3, #4
 8006718:	d107      	bne.n	800672a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006728:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e02b      	b.n	8006786 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d105      	bne.n	8006740 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006734:	893b      	ldrh	r3, [r7, #8]
 8006736:	b2da      	uxtb	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	611a      	str	r2, [r3, #16]
 800673e:	e021      	b.n	8006784 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006740:	893b      	ldrh	r3, [r7, #8]
 8006742:	0a1b      	lsrs	r3, r3, #8
 8006744:	b29b      	uxth	r3, r3
 8006746:	b2da      	uxtb	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800674e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006750:	6a39      	ldr	r1, [r7, #32]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 fa20 	bl	8006b98 <I2C_WaitOnTXEFlagUntilTimeout>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00d      	beq.n	800677a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006762:	2b04      	cmp	r3, #4
 8006764:	d107      	bne.n	8006776 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006774:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e005      	b.n	8006786 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800677a:	893b      	ldrh	r3, [r7, #8]
 800677c:	b2da      	uxtb	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	00010002 	.word	0x00010002

08006794 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af02      	add	r7, sp, #8
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	4608      	mov	r0, r1
 800679e:	4611      	mov	r1, r2
 80067a0:	461a      	mov	r2, r3
 80067a2:	4603      	mov	r3, r0
 80067a4:	817b      	strh	r3, [r7, #10]
 80067a6:	460b      	mov	r3, r1
 80067a8:	813b      	strh	r3, [r7, #8]
 80067aa:	4613      	mov	r3, r2
 80067ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 f8c2 	bl	8006964 <I2C_WaitOnFlagUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00d      	beq.n	8006802 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067f4:	d103      	bne.n	80067fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e0aa      	b.n	8006958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006802:	897b      	ldrh	r3, [r7, #10]
 8006804:	b2db      	uxtb	r3, r3
 8006806:	461a      	mov	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006810:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	6a3a      	ldr	r2, [r7, #32]
 8006816:	4952      	ldr	r1, [pc, #328]	@ (8006960 <I2C_RequestMemoryRead+0x1cc>)
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 f91d 	bl	8006a58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e097      	b.n	8006958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006828:	2300      	movs	r3, #0
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	617b      	str	r3, [r7, #20]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800683e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006840:	6a39      	ldr	r1, [r7, #32]
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f000 f9a8 	bl	8006b98 <I2C_WaitOnTXEFlagUntilTimeout>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00d      	beq.n	800686a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006852:	2b04      	cmp	r3, #4
 8006854:	d107      	bne.n	8006866 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006864:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e076      	b.n	8006958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800686a:	88fb      	ldrh	r3, [r7, #6]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d105      	bne.n	800687c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006870:	893b      	ldrh	r3, [r7, #8]
 8006872:	b2da      	uxtb	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	611a      	str	r2, [r3, #16]
 800687a:	e021      	b.n	80068c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800687c:	893b      	ldrh	r3, [r7, #8]
 800687e:	0a1b      	lsrs	r3, r3, #8
 8006880:	b29b      	uxth	r3, r3
 8006882:	b2da      	uxtb	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800688a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800688c:	6a39      	ldr	r1, [r7, #32]
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 f982 	bl	8006b98 <I2C_WaitOnTXEFlagUntilTimeout>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00d      	beq.n	80068b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d107      	bne.n	80068b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e050      	b.n	8006958 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068b6:	893b      	ldrh	r3, [r7, #8]
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068c2:	6a39      	ldr	r1, [r7, #32]
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f967 	bl	8006b98 <I2C_WaitOnTXEFlagUntilTimeout>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00d      	beq.n	80068ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d107      	bne.n	80068e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e035      	b.n	8006958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	2200      	movs	r2, #0
 8006904:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 f82b 	bl	8006964 <I2C_WaitOnFlagUntilTimeout>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00d      	beq.n	8006930 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800691e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006922:	d103      	bne.n	800692c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800692a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e013      	b.n	8006958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006930:	897b      	ldrh	r3, [r7, #10]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	f043 0301 	orr.w	r3, r3, #1
 8006938:	b2da      	uxtb	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006942:	6a3a      	ldr	r2, [r7, #32]
 8006944:	4906      	ldr	r1, [pc, #24]	@ (8006960 <I2C_RequestMemoryRead+0x1cc>)
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 f886 	bl	8006a58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e000      	b.n	8006958 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	00010002 	.word	0x00010002

08006964 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	603b      	str	r3, [r7, #0]
 8006970:	4613      	mov	r3, r2
 8006972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006974:	e048      	b.n	8006a08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697c:	d044      	beq.n	8006a08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800697e:	f7fe fd79 	bl	8005474 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	429a      	cmp	r2, r3
 800698c:	d302      	bcc.n	8006994 <I2C_WaitOnFlagUntilTimeout+0x30>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d139      	bne.n	8006a08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	0c1b      	lsrs	r3, r3, #16
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b01      	cmp	r3, #1
 800699c:	d10d      	bne.n	80069ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	43da      	mvns	r2, r3
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	4013      	ands	r3, r2
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	bf0c      	ite	eq
 80069b0:	2301      	moveq	r3, #1
 80069b2:	2300      	movne	r3, #0
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	461a      	mov	r2, r3
 80069b8:	e00c      	b.n	80069d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	43da      	mvns	r2, r3
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	4013      	ands	r3, r2
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	bf0c      	ite	eq
 80069cc:	2301      	moveq	r3, #1
 80069ce:	2300      	movne	r3, #0
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	461a      	mov	r2, r3
 80069d4:	79fb      	ldrb	r3, [r7, #7]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d116      	bne.n	8006a08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f4:	f043 0220 	orr.w	r2, r3, #32
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e023      	b.n	8006a50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	0c1b      	lsrs	r3, r3, #16
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d10d      	bne.n	8006a2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	43da      	mvns	r2, r3
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	bf0c      	ite	eq
 8006a24:	2301      	moveq	r3, #1
 8006a26:	2300      	movne	r3, #0
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	e00c      	b.n	8006a48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	43da      	mvns	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	bf0c      	ite	eq
 8006a40:	2301      	moveq	r3, #1
 8006a42:	2300      	movne	r3, #0
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	461a      	mov	r2, r3
 8006a48:	79fb      	ldrb	r3, [r7, #7]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d093      	beq.n	8006976 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a66:	e071      	b.n	8006b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a76:	d123      	bne.n	8006ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aac:	f043 0204 	orr.w	r2, r3, #4
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e067      	b.n	8006b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac6:	d041      	beq.n	8006b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ac8:	f7fe fcd4 	bl	8005474 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d302      	bcc.n	8006ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d136      	bne.n	8006b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	0c1b      	lsrs	r3, r3, #16
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d10c      	bne.n	8006b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	43da      	mvns	r2, r3
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	4013      	ands	r3, r2
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	bf14      	ite	ne
 8006afa:	2301      	movne	r3, #1
 8006afc:	2300      	moveq	r3, #0
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	e00b      	b.n	8006b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	43da      	mvns	r2, r3
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	bf14      	ite	ne
 8006b14:	2301      	movne	r3, #1
 8006b16:	2300      	moveq	r3, #0
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d016      	beq.n	8006b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b38:	f043 0220 	orr.w	r2, r3, #32
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e021      	b.n	8006b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	0c1b      	lsrs	r3, r3, #16
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d10c      	bne.n	8006b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	43da      	mvns	r2, r3
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	4013      	ands	r3, r2
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	bf14      	ite	ne
 8006b68:	2301      	movne	r3, #1
 8006b6a:	2300      	moveq	r3, #0
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	e00b      	b.n	8006b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	43da      	mvns	r2, r3
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	bf14      	ite	ne
 8006b82:	2301      	movne	r3, #1
 8006b84:	2300      	moveq	r3, #0
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f47f af6d 	bne.w	8006a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ba4:	e034      	b.n	8006c10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 f8e3 	bl	8006d72 <I2C_IsAcknowledgeFailed>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e034      	b.n	8006c20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbc:	d028      	beq.n	8006c10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bbe:	f7fe fc59 	bl	8005474 <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d302      	bcc.n	8006bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d11d      	bne.n	8006c10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bde:	2b80      	cmp	r3, #128	@ 0x80
 8006be0:	d016      	beq.n	8006c10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2220      	movs	r2, #32
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bfc:	f043 0220 	orr.w	r2, r3, #32
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e007      	b.n	8006c20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c1a:	2b80      	cmp	r3, #128	@ 0x80
 8006c1c:	d1c3      	bne.n	8006ba6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c34:	e034      	b.n	8006ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f000 f89b 	bl	8006d72 <I2C_IsAcknowledgeFailed>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e034      	b.n	8006cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4c:	d028      	beq.n	8006ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c4e:	f7fe fc11 	bl	8005474 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d302      	bcc.n	8006c64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d11d      	bne.n	8006ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	f003 0304 	and.w	r3, r3, #4
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d016      	beq.n	8006ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c8c:	f043 0220 	orr.w	r2, r3, #32
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e007      	b.n	8006cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	f003 0304 	and.w	r3, r3, #4
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	d1c3      	bne.n	8006c36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006cc4:	e049      	b.n	8006d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	f003 0310 	and.w	r3, r3, #16
 8006cd0:	2b10      	cmp	r3, #16
 8006cd2:	d119      	bne.n	8006d08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f06f 0210 	mvn.w	r2, #16
 8006cdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e030      	b.n	8006d6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d08:	f7fe fbb4 	bl	8005474 <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d302      	bcc.n	8006d1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d11d      	bne.n	8006d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d28:	2b40      	cmp	r3, #64	@ 0x40
 8006d2a:	d016      	beq.n	8006d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d46:	f043 0220 	orr.w	r2, r3, #32
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e007      	b.n	8006d6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d64:	2b40      	cmp	r3, #64	@ 0x40
 8006d66:	d1ae      	bne.n	8006cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d88:	d11b      	bne.n	8006dc2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dae:	f043 0204 	orr.w	r2, r3, #4
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e000      	b.n	8006dc4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b20      	cmp	r3, #32
 8006de4:	d129      	bne.n	8006e3a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2224      	movs	r2, #36	@ 0x24
 8006dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 0201 	bic.w	r2, r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f022 0210 	bic.w	r2, r2, #16
 8006e0c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f042 0201 	orr.w	r2, r2, #1
 8006e2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	e000      	b.n	8006e3c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006e3a:	2302      	movs	r3, #2
  }
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b20      	cmp	r3, #32
 8006e60:	d12a      	bne.n	8006eb8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2224      	movs	r2, #36	@ 0x24
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 0201 	bic.w	r2, r2, #1
 8006e78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e80:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006e82:	89fb      	ldrh	r3, [r7, #14]
 8006e84:	f023 030f 	bic.w	r3, r3, #15
 8006e88:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	89fb      	ldrh	r3, [r7, #14]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	89fa      	ldrh	r2, [r7, #14]
 8006e9a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f042 0201 	orr.w	r2, r2, #1
 8006eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	e000      	b.n	8006eba <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006eb8:	2302      	movs	r3, #2
  }
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
	...

08006ec8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e0bf      	b.n	800705a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d106      	bne.n	8006ef4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7fd fcb2 	bl	8004858 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	699a      	ldr	r2, [r3, #24]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006f0a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6999      	ldr	r1, [r3, #24]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f20:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6899      	ldr	r1, [r3, #8]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	4b4a      	ldr	r3, [pc, #296]	@ (8007064 <HAL_LTDC_Init+0x19c>)
 8006f3c:	400b      	ands	r3, r1
 8006f3e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	041b      	lsls	r3, r3, #16
 8006f46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6899      	ldr	r1, [r3, #8]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	699a      	ldr	r2, [r3, #24]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	431a      	orrs	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68d9      	ldr	r1, [r3, #12]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	4b3e      	ldr	r3, [pc, #248]	@ (8007064 <HAL_LTDC_Init+0x19c>)
 8006f6a:	400b      	ands	r3, r1
 8006f6c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	041b      	lsls	r3, r3, #16
 8006f74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68d9      	ldr	r1, [r3, #12]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a1a      	ldr	r2, [r3, #32]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6919      	ldr	r1, [r3, #16]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	4b33      	ldr	r3, [pc, #204]	@ (8007064 <HAL_LTDC_Init+0x19c>)
 8006f98:	400b      	ands	r3, r1
 8006f9a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa0:	041b      	lsls	r3, r3, #16
 8006fa2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6919      	ldr	r1, [r3, #16]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6959      	ldr	r1, [r3, #20]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	4b27      	ldr	r3, [pc, #156]	@ (8007064 <HAL_LTDC_Init+0x19c>)
 8006fc6:	400b      	ands	r3, r1
 8006fc8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fce:	041b      	lsls	r3, r3, #16
 8006fd0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6959      	ldr	r1, [r3, #20]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	431a      	orrs	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006fee:	021b      	lsls	r3, r3, #8
 8006ff0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006ff8:	041b      	lsls	r3, r3, #16
 8006ffa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800700a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4313      	orrs	r3, r2
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800701e:	431a      	orrs	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	430a      	orrs	r2, r1
 8007026:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f042 0206 	orr.w	r2, r2, #6
 8007036:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	699a      	ldr	r2, [r3, #24]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0201 	orr.w	r2, r2, #1
 8007046:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	f000f800 	.word	0xf000f800

08007068 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007068:	b5b0      	push	{r4, r5, r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800707a:	2b01      	cmp	r3, #1
 800707c:	d101      	bne.n	8007082 <HAL_LTDC_ConfigLayer+0x1a>
 800707e:	2302      	movs	r3, #2
 8007080:	e02c      	b.n	80070dc <HAL_LTDC_ConfigLayer+0x74>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2202      	movs	r2, #2
 800708e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2134      	movs	r1, #52	@ 0x34
 8007098:	fb01 f303 	mul.w	r3, r1, r3
 800709c:	4413      	add	r3, r2
 800709e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	4614      	mov	r4, r2
 80070a6:	461d      	mov	r5, r3
 80070a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	68b9      	ldr	r1, [r7, #8]
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 f811 	bl	80070e4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2201      	movs	r2, #1
 80070c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bdb0      	pop	{r4, r5, r7, pc}

080070e4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b089      	sub	sp, #36	@ 0x24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	685a      	ldr	r2, [r3, #4]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	0c1b      	lsrs	r3, r3, #16
 80070fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007100:	4413      	add	r3, r2
 8007102:	041b      	lsls	r3, r3, #16
 8007104:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	461a      	mov	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	01db      	lsls	r3, r3, #7
 8007110:	4413      	add	r3, r2
 8007112:	3384      	adds	r3, #132	@ 0x84
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	6812      	ldr	r2, [r2, #0]
 800711a:	4611      	mov	r1, r2
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	01d2      	lsls	r2, r2, #7
 8007120:	440a      	add	r2, r1
 8007122:	3284      	adds	r2, #132	@ 0x84
 8007124:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007128:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	0c1b      	lsrs	r3, r3, #16
 8007136:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800713a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800713c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4619      	mov	r1, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	01db      	lsls	r3, r3, #7
 8007148:	440b      	add	r3, r1
 800714a:	3384      	adds	r3, #132	@ 0x84
 800714c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007152:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	68da      	ldr	r2, [r3, #12]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007162:	4413      	add	r3, r2
 8007164:	041b      	lsls	r3, r3, #16
 8007166:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	461a      	mov	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	01db      	lsls	r3, r3, #7
 8007172:	4413      	add	r3, r2
 8007174:	3384      	adds	r3, #132	@ 0x84
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	6812      	ldr	r2, [r2, #0]
 800717c:	4611      	mov	r1, r2
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	01d2      	lsls	r2, r2, #7
 8007182:	440a      	add	r2, r1
 8007184:	3284      	adds	r2, #132	@ 0x84
 8007186:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800718a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800719a:	4413      	add	r3, r2
 800719c:	1c5a      	adds	r2, r3, #1
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4619      	mov	r1, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	01db      	lsls	r3, r3, #7
 80071a8:	440b      	add	r3, r1
 80071aa:	3384      	adds	r3, #132	@ 0x84
 80071ac:	4619      	mov	r1, r3
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	461a      	mov	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	01db      	lsls	r3, r3, #7
 80071be:	4413      	add	r3, r2
 80071c0:	3384      	adds	r3, #132	@ 0x84
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	6812      	ldr	r2, [r2, #0]
 80071c8:	4611      	mov	r1, r2
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	01d2      	lsls	r2, r2, #7
 80071ce:	440a      	add	r2, r1
 80071d0:	3284      	adds	r2, #132	@ 0x84
 80071d2:	f023 0307 	bic.w	r3, r3, #7
 80071d6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	461a      	mov	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	01db      	lsls	r3, r3, #7
 80071e2:	4413      	add	r3, r2
 80071e4:	3384      	adds	r3, #132	@ 0x84
 80071e6:	461a      	mov	r2, r3
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80071f4:	021b      	lsls	r3, r3, #8
 80071f6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80071fe:	041b      	lsls	r3, r3, #16
 8007200:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	061b      	lsls	r3, r3, #24
 8007208:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	01db      	lsls	r3, r3, #7
 8007214:	4413      	add	r3, r2
 8007216:	3384      	adds	r3, #132	@ 0x84
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	01db      	lsls	r3, r3, #7
 8007224:	4413      	add	r3, r2
 8007226:	3384      	adds	r3, #132	@ 0x84
 8007228:	461a      	mov	r2, r3
 800722a:	2300      	movs	r3, #0
 800722c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007234:	461a      	mov	r2, r3
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	431a      	orrs	r2, r3
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	431a      	orrs	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4619      	mov	r1, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	01db      	lsls	r3, r3, #7
 8007248:	440b      	add	r3, r1
 800724a:	3384      	adds	r3, #132	@ 0x84
 800724c:	4619      	mov	r1, r3
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	4313      	orrs	r3, r2
 8007252:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	461a      	mov	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	01db      	lsls	r3, r3, #7
 800725e:	4413      	add	r3, r2
 8007260:	3384      	adds	r3, #132	@ 0x84
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	6812      	ldr	r2, [r2, #0]
 8007268:	4611      	mov	r1, r2
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	01d2      	lsls	r2, r2, #7
 800726e:	440a      	add	r2, r1
 8007270:	3284      	adds	r2, #132	@ 0x84
 8007272:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007276:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	461a      	mov	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	01db      	lsls	r3, r3, #7
 8007282:	4413      	add	r3, r2
 8007284:	3384      	adds	r3, #132	@ 0x84
 8007286:	461a      	mov	r2, r3
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	01db      	lsls	r3, r3, #7
 8007298:	4413      	add	r3, r2
 800729a:	3384      	adds	r3, #132	@ 0x84
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	6812      	ldr	r2, [r2, #0]
 80072a2:	4611      	mov	r1, r2
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	01d2      	lsls	r2, r2, #7
 80072a8:	440a      	add	r2, r1
 80072aa:	3284      	adds	r2, #132	@ 0x84
 80072ac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80072b0:	f023 0307 	bic.w	r3, r3, #7
 80072b4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	69da      	ldr	r2, [r3, #28]
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	68f9      	ldr	r1, [r7, #12]
 80072c0:	6809      	ldr	r1, [r1, #0]
 80072c2:	4608      	mov	r0, r1
 80072c4:	6879      	ldr	r1, [r7, #4]
 80072c6:	01c9      	lsls	r1, r1, #7
 80072c8:	4401      	add	r1, r0
 80072ca:	3184      	adds	r1, #132	@ 0x84
 80072cc:	4313      	orrs	r3, r2
 80072ce:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	461a      	mov	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	01db      	lsls	r3, r3, #7
 80072da:	4413      	add	r3, r2
 80072dc:	3384      	adds	r3, #132	@ 0x84
 80072de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	461a      	mov	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	01db      	lsls	r3, r3, #7
 80072ea:	4413      	add	r3, r2
 80072ec:	3384      	adds	r3, #132	@ 0x84
 80072ee:	461a      	mov	r2, r3
 80072f0:	2300      	movs	r3, #0
 80072f2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	01db      	lsls	r3, r3, #7
 80072fe:	4413      	add	r3, r2
 8007300:	3384      	adds	r3, #132	@ 0x84
 8007302:	461a      	mov	r2, r3
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007308:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d102      	bne.n	8007318 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007312:	2304      	movs	r3, #4
 8007314:	61fb      	str	r3, [r7, #28]
 8007316:	e01b      	b.n	8007350 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d102      	bne.n	8007326 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007320:	2303      	movs	r3, #3
 8007322:	61fb      	str	r3, [r7, #28]
 8007324:	e014      	b.n	8007350 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	2b04      	cmp	r3, #4
 800732c:	d00b      	beq.n	8007346 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007332:	2b02      	cmp	r3, #2
 8007334:	d007      	beq.n	8007346 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800733a:	2b03      	cmp	r3, #3
 800733c:	d003      	beq.n	8007346 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007342:	2b07      	cmp	r3, #7
 8007344:	d102      	bne.n	800734c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007346:	2302      	movs	r3, #2
 8007348:	61fb      	str	r3, [r7, #28]
 800734a:	e001      	b.n	8007350 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800734c:	2301      	movs	r3, #1
 800734e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	461a      	mov	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	01db      	lsls	r3, r3, #7
 800735a:	4413      	add	r3, r2
 800735c:	3384      	adds	r3, #132	@ 0x84
 800735e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	6812      	ldr	r2, [r2, #0]
 8007364:	4611      	mov	r1, r2
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	01d2      	lsls	r2, r2, #7
 800736a:	440a      	add	r2, r1
 800736c:	3284      	adds	r2, #132	@ 0x84
 800736e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007372:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007378:	69fa      	ldr	r2, [r7, #28]
 800737a:	fb02 f303 	mul.w	r3, r2, r3
 800737e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	6859      	ldr	r1, [r3, #4]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	1acb      	subs	r3, r1, r3
 800738a:	69f9      	ldr	r1, [r7, #28]
 800738c:	fb01 f303 	mul.w	r3, r1, r3
 8007390:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007392:	68f9      	ldr	r1, [r7, #12]
 8007394:	6809      	ldr	r1, [r1, #0]
 8007396:	4608      	mov	r0, r1
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	01c9      	lsls	r1, r1, #7
 800739c:	4401      	add	r1, r0
 800739e:	3184      	adds	r1, #132	@ 0x84
 80073a0:	4313      	orrs	r3, r2
 80073a2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	461a      	mov	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	01db      	lsls	r3, r3, #7
 80073ae:	4413      	add	r3, r2
 80073b0:	3384      	adds	r3, #132	@ 0x84
 80073b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	6812      	ldr	r2, [r2, #0]
 80073b8:	4611      	mov	r1, r2
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	01d2      	lsls	r2, r2, #7
 80073be:	440a      	add	r2, r1
 80073c0:	3284      	adds	r2, #132	@ 0x84
 80073c2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80073c6:	f023 0307 	bic.w	r3, r3, #7
 80073ca:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	461a      	mov	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	01db      	lsls	r3, r3, #7
 80073d6:	4413      	add	r3, r2
 80073d8:	3384      	adds	r3, #132	@ 0x84
 80073da:	461a      	mov	r2, r3
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	461a      	mov	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	01db      	lsls	r3, r3, #7
 80073ec:	4413      	add	r3, r2
 80073ee:	3384      	adds	r3, #132	@ 0x84
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	6812      	ldr	r2, [r2, #0]
 80073f6:	4611      	mov	r1, r2
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	01d2      	lsls	r2, r2, #7
 80073fc:	440a      	add	r2, r1
 80073fe:	3284      	adds	r2, #132	@ 0x84
 8007400:	f043 0301 	orr.w	r3, r3, #1
 8007404:	6013      	str	r3, [r2, #0]
}
 8007406:	bf00      	nop
 8007408:	3724      	adds	r7, #36	@ 0x24
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
	...

08007414 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e267      	b.n	80078f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	d075      	beq.n	800751e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007432:	4b88      	ldr	r3, [pc, #544]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f003 030c 	and.w	r3, r3, #12
 800743a:	2b04      	cmp	r3, #4
 800743c:	d00c      	beq.n	8007458 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800743e:	4b85      	ldr	r3, [pc, #532]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007446:	2b08      	cmp	r3, #8
 8007448:	d112      	bne.n	8007470 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800744a:	4b82      	ldr	r3, [pc, #520]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007452:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007456:	d10b      	bne.n	8007470 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007458:	4b7e      	ldr	r3, [pc, #504]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d05b      	beq.n	800751c <HAL_RCC_OscConfig+0x108>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d157      	bne.n	800751c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e242      	b.n	80078f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007478:	d106      	bne.n	8007488 <HAL_RCC_OscConfig+0x74>
 800747a:	4b76      	ldr	r3, [pc, #472]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a75      	ldr	r2, [pc, #468]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 8007480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	e01d      	b.n	80074c4 <HAL_RCC_OscConfig+0xb0>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007490:	d10c      	bne.n	80074ac <HAL_RCC_OscConfig+0x98>
 8007492:	4b70      	ldr	r3, [pc, #448]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a6f      	ldr	r2, [pc, #444]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 8007498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800749c:	6013      	str	r3, [r2, #0]
 800749e:	4b6d      	ldr	r3, [pc, #436]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a6c      	ldr	r2, [pc, #432]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 80074a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074a8:	6013      	str	r3, [r2, #0]
 80074aa:	e00b      	b.n	80074c4 <HAL_RCC_OscConfig+0xb0>
 80074ac:	4b69      	ldr	r3, [pc, #420]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a68      	ldr	r2, [pc, #416]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 80074b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074b6:	6013      	str	r3, [r2, #0]
 80074b8:	4b66      	ldr	r3, [pc, #408]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a65      	ldr	r2, [pc, #404]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 80074be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80074c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d013      	beq.n	80074f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074cc:	f7fd ffd2 	bl	8005474 <HAL_GetTick>
 80074d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074d2:	e008      	b.n	80074e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074d4:	f7fd ffce 	bl	8005474 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	2b64      	cmp	r3, #100	@ 0x64
 80074e0:	d901      	bls.n	80074e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e207      	b.n	80078f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074e6:	4b5b      	ldr	r3, [pc, #364]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d0f0      	beq.n	80074d4 <HAL_RCC_OscConfig+0xc0>
 80074f2:	e014      	b.n	800751e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074f4:	f7fd ffbe 	bl	8005474 <HAL_GetTick>
 80074f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074fa:	e008      	b.n	800750e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074fc:	f7fd ffba 	bl	8005474 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	2b64      	cmp	r3, #100	@ 0x64
 8007508:	d901      	bls.n	800750e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e1f3      	b.n	80078f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800750e:	4b51      	ldr	r3, [pc, #324]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1f0      	bne.n	80074fc <HAL_RCC_OscConfig+0xe8>
 800751a:	e000      	b.n	800751e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800751c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0302 	and.w	r3, r3, #2
 8007526:	2b00      	cmp	r3, #0
 8007528:	d063      	beq.n	80075f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800752a:	4b4a      	ldr	r3, [pc, #296]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f003 030c 	and.w	r3, r3, #12
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00b      	beq.n	800754e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007536:	4b47      	ldr	r3, [pc, #284]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800753e:	2b08      	cmp	r3, #8
 8007540:	d11c      	bne.n	800757c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007542:	4b44      	ldr	r3, [pc, #272]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d116      	bne.n	800757c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800754e:	4b41      	ldr	r3, [pc, #260]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0302 	and.w	r3, r3, #2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d005      	beq.n	8007566 <HAL_RCC_OscConfig+0x152>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d001      	beq.n	8007566 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e1c7      	b.n	80078f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007566:	4b3b      	ldr	r3, [pc, #236]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	00db      	lsls	r3, r3, #3
 8007574:	4937      	ldr	r1, [pc, #220]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 8007576:	4313      	orrs	r3, r2
 8007578:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800757a:	e03a      	b.n	80075f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d020      	beq.n	80075c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007584:	4b34      	ldr	r3, [pc, #208]	@ (8007658 <HAL_RCC_OscConfig+0x244>)
 8007586:	2201      	movs	r2, #1
 8007588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800758a:	f7fd ff73 	bl	8005474 <HAL_GetTick>
 800758e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007590:	e008      	b.n	80075a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007592:	f7fd ff6f 	bl	8005474 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	2b02      	cmp	r3, #2
 800759e:	d901      	bls.n	80075a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e1a8      	b.n	80078f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075a4:	4b2b      	ldr	r3, [pc, #172]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0302 	and.w	r3, r3, #2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d0f0      	beq.n	8007592 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075b0:	4b28      	ldr	r3, [pc, #160]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	00db      	lsls	r3, r3, #3
 80075be:	4925      	ldr	r1, [pc, #148]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 80075c0:	4313      	orrs	r3, r2
 80075c2:	600b      	str	r3, [r1, #0]
 80075c4:	e015      	b.n	80075f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075c6:	4b24      	ldr	r3, [pc, #144]	@ (8007658 <HAL_RCC_OscConfig+0x244>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075cc:	f7fd ff52 	bl	8005474 <HAL_GetTick>
 80075d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075d2:	e008      	b.n	80075e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075d4:	f7fd ff4e 	bl	8005474 <HAL_GetTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d901      	bls.n	80075e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e187      	b.n	80078f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075e6:	4b1b      	ldr	r3, [pc, #108]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1f0      	bne.n	80075d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0308 	and.w	r3, r3, #8
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d036      	beq.n	800766c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d016      	beq.n	8007634 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007606:	4b15      	ldr	r3, [pc, #84]	@ (800765c <HAL_RCC_OscConfig+0x248>)
 8007608:	2201      	movs	r2, #1
 800760a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800760c:	f7fd ff32 	bl	8005474 <HAL_GetTick>
 8007610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007612:	e008      	b.n	8007626 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007614:	f7fd ff2e 	bl	8005474 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e167      	b.n	80078f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007626:	4b0b      	ldr	r3, [pc, #44]	@ (8007654 <HAL_RCC_OscConfig+0x240>)
 8007628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0f0      	beq.n	8007614 <HAL_RCC_OscConfig+0x200>
 8007632:	e01b      	b.n	800766c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007634:	4b09      	ldr	r3, [pc, #36]	@ (800765c <HAL_RCC_OscConfig+0x248>)
 8007636:	2200      	movs	r2, #0
 8007638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800763a:	f7fd ff1b 	bl	8005474 <HAL_GetTick>
 800763e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007640:	e00e      	b.n	8007660 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007642:	f7fd ff17 	bl	8005474 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	2b02      	cmp	r3, #2
 800764e:	d907      	bls.n	8007660 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e150      	b.n	80078f6 <HAL_RCC_OscConfig+0x4e2>
 8007654:	40023800 	.word	0x40023800
 8007658:	42470000 	.word	0x42470000
 800765c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007660:	4b88      	ldr	r3, [pc, #544]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 8007662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007664:	f003 0302 	and.w	r3, r3, #2
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1ea      	bne.n	8007642 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0304 	and.w	r3, r3, #4
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 8097 	beq.w	80077a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800767a:	2300      	movs	r3, #0
 800767c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800767e:	4b81      	ldr	r3, [pc, #516]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 8007680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10f      	bne.n	80076aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800768a:	2300      	movs	r3, #0
 800768c:	60bb      	str	r3, [r7, #8]
 800768e:	4b7d      	ldr	r3, [pc, #500]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 8007690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007692:	4a7c      	ldr	r2, [pc, #496]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 8007694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007698:	6413      	str	r3, [r2, #64]	@ 0x40
 800769a:	4b7a      	ldr	r3, [pc, #488]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 800769c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800769e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076a2:	60bb      	str	r3, [r7, #8]
 80076a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076a6:	2301      	movs	r3, #1
 80076a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076aa:	4b77      	ldr	r3, [pc, #476]	@ (8007888 <HAL_RCC_OscConfig+0x474>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d118      	bne.n	80076e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076b6:	4b74      	ldr	r3, [pc, #464]	@ (8007888 <HAL_RCC_OscConfig+0x474>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a73      	ldr	r2, [pc, #460]	@ (8007888 <HAL_RCC_OscConfig+0x474>)
 80076bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076c2:	f7fd fed7 	bl	8005474 <HAL_GetTick>
 80076c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076c8:	e008      	b.n	80076dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076ca:	f7fd fed3 	bl	8005474 <HAL_GetTick>
 80076ce:	4602      	mov	r2, r0
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d901      	bls.n	80076dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e10c      	b.n	80078f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076dc:	4b6a      	ldr	r3, [pc, #424]	@ (8007888 <HAL_RCC_OscConfig+0x474>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d0f0      	beq.n	80076ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d106      	bne.n	80076fe <HAL_RCC_OscConfig+0x2ea>
 80076f0:	4b64      	ldr	r3, [pc, #400]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 80076f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076f4:	4a63      	ldr	r2, [pc, #396]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 80076f6:	f043 0301 	orr.w	r3, r3, #1
 80076fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80076fc:	e01c      	b.n	8007738 <HAL_RCC_OscConfig+0x324>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	2b05      	cmp	r3, #5
 8007704:	d10c      	bne.n	8007720 <HAL_RCC_OscConfig+0x30c>
 8007706:	4b5f      	ldr	r3, [pc, #380]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 8007708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800770a:	4a5e      	ldr	r2, [pc, #376]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 800770c:	f043 0304 	orr.w	r3, r3, #4
 8007710:	6713      	str	r3, [r2, #112]	@ 0x70
 8007712:	4b5c      	ldr	r3, [pc, #368]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 8007714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007716:	4a5b      	ldr	r2, [pc, #364]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 8007718:	f043 0301 	orr.w	r3, r3, #1
 800771c:	6713      	str	r3, [r2, #112]	@ 0x70
 800771e:	e00b      	b.n	8007738 <HAL_RCC_OscConfig+0x324>
 8007720:	4b58      	ldr	r3, [pc, #352]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 8007722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007724:	4a57      	ldr	r2, [pc, #348]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 8007726:	f023 0301 	bic.w	r3, r3, #1
 800772a:	6713      	str	r3, [r2, #112]	@ 0x70
 800772c:	4b55      	ldr	r3, [pc, #340]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 800772e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007730:	4a54      	ldr	r2, [pc, #336]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 8007732:	f023 0304 	bic.w	r3, r3, #4
 8007736:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d015      	beq.n	800776c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007740:	f7fd fe98 	bl	8005474 <HAL_GetTick>
 8007744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007746:	e00a      	b.n	800775e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007748:	f7fd fe94 	bl	8005474 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007756:	4293      	cmp	r3, r2
 8007758:	d901      	bls.n	800775e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e0cb      	b.n	80078f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800775e:	4b49      	ldr	r3, [pc, #292]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 8007760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	2b00      	cmp	r3, #0
 8007768:	d0ee      	beq.n	8007748 <HAL_RCC_OscConfig+0x334>
 800776a:	e014      	b.n	8007796 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800776c:	f7fd fe82 	bl	8005474 <HAL_GetTick>
 8007770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007772:	e00a      	b.n	800778a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007774:	f7fd fe7e 	bl	8005474 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007782:	4293      	cmp	r3, r2
 8007784:	d901      	bls.n	800778a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e0b5      	b.n	80078f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800778a:	4b3e      	ldr	r3, [pc, #248]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 800778c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1ee      	bne.n	8007774 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007796:	7dfb      	ldrb	r3, [r7, #23]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d105      	bne.n	80077a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800779c:	4b39      	ldr	r3, [pc, #228]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 800779e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a0:	4a38      	ldr	r2, [pc, #224]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 80077a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 80a1 	beq.w	80078f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80077b2:	4b34      	ldr	r3, [pc, #208]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f003 030c 	and.w	r3, r3, #12
 80077ba:	2b08      	cmp	r3, #8
 80077bc:	d05c      	beq.n	8007878 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d141      	bne.n	800784a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077c6:	4b31      	ldr	r3, [pc, #196]	@ (800788c <HAL_RCC_OscConfig+0x478>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077cc:	f7fd fe52 	bl	8005474 <HAL_GetTick>
 80077d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077d2:	e008      	b.n	80077e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077d4:	f7fd fe4e 	bl	8005474 <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d901      	bls.n	80077e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e087      	b.n	80078f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077e6:	4b27      	ldr	r3, [pc, #156]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1f0      	bne.n	80077d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	69da      	ldr	r2, [r3, #28]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	431a      	orrs	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007800:	019b      	lsls	r3, r3, #6
 8007802:	431a      	orrs	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007808:	085b      	lsrs	r3, r3, #1
 800780a:	3b01      	subs	r3, #1
 800780c:	041b      	lsls	r3, r3, #16
 800780e:	431a      	orrs	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007814:	061b      	lsls	r3, r3, #24
 8007816:	491b      	ldr	r1, [pc, #108]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 8007818:	4313      	orrs	r3, r2
 800781a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800781c:	4b1b      	ldr	r3, [pc, #108]	@ (800788c <HAL_RCC_OscConfig+0x478>)
 800781e:	2201      	movs	r2, #1
 8007820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007822:	f7fd fe27 	bl	8005474 <HAL_GetTick>
 8007826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007828:	e008      	b.n	800783c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800782a:	f7fd fe23 	bl	8005474 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	2b02      	cmp	r3, #2
 8007836:	d901      	bls.n	800783c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e05c      	b.n	80078f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800783c:	4b11      	ldr	r3, [pc, #68]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d0f0      	beq.n	800782a <HAL_RCC_OscConfig+0x416>
 8007848:	e054      	b.n	80078f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800784a:	4b10      	ldr	r3, [pc, #64]	@ (800788c <HAL_RCC_OscConfig+0x478>)
 800784c:	2200      	movs	r2, #0
 800784e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007850:	f7fd fe10 	bl	8005474 <HAL_GetTick>
 8007854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007856:	e008      	b.n	800786a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007858:	f7fd fe0c 	bl	8005474 <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	2b02      	cmp	r3, #2
 8007864:	d901      	bls.n	800786a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e045      	b.n	80078f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800786a:	4b06      	ldr	r3, [pc, #24]	@ (8007884 <HAL_RCC_OscConfig+0x470>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1f0      	bne.n	8007858 <HAL_RCC_OscConfig+0x444>
 8007876:	e03d      	b.n	80078f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d107      	bne.n	8007890 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e038      	b.n	80078f6 <HAL_RCC_OscConfig+0x4e2>
 8007884:	40023800 	.word	0x40023800
 8007888:	40007000 	.word	0x40007000
 800788c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007890:	4b1b      	ldr	r3, [pc, #108]	@ (8007900 <HAL_RCC_OscConfig+0x4ec>)
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d028      	beq.n	80078f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d121      	bne.n	80078f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d11a      	bne.n	80078f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80078c0:	4013      	ands	r3, r2
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80078c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d111      	bne.n	80078f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d6:	085b      	lsrs	r3, r3, #1
 80078d8:	3b01      	subs	r3, #1
 80078da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078dc:	429a      	cmp	r2, r3
 80078de:	d107      	bne.n	80078f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d001      	beq.n	80078f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e000      	b.n	80078f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3718      	adds	r7, #24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	40023800 	.word	0x40023800

08007904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e0cc      	b.n	8007ab2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007918:	4b68      	ldr	r3, [pc, #416]	@ (8007abc <HAL_RCC_ClockConfig+0x1b8>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 030f 	and.w	r3, r3, #15
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	429a      	cmp	r2, r3
 8007924:	d90c      	bls.n	8007940 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007926:	4b65      	ldr	r3, [pc, #404]	@ (8007abc <HAL_RCC_ClockConfig+0x1b8>)
 8007928:	683a      	ldr	r2, [r7, #0]
 800792a:	b2d2      	uxtb	r2, r2
 800792c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800792e:	4b63      	ldr	r3, [pc, #396]	@ (8007abc <HAL_RCC_ClockConfig+0x1b8>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 030f 	and.w	r3, r3, #15
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	429a      	cmp	r2, r3
 800793a:	d001      	beq.n	8007940 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e0b8      	b.n	8007ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d020      	beq.n	800798e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 0304 	and.w	r3, r3, #4
 8007954:	2b00      	cmp	r3, #0
 8007956:	d005      	beq.n	8007964 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007958:	4b59      	ldr	r3, [pc, #356]	@ (8007ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	4a58      	ldr	r2, [pc, #352]	@ (8007ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800795e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007962:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0308 	and.w	r3, r3, #8
 800796c:	2b00      	cmp	r3, #0
 800796e:	d005      	beq.n	800797c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007970:	4b53      	ldr	r3, [pc, #332]	@ (8007ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	4a52      	ldr	r2, [pc, #328]	@ (8007ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8007976:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800797a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800797c:	4b50      	ldr	r3, [pc, #320]	@ (8007ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	494d      	ldr	r1, [pc, #308]	@ (8007ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800798a:	4313      	orrs	r3, r2
 800798c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	d044      	beq.n	8007a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d107      	bne.n	80079b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079a2:	4b47      	ldr	r3, [pc, #284]	@ (8007ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d119      	bne.n	80079e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e07f      	b.n	8007ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d003      	beq.n	80079c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80079be:	2b03      	cmp	r3, #3
 80079c0:	d107      	bne.n	80079d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079c2:	4b3f      	ldr	r3, [pc, #252]	@ (8007ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d109      	bne.n	80079e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e06f      	b.n	8007ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079d2:	4b3b      	ldr	r3, [pc, #236]	@ (8007ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0302 	and.w	r3, r3, #2
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e067      	b.n	8007ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079e2:	4b37      	ldr	r3, [pc, #220]	@ (8007ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f023 0203 	bic.w	r2, r3, #3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	4934      	ldr	r1, [pc, #208]	@ (8007ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80079f4:	f7fd fd3e 	bl	8005474 <HAL_GetTick>
 80079f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079fa:	e00a      	b.n	8007a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079fc:	f7fd fd3a 	bl	8005474 <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e04f      	b.n	8007ab2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a12:	4b2b      	ldr	r3, [pc, #172]	@ (8007ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f003 020c 	and.w	r2, r3, #12
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d1eb      	bne.n	80079fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a24:	4b25      	ldr	r3, [pc, #148]	@ (8007abc <HAL_RCC_ClockConfig+0x1b8>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 030f 	and.w	r3, r3, #15
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d20c      	bcs.n	8007a4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a32:	4b22      	ldr	r3, [pc, #136]	@ (8007abc <HAL_RCC_ClockConfig+0x1b8>)
 8007a34:	683a      	ldr	r2, [r7, #0]
 8007a36:	b2d2      	uxtb	r2, r2
 8007a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a3a:	4b20      	ldr	r3, [pc, #128]	@ (8007abc <HAL_RCC_ClockConfig+0x1b8>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 030f 	and.w	r3, r3, #15
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d001      	beq.n	8007a4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e032      	b.n	8007ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0304 	and.w	r3, r3, #4
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d008      	beq.n	8007a6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a58:	4b19      	ldr	r3, [pc, #100]	@ (8007ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	4916      	ldr	r1, [pc, #88]	@ (8007ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0308 	and.w	r3, r3, #8
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d009      	beq.n	8007a8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a76:	4b12      	ldr	r3, [pc, #72]	@ (8007ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	490e      	ldr	r1, [pc, #56]	@ (8007ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007a8a:	f000 f821 	bl	8007ad0 <HAL_RCC_GetSysClockFreq>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	091b      	lsrs	r3, r3, #4
 8007a96:	f003 030f 	and.w	r3, r3, #15
 8007a9a:	490a      	ldr	r1, [pc, #40]	@ (8007ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8007a9c:	5ccb      	ldrb	r3, [r1, r3]
 8007a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007aa2:	4a09      	ldr	r2, [pc, #36]	@ (8007ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8007aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007aa6:	4b09      	ldr	r3, [pc, #36]	@ (8007acc <HAL_RCC_ClockConfig+0x1c8>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fd fc9e 	bl	80053ec <HAL_InitTick>

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	40023c00 	.word	0x40023c00
 8007ac0:	40023800 	.word	0x40023800
 8007ac4:	0800a774 	.word	0x0800a774
 8007ac8:	20000018 	.word	0x20000018
 8007acc:	2000001c 	.word	0x2000001c

08007ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ad4:	b094      	sub	sp, #80	@ 0x50
 8007ad6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007adc:	2300      	movs	r3, #0
 8007ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ae8:	4b79      	ldr	r3, [pc, #484]	@ (8007cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f003 030c 	and.w	r3, r3, #12
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d00d      	beq.n	8007b10 <HAL_RCC_GetSysClockFreq+0x40>
 8007af4:	2b08      	cmp	r3, #8
 8007af6:	f200 80e1 	bhi.w	8007cbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <HAL_RCC_GetSysClockFreq+0x34>
 8007afe:	2b04      	cmp	r3, #4
 8007b00:	d003      	beq.n	8007b0a <HAL_RCC_GetSysClockFreq+0x3a>
 8007b02:	e0db      	b.n	8007cbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b04:	4b73      	ldr	r3, [pc, #460]	@ (8007cd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007b06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b08:	e0db      	b.n	8007cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b0a:	4b73      	ldr	r3, [pc, #460]	@ (8007cd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8007b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b0e:	e0d8      	b.n	8007cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b10:	4b6f      	ldr	r3, [pc, #444]	@ (8007cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b18:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b1a:	4b6d      	ldr	r3, [pc, #436]	@ (8007cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d063      	beq.n	8007bee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b26:	4b6a      	ldr	r3, [pc, #424]	@ (8007cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	099b      	lsrs	r3, r3, #6
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b38:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007b42:	4622      	mov	r2, r4
 8007b44:	462b      	mov	r3, r5
 8007b46:	f04f 0000 	mov.w	r0, #0
 8007b4a:	f04f 0100 	mov.w	r1, #0
 8007b4e:	0159      	lsls	r1, r3, #5
 8007b50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b54:	0150      	lsls	r0, r2, #5
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4621      	mov	r1, r4
 8007b5c:	1a51      	subs	r1, r2, r1
 8007b5e:	6139      	str	r1, [r7, #16]
 8007b60:	4629      	mov	r1, r5
 8007b62:	eb63 0301 	sbc.w	r3, r3, r1
 8007b66:	617b      	str	r3, [r7, #20]
 8007b68:	f04f 0200 	mov.w	r2, #0
 8007b6c:	f04f 0300 	mov.w	r3, #0
 8007b70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b74:	4659      	mov	r1, fp
 8007b76:	018b      	lsls	r3, r1, #6
 8007b78:	4651      	mov	r1, sl
 8007b7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b7e:	4651      	mov	r1, sl
 8007b80:	018a      	lsls	r2, r1, #6
 8007b82:	4651      	mov	r1, sl
 8007b84:	ebb2 0801 	subs.w	r8, r2, r1
 8007b88:	4659      	mov	r1, fp
 8007b8a:	eb63 0901 	sbc.w	r9, r3, r1
 8007b8e:	f04f 0200 	mov.w	r2, #0
 8007b92:	f04f 0300 	mov.w	r3, #0
 8007b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ba2:	4690      	mov	r8, r2
 8007ba4:	4699      	mov	r9, r3
 8007ba6:	4623      	mov	r3, r4
 8007ba8:	eb18 0303 	adds.w	r3, r8, r3
 8007bac:	60bb      	str	r3, [r7, #8]
 8007bae:	462b      	mov	r3, r5
 8007bb0:	eb49 0303 	adc.w	r3, r9, r3
 8007bb4:	60fb      	str	r3, [r7, #12]
 8007bb6:	f04f 0200 	mov.w	r2, #0
 8007bba:	f04f 0300 	mov.w	r3, #0
 8007bbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	024b      	lsls	r3, r1, #9
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007bcc:	4621      	mov	r1, r4
 8007bce:	024a      	lsls	r2, r1, #9
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007bda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007be0:	f7f8 fb04 	bl	80001ec <__aeabi_uldivmod>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	4613      	mov	r3, r2
 8007bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bec:	e058      	b.n	8007ca0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bee:	4b38      	ldr	r3, [pc, #224]	@ (8007cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	099b      	lsrs	r3, r3, #6
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007bfe:	623b      	str	r3, [r7, #32]
 8007c00:	2300      	movs	r3, #0
 8007c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007c08:	4642      	mov	r2, r8
 8007c0a:	464b      	mov	r3, r9
 8007c0c:	f04f 0000 	mov.w	r0, #0
 8007c10:	f04f 0100 	mov.w	r1, #0
 8007c14:	0159      	lsls	r1, r3, #5
 8007c16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c1a:	0150      	lsls	r0, r2, #5
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4641      	mov	r1, r8
 8007c22:	ebb2 0a01 	subs.w	sl, r2, r1
 8007c26:	4649      	mov	r1, r9
 8007c28:	eb63 0b01 	sbc.w	fp, r3, r1
 8007c2c:	f04f 0200 	mov.w	r2, #0
 8007c30:	f04f 0300 	mov.w	r3, #0
 8007c34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007c38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007c3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007c40:	ebb2 040a 	subs.w	r4, r2, sl
 8007c44:	eb63 050b 	sbc.w	r5, r3, fp
 8007c48:	f04f 0200 	mov.w	r2, #0
 8007c4c:	f04f 0300 	mov.w	r3, #0
 8007c50:	00eb      	lsls	r3, r5, #3
 8007c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c56:	00e2      	lsls	r2, r4, #3
 8007c58:	4614      	mov	r4, r2
 8007c5a:	461d      	mov	r5, r3
 8007c5c:	4643      	mov	r3, r8
 8007c5e:	18e3      	adds	r3, r4, r3
 8007c60:	603b      	str	r3, [r7, #0]
 8007c62:	464b      	mov	r3, r9
 8007c64:	eb45 0303 	adc.w	r3, r5, r3
 8007c68:	607b      	str	r3, [r7, #4]
 8007c6a:	f04f 0200 	mov.w	r2, #0
 8007c6e:	f04f 0300 	mov.w	r3, #0
 8007c72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c76:	4629      	mov	r1, r5
 8007c78:	028b      	lsls	r3, r1, #10
 8007c7a:	4621      	mov	r1, r4
 8007c7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c80:	4621      	mov	r1, r4
 8007c82:	028a      	lsls	r2, r1, #10
 8007c84:	4610      	mov	r0, r2
 8007c86:	4619      	mov	r1, r3
 8007c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	61bb      	str	r3, [r7, #24]
 8007c8e:	61fa      	str	r2, [r7, #28]
 8007c90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c94:	f7f8 faaa 	bl	80001ec <__aeabi_uldivmod>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8007cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	0c1b      	lsrs	r3, r3, #16
 8007ca6:	f003 0303 	and.w	r3, r3, #3
 8007caa:	3301      	adds	r3, #1
 8007cac:	005b      	lsls	r3, r3, #1
 8007cae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007cb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007cba:	e002      	b.n	8007cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007cbc:	4b05      	ldr	r3, [pc, #20]	@ (8007cd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007cc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3750      	adds	r7, #80	@ 0x50
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cce:	bf00      	nop
 8007cd0:	40023800 	.word	0x40023800
 8007cd4:	00f42400 	.word	0x00f42400
 8007cd8:	007a1200 	.word	0x007a1200

08007cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ce0:	4b03      	ldr	r3, [pc, #12]	@ (8007cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	20000018 	.word	0x20000018

08007cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007cf8:	f7ff fff0 	bl	8007cdc <HAL_RCC_GetHCLKFreq>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	4b05      	ldr	r3, [pc, #20]	@ (8007d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	0a9b      	lsrs	r3, r3, #10
 8007d04:	f003 0307 	and.w	r3, r3, #7
 8007d08:	4903      	ldr	r1, [pc, #12]	@ (8007d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d0a:	5ccb      	ldrb	r3, [r1, r3]
 8007d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	40023800 	.word	0x40023800
 8007d18:	0800a784 	.word	0x0800a784

08007d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10b      	bne.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d105      	bne.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d075      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007d50:	4b91      	ldr	r3, [pc, #580]	@ (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d56:	f7fd fb8d 	bl	8005474 <HAL_GetTick>
 8007d5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d5c:	e008      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d5e:	f7fd fb89 	bl	8005474 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d901      	bls.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e189      	b.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d70:	4b8a      	ldr	r3, [pc, #552]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1f0      	bne.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d009      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	019a      	lsls	r2, r3, #6
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	071b      	lsls	r3, r3, #28
 8007d94:	4981      	ldr	r1, [pc, #516]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0302 	and.w	r3, r3, #2
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d01f      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007da8:	4b7c      	ldr	r3, [pc, #496]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dae:	0f1b      	lsrs	r3, r3, #28
 8007db0:	f003 0307 	and.w	r3, r3, #7
 8007db4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	019a      	lsls	r2, r3, #6
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	061b      	lsls	r3, r3, #24
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	071b      	lsls	r3, r3, #28
 8007dc8:	4974      	ldr	r1, [pc, #464]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007dd0:	4b72      	ldr	r3, [pc, #456]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dd6:	f023 021f 	bic.w	r2, r3, #31
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	496e      	ldr	r1, [pc, #440]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00d      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	019a      	lsls	r2, r3, #6
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	061b      	lsls	r3, r3, #24
 8007e00:	431a      	orrs	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	071b      	lsls	r3, r3, #28
 8007e08:	4964      	ldr	r1, [pc, #400]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e10:	4b61      	ldr	r3, [pc, #388]	@ (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007e12:	2201      	movs	r2, #1
 8007e14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007e16:	f7fd fb2d 	bl	8005474 <HAL_GetTick>
 8007e1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e1c:	e008      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e1e:	f7fd fb29 	bl	8005474 <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d901      	bls.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e129      	b.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e30:	4b5a      	ldr	r3, [pc, #360]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d0f0      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0304 	and.w	r3, r3, #4
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d105      	bne.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d079      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007e54:	4b52      	ldr	r3, [pc, #328]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007e5a:	f7fd fb0b 	bl	8005474 <HAL_GetTick>
 8007e5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e60:	e008      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007e62:	f7fd fb07 	bl	8005474 <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d901      	bls.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e107      	b.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e74:	4b49      	ldr	r3, [pc, #292]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e80:	d0ef      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 0304 	and.w	r3, r3, #4
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d020      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007e8e:	4b43      	ldr	r3, [pc, #268]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e94:	0f1b      	lsrs	r3, r3, #28
 8007e96:	f003 0307 	and.w	r3, r3, #7
 8007e9a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	019a      	lsls	r2, r3, #6
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	061b      	lsls	r3, r3, #24
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	071b      	lsls	r3, r3, #28
 8007eae:	493b      	ldr	r1, [pc, #236]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007eb6:	4b39      	ldr	r3, [pc, #228]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ebc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a1b      	ldr	r3, [r3, #32]
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	021b      	lsls	r3, r3, #8
 8007ec8:	4934      	ldr	r1, [pc, #208]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0308 	and.w	r3, r3, #8
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d01e      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007edc:	4b2f      	ldr	r3, [pc, #188]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ee2:	0e1b      	lsrs	r3, r3, #24
 8007ee4:	f003 030f 	and.w	r3, r3, #15
 8007ee8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	019a      	lsls	r2, r3, #6
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	061b      	lsls	r3, r3, #24
 8007ef4:	431a      	orrs	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	071b      	lsls	r3, r3, #28
 8007efc:	4927      	ldr	r1, [pc, #156]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007efe:	4313      	orrs	r3, r2
 8007f00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007f04:	4b25      	ldr	r3, [pc, #148]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f0a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f12:	4922      	ldr	r1, [pc, #136]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f14:	4313      	orrs	r3, r2
 8007f16:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007f1a:	4b21      	ldr	r3, [pc, #132]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007f20:	f7fd faa8 	bl	8005474 <HAL_GetTick>
 8007f24:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007f26:	e008      	b.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007f28:	f7fd faa4 	bl	8005474 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d901      	bls.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e0a4      	b.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007f3a:	4b18      	ldr	r3, [pc, #96]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f46:	d1ef      	bne.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0320 	and.w	r3, r3, #32
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 808b 	beq.w	800806c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f56:	2300      	movs	r3, #0
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	4b10      	ldr	r3, [pc, #64]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f66:	4b0d      	ldr	r3, [pc, #52]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007f72:	4b0c      	ldr	r3, [pc, #48]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a0b      	ldr	r2, [pc, #44]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f7c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007f7e:	f7fd fa79 	bl	8005474 <HAL_GetTick>
 8007f82:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007f84:	e010      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f86:	f7fd fa75 	bl	8005474 <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d909      	bls.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e075      	b.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007f98:	42470068 	.word	0x42470068
 8007f9c:	40023800 	.word	0x40023800
 8007fa0:	42470070 	.word	0x42470070
 8007fa4:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007fa8:	4b38      	ldr	r3, [pc, #224]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d0e8      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007fb4:	4b36      	ldr	r3, [pc, #216]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fbc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d02f      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d028      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fda:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8008094 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007fde:	2201      	movs	r2, #1
 8007fe0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8008094 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007fe8:	4a29      	ldr	r2, [pc, #164]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007fee:	4b28      	ldr	r3, [pc, #160]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d114      	bne.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007ffa:	f7fd fa3b 	bl	8005474 <HAL_GetTick>
 8007ffe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008000:	e00a      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008002:	f7fd fa37 	bl	8005474 <HAL_GetTick>
 8008006:	4602      	mov	r2, r0
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008010:	4293      	cmp	r3, r2
 8008012:	d901      	bls.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e035      	b.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008018:	4b1d      	ldr	r3, [pc, #116]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800801a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800801c:	f003 0302 	and.w	r3, r3, #2
 8008020:	2b00      	cmp	r3, #0
 8008022:	d0ee      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008028:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800802c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008030:	d10d      	bne.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008032:	4b17      	ldr	r3, [pc, #92]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800803e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008046:	4912      	ldr	r1, [pc, #72]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008048:	4313      	orrs	r3, r2
 800804a:	608b      	str	r3, [r1, #8]
 800804c:	e005      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800804e:	4b10      	ldr	r3, [pc, #64]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	4a0f      	ldr	r2, [pc, #60]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008054:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008058:	6093      	str	r3, [r2, #8]
 800805a:	4b0d      	ldr	r3, [pc, #52]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800805c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008066:	490a      	ldr	r1, [pc, #40]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008068:	4313      	orrs	r3, r2
 800806a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0310 	and.w	r3, r3, #16
 8008074:	2b00      	cmp	r3, #0
 8008076:	d004      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800807e:	4b06      	ldr	r3, [pc, #24]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008080:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	40007000 	.word	0x40007000
 8008090:	40023800 	.word	0x40023800
 8008094:	42470e40 	.word	0x42470e40
 8008098:	424711e0 	.word	0x424711e0

0800809c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e01c      	b.n	80080e8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	795b      	ldrb	r3, [r3, #5]
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d105      	bne.n	80080c4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7fc fcf2 	bl	8004aa8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2202      	movs	r2, #2
 80080c8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f042 0204 	orr.w	r2, r2, #4
 80080d8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	791b      	ldrb	r3, [r3, #4]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d101      	bne.n	800810a <HAL_RNG_GenerateRandomNumber+0x1a>
 8008106:	2302      	movs	r3, #2
 8008108:	e044      	b.n	8008194 <HAL_RNG_GenerateRandomNumber+0xa4>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	795b      	ldrb	r3, [r3, #5]
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b01      	cmp	r3, #1
 8008118:	d133      	bne.n	8008182 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2202      	movs	r2, #2
 800811e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008120:	f7fd f9a8 	bl	8005474 <HAL_GetTick>
 8008124:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008126:	e018      	b.n	800815a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008128:	f7fd f9a4 	bl	8005474 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	2b02      	cmp	r3, #2
 8008134:	d911      	bls.n	800815a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b01      	cmp	r3, #1
 8008142:	d00a      	beq.n	800815a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2202      	movs	r2, #2
 800814e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e01c      	b.n	8008194 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f003 0301 	and.w	r3, r3, #1
 8008164:	2b01      	cmp	r3, #1
 8008166:	d1df      	bne.n	8008128 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689a      	ldr	r2, [r3, #8]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	715a      	strb	r2, [r3, #5]
 8008180:	e004      	b.n	800818c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2204      	movs	r2, #4
 8008186:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	711a      	strb	r2, [r3, #4]

  return status;
 8008192:	7bfb      	ldrb	r3, [r7, #15]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d101      	bne.n	80081ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e07b      	b.n	80082a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d108      	bne.n	80081c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081be:	d009      	beq.n	80081d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	61da      	str	r2, [r3, #28]
 80081c6:	e005      	b.n	80081d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d106      	bne.n	80081f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7fc fc7c 	bl	8004aec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2202      	movs	r2, #2
 80081f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800820a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800821c:	431a      	orrs	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008226:	431a      	orrs	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	f003 0302 	and.w	r3, r3, #2
 8008230:	431a      	orrs	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	431a      	orrs	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008244:	431a      	orrs	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800824e:	431a      	orrs	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a1b      	ldr	r3, [r3, #32]
 8008254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008258:	ea42 0103 	orr.w	r1, r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008260:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	430a      	orrs	r2, r1
 800826a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	0c1b      	lsrs	r3, r3, #16
 8008272:	f003 0104 	and.w	r1, r3, #4
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800827a:	f003 0210 	and.w	r2, r3, #16
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	430a      	orrs	r2, r1
 8008284:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	69da      	ldr	r2, [r3, #28]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008294:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b082      	sub	sp, #8
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d101      	bne.n	80082c0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e01a      	b.n	80082f6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2202      	movs	r2, #2
 80082c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082d6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7fc fc4f 	bl	8004b7c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b088      	sub	sp, #32
 8008302:	af00      	add	r7, sp, #0
 8008304:	60f8      	str	r0, [r7, #12]
 8008306:	60b9      	str	r1, [r7, #8]
 8008308:	603b      	str	r3, [r7, #0]
 800830a:	4613      	mov	r3, r2
 800830c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800830e:	f7fd f8b1 	bl	8005474 <HAL_GetTick>
 8008312:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008314:	88fb      	ldrh	r3, [r7, #6]
 8008316:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b01      	cmp	r3, #1
 8008322:	d001      	beq.n	8008328 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008324:	2302      	movs	r3, #2
 8008326:	e12a      	b.n	800857e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d002      	beq.n	8008334 <HAL_SPI_Transmit+0x36>
 800832e:	88fb      	ldrh	r3, [r7, #6]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d101      	bne.n	8008338 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e122      	b.n	800857e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800833e:	2b01      	cmp	r3, #1
 8008340:	d101      	bne.n	8008346 <HAL_SPI_Transmit+0x48>
 8008342:	2302      	movs	r3, #2
 8008344:	e11b      	b.n	800857e <HAL_SPI_Transmit+0x280>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2203      	movs	r2, #3
 8008352:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	88fa      	ldrh	r2, [r7, #6]
 8008366:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	88fa      	ldrh	r2, [r7, #6]
 800836c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008394:	d10f      	bne.n	80083b6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80083b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083c0:	2b40      	cmp	r3, #64	@ 0x40
 80083c2:	d007      	beq.n	80083d4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083dc:	d152      	bne.n	8008484 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d002      	beq.n	80083ec <HAL_SPI_Transmit+0xee>
 80083e6:	8b7b      	ldrh	r3, [r7, #26]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d145      	bne.n	8008478 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083f0:	881a      	ldrh	r2, [r3, #0]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083fc:	1c9a      	adds	r2, r3, #2
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008406:	b29b      	uxth	r3, r3
 8008408:	3b01      	subs	r3, #1
 800840a:	b29a      	uxth	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008410:	e032      	b.n	8008478 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f003 0302 	and.w	r3, r3, #2
 800841c:	2b02      	cmp	r3, #2
 800841e:	d112      	bne.n	8008446 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008424:	881a      	ldrh	r2, [r3, #0]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008430:	1c9a      	adds	r2, r3, #2
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800843a:	b29b      	uxth	r3, r3
 800843c:	3b01      	subs	r3, #1
 800843e:	b29a      	uxth	r2, r3
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008444:	e018      	b.n	8008478 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008446:	f7fd f815 	bl	8005474 <HAL_GetTick>
 800844a:	4602      	mov	r2, r0
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	429a      	cmp	r2, r3
 8008454:	d803      	bhi.n	800845e <HAL_SPI_Transmit+0x160>
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845c:	d102      	bne.n	8008464 <HAL_SPI_Transmit+0x166>
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d109      	bne.n	8008478 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	e082      	b.n	800857e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800847c:	b29b      	uxth	r3, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1c7      	bne.n	8008412 <HAL_SPI_Transmit+0x114>
 8008482:	e053      	b.n	800852c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <HAL_SPI_Transmit+0x194>
 800848c:	8b7b      	ldrh	r3, [r7, #26]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d147      	bne.n	8008522 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	330c      	adds	r3, #12
 800849c:	7812      	ldrb	r2, [r2, #0]
 800849e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084a4:	1c5a      	adds	r2, r3, #1
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	3b01      	subs	r3, #1
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80084b8:	e033      	b.n	8008522 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f003 0302 	and.w	r3, r3, #2
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d113      	bne.n	80084f0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	330c      	adds	r3, #12
 80084d2:	7812      	ldrb	r2, [r2, #0]
 80084d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	3b01      	subs	r3, #1
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	86da      	strh	r2, [r3, #54]	@ 0x36
 80084ee:	e018      	b.n	8008522 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084f0:	f7fc ffc0 	bl	8005474 <HAL_GetTick>
 80084f4:	4602      	mov	r2, r0
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d803      	bhi.n	8008508 <HAL_SPI_Transmit+0x20a>
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008506:	d102      	bne.n	800850e <HAL_SPI_Transmit+0x210>
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d109      	bne.n	8008522 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e02d      	b.n	800857e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008526:	b29b      	uxth	r3, r3
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1c6      	bne.n	80084ba <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800852c:	69fa      	ldr	r2, [r7, #28]
 800852e:	6839      	ldr	r1, [r7, #0]
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 f8bf 	bl	80086b4 <SPI_EndRxTxTransaction>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d002      	beq.n	8008542 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2220      	movs	r2, #32
 8008540:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10a      	bne.n	8008560 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800854a:	2300      	movs	r3, #0
 800854c:	617b      	str	r3, [r7, #20]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	617b      	str	r3, [r7, #20]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	617b      	str	r3, [r7, #20]
 800855e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e000      	b.n	800857e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800857c:	2300      	movs	r3, #0
  }
}
 800857e:	4618      	mov	r0, r3
 8008580:	3720      	adds	r7, #32
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8008586:	b480      	push	{r7}
 8008588:	b083      	sub	sp, #12
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008594:	b2db      	uxtb	r3, r3
}
 8008596:	4618      	mov	r0, r3
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
	...

080085a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b088      	sub	sp, #32
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	603b      	str	r3, [r7, #0]
 80085b0:	4613      	mov	r3, r2
 80085b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80085b4:	f7fc ff5e 	bl	8005474 <HAL_GetTick>
 80085b8:	4602      	mov	r2, r0
 80085ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085bc:	1a9b      	subs	r3, r3, r2
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	4413      	add	r3, r2
 80085c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80085c4:	f7fc ff56 	bl	8005474 <HAL_GetTick>
 80085c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80085ca:	4b39      	ldr	r3, [pc, #228]	@ (80086b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	015b      	lsls	r3, r3, #5
 80085d0:	0d1b      	lsrs	r3, r3, #20
 80085d2:	69fa      	ldr	r2, [r7, #28]
 80085d4:	fb02 f303 	mul.w	r3, r2, r3
 80085d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085da:	e054      	b.n	8008686 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e2:	d050      	beq.n	8008686 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80085e4:	f7fc ff46 	bl	8005474 <HAL_GetTick>
 80085e8:	4602      	mov	r2, r0
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	69fa      	ldr	r2, [r7, #28]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d902      	bls.n	80085fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d13d      	bne.n	8008676 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008608:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008612:	d111      	bne.n	8008638 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800861c:	d004      	beq.n	8008628 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008626:	d107      	bne.n	8008638 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008636:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800863c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008640:	d10f      	bne.n	8008662 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008650:	601a      	str	r2, [r3, #0]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008660:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e017      	b.n	80086a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800867c:	2300      	movs	r3, #0
 800867e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	3b01      	subs	r3, #1
 8008684:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	4013      	ands	r3, r2
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	429a      	cmp	r2, r3
 8008694:	bf0c      	ite	eq
 8008696:	2301      	moveq	r3, #1
 8008698:	2300      	movne	r3, #0
 800869a:	b2db      	uxtb	r3, r3
 800869c:	461a      	mov	r2, r3
 800869e:	79fb      	ldrb	r3, [r7, #7]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d19b      	bne.n	80085dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3720      	adds	r7, #32
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	20000018 	.word	0x20000018

080086b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b088      	sub	sp, #32
 80086b8:	af02      	add	r7, sp, #8
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2201      	movs	r2, #1
 80086c8:	2102      	movs	r1, #2
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f7ff ff6a 	bl	80085a4 <SPI_WaitFlagStateUntilTimeout>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d007      	beq.n	80086e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086da:	f043 0220 	orr.w	r2, r3, #32
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e032      	b.n	800874c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80086e6:	4b1b      	ldr	r3, [pc, #108]	@ (8008754 <SPI_EndRxTxTransaction+0xa0>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008758 <SPI_EndRxTxTransaction+0xa4>)
 80086ec:	fba2 2303 	umull	r2, r3, r2, r3
 80086f0:	0d5b      	lsrs	r3, r3, #21
 80086f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80086f6:	fb02 f303 	mul.w	r3, r2, r3
 80086fa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008704:	d112      	bne.n	800872c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2200      	movs	r2, #0
 800870e:	2180      	movs	r1, #128	@ 0x80
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f7ff ff47 	bl	80085a4 <SPI_WaitFlagStateUntilTimeout>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d016      	beq.n	800874a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008720:	f043 0220 	orr.w	r2, r3, #32
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	e00f      	b.n	800874c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00a      	beq.n	8008748 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	3b01      	subs	r3, #1
 8008736:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008742:	2b80      	cmp	r3, #128	@ 0x80
 8008744:	d0f2      	beq.n	800872c <SPI_EndRxTxTransaction+0x78>
 8008746:	e000      	b.n	800874a <SPI_EndRxTxTransaction+0x96>
        break;
 8008748:	bf00      	nop
  }

  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3718      	adds	r7, #24
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	20000018 	.word	0x20000018
 8008758:	165e9f81 	.word	0x165e9f81

0800875c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d101      	bne.n	800876e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e041      	b.n	80087f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	d106      	bne.n	8008788 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f7fc fa18 	bl	8004bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2202      	movs	r2, #2
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	3304      	adds	r3, #4
 8008798:	4619      	mov	r1, r3
 800879a:	4610      	mov	r0, r2
 800879c:	f000 f89e 	bl	80088dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b01      	cmp	r3, #1
 800880e:	d001      	beq.n	8008814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e04e      	b.n	80088b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2202      	movs	r2, #2
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68da      	ldr	r2, [r3, #12]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0201 	orr.w	r2, r2, #1
 800882a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a23      	ldr	r2, [pc, #140]	@ (80088c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d022      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800883e:	d01d      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a1f      	ldr	r2, [pc, #124]	@ (80088c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d018      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a1e      	ldr	r2, [pc, #120]	@ (80088c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d013      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a1c      	ldr	r2, [pc, #112]	@ (80088cc <HAL_TIM_Base_Start_IT+0xd0>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d00e      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a1b      	ldr	r2, [pc, #108]	@ (80088d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d009      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a19      	ldr	r2, [pc, #100]	@ (80088d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d004      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a18      	ldr	r2, [pc, #96]	@ (80088d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d111      	bne.n	80088a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f003 0307 	and.w	r3, r3, #7
 8008886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b06      	cmp	r3, #6
 800888c:	d010      	beq.n	80088b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f042 0201 	orr.w	r2, r2, #1
 800889c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800889e:	e007      	b.n	80088b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f042 0201 	orr.w	r2, r2, #1
 80088ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	40010000 	.word	0x40010000
 80088c4:	40000400 	.word	0x40000400
 80088c8:	40000800 	.word	0x40000800
 80088cc:	40000c00 	.word	0x40000c00
 80088d0:	40010400 	.word	0x40010400
 80088d4:	40014000 	.word	0x40014000
 80088d8:	40001800 	.word	0x40001800

080088dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a46      	ldr	r2, [pc, #280]	@ (8008a08 <TIM_Base_SetConfig+0x12c>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d013      	beq.n	800891c <TIM_Base_SetConfig+0x40>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088fa:	d00f      	beq.n	800891c <TIM_Base_SetConfig+0x40>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a43      	ldr	r2, [pc, #268]	@ (8008a0c <TIM_Base_SetConfig+0x130>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d00b      	beq.n	800891c <TIM_Base_SetConfig+0x40>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a42      	ldr	r2, [pc, #264]	@ (8008a10 <TIM_Base_SetConfig+0x134>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d007      	beq.n	800891c <TIM_Base_SetConfig+0x40>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a41      	ldr	r2, [pc, #260]	@ (8008a14 <TIM_Base_SetConfig+0x138>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d003      	beq.n	800891c <TIM_Base_SetConfig+0x40>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a40      	ldr	r2, [pc, #256]	@ (8008a18 <TIM_Base_SetConfig+0x13c>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d108      	bne.n	800892e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	4313      	orrs	r3, r2
 800892c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a35      	ldr	r2, [pc, #212]	@ (8008a08 <TIM_Base_SetConfig+0x12c>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d02b      	beq.n	800898e <TIM_Base_SetConfig+0xb2>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800893c:	d027      	beq.n	800898e <TIM_Base_SetConfig+0xb2>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a32      	ldr	r2, [pc, #200]	@ (8008a0c <TIM_Base_SetConfig+0x130>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d023      	beq.n	800898e <TIM_Base_SetConfig+0xb2>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a31      	ldr	r2, [pc, #196]	@ (8008a10 <TIM_Base_SetConfig+0x134>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d01f      	beq.n	800898e <TIM_Base_SetConfig+0xb2>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a30      	ldr	r2, [pc, #192]	@ (8008a14 <TIM_Base_SetConfig+0x138>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d01b      	beq.n	800898e <TIM_Base_SetConfig+0xb2>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a2f      	ldr	r2, [pc, #188]	@ (8008a18 <TIM_Base_SetConfig+0x13c>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d017      	beq.n	800898e <TIM_Base_SetConfig+0xb2>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a2e      	ldr	r2, [pc, #184]	@ (8008a1c <TIM_Base_SetConfig+0x140>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d013      	beq.n	800898e <TIM_Base_SetConfig+0xb2>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a2d      	ldr	r2, [pc, #180]	@ (8008a20 <TIM_Base_SetConfig+0x144>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d00f      	beq.n	800898e <TIM_Base_SetConfig+0xb2>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a2c      	ldr	r2, [pc, #176]	@ (8008a24 <TIM_Base_SetConfig+0x148>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d00b      	beq.n	800898e <TIM_Base_SetConfig+0xb2>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a2b      	ldr	r2, [pc, #172]	@ (8008a28 <TIM_Base_SetConfig+0x14c>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d007      	beq.n	800898e <TIM_Base_SetConfig+0xb2>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a2a      	ldr	r2, [pc, #168]	@ (8008a2c <TIM_Base_SetConfig+0x150>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d003      	beq.n	800898e <TIM_Base_SetConfig+0xb2>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a29      	ldr	r2, [pc, #164]	@ (8008a30 <TIM_Base_SetConfig+0x154>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d108      	bne.n	80089a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	4313      	orrs	r3, r2
 800899e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	689a      	ldr	r2, [r3, #8]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a10      	ldr	r2, [pc, #64]	@ (8008a08 <TIM_Base_SetConfig+0x12c>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d003      	beq.n	80089d4 <TIM_Base_SetConfig+0xf8>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a12      	ldr	r2, [pc, #72]	@ (8008a18 <TIM_Base_SetConfig+0x13c>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d103      	bne.n	80089dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	691a      	ldr	r2, [r3, #16]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d105      	bne.n	80089fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	f023 0201 	bic.w	r2, r3, #1
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	611a      	str	r2, [r3, #16]
  }
}
 80089fa:	bf00      	nop
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	40010000 	.word	0x40010000
 8008a0c:	40000400 	.word	0x40000400
 8008a10:	40000800 	.word	0x40000800
 8008a14:	40000c00 	.word	0x40000c00
 8008a18:	40010400 	.word	0x40010400
 8008a1c:	40014000 	.word	0x40014000
 8008a20:	40014400 	.word	0x40014400
 8008a24:	40014800 	.word	0x40014800
 8008a28:	40001800 	.word	0x40001800
 8008a2c:	40001c00 	.word	0x40001c00
 8008a30:	40002000 	.word	0x40002000

08008a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d101      	bne.n	8008a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a48:	2302      	movs	r3, #2
 8008a4a:	e05a      	b.n	8008b02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2202      	movs	r2, #2
 8008a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a21      	ldr	r2, [pc, #132]	@ (8008b10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d022      	beq.n	8008ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a98:	d01d      	beq.n	8008ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8008b14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d018      	beq.n	8008ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8008b18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d013      	beq.n	8008ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a1a      	ldr	r2, [pc, #104]	@ (8008b1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d00e      	beq.n	8008ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a18      	ldr	r2, [pc, #96]	@ (8008b20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d009      	beq.n	8008ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a17      	ldr	r2, [pc, #92]	@ (8008b24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d004      	beq.n	8008ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a15      	ldr	r2, [pc, #84]	@ (8008b28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d10c      	bne.n	8008af0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008adc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3714      	adds	r7, #20
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	40010000 	.word	0x40010000
 8008b14:	40000400 	.word	0x40000400
 8008b18:	40000800 	.word	0x40000800
 8008b1c:	40000c00 	.word	0x40000c00
 8008b20:	40010400 	.word	0x40010400
 8008b24:	40014000 	.word	0x40014000
 8008b28:	40001800 	.word	0x40001800

08008b2c <memset>:
 8008b2c:	4402      	add	r2, r0
 8008b2e:	4603      	mov	r3, r0
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d100      	bne.n	8008b36 <memset+0xa>
 8008b34:	4770      	bx	lr
 8008b36:	f803 1b01 	strb.w	r1, [r3], #1
 8008b3a:	e7f9      	b.n	8008b30 <memset+0x4>

08008b3c <__libc_init_array>:
 8008b3c:	b570      	push	{r4, r5, r6, lr}
 8008b3e:	4d0d      	ldr	r5, [pc, #52]	@ (8008b74 <__libc_init_array+0x38>)
 8008b40:	4c0d      	ldr	r4, [pc, #52]	@ (8008b78 <__libc_init_array+0x3c>)
 8008b42:	1b64      	subs	r4, r4, r5
 8008b44:	10a4      	asrs	r4, r4, #2
 8008b46:	2600      	movs	r6, #0
 8008b48:	42a6      	cmp	r6, r4
 8008b4a:	d109      	bne.n	8008b60 <__libc_init_array+0x24>
 8008b4c:	4d0b      	ldr	r5, [pc, #44]	@ (8008b7c <__libc_init_array+0x40>)
 8008b4e:	4c0c      	ldr	r4, [pc, #48]	@ (8008b80 <__libc_init_array+0x44>)
 8008b50:	f000 f826 	bl	8008ba0 <_init>
 8008b54:	1b64      	subs	r4, r4, r5
 8008b56:	10a4      	asrs	r4, r4, #2
 8008b58:	2600      	movs	r6, #0
 8008b5a:	42a6      	cmp	r6, r4
 8008b5c:	d105      	bne.n	8008b6a <__libc_init_array+0x2e>
 8008b5e:	bd70      	pop	{r4, r5, r6, pc}
 8008b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b64:	4798      	blx	r3
 8008b66:	3601      	adds	r6, #1
 8008b68:	e7ee      	b.n	8008b48 <__libc_init_array+0xc>
 8008b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b6e:	4798      	blx	r3
 8008b70:	3601      	adds	r6, #1
 8008b72:	e7f2      	b.n	8008b5a <__libc_init_array+0x1e>
 8008b74:	0800a794 	.word	0x0800a794
 8008b78:	0800a794 	.word	0x0800a794
 8008b7c:	0800a794 	.word	0x0800a794
 8008b80:	0800a798 	.word	0x0800a798

08008b84 <memcpy>:
 8008b84:	440a      	add	r2, r1
 8008b86:	4291      	cmp	r1, r2
 8008b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b8c:	d100      	bne.n	8008b90 <memcpy+0xc>
 8008b8e:	4770      	bx	lr
 8008b90:	b510      	push	{r4, lr}
 8008b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b9a:	4291      	cmp	r1, r2
 8008b9c:	d1f9      	bne.n	8008b92 <memcpy+0xe>
 8008b9e:	bd10      	pop	{r4, pc}

08008ba0 <_init>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	bf00      	nop
 8008ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba6:	bc08      	pop	{r3}
 8008ba8:	469e      	mov	lr, r3
 8008baa:	4770      	bx	lr

08008bac <_fini>:
 8008bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bae:	bf00      	nop
 8008bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bb2:	bc08      	pop	{r3}
 8008bb4:	469e      	mov	lr, r3
 8008bb6:	4770      	bx	lr
