
DAllenFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000807c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bd4  08008228  08008228  00009228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dfc  08009dfc  0000b024  2**0
                  CONTENTS
  4 .ARM          00000008  08009dfc  08009dfc  0000adfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e04  08009e04  0000b024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e04  08009e04  0000ae04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e08  08009e08  0000ae08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08009e0c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b024  2**0
                  CONTENTS
 10 .bss          00025de0  20000024  20000024  0000b024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025e04  20025e04  0000b024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016024  00000000  00000000  0000b054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003915  00000000  00000000  00021078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001550  00000000  00000000  00024990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001066  00000000  00000000  00025ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000278c1  00000000  00000000  00026f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b946  00000000  00000000  0004e807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3142  00000000  00000000  0006a14d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014d28f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058fc  00000000  00000000  0014d2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00152bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008210 	.word	0x08008210

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08008210 	.word	0x08008210

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f004 fa56 	bl	8004990 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f002 fca2 	bl	8002e2c <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f002 fc5f 	bl	8002dac <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f002 fd65 	bl	8002fc0 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80004f6:	f002 fe3b 	bl	8003170 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80004fa:	4b05      	ldr	r3, [pc, #20]	@ (8000510 <ApplicationInit+0x34>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 8000500:	f000 f810 	bl	8000524 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED
	#endif // COMPILE_TOUCH_FUNCTIONS
	applicationButtonInit();
 8000504:	f000 f8ca 	bl	800069c <applicationButtonInit>
	game_start_screen();
 8000508:	f002 feb4 	bl	8003274 <game_start_screen>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000088 	.word	0x20000088

08000514 <Application_game_inst>:

void Application_game_inst(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	game_init();
 8000518:	f002 fe5c 	bl	80031d4 <game_init>
	start_timer();
 800051c:	f000 f928 	bl	8000770 <start_timer>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 8000538:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800053c:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 800053e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000542:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000548:	2302      	movs	r3, #2
 800054a:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	4b0d      	ldr	r3, [pc, #52]	@ (8000588 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000554:	4a0c      	ldr	r2, [pc, #48]	@ (8000588 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	6313      	str	r3, [r2, #48]	@ 0x30
 800055c:	4b0a      	ldr	r3, [pc, #40]	@ (8000588 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800055e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000560:	f003 0301 	and.w	r3, r3, #1
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	4619      	mov	r1, r3
 800056c:	4807      	ldr	r0, [pc, #28]	@ (800058c <LCDTouchScreenInterruptGPIOInit+0x68>)
 800056e:	f004 fc71 	bl	8004e54 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000572:	2028      	movs	r0, #40	@ 0x28
 8000574:	f004 fc1f 	bl	8004db6 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000578:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 800057a:	4a06      	ldr	r2, [pc, #24]	@ (8000594 <LCDTouchScreenInterruptGPIOInit+0x70>)
 800057c:	601a      	str	r2, [r3, #0]

}
 800057e:	bf00      	nop
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40023800 	.word	0x40023800
 800058c:	40020000 	.word	0x40020000
 8000590:	20000090 	.word	0x20000090
 8000594:	0600000f 	.word	0x0600000f

08000598 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 800059e:	2028      	movs	r0, #40	@ 0x28
 80005a0:	f004 fc17 	bl	8004dd2 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 80005a4:	2300      	movs	r3, #0
 80005a6:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 80005a8:	4b38      	ldr	r3, [pc, #224]	@ (800068c <EXTI15_10_IRQHandler+0xf4>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005ae:	e006      	b.n	80005be <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 80005b0:	204c      	movs	r0, #76	@ 0x4c
 80005b2:	f004 f856 	bl	8004662 <STMPE811_Read>
 80005b6:	4603      	mov	r3, r0
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b34      	ldr	r3, [pc, #208]	@ (800068c <EXTI15_10_IRQHandler+0xf4>)
 80005bc:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005be:	4b33      	ldr	r3, [pc, #204]	@ (800068c <EXTI15_10_IRQHandler+0xf4>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f4      	beq.n	80005b0 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 80005c6:	200a      	movs	r0, #10
 80005c8:	f002 fde4 	bl	8003194 <ReadRegisterFromTouchModule>
 80005cc:	4603      	mov	r3, r0
 80005ce:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 80005d0:	2100      	movs	r1, #0
 80005d2:	200a      	movs	r0, #10
 80005d4:	f002 fdec 	bl	80031b0 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 80005d8:	200b      	movs	r0, #11
 80005da:	f002 fddb 	bl	8003194 <ReadRegisterFromTouchModule>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <EXTI15_10_IRQHandler+0xf8>)
 80005e4:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 80005e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000690 <EXTI15_10_IRQHandler+0xf8>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 80005f0:	797b      	ldrb	r3, [r7, #5]
 80005f2:	4619      	mov	r1, r3
 80005f4:	200b      	movs	r0, #11
 80005f6:	f002 fddb 	bl	80031b0 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 80005fa:	2040      	movs	r0, #64	@ 0x40
 80005fc:	f002 fdca 	bl	8003194 <ReadRegisterFromTouchModule>
 8000600:	4603      	mov	r3, r0
 8000602:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 8000604:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000608:	2b00      	cmp	r3, #0
 800060a:	da01      	bge.n	8000610 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 800060c:	2301      	movs	r3, #1
 800060e:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d019      	beq.n	800064a <EXTI15_10_IRQHandler+0xb2>
	{
		if(is_start_screen())
 8000616:	f002 fe3b 	bl	8003290 <is_start_screen>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <EXTI15_10_IRQHandler+0x8c>
		{
			Application_game_inst();
 8000620:	f7ff ff78 	bl	8000514 <Application_game_inst>
		}
		//printf("\nPressed");
		// May need to do numerous retries? 
		DetermineTouchPosition(&StaticTouchData);
 8000624:	481b      	ldr	r0, [pc, #108]	@ (8000694 <EXTI15_10_IRQHandler+0xfc>)
 8000626:	f002 fdaa 	bl	800317e <DetermineTouchPosition>
		/* Touch valid */
		//printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
		if(StaticTouchData.x > 120 && !is_start_screen())
 800062a:	4b1a      	ldr	r3, [pc, #104]	@ (8000694 <EXTI15_10_IRQHandler+0xfc>)
 800062c:	881b      	ldrh	r3, [r3, #0]
 800062e:	2b78      	cmp	r3, #120	@ 0x78
 8000630:	d908      	bls.n	8000644 <EXTI15_10_IRQHandler+0xac>
 8000632:	f002 fe2d 	bl	8003290 <is_start_screen>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d103      	bne.n	8000644 <EXTI15_10_IRQHandler+0xac>
		{
			game_move(RIGHT);
 800063c:	2001      	movs	r0, #1
 800063e:	f002 ff0f 	bl	8003460 <game_move>
 8000642:	e002      	b.n	800064a <EXTI15_10_IRQHandler+0xb2>
		}
		else
		{
			game_move(LEFT);
 8000644:	2000      	movs	r0, #0
 8000646:	f002 ff0b 	bl	8003460 <game_move>
		/* Touch not pressed */
//		printf("\nNot pressed \n");
//		LCD_Clear(0, LCD_COLOR_GREEN);
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 800064a:	2101      	movs	r1, #1
 800064c:	204b      	movs	r0, #75	@ 0x4b
 800064e:	f004 f819 	bl	8004684 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 8000652:	2100      	movs	r1, #0
 8000654:	204b      	movs	r0, #75	@ 0x4b
 8000656:	f004 f815 	bl	8004684 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 800065a:	79bb      	ldrb	r3, [r7, #6]
 800065c:	4619      	mov	r1, r3
 800065e:	200a      	movs	r0, #10
 8000660:	f002 fda6 	bl	80031b0 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000664:	2103      	movs	r1, #3
 8000666:	480c      	ldr	r0, [pc, #48]	@ (8000698 <EXTI15_10_IRQHandler+0x100>)
 8000668:	f004 fbdc 	bl	8004e24 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800066c:	2028      	movs	r0, #40	@ 0x28
 800066e:	f004 fbca 	bl	8004e06 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000672:	2028      	movs	r0, #40	@ 0x28
 8000674:	f004 fb9f 	bl	8004db6 <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000678:	797b      	ldrb	r3, [r7, #5]
 800067a:	4619      	mov	r1, r3
 800067c:	200b      	movs	r0, #11
 800067e:	f002 fd97 	bl	80031b0 <WriteDataToTouchModule>

}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	2000009c 	.word	0x2000009c
 8000690:	20000098 	.word	0x20000098
 8000694:	20000088 	.word	0x20000088
 8000698:	20000090 	.word	0x20000090

0800069c <applicationButtonInit>:
#endif // TOUCH_INTERRUPT_ENABLED

void applicationButtonInit()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	ButtonInit();
 80006a0:	f002 fa7a 	bl	8002b98 <ButtonInit>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80006ac:	2006      	movs	r0, #6
 80006ae:	f004 fb90 	bl	8004dd2 <HAL_NVIC_DisableIRQ>
	//EXTI_HandleTypeDef* line = {0};
	HAL_EXTI_ClearPending(EXTI_GPIOA, EXTI_TRIGGER_RISING);
 80006b2:	2101      	movs	r1, #1
 80006b4:	2000      	movs	r0, #0
 80006b6:	f004 fbb5 	bl	8004e24 <HAL_EXTI_ClearPending>
	//IRQ_enable(EXTI0_IRQ_NUMBER);
	game_rotate();
 80006ba:	f002 fe93 	bl	80033e4 <game_rotate>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006be:	2006      	movs	r0, #6
 80006c0:	f004 fb79 	bl	8004db6 <HAL_NVIC_EnableIRQ>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <MX_TIM7_Init>:

static void MX_TIM7_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ce:	463b      	mov	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <MX_TIM7_Init+0x68>)
 80006d8:	4a16      	ldr	r2, [pc, #88]	@ (8000734 <MX_TIM7_Init+0x6c>)
 80006da:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = PRESCALAR_VAL;
 80006dc:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_TIM7_Init+0x68>)
 80006de:	f240 128f 	movw	r2, #399	@ 0x18f
 80006e2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_TIM7_Init+0x68>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = ARR_VAL;
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_TIM7_Init+0x68>)
 80006ec:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80006f0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_TIM7_Init+0x68>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80006f8:	480d      	ldr	r0, [pc, #52]	@ (8000730 <MX_TIM7_Init+0x68>)
 80006fa:	f007 fb67 	bl	8007dcc <HAL_TIM_Base_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d002      	beq.n	800070a <MX_TIM7_Init+0x42>
  {
    APPLICATION_ASSERT(1);
 8000704:	2001      	movs	r0, #1
 8000706:	f002 fa77 	bl	8002bf8 <APPLICATION_ASSERT>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000712:	463b      	mov	r3, r7
 8000714:	4619      	mov	r1, r3
 8000716:	4806      	ldr	r0, [pc, #24]	@ (8000730 <MX_TIM7_Init+0x68>)
 8000718:	f007 fcc4 	bl	80080a4 <HAL_TIMEx_MasterConfigSynchronization>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d002      	beq.n	8000728 <MX_TIM7_Init+0x60>
  {
	APPLICATION_ASSERT(1);
 8000722:	2001      	movs	r0, #1
 8000724:	f002 fa68 	bl	8002bf8 <APPLICATION_ASSERT>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000040 	.word	0x20000040
 8000734:	40001400 	.word	0x40001400

08000738 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(TIM7_IRQn);
 800073c:	2037      	movs	r0, #55	@ 0x37
 800073e:	f004 fb48 	bl	8004dd2 <HAL_NVIC_DisableIRQ>
	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 8000742:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <TIM7_IRQHandler+0x34>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f06f 0201 	mvn.w	r2, #1
 800074a:	611a      	str	r2, [r3, #16]
	if(!game_finished())
 800074c:	f002 fed8 	bl	8003500 <game_finished>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d102      	bne.n	800075c <TIM7_IRQHandler+0x24>
	{
		game_drop();
 8000756:	f002 fdb5 	bl	80032c4 <game_drop>
 800075a:	e001      	b.n	8000760 <TIM7_IRQHandler+0x28>
	}
	else
	{
		game_over();
 800075c:	f002 fda4 	bl	80032a8 <game_over>
	}
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000760:	2037      	movs	r0, #55	@ 0x37
 8000762:	f004 fb28 	bl	8004db6 <HAL_NVIC_EnableIRQ>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000040 	.word	0x20000040

08000770 <start_timer>:

void start_timer()
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	MX_TIM7_Init();
 8000774:	f7ff ffa8 	bl	80006c8 <MX_TIM7_Init>
	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <start_timer+0x24>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f06f 0201 	mvn.w	r2, #1
 8000780:	611a      	str	r2, [r3, #16]
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000782:	2037      	movs	r0, #55	@ 0x37
 8000784:	f004 fb17 	bl	8004db6 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim7);
 8000788:	4802      	ldr	r0, [pc, #8]	@ (8000794 <start_timer+0x24>)
 800078a:	f007 fb6f 	bl	8007e6c <HAL_TIM_Base_Start_IT>
	//((&htim7)->Instance->SR) |= 0;
	//__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000040 	.word	0x20000040

08000798 <map_draw>:

static void MX_RNG_Init(void);
static void MX_RNG_Deinit(void);

void map_draw()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
	//uint16_t y_len = LCD_PIXEL_HEIGHT;
	uint16_t x_len = LCD_PIXEL_WIDTH;
 800079e:	23f0      	movs	r3, #240	@ 0xf0
 80007a0:	80fb      	strh	r3, [r7, #6]
	//edges of 5 pixels in width
	uint16_t x = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	80bb      	strh	r3, [r7, #4]

	//VERTICAL
	for(int i = 1; i<LCD_PIXEL_WIDTH; i+=BLOCK_WIDTH)
 80007a6:	2301      	movs	r3, #1
 80007a8:	61fb      	str	r3, [r7, #28]
 80007aa:	e00d      	b.n	80007c8 <map_draw+0x30>
	{
		LCD_Draw_Vertical_Line(EDGE_WIDTH+i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	3304      	adds	r3, #4
 80007b2:	b298      	uxth	r0, r3
 80007b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b8:	f240 1235 	movw	r2, #309	@ 0x135
 80007bc:	210b      	movs	r1, #11
 80007be:	f002 fbb1 	bl	8002f24 <LCD_Draw_Vertical_Line>
	for(int i = 1; i<LCD_PIXEL_WIDTH; i+=BLOCK_WIDTH)
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3317      	adds	r3, #23
 80007c6:	61fb      	str	r3, [r7, #28]
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	2bef      	cmp	r3, #239	@ 0xef
 80007cc:	ddee      	ble.n	80007ac <map_draw+0x14>
	}
	for(int i = 1; i<=EDGE_WIDTH; i++)
 80007ce:	2301      	movs	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
 80007d2:	e00b      	b.n	80007ec <map_draw+0x54>
	{
		LCD_Draw_Vertical_Line(i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	b298      	uxth	r0, r3
 80007d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007dc:	f240 1235 	movw	r2, #309	@ 0x135
 80007e0:	210b      	movs	r1, #11
 80007e2:	f002 fb9f 	bl	8002f24 <LCD_Draw_Vertical_Line>
	for(int i = 1; i<=EDGE_WIDTH; i++)
 80007e6:	69bb      	ldr	r3, [r7, #24]
 80007e8:	3301      	adds	r3, #1
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	ddf0      	ble.n	80007d4 <map_draw+0x3c>
	}
	for(int i = LCD_PIXEL_WIDTH-EDGE_WIDTH; i<=LCD_PIXEL_WIDTH; i++)
 80007f2:	23ec      	movs	r3, #236	@ 0xec
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	e00b      	b.n	8000810 <map_draw+0x78>
	{
		LCD_Draw_Vertical_Line(i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	b298      	uxth	r0, r3
 80007fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000800:	f240 1235 	movw	r2, #309	@ 0x135
 8000804:	210b      	movs	r1, #11
 8000806:	f002 fb8d 	bl	8002f24 <LCD_Draw_Vertical_Line>
	for(int i = LCD_PIXEL_WIDTH-EDGE_WIDTH; i<=LCD_PIXEL_WIDTH; i++)
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	2bf0      	cmp	r3, #240	@ 0xf0
 8000814:	ddf0      	ble.n	80007f8 <map_draw+0x60>
	}

	//HORIZONTAL
	for(int i = 1; i<MAP_HEIGHT; i+=BLOCK_WIDTH)
 8000816:	2301      	movs	r3, #1
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	e00c      	b.n	8000836 <map_draw+0x9e>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+EDGE_WIDTH+i, x_len, LCD_COLOR_WHITE);
 800081c:	693b      	ldr	r3, [r7, #16]
 800081e:	b29b      	uxth	r3, r3
 8000820:	330f      	adds	r3, #15
 8000822:	b299      	uxth	r1, r3
 8000824:	88fa      	ldrh	r2, [r7, #6]
 8000826:	88b8      	ldrh	r0, [r7, #4]
 8000828:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800082c:	f002 fba1 	bl	8002f72 <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<MAP_HEIGHT; i+=BLOCK_WIDTH)
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	3317      	adds	r3, #23
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800083c:	ddee      	ble.n	800081c <map_draw+0x84>
	}
	for(int i = 0; i<=EDGE_WIDTH; i++)
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	e00c      	b.n	800085e <map_draw+0xc6>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+i, x_len, LCD_COLOR_WHITE);
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	b29b      	uxth	r3, r3
 8000848:	330b      	adds	r3, #11
 800084a:	b299      	uxth	r1, r3
 800084c:	88fa      	ldrh	r2, [r7, #6]
 800084e:	88b8      	ldrh	r0, [r7, #4]
 8000850:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000854:	f002 fb8d 	bl	8002f72 <LCD_Draw_Horizontal_Line>
	for(int i = 0; i<=EDGE_WIDTH; i++)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	3301      	adds	r3, #1
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	2b04      	cmp	r3, #4
 8000862:	ddef      	ble.n	8000844 <map_draw+0xac>
	}
	for(int i = MAP_HEIGHT-EDGE_WIDTH; i<=MAP_HEIGHT; i++)
 8000864:	f240 1331 	movw	r3, #305	@ 0x131
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	e00c      	b.n	8000886 <map_draw+0xee>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+i, x_len, LCD_COLOR_WHITE);
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	b29b      	uxth	r3, r3
 8000870:	330b      	adds	r3, #11
 8000872:	b299      	uxth	r1, r3
 8000874:	88fa      	ldrh	r2, [r7, #6]
 8000876:	88b8      	ldrh	r0, [r7, #4]
 8000878:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800087c:	f002 fb79 	bl	8002f72 <LCD_Draw_Horizontal_Line>
	for(int i = MAP_HEIGHT-EDGE_WIDTH; i<=MAP_HEIGHT; i++)
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	3301      	adds	r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 800088c:	dbee      	blt.n	800086c <map_draw+0xd4>
	}
}
 800088e:	bf00      	nop
 8000890:	bf00      	nop
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <start_screen>:

void start_screen()
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
	//uint16_t play_x = 68; //to 172
	uint16_t play_y = 106; //to 184
 800089e:	236a      	movs	r3, #106	@ 0x6a
 80008a0:	80fb      	strh	r3, [r7, #6]
	//uint16_t button_height = 48;
	uint16_t button_width = LCD_PIXEL_WIDTH/2;
 80008a2:	2378      	movs	r3, #120	@ 0x78
 80008a4:	80bb      	strh	r3, [r7, #4]

	for(int i = 1; i<button_width/2; i++)
 80008a6:	2301      	movs	r3, #1
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	e014      	b.n	80008d6 <start_screen+0x3e>
	{
		LCD_Draw_Horizontal_Line(120-i, play_y+i, 2*i, LCD_COLOR_WHITE);
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 80008b4:	b298      	uxth	r0, r3
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	88fb      	ldrh	r3, [r7, #6]
 80008bc:	4413      	add	r3, r2
 80008be:	b299      	uxth	r1, r3
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008cc:	f002 fb51 	bl	8002f72 <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<button_width/2; i++)
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	3301      	adds	r3, #1
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	88bb      	ldrh	r3, [r7, #4]
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	b29b      	uxth	r3, r3
 80008dc:	461a      	mov	r2, r3
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	4293      	cmp	r3, r2
 80008e2:	dbe3      	blt.n	80008ac <start_screen+0x14>
	}
	for(int i = button_width/2; i>0; i--)
 80008e4:	88bb      	ldrh	r3, [r7, #4]
 80008e6:	085b      	lsrs	r3, r3, #1
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	e020      	b.n	8000930 <start_screen+0x98>
	{
		LCD_Draw_Horizontal_Line(i+button_width/2, play_y + i + (button_width/2) - 1, button_width-(2*i), LCD_COLOR_WHITE);
 80008ee:	88bb      	ldrh	r3, [r7, #4]
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	4413      	add	r3, r2
 80008fa:	b298      	uxth	r0, r3
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	b29a      	uxth	r2, r3
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	4413      	add	r3, r2
 8000904:	b29a      	uxth	r2, r3
 8000906:	88bb      	ldrh	r3, [r7, #4]
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	b29b      	uxth	r3, r3
 800090c:	4413      	add	r3, r2
 800090e:	b29b      	uxth	r3, r3
 8000910:	3b01      	subs	r3, #1
 8000912:	b299      	uxth	r1, r3
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	b29b      	uxth	r3, r3
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	b29b      	uxth	r3, r3
 800091c:	88ba      	ldrh	r2, [r7, #4]
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	b29a      	uxth	r2, r3
 8000922:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000926:	f002 fb24 	bl	8002f72 <LCD_Draw_Horizontal_Line>
	for(int i = button_width/2; i>0; i--)
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	3b01      	subs	r3, #1
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	2b00      	cmp	r3, #0
 8000934:	dcdb      	bgt.n	80008ee <start_screen+0x56>
	}
	for(int i = 1; i<button_width/2 -2; i++)
 8000936:	2301      	movs	r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	e015      	b.n	8000968 <start_screen+0xd0>
	{
		LCD_Draw_Horizontal_Line(120-i, play_y+i +2 , 2*i, LCD_COLOR_BLACK);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	b29b      	uxth	r3, r3
 8000940:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 8000944:	b298      	uxth	r0, r3
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	b29a      	uxth	r2, r3
 800094a:	88fb      	ldrh	r3, [r7, #6]
 800094c:	4413      	add	r3, r2
 800094e:	b29b      	uxth	r3, r3
 8000950:	3302      	adds	r3, #2
 8000952:	b299      	uxth	r1, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	b29b      	uxth	r3, r3
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	b29a      	uxth	r2, r3
 800095c:	2300      	movs	r3, #0
 800095e:	f002 fb08 	bl	8002f72 <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<button_width/2 -2; i++)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	3301      	adds	r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	88bb      	ldrh	r3, [r7, #4]
 800096a:	085b      	lsrs	r3, r3, #1
 800096c:	b29b      	uxth	r3, r3
 800096e:	3b02      	subs	r3, #2
 8000970:	68fa      	ldr	r2, [r7, #12]
 8000972:	429a      	cmp	r2, r3
 8000974:	dbe2      	blt.n	800093c <start_screen+0xa4>
	}
	for(int i = button_width/2 -2; i>0; i--)
 8000976:	88bb      	ldrh	r3, [r7, #4]
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	b29b      	uxth	r3, r3
 800097c:	3b02      	subs	r3, #2
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	e023      	b.n	80009ca <start_screen+0x132>
	{
		LCD_Draw_Horizontal_Line(i+button_width/2+1, play_y + i + (button_width/2) - 2, button_width-(2*i)-2, LCD_COLOR_BLACK);
 8000982:	88bb      	ldrh	r3, [r7, #4]
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	b29a      	uxth	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	b29b      	uxth	r3, r3
 800098c:	4413      	add	r3, r2
 800098e:	b29b      	uxth	r3, r3
 8000990:	3301      	adds	r3, #1
 8000992:	b298      	uxth	r0, r3
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	b29a      	uxth	r2, r3
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	4413      	add	r3, r2
 800099c:	b29a      	uxth	r2, r3
 800099e:	88bb      	ldrh	r3, [r7, #4]
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	4413      	add	r3, r2
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	3b02      	subs	r3, #2
 80009aa:	b299      	uxth	r1, r3
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	88ba      	ldrh	r2, [r7, #4]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	3b02      	subs	r3, #2
 80009bc:	b29a      	uxth	r2, r3
 80009be:	2300      	movs	r3, #0
 80009c0:	f002 fad7 	bl	8002f72 <LCD_Draw_Horizontal_Line>
	for(int i = button_width/2 -2; i>0; i--)
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	dcd8      	bgt.n	8000982 <start_screen+0xea>
	}

	LCD_SetFont(&Font16x24);
 80009d0:	4815      	ldr	r0, [pc, #84]	@ (8000a28 <start_screen+0x190>)
 80009d2:	f002 fb27 	bl	8003024 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_RED);
 80009d6:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80009da:	f002 fb13 	bl	8003004 <LCD_SetTextColor>
	LCD_DisplayChar(76, 154, 'P');
 80009de:	2250      	movs	r2, #80	@ 0x50
 80009e0:	219a      	movs	r1, #154	@ 0x9a
 80009e2:	204c      	movs	r0, #76	@ 0x4c
 80009e4:	f002 fb9c 	bl	8003120 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_YELLOW);
 80009e8:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80009ec:	f002 fb0a 	bl	8003004 <LCD_SetTextColor>
	LCD_DisplayChar(100, 154, 'L');
 80009f0:	224c      	movs	r2, #76	@ 0x4c
 80009f2:	219a      	movs	r1, #154	@ 0x9a
 80009f4:	2064      	movs	r0, #100	@ 0x64
 80009f6:	f002 fb93 	bl	8003120 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_BLUE2);
 80009fa:	f240 501f 	movw	r0, #1311	@ 0x51f
 80009fe:	f002 fb01 	bl	8003004 <LCD_SetTextColor>
	LCD_DisplayChar(124, 154, 'A');
 8000a02:	2241      	movs	r2, #65	@ 0x41
 8000a04:	219a      	movs	r1, #154	@ 0x9a
 8000a06:	207c      	movs	r0, #124	@ 0x7c
 8000a08:	f002 fb8a 	bl	8003120 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_GREEN);
 8000a0c:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000a10:	f002 faf8 	bl	8003004 <LCD_SetTextColor>
	LCD_DisplayChar(148, 154, 'Y');
 8000a14:	2259      	movs	r2, #89	@ 0x59
 8000a16:	219a      	movs	r1, #154	@ 0x9a
 8000a18:	2094      	movs	r0, #148	@ 0x94
 8000a1a:	f002 fb81 	bl	8003120 <LCD_DisplayChar>
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000004 	.word	0x20000004

08000a2c <end_screen>:

void end_screen()
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLACK);
 8000a30:	2100      	movs	r1, #0
 8000a32:	2000      	movs	r0, #0
 8000a34:	f002 fac4 	bl	8002fc0 <LCD_Clear>
	LCD_SetFont(&Font16x24);
 8000a38:	4818      	ldr	r0, [pc, #96]	@ (8000a9c <end_screen+0x70>)
 8000a3a:	f002 faf3 	bl	8003024 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a3e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000a42:	f002 fadf 	bl	8003004 <LCD_SetTextColor>
	LCD_DisplayChar(80, 100, 'G');
 8000a46:	2247      	movs	r2, #71	@ 0x47
 8000a48:	2164      	movs	r1, #100	@ 0x64
 8000a4a:	2050      	movs	r0, #80	@ 0x50
 8000a4c:	f002 fb68 	bl	8003120 <LCD_DisplayChar>
	LCD_DisplayChar(102, 100, 'A');
 8000a50:	2241      	movs	r2, #65	@ 0x41
 8000a52:	2164      	movs	r1, #100	@ 0x64
 8000a54:	2066      	movs	r0, #102	@ 0x66
 8000a56:	f002 fb63 	bl	8003120 <LCD_DisplayChar>
	LCD_DisplayChar(122, 100, 'M');
 8000a5a:	224d      	movs	r2, #77	@ 0x4d
 8000a5c:	2164      	movs	r1, #100	@ 0x64
 8000a5e:	207a      	movs	r0, #122	@ 0x7a
 8000a60:	f002 fb5e 	bl	8003120 <LCD_DisplayChar>
	LCD_DisplayChar(144, 100, 'E');
 8000a64:	2245      	movs	r2, #69	@ 0x45
 8000a66:	2164      	movs	r1, #100	@ 0x64
 8000a68:	2090      	movs	r0, #144	@ 0x90
 8000a6a:	f002 fb59 	bl	8003120 <LCD_DisplayChar>
	LCD_DisplayChar(80, 130, 'O');
 8000a6e:	224f      	movs	r2, #79	@ 0x4f
 8000a70:	2182      	movs	r1, #130	@ 0x82
 8000a72:	2050      	movs	r0, #80	@ 0x50
 8000a74:	f002 fb54 	bl	8003120 <LCD_DisplayChar>
	LCD_DisplayChar(102, 130, 'V');
 8000a78:	2256      	movs	r2, #86	@ 0x56
 8000a7a:	2182      	movs	r1, #130	@ 0x82
 8000a7c:	2066      	movs	r0, #102	@ 0x66
 8000a7e:	f002 fb4f 	bl	8003120 <LCD_DisplayChar>
	LCD_DisplayChar(122, 130, 'E');
 8000a82:	2245      	movs	r2, #69	@ 0x45
 8000a84:	2182      	movs	r1, #130	@ 0x82
 8000a86:	207a      	movs	r0, #122	@ 0x7a
 8000a88:	f002 fb4a 	bl	8003120 <LCD_DisplayChar>
	LCD_DisplayChar(144, 130, 'R');
 8000a8c:	2252      	movs	r2, #82	@ 0x52
 8000a8e:	2182      	movs	r1, #130	@ 0x82
 8000a90:	2090      	movs	r0, #144	@ 0x90
 8000a92:	f002 fb45 	bl	8003120 <LCD_DisplayChar>
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000004 	.word	0x20000004

08000aa0 <disp_time>:

void disp_time(uint32_t time)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	uint32_t seconds = time / 1000;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a25      	ldr	r2, [pc, #148]	@ (8000b40 <disp_time+0xa0>)
 8000aac:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab0:	099b      	lsrs	r3, r3, #6
 8000ab2:	61fb      	str	r3, [r7, #28]
	uint32_t min = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
	uint32_t sec_tens = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
	while(seconds > 60)
 8000abc:	e005      	b.n	8000aca <disp_time+0x2a>
	{
		seconds -= 60;
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3b3c      	subs	r3, #60	@ 0x3c
 8000ac2:	61fb      	str	r3, [r7, #28]
		min++;
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
	while(seconds > 60)
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	2b3c      	cmp	r3, #60	@ 0x3c
 8000ace:	d8f6      	bhi.n	8000abe <disp_time+0x1e>
	}
	while(seconds > 10)
 8000ad0:	e005      	b.n	8000ade <disp_time+0x3e>
	{
		seconds -= 10;
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3b0a      	subs	r3, #10
 8000ad6:	61fb      	str	r3, [r7, #28]
		sec_tens++;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	3301      	adds	r3, #1
 8000adc:	617b      	str	r3, [r7, #20]
	while(seconds > 10)
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	2b0a      	cmp	r3, #10
 8000ae2:	d8f6      	bhi.n	8000ad2 <disp_time+0x32>
	}

	uint32_t sec_char = seconds + '0';
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	3330      	adds	r3, #48	@ 0x30
 8000ae8:	613b      	str	r3, [r7, #16]
	uint32_t sec_tens_char = sec_tens + '0';
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	3330      	adds	r3, #48	@ 0x30
 8000aee:	60fb      	str	r3, [r7, #12]
	uint32_t min_char = min + '0';
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	3330      	adds	r3, #48	@ 0x30
 8000af4:	60bb      	str	r3, [r7, #8]

	LCD_SetFont(&Font12x12);
 8000af6:	4813      	ldr	r0, [pc, #76]	@ (8000b44 <disp_time+0xa4>)
 8000af8:	f002 fa94 	bl	8003024 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000afc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000b00:	f002 fa80 	bl	8003004 <LCD_SetTextColor>
	LCD_DisplayChar(100, 160, min_char);
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	461a      	mov	r2, r3
 8000b0a:	21a0      	movs	r1, #160	@ 0xa0
 8000b0c:	2064      	movs	r0, #100	@ 0x64
 8000b0e:	f002 fb07 	bl	8003120 <LCD_DisplayChar>
	LCD_DisplayChar(114, 160, ':');
 8000b12:	223a      	movs	r2, #58	@ 0x3a
 8000b14:	21a0      	movs	r1, #160	@ 0xa0
 8000b16:	2072      	movs	r0, #114	@ 0x72
 8000b18:	f002 fb02 	bl	8003120 <LCD_DisplayChar>
	LCD_DisplayChar(124, 160, sec_tens_char);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	461a      	mov	r2, r3
 8000b22:	21a0      	movs	r1, #160	@ 0xa0
 8000b24:	207c      	movs	r0, #124	@ 0x7c
 8000b26:	f002 fafb 	bl	8003120 <LCD_DisplayChar>
	LCD_DisplayChar(138, 160, sec_char);
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	21a0      	movs	r1, #160	@ 0xa0
 8000b32:	208a      	movs	r0, #138	@ 0x8a
 8000b34:	f002 faf4 	bl	8003120 <LCD_DisplayChar>

}
 8000b38:	bf00      	nop
 8000b3a:	3720      	adds	r7, #32
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	10624dd3 	.word	0x10624dd3
 8000b44:	2000000c 	.word	0x2000000c

08000b48 <block_drop>:

block_t block_drop(block_t *block)
{
 8000b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4a:	b091      	sub	sp, #68	@ 0x44
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
	//when timer reaches ARR and enters IRQ handler, call this function
	volatile block_t temp_tetromino = *block;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	461c      	mov	r4, r3
 8000b56:	f107 0608 	add.w	r6, r7, #8
 8000b5a:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8000b5e:	4635      	mov	r5, r6
 8000b60:	4623      	mov	r3, r4
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	6859      	ldr	r1, [r3, #4]
 8000b66:	689a      	ldr	r2, [r3, #8]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b6c:	3410      	adds	r4, #16
 8000b6e:	3610      	adds	r6, #16
 8000b70:	4564      	cmp	r4, ip
 8000b72:	d1f4      	bne.n	8000b5e <block_drop+0x16>
 8000b74:	4633      	mov	r3, r6
 8000b76:	4622      	mov	r2, r4
 8000b78:	6810      	ldr	r0, [r2, #0]
 8000b7a:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < 4; i++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b80:	e013      	b.n	8000baa <block_drop+0x62>
	{
		temp_tetromino.y[i] += BLOCK_WIDTH;
 8000b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b84:	3314      	adds	r3, #20
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	3340      	adds	r3, #64	@ 0x40
 8000b8a:	443b      	add	r3, r7
 8000b8c:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	3317      	adds	r3, #23
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b98:	3314      	adds	r3, #20
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	3340      	adds	r3, #64	@ 0x40
 8000b9e:	443b      	add	r3, r7
 8000ba0:	f823 2c34 	strh.w	r2, [r3, #-52]
	for(int i = 0; i < 4; i++)
 8000ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	dde8      	ble.n	8000b82 <block_drop+0x3a>
	}
	//*block = temp_tetromino;
	return temp_tetromino;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f107 0408 	add.w	r4, r7, #8
 8000bb6:	469c      	mov	ip, r3
 8000bb8:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8000bbc:	4665      	mov	r5, ip
 8000bbe:	4626      	mov	r6, r4
 8000bc0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bc2:	6028      	str	r0, [r5, #0]
 8000bc4:	6069      	str	r1, [r5, #4]
 8000bc6:	60aa      	str	r2, [r5, #8]
 8000bc8:	60eb      	str	r3, [r5, #12]
 8000bca:	3410      	adds	r4, #16
 8000bcc:	f10c 0c10 	add.w	ip, ip, #16
 8000bd0:	4574      	cmp	r4, lr
 8000bd2:	d1f3      	bne.n	8000bbc <block_drop+0x74>
 8000bd4:	4663      	mov	r3, ip
 8000bd6:	4622      	mov	r2, r4
 8000bd8:	6810      	ldr	r0, [r2, #0]
 8000bda:	6018      	str	r0, [r3, #0]
}
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	3744      	adds	r7, #68	@ 0x44
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000be4 <block_create>:

block_t block_create()
{
 8000be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be6:	b0b1      	sub	sp, #196	@ 0xc4
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	MX_RNG_Init();
 8000bec:	f001 ff90 	bl	8002b10 <MX_RNG_Init>
	volatile block_t block = {0};
 8000bf0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bf4:	2234      	movs	r2, #52	@ 0x34
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f007 facf 	bl	800819c <memset>
	//evaluate rng for color
	//set pos_x, pos_y
	//return the block

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8000bfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c02:	4619      	mov	r1, r3
 8000c04:	48d0      	ldr	r0, [pc, #832]	@ (8000f48 <block_create+0x364>)
 8000c06:	f006 fdab 	bl	8007760 <HAL_RNG_GenerateRandomNumber>
	rand %= 7;
 8000c0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000c0c:	4bcf      	ldr	r3, [pc, #828]	@ (8000f4c <block_create+0x368>)
 8000c0e:	fba3 2301 	umull	r2, r3, r3, r1
 8000c12:	1aca      	subs	r2, r1, r3
 8000c14:	0852      	lsrs	r2, r2, #1
 8000c16:	4413      	add	r3, r2
 8000c18:	089a      	lsrs	r2, r3, #2
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	1a9b      	subs	r3, r3, r2
 8000c20:	1aca      	subs	r2, r1, r3
 8000c22:	62fa      	str	r2, [r7, #44]	@ 0x2c
	MX_RNG_Deinit();
 8000c24:	f001 ff9c 	bl	8002b60 <MX_RNG_Deinit>

	uint8_t name = rand;
 8000c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c2a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		block.name = name;
 8000c2e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000c32:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

	uint8_t color = rand;
 8000c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c38:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

	//COLOR
	if(color == BLUE)
 8000c3c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d101      	bne.n	8000c48 <block_create+0x64>
	{
		block.color = LCD_COLOR_BLUE;
 8000c44:	231f      	movs	r3, #31
 8000c46:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == RED)
 8000c48:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d102      	bne.n	8000c56 <block_create+0x72>
	{
		block.color = LCD_COLOR_RED;
 8000c50:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c54:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == MAGENTA)
 8000c56:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d102      	bne.n	8000c64 <block_create+0x80>
	{
		block.color = LCD_COLOR_MAGENTA;
 8000c5e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000c62:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == GREEN)
 8000c64:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d102      	bne.n	8000c72 <block_create+0x8e>
	{
		block.color = LCD_COLOR_GREEN;
 8000c6c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000c70:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == CYAN)
 8000c72:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	d102      	bne.n	8000c80 <block_create+0x9c>
	{
		block.color = LCD_COLOR_CYAN;
 8000c7a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000c7e:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == YELLOW)
 8000c80:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c84:	2b05      	cmp	r3, #5
 8000c86:	d102      	bne.n	8000c8e <block_create+0xaa>
	{
		block.color = LCD_COLOR_YELLOW;
 8000c88:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000c8c:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == ORANGE)
 8000c8e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d102      	bne.n	8000c9c <block_create+0xb8>
	{
		block.color = LCD_COLOR_ORANGE;
 8000c96:	f64f 33c1 	movw	r3, #64449	@ 0xfbc1
 8000c9a:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == PURPLE)
 8000c9c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000ca0:	2b07      	cmp	r3, #7
 8000ca2:	d102      	bne.n	8000caa <block_create+0xc6>
	{
		block.color = LCD_COLOR_PURPLE;
 8000ca4:	f647 0318 	movw	r3, #30744	@ 0x7818
 8000ca8:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	//COORDINATES
	for(int i = 0; i < 4; i++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000cb0:	e017      	b.n	8000ce2 <block_create+0xfe>
	{
		block.x[i] = BLOCK_START_X + i*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000cb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	461a      	mov	r2, r3
 8000cba:	0052      	lsls	r2, r2, #1
 8000cbc:	441a      	add	r2, r3
 8000cbe:	00d2      	lsls	r2, r2, #3
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	334b      	adds	r3, #75	@ 0x4b
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000ccc:	3310      	adds	r3, #16
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	33c0      	adds	r3, #192	@ 0xc0
 8000cd2:	443b      	add	r3, r7
 8000cd4:	f823 2c8c 	strh.w	r2, [r3, #-140]
	for(int i = 0; i < 4; i++)
 8000cd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000cdc:	3301      	adds	r3, #1
 8000cde:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000ce2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	dde3      	ble.n	8000cb2 <block_create+0xce>
	}

	//BLOCK MATRICES
	if(block.name == O)
 8000cea:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d16f      	bne.n	8000dd4 <block_create+0x1f0>
	{
		uint16_t temp[4][4] =
 8000cf4:	4b96      	ldr	r3, [pc, #600]	@ (8000f50 <block_create+0x36c>)
 8000cf6:	f107 040c 	add.w	r4, r7, #12
 8000cfa:	461d      	mov	r5, r3
 8000cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,1},
			{0,0,1,1}};

		for(int i = 0; i < 4; i++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000d0e:	e028      	b.n	8000d62 <block_create+0x17e>
		{
			for(int j = 0; j < 4; j++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000d16:	e01b      	b.n	8000d50 <block_create+0x16c>
			{
				block.mat[i][j] = temp[j][i];
 8000d18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d1c:	009a      	lsls	r2, r3, #2
 8000d1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d22:	4413      	add	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	33c0      	adds	r3, #192	@ 0xc0
 8000d28:	443b      	add	r3, r7
 8000d2a:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8000d2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d32:	009a      	lsls	r2, r3, #2
 8000d34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d38:	4413      	add	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	33c0      	adds	r3, #192	@ 0xc0
 8000d3e:	443b      	add	r3, r7
 8000d40:	460a      	mov	r2, r1
 8000d42:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8000d46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000d50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	dddf      	ble.n	8000d18 <block_create+0x134>
		for(int i = 0; i < 4; i++)
 8000d58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000d62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	ddd2      	ble.n	8000d10 <block_create+0x12c>
			}
		}
		for(int i = 0; i < 4; i++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000d70:	e02c      	b.n	8000dcc <block_create+0x1e8>
		{
			block.x[i] = BLOCK_START_X + (i-1)*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000d72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d76:	3b01      	subs	r3, #1
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	0052      	lsls	r2, r2, #1
 8000d7e:	441a      	add	r2, r3
 8000d80:	00d2      	lsls	r2, r2, #3
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	334b      	adds	r3, #75	@ 0x4b
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d8e:	3310      	adds	r3, #16
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	33c0      	adds	r3, #192	@ 0xc0
 8000d94:	443b      	add	r3, r7
 8000d96:	f823 2c8c 	strh.w	r2, [r3, #-140]
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000d9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d9e:	3b02      	subs	r3, #2
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	461a      	mov	r2, r3
 8000da4:	0052      	lsls	r2, r2, #1
 8000da6:	441a      	add	r2, r3
 8000da8:	00d2      	lsls	r2, r2, #3
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	3311      	adds	r3, #17
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000db6:	3314      	adds	r3, #20
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	33c0      	adds	r3, #192	@ 0xc0
 8000dbc:	443b      	add	r3, r7
 8000dbe:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 8000dc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000dcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	ddce      	ble.n	8000d72 <block_create+0x18e>
		}
	}
	if(block.name == L)
 8000dd4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d16f      	bne.n	8000ebe <block_create+0x2da>
	{
		uint16_t temp[4][4] =
 8000dde:	4b5d      	ldr	r3, [pc, #372]	@ (8000f54 <block_create+0x370>)
 8000de0:	f107 040c 	add.w	r4, r7, #12
 8000de4:	461d      	mov	r5, r3
 8000de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,1,0},
			{0,0,1,0},
			{0,0,1,1}};
		for(int i = 0; i < 4; i++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000df8:	e028      	b.n	8000e4c <block_create+0x268>
		{
			for(int j = 0; j < 4; j++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000e00:	e01b      	b.n	8000e3a <block_create+0x256>
			{
				block.mat[i][j] = temp[j][i];
 8000e02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e06:	009a      	lsls	r2, r3, #2
 8000e08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e0c:	4413      	add	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	33c0      	adds	r3, #192	@ 0xc0
 8000e12:	443b      	add	r3, r7
 8000e14:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8000e18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e1c:	009a      	lsls	r2, r3, #2
 8000e1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e22:	4413      	add	r3, r2
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	33c0      	adds	r3, #192	@ 0xc0
 8000e28:	443b      	add	r3, r7
 8000e2a:	460a      	mov	r2, r1
 8000e2c:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8000e30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e34:	3301      	adds	r3, #1
 8000e36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000e3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	dddf      	ble.n	8000e02 <block_create+0x21e>
		for(int i = 0; i < 4; i++)
 8000e42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e46:	3301      	adds	r3, #1
 8000e48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000e4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	ddd2      	ble.n	8000dfa <block_create+0x216>
			}
		}
		for(int i = 0; i < 4; i++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000e5a:	e02c      	b.n	8000eb6 <block_create+0x2d2>
		{
			block.x[i] = BLOCK_START_X + (i-1)*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000e5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e60:	3b01      	subs	r3, #1
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	461a      	mov	r2, r3
 8000e66:	0052      	lsls	r2, r2, #1
 8000e68:	441a      	add	r2, r3
 8000e6a:	00d2      	lsls	r2, r2, #3
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	334b      	adds	r3, #75	@ 0x4b
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e78:	3310      	adds	r3, #16
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	33c0      	adds	r3, #192	@ 0xc0
 8000e7e:	443b      	add	r3, r7
 8000e80:	f823 2c8c 	strh.w	r2, [r3, #-140]
			block.y[i] = BLOCK_START_Y + (i-1)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000e84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	0052      	lsls	r2, r2, #1
 8000e90:	441a      	add	r2, r3
 8000e92:	00d2      	lsls	r2, r2, #3
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	3311      	adds	r3, #17
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000ea0:	3314      	adds	r3, #20
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	33c0      	adds	r3, #192	@ 0xc0
 8000ea6:	443b      	add	r3, r7
 8000ea8:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 8000eac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000eb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	ddce      	ble.n	8000e5c <block_create+0x278>
		}
	}
	if(block.name == J)
 8000ebe:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d179      	bne.n	8000fbc <block_create+0x3d8>
	{
		uint16_t temp[4][4] =
 8000ec8:	4b23      	ldr	r3, [pc, #140]	@ (8000f58 <block_create+0x374>)
 8000eca:	f107 040c 	add.w	r4, r7, #12
 8000ece:	461d      	mov	r5, r3
 8000ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ed8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,1,0},
			{0,0,1,0},
			{0,1,1,0}};
		for(int i = 0; i < 4; i++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000ee2:	e028      	b.n	8000f36 <block_create+0x352>
		{
			for(int j = 0; j < 4; j++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000eea:	e01b      	b.n	8000f24 <block_create+0x340>
			{
				block.mat[i][j] = temp[j][i];
 8000eec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ef0:	009a      	lsls	r2, r3, #2
 8000ef2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000ef6:	4413      	add	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	33c0      	adds	r3, #192	@ 0xc0
 8000efc:	443b      	add	r3, r7
 8000efe:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8000f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000f06:	009a      	lsls	r2, r3, #2
 8000f08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f0c:	4413      	add	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	33c0      	adds	r3, #192	@ 0xc0
 8000f12:	443b      	add	r3, r7
 8000f14:	460a      	mov	r2, r1
 8000f16:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8000f1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f1e:	3301      	adds	r3, #1
 8000f20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000f24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	dddf      	ble.n	8000eec <block_create+0x308>
		for(int i = 0; i < 4; i++)
 8000f2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000f30:	3301      	adds	r3, #1
 8000f32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000f36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	ddd2      	ble.n	8000ee4 <block_create+0x300>
			}
		}
		for(int i = 0; i < 4; i++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000f44:	e036      	b.n	8000fb4 <block_create+0x3d0>
 8000f46:	bf00      	nop
 8000f48:	200000a0 	.word	0x200000a0
 8000f4c:	24924925 	.word	0x24924925
 8000f50:	08008228 	.word	0x08008228
 8000f54:	08008248 	.word	0x08008248
 8000f58:	08008268 	.word	0x08008268
		{
			block.x[i] = BLOCK_START_X + i*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	461a      	mov	r2, r3
 8000f64:	0052      	lsls	r2, r2, #1
 8000f66:	441a      	add	r2, r3
 8000f68:	00d2      	lsls	r2, r2, #3
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	334b      	adds	r3, #75	@ 0x4b
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f76:	3310      	adds	r3, #16
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	33c0      	adds	r3, #192	@ 0xc0
 8000f7c:	443b      	add	r3, r7
 8000f7e:	f823 2c8c 	strh.w	r2, [r3, #-140]
			block.y[i] = BLOCK_START_Y + (i-1)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000f82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f86:	3b01      	subs	r3, #1
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	0052      	lsls	r2, r2, #1
 8000f8e:	441a      	add	r2, r3
 8000f90:	00d2      	lsls	r2, r2, #3
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	3311      	adds	r3, #17
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f9e:	3314      	adds	r3, #20
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	33c0      	adds	r3, #192	@ 0xc0
 8000fa4:	443b      	add	r3, r7
 8000fa6:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 8000faa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000fae:	3301      	adds	r3, #1
 8000fb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	ddcf      	ble.n	8000f5c <block_create+0x378>
		}
	}
	if(block.name == S)
 8000fbc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d15b      	bne.n	800107e <block_create+0x49a>
	{
		uint16_t temp[4][4] =
 8000fc6:	4bba      	ldr	r3, [pc, #744]	@ (80012b0 <block_create+0x6cc>)
 8000fc8:	f107 040c 	add.w	r4, r7, #12
 8000fcc:	461d      	mov	r5, r3
 8000fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,1},
			{0,1,1,0}};
		for(int i = 0; i < 4; i++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000fe0:	e028      	b.n	8001034 <block_create+0x450>
		{
			for(int j = 0; j < 4; j++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000fe8:	e01b      	b.n	8001022 <block_create+0x43e>
			{
				block.mat[i][j] = temp[j][i];
 8000fea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000fee:	009a      	lsls	r2, r3, #2
 8000ff0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ff4:	4413      	add	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	33c0      	adds	r3, #192	@ 0xc0
 8000ffa:	443b      	add	r3, r7
 8000ffc:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8001000:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001004:	009a      	lsls	r2, r3, #2
 8001006:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800100a:	4413      	add	r3, r2
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	33c0      	adds	r3, #192	@ 0xc0
 8001010:	443b      	add	r3, r7
 8001012:	460a      	mov	r2, r1
 8001014:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8001018:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800101c:	3301      	adds	r3, #1
 800101e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001022:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001026:	2b03      	cmp	r3, #3
 8001028:	dddf      	ble.n	8000fea <block_create+0x406>
		for(int i = 0; i < 4; i++)
 800102a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800102e:	3301      	adds	r3, #1
 8001030:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001034:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001038:	2b03      	cmp	r3, #3
 800103a:	ddd2      	ble.n	8000fe2 <block_create+0x3fe>
			}
		}
		for(int i = 0; i < 4; i++)
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001042:	e018      	b.n	8001076 <block_create+0x492>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8001044:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001048:	3b02      	subs	r3, #2
 800104a:	b29b      	uxth	r3, r3
 800104c:	461a      	mov	r2, r3
 800104e:	0052      	lsls	r2, r2, #1
 8001050:	441a      	add	r2, r3
 8001052:	00d2      	lsls	r2, r2, #3
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	b29b      	uxth	r3, r3
 8001058:	3311      	adds	r3, #17
 800105a:	b29a      	uxth	r2, r3
 800105c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001060:	3314      	adds	r3, #20
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	33c0      	adds	r3, #192	@ 0xc0
 8001066:	443b      	add	r3, r7
 8001068:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 800106c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001070:	3301      	adds	r3, #1
 8001072:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001076:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800107a:	2b03      	cmp	r3, #3
 800107c:	dde2      	ble.n	8001044 <block_create+0x460>
		}
	}
	if(block.name == Z)
 800107e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b04      	cmp	r3, #4
 8001086:	d15b      	bne.n	8001140 <block_create+0x55c>
	{
		uint16_t temp[4][4] =
 8001088:	4b8a      	ldr	r3, [pc, #552]	@ (80012b4 <block_create+0x6d0>)
 800108a:	f107 040c 	add.w	r4, r7, #12
 800108e:	461d      	mov	r5, r3
 8001090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001094:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001098:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,1,1,0},
			{0,0,1,1}};
		for(int i = 0; i < 4; i++)
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80010a2:	e028      	b.n	80010f6 <block_create+0x512>
		{
			for(int j = 0; j < 4; j++)
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80010aa:	e01b      	b.n	80010e4 <block_create+0x500>
			{
				block.mat[i][j] = temp[j][i];
 80010ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010b0:	009a      	lsls	r2, r3, #2
 80010b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010b6:	4413      	add	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	33c0      	adds	r3, #192	@ 0xc0
 80010bc:	443b      	add	r3, r7
 80010be:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 80010c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010c6:	009a      	lsls	r2, r3, #2
 80010c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010cc:	4413      	add	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	33c0      	adds	r3, #192	@ 0xc0
 80010d2:	443b      	add	r3, r7
 80010d4:	460a      	mov	r2, r1
 80010d6:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 80010da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010de:	3301      	adds	r3, #1
 80010e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80010e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	dddf      	ble.n	80010ac <block_create+0x4c8>
		for(int i = 0; i < 4; i++)
 80010ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010f0:	3301      	adds	r3, #1
 80010f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80010f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	ddd2      	ble.n	80010a4 <block_create+0x4c0>
			}
		}
		for(int i = 0; i < 4; i++)
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001104:	e018      	b.n	8001138 <block_create+0x554>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8001106:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800110a:	3b02      	subs	r3, #2
 800110c:	b29b      	uxth	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	0052      	lsls	r2, r2, #1
 8001112:	441a      	add	r2, r3
 8001114:	00d2      	lsls	r2, r2, #3
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	b29b      	uxth	r3, r3
 800111a:	3311      	adds	r3, #17
 800111c:	b29a      	uxth	r2, r3
 800111e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001122:	3314      	adds	r3, #20
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	33c0      	adds	r3, #192	@ 0xc0
 8001128:	443b      	add	r3, r7
 800112a:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 800112e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001132:	3301      	adds	r3, #1
 8001134:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001138:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800113c:	2b03      	cmp	r3, #3
 800113e:	dde2      	ble.n	8001106 <block_create+0x522>
		}
	}
	if(block.name == T)
 8001140:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b05      	cmp	r3, #5
 8001148:	d149      	bne.n	80011de <block_create+0x5fa>
	{
		uint16_t temp[4][4] =
 800114a:	4b5b      	ldr	r3, [pc, #364]	@ (80012b8 <block_create+0x6d4>)
 800114c:	f107 040c 	add.w	r4, r7, #12
 8001150:	461d      	mov	r5, r3
 8001152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001156:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800115a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,0},
			{0,1,1,1}};
		for(int i = 0; i < 4; i++)
 800115e:	2300      	movs	r3, #0
 8001160:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001162:	e01e      	b.n	80011a2 <block_create+0x5be>
		{
			for(int j = 0; j < 4; j++)
 8001164:	2300      	movs	r3, #0
 8001166:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001168:	e015      	b.n	8001196 <block_create+0x5b2>
			{
				block.mat[i][j] = temp[j][i];
 800116a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800116c:	009a      	lsls	r2, r3, #2
 800116e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001170:	4413      	add	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	33c0      	adds	r3, #192	@ 0xc0
 8001176:	443b      	add	r3, r7
 8001178:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 800117c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800117e:	009a      	lsls	r2, r3, #2
 8001180:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001182:	4413      	add	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	33c0      	adds	r3, #192	@ 0xc0
 8001188:	443b      	add	r3, r7
 800118a:	460a      	mov	r2, r1
 800118c:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8001190:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001192:	3301      	adds	r3, #1
 8001194:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001196:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001198:	2b03      	cmp	r3, #3
 800119a:	dde6      	ble.n	800116a <block_create+0x586>
		for(int i = 0; i < 4; i++)
 800119c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800119e:	3301      	adds	r3, #1
 80011a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80011a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	dddd      	ble.n	8001164 <block_create+0x580>
			}
		}
		for(int i = 0; i < 4; i++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80011ac:	e014      	b.n	80011d8 <block_create+0x5f4>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 80011ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011b0:	3b02      	subs	r3, #2
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	0052      	lsls	r2, r2, #1
 80011b8:	441a      	add	r2, r3
 80011ba:	00d2      	lsls	r2, r2, #3
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	b29b      	uxth	r3, r3
 80011c0:	3311      	adds	r3, #17
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011c6:	3314      	adds	r3, #20
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	33c0      	adds	r3, #192	@ 0xc0
 80011cc:	443b      	add	r3, r7
 80011ce:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 80011d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011d4:	3301      	adds	r3, #1
 80011d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80011d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011da:	2b03      	cmp	r3, #3
 80011dc:	dde7      	ble.n	80011ae <block_create+0x5ca>
		}
	}
	if(block.name == I)
 80011de:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b06      	cmp	r3, #6
 80011e6:	d149      	bne.n	800127c <block_create+0x698>
	{
		uint16_t temp[4][4] =
 80011e8:	4b34      	ldr	r3, [pc, #208]	@ (80012bc <block_create+0x6d8>)
 80011ea:	f107 040c 	add.w	r4, r7, #12
 80011ee:	461d      	mov	r5, r3
 80011f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0},
			{1,1,1,1}};
		for(int i = 0; i < 4; i++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8001200:	e01e      	b.n	8001240 <block_create+0x65c>
		{
			for(int j = 0; j < 4; j++)
 8001202:	2300      	movs	r3, #0
 8001204:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001206:	e015      	b.n	8001234 <block_create+0x650>
			{
				block.mat[i][j] = temp[j][i];
 8001208:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800120a:	009a      	lsls	r2, r3, #2
 800120c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800120e:	4413      	add	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	33c0      	adds	r3, #192	@ 0xc0
 8001214:	443b      	add	r3, r7
 8001216:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 800121a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800121c:	009a      	lsls	r2, r3, #2
 800121e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001220:	4413      	add	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	33c0      	adds	r3, #192	@ 0xc0
 8001226:	443b      	add	r3, r7
 8001228:	460a      	mov	r2, r1
 800122a:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 800122e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001230:	3301      	adds	r3, #1
 8001232:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001234:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001236:	2b03      	cmp	r3, #3
 8001238:	dde6      	ble.n	8001208 <block_create+0x624>
		for(int i = 0; i < 4; i++)
 800123a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800123c:	3301      	adds	r3, #1
 800123e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001240:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001242:	2b03      	cmp	r3, #3
 8001244:	dddd      	ble.n	8001202 <block_create+0x61e>
			}
		}
		for(int i = 0; i < 4; i++)
 8001246:	2300      	movs	r3, #0
 8001248:	66bb      	str	r3, [r7, #104]	@ 0x68
 800124a:	e014      	b.n	8001276 <block_create+0x692>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 800124c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800124e:	3b02      	subs	r3, #2
 8001250:	b29b      	uxth	r3, r3
 8001252:	461a      	mov	r2, r3
 8001254:	0052      	lsls	r2, r2, #1
 8001256:	441a      	add	r2, r3
 8001258:	00d2      	lsls	r2, r2, #3
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	b29b      	uxth	r3, r3
 800125e:	3311      	adds	r3, #17
 8001260:	b29a      	uxth	r2, r3
 8001262:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001264:	3314      	adds	r3, #20
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	33c0      	adds	r3, #192	@ 0xc0
 800126a:	443b      	add	r3, r7
 800126c:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 8001270:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001272:	3301      	adds	r3, #1
 8001274:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001276:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001278:	2b03      	cmp	r3, #3
 800127a:	dde7      	ble.n	800124c <block_create+0x668>
		}
	}
	return block;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001282:	469c      	mov	ip, r3
 8001284:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001288:	4665      	mov	r5, ip
 800128a:	4626      	mov	r6, r4
 800128c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800128e:	6028      	str	r0, [r5, #0]
 8001290:	6069      	str	r1, [r5, #4]
 8001292:	60aa      	str	r2, [r5, #8]
 8001294:	60eb      	str	r3, [r5, #12]
 8001296:	3410      	adds	r4, #16
 8001298:	f10c 0c10 	add.w	ip, ip, #16
 800129c:	4574      	cmp	r4, lr
 800129e:	d1f3      	bne.n	8001288 <block_create+0x6a4>
 80012a0:	4663      	mov	r3, ip
 80012a2:	4622      	mov	r2, r4
 80012a4:	6810      	ldr	r0, [r2, #0]
 80012a6:	6018      	str	r0, [r3, #0]
}
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	37c4      	adds	r7, #196	@ 0xc4
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012b0:	08008288 	.word	0x08008288
 80012b4:	080082a8 	.word	0x080082a8
 80012b8:	080082c8 	.word	0x080082c8
 80012bc:	080082e8 	.word	0x080082e8

080012c0 <map_init>:

map_t map_init()
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80012cc:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80012d0:	6018      	str	r0, [r3, #0]
	volatile map_t map = {0};
 80012d2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80012d6:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80012da:	4618      	mov	r0, r3
 80012dc:	f240 2336 	movw	r3, #566	@ 0x236
 80012e0:	461a      	mov	r2, r3
 80012e2:	2100      	movs	r1, #0
 80012e4:	f006 ff5a 	bl	800819c <memset>
	for(int i = 0; i < 10; i++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 80012ee:	e019      	b.n	8001324 <map_init+0x64>
	{
		map.x[i] = LEFT_EDGE + i*BLOCK_WIDTH;
 80012f0:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	461a      	mov	r2, r3
 80012f8:	0052      	lsls	r2, r2, #1
 80012fa:	441a      	add	r2, r3
 80012fc:	00d2      	lsls	r2, r2, #3
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	b29b      	uxth	r3, r3
 8001302:	3306      	adds	r3, #6
 8001304:	b299      	uxth	r1, r3
 8001306:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800130a:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800130e:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8001312:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001316:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 10; i++)
 800131a:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800131e:	3301      	adds	r3, #1
 8001320:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8001324:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8001328:	2b09      	cmp	r3, #9
 800132a:	dde1      	ble.n	80012f0 <map_init+0x30>
	}
	for(int i = 0; i < 13; i++)
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8001332:	e01b      	b.n	800136c <map_init+0xac>
	{
		map.y[i] = MAP_DIFFERENCE + EDGE_WIDTH + i*BLOCK_WIDTH + 2;
 8001334:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001338:	b29b      	uxth	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	0052      	lsls	r2, r2, #1
 800133e:	441a      	add	r2, r3
 8001340:	00d2      	lsls	r2, r2, #3
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	b29b      	uxth	r3, r3
 8001346:	3311      	adds	r3, #17
 8001348:	b299      	uxth	r1, r3
 800134a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800134e:	f5a3 7210 	sub.w	r2, r3, #576	@ 0x240
 8001352:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001356:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	460a      	mov	r2, r1
 8001360:	809a      	strh	r2, [r3, #4]
	for(int i = 0; i < 13; i++)
 8001362:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001366:	3301      	adds	r3, #1
 8001368:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 800136c:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001370:	2b0c      	cmp	r3, #12
 8001372:	dddf      	ble.n	8001334 <map_init+0x74>
	}
	return map;
 8001374:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001378:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001382:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	f240 2336 	movw	r3, #566	@ 0x236
 800138e:	461a      	mov	r2, r3
 8001390:	f006 ff30 	bl	80081f4 <memcpy>
}
 8001394:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001398:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <rest>:

uint8_t rest(block_t *block, map_t *map)
{
 80013a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a8:	f5ad 7d3d 	sub.w	sp, sp, #756	@ 0x2f4
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80013b2:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80013b6:	6018      	str	r0, [r3, #0]
 80013b8:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80013bc:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 80013c0:	6019      	str	r1, [r3, #0]
	volatile block_t temp_tetromino = *block;
 80013c2:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80013c6:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	461c      	mov	r4, r3
 80013ce:	f507 7627 	add.w	r6, r7, #668	@ 0x29c
 80013d2:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80013d6:	4635      	mov	r5, r6
 80013d8:	4623      	mov	r3, r4
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	6859      	ldr	r1, [r3, #4]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e4:	3410      	adds	r4, #16
 80013e6:	3610      	adds	r6, #16
 80013e8:	4564      	cmp	r4, ip
 80013ea:	d1f4      	bne.n	80013d6 <rest+0x30>
 80013ec:	4633      	mov	r3, r6
 80013ee:	4622      	mov	r2, r4
 80013f0:	6810      	ldr	r0, [r2, #0]
 80013f2:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 80013f4:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80013f8:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 80013fc:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001400:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f240 2336 	movw	r3, #566	@ 0x236
 800140e:	461a      	mov	r2, r3
 8001410:	f006 fef0 	bl	80081f4 <memcpy>

	//evaluate the logical AND between the true blocks in block_t and
	//the next row of map_t (block y_pos + block size)
	uint8_t y_max_index[4] = {0};
 8001414:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001418:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
	uint8_t x_max_index[4] = {0};
 8001420:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001424:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
	uint16_t y_max[4] = {0};
 800142c:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001430:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001434:	461a      	mov	r2, r3
 8001436:	2300      	movs	r3, #0
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	6053      	str	r3, [r2, #4]
	uint16_t x_max[4] = {0};
 800143c:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001440:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001444:	461a      	mov	r2, r3
 8001446:	2300      	movs	r3, #0
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	6053      	str	r3, [r2, #4]
	for(int i = 0; i < 4; i++)
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8001452:	e04f      	b.n	80014f4 <rest+0x14e>
	{
		for(int j = 0; j < 4; j++)
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 800145a:	e036      	b.n	80014ca <rest+0x124>
		{
			if(temp_tetromino.mat[i][j])
 800145c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8001460:	009a      	lsls	r2, r3, #2
 8001462:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8001466:	4413      	add	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800146e:	443b      	add	r3, r7
 8001470:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8001474:	b29b      	uxth	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d019      	beq.n	80014ae <rest+0x108>
			{
				if(j > y_max_index[i])
 800147a:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800147e:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001482:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8001490:	4293      	cmp	r3, r2
 8001492:	dd15      	ble.n	80014c0 <rest+0x11a>
				{
					y_max_index[i] = j;
 8001494:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8001498:	b2d9      	uxtb	r1, r3
 800149a:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800149e:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 80014a2:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80014a6:	4413      	add	r3, r2
 80014a8:	460a      	mov	r2, r1
 80014aa:	701a      	strb	r2, [r3, #0]
 80014ac:	e008      	b.n	80014c0 <rest+0x11a>
				}
			}
			else
			{
				y_max_index[i] = NO_BLOCK;
 80014ae:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80014b2:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 80014b6:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80014ba:	4413      	add	r3, r2
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++)
 80014c0:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80014c4:	3301      	adds	r3, #1
 80014c6:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 80014ca:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	ddc4      	ble.n	800145c <rest+0xb6>
			}
		}
		x_max_index[i] = i;
 80014d2:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80014d6:	b2d9      	uxtb	r1, r3
 80014d8:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80014dc:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 80014e0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80014e4:	4413      	add	r3, r2
 80014e6:	460a      	mov	r2, r1
 80014e8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i++)
 80014ea:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80014ee:	3301      	adds	r3, #1
 80014f0:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 80014f4:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	ddab      	ble.n	8001454 <rest+0xae>
	}
	for(int i = 0; i < 4; i++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 8001502:	e048      	b.n	8001596 <rest+0x1f0>
	{
		if(y_max_index[i] == NO_BLOCK)
 8001504:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001508:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 800150c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001510:	4413      	add	r3, r2
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d109      	bne.n	800152c <rest+0x186>
		{
			y_max[i] = NO_BLOCK;
 8001518:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800151c:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001520:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 8001524:	2100      	movs	r1, #0
 8001526:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800152a:	e02f      	b.n	800158c <rest+0x1e6>
		}
		else
		{
			y_max[i] = temp_tetromino.y[y_max_index[i]];
 800152c:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001530:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001534:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001538:	4413      	add	r3, r2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	3314      	adds	r3, #20
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001544:	443b      	add	r3, r7
 8001546:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 800154a:	b299      	uxth	r1, r3
 800154c:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001550:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001554:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 8001558:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			x_max[i] = temp_tetromino.x[x_max_index[i]];
 800155c:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001560:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 8001564:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001568:	4413      	add	r3, r2
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	3310      	adds	r3, #16
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001574:	443b      	add	r3, r7
 8001576:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 800157a:	b299      	uxth	r1, r3
 800157c:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001580:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001584:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 8001588:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 4; i++)
 800158c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001590:	3301      	adds	r3, #1
 8001592:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 8001596:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 800159a:	2b03      	cmp	r3, #3
 800159c:	ddb2      	ble.n	8001504 <rest+0x15e>
		}
	}

	uint8_t map_y_min_index[10] = {UINT8_MAX};
 800159e:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80015a2:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80015a6:	22ff      	movs	r2, #255	@ 0xff
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	3304      	adds	r3, #4
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	809a      	strh	r2, [r3, #4]
	uint8_t map_x_min_index[10] = {UINT8_MAX};
 80015b2:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80015b6:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 80015ba:	22ff      	movs	r2, #255	@ 0xff
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	3304      	adds	r3, #4
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	809a      	strh	r2, [r3, #4]
	uint16_t map_y_min[10];
	uint16_t map_x_min[10];
	for(int i = 0; i < 10; i++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 80015cc:	e055      	b.n	800167a <rest+0x2d4>
	{
		for(int j = 0; j < 13; j++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 80015d4:	e03c      	b.n	8001650 <rest+0x2aa>
		{
			if(temp_map.map_mat[i][j])
 80015d6:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80015da:	f5a3 7123 	sub.w	r1, r3, #652	@ 0x28c
 80015de:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 80015e2:	4613      	mov	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	f8d7 22dc 	ldr.w	r2, [r7, #732]	@ 0x2dc
 80015f0:	4413      	add	r3, r2
 80015f2:	3380      	adds	r3, #128	@ 0x80
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	440b      	add	r3, r1
 80015f8:	889b      	ldrh	r3, [r3, #4]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d019      	beq.n	8001634 <rest+0x28e>
			{
				if(map_y_min_index[i] > j)
 8001600:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001604:	f5a3 722c 	sub.w	r2, r3, #688	@ 0x2b0
 8001608:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 800160c:	4413      	add	r3, r2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8001616:	4293      	cmp	r3, r2
 8001618:	da15      	bge.n	8001646 <rest+0x2a0>
				{
					map_y_min_index[i] = j;
 800161a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 800161e:	b2d9      	uxtb	r1, r3
 8001620:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001624:	f5a3 722c 	sub.w	r2, r3, #688	@ 0x2b0
 8001628:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 800162c:	4413      	add	r3, r2
 800162e:	460a      	mov	r2, r1
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	e008      	b.n	8001646 <rest+0x2a0>
				}
			}
			else
			{
				map_y_min_index[i] = NO_INDEX;
 8001634:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001638:	f5a3 722c 	sub.w	r2, r3, #688	@ 0x2b0
 800163c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001640:	4413      	add	r3, r2
 8001642:	22ff      	movs	r2, #255	@ 0xff
 8001644:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 13; j++)
 8001646:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 800164a:	3301      	adds	r3, #1
 800164c:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 8001650:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8001654:	2b0c      	cmp	r3, #12
 8001656:	ddbe      	ble.n	80015d6 <rest+0x230>
			}
		}
		map_x_min_index[i] = i;
 8001658:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 800165c:	b2d9      	uxtb	r1, r3
 800165e:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001662:	f5a3 722f 	sub.w	r2, r3, #700	@ 0x2bc
 8001666:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 800166a:	4413      	add	r3, r2
 800166c:	460a      	mov	r2, r1
 800166e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++)
 8001670:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001674:	3301      	adds	r3, #1
 8001676:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 800167a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 800167e:	2b09      	cmp	r3, #9
 8001680:	dda5      	ble.n	80015ce <rest+0x228>
	}
	for(int i = 0; i < 10; i++)
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 8001688:	e039      	b.n	80016fe <rest+0x358>
		{
			map_y_min[i] = LCD_PIXEL_HEIGHT;
		}
		else
		{
			map_y_min[i] = temp_map.y[map_y_min_index[i]];
 800168a:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800168e:	f5a3 722c 	sub.w	r2, r3, #688	@ 0x2b0
 8001692:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8001696:	4413      	add	r3, r2
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	4619      	mov	r1, r3
 800169c:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80016a0:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 80016a4:	f501 7386 	add.w	r3, r1, #268	@ 0x10c
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	889b      	ldrh	r3, [r3, #4]
 80016ae:	b299      	uxth	r1, r3
 80016b0:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80016b4:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 80016b8:	f8d7 22d8 	ldr.w	r2, [r7, #728]	@ 0x2d8
 80016bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			map_x_min[i] = temp_map.x[map_x_min_index[i]];
 80016c0:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80016c4:	f5a3 722f 	sub.w	r2, r3, #700	@ 0x2bc
 80016c8:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 80016cc:	4413      	add	r3, r2
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80016d6:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80016da:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80016de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80016e2:	b299      	uxth	r1, r3
 80016e4:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80016e8:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 80016ec:	f8d7 22d8 	ldr.w	r2, [r7, #728]	@ 0x2d8
 80016f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 10; i++)
 80016f4:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 80016f8:	3301      	adds	r3, #1
 80016fa:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 80016fe:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8001702:	2b09      	cmp	r3, #9
 8001704:	ddc1      	ble.n	800168a <rest+0x2e4>
		}
	}

	uint8_t overlap_map_x_index[4];
	for(int i = 0; i < 4; i++)
 8001706:	2300      	movs	r3, #0
 8001708:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 800170c:	e02f      	b.n	800176e <rest+0x3c8>
	{
		for(int j = 0; j < 10; j++)
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8001714:	e022      	b.n	800175c <rest+0x3b6>
		{
			if(x_max[i] == map_x_min[j])
 8001716:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800171a:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800171e:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 8001722:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001726:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800172a:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 800172e:	f8d7 12d0 	ldr.w	r1, [r7, #720]	@ 0x2d0
 8001732:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001736:	429a      	cmp	r2, r3
 8001738:	d10b      	bne.n	8001752 <rest+0x3ac>
			{
				overlap_map_x_index[i] = j;
 800173a:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 800173e:	b2d9      	uxtb	r1, r3
 8001740:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001744:	f5a3 723a 	sub.w	r2, r3, #744	@ 0x2e8
 8001748:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 800174c:	4413      	add	r3, r2
 800174e:	460a      	mov	r2, r1
 8001750:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 10; j++)
 8001752:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 8001756:	3301      	adds	r3, #1
 8001758:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 800175c:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 8001760:	2b09      	cmp	r3, #9
 8001762:	ddd8      	ble.n	8001716 <rest+0x370>
	for(int i = 0; i < 4; i++)
 8001764:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8001768:	3301      	adds	r3, #1
 800176a:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 800176e:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8001772:	2b03      	cmp	r3, #3
 8001774:	ddcb      	ble.n	800170e <rest+0x368>
		}
	}

//	for(int i = 0; i < 4; i++)
//	{
		if(map_y_min[overlap_map_x_index[0]] == y_max[0] + BLOCK_WIDTH || y_max[0] == BOTTOM_ROW)
 8001776:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800177a:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001786:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 800178a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800178e:	461a      	mov	r2, r3
 8001790:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001794:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	3317      	adds	r3, #23
 800179c:	429a      	cmp	r2, r3
 800179e:	d008      	beq.n	80017b2 <rest+0x40c>
 80017a0:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80017a4:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	f240 1225 	movw	r2, #293	@ 0x125
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d101      	bne.n	80017b6 <rest+0x410>
		{
			return 1;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e060      	b.n	8001878 <rest+0x4d2>
		}
		else if(map_y_min[overlap_map_x_index[1]] == y_max[1] + BLOCK_WIDTH || y_max[1] == BOTTOM_ROW)
 80017b6:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80017ba:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	461a      	mov	r2, r3
 80017c2:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80017c6:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 80017ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80017ce:	461a      	mov	r2, r3
 80017d0:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80017d4:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80017d8:	885b      	ldrh	r3, [r3, #2]
 80017da:	3317      	adds	r3, #23
 80017dc:	429a      	cmp	r2, r3
 80017de:	d008      	beq.n	80017f2 <rest+0x44c>
 80017e0:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80017e4:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80017e8:	885b      	ldrh	r3, [r3, #2]
 80017ea:	f240 1225 	movw	r2, #293	@ 0x125
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d101      	bne.n	80017f6 <rest+0x450>
		{
			return 1;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e040      	b.n	8001878 <rest+0x4d2>
		}
		else if(map_y_min[overlap_map_x_index[2]] == y_max[2] + BLOCK_WIDTH || y_max[2] == BOTTOM_ROW)
 80017f6:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80017fa:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80017fe:	789b      	ldrb	r3, [r3, #2]
 8001800:	461a      	mov	r2, r3
 8001802:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001806:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 800180a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800180e:	461a      	mov	r2, r3
 8001810:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001814:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001818:	889b      	ldrh	r3, [r3, #4]
 800181a:	3317      	adds	r3, #23
 800181c:	429a      	cmp	r2, r3
 800181e:	d008      	beq.n	8001832 <rest+0x48c>
 8001820:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001824:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001828:	889b      	ldrh	r3, [r3, #4]
 800182a:	f240 1225 	movw	r2, #293	@ 0x125
 800182e:	4293      	cmp	r3, r2
 8001830:	d101      	bne.n	8001836 <rest+0x490>
		{
			return 1;
 8001832:	2301      	movs	r3, #1
 8001834:	e020      	b.n	8001878 <rest+0x4d2>
		}
		else if(map_y_min[overlap_map_x_index[3]] == y_max[3] + BLOCK_WIDTH || y_max[3] == BOTTOM_ROW)
 8001836:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800183a:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 800183e:	78db      	ldrb	r3, [r3, #3]
 8001840:	461a      	mov	r2, r3
 8001842:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001846:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 800184a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800184e:	461a      	mov	r2, r3
 8001850:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001854:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001858:	88db      	ldrh	r3, [r3, #6]
 800185a:	3317      	adds	r3, #23
 800185c:	429a      	cmp	r2, r3
 800185e:	d008      	beq.n	8001872 <rest+0x4cc>
 8001860:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001864:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001868:	88db      	ldrh	r3, [r3, #6]
 800186a:	f240 1225 	movw	r2, #293	@ 0x125
 800186e:	4293      	cmp	r3, r2
 8001870:	d101      	bne.n	8001876 <rest+0x4d0>
		{
			return 1;
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <rest+0x4d2>
		}
//	}
	return 0;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	f507 773d 	add.w	r7, r7, #756	@ 0x2f4
 800187e:	46bd      	mov	sp, r7
 8001880:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001882 <map_update>:

map_t map_update(block_t *block, map_t* map)
{
 8001882:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001884:	f5ad 7d2d 	sub.w	sp, sp, #692	@ 0x2b4
 8001888:	af00      	add	r7, sp, #0
 800188a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800188e:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001892:	6018      	str	r0, [r3, #0]
 8001894:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001898:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800189c:	6019      	str	r1, [r3, #0]
 800189e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018a2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80018a6:	601a      	str	r2, [r3, #0]
	//append the map array with the new blocks in their respective coordinates
	//create new block
	volatile block_t temp_tetromino = *block;
 80018a8:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018ac:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	461c      	mov	r4, r3
 80018b4:	f507 7618 	add.w	r6, r7, #608	@ 0x260
 80018b8:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80018bc:	4635      	mov	r5, r6
 80018be:	4623      	mov	r3, r4
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	6859      	ldr	r1, [r3, #4]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ca:	3410      	adds	r4, #16
 80018cc:	3610      	adds	r6, #16
 80018ce:	4564      	cmp	r4, ip
 80018d0:	d1f4      	bne.n	80018bc <map_update+0x3a>
 80018d2:	4633      	mov	r3, r6
 80018d4:	4622      	mov	r2, r4
 80018d6:	6810      	ldr	r0, [r2, #0]
 80018d8:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 80018da:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018de:	f5a3 7222 	sub.w	r2, r3, #648	@ 0x288
 80018e2:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018e6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f240 2336 	movw	r3, #566	@ 0x236
 80018f4:	461a      	mov	r2, r3
 80018f6:	f006 fc7d 	bl	80081f4 <memcpy>

	uint8_t y_index[4];
	uint8_t x_index[4];
	uint16_t y_coor[4];
	uint16_t x_coor[4];
	uint8_t ind = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f887 32af 	strb.w	r3, [r7, #687]	@ 0x2af

	for(int i = 0; i < 4; i++)
 8001900:	2300      	movs	r3, #0
 8001902:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8001906:	e039      	b.n	800197c <map_update+0xfa>
	{
		for(int j = 0; j < 4; j++)
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 800190e:	e02c      	b.n	800196a <map_update+0xe8>
		{
			if(temp_tetromino.mat[i][j])
 8001910:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8001914:	009a      	lsls	r2, r3, #2
 8001916:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800191a:	4413      	add	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8001922:	443b      	add	r3, r7
 8001924:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 8001928:	b29b      	uxth	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d018      	beq.n	8001960 <map_update+0xde>
			{
				x_index[ind] = i;
 800192e:	f897 32af 	ldrb.w	r3, [r7, #687]	@ 0x2af
 8001932:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 8001936:	b2d1      	uxtb	r1, r2
 8001938:	f507 722c 	add.w	r2, r7, #688	@ 0x2b0
 800193c:	f5a2 7224 	sub.w	r2, r2, #656	@ 0x290
 8001940:	54d1      	strb	r1, [r2, r3]
				y_index[ind] = j;
 8001942:	f897 32af 	ldrb.w	r3, [r7, #687]	@ 0x2af
 8001946:	f8d7 22a4 	ldr.w	r2, [r7, #676]	@ 0x2a4
 800194a:	b2d1      	uxtb	r1, r2
 800194c:	f507 722c 	add.w	r2, r7, #688	@ 0x2b0
 8001950:	f5a2 7223 	sub.w	r2, r2, #652	@ 0x28c
 8001954:	54d1      	strb	r1, [r2, r3]
				ind++;
 8001956:	f897 32af 	ldrb.w	r3, [r7, #687]	@ 0x2af
 800195a:	3301      	adds	r3, #1
 800195c:	f887 32af 	strb.w	r3, [r7, #687]	@ 0x2af
		for(int j = 0; j < 4; j++)
 8001960:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8001964:	3301      	adds	r3, #1
 8001966:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 800196a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800196e:	2b03      	cmp	r3, #3
 8001970:	ddce      	ble.n	8001910 <map_update+0x8e>
	for(int i = 0; i < 4; i++)
 8001972:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8001976:	3301      	adds	r3, #1
 8001978:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 800197c:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8001980:	2b03      	cmp	r3, #3
 8001982:	ddc1      	ble.n	8001908 <map_update+0x86>
			}
		}
	}
	for(int i = 0; i < 4; i++)
 8001984:	2300      	movs	r3, #0
 8001986:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 800198a:	e034      	b.n	80019f6 <map_update+0x174>
	{
		if(x_index[i]>NO_INDEX && y_index[i]>NO_INDEX)
		{
			x_coor[i] = temp_tetromino.x[x_index[i]];
 800198c:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001990:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001994:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001998:	4413      	add	r3, r2
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	3310      	adds	r3, #16
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80019a4:	443b      	add	r3, r7
 80019a6:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 80019aa:	b299      	uxth	r1, r3
 80019ac:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80019b0:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80019b4:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80019b8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			y_coor[i] = temp_tetromino.y[y_index[i]];
 80019bc:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80019c0:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 80019c4:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80019c8:	4413      	add	r3, r2
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	3314      	adds	r3, #20
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80019d4:	443b      	add	r3, r7
 80019d6:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 80019da:	b299      	uxth	r1, r3
 80019dc:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80019e0:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80019e4:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80019e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 4; i++)
 80019ec:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80019f0:	3301      	adds	r3, #1
 80019f2:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 80019f6:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	ddc6      	ble.n	800198c <map_update+0x10a>
		}
	}

	//get indices for the map coordinates corresponding to the block coordinates
	//set the map logical matrix, and the color
	uint8_t index = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f887 329f 	strb.w	r3, [r7, #671]	@ 0x29f
	for(int i = 0; i < 10; i++)
 8001a04:	2300      	movs	r3, #0
 8001a06:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 8001a0a:	e068      	b.n	8001ade <map_update+0x25c>
	{
		for(int j = 0; j < 13; j++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8001a12:	e05b      	b.n	8001acc <map_update+0x24a>
		{
			if(temp_map.x[i] == x_coor[index] && temp_map.y[j] == y_coor[index])
 8001a14:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a18:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8001a1c:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001a20:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001a24:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	f897 129f 	ldrb.w	r1, [r7, #671]	@ 0x29f
 8001a2e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a32:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001a36:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d141      	bne.n	8001ac2 <map_update+0x240>
 8001a3e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a42:	f5a3 7222 	sub.w	r2, r3, #648	@ 0x288
 8001a46:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001a4a:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	889b      	ldrh	r3, [r3, #4]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	f897 129f 	ldrb.w	r1, [r7, #671]	@ 0x29f
 8001a5a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a5e:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001a62:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d12b      	bne.n	8001ac2 <map_update+0x240>
			{
				temp_map.map_mat[i][j] = ON;
 8001a6a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a6e:	f5a3 7122 	sub.w	r1, r3, #648	@ 0x288
 8001a72:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001a76:	4613      	mov	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8001a84:	4413      	add	r3, r2
 8001a86:	3380      	adds	r3, #128	@ 0x80
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	440b      	add	r3, r1
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	809a      	strh	r2, [r3, #4]
				temp_map.map_color[i][j] = temp_tetromino.color;
 8001a90:	f8b7 3262 	ldrh.w	r3, [r7, #610]	@ 0x262
 8001a94:	b298      	uxth	r0, r3
 8001a96:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a9a:	f5a3 7122 	sub.w	r1, r3, #648	@ 0x288
 8001a9e:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				index++;
 8001ab8:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 8001abc:	3301      	adds	r3, #1
 8001abe:	f887 329f 	strb.w	r3, [r7, #671]	@ 0x29f
		for(int j = 0; j < 13; j++)
 8001ac2:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8001acc:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001ad0:	2b0c      	cmp	r3, #12
 8001ad2:	dd9f      	ble.n	8001a14 <map_update+0x192>
	for(int i = 0; i < 10; i++)
 8001ad4:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 8001ade:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8001ae2:	2b09      	cmp	r3, #9
 8001ae4:	dd92      	ble.n	8001a0c <map_update+0x18a>
			}
		}
	}

	return temp_map;
 8001ae6:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001aea:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001af4:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f240 2336 	movw	r3, #566	@ 0x236
 8001b00:	461a      	mov	r2, r3
 8001b02:	f006 fb77 	bl	80081f4 <memcpy>
}
 8001b06:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001b0a:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b18 <block_rotate>:

block_t block_rotate(block_t *block)
{
 8001b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1a:	b0a9      	sub	sp, #164	@ 0xa4
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
	block_t temp_block = *block;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	461c      	mov	r4, r3
 8001b26:	f107 0640 	add.w	r6, r7, #64	@ 0x40
 8001b2a:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8001b2e:	4635      	mov	r5, r6
 8001b30:	4623      	mov	r3, r4
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	6859      	ldr	r1, [r3, #4]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b3c:	3410      	adds	r4, #16
 8001b3e:	3610      	adds	r6, #16
 8001b40:	4564      	cmp	r4, ip
 8001b42:	d1f4      	bne.n	8001b2e <block_rotate+0x16>
 8001b44:	4633      	mov	r3, r6
 8001b46:	4622      	mov	r2, r4
 8001b48:	6810      	ldr	r0, [r2, #0]
 8001b4a:	6018      	str	r0, [r3, #0]
	if(temp_block.name == O)
 8001b4c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d116      	bne.n	8001b84 <block_rotate+0x6c>
	{
		return temp_block;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001b62:	4665      	mov	r5, ip
 8001b64:	4626      	mov	r6, r4
 8001b66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b68:	6028      	str	r0, [r5, #0]
 8001b6a:	6069      	str	r1, [r5, #4]
 8001b6c:	60aa      	str	r2, [r5, #8]
 8001b6e:	60eb      	str	r3, [r5, #12]
 8001b70:	3410      	adds	r4, #16
 8001b72:	f10c 0c10 	add.w	ip, ip, #16
 8001b76:	4574      	cmp	r4, lr
 8001b78:	d1f3      	bne.n	8001b62 <block_rotate+0x4a>
 8001b7a:	4663      	mov	r3, ip
 8001b7c:	4622      	mov	r2, r4
 8001b7e:	6810      	ldr	r0, [r2, #0]
 8001b80:	6018      	str	r0, [r3, #0]
 8001b82:	e15e      	b.n	8001e42 <block_rotate+0x32a>
	}

	if(temp_block.name == I)
 8001b84:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b06      	cmp	r3, #6
 8001b8c:	d163      	bne.n	8001c56 <block_rotate+0x13e>
	{
		uint8_t transpose[4][4];
		for(int i = 0; i < 4; i++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001b94:	e029      	b.n	8001bea <block_rotate+0xd2>
		{
			for(int j = 0; j < 4; j++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001b9c:	e01c      	b.n	8001bd8 <block_rotate+0xc0>
			{
				transpose[i][j] = temp_block.mat[j][i];
 8001b9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ba2:	009a      	lsls	r2, r3, #2
 8001ba4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ba8:	4413      	add	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	33a0      	adds	r3, #160	@ 0xa0
 8001bae:	443b      	add	r3, r7
 8001bb0:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	b2d9      	uxtb	r1, r3
 8001bb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	33a0      	adds	r3, #160	@ 0xa0
 8001bc0:	19da      	adds	r2, r3, r7
 8001bc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3b70      	subs	r3, #112	@ 0x70
 8001bca:	460a      	mov	r2, r1
 8001bcc:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 4; j++)
 8001bce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	ddde      	ble.n	8001b9e <block_rotate+0x86>
		for(int i = 0; i < 4; i++)
 8001be0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001be4:	3301      	adds	r3, #1
 8001be6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001bea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	ddd1      	ble.n	8001b96 <block_rotate+0x7e>
			}
		}
		for(int i = 0; i < 4; i++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001bf8:	e028      	b.n	8001c4c <block_rotate+0x134>
		{
			for(int j = 0; j < 4; j++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001c00:	e01b      	b.n	8001c3a <block_rotate+0x122>
			{
				temp_block.mat[i][j] = transpose[i][j];
 8001c02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	33a0      	adds	r3, #160	@ 0xa0
 8001c0a:	19da      	adds	r2, r3, r7
 8001c0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c10:	4413      	add	r3, r2
 8001c12:	3b70      	subs	r3, #112	@ 0x70
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	4619      	mov	r1, r3
 8001c18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c1c:	009a      	lsls	r2, r3, #2
 8001c1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c22:	4413      	add	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	33a0      	adds	r3, #160	@ 0xa0
 8001c28:	443b      	add	r3, r7
 8001c2a:	460a      	mov	r2, r1
 8001c2c:	f823 2c5c 	strh.w	r2, [r3, #-92]
			for(int j = 0; j < 4; j++)
 8001c30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c34:	3301      	adds	r3, #1
 8001c36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001c3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	dddf      	ble.n	8001c02 <block_rotate+0xea>
		for(int i = 0; i < 4; i++)
 8001c42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c46:	3301      	adds	r3, #1
 8001c48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	ddd2      	ble.n	8001bfa <block_rotate+0xe2>
 8001c54:	e0df      	b.n	8001e16 <block_rotate+0x2fe>
			}
		}
	}


	else if(temp_block.name != O)
 8001c56:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80da 	beq.w	8001e16 <block_rotate+0x2fe>
	{
		uint8_t transpose_3x3[3][3];
		uint8_t transform[3][3];
		uint8_t mirror_identity[3][3] =
 8001c62:	4a7a      	ldr	r2, [pc, #488]	@ (8001e4c <block_rotate+0x334>)
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c6a:	c303      	stmia	r3!, {r0, r1}
 8001c6c:	701a      	strb	r2, [r3, #0]
		{{0, 0, 1},
		{0, 1, 0},
		{1, 0, 0}};

		for(int i = 1; i < 4; i++)
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001c74:	e02d      	b.n	8001cd2 <block_rotate+0x1ba>
		{
			for(int j = 1; j < 4; j++)
 8001c76:	2301      	movs	r3, #1
 8001c78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001c7c:	e020      	b.n	8001cc0 <block_rotate+0x1a8>
			{
				transpose_3x3[i-1][j-1] = temp_block.mat[j][i];
 8001c7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c82:	009a      	lsls	r2, r3, #2
 8001c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c88:	4413      	add	r3, r2
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	33a0      	adds	r3, #160	@ 0xa0
 8001c8e:	443b      	add	r3, r7
 8001c90:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8001c94:	b298      	uxth	r0, r3
 8001c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c9a:	1e5a      	subs	r2, r3, #1
 8001c9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ca0:	1e59      	subs	r1, r3, #1
 8001ca2:	b2c0      	uxtb	r0, r0
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	33a0      	adds	r3, #160	@ 0xa0
 8001cac:	443b      	add	r3, r7
 8001cae:	440b      	add	r3, r1
 8001cb0:	3b7c      	subs	r3, #124	@ 0x7c
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	701a      	strb	r2, [r3, #0]
			for(int j = 1; j < 4; j++)
 8001cb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cba:	3301      	adds	r3, #1
 8001cbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	ddda      	ble.n	8001c7e <block_rotate+0x166>
		for(int i = 1; i < 4; i++)
 8001cc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ccc:	3301      	adds	r3, #1
 8001cce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	ddcd      	ble.n	8001c76 <block_rotate+0x15e>
			}
		}

		for(int k = 0; k < 3; k++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001ce0:	e05b      	b.n	8001d9a <block_rotate+0x282>
		{
			for(int i = 0; i < 3; i++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001ce8:	e04e      	b.n	8001d88 <block_rotate+0x270>
			{
				transform[k][i] = 0;
 8001cea:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001cee:	4613      	mov	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	33a0      	adds	r3, #160	@ 0xa0
 8001cf6:	19da      	adds	r2, r3, r7
 8001cf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3b88      	subs	r3, #136	@ 0x88
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
				for(int j = 0; j < 3; j++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d08:	e036      	b.n	8001d78 <block_rotate+0x260>
				{
					transform[k][i] += (transpose_3x3[k][j] * mirror_identity[j][i]);
 8001d0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	33a0      	adds	r3, #160	@ 0xa0
 8001d16:	19da      	adds	r2, r3, r7
 8001d18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3b88      	subs	r3, #136	@ 0x88
 8001d20:	7819      	ldrb	r1, [r3, #0]
 8001d22:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	33a0      	adds	r3, #160	@ 0xa0
 8001d2e:	19da      	adds	r2, r3, r7
 8001d30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d32:	4413      	add	r3, r2
 8001d34:	3b7c      	subs	r3, #124	@ 0x7c
 8001d36:	7818      	ldrb	r0, [r3, #0]
 8001d38:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	33a0      	adds	r3, #160	@ 0xa0
 8001d42:	19da      	adds	r2, r3, r7
 8001d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d48:	4413      	add	r3, r2
 8001d4a:	3b94      	subs	r3, #148	@ 0x94
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	fb10 f303 	smulbb	r3, r0, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	440b      	add	r3, r1
 8001d56:	b2d9      	uxtb	r1, r3
 8001d58:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	33a0      	adds	r3, #160	@ 0xa0
 8001d64:	19da      	adds	r2, r3, r7
 8001d66:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3b88      	subs	r3, #136	@ 0x88
 8001d6e:	460a      	mov	r2, r1
 8001d70:	701a      	strb	r2, [r3, #0]
				for(int j = 0; j < 3; j++)
 8001d72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d74:	3301      	adds	r3, #1
 8001d76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	ddc5      	ble.n	8001d0a <block_rotate+0x1f2>
			for(int i = 0; i < 3; i++)
 8001d7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d82:	3301      	adds	r3, #1
 8001d84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	ddac      	ble.n	8001cea <block_rotate+0x1d2>
		for(int k = 0; k < 3; k++)
 8001d90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d94:	3301      	adds	r3, #1
 8001d96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	dd9f      	ble.n	8001ce2 <block_rotate+0x1ca>
				}
			}
		}

		for(int i = 0; i < 4; i++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001da6:	e033      	b.n	8001e10 <block_rotate+0x2f8>
		{
			for(int j = 0; j < 4; j++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	677b      	str	r3, [r7, #116]	@ 0x74
 8001dac:	e02a      	b.n	8001e04 <block_rotate+0x2ec>
			{
				if(i == 0 || j == 0)
 8001dae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <block_rotate+0x2a2>
 8001db4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10a      	bne.n	8001dd0 <block_rotate+0x2b8>
				{
					temp_block.mat[i][j] = 0;
 8001dba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001dbc:	009a      	lsls	r2, r3, #2
 8001dbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dc0:	4413      	add	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	33a0      	adds	r3, #160	@ 0xa0
 8001dc6:	443b      	add	r3, r7
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f823 2c5c 	strh.w	r2, [r3, #-92]
 8001dce:	e016      	b.n	8001dfe <block_rotate+0x2e6>
				}
				else
				{
					temp_block.mat[i][j] = transform[i-1][j-1];
 8001dd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001dd2:	1e5a      	subs	r2, r3, #1
 8001dd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dd6:	1e59      	subs	r1, r3, #1
 8001dd8:	4613      	mov	r3, r2
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4413      	add	r3, r2
 8001dde:	33a0      	adds	r3, #160	@ 0xa0
 8001de0:	443b      	add	r3, r7
 8001de2:	440b      	add	r3, r1
 8001de4:	3b88      	subs	r3, #136	@ 0x88
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001dec:	009a      	lsls	r2, r3, #2
 8001dee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001df0:	4413      	add	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	33a0      	adds	r3, #160	@ 0xa0
 8001df6:	443b      	add	r3, r7
 8001df8:	460a      	mov	r2, r1
 8001dfa:	f823 2c5c 	strh.w	r2, [r3, #-92]
			for(int j = 0; j < 4; j++)
 8001dfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e00:	3301      	adds	r3, #1
 8001e02:	677b      	str	r3, [r7, #116]	@ 0x74
 8001e04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	ddd1      	ble.n	8001dae <block_rotate+0x296>
		for(int i = 0; i < 4; i++)
 8001e0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	ddc8      	ble.n	8001da8 <block_rotate+0x290>
				}
			}
		}
	}
	return temp_block;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001e1c:	469c      	mov	ip, r3
 8001e1e:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001e22:	4665      	mov	r5, ip
 8001e24:	4626      	mov	r6, r4
 8001e26:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e28:	6028      	str	r0, [r5, #0]
 8001e2a:	6069      	str	r1, [r5, #4]
 8001e2c:	60aa      	str	r2, [r5, #8]
 8001e2e:	60eb      	str	r3, [r5, #12]
 8001e30:	3410      	adds	r4, #16
 8001e32:	f10c 0c10 	add.w	ip, ip, #16
 8001e36:	4574      	cmp	r4, lr
 8001e38:	d1f3      	bne.n	8001e22 <block_rotate+0x30a>
 8001e3a:	4663      	mov	r3, ip
 8001e3c:	4622      	mov	r2, r4
 8001e3e:	6810      	ldr	r0, [r2, #0]
 8001e40:	6018      	str	r0, [r3, #0]
}
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	37a4      	adds	r7, #164	@ 0xa4
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	08008308 	.word	0x08008308

08001e50 <can_move>:

uint8_t can_move(block_t *block, map_t *map, uint8_t dir)
{
 8001e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e54:	f5ad 7d47 	sub.w	sp, sp, #796	@ 0x31c
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001e5e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8001e62:	6018      	str	r0, [r3, #0]
 8001e64:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001e68:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8001e6c:	6019      	str	r1, [r3, #0]
 8001e6e:	4611      	mov	r1, r2
 8001e70:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001e74:	f2a3 22e1 	subw	r2, r3, #737	@ 0x2e1
 8001e78:	460b      	mov	r3, r1
 8001e7a:	7013      	strb	r3, [r2, #0]
 8001e7c:	466b      	mov	r3, sp
 8001e7e:	633b      	str	r3, [r7, #48]	@ 0x30
	//dir is 1 if R, 0 if L

	//evaluate the L/R touchpad input
	//erase current and draw new

	volatile block_t temp_tetromino = *block;
 8001e80:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001e84:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	461d      	mov	r5, r3
 8001e8c:	f507 7624 	add.w	r6, r7, #656	@ 0x290
 8001e90:	f105 0c30 	add.w	ip, r5, #48	@ 0x30
 8001e94:	4634      	mov	r4, r6
 8001e96:	462b      	mov	r3, r5
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	6859      	ldr	r1, [r3, #4]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ea2:	3510      	adds	r5, #16
 8001ea4:	3610      	adds	r6, #16
 8001ea6:	4565      	cmp	r5, ip
 8001ea8:	d1f4      	bne.n	8001e94 <can_move+0x44>
 8001eaa:	4632      	mov	r2, r6
 8001eac:	462b      	mov	r3, r5
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	6010      	str	r0, [r2, #0]
	volatile map_t temp_map = *map;
 8001eb2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001eb6:	f5a3 7230 	sub.w	r2, r3, #704	@ 0x2c0
 8001eba:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001ebe:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f240 2336 	movw	r3, #566	@ 0x236
 8001ecc:	461a      	mov	r2, r3
 8001ece:	f006 f991 	bl	80081f4 <memcpy>

	//evaluate the logical AND between the true blocks in block_t and
	//the next row of map_t (block y_pos + block size)
	uint16_t y_block[4] = {0};
 8001ed2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001ed6:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8001eda:	461a      	mov	r2, r3
 8001edc:	2300      	movs	r3, #0
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	6053      	str	r3, [r2, #4]
	uint16_t x_block[4] = {0};
 8001ee2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001ee6:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8001eea:	461a      	mov	r2, r3
 8001eec:	2300      	movs	r3, #0
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	6053      	str	r3, [r2, #4]
	uint8_t ind = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
	for(int j = 0; j < 4; j++)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 8001efe:	e051      	b.n	8001fa4 <can_move+0x154>
	{
		for(int i = 0; i < 4; i++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8001f06:	e044      	b.n	8001f92 <can_move+0x142>
		{
			if(temp_tetromino.mat[i][j])
 8001f08:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8001f0c:	009a      	lsls	r2, r3, #2
 8001f0e:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8001f12:	4413      	add	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001f1a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001f1e:	4413      	add	r3, r2
 8001f20:	f833 3c84 	ldrh.w	r3, [r3, #-132]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d02e      	beq.n	8001f88 <can_move+0x138>
			{
				y_block[ind] = temp_tetromino.y[j];
 8001f2a:	f897 0317 	ldrb.w	r0, [r7, #791]	@ 0x317
 8001f2e:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8001f32:	3314      	adds	r3, #20
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001f3a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001f3e:	4413      	add	r3, r2
 8001f40:	f833 3c84 	ldrh.w	r3, [r3, #-132]
 8001f44:	b299      	uxth	r1, r3
 8001f46:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001f4a:	f5a3 7232 	sub.w	r2, r3, #712	@ 0x2c8
 8001f4e:	460b      	mov	r3, r1
 8001f50:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
				x_block[ind] = temp_tetromino.x[i];
 8001f54:	f897 0317 	ldrb.w	r0, [r7, #791]	@ 0x317
 8001f58:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8001f5c:	3310      	adds	r3, #16
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001f64:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001f68:	4413      	add	r3, r2
 8001f6a:	f833 3c84 	ldrh.w	r3, [r3, #-132]
 8001f6e:	b299      	uxth	r1, r3
 8001f70:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001f74:	f5a3 7234 	sub.w	r2, r3, #720	@ 0x2d0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
				ind++;
 8001f7e:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 8001f82:	3301      	adds	r3, #1
 8001f84:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
		for(int i = 0; i < 4; i++)
 8001f88:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8001f92:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	ddb6      	ble.n	8001f08 <can_move+0xb8>
	for(int j = 0; j < 4; j++)
 8001f9a:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 8001fa4:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	dda9      	ble.n	8001f00 <can_move+0xb0>
			}
		}
	}

	uint16_t map_points = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f8a7 330a 	strh.w	r3, [r7, #778]	@ 0x30a
	for(int i = 0; i < 10; i++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 8001fb8:	e02b      	b.n	8002012 <can_move+0x1c2>
	{
		for(int j = 0; j < 13; j++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 8001fc0:	e01e      	b.n	8002000 <can_move+0x1b0>
		{
			if(temp_map.map_mat[i][j])
 8001fc2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001fc6:	f5a3 7130 	sub.w	r1, r3, #704	@ 0x2c0
 8001fca:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8001fce:	461a      	mov	r2, r3
 8001fd0:	0052      	lsls	r2, r2, #1
 8001fd2:	441a      	add	r2, r3
 8001fd4:	0092      	lsls	r2, r2, #2
 8001fd6:	441a      	add	r2, r3
 8001fd8:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8001fdc:	4413      	add	r3, r2
 8001fde:	3380      	adds	r3, #128	@ 0x80
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	440b      	add	r3, r1
 8001fe4:	889b      	ldrh	r3, [r3, #4]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d004      	beq.n	8001ff6 <can_move+0x1a6>
			{
				map_points++;
 8001fec:	f8b7 330a 	ldrh.w	r3, [r7, #778]	@ 0x30a
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f8a7 330a 	strh.w	r3, [r7, #778]	@ 0x30a
		for(int j = 0; j < 13; j++)
 8001ff6:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 8002000:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8002004:	2b0c      	cmp	r3, #12
 8002006:	dddc      	ble.n	8001fc2 <can_move+0x172>
	for(int i = 0; i < 10; i++)
 8002008:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 800200c:	3301      	adds	r3, #1
 800200e:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 8002012:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8002016:	2b09      	cmp	r3, #9
 8002018:	ddcf      	ble.n	8001fba <can_move+0x16a>
			}
		}
	}
	uint8_t map_y_index[map_points];
 800201a:	f8b7 130a 	ldrh.w	r1, [r7, #778]	@ 0x30a
 800201e:	460b      	mov	r3, r1
 8002020:	3b01      	subs	r3, #1
 8002022:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8002026:	b28b      	uxth	r3, r1
 8002028:	2200      	movs	r2, #0
 800202a:	4698      	mov	r8, r3
 800202c:	4691      	mov	r9, r2
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800203a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800203e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002042:	b28b      	uxth	r3, r1
 8002044:	2200      	movs	r2, #0
 8002046:	469a      	mov	sl, r3
 8002048:	4693      	mov	fp, r2
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002056:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800205a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800205e:	460b      	mov	r3, r1
 8002060:	3307      	adds	r3, #7
 8002062:	08db      	lsrs	r3, r3, #3
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	ebad 0d03 	sub.w	sp, sp, r3
 800206a:	466b      	mov	r3, sp
 800206c:	3300      	adds	r3, #0
 800206e:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
	uint8_t map_x_index[map_points];
 8002072:	f8b7 130a 	ldrh.w	r1, [r7, #778]	@ 0x30a
 8002076:	460b      	mov	r3, r1
 8002078:	3b01      	subs	r3, #1
 800207a:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 800207e:	b28b      	uxth	r3, r1
 8002080:	2200      	movs	r2, #0
 8002082:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002084:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002092:	4628      	mov	r0, r5
 8002094:	00c3      	lsls	r3, r0, #3
 8002096:	4620      	mov	r0, r4
 8002098:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800209c:	4620      	mov	r0, r4
 800209e:	00c2      	lsls	r2, r0, #3
 80020a0:	b28b      	uxth	r3, r1
 80020a2:	2200      	movs	r2, #0
 80020a4:	623b      	str	r3, [r7, #32]
 80020a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80020b4:	4628      	mov	r0, r5
 80020b6:	00c3      	lsls	r3, r0, #3
 80020b8:	4620      	mov	r0, r4
 80020ba:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80020be:	4620      	mov	r0, r4
 80020c0:	00c2      	lsls	r2, r0, #3
 80020c2:	460b      	mov	r3, r1
 80020c4:	3307      	adds	r3, #7
 80020c6:	08db      	lsrs	r3, r3, #3
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	ebad 0d03 	sub.w	sp, sp, r3
 80020ce:	466b      	mov	r3, sp
 80020d0:	3300      	adds	r3, #0
 80020d2:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
	uint16_t map_y[map_points];
 80020d6:	f8b7 130a 	ldrh.w	r1, [r7, #778]	@ 0x30a
 80020da:	460b      	mov	r3, r1
 80020dc:	3b01      	subs	r3, #1
 80020de:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 80020e2:	b28b      	uxth	r3, r1
 80020e4:	2200      	movs	r2, #0
 80020e6:	61bb      	str	r3, [r7, #24]
 80020e8:	61fa      	str	r2, [r7, #28]
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80020f6:	4628      	mov	r0, r5
 80020f8:	0103      	lsls	r3, r0, #4
 80020fa:	4620      	mov	r0, r4
 80020fc:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8002100:	4620      	mov	r0, r4
 8002102:	0102      	lsls	r2, r0, #4
 8002104:	b28b      	uxth	r3, r1
 8002106:	2200      	movs	r2, #0
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	617a      	str	r2, [r7, #20]
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002118:	4628      	mov	r0, r5
 800211a:	0103      	lsls	r3, r0, #4
 800211c:	4620      	mov	r0, r4
 800211e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8002122:	4620      	mov	r0, r4
 8002124:	0102      	lsls	r2, r0, #4
 8002126:	460b      	mov	r3, r1
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	3307      	adds	r3, #7
 800212c:	08db      	lsrs	r3, r3, #3
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	ebad 0d03 	sub.w	sp, sp, r3
 8002134:	466b      	mov	r3, sp
 8002136:	3301      	adds	r3, #1
 8002138:	085b      	lsrs	r3, r3, #1
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
	uint16_t map_x[map_points];
 8002140:	f8b7 130a 	ldrh.w	r1, [r7, #778]	@ 0x30a
 8002144:	460b      	mov	r3, r1
 8002146:	3b01      	subs	r3, #1
 8002148:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 800214c:	b28b      	uxth	r3, r1
 800214e:	2200      	movs	r2, #0
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	60fa      	str	r2, [r7, #12]
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002160:	4628      	mov	r0, r5
 8002162:	0103      	lsls	r3, r0, #4
 8002164:	4620      	mov	r0, r4
 8002166:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800216a:	4620      	mov	r0, r4
 800216c:	0102      	lsls	r2, r0, #4
 800216e:	b28b      	uxth	r3, r1
 8002170:	2200      	movs	r2, #0
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002182:	4628      	mov	r0, r5
 8002184:	0103      	lsls	r3, r0, #4
 8002186:	4620      	mov	r0, r4
 8002188:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800218c:	4620      	mov	r0, r4
 800218e:	0102      	lsls	r2, r0, #4
 8002190:	460b      	mov	r3, r1
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	3307      	adds	r3, #7
 8002196:	08db      	lsrs	r3, r3, #3
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	ebad 0d03 	sub.w	sp, sp, r3
 800219e:	466b      	mov	r3, sp
 80021a0:	3301      	adds	r3, #1
 80021a2:	085b      	lsrs	r3, r3, #1
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
	uint8_t index = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f887 32ff 	strb.w	r3, [r7, #767]	@ 0x2ff
	for(int i = 0; i < 10; i++)
 80021b0:	2300      	movs	r3, #0
 80021b2:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 80021b6:	e03b      	b.n	8002230 <can_move+0x3e0>
	{
		for(int j = 0; j < 13; j++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 80021be:	e02e      	b.n	800221e <can_move+0x3ce>
		{
			if(temp_map.map_mat[i][j])
 80021c0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80021c4:	f5a3 7130 	sub.w	r1, r3, #704	@ 0x2c0
 80021c8:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 80021cc:	4613      	mov	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 80021da:	4413      	add	r3, r2
 80021dc:	3380      	adds	r3, #128	@ 0x80
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	440b      	add	r3, r1
 80021e2:	889b      	ldrh	r3, [r3, #4]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d014      	beq.n	8002214 <can_move+0x3c4>
			{
				map_x_index[index] = i;
 80021ea:	f897 32ff 	ldrb.w	r3, [r7, #767]	@ 0x2ff
 80021ee:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 80021f2:	b2d1      	uxtb	r1, r2
 80021f4:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 80021f8:	54d1      	strb	r1, [r2, r3]
				map_y_index[index] = j;
 80021fa:	f897 32ff 	ldrb.w	r3, [r7, #767]	@ 0x2ff
 80021fe:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 8002202:	b2d1      	uxtb	r1, r2
 8002204:	f8d7 22dc 	ldr.w	r2, [r7, #732]	@ 0x2dc
 8002208:	54d1      	strb	r1, [r2, r3]
				index++;
 800220a:	f897 32ff 	ldrb.w	r3, [r7, #767]	@ 0x2ff
 800220e:	3301      	adds	r3, #1
 8002210:	f887 32ff 	strb.w	r3, [r7, #767]	@ 0x2ff
		for(int j = 0; j < 13; j++)
 8002214:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8002218:	3301      	adds	r3, #1
 800221a:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 800221e:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8002222:	2b0c      	cmp	r3, #12
 8002224:	ddcc      	ble.n	80021c0 <can_move+0x370>
	for(int i = 0; i < 10; i++)
 8002226:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 800222a:	3301      	adds	r3, #1
 800222c:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 8002230:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8002234:	2b09      	cmp	r3, #9
 8002236:	ddbf      	ble.n	80021b8 <can_move+0x368>
			}
		}
	}
	for(int i = 0; i < map_points; i++)
 8002238:	2300      	movs	r3, #0
 800223a:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 800223e:	e031      	b.n	80022a4 <can_move+0x454>
	{
		map_y[i] = temp_map.y[map_y_index[i]];
 8002240:	f8d7 22dc 	ldr.w	r2, [r7, #732]	@ 0x2dc
 8002244:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8002248:	4413      	add	r3, r2
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002252:	f5a3 7230 	sub.w	r2, r3, #704	@ 0x2c0
 8002256:	f501 7386 	add.w	r3, r1, #268	@ 0x10c
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	889b      	ldrh	r3, [r3, #4]
 8002260:	b299      	uxth	r1, r3
 8002262:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8002266:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 800226a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		map_x[i] = temp_map.x[map_x_index[i]];
 800226e:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 8002272:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8002276:	4413      	add	r3, r2
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002280:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8002284:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8002288:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800228c:	b299      	uxth	r1, r3
 800228e:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 8002292:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 8002296:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < map_points; i++)
 800229a:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 800229e:	3301      	adds	r3, #1
 80022a0:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 80022a4:	f8b7 330a 	ldrh.w	r3, [r7, #778]	@ 0x30a
 80022a8:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 80022ac:	429a      	cmp	r2, r3
 80022ae:	dbc7      	blt.n	8002240 <can_move+0x3f0>
	}

	uint8_t overlap_map_y_index[4];
	for(int i = 0; i < 4; i++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 80022b6:	e02d      	b.n	8002314 <can_move+0x4c4>
	{
		for(int j = 0; j < 13; j++)
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 80022be:	e020      	b.n	8002302 <can_move+0x4b2>
		{
			if(y_block[i] == map_y[j])
 80022c0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80022c4:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 80022c8:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 80022cc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80022d0:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 80022d4:	f8d7 12e8 	ldr.w	r1, [r7, #744]	@ 0x2e8
 80022d8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d10b      	bne.n	80022f8 <can_move+0x4a8>
			{
				overlap_map_y_index[i] = j;
 80022e0:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80022e4:	b2d9      	uxtb	r1, r3
 80022e6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80022ea:	f5a3 7235 	sub.w	r2, r3, #724	@ 0x2d4
 80022ee:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80022f2:	4413      	add	r3, r2
 80022f4:	460a      	mov	r2, r1
 80022f6:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 13; j++)
 80022f8:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80022fc:	3301      	adds	r3, #1
 80022fe:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 8002302:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8002306:	2b0c      	cmp	r3, #12
 8002308:	ddda      	ble.n	80022c0 <can_move+0x470>
	for(int i = 0; i < 4; i++)
 800230a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 800230e:	3301      	adds	r3, #1
 8002310:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8002314:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8002318:	2b03      	cmp	r3, #3
 800231a:	ddcd      	ble.n	80022b8 <can_move+0x468>
			}
		}
	}

	for(int i = 0; i < 4; i++)
 800231c:	2300      	movs	r3, #0
 800231e:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 8002322:	e05c      	b.n	80023de <can_move+0x58e>
	{
		if(dir)
 8002324:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002328:	f2a3 23e1 	subw	r3, r3, #737	@ 0x2e1
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d024      	beq.n	800237c <can_move+0x52c>
		{
			if(map_x[overlap_map_y_index[i]] == x_block[i] + BLOCK_WIDTH || x_block[i] == RIGHT_EDGE)
 8002332:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002336:	f5a3 7235 	sub.w	r2, r3, #724	@ 0x2d4
 800233a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 800233e:	4413      	add	r3, r2
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 8002348:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800234c:	4619      	mov	r1, r3
 800234e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002352:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8002356:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 800235a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800235e:	3317      	adds	r3, #23
 8002360:	4299      	cmp	r1, r3
 8002362:	d009      	beq.n	8002378 <can_move+0x528>
 8002364:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002368:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 800236c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 8002370:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002374:	2bd5      	cmp	r3, #213	@ 0xd5
 8002376:	d12d      	bne.n	80023d4 <can_move+0x584>
			{
				return 0;
 8002378:	2300      	movs	r3, #0
 800237a:	e035      	b.n	80023e8 <can_move+0x598>
			}
		}
		else if(!dir)
 800237c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002380:	f2a3 23e1 	subw	r3, r3, #737	@ 0x2e1
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d124      	bne.n	80023d4 <can_move+0x584>
		{
			if(map_x[overlap_map_y_index[i]] == x_block[i] - BLOCK_WIDTH || x_block[i] == LEFT_EDGE)
 800238a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800238e:	f5a3 7235 	sub.w	r2, r3, #724	@ 0x2d4
 8002392:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8002396:	4413      	add	r3, r2
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 80023a0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023a4:	4619      	mov	r1, r3
 80023a6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80023aa:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 80023ae:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 80023b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023b6:	3b17      	subs	r3, #23
 80023b8:	4299      	cmp	r1, r3
 80023ba:	d009      	beq.n	80023d0 <can_move+0x580>
 80023bc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80023c0:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 80023c4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 80023c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023cc:	2b06      	cmp	r3, #6
 80023ce:	d101      	bne.n	80023d4 <can_move+0x584>
			{
				return 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	e009      	b.n	80023e8 <can_move+0x598>
	for(int i = 0; i < 4; i++)
 80023d4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80023d8:	3301      	adds	r3, #1
 80023da:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 80023de:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	dd9e      	ble.n	8002324 <can_move+0x4d4>
			}
		}
	}
	return 1;
 80023e6:	2301      	movs	r3, #1
 80023e8:	f8d7 d030 	ldr.w	sp, [r7, #48]	@ 0x30
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	f507 7747 	add.w	r7, r7, #796	@ 0x31c
 80023f2:	46bd      	mov	sp, r7
 80023f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080023f8 <block_move>:

block_t block_move(block_t *block, map_t *map, uint8_t dir)
{
 80023f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023fa:	b095      	sub	sp, #84	@ 0x54
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	70fb      	strb	r3, [r7, #3]
	//when timer reaches ARR and enters IRQ handler, call this function
	//erase current and draw new tetromino
	volatile block_t temp_tetromino = *block;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	461c      	mov	r4, r3
 800240a:	f107 0614 	add.w	r6, r7, #20
 800240e:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002412:	4635      	mov	r5, r6
 8002414:	4623      	mov	r3, r4
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	6859      	ldr	r1, [r3, #4]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002420:	3410      	adds	r4, #16
 8002422:	3610      	adds	r6, #16
 8002424:	4564      	cmp	r4, ip
 8002426:	d1f4      	bne.n	8002412 <block_move+0x1a>
 8002428:	4633      	mov	r3, r6
 800242a:	4622      	mov	r2, r4
 800242c:	6810      	ldr	r0, [r2, #0]
 800242e:	6018      	str	r0, [r3, #0]
	if(dir)
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d01a      	beq.n	800246c <block_move+0x74>
	{
		for(int i = 0; i < 4; i++)
 8002436:	2300      	movs	r3, #0
 8002438:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800243a:	e013      	b.n	8002464 <block_move+0x6c>
		{
			temp_tetromino.x[i] += BLOCK_WIDTH;
 800243c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800243e:	3310      	adds	r3, #16
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	3350      	adds	r3, #80	@ 0x50
 8002444:	443b      	add	r3, r7
 8002446:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 800244a:	b29b      	uxth	r3, r3
 800244c:	3317      	adds	r3, #23
 800244e:	b29a      	uxth	r2, r3
 8002450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002452:	3310      	adds	r3, #16
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	3350      	adds	r3, #80	@ 0x50
 8002458:	443b      	add	r3, r7
 800245a:	f823 2c38 	strh.w	r2, [r3, #-56]
		for(int i = 0; i < 4; i++)
 800245e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002460:	3301      	adds	r3, #1
 8002462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002466:	2b03      	cmp	r3, #3
 8002468:	dde8      	ble.n	800243c <block_move+0x44>
 800246a:	e019      	b.n	80024a0 <block_move+0xa8>
		}
	}
	else
	{
		for(int i = 0; i < 4; i++)
 800246c:	2300      	movs	r3, #0
 800246e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002470:	e013      	b.n	800249a <block_move+0xa2>
		{
			temp_tetromino.x[i] -= BLOCK_WIDTH;
 8002472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002474:	3310      	adds	r3, #16
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	3350      	adds	r3, #80	@ 0x50
 800247a:	443b      	add	r3, r7
 800247c:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8002480:	b29b      	uxth	r3, r3
 8002482:	3b17      	subs	r3, #23
 8002484:	b29a      	uxth	r2, r3
 8002486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002488:	3310      	adds	r3, #16
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	3350      	adds	r3, #80	@ 0x50
 800248e:	443b      	add	r3, r7
 8002490:	f823 2c38 	strh.w	r2, [r3, #-56]
		for(int i = 0; i < 4; i++)
 8002494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002496:	3301      	adds	r3, #1
 8002498:	64bb      	str	r3, [r7, #72]	@ 0x48
 800249a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800249c:	2b03      	cmp	r3, #3
 800249e:	dde8      	ble.n	8002472 <block_move+0x7a>
		}
	}
	return temp_tetromino;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f107 0414 	add.w	r4, r7, #20
 80024a6:	469c      	mov	ip, r3
 80024a8:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80024ac:	4665      	mov	r5, ip
 80024ae:	4626      	mov	r6, r4
 80024b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80024b2:	6028      	str	r0, [r5, #0]
 80024b4:	6069      	str	r1, [r5, #4]
 80024b6:	60aa      	str	r2, [r5, #8]
 80024b8:	60eb      	str	r3, [r5, #12]
 80024ba:	3410      	adds	r4, #16
 80024bc:	f10c 0c10 	add.w	ip, ip, #16
 80024c0:	4574      	cmp	r4, lr
 80024c2:	d1f3      	bne.n	80024ac <block_move+0xb4>
 80024c4:	4663      	mov	r3, ip
 80024c6:	4622      	mov	r2, r4
 80024c8:	6810      	ldr	r0, [r2, #0]
 80024ca:	6018      	str	r0, [r3, #0]
}
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	3754      	adds	r7, #84	@ 0x54
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024d4 <draw_block>:

void draw_block(uint16_t x, uint16_t y, uint16_t color)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	80fb      	strh	r3, [r7, #6]
 80024de:	460b      	mov	r3, r1
 80024e0:	80bb      	strh	r3, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	807b      	strh	r3, [r7, #2]
	for(int i = 0; i < BLOCK_WIDTH-1; i++)
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	e00c      	b.n	8002506 <draw_block+0x32>
	{
		LCD_Draw_Horizontal_Line(x, y+i, BLOCK_WIDTH-1, color);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	88bb      	ldrh	r3, [r7, #4]
 80024f2:	4413      	add	r3, r2
 80024f4:	b299      	uxth	r1, r3
 80024f6:	887b      	ldrh	r3, [r7, #2]
 80024f8:	88f8      	ldrh	r0, [r7, #6]
 80024fa:	2216      	movs	r2, #22
 80024fc:	f000 fd39 	bl	8002f72 <LCD_Draw_Horizontal_Line>
	for(int i = 0; i < BLOCK_WIDTH-1; i++)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3301      	adds	r3, #1
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2b15      	cmp	r3, #21
 800250a:	ddef      	ble.n	80024ec <draw_block+0x18>
	}
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <draw_shapes>:

void draw_shapes()
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b088      	sub	sp, #32
 800251a:	af00      	add	r7, sp, #0
	uint16_t x_offset = (LCD_PIXEL_WIDTH - (7 * (BLOCK_WIDTH * 4 + 15))) / 2;
 800251c:	f64f 7302 	movw	r3, #65282	@ 0xff02
 8002520:	80fb      	strh	r3, [r7, #6]

	// I tetromino (cyan)
	for (int i = 0; i < 4; i++)
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	e012      	b.n	800254e <draw_shapes+0x38>
	{
	   	draw_block(6, 224 + i*BLOCK_WIDTH, LCD_COLOR_CYAN);
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	b29b      	uxth	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	0052      	lsls	r2, r2, #1
 8002530:	441a      	add	r2, r3
 8002532:	00d2      	lsls	r2, r2, #3
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	b29b      	uxth	r3, r3
 8002538:	33e0      	adds	r3, #224	@ 0xe0
 800253a:	b29b      	uxth	r3, r3
 800253c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002540:	4619      	mov	r1, r3
 8002542:	2006      	movs	r0, #6
 8002544:	f7ff ffc6 	bl	80024d4 <draw_block>
	for (int i = 0; i < 4; i++)
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	3301      	adds	r3, #1
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	2b03      	cmp	r3, #3
 8002552:	dde9      	ble.n	8002528 <draw_shapes+0x12>
	}

	// L tetromino (green)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8002554:	88fb      	ldrh	r3, [r7, #6]
 8002556:	336b      	adds	r3, #107	@ 0x6b
 8002558:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++)
 800255a:	2300      	movs	r3, #0
 800255c:	61bb      	str	r3, [r7, #24]
 800255e:	e012      	b.n	8002586 <draw_shapes+0x70>
	{
	   	draw_block(i*BLOCK_WIDTH + 144, 224 + BLOCK_WIDTH, LCD_COLOR_GREEN);
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	b29b      	uxth	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	0052      	lsls	r2, r2, #1
 8002568:	441a      	add	r2, r3
 800256a:	00d2      	lsls	r2, r2, #3
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	b29b      	uxth	r3, r3
 8002570:	3390      	adds	r3, #144	@ 0x90
 8002572:	b29b      	uxth	r3, r3
 8002574:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002578:	21f7      	movs	r1, #247	@ 0xf7
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff ffaa 	bl	80024d4 <draw_block>
	for (int i = 0; i < 3; i++)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	3301      	adds	r3, #1
 8002584:	61bb      	str	r3, [r7, #24]
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	2b02      	cmp	r3, #2
 800258a:	dde9      	ble.n	8002560 <draw_shapes+0x4a>
	}
	draw_block(190, 224, LCD_COLOR_GREEN);
 800258c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002590:	21e0      	movs	r1, #224	@ 0xe0
 8002592:	20be      	movs	r0, #190	@ 0xbe
 8002594:	f7ff ff9e 	bl	80024d4 <draw_block>

	// J tetromino (yellow)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8002598:	88fb      	ldrh	r3, [r7, #6]
 800259a:	336b      	adds	r3, #107	@ 0x6b
 800259c:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++)
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	e013      	b.n	80025cc <draw_shapes+0xb6>
	{
	   	draw_block(75 + (i-2)*BLOCK_WIDTH, 224 + BLOCK_WIDTH, LCD_COLOR_YELLOW);
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	3b02      	subs	r3, #2
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	461a      	mov	r2, r3
 80025ac:	0052      	lsls	r2, r2, #1
 80025ae:	441a      	add	r2, r3
 80025b0:	00d2      	lsls	r2, r2, #3
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	334b      	adds	r3, #75	@ 0x4b
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80025be:	21f7      	movs	r1, #247	@ 0xf7
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff87 	bl	80024d4 <draw_block>
	for (int i = 0; i < 3; i++)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	3301      	adds	r3, #1
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	dde8      	ble.n	80025a4 <draw_shapes+0x8e>
	}
	draw_block(52 + BLOCK_WIDTH, 224 + 2*BLOCK_WIDTH, LCD_COLOR_YELLOW);
 80025d2:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80025d6:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80025da:	204b      	movs	r0, #75	@ 0x4b
 80025dc:	f7ff ff7a 	bl	80024d4 <draw_block>

	// O tetromino (orange)
	x_offset += BLOCK_WIDTH * 4 + 15;
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	336b      	adds	r3, #107	@ 0x6b
 80025e4:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 2; i++) {
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	e025      	b.n	8002638 <draw_shapes+0x122>
	    for (int j = 0; j < 2; j++) {
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	e01c      	b.n	800262c <draw_shapes+0x116>
	       	draw_block(67 + i*BLOCK_WIDTH - 38, 270 + j*BLOCK_WIDTH, LCD_COLOR_ORANGE);
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	461a      	mov	r2, r3
 80025f8:	0052      	lsls	r2, r2, #1
 80025fa:	441a      	add	r2, r3
 80025fc:	00d2      	lsls	r2, r2, #3
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	b29b      	uxth	r3, r3
 8002602:	331d      	adds	r3, #29
 8002604:	b298      	uxth	r0, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	b29b      	uxth	r3, r3
 800260a:	461a      	mov	r2, r3
 800260c:	0052      	lsls	r2, r2, #1
 800260e:	441a      	add	r2, r3
 8002610:	00d2      	lsls	r2, r2, #3
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	b29b      	uxth	r3, r3
 8002616:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 800261a:	b29b      	uxth	r3, r3
 800261c:	f64f 32c1 	movw	r2, #64449	@ 0xfbc1
 8002620:	4619      	mov	r1, r3
 8002622:	f7ff ff57 	bl	80024d4 <draw_block>
	    for (int j = 0; j < 2; j++) {
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	3301      	adds	r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b01      	cmp	r3, #1
 8002630:	dddf      	ble.n	80025f2 <draw_shapes+0xdc>
	for (int i = 0; i < 2; i++) {
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	3301      	adds	r3, #1
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b01      	cmp	r3, #1
 800263c:	ddd6      	ble.n	80025ec <draw_shapes+0xd6>
	    }
	}

	// S tetromino (magenta)
	x_offset += BLOCK_WIDTH * 4 + 15;
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	336b      	adds	r3, #107	@ 0x6b
 8002642:	80fb      	strh	r3, [r7, #6]
	draw_block(144, 270 + BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 8002644:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002648:	f240 1125 	movw	r1, #293	@ 0x125
 800264c:	2090      	movs	r0, #144	@ 0x90
 800264e:	f7ff ff41 	bl	80024d4 <draw_block>
	draw_block(144 + BLOCK_WIDTH, 270 + BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 8002652:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002656:	f240 1125 	movw	r1, #293	@ 0x125
 800265a:	20a7      	movs	r0, #167	@ 0xa7
 800265c:	f7ff ff3a 	bl	80024d4 <draw_block>
	draw_block(144 + BLOCK_WIDTH, 270, LCD_COLOR_MAGENTA);
 8002660:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002664:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002668:	20a7      	movs	r0, #167	@ 0xa7
 800266a:	f7ff ff33 	bl	80024d4 <draw_block>
	draw_block(144 + BLOCK_WIDTH * 2, 270, LCD_COLOR_MAGENTA);
 800266e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002672:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002676:	20be      	movs	r0, #190	@ 0xbe
 8002678:	f7ff ff2c 	bl	80024d4 <draw_block>

	// T tetromino (blue2)
	x_offset += BLOCK_WIDTH * 4 + 15;
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	336b      	adds	r3, #107	@ 0x6b
 8002680:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++) {
 8002682:	2300      	movs	r3, #0
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	e014      	b.n	80026b2 <draw_shapes+0x19c>
	   	draw_block(LEFT_EDGE + (i+3) * BLOCK_WIDTH, 293, LCD_COLOR_BLUE2);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	3303      	adds	r3, #3
 800268c:	b29b      	uxth	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	0052      	lsls	r2, r2, #1
 8002692:	441a      	add	r2, r3
 8002694:	00d2      	lsls	r2, r2, #3
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	b29b      	uxth	r3, r3
 800269a:	3306      	adds	r3, #6
 800269c:	b29b      	uxth	r3, r3
 800269e:	f240 521f 	movw	r2, #1311	@ 0x51f
 80026a2:	f240 1125 	movw	r1, #293	@ 0x125
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff ff14 	bl	80024d4 <draw_block>
	for (int i = 0; i < 3; i++) {
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	3301      	adds	r3, #1
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	dde7      	ble.n	8002688 <draw_shapes+0x172>
	}
	draw_block(LEFT_EDGE + 4*BLOCK_WIDTH, 293 - BLOCK_WIDTH, LCD_COLOR_BLUE2);
 80026b8:	f240 521f 	movw	r2, #1311	@ 0x51f
 80026bc:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80026c0:	2062      	movs	r0, #98	@ 0x62
 80026c2:	f7ff ff07 	bl	80024d4 <draw_block>

	// Z tetromino (strawberry)
	x_offset += BLOCK_WIDTH * 4 + 15;
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	336b      	adds	r3, #107	@ 0x6b
 80026ca:	80fb      	strh	r3, [r7, #6]
	draw_block(LEFT_EDGE + 4*BLOCK_WIDTH, 247, LCD_COLOR_STRAWBERRY);
 80026cc:	f64f 1287 	movw	r2, #63879	@ 0xf987
 80026d0:	21f7      	movs	r1, #247	@ 0xf7
 80026d2:	2062      	movs	r0, #98	@ 0x62
 80026d4:	f7ff fefe 	bl	80024d4 <draw_block>
	draw_block(LEFT_EDGE + 5*BLOCK_WIDTH, 247, LCD_COLOR_STRAWBERRY);
 80026d8:	f64f 1287 	movw	r2, #63879	@ 0xf987
 80026dc:	21f7      	movs	r1, #247	@ 0xf7
 80026de:	2079      	movs	r0, #121	@ 0x79
 80026e0:	f7ff fef8 	bl	80024d4 <draw_block>
	draw_block(LEFT_EDGE + 5*BLOCK_WIDTH, 247 + BLOCK_WIDTH, LCD_COLOR_STRAWBERRY);
 80026e4:	f64f 1287 	movw	r2, #63879	@ 0xf987
 80026e8:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80026ec:	2079      	movs	r0, #121	@ 0x79
 80026ee:	f7ff fef1 	bl	80024d4 <draw_block>
	draw_block(LEFT_EDGE + 6*BLOCK_WIDTH, 247 + BLOCK_WIDTH, LCD_COLOR_STRAWBERRY);
 80026f2:	f64f 1287 	movw	r2, #63879	@ 0xf987
 80026f6:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80026fa:	2090      	movs	r0, #144	@ 0x90
 80026fc:	f7ff feea 	bl	80024d4 <draw_block>

	// "O" shape (magenta)
	draw_block(x_offset - 50 + BLOCK_WIDTH, 246 - 9*BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	3b1b      	subs	r3, #27
 8002704:	b29b      	uxth	r3, r3
 8002706:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800270a:	2127      	movs	r1, #39	@ 0x27
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fee1 	bl	80024d4 <draw_block>
	draw_block(x_offset - 50 , 246 - 9*BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	3b32      	subs	r3, #50	@ 0x32
 8002716:	b29b      	uxth	r3, r3
 8002718:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800271c:	2127      	movs	r1, #39	@ 0x27
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fed8 	bl	80024d4 <draw_block>
	draw_block(x_offset - 50 , 246 - 8*BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	3b32      	subs	r3, #50	@ 0x32
 8002728:	b29b      	uxth	r3, r3
 800272a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800272e:	213e      	movs	r1, #62	@ 0x3e
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fecf 	bl	80024d4 <draw_block>
	draw_block(x_offset - 50 + BLOCK_WIDTH, 246 - 8*BLOCK_WIDTH, LCD_COLOR_MAGENTA);
 8002736:	88fb      	ldrh	r3, [r7, #6]
 8002738:	3b1b      	subs	r3, #27
 800273a:	b29b      	uxth	r3, r3
 800273c:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002740:	213e      	movs	r1, #62	@ 0x3e
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fec6 	bl	80024d4 <draw_block>
}
 8002748:	bf00      	nop
 800274a:	3720      	adds	r7, #32
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <draw_tetromino>:

void draw_tetromino(block_t block)
{
 8002750:	b084      	sub	sp, #16
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	f107 0c10 	add.w	ip, r7, #16
 800275c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i < 4; i++)
 8002760:	2300      	movs	r3, #0
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	e029      	b.n	80027ba <draw_tetromino+0x6a>
	{
		for(int j = 0; j < 4; j++)
 8002766:	2300      	movs	r3, #0
 8002768:	603b      	str	r3, [r7, #0]
 800276a:	e020      	b.n	80027ae <draw_tetromino+0x5e>
		{
			if(block.mat[i][j])
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	009a      	lsls	r2, r3, #2
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	4413      	add	r3, r2
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	3310      	adds	r3, #16
 8002778:	443b      	add	r3, r7
 800277a:	889b      	ldrh	r3, [r3, #4]
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d012      	beq.n	80027a8 <draw_tetromino+0x58>
			{
				draw_block(block.x[i], block.y[j], block.color);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3310      	adds	r3, #16
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	3310      	adds	r3, #16
 800278a:	443b      	add	r3, r7
 800278c:	889b      	ldrh	r3, [r3, #4]
 800278e:	b298      	uxth	r0, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	3314      	adds	r3, #20
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	3310      	adds	r3, #16
 8002798:	443b      	add	r3, r7
 800279a:	889b      	ldrh	r3, [r3, #4]
 800279c:	b29b      	uxth	r3, r3
 800279e:	8a7a      	ldrh	r2, [r7, #18]
 80027a0:	b292      	uxth	r2, r2
 80027a2:	4619      	mov	r1, r3
 80027a4:	f7ff fe96 	bl	80024d4 <draw_block>
		for(int j = 0; j < 4; j++)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	3301      	adds	r3, #1
 80027ac:	603b      	str	r3, [r7, #0]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	dddb      	ble.n	800276c <draw_tetromino+0x1c>
	for(int i = 0; i < 4; i++)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3301      	adds	r3, #1
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	ddd2      	ble.n	8002766 <draw_tetromino+0x16>
			}
		}
	}
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027cc:	b004      	add	sp, #16
 80027ce:	4770      	bx	lr

080027d0 <clear_tetromino>:

void clear_tetromino(block_t block)
{
 80027d0:	b084      	sub	sp, #16
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	f107 0c10 	add.w	ip, r7, #16
 80027dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i < 4; i++)
 80027e0:	2300      	movs	r3, #0
 80027e2:	607b      	str	r3, [r7, #4]
 80027e4:	e028      	b.n	8002838 <clear_tetromino+0x68>
	{
		for(int j = 0; j < 4; j++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	603b      	str	r3, [r7, #0]
 80027ea:	e01f      	b.n	800282c <clear_tetromino+0x5c>
		{
			if(block.mat[i][j])
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	009a      	lsls	r2, r3, #2
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	3310      	adds	r3, #16
 80027f8:	443b      	add	r3, r7
 80027fa:	889b      	ldrh	r3, [r3, #4]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d011      	beq.n	8002826 <clear_tetromino+0x56>
			{
				draw_block(block.x[i], block.y[j], LCD_COLOR_BLACK);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3310      	adds	r3, #16
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	3310      	adds	r3, #16
 800280a:	443b      	add	r3, r7
 800280c:	889b      	ldrh	r3, [r3, #4]
 800280e:	b298      	uxth	r0, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	3314      	adds	r3, #20
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	3310      	adds	r3, #16
 8002818:	443b      	add	r3, r7
 800281a:	889b      	ldrh	r3, [r3, #4]
 800281c:	b29b      	uxth	r3, r3
 800281e:	2200      	movs	r2, #0
 8002820:	4619      	mov	r1, r3
 8002822:	f7ff fe57 	bl	80024d4 <draw_block>
		for(int j = 0; j < 4; j++)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	3301      	adds	r3, #1
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b03      	cmp	r3, #3
 8002830:	dddc      	ble.n	80027ec <clear_tetromino+0x1c>
	for(int i = 0; i < 4; i++)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3301      	adds	r3, #1
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b03      	cmp	r3, #3
 800283c:	ddd3      	ble.n	80027e6 <clear_tetromino+0x16>
			}
		}
	}
}
 800283e:	bf00      	nop
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800284a:	b004      	add	sp, #16
 800284c:	4770      	bx	lr

0800284e <can_spawn>:
	}
	return 0;
}

uint8_t can_spawn(block_t *block, map_t *map)
{
 800284e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002850:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 8002854:	af00      	add	r7, sp, #0
 8002856:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800285a:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 800285e:	6018      	str	r0, [r3, #0]
 8002860:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002864:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8002868:	6019      	str	r1, [r3, #0]
	volatile block_t temp_tetromino = *block;
 800286a:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800286e:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	461c      	mov	r4, r3
 8002876:	f507 7614 	add.w	r6, r7, #592	@ 0x250
 800287a:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800287e:	4635      	mov	r5, r6
 8002880:	4623      	mov	r3, r4
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	6859      	ldr	r1, [r3, #4]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800288c:	3410      	adds	r4, #16
 800288e:	3610      	adds	r6, #16
 8002890:	4564      	cmp	r4, ip
 8002892:	d1f4      	bne.n	800287e <can_spawn+0x30>
 8002894:	4633      	mov	r3, r6
 8002896:	4622      	mov	r2, r4
 8002898:	6810      	ldr	r0, [r2, #0]
 800289a:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 800289c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80028a0:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 80028a4:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80028a8:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	f240 2336 	movw	r3, #566	@ 0x236
 80028b6:	461a      	mov	r2, r3
 80028b8:	f005 fc9c 	bl	80081f4 <memcpy>

	uint16_t block_x[4];
	uint16_t block_y[4];
	uint8_t ind = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297

	for(int i = 0; i < 4; i++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 80028c8:	e049      	b.n	800295e <can_spawn+0x110>
	{
		for(int j = 0; j < 4; j++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 80028d0:	e03c      	b.n	800294c <can_spawn+0xfe>
		{
			if(temp_tetromino.mat[i][j])
 80028d2:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80028d6:	009a      	lsls	r2, r3, #2
 80028d8:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 80028dc:	4413      	add	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80028e4:	443b      	add	r3, r7
 80028e6:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d028      	beq.n	8002942 <can_spawn+0xf4>
			{
				block_x[ind] = temp_tetromino.x[i];
 80028f0:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 80028f4:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80028f8:	3310      	adds	r3, #16
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002900:	443b      	add	r3, r7
 8002902:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8002906:	b299      	uxth	r1, r3
 8002908:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800290c:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8002910:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				block_y[ind] = temp_tetromino.y[j];
 8002914:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 8002918:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 800291c:	3314      	adds	r3, #20
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002924:	443b      	add	r3, r7
 8002926:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 800292a:	b299      	uxth	r1, r3
 800292c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002930:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002934:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				ind++;
 8002938:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 800293c:	3301      	adds	r3, #1
 800293e:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
		for(int j = 0; j < 4; j++)
 8002942:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8002946:	3301      	adds	r3, #1
 8002948:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 800294c:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8002950:	2b03      	cmp	r3, #3
 8002952:	ddbe      	ble.n	80028d2 <can_spawn+0x84>
	for(int i = 0; i < 4; i++)
 8002954:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8002958:	3301      	adds	r3, #1
 800295a:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 800295e:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8002962:	2b03      	cmp	r3, #3
 8002964:	ddb1      	ble.n	80028ca <can_spawn+0x7c>
			}
		}
	}

	//iterate through the columns in the first 3 rows of the map, and if overlap, return 0
	for(int i = 3; i < 7; i++)
 8002966:	2303      	movs	r3, #3
 8002968:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 800296c:	e0c4      	b.n	8002af8 <can_spawn+0x2aa>
	{
		for(int j = 0; j < 3; j++)
 800296e:	2300      	movs	r3, #0
 8002970:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8002974:	e0b6      	b.n	8002ae4 <can_spawn+0x296>
		{
			if(temp_map.map_mat[i][j])
 8002976:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800297a:	f5a3 7120 	sub.w	r1, r3, #640	@ 0x280
 800297e:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8002982:	4613      	mov	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8002990:	4413      	add	r3, r2
 8002992:	3380      	adds	r3, #128	@ 0x80
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	440b      	add	r3, r1
 8002998:	889b      	ldrh	r3, [r3, #4]
 800299a:	b29b      	uxth	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 809c 	beq.w	8002ada <can_spawn+0x28c>
			{
				if(temp_map.x[i] == block_x[0] && temp_map.y[j] == block_y[0])
 80029a2:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80029a6:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80029aa:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 80029ae:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80029b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80029bc:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d114      	bne.n	80029f0 <can_spawn+0x1a2>
 80029c6:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80029ca:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 80029ce:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80029d2:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	889b      	ldrh	r3, [r3, #4]
 80029dc:	b29a      	uxth	r2, r3
 80029de:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80029e2:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d101      	bne.n	80029f0 <can_spawn+0x1a2>
				{
					return 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	e089      	b.n	8002b04 <can_spawn+0x2b6>
				}
				else if(temp_map.x[i] == block_x[1] && temp_map.y[j] == block_y[1])
 80029f0:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80029f4:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80029f8:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 80029fc:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8002a00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002a0a:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8002a0e:	885b      	ldrh	r3, [r3, #2]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d114      	bne.n	8002a3e <can_spawn+0x1f0>
 8002a14:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002a18:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 8002a1c:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002a20:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	889b      	ldrh	r3, [r3, #4]
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002a30:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002a34:	885b      	ldrh	r3, [r3, #2]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d101      	bne.n	8002a3e <can_spawn+0x1f0>
				{
					return 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e062      	b.n	8002b04 <can_spawn+0x2b6>
				}
				else if(temp_map.x[i] == block_x[2] && temp_map.y[j] == block_y[2])
 8002a3e:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002a42:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8002a46:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8002a4a:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8002a4e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002a58:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8002a5c:	889b      	ldrh	r3, [r3, #4]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d114      	bne.n	8002a8c <can_spawn+0x23e>
 8002a62:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002a66:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 8002a6a:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002a6e:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4413      	add	r3, r2
 8002a76:	889b      	ldrh	r3, [r3, #4]
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002a7e:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002a82:	889b      	ldrh	r3, [r3, #4]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d101      	bne.n	8002a8c <can_spawn+0x23e>
				{
					return 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e03b      	b.n	8002b04 <can_spawn+0x2b6>
				}
				else if(temp_map.x[i] == block_x[3] && temp_map.y[j] == block_y[3])
 8002a8c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002a90:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8002a94:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8002a98:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8002a9c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002aa6:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8002aaa:	88db      	ldrh	r3, [r3, #6]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d114      	bne.n	8002ada <can_spawn+0x28c>
 8002ab0:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002ab4:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 8002ab8:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002abc:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	4413      	add	r3, r2
 8002ac4:	889b      	ldrh	r3, [r3, #4]
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002acc:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002ad0:	88db      	ldrh	r3, [r3, #6]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d101      	bne.n	8002ada <can_spawn+0x28c>
				{
					return 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e014      	b.n	8002b04 <can_spawn+0x2b6>
		for(int j = 0; j < 3; j++)
 8002ada:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8002ae4:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	f77f af44 	ble.w	8002976 <can_spawn+0x128>
	for(int i = 3; i < 7; i++)
 8002aee:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8002af2:	3301      	adds	r3, #1
 8002af4:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8002af8:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8002afc:	2b06      	cmp	r3, #6
 8002afe:	f77f af36 	ble.w	800296e <can_spawn+0x120>
				}
			}
		}
	}
	return 1;
 8002b02:	2301      	movs	r3, #1
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	f507 7727 	add.w	r7, r7, #668	@ 0x29c
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002b10 <MX_RNG_Init>:

static void MX_RNG_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
  __HAL_RCC_RNG_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b54 <MX_RNG_Init+0x44>)
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b1e:	4a0d      	ldr	r2, [pc, #52]	@ (8002b54 <MX_RNG_Init+0x44>)
 8002b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b24:	6353      	str	r3, [r2, #52]	@ 0x34
 8002b26:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <MX_RNG_Init+0x44>)
 8002b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b2e:	607b      	str	r3, [r7, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
  hrng.Instance = RNG;
 8002b32:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <MX_RNG_Init+0x48>)
 8002b34:	4a09      	ldr	r2, [pc, #36]	@ (8002b5c <MX_RNG_Init+0x4c>)
 8002b36:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002b38:	4807      	ldr	r0, [pc, #28]	@ (8002b58 <MX_RNG_Init+0x48>)
 8002b3a:	f004 fde7 	bl	800770c <HAL_RNG_Init>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <MX_RNG_Init+0x3a>
  {
	  APPLICATION_ASSERT(1);
 8002b44:	2001      	movs	r0, #1
 8002b46:	f000 f857 	bl	8002bf8 <APPLICATION_ASSERT>
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800
 8002b58:	200000a0 	.word	0x200000a0
 8002b5c:	50060800 	.word	0x50060800

08002b60 <MX_RNG_Deinit>:

static void MX_RNG_Deinit(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  __HAL_RCC_RNG_CLK_DISABLE();
 8002b64:	4b09      	ldr	r3, [pc, #36]	@ (8002b8c <MX_RNG_Deinit+0x2c>)
 8002b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b68:	4a08      	ldr	r2, [pc, #32]	@ (8002b8c <MX_RNG_Deinit+0x2c>)
 8002b6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b6e:	6353      	str	r3, [r2, #52]	@ 0x34
  hrng.Instance = RNG;
 8002b70:	4b07      	ldr	r3, [pc, #28]	@ (8002b90 <MX_RNG_Deinit+0x30>)
 8002b72:	4a08      	ldr	r2, [pc, #32]	@ (8002b94 <MX_RNG_Deinit+0x34>)
 8002b74:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002b76:	4806      	ldr	r0, [pc, #24]	@ (8002b90 <MX_RNG_Deinit+0x30>)
 8002b78:	f004 fdc8 	bl	800770c <HAL_RNG_Init>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <MX_RNG_Deinit+0x28>
  {
	  APPLICATION_ASSERT(1);
 8002b82:	2001      	movs	r0, #1
 8002b84:	f000 f838 	bl	8002bf8 <APPLICATION_ASSERT>
  }
}
 8002b88:	bf00      	nop
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	200000a0 	.word	0x200000a0
 8002b94:	50060800 	.word	0x50060800

08002b98 <ButtonInit>:
 *      Author: 17202
 */
#include "Button_Driver.h"

void ButtonInit()
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef config = {0};
 8002b9e:	1d3b      	adds	r3, r7, #4
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	60da      	str	r2, [r3, #12]
 8002baa:	611a      	str	r2, [r3, #16]

	config.Pin = GPIO_PIN_0;
 8002bac:	2301      	movs	r3, #1
 8002bae:	607b      	str	r3, [r7, #4]
	config.Mode = GPIO_MODE_IT_RISING;
 8002bb0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002bb4:	60bb      	str	r3, [r7, #8]
	config.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	613b      	str	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	603b      	str	r3, [r7, #0]
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf0 <ButtonInit+0x58>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8002bf0 <ButtonInit+0x58>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bca:	4b09      	ldr	r3, [pc, #36]	@ (8002bf0 <ButtonInit+0x58>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &config);
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4806      	ldr	r0, [pc, #24]	@ (8002bf4 <ButtonInit+0x5c>)
 8002bdc:	f002 f93a 	bl	8004e54 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002be0:	2006      	movs	r0, #6
 8002be2:	f002 f8e8 	bl	8004db6 <HAL_NVIC_EnableIRQ>
	//GPIO_Init(BUTTON_PORT_VALUE, config, BUTTON_PIN_NUMBER);
}
 8002be6:	bf00      	nop
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40020000 	.word	0x40020000

08002bf8 <APPLICATION_ASSERT>:
 */
#include "ErrorHandling.h"


void APPLICATION_ASSERT(bool tf)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c02:	b672      	cpsid	i
}
 8002c04:	bf00      	nop
	__disable_irq();
	while(tf!=HAL_OK)
 8002c06:	bf00      	nop
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1fc      	bne.n	8002c08 <APPLICATION_ASSERT+0x10>
	{}		//loop forever
}
 8002c0e:	bf00      	nop
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08c      	sub	sp, #48	@ 0x30
 8002c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	4b5a      	ldr	r3, [pc, #360]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2a:	4a59      	ldr	r2, [pc, #356]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002c2c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c32:	4b57      	ldr	r3, [pc, #348]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c3a:	61bb      	str	r3, [r7, #24]
 8002c3c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	4b53      	ldr	r3, [pc, #332]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	4a52      	ldr	r2, [pc, #328]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c4e:	4b50      	ldr	r3, [pc, #320]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	4b4c      	ldr	r3, [pc, #304]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	4a4b      	ldr	r2, [pc, #300]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c6a:	4b49      	ldr	r3, [pc, #292]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	4b45      	ldr	r3, [pc, #276]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7e:	4a44      	ldr	r2, [pc, #272]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002c80:	f043 0304 	orr.w	r3, r3, #4
 8002c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c86:	4b42      	ldr	r3, [pc, #264]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	4b3e      	ldr	r3, [pc, #248]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002c9c:	f043 0308 	orr.w	r3, r3, #8
 8002ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	4b37      	ldr	r3, [pc, #220]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	4a36      	ldr	r2, [pc, #216]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002cb8:	f043 0320 	orr.w	r3, r3, #32
 8002cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cbe:	4b34      	ldr	r3, [pc, #208]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	607b      	str	r3, [r7, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	603b      	str	r3, [r7, #0]
 8002cce:	4b30      	ldr	r3, [pc, #192]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	4a2f      	ldr	r2, [pc, #188]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002cd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cda:	4b2d      	ldr	r3, [pc, #180]	@ (8002d90 <LCD_GPIO_Init+0x174>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002ce6:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002cea:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002cec:	2302      	movs	r3, #2
 8002cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002cf8:	230e      	movs	r3, #14
 8002cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002cfc:	f107 031c 	add.w	r3, r7, #28
 8002d00:	4619      	mov	r1, r3
 8002d02:	4824      	ldr	r0, [pc, #144]	@ (8002d94 <LCD_GPIO_Init+0x178>)
 8002d04:	f002 f8a6 	bl	8004e54 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002d08:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002d0c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002d0e:	f107 031c 	add.w	r3, r7, #28
 8002d12:	4619      	mov	r1, r3
 8002d14:	4820      	ldr	r0, [pc, #128]	@ (8002d98 <LCD_GPIO_Init+0x17c>)
 8002d16:	f002 f89d 	bl	8004e54 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002d1a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002d1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002d20:	f107 031c 	add.w	r3, r7, #28
 8002d24:	4619      	mov	r1, r3
 8002d26:	481d      	ldr	r0, [pc, #116]	@ (8002d9c <LCD_GPIO_Init+0x180>)
 8002d28:	f002 f894 	bl	8004e54 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002d2c:	2348      	movs	r3, #72	@ 0x48
 8002d2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002d30:	f107 031c 	add.w	r3, r7, #28
 8002d34:	4619      	mov	r1, r3
 8002d36:	481a      	ldr	r0, [pc, #104]	@ (8002da0 <LCD_GPIO_Init+0x184>)
 8002d38:	f002 f88c 	bl	8004e54 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002d3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002d42:	f107 031c 	add.w	r3, r7, #28
 8002d46:	4619      	mov	r1, r3
 8002d48:	4816      	ldr	r0, [pc, #88]	@ (8002da4 <LCD_GPIO_Init+0x188>)
 8002d4a:	f002 f883 	bl	8004e54 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002d4e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002d52:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002d54:	f107 031c 	add.w	r3, r7, #28
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4813      	ldr	r0, [pc, #76]	@ (8002da8 <LCD_GPIO_Init+0x18c>)
 8002d5c:	f002 f87a 	bl	8004e54 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002d60:	2303      	movs	r3, #3
 8002d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002d64:	2309      	movs	r3, #9
 8002d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002d68:	f107 031c 	add.w	r3, r7, #28
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	480a      	ldr	r0, [pc, #40]	@ (8002d98 <LCD_GPIO_Init+0x17c>)
 8002d70:	f002 f870 	bl	8004e54 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002d74:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002d78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002d7a:	f107 031c 	add.w	r3, r7, #28
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4809      	ldr	r0, [pc, #36]	@ (8002da8 <LCD_GPIO_Init+0x18c>)
 8002d82:	f002 f867 	bl	8004e54 <HAL_GPIO_Init>
}
 8002d86:	bf00      	nop
 8002d88:	3730      	adds	r7, #48	@ 0x30
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40020000 	.word	0x40020000
 8002d98:	40020400 	.word	0x40020400
 8002d9c:	40020800 	.word	0x40020800
 8002da0:	40020c00 	.word	0x40020c00
 8002da4:	40021400 	.word	0x40021400
 8002da8:	40021800 	.word	0x40021800

08002dac <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b090      	sub	sp, #64	@ 0x40
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8002dba:	23f0      	movs	r3, #240	@ 0xf0
 8002dbc:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8002dc2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002dc6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8002dc8:	2302      	movs	r3, #2
 8002dca:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8002dcc:	23ff      	movs	r3, #255	@ 0xff
 8002dce:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002dd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002dda:	2305      	movs	r3, #5
 8002ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8002de4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e24 <LTCD_Layer_Init+0x78>)
 8002de6:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8002de8:	23f0      	movs	r3, #240	@ 0xf0
 8002dea:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8002dec:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002df0:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8002e04:	79fa      	ldrb	r2, [r7, #7]
 8002e06:	f107 030c 	add.w	r3, r7, #12
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4806      	ldr	r0, [pc, #24]	@ (8002e28 <LTCD_Layer_Init+0x7c>)
 8002e0e:	f003 fc63 	bl	80066d8 <HAL_LTDC_ConfigLayer>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8002e18:	f000 f9a4 	bl	8003164 <LCD_Error_Handler>
	}
}
 8002e1c:	bf00      	nop
 8002e1e:	3740      	adds	r7, #64	@ 0x40
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	2000018c 	.word	0x2000018c
 8002e28:	200000b0 	.word	0x200000b0

08002e2c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8002e30:	4b2a      	ldr	r3, [pc, #168]	@ (8002edc <LTCD__Init+0xb0>)
 8002e32:	4a2b      	ldr	r2, [pc, #172]	@ (8002ee0 <LTCD__Init+0xb4>)
 8002e34:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8002e36:	4b29      	ldr	r3, [pc, #164]	@ (8002edc <LTCD__Init+0xb0>)
 8002e38:	2209      	movs	r2, #9
 8002e3a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8002e3c:	4b27      	ldr	r3, [pc, #156]	@ (8002edc <LTCD__Init+0xb0>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8002e42:	4b26      	ldr	r3, [pc, #152]	@ (8002edc <LTCD__Init+0xb0>)
 8002e44:	221d      	movs	r2, #29
 8002e46:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8002e48:	4b24      	ldr	r3, [pc, #144]	@ (8002edc <LTCD__Init+0xb0>)
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8002e4e:	4b23      	ldr	r3, [pc, #140]	@ (8002edc <LTCD__Init+0xb0>)
 8002e50:	f240 120d 	movw	r2, #269	@ 0x10d
 8002e54:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8002e56:	4b21      	ldr	r3, [pc, #132]	@ (8002edc <LTCD__Init+0xb0>)
 8002e58:	f240 1243 	movw	r2, #323	@ 0x143
 8002e5c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8002e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002edc <LTCD__Init+0xb0>)
 8002e60:	f240 1217 	movw	r2, #279	@ 0x117
 8002e64:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8002e66:	4b1d      	ldr	r3, [pc, #116]	@ (8002edc <LTCD__Init+0xb0>)
 8002e68:	f240 1247 	movw	r2, #327	@ 0x147
 8002e6c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002edc <LTCD__Init+0xb0>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8002e76:	4b19      	ldr	r3, [pc, #100]	@ (8002edc <LTCD__Init+0xb0>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8002e7e:	4b17      	ldr	r3, [pc, #92]	@ (8002edc <LTCD__Init+0xb0>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002e86:	4b17      	ldr	r3, [pc, #92]	@ (8002ee4 <LTCD__Init+0xb8>)
 8002e88:	2208      	movs	r2, #8
 8002e8a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002e8c:	4b15      	ldr	r3, [pc, #84]	@ (8002ee4 <LTCD__Init+0xb8>)
 8002e8e:	22c0      	movs	r2, #192	@ 0xc0
 8002e90:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002e92:	4b14      	ldr	r3, [pc, #80]	@ (8002ee4 <LTCD__Init+0xb8>)
 8002e94:	2204      	movs	r2, #4
 8002e96:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002e98:	4b12      	ldr	r3, [pc, #72]	@ (8002ee4 <LTCD__Init+0xb8>)
 8002e9a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e9e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002ea0:	4810      	ldr	r0, [pc, #64]	@ (8002ee4 <LTCD__Init+0xb8>)
 8002ea2:	f004 fa73 	bl	800738c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8002edc <LTCD__Init+0xb0>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002eac:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <LTCD__Init+0xb0>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002edc <LTCD__Init+0xb0>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002eb8:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <LTCD__Init+0xb0>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8002ebe:	f7ff fead 	bl	8002c1c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002ec2:	4806      	ldr	r0, [pc, #24]	@ (8002edc <LTCD__Init+0xb0>)
 8002ec4:	f003 fb38 	bl	8006538 <HAL_LTDC_Init>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8002ece:	f000 f949 	bl	8003164 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8002ed2:	f000 fb27 	bl	8003524 <ili9341_Init>
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200000b0 	.word	0x200000b0
 8002ee0:	40016800 	.word	0x40016800
 8002ee4:	20000158 	.word	0x20000158

08002ee8 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	80fb      	strh	r3, [r7, #6]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	80bb      	strh	r3, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8002efa:	88ba      	ldrh	r2, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	461a      	mov	r2, r3
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	4413      	add	r3, r2
 8002f0a:	4905      	ldr	r1, [pc, #20]	@ (8002f20 <LCD_Draw_Pixel+0x38>)
 8002f0c:	887a      	ldrh	r2, [r7, #2]
 8002f0e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	2000018c 	.word	0x2000018c

08002f24 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8002f24:	b590      	push	{r4, r7, lr}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	4608      	mov	r0, r1
 8002f2e:	4611      	mov	r1, r2
 8002f30:	461a      	mov	r2, r3
 8002f32:	4623      	mov	r3, r4
 8002f34:	80fb      	strh	r3, [r7, #6]
 8002f36:	4603      	mov	r3, r0
 8002f38:	80bb      	strh	r3, [r7, #4]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	807b      	strh	r3, [r7, #2]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	81fb      	strh	r3, [r7, #14]
 8002f46:	e00b      	b.n	8002f60 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8002f48:	89fa      	ldrh	r2, [r7, #14]
 8002f4a:	88bb      	ldrh	r3, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	b299      	uxth	r1, r3
 8002f50:	883a      	ldrh	r2, [r7, #0]
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ffc7 	bl	8002ee8 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8002f5a:	89fb      	ldrh	r3, [r7, #14]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	81fb      	strh	r3, [r7, #14]
 8002f60:	89fa      	ldrh	r2, [r7, #14]
 8002f62:	887b      	ldrh	r3, [r7, #2]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d3ef      	bcc.n	8002f48 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8002f68:	bf00      	nop
 8002f6a:	bf00      	nop
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd90      	pop	{r4, r7, pc}

08002f72 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8002f72:	b590      	push	{r4, r7, lr}
 8002f74:	b085      	sub	sp, #20
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	4604      	mov	r4, r0
 8002f7a:	4608      	mov	r0, r1
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	461a      	mov	r2, r3
 8002f80:	4623      	mov	r3, r4
 8002f82:	80fb      	strh	r3, [r7, #6]
 8002f84:	4603      	mov	r3, r0
 8002f86:	80bb      	strh	r3, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8002f90:	2300      	movs	r3, #0
 8002f92:	81fb      	strh	r3, [r7, #14]
 8002f94:	e00b      	b.n	8002fae <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8002f96:	89fa      	ldrh	r2, [r7, #14]
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	883a      	ldrh	r2, [r7, #0]
 8002fa0:	88b9      	ldrh	r1, [r7, #4]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff ffa0 	bl	8002ee8 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8002fa8:	89fb      	ldrh	r3, [r7, #14]
 8002faa:	3301      	adds	r3, #1
 8002fac:	81fb      	strh	r3, [r7, #14]
 8002fae:	89fa      	ldrh	r2, [r7, #14]
 8002fb0:	887b      	ldrh	r3, [r7, #2]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d3ef      	bcc.n	8002f96 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	bf00      	nop
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd90      	pop	{r4, r7, pc}

08002fc0 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	460a      	mov	r2, r1
 8002fca:	71fb      	strb	r3, [r7, #7]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10e      	bne.n	8002ff4 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	e007      	b.n	8002fec <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8002fdc:	4908      	ldr	r1, [pc, #32]	@ (8003000 <LCD_Clear+0x40>)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	88ba      	ldrh	r2, [r7, #4]
 8002fe2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8002ff2:	d3f3      	bcc.n	8002fdc <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	2000018c 	.word	0x2000018c

08003004 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800300e:	4a04      	ldr	r2, [pc, #16]	@ (8003020 <LCD_SetTextColor+0x1c>)
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	8013      	strh	r3, [r2, #0]
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	20000000 	.word	0x20000000

08003024 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 800302c:	4a04      	ldr	r2, [pc, #16]	@ (8003040 <LCD_SetFont+0x1c>)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6013      	str	r3, [r2, #0]
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000188 	.word	0x20000188

08003044 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	603a      	str	r2, [r7, #0]
 800304e:	80fb      	strh	r3, [r7, #6]
 8003050:	460b      	mov	r3, r1
 8003052:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	2300      	movs	r3, #0
 800305a:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	e04c      	b.n	80030fc <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	e03f      	b.n	80030e8 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	4413      	add	r3, r2
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	4619      	mov	r1, r3
 8003074:	4b27      	ldr	r3, [pc, #156]	@ (8003114 <LCD_Draw_Char+0xd0>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	889b      	ldrh	r3, [r3, #4]
 800307a:	4a27      	ldr	r2, [pc, #156]	@ (8003118 <LCD_Draw_Char+0xd4>)
 800307c:	fba2 2303 	umull	r2, r3, r2, r3
 8003080:	08db      	lsrs	r3, r3, #3
 8003082:	b29b      	uxth	r3, r3
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	2280      	movs	r2, #128	@ 0x80
 8003088:	409a      	lsls	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	fa42 f303 	asr.w	r3, r2, r3
 8003090:	400b      	ands	r3, r1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d104      	bne.n	80030a0 <LCD_Draw_Char+0x5c>
 8003096:	4b1f      	ldr	r3, [pc, #124]	@ (8003114 <LCD_Draw_Char+0xd0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	889b      	ldrh	r3, [r3, #4]
 800309c:	2b0c      	cmp	r3, #12
 800309e:	d920      	bls.n	80030e2 <LCD_Draw_Char+0x9e>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	4413      	add	r3, r2
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	fa42 f303 	asr.w	r3, r2, r3
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d104      	bne.n	80030c4 <LCD_Draw_Char+0x80>
 80030ba:	4b16      	ldr	r3, [pc, #88]	@ (8003114 <LCD_Draw_Char+0xd0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	889b      	ldrh	r3, [r3, #4]
 80030c0:	2b0c      	cmp	r3, #12
 80030c2:	d80e      	bhi.n	80030e2 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	4413      	add	r3, r2
 80030cc:	b298      	uxth	r0, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	88bb      	ldrh	r3, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	4a10      	ldr	r2, [pc, #64]	@ (800311c <LCD_Draw_Char+0xd8>)
 80030da:	8812      	ldrh	r2, [r2, #0]
 80030dc:	4619      	mov	r1, r3
 80030de:	f7ff ff03 	bl	8002ee8 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	3301      	adds	r3, #1
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003114 <LCD_Draw_Char+0xd0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	889b      	ldrh	r3, [r3, #4]
 80030ee:	461a      	mov	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d3b8      	bcc.n	8003068 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	3301      	adds	r3, #1
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <LCD_Draw_Char+0xd0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	88db      	ldrh	r3, [r3, #6]
 8003102:	461a      	mov	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4293      	cmp	r3, r2
 8003108:	d3ab      	bcc.n	8003062 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 800310a:	bf00      	nop
 800310c:	bf00      	nop
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20000188 	.word	0x20000188
 8003118:	aaaaaaab 	.word	0xaaaaaaab
 800311c:	20000000 	.word	0x20000000

08003120 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	80fb      	strh	r3, [r7, #6]
 800312a:	460b      	mov	r3, r1
 800312c:	80bb      	strh	r3, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	3b20      	subs	r3, #32
 8003136:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8003138:	4b09      	ldr	r3, [pc, #36]	@ (8003160 <LCD_DisplayChar+0x40>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	4907      	ldr	r1, [pc, #28]	@ (8003160 <LCD_DisplayChar+0x40>)
 8003142:	6809      	ldr	r1, [r1, #0]
 8003144:	88c9      	ldrh	r1, [r1, #6]
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	441a      	add	r2, r3
 800314e:	88b9      	ldrh	r1, [r7, #4]
 8003150:	88fb      	ldrh	r3, [r7, #6]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff ff76 	bl	8003044 <LCD_Draw_Char>
}
 8003158:	bf00      	nop
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20000188 	.word	0x20000188

08003164 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003168:	b672      	cpsid	i
}
 800316a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800316c:	bf00      	nop
 800316e:	e7fd      	b.n	800316c <LCD_Error_Handler+0x8>

08003170 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
//  if(STMPE811_Init() != STMPE811_State_Ok)
//  {
//	 for(;;); // Hang code due to error in initialzation
//  }
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f001 fa8e 	bl	80046a8 <STMPE811_DetermineTouchPosition>
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f001 fa5e 	bl	8004662 <STMPE811_Read>
 80031a6:	4603      	mov	r3, r0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	460a      	mov	r2, r1
 80031ba:	71fb      	strb	r3, [r7, #7]
 80031bc:	4613      	mov	r3, r2
 80031be:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 80031c0:	79ba      	ldrb	r2, [r7, #6]
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	4611      	mov	r1, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f001 fa5c 	bl	8004684 <STMPE811_Write>
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <game_init>:
static block_t block;
static map_t map;
volatile uint8_t game_started;

void game_init()
{
 80031d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d6:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 80031da:	af0a      	add	r7, sp, #40	@ 0x28
	game_started = STARTED;
 80031dc:	4b22      	ldr	r3, [pc, #136]	@ (8003268 <game_init+0x94>)
 80031de:	2201      	movs	r2, #1
 80031e0:	701a      	strb	r2, [r3, #0]
	//{
		//map_draw();
	//}

	//HAL_Delay(2000);
	LCD_Clear(0,LCD_COLOR_BLACK);
 80031e2:	2100      	movs	r1, #0
 80031e4:	2000      	movs	r0, #0
 80031e6:	f7ff feeb 	bl	8002fc0 <LCD_Clear>
	map_draw();
 80031ea:	f7fd fad5 	bl	8000798 <map_draw>


	block = block_create();
 80031ee:	4d1f      	ldr	r5, [pc, #124]	@ (800326c <game_init+0x98>)
 80031f0:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fd fcf5 	bl	8000be4 <block_create>
 80031fa:	f507 740e 	add.w	r4, r7, #568	@ 0x238
 80031fe:	462e      	mov	r6, r5
 8003200:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8003204:	4635      	mov	r5, r6
 8003206:	4623      	mov	r3, r4
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003212:	3410      	adds	r4, #16
 8003214:	3610      	adds	r6, #16
 8003216:	4564      	cmp	r4, ip
 8003218:	d1f4      	bne.n	8003204 <game_init+0x30>
 800321a:	4633      	mov	r3, r6
 800321c:	4622      	mov	r2, r4
 800321e:	6810      	ldr	r0, [r2, #0]
 8003220:	6018      	str	r0, [r3, #0]
	draw_tetromino(block);
 8003222:	4e12      	ldr	r6, [pc, #72]	@ (800326c <game_init+0x98>)
 8003224:	466d      	mov	r5, sp
 8003226:	f106 0410 	add.w	r4, r6, #16
 800322a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800322c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800322e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	602b      	str	r3, [r5, #0]
 8003236:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800323a:	f7ff fa89 	bl	8002750 <draw_tetromino>
	map = map_init();
 800323e:	4c0c      	ldr	r4, [pc, #48]	@ (8003270 <game_init+0x9c>)
 8003240:	463b      	mov	r3, r7
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe f83c 	bl	80012c0 <map_init>
 8003248:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800324c:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8003250:	4620      	mov	r0, r4
 8003252:	4619      	mov	r1, r3
 8003254:	f240 2336 	movw	r3, #566	@ 0x236
 8003258:	461a      	mov	r2, r3
 800325a:	f004 ffcb 	bl	80081f4 <memcpy>
}
 800325e:	bf00      	nop
 8003260:	f507 771d 	add.w	r7, r7, #628	@ 0x274
 8003264:	46bd      	mov	sp, r7
 8003266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003268:	20025bf6 	.word	0x20025bf6
 800326c:	2002598c 	.word	0x2002598c
 8003270:	200259c0 	.word	0x200259c0

08003274 <game_start_screen>:

void game_start_screen()
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
	game_started = NOT_STARTED;
 8003278:	4b04      	ldr	r3, [pc, #16]	@ (800328c <game_start_screen+0x18>)
 800327a:	2200      	movs	r2, #0
 800327c:	701a      	strb	r2, [r3, #0]
	draw_shapes();
 800327e:	f7ff f94a 	bl	8002516 <draw_shapes>
	start_screen();
 8003282:	f7fd fb09 	bl	8000898 <start_screen>
}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20025bf6 	.word	0x20025bf6

08003290 <is_start_screen>:

uint8_t is_start_screen()
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
	return game_started;
 8003294:	4b03      	ldr	r3, [pc, #12]	@ (80032a4 <is_start_screen+0x14>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	b2db      	uxtb	r3, r3
}
 800329a:	4618      	mov	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	20025bf6 	.word	0x20025bf6

080032a8 <game_over>:

void game_over()
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
	end_screen();
 80032ae:	f7fd fbbd 	bl	8000a2c <end_screen>
	uint32_t time = HAL_GetTick();
 80032b2:	f001 fc17 	bl	8004ae4 <HAL_GetTick>
 80032b6:	6078      	str	r0, [r7, #4]
	disp_time(time);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7fd fbf1 	bl	8000aa0 <disp_time>
	while(1){}
 80032be:	bf00      	nop
 80032c0:	e7fd      	b.n	80032be <game_over+0x16>
	...

080032c4 <game_drop>:
}

void game_drop()
{
 80032c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032c6:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 80032ca:	af0a      	add	r7, sp, #40	@ 0x28
	if(!rest(&block, &map))
 80032cc:	4943      	ldr	r1, [pc, #268]	@ (80033dc <game_drop+0x118>)
 80032ce:	4844      	ldr	r0, [pc, #272]	@ (80033e0 <game_drop+0x11c>)
 80032d0:	f7fe f869 	bl	80013a6 <rest>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d137      	bne.n	800334a <game_drop+0x86>
	{
		//HAL_Delay(500);
		clear_tetromino(block);
 80032da:	4e41      	ldr	r6, [pc, #260]	@ (80033e0 <game_drop+0x11c>)
 80032dc:	466d      	mov	r5, sp
 80032de:	f106 0410 	add.w	r4, r6, #16
 80032e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	602b      	str	r3, [r5, #0]
 80032ee:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80032f2:	f7ff fa6d 	bl	80027d0 <clear_tetromino>
		block = block_drop(&block);
 80032f6:	4d3a      	ldr	r5, [pc, #232]	@ (80033e0 <game_drop+0x11c>)
 80032f8:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80032fc:	4938      	ldr	r1, [pc, #224]	@ (80033e0 <game_drop+0x11c>)
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd fc22 	bl	8000b48 <block_drop>
 8003304:	f507 740e 	add.w	r4, r7, #568	@ 0x238
 8003308:	462e      	mov	r6, r5
 800330a:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800330e:	4635      	mov	r5, r6
 8003310:	4623      	mov	r3, r4
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	6859      	ldr	r1, [r3, #4]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800331c:	3410      	adds	r4, #16
 800331e:	3610      	adds	r6, #16
 8003320:	4564      	cmp	r4, ip
 8003322:	d1f4      	bne.n	800330e <game_drop+0x4a>
 8003324:	4633      	mov	r3, r6
 8003326:	4622      	mov	r2, r4
 8003328:	6810      	ldr	r0, [r2, #0]
 800332a:	6018      	str	r0, [r3, #0]
		draw_tetromino(block);
 800332c:	4e2c      	ldr	r6, [pc, #176]	@ (80033e0 <game_drop+0x11c>)
 800332e:	466d      	mov	r5, sp
 8003330:	f106 0410 	add.w	r4, r6, #16
 8003334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800333a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	602b      	str	r3, [r5, #0]
 8003340:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003344:	f7ff fa04 	bl	8002750 <draw_tetromino>
		if(can_spawn(&block, &map))
		{
			draw_tetromino(block);
		}
	}
}
 8003348:	e042      	b.n	80033d0 <game_drop+0x10c>
		map = map_update(&block, &map);
 800334a:	4c24      	ldr	r4, [pc, #144]	@ (80033dc <game_drop+0x118>)
 800334c:	463b      	mov	r3, r7
 800334e:	4a23      	ldr	r2, [pc, #140]	@ (80033dc <game_drop+0x118>)
 8003350:	4923      	ldr	r1, [pc, #140]	@ (80033e0 <game_drop+0x11c>)
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe fa95 	bl	8001882 <map_update>
 8003358:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800335c:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8003360:	4620      	mov	r0, r4
 8003362:	4619      	mov	r1, r3
 8003364:	f240 2336 	movw	r3, #566	@ 0x236
 8003368:	461a      	mov	r2, r3
 800336a:	f004 ff43 	bl	80081f4 <memcpy>
		block = block_create();
 800336e:	4d1c      	ldr	r5, [pc, #112]	@ (80033e0 <game_drop+0x11c>)
 8003370:	463b      	mov	r3, r7
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd fc36 	bl	8000be4 <block_create>
 8003378:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800337c:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8003380:	461c      	mov	r4, r3
 8003382:	462e      	mov	r6, r5
 8003384:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8003388:	4635      	mov	r5, r6
 800338a:	4623      	mov	r3, r4
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	6859      	ldr	r1, [r3, #4]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003396:	3410      	adds	r4, #16
 8003398:	3610      	adds	r6, #16
 800339a:	4564      	cmp	r4, ip
 800339c:	d1f4      	bne.n	8003388 <game_drop+0xc4>
 800339e:	4633      	mov	r3, r6
 80033a0:	4622      	mov	r2, r4
 80033a2:	6810      	ldr	r0, [r2, #0]
 80033a4:	6018      	str	r0, [r3, #0]
		if(can_spawn(&block, &map))
 80033a6:	490d      	ldr	r1, [pc, #52]	@ (80033dc <game_drop+0x118>)
 80033a8:	480d      	ldr	r0, [pc, #52]	@ (80033e0 <game_drop+0x11c>)
 80033aa:	f7ff fa50 	bl	800284e <can_spawn>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00d      	beq.n	80033d0 <game_drop+0x10c>
			draw_tetromino(block);
 80033b4:	4e0a      	ldr	r6, [pc, #40]	@ (80033e0 <game_drop+0x11c>)
 80033b6:	466d      	mov	r5, sp
 80033b8:	f106 0410 	add.w	r4, r6, #16
 80033bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	602b      	str	r3, [r5, #0]
 80033c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80033cc:	f7ff f9c0 	bl	8002750 <draw_tetromino>
}
 80033d0:	bf00      	nop
 80033d2:	f507 771d 	add.w	r7, r7, #628	@ 0x274
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033da:	bf00      	nop
 80033dc:	200259c0 	.word	0x200259c0
 80033e0:	2002598c 	.word	0x2002598c

080033e4 <game_rotate>:

void game_rotate()
{
 80033e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033e6:	b099      	sub	sp, #100	@ 0x64
 80033e8:	af0a      	add	r7, sp, #40	@ 0x28
	//HAL_Delay(500);
	clear_tetromino(block);
 80033ea:	4e1c      	ldr	r6, [pc, #112]	@ (800345c <game_rotate+0x78>)
 80033ec:	466d      	mov	r5, sp
 80033ee:	f106 0410 	add.w	r4, r6, #16
 80033f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	602b      	str	r3, [r5, #0]
 80033fe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003402:	f7ff f9e5 	bl	80027d0 <clear_tetromino>
	block = block_rotate(&block);
 8003406:	4d15      	ldr	r5, [pc, #84]	@ (800345c <game_rotate+0x78>)
 8003408:	463b      	mov	r3, r7
 800340a:	4914      	ldr	r1, [pc, #80]	@ (800345c <game_rotate+0x78>)
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe fb83 	bl	8001b18 <block_rotate>
 8003412:	463c      	mov	r4, r7
 8003414:	462e      	mov	r6, r5
 8003416:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800341a:	4635      	mov	r5, r6
 800341c:	4623      	mov	r3, r4
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	6859      	ldr	r1, [r3, #4]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003428:	3410      	adds	r4, #16
 800342a:	3610      	adds	r6, #16
 800342c:	4564      	cmp	r4, ip
 800342e:	d1f4      	bne.n	800341a <game_rotate+0x36>
 8003430:	4633      	mov	r3, r6
 8003432:	4622      	mov	r2, r4
 8003434:	6810      	ldr	r0, [r2, #0]
 8003436:	6018      	str	r0, [r3, #0]
	draw_tetromino(block);
 8003438:	4e08      	ldr	r6, [pc, #32]	@ (800345c <game_rotate+0x78>)
 800343a:	466d      	mov	r5, sp
 800343c:	f106 0410 	add.w	r4, r6, #16
 8003440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	602b      	str	r3, [r5, #0]
 800344c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003450:	f7ff f97e 	bl	8002750 <draw_tetromino>
}
 8003454:	bf00      	nop
 8003456:	373c      	adds	r7, #60	@ 0x3c
 8003458:	46bd      	mov	sp, r7
 800345a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800345c:	2002598c 	.word	0x2002598c

08003460 <game_move>:

void game_move(uint8_t dir)
{
 8003460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003462:	b09b      	sub	sp, #108	@ 0x6c
 8003464:	af0a      	add	r7, sp, #40	@ 0x28
 8003466:	4603      	mov	r3, r0
 8003468:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if(can_move(&block, &map, dir))
 800346c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003470:	461a      	mov	r2, r3
 8003472:	4921      	ldr	r1, [pc, #132]	@ (80034f8 <game_move+0x98>)
 8003474:	4821      	ldr	r0, [pc, #132]	@ (80034fc <game_move+0x9c>)
 8003476:	f7fe fceb 	bl	8001e50 <can_move>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d036      	beq.n	80034ee <game_move+0x8e>
	{
		clear_tetromino(block);
 8003480:	4e1e      	ldr	r6, [pc, #120]	@ (80034fc <game_move+0x9c>)
 8003482:	466d      	mov	r5, sp
 8003484:	f106 0410 	add.w	r4, r6, #16
 8003488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800348a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800348c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800348e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	602b      	str	r3, [r5, #0]
 8003494:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003498:	f7ff f99a 	bl	80027d0 <clear_tetromino>
		block = block_move(&block, &map, dir);
 800349c:	4d17      	ldr	r5, [pc, #92]	@ (80034fc <game_move+0x9c>)
 800349e:	4638      	mov	r0, r7
 80034a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80034a4:	4a14      	ldr	r2, [pc, #80]	@ (80034f8 <game_move+0x98>)
 80034a6:	4915      	ldr	r1, [pc, #84]	@ (80034fc <game_move+0x9c>)
 80034a8:	f7fe ffa6 	bl	80023f8 <block_move>
 80034ac:	463c      	mov	r4, r7
 80034ae:	462e      	mov	r6, r5
 80034b0:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80034b4:	4635      	mov	r5, r6
 80034b6:	4623      	mov	r3, r4
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034c2:	3410      	adds	r4, #16
 80034c4:	3610      	adds	r6, #16
 80034c6:	4564      	cmp	r4, ip
 80034c8:	d1f4      	bne.n	80034b4 <game_move+0x54>
 80034ca:	4633      	mov	r3, r6
 80034cc:	4622      	mov	r2, r4
 80034ce:	6810      	ldr	r0, [r2, #0]
 80034d0:	6018      	str	r0, [r3, #0]
		draw_tetromino(block);
 80034d2:	4e0a      	ldr	r6, [pc, #40]	@ (80034fc <game_move+0x9c>)
 80034d4:	466d      	mov	r5, sp
 80034d6:	f106 0410 	add.w	r4, r6, #16
 80034da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	602b      	str	r3, [r5, #0]
 80034e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80034ea:	f7ff f931 	bl	8002750 <draw_tetromino>
	}
}
 80034ee:	bf00      	nop
 80034f0:	3744      	adds	r7, #68	@ 0x44
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034f6:	bf00      	nop
 80034f8:	200259c0 	.word	0x200259c0
 80034fc:	2002598c 	.word	0x2002598c

08003500 <game_finished>:

uint8_t game_finished()
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
	if(can_spawn(&block, &map))
 8003504:	4905      	ldr	r1, [pc, #20]	@ (800351c <game_finished+0x1c>)
 8003506:	4806      	ldr	r0, [pc, #24]	@ (8003520 <game_finished+0x20>)
 8003508:	f7ff f9a1 	bl	800284e <can_spawn>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <game_finished+0x16>
	{
		return 0;
 8003512:	2300      	movs	r3, #0
 8003514:	e000      	b.n	8003518 <game_finished+0x18>
	}
	return 1;
 8003516:	2301      	movs	r3, #1
}
 8003518:	4618      	mov	r0, r3
 800351a:	bd80      	pop	{r7, pc}
 800351c:	200259c0 	.word	0x200259c0
 8003520:	2002598c 	.word	0x2002598c

08003524 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003528:	f000 f9fe 	bl	8003928 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 800352c:	20ca      	movs	r0, #202	@ 0xca
 800352e:	f000 f943 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8003532:	20c3      	movs	r0, #195	@ 0xc3
 8003534:	f000 f94d 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8003538:	2008      	movs	r0, #8
 800353a:	f000 f94a 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800353e:	2050      	movs	r0, #80	@ 0x50
 8003540:	f000 f947 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8003544:	20cf      	movs	r0, #207	@ 0xcf
 8003546:	f000 f937 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800354a:	2000      	movs	r0, #0
 800354c:	f000 f941 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8003550:	20c1      	movs	r0, #193	@ 0xc1
 8003552:	f000 f93e 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8003556:	2030      	movs	r0, #48	@ 0x30
 8003558:	f000 f93b 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 800355c:	20ed      	movs	r0, #237	@ 0xed
 800355e:	f000 f92b 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8003562:	2064      	movs	r0, #100	@ 0x64
 8003564:	f000 f935 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8003568:	2003      	movs	r0, #3
 800356a:	f000 f932 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800356e:	2012      	movs	r0, #18
 8003570:	f000 f92f 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8003574:	2081      	movs	r0, #129	@ 0x81
 8003576:	f000 f92c 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800357a:	20e8      	movs	r0, #232	@ 0xe8
 800357c:	f000 f91c 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8003580:	2085      	movs	r0, #133	@ 0x85
 8003582:	f000 f926 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003586:	2000      	movs	r0, #0
 8003588:	f000 f923 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800358c:	2078      	movs	r0, #120	@ 0x78
 800358e:	f000 f920 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8003592:	20cb      	movs	r0, #203	@ 0xcb
 8003594:	f000 f910 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8003598:	2039      	movs	r0, #57	@ 0x39
 800359a:	f000 f91a 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800359e:	202c      	movs	r0, #44	@ 0x2c
 80035a0:	f000 f917 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80035a4:	2000      	movs	r0, #0
 80035a6:	f000 f914 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80035aa:	2034      	movs	r0, #52	@ 0x34
 80035ac:	f000 f911 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80035b0:	2002      	movs	r0, #2
 80035b2:	f000 f90e 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80035b6:	20f7      	movs	r0, #247	@ 0xf7
 80035b8:	f000 f8fe 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80035bc:	2020      	movs	r0, #32
 80035be:	f000 f908 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80035c2:	20ea      	movs	r0, #234	@ 0xea
 80035c4:	f000 f8f8 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80035c8:	2000      	movs	r0, #0
 80035ca:	f000 f902 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80035ce:	2000      	movs	r0, #0
 80035d0:	f000 f8ff 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80035d4:	20b1      	movs	r0, #177	@ 0xb1
 80035d6:	f000 f8ef 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80035da:	2000      	movs	r0, #0
 80035dc:	f000 f8f9 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80035e0:	201b      	movs	r0, #27
 80035e2:	f000 f8f6 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80035e6:	20b6      	movs	r0, #182	@ 0xb6
 80035e8:	f000 f8e6 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80035ec:	200a      	movs	r0, #10
 80035ee:	f000 f8f0 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80035f2:	20a2      	movs	r0, #162	@ 0xa2
 80035f4:	f000 f8ed 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80035f8:	20c0      	movs	r0, #192	@ 0xc0
 80035fa:	f000 f8dd 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80035fe:	2010      	movs	r0, #16
 8003600:	f000 f8e7 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8003604:	20c1      	movs	r0, #193	@ 0xc1
 8003606:	f000 f8d7 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800360a:	2010      	movs	r0, #16
 800360c:	f000 f8e1 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8003610:	20c5      	movs	r0, #197	@ 0xc5
 8003612:	f000 f8d1 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8003616:	2045      	movs	r0, #69	@ 0x45
 8003618:	f000 f8db 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 800361c:	2015      	movs	r0, #21
 800361e:	f000 f8d8 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8003622:	20c7      	movs	r0, #199	@ 0xc7
 8003624:	f000 f8c8 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8003628:	2090      	movs	r0, #144	@ 0x90
 800362a:	f000 f8d2 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800362e:	2036      	movs	r0, #54	@ 0x36
 8003630:	f000 f8c2 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8003634:	20c8      	movs	r0, #200	@ 0xc8
 8003636:	f000 f8cc 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800363a:	20f2      	movs	r0, #242	@ 0xf2
 800363c:	f000 f8bc 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003640:	2000      	movs	r0, #0
 8003642:	f000 f8c6 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8003646:	20b0      	movs	r0, #176	@ 0xb0
 8003648:	f000 f8b6 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 800364c:	20c2      	movs	r0, #194	@ 0xc2
 800364e:	f000 f8c0 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8003652:	20b6      	movs	r0, #182	@ 0xb6
 8003654:	f000 f8b0 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003658:	200a      	movs	r0, #10
 800365a:	f000 f8ba 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800365e:	20a7      	movs	r0, #167	@ 0xa7
 8003660:	f000 f8b7 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8003664:	2027      	movs	r0, #39	@ 0x27
 8003666:	f000 f8b4 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800366a:	2004      	movs	r0, #4
 800366c:	f000 f8b1 	bl	80037d2 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8003670:	202a      	movs	r0, #42	@ 0x2a
 8003672:	f000 f8a1 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003676:	2000      	movs	r0, #0
 8003678:	f000 f8ab 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800367c:	2000      	movs	r0, #0
 800367e:	f000 f8a8 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003682:	2000      	movs	r0, #0
 8003684:	f000 f8a5 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8003688:	20ef      	movs	r0, #239	@ 0xef
 800368a:	f000 f8a2 	bl	80037d2 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800368e:	202b      	movs	r0, #43	@ 0x2b
 8003690:	f000 f892 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003694:	2000      	movs	r0, #0
 8003696:	f000 f89c 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800369a:	2000      	movs	r0, #0
 800369c:	f000 f899 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80036a0:	2001      	movs	r0, #1
 80036a2:	f000 f896 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80036a6:	203f      	movs	r0, #63	@ 0x3f
 80036a8:	f000 f893 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80036ac:	20f6      	movs	r0, #246	@ 0xf6
 80036ae:	f000 f883 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80036b2:	2001      	movs	r0, #1
 80036b4:	f000 f88d 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80036b8:	2000      	movs	r0, #0
 80036ba:	f000 f88a 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80036be:	2006      	movs	r0, #6
 80036c0:	f000 f887 	bl	80037d2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80036c4:	202c      	movs	r0, #44	@ 0x2c
 80036c6:	f000 f877 	bl	80037b8 <ili9341_Write_Reg>
  LCD_Delay(200);
 80036ca:	20c8      	movs	r0, #200	@ 0xc8
 80036cc:	f000 f9e8 	bl	8003aa0 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80036d0:	2026      	movs	r0, #38	@ 0x26
 80036d2:	f000 f871 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80036d6:	2001      	movs	r0, #1
 80036d8:	f000 f87b 	bl	80037d2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80036dc:	20e0      	movs	r0, #224	@ 0xe0
 80036de:	f000 f86b 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80036e2:	200f      	movs	r0, #15
 80036e4:	f000 f875 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80036e8:	2029      	movs	r0, #41	@ 0x29
 80036ea:	f000 f872 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80036ee:	2024      	movs	r0, #36	@ 0x24
 80036f0:	f000 f86f 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80036f4:	200c      	movs	r0, #12
 80036f6:	f000 f86c 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80036fa:	200e      	movs	r0, #14
 80036fc:	f000 f869 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003700:	2009      	movs	r0, #9
 8003702:	f000 f866 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8003706:	204e      	movs	r0, #78	@ 0x4e
 8003708:	f000 f863 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800370c:	2078      	movs	r0, #120	@ 0x78
 800370e:	f000 f860 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8003712:	203c      	movs	r0, #60	@ 0x3c
 8003714:	f000 f85d 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003718:	2009      	movs	r0, #9
 800371a:	f000 f85a 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 800371e:	2013      	movs	r0, #19
 8003720:	f000 f857 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8003724:	2005      	movs	r0, #5
 8003726:	f000 f854 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800372a:	2017      	movs	r0, #23
 800372c:	f000 f851 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8003730:	2011      	movs	r0, #17
 8003732:	f000 f84e 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003736:	2000      	movs	r0, #0
 8003738:	f000 f84b 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 800373c:	20e1      	movs	r0, #225	@ 0xe1
 800373e:	f000 f83b 	bl	80037b8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003742:	2000      	movs	r0, #0
 8003744:	f000 f845 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8003748:	2016      	movs	r0, #22
 800374a:	f000 f842 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800374e:	201b      	movs	r0, #27
 8003750:	f000 f83f 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8003754:	2004      	movs	r0, #4
 8003756:	f000 f83c 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800375a:	2011      	movs	r0, #17
 800375c:	f000 f839 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8003760:	2007      	movs	r0, #7
 8003762:	f000 f836 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8003766:	2031      	movs	r0, #49	@ 0x31
 8003768:	f000 f833 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 800376c:	2033      	movs	r0, #51	@ 0x33
 800376e:	f000 f830 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8003772:	2042      	movs	r0, #66	@ 0x42
 8003774:	f000 f82d 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8003778:	2005      	movs	r0, #5
 800377a:	f000 f82a 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800377e:	200c      	movs	r0, #12
 8003780:	f000 f827 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8003784:	200a      	movs	r0, #10
 8003786:	f000 f824 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800378a:	2028      	movs	r0, #40	@ 0x28
 800378c:	f000 f821 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8003790:	202f      	movs	r0, #47	@ 0x2f
 8003792:	f000 f81e 	bl	80037d2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8003796:	200f      	movs	r0, #15
 8003798:	f000 f81b 	bl	80037d2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800379c:	2011      	movs	r0, #17
 800379e:	f000 f80b 	bl	80037b8 <ili9341_Write_Reg>
  LCD_Delay(200);
 80037a2:	20c8      	movs	r0, #200	@ 0xc8
 80037a4:	f000 f97c 	bl	8003aa0 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80037a8:	2029      	movs	r0, #41	@ 0x29
 80037aa:	f000 f805 	bl	80037b8 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80037ae:	202c      	movs	r0, #44	@ 0x2c
 80037b0:	f000 f802 	bl	80037b8 <ili9341_Write_Reg>
}
 80037b4:	bf00      	nop
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 f949 	bl	8003a5c <LCD_IO_WriteReg>
}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	4603      	mov	r3, r0
 80037da:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 f91a 	bl	8003a18 <LCD_IO_WriteData>
}
 80037e4:	bf00      	nop
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80037f0:	4819      	ldr	r0, [pc, #100]	@ (8003858 <SPI_Init+0x6c>)
 80037f2:	f004 fa00 	bl	8007bf6 <HAL_SPI_GetState>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d12b      	bne.n	8003854 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80037fc:	4b16      	ldr	r3, [pc, #88]	@ (8003858 <SPI_Init+0x6c>)
 80037fe:	4a17      	ldr	r2, [pc, #92]	@ (800385c <SPI_Init+0x70>)
 8003800:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003802:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <SPI_Init+0x6c>)
 8003804:	2218      	movs	r2, #24
 8003806:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003808:	4b13      	ldr	r3, [pc, #76]	@ (8003858 <SPI_Init+0x6c>)
 800380a:	2200      	movs	r2, #0
 800380c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800380e:	4b12      	ldr	r3, [pc, #72]	@ (8003858 <SPI_Init+0x6c>)
 8003810:	2200      	movs	r2, #0
 8003812:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003814:	4b10      	ldr	r3, [pc, #64]	@ (8003858 <SPI_Init+0x6c>)
 8003816:	2200      	movs	r2, #0
 8003818:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800381a:	4b0f      	ldr	r3, [pc, #60]	@ (8003858 <SPI_Init+0x6c>)
 800381c:	2200      	movs	r2, #0
 800381e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003820:	4b0d      	ldr	r3, [pc, #52]	@ (8003858 <SPI_Init+0x6c>)
 8003822:	2207      	movs	r2, #7
 8003824:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003826:	4b0c      	ldr	r3, [pc, #48]	@ (8003858 <SPI_Init+0x6c>)
 8003828:	2200      	movs	r2, #0
 800382a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800382c:	4b0a      	ldr	r3, [pc, #40]	@ (8003858 <SPI_Init+0x6c>)
 800382e:	2200      	movs	r2, #0
 8003830:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003832:	4b09      	ldr	r3, [pc, #36]	@ (8003858 <SPI_Init+0x6c>)
 8003834:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003838:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800383a:	4b07      	ldr	r3, [pc, #28]	@ (8003858 <SPI_Init+0x6c>)
 800383c:	2200      	movs	r2, #0
 800383e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003840:	4b05      	ldr	r3, [pc, #20]	@ (8003858 <SPI_Init+0x6c>)
 8003842:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003846:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8003848:	4803      	ldr	r0, [pc, #12]	@ (8003858 <SPI_Init+0x6c>)
 800384a:	f000 f833 	bl	80038b4 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800384e:	4802      	ldr	r0, [pc, #8]	@ (8003858 <SPI_Init+0x6c>)
 8003850:	f003 ffdc 	bl	800780c <HAL_SPI_Init>
  }
}
 8003854:	bf00      	nop
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20025bf8 	.word	0x20025bf8
 800385c:	40015000 	.word	0x40015000

08003860 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800386e:	4b09      	ldr	r3, [pc, #36]	@ (8003894 <SPI_Write+0x34>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	1db9      	adds	r1, r7, #6
 8003874:	2201      	movs	r2, #1
 8003876:	4808      	ldr	r0, [pc, #32]	@ (8003898 <SPI_Write+0x38>)
 8003878:	f004 f879 	bl	800796e <HAL_SPI_Transmit>
 800387c:	4603      	mov	r3, r0
 800387e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8003886:	f000 f809 	bl	800389c <SPI_Error>
  }
}
 800388a:	bf00      	nop
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000014 	.word	0x20000014
 8003898:	20025bf8 	.word	0x20025bf8

0800389c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80038a0:	4803      	ldr	r0, [pc, #12]	@ (80038b0 <SPI_Error+0x14>)
 80038a2:	f004 f83c 	bl	800791e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80038a6:	f7ff ffa1 	bl	80037ec <SPI_Init>
}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20025bf8 	.word	0x20025bf8

080038b4 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08a      	sub	sp, #40	@ 0x28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80038bc:	2300      	movs	r3, #0
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	4b17      	ldr	r3, [pc, #92]	@ (8003920 <SPI_MspInit+0x6c>)
 80038c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c4:	4a16      	ldr	r2, [pc, #88]	@ (8003920 <SPI_MspInit+0x6c>)
 80038c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80038cc:	4b14      	ldr	r3, [pc, #80]	@ (8003920 <SPI_MspInit+0x6c>)
 80038ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	4b10      	ldr	r3, [pc, #64]	@ (8003920 <SPI_MspInit+0x6c>)
 80038de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e0:	4a0f      	ldr	r2, [pc, #60]	@ (8003920 <SPI_MspInit+0x6c>)
 80038e2:	f043 0320 	orr.w	r3, r3, #32
 80038e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80038e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003920 <SPI_MspInit+0x6c>)
 80038ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80038f4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80038f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80038fa:	2302      	movs	r3, #2
 80038fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80038fe:	2302      	movs	r3, #2
 8003900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003902:	2301      	movs	r3, #1
 8003904:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8003906:	2305      	movs	r3, #5
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800390a:	f107 0314 	add.w	r3, r7, #20
 800390e:	4619      	mov	r1, r3
 8003910:	4804      	ldr	r0, [pc, #16]	@ (8003924 <SPI_MspInit+0x70>)
 8003912:	f001 fa9f 	bl	8004e54 <HAL_GPIO_Init>
}
 8003916:	bf00      	nop
 8003918:	3728      	adds	r7, #40	@ 0x28
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800
 8003924:	40021400 	.word	0x40021400

08003928 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800392e:	4b36      	ldr	r3, [pc, #216]	@ (8003a08 <LCD_IO_Init+0xe0>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d164      	bne.n	8003a00 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8003936:	4b34      	ldr	r3, [pc, #208]	@ (8003a08 <LCD_IO_Init+0xe0>)
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800393c:	2300      	movs	r3, #0
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	4b32      	ldr	r3, [pc, #200]	@ (8003a0c <LCD_IO_Init+0xe4>)
 8003942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003944:	4a31      	ldr	r2, [pc, #196]	@ (8003a0c <LCD_IO_Init+0xe4>)
 8003946:	f043 0308 	orr.w	r3, r3, #8
 800394a:	6313      	str	r3, [r2, #48]	@ 0x30
 800394c:	4b2f      	ldr	r3, [pc, #188]	@ (8003a0c <LCD_IO_Init+0xe4>)
 800394e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003958:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800395c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800395e:	2301      	movs	r3, #1
 8003960:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003966:	2302      	movs	r3, #2
 8003968:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800396a:	f107 030c 	add.w	r3, r7, #12
 800396e:	4619      	mov	r1, r3
 8003970:	4827      	ldr	r0, [pc, #156]	@ (8003a10 <LCD_IO_Init+0xe8>)
 8003972:	f001 fa6f 	bl	8004e54 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	607b      	str	r3, [r7, #4]
 800397a:	4b24      	ldr	r3, [pc, #144]	@ (8003a0c <LCD_IO_Init+0xe4>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397e:	4a23      	ldr	r2, [pc, #140]	@ (8003a0c <LCD_IO_Init+0xe4>)
 8003980:	f043 0308 	orr.w	r3, r3, #8
 8003984:	6313      	str	r3, [r2, #48]	@ 0x30
 8003986:	4b21      	ldr	r3, [pc, #132]	@ (8003a0c <LCD_IO_Init+0xe4>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	607b      	str	r3, [r7, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003992:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003996:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003998:	2301      	movs	r3, #1
 800399a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80039a0:	2302      	movs	r3, #2
 80039a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80039a4:	f107 030c 	add.w	r3, r7, #12
 80039a8:	4619      	mov	r1, r3
 80039aa:	4819      	ldr	r0, [pc, #100]	@ (8003a10 <LCD_IO_Init+0xe8>)
 80039ac:	f001 fa52 	bl	8004e54 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80039b0:	2300      	movs	r3, #0
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	4b15      	ldr	r3, [pc, #84]	@ (8003a0c <LCD_IO_Init+0xe4>)
 80039b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b8:	4a14      	ldr	r2, [pc, #80]	@ (8003a0c <LCD_IO_Init+0xe4>)
 80039ba:	f043 0304 	orr.w	r3, r3, #4
 80039be:	6313      	str	r3, [r2, #48]	@ 0x30
 80039c0:	4b12      	ldr	r3, [pc, #72]	@ (8003a0c <LCD_IO_Init+0xe4>)
 80039c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	603b      	str	r3, [r7, #0]
 80039ca:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80039cc:	2304      	movs	r3, #4
 80039ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80039d0:	2301      	movs	r3, #1
 80039d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80039d8:	2302      	movs	r3, #2
 80039da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80039dc:	f107 030c 	add.w	r3, r7, #12
 80039e0:	4619      	mov	r1, r3
 80039e2:	480c      	ldr	r0, [pc, #48]	@ (8003a14 <LCD_IO_Init+0xec>)
 80039e4:	f001 fa36 	bl	8004e54 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80039e8:	2200      	movs	r2, #0
 80039ea:	2104      	movs	r1, #4
 80039ec:	4809      	ldr	r0, [pc, #36]	@ (8003a14 <LCD_IO_Init+0xec>)
 80039ee:	f001 fce9 	bl	80053c4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80039f2:	2201      	movs	r2, #1
 80039f4:	2104      	movs	r1, #4
 80039f6:	4807      	ldr	r0, [pc, #28]	@ (8003a14 <LCD_IO_Init+0xec>)
 80039f8:	f001 fce4 	bl	80053c4 <HAL_GPIO_WritePin>

    SPI_Init();
 80039fc:	f7ff fef6 	bl	80037ec <SPI_Init>
  }
}
 8003a00:	bf00      	nop
 8003a02:	3720      	adds	r7, #32
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20025c50 	.word	0x20025c50
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40020c00 	.word	0x40020c00
 8003a14:	40020800 	.word	0x40020800

08003a18 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003a22:	2201      	movs	r2, #1
 8003a24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a28:	480a      	ldr	r0, [pc, #40]	@ (8003a54 <LCD_IO_WriteData+0x3c>)
 8003a2a:	f001 fccb 	bl	80053c4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2104      	movs	r1, #4
 8003a32:	4809      	ldr	r0, [pc, #36]	@ (8003a58 <LCD_IO_WriteData+0x40>)
 8003a34:	f001 fcc6 	bl	80053c4 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff ff10 	bl	8003860 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003a40:	2201      	movs	r2, #1
 8003a42:	2104      	movs	r1, #4
 8003a44:	4804      	ldr	r0, [pc, #16]	@ (8003a58 <LCD_IO_WriteData+0x40>)
 8003a46:	f001 fcbd 	bl	80053c4 <HAL_GPIO_WritePin>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40020c00 	.word	0x40020c00
 8003a58:	40020800 	.word	0x40020800

08003a5c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003a66:	2200      	movs	r2, #0
 8003a68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a6c:	480a      	ldr	r0, [pc, #40]	@ (8003a98 <LCD_IO_WriteReg+0x3c>)
 8003a6e:	f001 fca9 	bl	80053c4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003a72:	2200      	movs	r2, #0
 8003a74:	2104      	movs	r1, #4
 8003a76:	4809      	ldr	r0, [pc, #36]	@ (8003a9c <LCD_IO_WriteReg+0x40>)
 8003a78:	f001 fca4 	bl	80053c4 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff feed 	bl	8003860 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003a86:	2201      	movs	r2, #1
 8003a88:	2104      	movs	r1, #4
 8003a8a:	4804      	ldr	r0, [pc, #16]	@ (8003a9c <LCD_IO_WriteReg+0x40>)
 8003a8c:	f001 fc9a 	bl	80053c4 <HAL_GPIO_WritePin>
}
 8003a90:	bf00      	nop
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40020c00 	.word	0x40020c00
 8003a9c:	40020800 	.word	0x40020800

08003aa0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f001 f827 	bl	8004afc <HAL_Delay>
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003aba:	f000 ffad 	bl	8004a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClockOverride();
 8003abe:	f000 f80f 	bl	8003ae0 <SystemClockOverride>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ac2:	f000 f987 	bl	8003dd4 <MX_GPIO_Init>
  MX_I2C3_Init();
 8003ac6:	f000 f85d 	bl	8003b84 <MX_I2C3_Init>
  MX_LTDC_Init();
 8003aca:	f000 f89b 	bl	8003c04 <MX_LTDC_Init>
  MX_SPI5_Init();
 8003ace:	f000 f94b 	bl	8003d68 <MX_SPI5_Init>

  /* USER CODE BEGIN 2 */
  ApplicationInit();
 8003ad2:	f7fc fd03 	bl	80004dc <ApplicationInit>
  Application_game_inst();
 8003ad6:	f7fc fd1d 	bl	8000514 <Application_game_inst>
  //HAL_Delay(5000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003ada:	bf00      	nop
 8003adc:	e7fd      	b.n	8003ada <main+0x24>
	...

08003ae0 <SystemClockOverride>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClockOverride(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b094      	sub	sp, #80	@ 0x50
 8003ae4:	af00      	add	r7, sp, #0
 RCC_ClkInitTypeDef RCC_ClkInitStruct;
 RCC_OscInitTypeDef RCC_OscInitStruct;
 __HAL_RCC_PWR_CLK_ENABLE();
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	4b24      	ldr	r3, [pc, #144]	@ (8003b7c <SystemClockOverride+0x9c>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aee:	4a23      	ldr	r2, [pc, #140]	@ (8003b7c <SystemClockOverride+0x9c>)
 8003af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003af6:	4b21      	ldr	r3, [pc, #132]	@ (8003b7c <SystemClockOverride+0x9c>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.
 8003b02:	2300      	movs	r3, #0
 8003b04:	607b      	str	r3, [r7, #4]
 8003b06:	4b1e      	ldr	r3, [pc, #120]	@ (8003b80 <SystemClockOverride+0xa0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003b80 <SystemClockOverride+0xa0>)
 8003b0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	4b1b      	ldr	r3, [pc, #108]	@ (8003b80 <SystemClockOverride+0xa0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003b1a:	607b      	str	r3, [r7, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 /* Enable HSE Osc and activate PLL with HSE source */
 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]
 RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b26:	613b      	str	r3, [r7, #16]
 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b2c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 RCC_OscInitStruct.PLL.PLLM = 8;
 8003b32:	2308      	movs	r3, #8
 8003b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 RCC_OscInitStruct.PLL.PLLN = 336;
 8003b36:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003b3a:	633b      	str	r3, [r7, #48]	@ 0x30
 RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	637b      	str	r3, [r7, #52]	@ 0x34
 RCC_OscInitStruct.PLL.PLLQ = 7;
 8003b40:	2307      	movs	r3, #7
 8003b42:	63bb      	str	r3, [r7, #56]	@ 0x38
 HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003b44:	f107 030c 	add.w	r3, r7, #12
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f002 ff9b 	bl	8006a84 <HAL_RCC_OscConfig>
 /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
 RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003b4e:	230f      	movs	r3, #15
 8003b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b52:	2302      	movs	r3, #2
 8003b54:	643b      	str	r3, [r7, #64]	@ 0x40
 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b56:	2300      	movs	r3, #0
 8003b58:	647b      	str	r3, [r7, #68]	@ 0x44
 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b5a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8003b66:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003b6a:	2105      	movs	r1, #5
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f003 fa01 	bl	8006f74 <HAL_RCC_ClockConfig>
}
 8003b72:	bf00      	nop
 8003b74:	3750      	adds	r7, #80	@ 0x50
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	40007000 	.word	0x40007000

08003b84 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003b88:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf8 <MX_I2C3_Init+0x74>)
 8003b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003bfc <MX_I2C3_Init+0x78>)
 8003b8c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf8 <MX_I2C3_Init+0x74>)
 8003b90:	4a1b      	ldr	r2, [pc, #108]	@ (8003c00 <MX_I2C3_Init+0x7c>)
 8003b92:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b94:	4b18      	ldr	r3, [pc, #96]	@ (8003bf8 <MX_I2C3_Init+0x74>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003b9a:	4b17      	ldr	r3, [pc, #92]	@ (8003bf8 <MX_I2C3_Init+0x74>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ba0:	4b15      	ldr	r3, [pc, #84]	@ (8003bf8 <MX_I2C3_Init+0x74>)
 8003ba2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ba6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ba8:	4b13      	ldr	r3, [pc, #76]	@ (8003bf8 <MX_I2C3_Init+0x74>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003bae:	4b12      	ldr	r3, [pc, #72]	@ (8003bf8 <MX_I2C3_Init+0x74>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bb4:	4b10      	ldr	r3, [pc, #64]	@ (8003bf8 <MX_I2C3_Init+0x74>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bba:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf8 <MX_I2C3_Init+0x74>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003bc0:	480d      	ldr	r0, [pc, #52]	@ (8003bf8 <MX_I2C3_Init+0x74>)
 8003bc2:	f001 fc19 	bl	80053f8 <HAL_I2C_Init>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003bcc:	f000 fab0 	bl	8004130 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4809      	ldr	r0, [pc, #36]	@ (8003bf8 <MX_I2C3_Init+0x74>)
 8003bd4:	f002 fc34 	bl	8006440 <HAL_I2CEx_ConfigAnalogFilter>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8003bde:	f000 faa7 	bl	8004130 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003be2:	2100      	movs	r1, #0
 8003be4:	4804      	ldr	r0, [pc, #16]	@ (8003bf8 <MX_I2C3_Init+0x74>)
 8003be6:	f002 fc67 	bl	80064b8 <HAL_I2CEx_ConfigDigitalFilter>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8003bf0:	f000 fa9e 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003bf4:	bf00      	nop
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20025c54 	.word	0x20025c54
 8003bfc:	40005c00 	.word	0x40005c00
 8003c00:	000186a0 	.word	0x000186a0

08003c04 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b09a      	sub	sp, #104	@ 0x68
 8003c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003c0a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003c0e:	2234      	movs	r2, #52	@ 0x34
 8003c10:	2100      	movs	r1, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f004 fac2 	bl	800819c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8003c18:	463b      	mov	r3, r7
 8003c1a:	2234      	movs	r2, #52	@ 0x34
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f004 fabc 	bl	800819c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003c24:	4b4e      	ldr	r3, [pc, #312]	@ (8003d60 <MX_LTDC_Init+0x15c>)
 8003c26:	4a4f      	ldr	r2, [pc, #316]	@ (8003d64 <MX_LTDC_Init+0x160>)
 8003c28:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003c2a:	4b4d      	ldr	r3, [pc, #308]	@ (8003d60 <MX_LTDC_Init+0x15c>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003c30:	4b4b      	ldr	r3, [pc, #300]	@ (8003d60 <MX_LTDC_Init+0x15c>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003c36:	4b4a      	ldr	r3, [pc, #296]	@ (8003d60 <MX_LTDC_Init+0x15c>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003c3c:	4b48      	ldr	r3, [pc, #288]	@ (8003d60 <MX_LTDC_Init+0x15c>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8003c42:	4b47      	ldr	r3, [pc, #284]	@ (8003d60 <MX_LTDC_Init+0x15c>)
 8003c44:	2207      	movs	r2, #7
 8003c46:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8003c48:	4b45      	ldr	r3, [pc, #276]	@ (8003d60 <MX_LTDC_Init+0x15c>)
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8003c4e:	4b44      	ldr	r3, [pc, #272]	@ (8003d60 <MX_LTDC_Init+0x15c>)
 8003c50:	220e      	movs	r2, #14
 8003c52:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8003c54:	4b42      	ldr	r3, [pc, #264]	@ (8003d60 <MX_LTDC_Init+0x15c>)
 8003c56:	2205      	movs	r2, #5
 8003c58:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8003c5a:	4b41      	ldr	r3, [pc, #260]	@ (8003d60 <MX_LTDC_Init+0x15c>)
 8003c5c:	f240 228e 	movw	r2, #654	@ 0x28e
 8003c60:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8003c62:	4b3f      	ldr	r3, [pc, #252]	@ (8003d60 <MX_LTDC_Init+0x15c>)
 8003c64:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8003c68:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8003c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d60 <MX_LTDC_Init+0x15c>)
 8003c6c:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8003c70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8003c72:	4b3b      	ldr	r3, [pc, #236]	@ (8003d60 <MX_LTDC_Init+0x15c>)
 8003c74:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8003c78:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003c7a:	4b39      	ldr	r3, [pc, #228]	@ (8003d60 <MX_LTDC_Init+0x15c>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003c82:	4b37      	ldr	r3, [pc, #220]	@ (8003d60 <MX_LTDC_Init+0x15c>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003c8a:	4b35      	ldr	r3, [pc, #212]	@ (8003d60 <MX_LTDC_Init+0x15c>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003c92:	4833      	ldr	r0, [pc, #204]	@ (8003d60 <MX_LTDC_Init+0x15c>)
 8003c94:	f002 fc50 	bl	8006538 <HAL_LTDC_Init>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8003c9e:	f000 fa47 	bl	8004130 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003cbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cc2:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003cc4:	2305      	movs	r3, #5
 8003cc6:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003ce6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003cea:	2200      	movs	r2, #0
 8003cec:	4619      	mov	r1, r3
 8003cee:	481c      	ldr	r0, [pc, #112]	@ (8003d60 <MX_LTDC_Init+0x15c>)
 8003cf0:	f002 fcf2 	bl	80066d8 <HAL_LTDC_ConfigLayer>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8003cfa:	f000 fa19 	bl	8004130 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003d1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d1e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003d20:	2305      	movs	r3, #5
 8003d22:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8003d36:	2300      	movs	r3, #0
 8003d38:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8003d42:	463b      	mov	r3, r7
 8003d44:	2201      	movs	r2, #1
 8003d46:	4619      	mov	r1, r3
 8003d48:	4805      	ldr	r0, [pc, #20]	@ (8003d60 <MX_LTDC_Init+0x15c>)
 8003d4a:	f002 fcc5 	bl	80066d8 <HAL_LTDC_ConfigLayer>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8003d54:	f000 f9ec 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003d58:	bf00      	nop
 8003d5a:	3768      	adds	r7, #104	@ 0x68
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	20025ca8 	.word	0x20025ca8
 8003d64:	40016800 	.word	0x40016800

08003d68 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8003d6c:	4b17      	ldr	r3, [pc, #92]	@ (8003dcc <MX_SPI5_Init+0x64>)
 8003d6e:	4a18      	ldr	r2, [pc, #96]	@ (8003dd0 <MX_SPI5_Init+0x68>)
 8003d70:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003d72:	4b16      	ldr	r3, [pc, #88]	@ (8003dcc <MX_SPI5_Init+0x64>)
 8003d74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d78:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003d7a:	4b14      	ldr	r3, [pc, #80]	@ (8003dcc <MX_SPI5_Init+0x64>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d80:	4b12      	ldr	r3, [pc, #72]	@ (8003dcc <MX_SPI5_Init+0x64>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d86:	4b11      	ldr	r3, [pc, #68]	@ (8003dcc <MX_SPI5_Init+0x64>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003dcc <MX_SPI5_Init+0x64>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003d92:	4b0e      	ldr	r3, [pc, #56]	@ (8003dcc <MX_SPI5_Init+0x64>)
 8003d94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d98:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003dcc <MX_SPI5_Init+0x64>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003da0:	4b0a      	ldr	r3, [pc, #40]	@ (8003dcc <MX_SPI5_Init+0x64>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003da6:	4b09      	ldr	r3, [pc, #36]	@ (8003dcc <MX_SPI5_Init+0x64>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dac:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <MX_SPI5_Init+0x64>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003db2:	4b06      	ldr	r3, [pc, #24]	@ (8003dcc <MX_SPI5_Init+0x64>)
 8003db4:	220a      	movs	r2, #10
 8003db6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003db8:	4804      	ldr	r0, [pc, #16]	@ (8003dcc <MX_SPI5_Init+0x64>)
 8003dba:	f003 fd27 	bl	800780c <HAL_SPI_Init>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003dc4:	f000 f9b4 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003dc8:	bf00      	nop
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	20025d50 	.word	0x20025d50
 8003dd0:	40015000 	.word	0x40015000

08003dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08e      	sub	sp, #56	@ 0x38
 8003dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	605a      	str	r2, [r3, #4]
 8003de4:	609a      	str	r2, [r3, #8]
 8003de6:	60da      	str	r2, [r3, #12]
 8003de8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	623b      	str	r3, [r7, #32]
 8003dee:	4bb2      	ldr	r3, [pc, #712]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df2:	4ab1      	ldr	r2, [pc, #708]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003df4:	f043 0304 	orr.w	r3, r3, #4
 8003df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dfa:	4baf      	ldr	r3, [pc, #700]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	623b      	str	r3, [r7, #32]
 8003e04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	61fb      	str	r3, [r7, #28]
 8003e0a:	4bab      	ldr	r3, [pc, #684]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0e:	4aaa      	ldr	r2, [pc, #680]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003e10:	f043 0320 	orr.w	r3, r3, #32
 8003e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e16:	4ba8      	ldr	r3, [pc, #672]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	61fb      	str	r3, [r7, #28]
 8003e20:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	4ba4      	ldr	r3, [pc, #656]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2a:	4aa3      	ldr	r2, [pc, #652]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003e2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e32:	4ba1      	ldr	r3, [pc, #644]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3a:	61bb      	str	r3, [r7, #24]
 8003e3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	4b9d      	ldr	r3, [pc, #628]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e46:	4a9c      	ldr	r2, [pc, #624]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e4e:	4b9a      	ldr	r3, [pc, #616]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	4b96      	ldr	r3, [pc, #600]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e62:	4a95      	ldr	r2, [pc, #596]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003e64:	f043 0302 	orr.w	r3, r3, #2
 8003e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e6a:	4b93      	ldr	r3, [pc, #588]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	613b      	str	r3, [r7, #16]
 8003e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	4b8f      	ldr	r3, [pc, #572]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7e:	4a8e      	ldr	r2, [pc, #568]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003e80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e86:	4b8c      	ldr	r3, [pc, #560]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	4b88      	ldr	r3, [pc, #544]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9a:	4a87      	ldr	r2, [pc, #540]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003e9c:	f043 0310 	orr.w	r3, r3, #16
 8003ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ea2:	4b85      	ldr	r3, [pc, #532]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea6:	f003 0310 	and.w	r3, r3, #16
 8003eaa:	60bb      	str	r3, [r7, #8]
 8003eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003eae:	2300      	movs	r3, #0
 8003eb0:	607b      	str	r3, [r7, #4]
 8003eb2:	4b81      	ldr	r3, [pc, #516]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb6:	4a80      	ldr	r2, [pc, #512]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003eb8:	f043 0308 	orr.w	r3, r3, #8
 8003ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ebe:	4b7e      	ldr	r3, [pc, #504]	@ (80040b8 <MX_GPIO_Init+0x2e4>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	607b      	str	r3, [r7, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2116      	movs	r1, #22
 8003ece:	487b      	ldr	r0, [pc, #492]	@ (80040bc <MX_GPIO_Init+0x2e8>)
 8003ed0:	f001 fa78 	bl	80053c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2180      	movs	r1, #128	@ 0x80
 8003ed8:	4879      	ldr	r0, [pc, #484]	@ (80040c0 <MX_GPIO_Init+0x2ec>)
 8003eda:	f001 fa73 	bl	80053c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8003ee4:	4877      	ldr	r0, [pc, #476]	@ (80040c4 <MX_GPIO_Init+0x2f0>)
 8003ee6:	f001 fa6d 	bl	80053c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8003eea:	2200      	movs	r2, #0
 8003eec:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8003ef0:	4875      	ldr	r0, [pc, #468]	@ (80040c8 <MX_GPIO_Init+0x2f4>)
 8003ef2:	f001 fa67 	bl	80053c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8003ef6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003efc:	2302      	movs	r3, #2
 8003efe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f04:	2303      	movs	r3, #3
 8003f06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f08:	230c      	movs	r3, #12
 8003f0a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f10:	4619      	mov	r1, r3
 8003f12:	486e      	ldr	r0, [pc, #440]	@ (80040cc <MX_GPIO_Init+0x2f8>)
 8003f14:	f000 ff9e 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f24:	2303      	movs	r3, #3
 8003f26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f28:	230c      	movs	r3, #12
 8003f2a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8003f2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f30:	4619      	mov	r1, r3
 8003f32:	4862      	ldr	r0, [pc, #392]	@ (80040bc <MX_GPIO_Init+0x2e8>)
 8003f34:	f000 ff8e 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8003f38:	2316      	movs	r3, #22
 8003f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f44:	2300      	movs	r3, #0
 8003f46:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	485b      	ldr	r0, [pc, #364]	@ (80040bc <MX_GPIO_Init+0x2e8>)
 8003f50:	f000 ff80 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8003f54:	f248 0307 	movw	r3, #32775	@ 0x8007
 8003f58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003f5a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4855      	ldr	r0, [pc, #340]	@ (80040c0 <MX_GPIO_Init+0x2ec>)
 8003f6c:	f000 ff72 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8003f70:	2380      	movs	r3, #128	@ 0x80
 8003f72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f74:	2301      	movs	r3, #1
 8003f76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8003f80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f84:	4619      	mov	r1, r3
 8003f86:	484e      	ldr	r0, [pc, #312]	@ (80040c0 <MX_GPIO_Init+0x2ec>)
 8003f88:	f000 ff64 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8003f8c:	2320      	movs	r3, #32
 8003f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003f90:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8003f9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4846      	ldr	r0, [pc, #280]	@ (80040bc <MX_GPIO_Init+0x2e8>)
 8003fa2:	f000 ff57 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003faa:	2300      	movs	r3, #0
 8003fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003fb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4845      	ldr	r0, [pc, #276]	@ (80040d0 <MX_GPIO_Init+0x2fc>)
 8003fba:	f000 ff4b 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8003fbe:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003fc2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003fd0:	230c      	movs	r3, #12
 8003fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fd8:	4619      	mov	r1, r3
 8003fda:	483b      	ldr	r0, [pc, #236]	@ (80040c8 <MX_GPIO_Init+0x2f4>)
 8003fdc:	f000 ff3a 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8003fe0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003fe4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ff2:	230c      	movs	r3, #12
 8003ff4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ff6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4835      	ldr	r0, [pc, #212]	@ (80040d4 <MX_GPIO_Init+0x300>)
 8003ffe:	f000 ff29 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8004002:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8004006:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004008:	2302      	movs	r3, #2
 800400a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400c:	2300      	movs	r3, #0
 800400e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004010:	2300      	movs	r3, #0
 8004012:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8004014:	230c      	movs	r3, #12
 8004016:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800401c:	4619      	mov	r1, r3
 800401e:	482c      	ldr	r0, [pc, #176]	@ (80040d0 <MX_GPIO_Init+0x2fc>)
 8004020:	f000 ff18 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8004024:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004028:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800402a:	2300      	movs	r3, #0
 800402c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402e:	2300      	movs	r3, #0
 8004030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8004032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004036:	4619      	mov	r1, r3
 8004038:	4825      	ldr	r0, [pc, #148]	@ (80040d0 <MX_GPIO_Init+0x2fc>)
 800403a:	f000 ff0b 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800403e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004044:	2302      	movs	r3, #2
 8004046:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004048:	2300      	movs	r3, #0
 800404a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800404c:	2303      	movs	r3, #3
 800404e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004050:	230c      	movs	r3, #12
 8004052:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004058:	4619      	mov	r1, r3
 800405a:	481a      	ldr	r0, [pc, #104]	@ (80040c4 <MX_GPIO_Init+0x2f0>)
 800405c:	f000 fefa 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8004060:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004064:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004066:	2300      	movs	r3, #0
 8004068:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406a:	2300      	movs	r3, #0
 800406c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800406e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004072:	4619      	mov	r1, r3
 8004074:	4813      	ldr	r0, [pc, #76]	@ (80040c4 <MX_GPIO_Init+0x2f0>)
 8004076:	f000 feed 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800407a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800407e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004080:	2301      	movs	r3, #1
 8004082:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004084:	2300      	movs	r3, #0
 8004086:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004088:	2300      	movs	r3, #0
 800408a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800408c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004090:	4619      	mov	r1, r3
 8004092:	480c      	ldr	r0, [pc, #48]	@ (80040c4 <MX_GPIO_Init+0x2f0>)
 8004094:	f000 fede 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004098:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800409c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409e:	2302      	movs	r3, #2
 80040a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a6:	2303      	movs	r3, #3
 80040a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040aa:	2307      	movs	r3, #7
 80040ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040b2:	4619      	mov	r1, r3
 80040b4:	e010      	b.n	80040d8 <MX_GPIO_Init+0x304>
 80040b6:	bf00      	nop
 80040b8:	40023800 	.word	0x40023800
 80040bc:	40020800 	.word	0x40020800
 80040c0:	40020000 	.word	0x40020000
 80040c4:	40020c00 	.word	0x40020c00
 80040c8:	40021800 	.word	0x40021800
 80040cc:	40021400 	.word	0x40021400
 80040d0:	40020400 	.word	0x40020400
 80040d4:	40021000 	.word	0x40021000
 80040d8:	4812      	ldr	r0, [pc, #72]	@ (8004124 <MX_GPIO_Init+0x350>)
 80040da:	f000 febb 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80040de:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80040e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040e4:	2301      	movs	r3, #1
 80040e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ec:	2300      	movs	r3, #0
 80040ee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040f4:	4619      	mov	r1, r3
 80040f6:	480c      	ldr	r0, [pc, #48]	@ (8004128 <MX_GPIO_Init+0x354>)
 80040f8:	f000 feac 	bl	8004e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80040fc:	2360      	movs	r3, #96	@ 0x60
 80040fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004100:	2302      	movs	r3, #2
 8004102:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004104:	2300      	movs	r3, #0
 8004106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004108:	2303      	movs	r3, #3
 800410a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800410c:	230c      	movs	r3, #12
 800410e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004110:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004114:	4619      	mov	r1, r3
 8004116:	4805      	ldr	r0, [pc, #20]	@ (800412c <MX_GPIO_Init+0x358>)
 8004118:	f000 fe9c 	bl	8004e54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800411c:	bf00      	nop
 800411e:	3738      	adds	r7, #56	@ 0x38
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40020000 	.word	0x40020000
 8004128:	40021800 	.word	0x40021800
 800412c:	40020400 	.word	0x40020400

08004130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004134:	b672      	cpsid	i
}
 8004136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004138:	bf00      	nop
 800413a:	e7fd      	b.n	8004138 <Error_Handler+0x8>

0800413c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	607b      	str	r3, [r7, #4]
 8004146:	4b10      	ldr	r3, [pc, #64]	@ (8004188 <HAL_MspInit+0x4c>)
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	4a0f      	ldr	r2, [pc, #60]	@ (8004188 <HAL_MspInit+0x4c>)
 800414c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004150:	6453      	str	r3, [r2, #68]	@ 0x44
 8004152:	4b0d      	ldr	r3, [pc, #52]	@ (8004188 <HAL_MspInit+0x4c>)
 8004154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800415a:	607b      	str	r3, [r7, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800415e:	2300      	movs	r3, #0
 8004160:	603b      	str	r3, [r7, #0]
 8004162:	4b09      	ldr	r3, [pc, #36]	@ (8004188 <HAL_MspInit+0x4c>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004166:	4a08      	ldr	r2, [pc, #32]	@ (8004188 <HAL_MspInit+0x4c>)
 8004168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800416c:	6413      	str	r3, [r2, #64]	@ 0x40
 800416e:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <HAL_MspInit+0x4c>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800417a:	2007      	movs	r0, #7
 800417c:	f000 fdf4 	bl	8004d68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40023800 	.word	0x40023800

0800418c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08a      	sub	sp, #40	@ 0x28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004194:	f107 0314 	add.w	r3, r7, #20
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	609a      	str	r2, [r3, #8]
 80041a0:	60da      	str	r2, [r3, #12]
 80041a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a29      	ldr	r2, [pc, #164]	@ (8004250 <HAL_I2C_MspInit+0xc4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d14b      	bne.n	8004246 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	4b28      	ldr	r3, [pc, #160]	@ (8004254 <HAL_I2C_MspInit+0xc8>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b6:	4a27      	ldr	r2, [pc, #156]	@ (8004254 <HAL_I2C_MspInit+0xc8>)
 80041b8:	f043 0304 	orr.w	r3, r3, #4
 80041bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80041be:	4b25      	ldr	r3, [pc, #148]	@ (8004254 <HAL_I2C_MspInit+0xc8>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c2:	f003 0304 	and.w	r3, r3, #4
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	4b21      	ldr	r3, [pc, #132]	@ (8004254 <HAL_I2C_MspInit+0xc8>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d2:	4a20      	ldr	r2, [pc, #128]	@ (8004254 <HAL_I2C_MspInit+0xc8>)
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80041da:	4b1e      	ldr	r3, [pc, #120]	@ (8004254 <HAL_I2C_MspInit+0xc8>)
 80041dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80041e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041ec:	2312      	movs	r3, #18
 80041ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f4:	2300      	movs	r3, #0
 80041f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80041f8:	2304      	movs	r3, #4
 80041fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80041fc:	f107 0314 	add.w	r3, r7, #20
 8004200:	4619      	mov	r1, r3
 8004202:	4815      	ldr	r0, [pc, #84]	@ (8004258 <HAL_I2C_MspInit+0xcc>)
 8004204:	f000 fe26 	bl	8004e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8004208:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800420c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800420e:	2312      	movs	r3, #18
 8004210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004216:	2300      	movs	r3, #0
 8004218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800421a:	2304      	movs	r3, #4
 800421c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800421e:	f107 0314 	add.w	r3, r7, #20
 8004222:	4619      	mov	r1, r3
 8004224:	480d      	ldr	r0, [pc, #52]	@ (800425c <HAL_I2C_MspInit+0xd0>)
 8004226:	f000 fe15 	bl	8004e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	4b09      	ldr	r3, [pc, #36]	@ (8004254 <HAL_I2C_MspInit+0xc8>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	4a08      	ldr	r2, [pc, #32]	@ (8004254 <HAL_I2C_MspInit+0xc8>)
 8004234:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004238:	6413      	str	r3, [r2, #64]	@ 0x40
 800423a:	4b06      	ldr	r3, [pc, #24]	@ (8004254 <HAL_I2C_MspInit+0xc8>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004242:	60bb      	str	r3, [r7, #8]
 8004244:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8004246:	bf00      	nop
 8004248:	3728      	adds	r7, #40	@ 0x28
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40005c00 	.word	0x40005c00
 8004254:	40023800 	.word	0x40023800
 8004258:	40020800 	.word	0x40020800
 800425c:	40020000 	.word	0x40020000

08004260 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b09a      	sub	sp, #104	@ 0x68
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004268:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	609a      	str	r2, [r3, #8]
 8004274:	60da      	str	r2, [r3, #12]
 8004276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004278:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800427c:	2230      	movs	r2, #48	@ 0x30
 800427e:	2100      	movs	r1, #0
 8004280:	4618      	mov	r0, r3
 8004282:	f003 ff8b 	bl	800819c <memset>
  if(hltdc->Instance==LTDC)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a81      	ldr	r2, [pc, #516]	@ (8004490 <HAL_LTDC_MspInit+0x230>)
 800428c:	4293      	cmp	r3, r2
 800428e:	f040 80fa 	bne.w	8004486 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004292:	2308      	movs	r3, #8
 8004294:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8004296:	2332      	movs	r3, #50	@ 0x32
 8004298:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800429a:	2302      	movs	r3, #2
 800429c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800429e:	2300      	movs	r3, #0
 80042a0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042a6:	4618      	mov	r0, r3
 80042a8:	f003 f870 	bl	800738c <HAL_RCCEx_PeriphCLKConfig>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80042b2:	f7ff ff3d 	bl	8004130 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80042b6:	2300      	movs	r3, #0
 80042b8:	623b      	str	r3, [r7, #32]
 80042ba:	4b76      	ldr	r3, [pc, #472]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 80042bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042be:	4a75      	ldr	r2, [pc, #468]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 80042c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80042c6:	4b73      	ldr	r3, [pc, #460]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 80042c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042ce:	623b      	str	r3, [r7, #32]
 80042d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	61fb      	str	r3, [r7, #28]
 80042d6:	4b6f      	ldr	r3, [pc, #444]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042da:	4a6e      	ldr	r2, [pc, #440]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 80042dc:	f043 0320 	orr.w	r3, r3, #32
 80042e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80042e2:	4b6c      	ldr	r3, [pc, #432]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	61fb      	str	r3, [r7, #28]
 80042ec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ee:	2300      	movs	r3, #0
 80042f0:	61bb      	str	r3, [r7, #24]
 80042f2:	4b68      	ldr	r3, [pc, #416]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f6:	4a67      	ldr	r2, [pc, #412]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80042fe:	4b65      	ldr	r3, [pc, #404]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 8004300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	61bb      	str	r3, [r7, #24]
 8004308:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	4b61      	ldr	r3, [pc, #388]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004312:	4a60      	ldr	r2, [pc, #384]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 8004314:	f043 0302 	orr.w	r3, r3, #2
 8004318:	6313      	str	r3, [r2, #48]	@ 0x30
 800431a:	4b5e      	ldr	r3, [pc, #376]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004326:	2300      	movs	r3, #0
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	4b5a      	ldr	r3, [pc, #360]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432e:	4a59      	ldr	r2, [pc, #356]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 8004330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004334:	6313      	str	r3, [r2, #48]	@ 0x30
 8004336:	4b57      	ldr	r3, [pc, #348]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 8004338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	4b53      	ldr	r3, [pc, #332]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434a:	4a52      	ldr	r2, [pc, #328]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 800434c:	f043 0304 	orr.w	r3, r3, #4
 8004350:	6313      	str	r3, [r2, #48]	@ 0x30
 8004352:	4b50      	ldr	r3, [pc, #320]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	4b4c      	ldr	r3, [pc, #304]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004366:	4a4b      	ldr	r2, [pc, #300]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 8004368:	f043 0308 	orr.w	r3, r3, #8
 800436c:	6313      	str	r3, [r2, #48]	@ 0x30
 800436e:	4b49      	ldr	r3, [pc, #292]	@ (8004494 <HAL_LTDC_MspInit+0x234>)
 8004370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	60bb      	str	r3, [r7, #8]
 8004378:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800437a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800437e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004380:	2302      	movs	r3, #2
 8004382:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004384:	2300      	movs	r3, #0
 8004386:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004388:	2300      	movs	r3, #0
 800438a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800438c:	230e      	movs	r3, #14
 800438e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004390:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004394:	4619      	mov	r1, r3
 8004396:	4840      	ldr	r0, [pc, #256]	@ (8004498 <HAL_LTDC_MspInit+0x238>)
 8004398:	f000 fd5c 	bl	8004e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800439c:	f641 0358 	movw	r3, #6232	@ 0x1858
 80043a0:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a2:	2302      	movs	r3, #2
 80043a4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043aa:	2300      	movs	r3, #0
 80043ac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80043ae:	230e      	movs	r3, #14
 80043b0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043b2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80043b6:	4619      	mov	r1, r3
 80043b8:	4838      	ldr	r0, [pc, #224]	@ (800449c <HAL_LTDC_MspInit+0x23c>)
 80043ba:	f000 fd4b 	bl	8004e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80043be:	2303      	movs	r3, #3
 80043c0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c2:	2302      	movs	r3, #2
 80043c4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ca:	2300      	movs	r3, #0
 80043cc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80043ce:	2309      	movs	r3, #9
 80043d0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80043d6:	4619      	mov	r1, r3
 80043d8:	4831      	ldr	r0, [pc, #196]	@ (80044a0 <HAL_LTDC_MspInit+0x240>)
 80043da:	f000 fd3b 	bl	8004e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80043de:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80043e2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e4:	2302      	movs	r3, #2
 80043e6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ec:	2300      	movs	r3, #0
 80043ee:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80043f0:	230e      	movs	r3, #14
 80043f2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80043f8:	4619      	mov	r1, r3
 80043fa:	4829      	ldr	r0, [pc, #164]	@ (80044a0 <HAL_LTDC_MspInit+0x240>)
 80043fc:	f000 fd2a 	bl	8004e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8004400:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8004404:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004406:	2302      	movs	r3, #2
 8004408:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440a:	2300      	movs	r3, #0
 800440c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800440e:	2300      	movs	r3, #0
 8004410:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004412:	230e      	movs	r3, #14
 8004414:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004416:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800441a:	4619      	mov	r1, r3
 800441c:	4821      	ldr	r0, [pc, #132]	@ (80044a4 <HAL_LTDC_MspInit+0x244>)
 800441e:	f000 fd19 	bl	8004e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8004422:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8004426:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004428:	2302      	movs	r3, #2
 800442a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442c:	2300      	movs	r3, #0
 800442e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004430:	2300      	movs	r3, #0
 8004432:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004434:	230e      	movs	r3, #14
 8004436:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004438:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800443c:	4619      	mov	r1, r3
 800443e:	481a      	ldr	r0, [pc, #104]	@ (80044a8 <HAL_LTDC_MspInit+0x248>)
 8004440:	f000 fd08 	bl	8004e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8004444:	2348      	movs	r3, #72	@ 0x48
 8004446:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004448:	2302      	movs	r3, #2
 800444a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444c:	2300      	movs	r3, #0
 800444e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004450:	2300      	movs	r3, #0
 8004452:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004454:	230e      	movs	r3, #14
 8004456:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004458:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800445c:	4619      	mov	r1, r3
 800445e:	4813      	ldr	r0, [pc, #76]	@ (80044ac <HAL_LTDC_MspInit+0x24c>)
 8004460:	f000 fcf8 	bl	8004e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8004464:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004468:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446a:	2302      	movs	r3, #2
 800446c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446e:	2300      	movs	r3, #0
 8004470:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004472:	2300      	movs	r3, #0
 8004474:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004476:	2309      	movs	r3, #9
 8004478:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800447a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800447e:	4619      	mov	r1, r3
 8004480:	4808      	ldr	r0, [pc, #32]	@ (80044a4 <HAL_LTDC_MspInit+0x244>)
 8004482:	f000 fce7 	bl	8004e54 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8004486:	bf00      	nop
 8004488:	3768      	adds	r7, #104	@ 0x68
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40016800 	.word	0x40016800
 8004494:	40023800 	.word	0x40023800
 8004498:	40021400 	.word	0x40021400
 800449c:	40020000 	.word	0x40020000
 80044a0:	40020400 	.word	0x40020400
 80044a4:	40021800 	.word	0x40021800
 80044a8:	40020800 	.word	0x40020800
 80044ac:	40020c00 	.word	0x40020c00

080044b0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a0b      	ldr	r2, [pc, #44]	@ (80044ec <HAL_RNG_MspInit+0x3c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d10d      	bne.n	80044de <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	4b0a      	ldr	r3, [pc, #40]	@ (80044f0 <HAL_RNG_MspInit+0x40>)
 80044c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ca:	4a09      	ldr	r2, [pc, #36]	@ (80044f0 <HAL_RNG_MspInit+0x40>)
 80044cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044d0:	6353      	str	r3, [r2, #52]	@ 0x34
 80044d2:	4b07      	ldr	r3, [pc, #28]	@ (80044f0 <HAL_RNG_MspInit+0x40>)
 80044d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80044de:	bf00      	nop
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	50060800 	.word	0x50060800
 80044f0:	40023800 	.word	0x40023800

080044f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	@ 0x28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044fc:	f107 0314 	add.w	r3, r7, #20
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	605a      	str	r2, [r3, #4]
 8004506:	609a      	str	r2, [r3, #8]
 8004508:	60da      	str	r2, [r3, #12]
 800450a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a19      	ldr	r2, [pc, #100]	@ (8004578 <HAL_SPI_MspInit+0x84>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d12c      	bne.n	8004570 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	4b18      	ldr	r3, [pc, #96]	@ (800457c <HAL_SPI_MspInit+0x88>)
 800451c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451e:	4a17      	ldr	r2, [pc, #92]	@ (800457c <HAL_SPI_MspInit+0x88>)
 8004520:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004524:	6453      	str	r3, [r2, #68]	@ 0x44
 8004526:	4b15      	ldr	r3, [pc, #84]	@ (800457c <HAL_SPI_MspInit+0x88>)
 8004528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	4b11      	ldr	r3, [pc, #68]	@ (800457c <HAL_SPI_MspInit+0x88>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453a:	4a10      	ldr	r2, [pc, #64]	@ (800457c <HAL_SPI_MspInit+0x88>)
 800453c:	f043 0320 	orr.w	r3, r3, #32
 8004540:	6313      	str	r3, [r2, #48]	@ 0x30
 8004542:	4b0e      	ldr	r3, [pc, #56]	@ (800457c <HAL_SPI_MspInit+0x88>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800454e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8004552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004554:	2302      	movs	r3, #2
 8004556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004558:	2300      	movs	r3, #0
 800455a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800455c:	2300      	movs	r3, #0
 800455e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004560:	2305      	movs	r3, #5
 8004562:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004564:	f107 0314 	add.w	r3, r7, #20
 8004568:	4619      	mov	r1, r3
 800456a:	4805      	ldr	r0, [pc, #20]	@ (8004580 <HAL_SPI_MspInit+0x8c>)
 800456c:	f000 fc72 	bl	8004e54 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8004570:	bf00      	nop
 8004572:	3728      	adds	r7, #40	@ 0x28
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40015000 	.word	0x40015000
 800457c:	40023800 	.word	0x40023800
 8004580:	40021400 	.word	0x40021400

08004584 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a08      	ldr	r2, [pc, #32]	@ (80045b4 <HAL_SPI_MspDeInit+0x30>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d10a      	bne.n	80045ac <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8004596:	4b08      	ldr	r3, [pc, #32]	@ (80045b8 <HAL_SPI_MspDeInit+0x34>)
 8004598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459a:	4a07      	ldr	r2, [pc, #28]	@ (80045b8 <HAL_SPI_MspDeInit+0x34>)
 800459c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80045a0:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80045a2:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80045a6:	4805      	ldr	r0, [pc, #20]	@ (80045bc <HAL_SPI_MspDeInit+0x38>)
 80045a8:	f000 fe00 	bl	80051ac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80045ac:	bf00      	nop
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40015000 	.word	0x40015000
 80045b8:	40023800 	.word	0x40023800
 80045bc:	40021400 	.word	0x40021400

080045c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a0b      	ldr	r2, [pc, #44]	@ (80045fc <HAL_TIM_Base_MspInit+0x3c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d10d      	bne.n	80045ee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004600 <HAL_TIM_Base_MspInit+0x40>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045da:	4a09      	ldr	r2, [pc, #36]	@ (8004600 <HAL_TIM_Base_MspInit+0x40>)
 80045dc:	f043 0320 	orr.w	r3, r3, #32
 80045e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80045e2:	4b07      	ldr	r3, [pc, #28]	@ (8004600 <HAL_TIM_Base_MspInit+0x40>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40001400 	.word	0x40001400
 8004600:	40023800 	.word	0x40023800

08004604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004608:	bf00      	nop
 800460a:	e7fd      	b.n	8004608 <NMI_Handler+0x4>

0800460c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004610:	bf00      	nop
 8004612:	e7fd      	b.n	8004610 <HardFault_Handler+0x4>

08004614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004618:	bf00      	nop
 800461a:	e7fd      	b.n	8004618 <MemManage_Handler+0x4>

0800461c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004620:	bf00      	nop
 8004622:	e7fd      	b.n	8004620 <BusFault_Handler+0x4>

08004624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004628:	bf00      	nop
 800462a:	e7fd      	b.n	8004628 <UsageFault_Handler+0x4>

0800462c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004630:	bf00      	nop
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800463a:	b480      	push	{r7}
 800463c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800463e:	bf00      	nop
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800464c:	bf00      	nop
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800465a:	f000 fa2f 	bl	8004abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800465e:	bf00      	nop
 8004660:	bd80      	pop	{r7, pc}

08004662 <STMPE811_Read>:
    return STMPE811_State_Ok;

}

uint8_t STMPE811_Read(uint8_t reg)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b084      	sub	sp, #16
 8004666:	af00      	add	r7, sp, #0
 8004668:	4603      	mov	r3, r0
 800466a:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800466c:	f107 020f 	add.w	r2, r7, #15
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	4619      	mov	r1, r3
 8004674:	2082      	movs	r0, #130	@ 0x82
 8004676:	f000 f8b7 	bl	80047e8 <I2C3_Read>

    return readData;
 800467a:	7bfb      	ldrb	r3, [r7, #15]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	460a      	mov	r2, r1
 800468e:	71fb      	strb	r3, [r7, #7]
 8004690:	4613      	mov	r3, r2
 8004692:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8004694:	79ba      	ldrb	r2, [r7, #6]
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	4619      	mov	r1, r3
 800469a:	2082      	movs	r0, #130	@ 0x82
 800469c:	f000 f87c 	bl	8004798 <I2C3_Write>
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	799b      	ldrb	r3, [r3, #6]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d117      	bne.n	80046e8 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 f8b7 	bl	8004830 <TM_STMPE811_ReadX>
 80046c2:	4603      	mov	r3, r0
 80046c4:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	885b      	ldrh	r3, [r3, #2]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 f90a 	bl	80048ec <TM_STMPE811_ReadY>
 80046d8:	4603      	mov	r3, r0
 80046da:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80046de:	3301      	adds	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	805a      	strh	r2, [r3, #2]
 80046e6:	e048      	b.n	800477a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	799b      	ldrb	r3, [r3, #6]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d112      	bne.n	8004716 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 f89b 	bl	8004830 <TM_STMPE811_ReadX>
 80046fa:	4603      	mov	r3, r0
 80046fc:	461a      	mov	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	885b      	ldrh	r3, [r3, #2]
 8004706:	4618      	mov	r0, r3
 8004708:	f000 f8f0 	bl	80048ec <TM_STMPE811_ReadY>
 800470c:	4603      	mov	r3, r0
 800470e:	461a      	mov	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	805a      	strh	r2, [r3, #2]
 8004714:	e031      	b.n	800477a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	799b      	ldrb	r3, [r3, #6]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d115      	bne.n	800474a <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	885b      	ldrh	r3, [r3, #2]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 f884 	bl	8004830 <TM_STMPE811_ReadX>
 8004728:	4603      	mov	r3, r0
 800472a:	461a      	mov	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f000 f8d9 	bl	80048ec <TM_STMPE811_ReadY>
 800473a:	4603      	mov	r3, r0
 800473c:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8004740:	3301      	adds	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	801a      	strh	r2, [r3, #0]
 8004748:	e017      	b.n	800477a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	799b      	ldrb	r3, [r3, #6]
 800474e:	2b03      	cmp	r3, #3
 8004750:	d113      	bne.n	800477a <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f000 f86a 	bl	8004830 <TM_STMPE811_ReadX>
 800475c:	4603      	mov	r3, r0
 800475e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8004762:	b29a      	uxth	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f000 f8bd 	bl	80048ec <TM_STMPE811_ReadY>
 8004772:	4603      	mov	r3, r0
 8004774:	461a      	mov	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800477a:	2201      	movs	r2, #1
 800477c:	214b      	movs	r1, #75	@ 0x4b
 800477e:	2082      	movs	r0, #130	@ 0x82
 8004780:	f000 f80a 	bl	8004798 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8004784:	2200      	movs	r2, #0
 8004786:	214b      	movs	r1, #75	@ 0x4b
 8004788:	2082      	movs	r0, #130	@ 0x82
 800478a:	f000 f805 	bl	8004798 <I2C3_Write>
}
 800478e:	bf00      	nop
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <I2C3_Write>:
    
}

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af04      	add	r7, sp, #16
 800479e:	4603      	mov	r3, r0
 80047a0:	80fb      	strh	r3, [r7, #6]
 80047a2:	460b      	mov	r3, r1
 80047a4:	717b      	strb	r3, [r7, #5]
 80047a6:	4613      	mov	r3, r2
 80047a8:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80047aa:	793b      	ldrb	r3, [r7, #4]
 80047ac:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80047ae:	797b      	ldrb	r3, [r7, #5]
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	88f9      	ldrh	r1, [r7, #6]
 80047b4:	4b09      	ldr	r3, [pc, #36]	@ (80047dc <I2C3_Write+0x44>)
 80047b6:	9302      	str	r3, [sp, #8]
 80047b8:	2301      	movs	r3, #1
 80047ba:	9301      	str	r3, [sp, #4]
 80047bc:	f107 030f 	add.w	r3, r7, #15
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	2301      	movs	r3, #1
 80047c4:	4806      	ldr	r0, [pc, #24]	@ (80047e0 <I2C3_Write+0x48>)
 80047c6:	f000 ff5b 	bl	8005680 <HAL_I2C_Mem_Write>
 80047ca:	4603      	mov	r3, r0
 80047cc:	461a      	mov	r2, r3
 80047ce:	4b05      	ldr	r3, [pc, #20]	@ (80047e4 <I2C3_Write+0x4c>)
 80047d0:	701a      	strb	r2, [r3, #0]
    //verifyHAL_I2C_IS_OKAY();
}
 80047d2:	bf00      	nop
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	0003d090 	.word	0x0003d090
 80047e0:	20025da8 	.word	0x20025da8
 80047e4:	20025dfc 	.word	0x20025dfc

080047e8 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af04      	add	r7, sp, #16
 80047ee:	4603      	mov	r3, r0
 80047f0:	603a      	str	r2, [r7, #0]
 80047f2:	71fb      	strb	r3, [r7, #7]
 80047f4:	460b      	mov	r3, r1
 80047f6:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80047f8:	79fb      	ldrb	r3, [r7, #7]
 80047fa:	b299      	uxth	r1, r3
 80047fc:	79bb      	ldrb	r3, [r7, #6]
 80047fe:	b29a      	uxth	r2, r3
 8004800:	4b08      	ldr	r3, [pc, #32]	@ (8004824 <I2C3_Read+0x3c>)
 8004802:	9302      	str	r3, [sp, #8]
 8004804:	2301      	movs	r3, #1
 8004806:	9301      	str	r3, [sp, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	2301      	movs	r3, #1
 800480e:	4806      	ldr	r0, [pc, #24]	@ (8004828 <I2C3_Read+0x40>)
 8004810:	f001 f830 	bl	8005874 <HAL_I2C_Mem_Read>
 8004814:	4603      	mov	r3, r0
 8004816:	461a      	mov	r2, r3
 8004818:	4b04      	ldr	r3, [pc, #16]	@ (800482c <I2C3_Read+0x44>)
 800481a:	701a      	strb	r2, [r3, #0]
    //verifyHAL_I2C_IS_OKAY();
}
 800481c:	bf00      	nop
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	0003d090 	.word	0x0003d090
 8004828:	20025da8 	.word	0x20025da8
 800482c:	20025dfc 	.word	0x20025dfc

08004830 <TM_STMPE811_ReadX>:
{
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800483a:	204d      	movs	r0, #77	@ 0x4d
 800483c:	f7ff ff11 	bl	8004662 <STMPE811_Read>
 8004840:	4603      	mov	r3, r0
 8004842:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8004844:	204e      	movs	r0, #78	@ 0x4e
 8004846:	f7ff ff0c 	bl	8004662 <STMPE811_Read>
 800484a:	4603      	mov	r3, r0
 800484c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800484e:	7a7b      	ldrb	r3, [r7, #9]
 8004850:	021b      	lsls	r3, r3, #8
 8004852:	b21a      	sxth	r2, r3
 8004854:	7a3b      	ldrb	r3, [r7, #8]
 8004856:	b21b      	sxth	r3, r3
 8004858:	4313      	orrs	r3, r2
 800485a:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 800485c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004860:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004864:	4293      	cmp	r3, r2
 8004866:	dc06      	bgt.n	8004876 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8004868:	89fb      	ldrh	r3, [r7, #14]
 800486a:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800486e:	330c      	adds	r3, #12
 8004870:	b29b      	uxth	r3, r3
 8004872:	81fb      	strh	r3, [r7, #14]
 8004874:	e005      	b.n	8004882 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8004876:	89fb      	ldrh	r3, [r7, #14]
 8004878:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800487c:	3308      	adds	r3, #8
 800487e:	b29b      	uxth	r3, r3
 8004880:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8004882:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004886:	4a18      	ldr	r2, [pc, #96]	@ (80048e8 <TM_STMPE811_ReadX+0xb8>)
 8004888:	fb82 1203 	smull	r1, r2, r2, r3
 800488c:	441a      	add	r2, r3
 800488e:	10d2      	asrs	r2, r2, #3
 8004890:	17db      	asrs	r3, r3, #31
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8004896:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800489a:	2bef      	cmp	r3, #239	@ 0xef
 800489c:	dd02      	ble.n	80048a4 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800489e:	23ef      	movs	r3, #239	@ 0xef
 80048a0:	81fb      	strh	r3, [r7, #14]
 80048a2:	e005      	b.n	80048b0 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 80048a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	da01      	bge.n	80048b0 <TM_STMPE811_ReadX+0x80>
        val = 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80048b0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	dd05      	ble.n	80048c6 <TM_STMPE811_ReadX+0x96>
 80048ba:	89fa      	ldrh	r2, [r7, #14]
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	b21b      	sxth	r3, r3
 80048c4:	e004      	b.n	80048d0 <TM_STMPE811_ReadX+0xa0>
 80048c6:	89fb      	ldrh	r3, [r7, #14]
 80048c8:	88fa      	ldrh	r2, [r7, #6]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	b21b      	sxth	r3, r3
 80048d0:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80048d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	dd01      	ble.n	80048de <TM_STMPE811_ReadX+0xae>
        return val;
 80048da:	89fb      	ldrh	r3, [r7, #14]
 80048dc:	e000      	b.n	80048e0 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 80048de:	88fb      	ldrh	r3, [r7, #6]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	88888889 	.word	0x88888889

080048ec <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80048f6:	204f      	movs	r0, #79	@ 0x4f
 80048f8:	f7ff feb3 	bl	8004662 <STMPE811_Read>
 80048fc:	4603      	mov	r3, r0
 80048fe:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8004900:	2050      	movs	r0, #80	@ 0x50
 8004902:	f7ff feae 	bl	8004662 <STMPE811_Read>
 8004906:	4603      	mov	r3, r0
 8004908:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800490a:	7a7b      	ldrb	r3, [r7, #9]
 800490c:	021b      	lsls	r3, r3, #8
 800490e:	b21a      	sxth	r2, r3
 8004910:	7a3b      	ldrb	r3, [r7, #8]
 8004912:	b21b      	sxth	r3, r3
 8004914:	4313      	orrs	r3, r2
 8004916:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8004918:	89fb      	ldrh	r3, [r7, #14]
 800491a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800491e:	b29b      	uxth	r3, r3
 8004920:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8004922:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004926:	4a19      	ldr	r2, [pc, #100]	@ (800498c <TM_STMPE811_ReadY+0xa0>)
 8004928:	fb82 1203 	smull	r1, r2, r2, r3
 800492c:	1052      	asrs	r2, r2, #1
 800492e:	17db      	asrs	r3, r3, #31
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8004934:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004938:	2b00      	cmp	r3, #0
 800493a:	dc02      	bgt.n	8004942 <TM_STMPE811_ReadY+0x56>
        val = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	81fb      	strh	r3, [r7, #14]
 8004940:	e007      	b.n	8004952 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8004942:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004946:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800494a:	db02      	blt.n	8004952 <TM_STMPE811_ReadY+0x66>
        val = 319;
 800494c:	f240 133f 	movw	r3, #319	@ 0x13f
 8004950:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8004952:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	429a      	cmp	r2, r3
 800495a:	dd05      	ble.n	8004968 <TM_STMPE811_ReadY+0x7c>
 800495c:	89fa      	ldrh	r2, [r7, #14]
 800495e:	88fb      	ldrh	r3, [r7, #6]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	b29b      	uxth	r3, r3
 8004964:	b21b      	sxth	r3, r3
 8004966:	e004      	b.n	8004972 <TM_STMPE811_ReadY+0x86>
 8004968:	89fb      	ldrh	r3, [r7, #14]
 800496a:	88fa      	ldrh	r2, [r7, #6]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	b29b      	uxth	r3, r3
 8004970:	b21b      	sxth	r3, r3
 8004972:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8004974:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004978:	2b04      	cmp	r3, #4
 800497a:	dd01      	ble.n	8004980 <TM_STMPE811_ReadY+0x94>
        return val;
 800497c:	89fb      	ldrh	r3, [r7, #14]
 800497e:	e000      	b.n	8004982 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8004980:	88fb      	ldrh	r3, [r7, #6]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	2e8ba2e9 	.word	0x2e8ba2e9

08004990 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049a4:	4b06      	ldr	r3, [pc, #24]	@ (80049c0 <SystemInit+0x20>)
 80049a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049aa:	4a05      	ldr	r2, [pc, #20]	@ (80049c0 <SystemInit+0x20>)
 80049ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049b4:	bf00      	nop
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	e000ed00 	.word	0xe000ed00

080049c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80049c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80049fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80049c8:	f7ff ffea 	bl	80049a0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049cc:	480c      	ldr	r0, [pc, #48]	@ (8004a00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80049ce:	490d      	ldr	r1, [pc, #52]	@ (8004a04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80049d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004a08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80049d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049d4:	e002      	b.n	80049dc <LoopCopyDataInit>

080049d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049da:	3304      	adds	r3, #4

080049dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049e0:	d3f9      	bcc.n	80049d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049e2:	4a0a      	ldr	r2, [pc, #40]	@ (8004a0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80049e4:	4c0a      	ldr	r4, [pc, #40]	@ (8004a10 <LoopFillZerobss+0x22>)
  movs r3, #0
 80049e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049e8:	e001      	b.n	80049ee <LoopFillZerobss>

080049ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049ec:	3204      	adds	r2, #4

080049ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049f0:	d3fb      	bcc.n	80049ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80049f2:	f003 fbdb 	bl	80081ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049f6:	f7ff f85e 	bl	8003ab6 <main>
  bx  lr    
 80049fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80049fc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a04:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8004a08:	08009e0c 	.word	0x08009e0c
  ldr r2, =_sbss
 8004a0c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8004a10:	20025e04 	.word	0x20025e04

08004a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a14:	e7fe      	b.n	8004a14 <ADC_IRQHandler>
	...

08004a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a58 <HAL_Init+0x40>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a0d      	ldr	r2, [pc, #52]	@ (8004a58 <HAL_Init+0x40>)
 8004a22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a28:	4b0b      	ldr	r3, [pc, #44]	@ (8004a58 <HAL_Init+0x40>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8004a58 <HAL_Init+0x40>)
 8004a2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a34:	4b08      	ldr	r3, [pc, #32]	@ (8004a58 <HAL_Init+0x40>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a07      	ldr	r2, [pc, #28]	@ (8004a58 <HAL_Init+0x40>)
 8004a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a40:	2003      	movs	r0, #3
 8004a42:	f000 f991 	bl	8004d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a46:	2000      	movs	r0, #0
 8004a48:	f000 f808 	bl	8004a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a4c:	f7ff fb76 	bl	800413c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40023c00 	.word	0x40023c00

08004a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a64:	4b12      	ldr	r3, [pc, #72]	@ (8004ab0 <HAL_InitTick+0x54>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4b12      	ldr	r3, [pc, #72]	@ (8004ab4 <HAL_InitTick+0x58>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 f9b7 	bl	8004dee <HAL_SYSTICK_Config>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e00e      	b.n	8004aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b0f      	cmp	r3, #15
 8004a8e:	d80a      	bhi.n	8004aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a90:	2200      	movs	r2, #0
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	f04f 30ff 	mov.w	r0, #4294967295
 8004a98:	f000 f971 	bl	8004d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a9c:	4a06      	ldr	r2, [pc, #24]	@ (8004ab8 <HAL_InitTick+0x5c>)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e000      	b.n	8004aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	20000018 	.word	0x20000018
 8004ab4:	20000020 	.word	0x20000020
 8004ab8:	2000001c 	.word	0x2000001c

08004abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ac0:	4b06      	ldr	r3, [pc, #24]	@ (8004adc <HAL_IncTick+0x20>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	4b06      	ldr	r3, [pc, #24]	@ (8004ae0 <HAL_IncTick+0x24>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4413      	add	r3, r2
 8004acc:	4a04      	ldr	r2, [pc, #16]	@ (8004ae0 <HAL_IncTick+0x24>)
 8004ace:	6013      	str	r3, [r2, #0]
}
 8004ad0:	bf00      	nop
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	20000020 	.word	0x20000020
 8004ae0:	20025e00 	.word	0x20025e00

08004ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ae8:	4b03      	ldr	r3, [pc, #12]	@ (8004af8 <HAL_GetTick+0x14>)
 8004aea:	681b      	ldr	r3, [r3, #0]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	20025e00 	.word	0x20025e00

08004afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b04:	f7ff ffee 	bl	8004ae4 <HAL_GetTick>
 8004b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d005      	beq.n	8004b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b16:	4b0a      	ldr	r3, [pc, #40]	@ (8004b40 <HAL_Delay+0x44>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b22:	bf00      	nop
 8004b24:	f7ff ffde 	bl	8004ae4 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d8f7      	bhi.n	8004b24 <HAL_Delay+0x28>
  {
  }
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000020 	.word	0x20000020

08004b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b54:	4b0c      	ldr	r3, [pc, #48]	@ (8004b88 <__NVIC_SetPriorityGrouping+0x44>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b60:	4013      	ands	r3, r2
 8004b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b76:	4a04      	ldr	r2, [pc, #16]	@ (8004b88 <__NVIC_SetPriorityGrouping+0x44>)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	60d3      	str	r3, [r2, #12]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b90:	4b04      	ldr	r3, [pc, #16]	@ (8004ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	0a1b      	lsrs	r3, r3, #8
 8004b96:	f003 0307 	and.w	r3, r3, #7
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	e000ed00 	.word	0xe000ed00

08004ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	db0b      	blt.n	8004bd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	f003 021f 	and.w	r2, r3, #31
 8004bc0:	4907      	ldr	r1, [pc, #28]	@ (8004be0 <__NVIC_EnableIRQ+0x38>)
 8004bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	2001      	movs	r0, #1
 8004bca:	fa00 f202 	lsl.w	r2, r0, r2
 8004bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	e000e100 	.word	0xe000e100

08004be4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4603      	mov	r3, r0
 8004bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	db12      	blt.n	8004c1c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	f003 021f 	and.w	r2, r3, #31
 8004bfc:	490a      	ldr	r1, [pc, #40]	@ (8004c28 <__NVIC_DisableIRQ+0x44>)
 8004bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	2001      	movs	r0, #1
 8004c06:	fa00 f202 	lsl.w	r2, r0, r2
 8004c0a:	3320      	adds	r3, #32
 8004c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c10:	f3bf 8f4f 	dsb	sy
}
 8004c14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004c16:	f3bf 8f6f 	isb	sy
}
 8004c1a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	e000e100 	.word	0xe000e100

08004c2c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4603      	mov	r3, r0
 8004c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	db0c      	blt.n	8004c58 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	f003 021f 	and.w	r2, r3, #31
 8004c44:	4907      	ldr	r1, [pc, #28]	@ (8004c64 <__NVIC_ClearPendingIRQ+0x38>)
 8004c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c52:	3360      	adds	r3, #96	@ 0x60
 8004c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	e000e100 	.word	0xe000e100

08004c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	6039      	str	r1, [r7, #0]
 8004c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	db0a      	blt.n	8004c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	490c      	ldr	r1, [pc, #48]	@ (8004cb4 <__NVIC_SetPriority+0x4c>)
 8004c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c86:	0112      	lsls	r2, r2, #4
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c90:	e00a      	b.n	8004ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	4908      	ldr	r1, [pc, #32]	@ (8004cb8 <__NVIC_SetPriority+0x50>)
 8004c98:	79fb      	ldrb	r3, [r7, #7]
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	3b04      	subs	r3, #4
 8004ca0:	0112      	lsls	r2, r2, #4
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	761a      	strb	r2, [r3, #24]
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	e000e100 	.word	0xe000e100
 8004cb8:	e000ed00 	.word	0xe000ed00

08004cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b089      	sub	sp, #36	@ 0x24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	f1c3 0307 	rsb	r3, r3, #7
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	bf28      	it	cs
 8004cda:	2304      	movcs	r3, #4
 8004cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	2b06      	cmp	r3, #6
 8004ce4:	d902      	bls.n	8004cec <NVIC_EncodePriority+0x30>
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	3b03      	subs	r3, #3
 8004cea:	e000      	b.n	8004cee <NVIC_EncodePriority+0x32>
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	43da      	mvns	r2, r3
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	401a      	ands	r2, r3
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d04:	f04f 31ff 	mov.w	r1, #4294967295
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0e:	43d9      	mvns	r1, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d14:	4313      	orrs	r3, r2
         );
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3724      	adds	r7, #36	@ 0x24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
	...

08004d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d34:	d301      	bcc.n	8004d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d36:	2301      	movs	r3, #1
 8004d38:	e00f      	b.n	8004d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d64 <SysTick_Config+0x40>)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d42:	210f      	movs	r1, #15
 8004d44:	f04f 30ff 	mov.w	r0, #4294967295
 8004d48:	f7ff ff8e 	bl	8004c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d4c:	4b05      	ldr	r3, [pc, #20]	@ (8004d64 <SysTick_Config+0x40>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d52:	4b04      	ldr	r3, [pc, #16]	@ (8004d64 <SysTick_Config+0x40>)
 8004d54:	2207      	movs	r2, #7
 8004d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	e000e010 	.word	0xe000e010

08004d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff fee7 	bl	8004b44 <__NVIC_SetPriorityGrouping>
}
 8004d76:	bf00      	nop
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b086      	sub	sp, #24
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	4603      	mov	r3, r0
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
 8004d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d90:	f7ff fefc 	bl	8004b8c <__NVIC_GetPriorityGrouping>
 8004d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	6978      	ldr	r0, [r7, #20]
 8004d9c:	f7ff ff8e 	bl	8004cbc <NVIC_EncodePriority>
 8004da0:	4602      	mov	r2, r0
 8004da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004da6:	4611      	mov	r1, r2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff ff5d 	bl	8004c68 <__NVIC_SetPriority>
}
 8004dae:	bf00      	nop
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b082      	sub	sp, #8
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff feef 	bl	8004ba8 <__NVIC_EnableIRQ>
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b082      	sub	sp, #8
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	4603      	mov	r3, r0
 8004dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7ff feff 	bl	8004be4 <__NVIC_DisableIRQ>
}
 8004de6:	bf00      	nop
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b082      	sub	sp, #8
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff ff94 	bl	8004d24 <SysTick_Config>
 8004dfc:	4603      	mov	r3, r0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff ff09 	bl	8004c2c <__NVIC_ClearPendingIRQ>
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 031f 	and.w	r3, r3, #31
 8004e36:	2201      	movs	r2, #1
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8004e3e:	4a04      	ldr	r2, [pc, #16]	@ (8004e50 <HAL_EXTI_ClearPending+0x2c>)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6153      	str	r3, [r2, #20]
}
 8004e44:	bf00      	nop
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	40013c00 	.word	0x40013c00

08004e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b089      	sub	sp, #36	@ 0x24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	e177      	b.n	8005160 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e70:	2201      	movs	r2, #1
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4013      	ands	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	f040 8166 	bne.w	800515a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d005      	beq.n	8004ea6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d130      	bne.n	8004f08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	2203      	movs	r2, #3
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004edc:	2201      	movs	r2, #1
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	091b      	lsrs	r3, r3, #4
 8004ef2:	f003 0201 	and.w	r2, r3, #1
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d017      	beq.n	8004f44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	2203      	movs	r2, #3
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	43db      	mvns	r3, r3
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f003 0303 	and.w	r3, r3, #3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d123      	bne.n	8004f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	08da      	lsrs	r2, r3, #3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3208      	adds	r2, #8
 8004f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	220f      	movs	r2, #15
 8004f68:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	4013      	ands	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	691a      	ldr	r2, [r3, #16]
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f003 0307 	and.w	r3, r3, #7
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	08da      	lsrs	r2, r3, #3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3208      	adds	r2, #8
 8004f92:	69b9      	ldr	r1, [r7, #24]
 8004f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	2203      	movs	r2, #3
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4013      	ands	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f003 0203 	and.w	r2, r3, #3
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 80c0 	beq.w	800515a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	4b66      	ldr	r3, [pc, #408]	@ (8005178 <HAL_GPIO_Init+0x324>)
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe2:	4a65      	ldr	r2, [pc, #404]	@ (8005178 <HAL_GPIO_Init+0x324>)
 8004fe4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fe8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004fea:	4b63      	ldr	r3, [pc, #396]	@ (8005178 <HAL_GPIO_Init+0x324>)
 8004fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ff6:	4a61      	ldr	r2, [pc, #388]	@ (800517c <HAL_GPIO_Init+0x328>)
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	089b      	lsrs	r3, r3, #2
 8004ffc:	3302      	adds	r3, #2
 8004ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	220f      	movs	r2, #15
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	43db      	mvns	r3, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4013      	ands	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a58      	ldr	r2, [pc, #352]	@ (8005180 <HAL_GPIO_Init+0x32c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d037      	beq.n	8005092 <HAL_GPIO_Init+0x23e>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a57      	ldr	r2, [pc, #348]	@ (8005184 <HAL_GPIO_Init+0x330>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d031      	beq.n	800508e <HAL_GPIO_Init+0x23a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a56      	ldr	r2, [pc, #344]	@ (8005188 <HAL_GPIO_Init+0x334>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d02b      	beq.n	800508a <HAL_GPIO_Init+0x236>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a55      	ldr	r2, [pc, #340]	@ (800518c <HAL_GPIO_Init+0x338>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d025      	beq.n	8005086 <HAL_GPIO_Init+0x232>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a54      	ldr	r2, [pc, #336]	@ (8005190 <HAL_GPIO_Init+0x33c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d01f      	beq.n	8005082 <HAL_GPIO_Init+0x22e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a53      	ldr	r2, [pc, #332]	@ (8005194 <HAL_GPIO_Init+0x340>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d019      	beq.n	800507e <HAL_GPIO_Init+0x22a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a52      	ldr	r2, [pc, #328]	@ (8005198 <HAL_GPIO_Init+0x344>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d013      	beq.n	800507a <HAL_GPIO_Init+0x226>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a51      	ldr	r2, [pc, #324]	@ (800519c <HAL_GPIO_Init+0x348>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00d      	beq.n	8005076 <HAL_GPIO_Init+0x222>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a50      	ldr	r2, [pc, #320]	@ (80051a0 <HAL_GPIO_Init+0x34c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d007      	beq.n	8005072 <HAL_GPIO_Init+0x21e>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a4f      	ldr	r2, [pc, #316]	@ (80051a4 <HAL_GPIO_Init+0x350>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d101      	bne.n	800506e <HAL_GPIO_Init+0x21a>
 800506a:	2309      	movs	r3, #9
 800506c:	e012      	b.n	8005094 <HAL_GPIO_Init+0x240>
 800506e:	230a      	movs	r3, #10
 8005070:	e010      	b.n	8005094 <HAL_GPIO_Init+0x240>
 8005072:	2308      	movs	r3, #8
 8005074:	e00e      	b.n	8005094 <HAL_GPIO_Init+0x240>
 8005076:	2307      	movs	r3, #7
 8005078:	e00c      	b.n	8005094 <HAL_GPIO_Init+0x240>
 800507a:	2306      	movs	r3, #6
 800507c:	e00a      	b.n	8005094 <HAL_GPIO_Init+0x240>
 800507e:	2305      	movs	r3, #5
 8005080:	e008      	b.n	8005094 <HAL_GPIO_Init+0x240>
 8005082:	2304      	movs	r3, #4
 8005084:	e006      	b.n	8005094 <HAL_GPIO_Init+0x240>
 8005086:	2303      	movs	r3, #3
 8005088:	e004      	b.n	8005094 <HAL_GPIO_Init+0x240>
 800508a:	2302      	movs	r3, #2
 800508c:	e002      	b.n	8005094 <HAL_GPIO_Init+0x240>
 800508e:	2301      	movs	r3, #1
 8005090:	e000      	b.n	8005094 <HAL_GPIO_Init+0x240>
 8005092:	2300      	movs	r3, #0
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	f002 0203 	and.w	r2, r2, #3
 800509a:	0092      	lsls	r2, r2, #2
 800509c:	4093      	lsls	r3, r2
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050a4:	4935      	ldr	r1, [pc, #212]	@ (800517c <HAL_GPIO_Init+0x328>)
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	089b      	lsrs	r3, r3, #2
 80050aa:	3302      	adds	r3, #2
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050b2:	4b3d      	ldr	r3, [pc, #244]	@ (80051a8 <HAL_GPIO_Init+0x354>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	43db      	mvns	r3, r3
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4013      	ands	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050d6:	4a34      	ldr	r2, [pc, #208]	@ (80051a8 <HAL_GPIO_Init+0x354>)
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050dc:	4b32      	ldr	r3, [pc, #200]	@ (80051a8 <HAL_GPIO_Init+0x354>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	43db      	mvns	r3, r3
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4013      	ands	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005100:	4a29      	ldr	r2, [pc, #164]	@ (80051a8 <HAL_GPIO_Init+0x354>)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005106:	4b28      	ldr	r3, [pc, #160]	@ (80051a8 <HAL_GPIO_Init+0x354>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	43db      	mvns	r3, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4013      	ands	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800512a:	4a1f      	ldr	r2, [pc, #124]	@ (80051a8 <HAL_GPIO_Init+0x354>)
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005130:	4b1d      	ldr	r3, [pc, #116]	@ (80051a8 <HAL_GPIO_Init+0x354>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	43db      	mvns	r3, r3
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	4013      	ands	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005154:	4a14      	ldr	r2, [pc, #80]	@ (80051a8 <HAL_GPIO_Init+0x354>)
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	3301      	adds	r3, #1
 800515e:	61fb      	str	r3, [r7, #28]
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	2b0f      	cmp	r3, #15
 8005164:	f67f ae84 	bls.w	8004e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005168:	bf00      	nop
 800516a:	bf00      	nop
 800516c:	3724      	adds	r7, #36	@ 0x24
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	40023800 	.word	0x40023800
 800517c:	40013800 	.word	0x40013800
 8005180:	40020000 	.word	0x40020000
 8005184:	40020400 	.word	0x40020400
 8005188:	40020800 	.word	0x40020800
 800518c:	40020c00 	.word	0x40020c00
 8005190:	40021000 	.word	0x40021000
 8005194:	40021400 	.word	0x40021400
 8005198:	40021800 	.word	0x40021800
 800519c:	40021c00 	.word	0x40021c00
 80051a0:	40022000 	.word	0x40022000
 80051a4:	40022400 	.word	0x40022400
 80051a8:	40013c00 	.word	0x40013c00

080051ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80051be:	2300      	movs	r3, #0
 80051c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	e0d9      	b.n	800537c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051c8:	2201      	movs	r2, #1
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	4013      	ands	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	429a      	cmp	r2, r3
 80051e0:	f040 80c9 	bne.w	8005376 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80051e4:	4a6b      	ldr	r2, [pc, #428]	@ (8005394 <HAL_GPIO_DeInit+0x1e8>)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	089b      	lsrs	r3, r3, #2
 80051ea:	3302      	adds	r3, #2
 80051ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	220f      	movs	r2, #15
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	4013      	ands	r3, r2
 8005204:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a63      	ldr	r2, [pc, #396]	@ (8005398 <HAL_GPIO_DeInit+0x1ec>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d037      	beq.n	800527e <HAL_GPIO_DeInit+0xd2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a62      	ldr	r2, [pc, #392]	@ (800539c <HAL_GPIO_DeInit+0x1f0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d031      	beq.n	800527a <HAL_GPIO_DeInit+0xce>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a61      	ldr	r2, [pc, #388]	@ (80053a0 <HAL_GPIO_DeInit+0x1f4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d02b      	beq.n	8005276 <HAL_GPIO_DeInit+0xca>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a60      	ldr	r2, [pc, #384]	@ (80053a4 <HAL_GPIO_DeInit+0x1f8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d025      	beq.n	8005272 <HAL_GPIO_DeInit+0xc6>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a5f      	ldr	r2, [pc, #380]	@ (80053a8 <HAL_GPIO_DeInit+0x1fc>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01f      	beq.n	800526e <HAL_GPIO_DeInit+0xc2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a5e      	ldr	r2, [pc, #376]	@ (80053ac <HAL_GPIO_DeInit+0x200>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d019      	beq.n	800526a <HAL_GPIO_DeInit+0xbe>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a5d      	ldr	r2, [pc, #372]	@ (80053b0 <HAL_GPIO_DeInit+0x204>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d013      	beq.n	8005266 <HAL_GPIO_DeInit+0xba>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a5c      	ldr	r2, [pc, #368]	@ (80053b4 <HAL_GPIO_DeInit+0x208>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00d      	beq.n	8005262 <HAL_GPIO_DeInit+0xb6>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a5b      	ldr	r2, [pc, #364]	@ (80053b8 <HAL_GPIO_DeInit+0x20c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d007      	beq.n	800525e <HAL_GPIO_DeInit+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a5a      	ldr	r2, [pc, #360]	@ (80053bc <HAL_GPIO_DeInit+0x210>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d101      	bne.n	800525a <HAL_GPIO_DeInit+0xae>
 8005256:	2309      	movs	r3, #9
 8005258:	e012      	b.n	8005280 <HAL_GPIO_DeInit+0xd4>
 800525a:	230a      	movs	r3, #10
 800525c:	e010      	b.n	8005280 <HAL_GPIO_DeInit+0xd4>
 800525e:	2308      	movs	r3, #8
 8005260:	e00e      	b.n	8005280 <HAL_GPIO_DeInit+0xd4>
 8005262:	2307      	movs	r3, #7
 8005264:	e00c      	b.n	8005280 <HAL_GPIO_DeInit+0xd4>
 8005266:	2306      	movs	r3, #6
 8005268:	e00a      	b.n	8005280 <HAL_GPIO_DeInit+0xd4>
 800526a:	2305      	movs	r3, #5
 800526c:	e008      	b.n	8005280 <HAL_GPIO_DeInit+0xd4>
 800526e:	2304      	movs	r3, #4
 8005270:	e006      	b.n	8005280 <HAL_GPIO_DeInit+0xd4>
 8005272:	2303      	movs	r3, #3
 8005274:	e004      	b.n	8005280 <HAL_GPIO_DeInit+0xd4>
 8005276:	2302      	movs	r3, #2
 8005278:	e002      	b.n	8005280 <HAL_GPIO_DeInit+0xd4>
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <HAL_GPIO_DeInit+0xd4>
 800527e:	2300      	movs	r3, #0
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	f002 0203 	and.w	r2, r2, #3
 8005286:	0092      	lsls	r2, r2, #2
 8005288:	4093      	lsls	r3, r2
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	429a      	cmp	r2, r3
 800528e:	d132      	bne.n	80052f6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005290:	4b4b      	ldr	r3, [pc, #300]	@ (80053c0 <HAL_GPIO_DeInit+0x214>)
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	43db      	mvns	r3, r3
 8005298:	4949      	ldr	r1, [pc, #292]	@ (80053c0 <HAL_GPIO_DeInit+0x214>)
 800529a:	4013      	ands	r3, r2
 800529c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800529e:	4b48      	ldr	r3, [pc, #288]	@ (80053c0 <HAL_GPIO_DeInit+0x214>)
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	43db      	mvns	r3, r3
 80052a6:	4946      	ldr	r1, [pc, #280]	@ (80053c0 <HAL_GPIO_DeInit+0x214>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80052ac:	4b44      	ldr	r3, [pc, #272]	@ (80053c0 <HAL_GPIO_DeInit+0x214>)
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	43db      	mvns	r3, r3
 80052b4:	4942      	ldr	r1, [pc, #264]	@ (80053c0 <HAL_GPIO_DeInit+0x214>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80052ba:	4b41      	ldr	r3, [pc, #260]	@ (80053c0 <HAL_GPIO_DeInit+0x214>)
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	43db      	mvns	r3, r3
 80052c2:	493f      	ldr	r1, [pc, #252]	@ (80053c0 <HAL_GPIO_DeInit+0x214>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	220f      	movs	r2, #15
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80052d8:	4a2e      	ldr	r2, [pc, #184]	@ (8005394 <HAL_GPIO_DeInit+0x1e8>)
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	089b      	lsrs	r3, r3, #2
 80052de:	3302      	adds	r3, #2
 80052e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	43da      	mvns	r2, r3
 80052e8:	482a      	ldr	r0, [pc, #168]	@ (8005394 <HAL_GPIO_DeInit+0x1e8>)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	089b      	lsrs	r3, r3, #2
 80052ee:	400a      	ands	r2, r1
 80052f0:	3302      	adds	r3, #2
 80052f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	2103      	movs	r1, #3
 8005300:	fa01 f303 	lsl.w	r3, r1, r3
 8005304:	43db      	mvns	r3, r3
 8005306:	401a      	ands	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	08da      	lsrs	r2, r3, #3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3208      	adds	r2, #8
 8005314:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	220f      	movs	r2, #15
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	43db      	mvns	r3, r3
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	08d2      	lsrs	r2, r2, #3
 800532c:	4019      	ands	r1, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3208      	adds	r2, #8
 8005332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	2103      	movs	r1, #3
 8005340:	fa01 f303 	lsl.w	r3, r1, r3
 8005344:	43db      	mvns	r3, r3
 8005346:	401a      	ands	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	2101      	movs	r1, #1
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	fa01 f303 	lsl.w	r3, r1, r3
 8005358:	43db      	mvns	r3, r3
 800535a:	401a      	ands	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	2103      	movs	r1, #3
 800536a:	fa01 f303 	lsl.w	r3, r1, r3
 800536e:	43db      	mvns	r3, r3
 8005370:	401a      	ands	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	3301      	adds	r3, #1
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	2b0f      	cmp	r3, #15
 8005380:	f67f af22 	bls.w	80051c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40013800 	.word	0x40013800
 8005398:	40020000 	.word	0x40020000
 800539c:	40020400 	.word	0x40020400
 80053a0:	40020800 	.word	0x40020800
 80053a4:	40020c00 	.word	0x40020c00
 80053a8:	40021000 	.word	0x40021000
 80053ac:	40021400 	.word	0x40021400
 80053b0:	40021800 	.word	0x40021800
 80053b4:	40021c00 	.word	0x40021c00
 80053b8:	40022000 	.word	0x40022000
 80053bc:	40022400 	.word	0x40022400
 80053c0:	40013c00 	.word	0x40013c00

080053c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	807b      	strh	r3, [r7, #2]
 80053d0:	4613      	mov	r3, r2
 80053d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053d4:	787b      	ldrb	r3, [r7, #1]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053da:	887a      	ldrh	r2, [r7, #2]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053e0:	e003      	b.n	80053ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053e2:	887b      	ldrh	r3, [r7, #2]
 80053e4:	041a      	lsls	r2, r3, #16
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	619a      	str	r2, [r3, #24]
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
	...

080053f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e12b      	b.n	8005662 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fe feb4 	bl	800418c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2224      	movs	r2, #36	@ 0x24
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0201 	bic.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800544a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800545a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800545c:	f001 ff82 	bl	8007364 <HAL_RCC_GetPCLK1Freq>
 8005460:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	4a81      	ldr	r2, [pc, #516]	@ (800566c <HAL_I2C_Init+0x274>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d807      	bhi.n	800547c <HAL_I2C_Init+0x84>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4a80      	ldr	r2, [pc, #512]	@ (8005670 <HAL_I2C_Init+0x278>)
 8005470:	4293      	cmp	r3, r2
 8005472:	bf94      	ite	ls
 8005474:	2301      	movls	r3, #1
 8005476:	2300      	movhi	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	e006      	b.n	800548a <HAL_I2C_Init+0x92>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4a7d      	ldr	r2, [pc, #500]	@ (8005674 <HAL_I2C_Init+0x27c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	bf94      	ite	ls
 8005484:	2301      	movls	r3, #1
 8005486:	2300      	movhi	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e0e7      	b.n	8005662 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4a78      	ldr	r2, [pc, #480]	@ (8005678 <HAL_I2C_Init+0x280>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	0c9b      	lsrs	r3, r3, #18
 800549c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4a6a      	ldr	r2, [pc, #424]	@ (800566c <HAL_I2C_Init+0x274>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d802      	bhi.n	80054cc <HAL_I2C_Init+0xd4>
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	3301      	adds	r3, #1
 80054ca:	e009      	b.n	80054e0 <HAL_I2C_Init+0xe8>
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80054d2:	fb02 f303 	mul.w	r3, r2, r3
 80054d6:	4a69      	ldr	r2, [pc, #420]	@ (800567c <HAL_I2C_Init+0x284>)
 80054d8:	fba2 2303 	umull	r2, r3, r2, r3
 80054dc:	099b      	lsrs	r3, r3, #6
 80054de:	3301      	adds	r3, #1
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6812      	ldr	r2, [r2, #0]
 80054e4:	430b      	orrs	r3, r1
 80054e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80054f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	495c      	ldr	r1, [pc, #368]	@ (800566c <HAL_I2C_Init+0x274>)
 80054fc:	428b      	cmp	r3, r1
 80054fe:	d819      	bhi.n	8005534 <HAL_I2C_Init+0x13c>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	1e59      	subs	r1, r3, #1
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	fbb1 f3f3 	udiv	r3, r1, r3
 800550e:	1c59      	adds	r1, r3, #1
 8005510:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005514:	400b      	ands	r3, r1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <HAL_I2C_Init+0x138>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	1e59      	subs	r1, r3, #1
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	fbb1 f3f3 	udiv	r3, r1, r3
 8005528:	3301      	adds	r3, #1
 800552a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800552e:	e051      	b.n	80055d4 <HAL_I2C_Init+0x1dc>
 8005530:	2304      	movs	r3, #4
 8005532:	e04f      	b.n	80055d4 <HAL_I2C_Init+0x1dc>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d111      	bne.n	8005560 <HAL_I2C_Init+0x168>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	1e58      	subs	r0, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6859      	ldr	r1, [r3, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	440b      	add	r3, r1
 800554a:	fbb0 f3f3 	udiv	r3, r0, r3
 800554e:	3301      	adds	r3, #1
 8005550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005554:	2b00      	cmp	r3, #0
 8005556:	bf0c      	ite	eq
 8005558:	2301      	moveq	r3, #1
 800555a:	2300      	movne	r3, #0
 800555c:	b2db      	uxtb	r3, r3
 800555e:	e012      	b.n	8005586 <HAL_I2C_Init+0x18e>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	1e58      	subs	r0, r3, #1
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6859      	ldr	r1, [r3, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	0099      	lsls	r1, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	fbb0 f3f3 	udiv	r3, r0, r3
 8005576:	3301      	adds	r3, #1
 8005578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800557c:	2b00      	cmp	r3, #0
 800557e:	bf0c      	ite	eq
 8005580:	2301      	moveq	r3, #1
 8005582:	2300      	movne	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_I2C_Init+0x196>
 800558a:	2301      	movs	r3, #1
 800558c:	e022      	b.n	80055d4 <HAL_I2C_Init+0x1dc>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10e      	bne.n	80055b4 <HAL_I2C_Init+0x1bc>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1e58      	subs	r0, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6859      	ldr	r1, [r3, #4]
 800559e:	460b      	mov	r3, r1
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	440b      	add	r3, r1
 80055a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80055a8:	3301      	adds	r3, #1
 80055aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055b2:	e00f      	b.n	80055d4 <HAL_I2C_Init+0x1dc>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	1e58      	subs	r0, r3, #1
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6859      	ldr	r1, [r3, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	0099      	lsls	r1, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ca:	3301      	adds	r3, #1
 80055cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	6809      	ldr	r1, [r1, #0]
 80055d8:	4313      	orrs	r3, r2
 80055da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69da      	ldr	r2, [r3, #28]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005602:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6911      	ldr	r1, [r2, #16]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	68d2      	ldr	r2, [r2, #12]
 800560e:	4311      	orrs	r1, r2
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	430b      	orrs	r3, r1
 8005616:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695a      	ldr	r2, [r3, #20]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0201 	orr.w	r2, r2, #1
 8005642:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	000186a0 	.word	0x000186a0
 8005670:	001e847f 	.word	0x001e847f
 8005674:	003d08ff 	.word	0x003d08ff
 8005678:	431bde83 	.word	0x431bde83
 800567c:	10624dd3 	.word	0x10624dd3

08005680 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af02      	add	r7, sp, #8
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	4608      	mov	r0, r1
 800568a:	4611      	mov	r1, r2
 800568c:	461a      	mov	r2, r3
 800568e:	4603      	mov	r3, r0
 8005690:	817b      	strh	r3, [r7, #10]
 8005692:	460b      	mov	r3, r1
 8005694:	813b      	strh	r3, [r7, #8]
 8005696:	4613      	mov	r3, r2
 8005698:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800569a:	f7ff fa23 	bl	8004ae4 <HAL_GetTick>
 800569e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	f040 80d9 	bne.w	8005860 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	2319      	movs	r3, #25
 80056b4:	2201      	movs	r2, #1
 80056b6:	496d      	ldr	r1, [pc, #436]	@ (800586c <HAL_I2C_Mem_Write+0x1ec>)
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 fc8b 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80056c4:	2302      	movs	r3, #2
 80056c6:	e0cc      	b.n	8005862 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_I2C_Mem_Write+0x56>
 80056d2:	2302      	movs	r3, #2
 80056d4:	e0c5      	b.n	8005862 <HAL_I2C_Mem_Write+0x1e2>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d007      	beq.n	80056fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0201 	orr.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800570a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2221      	movs	r2, #33	@ 0x21
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2240      	movs	r2, #64	@ 0x40
 8005718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a3a      	ldr	r2, [r7, #32]
 8005726:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800572c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005732:	b29a      	uxth	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4a4d      	ldr	r2, [pc, #308]	@ (8005870 <HAL_I2C_Mem_Write+0x1f0>)
 800573c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800573e:	88f8      	ldrh	r0, [r7, #6]
 8005740:	893a      	ldrh	r2, [r7, #8]
 8005742:	8979      	ldrh	r1, [r7, #10]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	9301      	str	r3, [sp, #4]
 8005748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	4603      	mov	r3, r0
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fac2 	bl	8005cd8 <I2C_RequestMemoryWrite>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d052      	beq.n	8005800 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e081      	b.n	8005862 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 fd50 	bl	8006208 <I2C_WaitOnTXEFlagUntilTimeout>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00d      	beq.n	800578a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005772:	2b04      	cmp	r3, #4
 8005774:	d107      	bne.n	8005786 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005784:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e06b      	b.n	8005862 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578e:	781a      	ldrb	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579a:	1c5a      	adds	r2, r3, #1
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d11b      	bne.n	8005800 <HAL_I2C_Mem_Write+0x180>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d017      	beq.n	8005800 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d4:	781a      	ldrb	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1aa      	bne.n	800575e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 fd43 	bl	8006298 <I2C_WaitOnBTFFlagUntilTimeout>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00d      	beq.n	8005834 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581c:	2b04      	cmp	r3, #4
 800581e:	d107      	bne.n	8005830 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800582e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e016      	b.n	8005862 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005842:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	e000      	b.n	8005862 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005860:	2302      	movs	r3, #2
  }
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	00100002 	.word	0x00100002
 8005870:	ffff0000 	.word	0xffff0000

08005874 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08c      	sub	sp, #48	@ 0x30
 8005878:	af02      	add	r7, sp, #8
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	4608      	mov	r0, r1
 800587e:	4611      	mov	r1, r2
 8005880:	461a      	mov	r2, r3
 8005882:	4603      	mov	r3, r0
 8005884:	817b      	strh	r3, [r7, #10]
 8005886:	460b      	mov	r3, r1
 8005888:	813b      	strh	r3, [r7, #8]
 800588a:	4613      	mov	r3, r2
 800588c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800588e:	f7ff f929 	bl	8004ae4 <HAL_GetTick>
 8005892:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b20      	cmp	r3, #32
 800589e:	f040 8214 	bne.w	8005cca <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	2319      	movs	r3, #25
 80058a8:	2201      	movs	r2, #1
 80058aa:	497b      	ldr	r1, [pc, #492]	@ (8005a98 <HAL_I2C_Mem_Read+0x224>)
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 fb91 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80058b8:	2302      	movs	r3, #2
 80058ba:	e207      	b.n	8005ccc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_I2C_Mem_Read+0x56>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e200      	b.n	8005ccc <HAL_I2C_Mem_Read+0x458>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d007      	beq.n	80058f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2222      	movs	r2, #34	@ 0x22
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2240      	movs	r2, #64	@ 0x40
 800590c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800591a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005920:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4a5b      	ldr	r2, [pc, #364]	@ (8005a9c <HAL_I2C_Mem_Read+0x228>)
 8005930:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005932:	88f8      	ldrh	r0, [r7, #6]
 8005934:	893a      	ldrh	r2, [r7, #8]
 8005936:	8979      	ldrh	r1, [r7, #10]
 8005938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593a:	9301      	str	r3, [sp, #4]
 800593c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	4603      	mov	r3, r0
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 fa5e 	bl	8005e04 <I2C_RequestMemoryRead>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e1bc      	b.n	8005ccc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005956:	2b00      	cmp	r3, #0
 8005958:	d113      	bne.n	8005982 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800595a:	2300      	movs	r3, #0
 800595c:	623b      	str	r3, [r7, #32]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	623b      	str	r3, [r7, #32]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	623b      	str	r3, [r7, #32]
 800596e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	e190      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005986:	2b01      	cmp	r3, #1
 8005988:	d11b      	bne.n	80059c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005998:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800599a:	2300      	movs	r3, #0
 800599c:	61fb      	str	r3, [r7, #28]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	61fb      	str	r3, [r7, #28]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	61fb      	str	r3, [r7, #28]
 80059ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	e170      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d11b      	bne.n	8005a02 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ea:	2300      	movs	r3, #0
 80059ec:	61bb      	str	r3, [r7, #24]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	61bb      	str	r3, [r7, #24]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	61bb      	str	r3, [r7, #24]
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	e150      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a02:	2300      	movs	r3, #0
 8005a04:	617b      	str	r3, [r7, #20]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	617b      	str	r3, [r7, #20]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	617b      	str	r3, [r7, #20]
 8005a16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005a18:	e144      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	f200 80f1 	bhi.w	8005c06 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d123      	bne.n	8005a74 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 fc79 	bl	8006328 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e145      	b.n	8005ccc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4a:	b2d2      	uxtb	r2, r2
 8005a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a72:	e117      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d14e      	bne.n	8005b1a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a82:	2200      	movs	r2, #0
 8005a84:	4906      	ldr	r1, [pc, #24]	@ (8005aa0 <HAL_I2C_Mem_Read+0x22c>)
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 faa4 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d008      	beq.n	8005aa4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e11a      	b.n	8005ccc <HAL_I2C_Mem_Read+0x458>
 8005a96:	bf00      	nop
 8005a98:	00100002 	.word	0x00100002
 8005a9c:	ffff0000 	.word	0xffff0000
 8005aa0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ab2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b18:	e0c4      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b20:	2200      	movs	r2, #0
 8005b22:	496c      	ldr	r1, [pc, #432]	@ (8005cd4 <HAL_I2C_Mem_Read+0x460>)
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 fa55 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e0cb      	b.n	8005ccc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691a      	ldr	r2, [r3, #16]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	4955      	ldr	r1, [pc, #340]	@ (8005cd4 <HAL_I2C_Mem_Read+0x460>)
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 fa27 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e09d      	b.n	8005ccc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c04:	e04e      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c08:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fb8c 	bl	8006328 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e058      	b.n	8005ccc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	3b01      	subs	r3, #1
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d124      	bne.n	8005ca4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d107      	bne.n	8005c72 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c70:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	691a      	ldr	r2, [r3, #16]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7c:	b2d2      	uxtb	r2, r2
 8005c7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f47f aeb6 	bne.w	8005a1a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e000      	b.n	8005ccc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005cca:	2302      	movs	r3, #2
  }
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3728      	adds	r7, #40	@ 0x28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	00010004 	.word	0x00010004

08005cd8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	4611      	mov	r1, r2
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	817b      	strh	r3, [r7, #10]
 8005cea:	460b      	mov	r3, r1
 8005cec:	813b      	strh	r3, [r7, #8]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 f960 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00d      	beq.n	8005d36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d28:	d103      	bne.n	8005d32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d30:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e05f      	b.n	8005df6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d36:	897b      	ldrh	r3, [r7, #10]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d48:	6a3a      	ldr	r2, [r7, #32]
 8005d4a:	492d      	ldr	r1, [pc, #180]	@ (8005e00 <I2C_RequestMemoryWrite+0x128>)
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 f9bb 	bl	80060c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e04c      	b.n	8005df6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	617b      	str	r3, [r7, #20]
 8005d70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d74:	6a39      	ldr	r1, [r7, #32]
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 fa46 	bl	8006208 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00d      	beq.n	8005d9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d107      	bne.n	8005d9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e02b      	b.n	8005df6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d9e:	88fb      	ldrh	r3, [r7, #6]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d105      	bne.n	8005db0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005da4:	893b      	ldrh	r3, [r7, #8]
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	611a      	str	r2, [r3, #16]
 8005dae:	e021      	b.n	8005df4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005db0:	893b      	ldrh	r3, [r7, #8]
 8005db2:	0a1b      	lsrs	r3, r3, #8
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dc0:	6a39      	ldr	r1, [r7, #32]
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 fa20 	bl	8006208 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00d      	beq.n	8005dea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d107      	bne.n	8005de6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005de4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e005      	b.n	8005df6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dea:	893b      	ldrh	r3, [r7, #8]
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	00010002 	.word	0x00010002

08005e04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	4608      	mov	r0, r1
 8005e0e:	4611      	mov	r1, r2
 8005e10:	461a      	mov	r2, r3
 8005e12:	4603      	mov	r3, r0
 8005e14:	817b      	strh	r3, [r7, #10]
 8005e16:	460b      	mov	r3, r1
 8005e18:	813b      	strh	r3, [r7, #8]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e2c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 f8c2 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00d      	beq.n	8005e72 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e64:	d103      	bne.n	8005e6e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e0aa      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e72:	897b      	ldrh	r3, [r7, #10]
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	461a      	mov	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e84:	6a3a      	ldr	r2, [r7, #32]
 8005e86:	4952      	ldr	r1, [pc, #328]	@ (8005fd0 <I2C_RequestMemoryRead+0x1cc>)
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f91d 	bl	80060c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e097      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb0:	6a39      	ldr	r1, [r7, #32]
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 f9a8 	bl	8006208 <I2C_WaitOnTXEFlagUntilTimeout>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00d      	beq.n	8005eda <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d107      	bne.n	8005ed6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ed4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e076      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005eda:	88fb      	ldrh	r3, [r7, #6]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d105      	bne.n	8005eec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ee0:	893b      	ldrh	r3, [r7, #8]
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	611a      	str	r2, [r3, #16]
 8005eea:	e021      	b.n	8005f30 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005eec:	893b      	ldrh	r3, [r7, #8]
 8005eee:	0a1b      	lsrs	r3, r3, #8
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005efc:	6a39      	ldr	r1, [r7, #32]
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 f982 	bl	8006208 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00d      	beq.n	8005f26 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	d107      	bne.n	8005f22 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e050      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f26:	893b      	ldrh	r3, [r7, #8]
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f32:	6a39      	ldr	r1, [r7, #32]
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 f967 	bl	8006208 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00d      	beq.n	8005f5c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	d107      	bne.n	8005f58 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e035      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f6a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 f82b 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00d      	beq.n	8005fa0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f92:	d103      	bne.n	8005f9c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e013      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005fa0:	897b      	ldrh	r3, [r7, #10]
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	f043 0301 	orr.w	r3, r3, #1
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	6a3a      	ldr	r2, [r7, #32]
 8005fb4:	4906      	ldr	r1, [pc, #24]	@ (8005fd0 <I2C_RequestMemoryRead+0x1cc>)
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 f886 	bl	80060c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	00010002 	.word	0x00010002

08005fd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	603b      	str	r3, [r7, #0]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fe4:	e048      	b.n	8006078 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fec:	d044      	beq.n	8006078 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fee:	f7fe fd79 	bl	8004ae4 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d302      	bcc.n	8006004 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d139      	bne.n	8006078 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	0c1b      	lsrs	r3, r3, #16
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b01      	cmp	r3, #1
 800600c:	d10d      	bne.n	800602a <I2C_WaitOnFlagUntilTimeout+0x56>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	43da      	mvns	r2, r3
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	4013      	ands	r3, r2
 800601a:	b29b      	uxth	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	bf0c      	ite	eq
 8006020:	2301      	moveq	r3, #1
 8006022:	2300      	movne	r3, #0
 8006024:	b2db      	uxtb	r3, r3
 8006026:	461a      	mov	r2, r3
 8006028:	e00c      	b.n	8006044 <I2C_WaitOnFlagUntilTimeout+0x70>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	43da      	mvns	r2, r3
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	4013      	ands	r3, r2
 8006036:	b29b      	uxth	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	bf0c      	ite	eq
 800603c:	2301      	moveq	r3, #1
 800603e:	2300      	movne	r3, #0
 8006040:	b2db      	uxtb	r3, r3
 8006042:	461a      	mov	r2, r3
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	429a      	cmp	r2, r3
 8006048:	d116      	bne.n	8006078 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006064:	f043 0220 	orr.w	r2, r3, #32
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e023      	b.n	80060c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	0c1b      	lsrs	r3, r3, #16
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b01      	cmp	r3, #1
 8006080:	d10d      	bne.n	800609e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	43da      	mvns	r2, r3
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4013      	ands	r3, r2
 800608e:	b29b      	uxth	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	bf0c      	ite	eq
 8006094:	2301      	moveq	r3, #1
 8006096:	2300      	movne	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	461a      	mov	r2, r3
 800609c:	e00c      	b.n	80060b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	43da      	mvns	r2, r3
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	4013      	ands	r3, r2
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	bf0c      	ite	eq
 80060b0:	2301      	moveq	r3, #1
 80060b2:	2300      	movne	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	461a      	mov	r2, r3
 80060b8:	79fb      	ldrb	r3, [r7, #7]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d093      	beq.n	8005fe6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060d6:	e071      	b.n	80061bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060e6:	d123      	bne.n	8006130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006100:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2220      	movs	r2, #32
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611c:	f043 0204 	orr.w	r2, r3, #4
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e067      	b.n	8006200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006136:	d041      	beq.n	80061bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006138:	f7fe fcd4 	bl	8004ae4 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	429a      	cmp	r2, r3
 8006146:	d302      	bcc.n	800614e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d136      	bne.n	80061bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	0c1b      	lsrs	r3, r3, #16
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b01      	cmp	r3, #1
 8006156:	d10c      	bne.n	8006172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	43da      	mvns	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	4013      	ands	r3, r2
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	bf14      	ite	ne
 800616a:	2301      	movne	r3, #1
 800616c:	2300      	moveq	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	e00b      	b.n	800618a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	43da      	mvns	r2, r3
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	4013      	ands	r3, r2
 800617e:	b29b      	uxth	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	bf14      	ite	ne
 8006184:	2301      	movne	r3, #1
 8006186:	2300      	moveq	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d016      	beq.n	80061bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2220      	movs	r2, #32
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a8:	f043 0220 	orr.w	r2, r3, #32
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e021      	b.n	8006200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	0c1b      	lsrs	r3, r3, #16
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d10c      	bne.n	80061e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	43da      	mvns	r2, r3
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	4013      	ands	r3, r2
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	bf14      	ite	ne
 80061d8:	2301      	movne	r3, #1
 80061da:	2300      	moveq	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	e00b      	b.n	80061f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	43da      	mvns	r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4013      	ands	r3, r2
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	bf14      	ite	ne
 80061f2:	2301      	movne	r3, #1
 80061f4:	2300      	moveq	r3, #0
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f47f af6d 	bne.w	80060d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006214:	e034      	b.n	8006280 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 f8e3 	bl	80063e2 <I2C_IsAcknowledgeFailed>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e034      	b.n	8006290 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622c:	d028      	beq.n	8006280 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800622e:	f7fe fc59 	bl	8004ae4 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	429a      	cmp	r2, r3
 800623c:	d302      	bcc.n	8006244 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d11d      	bne.n	8006280 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800624e:	2b80      	cmp	r3, #128	@ 0x80
 8006250:	d016      	beq.n	8006280 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626c:	f043 0220 	orr.w	r2, r3, #32
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e007      	b.n	8006290 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800628a:	2b80      	cmp	r3, #128	@ 0x80
 800628c:	d1c3      	bne.n	8006216 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062a4:	e034      	b.n	8006310 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 f89b 	bl	80063e2 <I2C_IsAcknowledgeFailed>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e034      	b.n	8006320 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062bc:	d028      	beq.n	8006310 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062be:	f7fe fc11 	bl	8004ae4 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d302      	bcc.n	80062d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d11d      	bne.n	8006310 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d016      	beq.n	8006310 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fc:	f043 0220 	orr.w	r2, r3, #32
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e007      	b.n	8006320 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	f003 0304 	and.w	r3, r3, #4
 800631a:	2b04      	cmp	r3, #4
 800631c:	d1c3      	bne.n	80062a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006334:	e049      	b.n	80063ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	f003 0310 	and.w	r3, r3, #16
 8006340:	2b10      	cmp	r3, #16
 8006342:	d119      	bne.n	8006378 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f06f 0210 	mvn.w	r2, #16
 800634c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2220      	movs	r2, #32
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e030      	b.n	80063da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006378:	f7fe fbb4 	bl	8004ae4 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	429a      	cmp	r2, r3
 8006386:	d302      	bcc.n	800638e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d11d      	bne.n	80063ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006398:	2b40      	cmp	r3, #64	@ 0x40
 800639a:	d016      	beq.n	80063ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b6:	f043 0220 	orr.w	r2, r3, #32
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e007      	b.n	80063da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d4:	2b40      	cmp	r3, #64	@ 0x40
 80063d6:	d1ae      	bne.n	8006336 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063f8:	d11b      	bne.n	8006432 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006402:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2220      	movs	r2, #32
 800640e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641e:	f043 0204 	orr.w	r2, r3, #4
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e000      	b.n	8006434 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b20      	cmp	r3, #32
 8006454:	d129      	bne.n	80064aa <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2224      	movs	r2, #36	@ 0x24
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0201 	bic.w	r2, r2, #1
 800646c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0210 	bic.w	r2, r2, #16
 800647c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f042 0201 	orr.w	r2, r2, #1
 800649c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	e000      	b.n	80064ac <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80064aa:	2302      	movs	r3, #2
  }
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80064c2:	2300      	movs	r3, #0
 80064c4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b20      	cmp	r3, #32
 80064d0:	d12a      	bne.n	8006528 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2224      	movs	r2, #36	@ 0x24
 80064d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0201 	bic.w	r2, r2, #1
 80064e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80064f2:	89fb      	ldrh	r3, [r7, #14]
 80064f4:	f023 030f 	bic.w	r3, r3, #15
 80064f8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	89fb      	ldrh	r3, [r7, #14]
 8006500:	4313      	orrs	r3, r2
 8006502:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	89fa      	ldrh	r2, [r7, #14]
 800650a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 0201 	orr.w	r2, r2, #1
 800651a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2220      	movs	r2, #32
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	e000      	b.n	800652a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006528:	2302      	movs	r3, #2
  }
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
	...

08006538 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e0bf      	b.n	80066ca <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d106      	bne.n	8006564 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7fd fe7e 	bl	8004260 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	699a      	ldr	r2, [r3, #24]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800657a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6999      	ldr	r1, [r3, #24]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006590:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	430a      	orrs	r2, r1
 800659e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6899      	ldr	r1, [r3, #8]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	4b4a      	ldr	r3, [pc, #296]	@ (80066d4 <HAL_LTDC_Init+0x19c>)
 80065ac:	400b      	ands	r3, r1
 80065ae:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	041b      	lsls	r3, r3, #16
 80065b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6899      	ldr	r1, [r3, #8]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	431a      	orrs	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68d9      	ldr	r1, [r3, #12]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	4b3e      	ldr	r3, [pc, #248]	@ (80066d4 <HAL_LTDC_Init+0x19c>)
 80065da:	400b      	ands	r3, r1
 80065dc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	041b      	lsls	r3, r3, #16
 80065e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68d9      	ldr	r1, [r3, #12]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a1a      	ldr	r2, [r3, #32]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6919      	ldr	r1, [r3, #16]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	4b33      	ldr	r3, [pc, #204]	@ (80066d4 <HAL_LTDC_Init+0x19c>)
 8006608:	400b      	ands	r3, r1
 800660a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006610:	041b      	lsls	r3, r3, #16
 8006612:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6919      	ldr	r1, [r3, #16]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	431a      	orrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6959      	ldr	r1, [r3, #20]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	4b27      	ldr	r3, [pc, #156]	@ (80066d4 <HAL_LTDC_Init+0x19c>)
 8006636:	400b      	ands	r3, r1
 8006638:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663e:	041b      	lsls	r3, r3, #16
 8006640:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6959      	ldr	r1, [r3, #20]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800665e:	021b      	lsls	r3, r3, #8
 8006660:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006668:	041b      	lsls	r3, r3, #16
 800666a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800667a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800668e:	431a      	orrs	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	430a      	orrs	r2, r1
 8006696:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f042 0206 	orr.w	r2, r2, #6
 80066a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699a      	ldr	r2, [r3, #24]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0201 	orr.w	r2, r2, #1
 80066b6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	f000f800 	.word	0xf000f800

080066d8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80066d8:	b5b0      	push	{r4, r5, r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <HAL_LTDC_ConfigLayer+0x1a>
 80066ee:	2302      	movs	r3, #2
 80066f0:	e02c      	b.n	800674c <HAL_LTDC_ConfigLayer+0x74>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2202      	movs	r2, #2
 80066fe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2134      	movs	r1, #52	@ 0x34
 8006708:	fb01 f303 	mul.w	r3, r1, r3
 800670c:	4413      	add	r3, r2
 800670e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	4614      	mov	r4, r2
 8006716:	461d      	mov	r5, r3
 8006718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800671a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800671c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800671e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006724:	682b      	ldr	r3, [r5, #0]
 8006726:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 f811 	bl	8006754 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2201      	movs	r2, #1
 8006738:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bdb0      	pop	{r4, r5, r7, pc}

08006754 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006754:	b480      	push	{r7}
 8006756:	b089      	sub	sp, #36	@ 0x24
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	0c1b      	lsrs	r3, r3, #16
 800676c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006770:	4413      	add	r3, r2
 8006772:	041b      	lsls	r3, r3, #16
 8006774:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	01db      	lsls	r3, r3, #7
 8006780:	4413      	add	r3, r2
 8006782:	3384      	adds	r3, #132	@ 0x84
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	6812      	ldr	r2, [r2, #0]
 800678a:	4611      	mov	r1, r2
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	01d2      	lsls	r2, r2, #7
 8006790:	440a      	add	r2, r1
 8006792:	3284      	adds	r2, #132	@ 0x84
 8006794:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006798:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	0c1b      	lsrs	r3, r3, #16
 80067a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80067aa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80067ac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4619      	mov	r1, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	01db      	lsls	r3, r3, #7
 80067b8:	440b      	add	r3, r1
 80067ba:	3384      	adds	r3, #132	@ 0x84
 80067bc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80067c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	68da      	ldr	r2, [r3, #12]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067d2:	4413      	add	r3, r2
 80067d4:	041b      	lsls	r3, r3, #16
 80067d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	461a      	mov	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	01db      	lsls	r3, r3, #7
 80067e2:	4413      	add	r3, r2
 80067e4:	3384      	adds	r3, #132	@ 0x84
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	6812      	ldr	r2, [r2, #0]
 80067ec:	4611      	mov	r1, r2
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	01d2      	lsls	r2, r2, #7
 80067f2:	440a      	add	r2, r1
 80067f4:	3284      	adds	r2, #132	@ 0x84
 80067f6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80067fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800680a:	4413      	add	r3, r2
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4619      	mov	r1, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	01db      	lsls	r3, r3, #7
 8006818:	440b      	add	r3, r1
 800681a:	3384      	adds	r3, #132	@ 0x84
 800681c:	4619      	mov	r1, r3
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	4313      	orrs	r3, r2
 8006822:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	461a      	mov	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	01db      	lsls	r3, r3, #7
 800682e:	4413      	add	r3, r2
 8006830:	3384      	adds	r3, #132	@ 0x84
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	6812      	ldr	r2, [r2, #0]
 8006838:	4611      	mov	r1, r2
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	01d2      	lsls	r2, r2, #7
 800683e:	440a      	add	r2, r1
 8006840:	3284      	adds	r2, #132	@ 0x84
 8006842:	f023 0307 	bic.w	r3, r3, #7
 8006846:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	461a      	mov	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	01db      	lsls	r3, r3, #7
 8006852:	4413      	add	r3, r2
 8006854:	3384      	adds	r3, #132	@ 0x84
 8006856:	461a      	mov	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006864:	021b      	lsls	r3, r3, #8
 8006866:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800686e:	041b      	lsls	r3, r3, #16
 8006870:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	061b      	lsls	r3, r3, #24
 8006878:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	01db      	lsls	r3, r3, #7
 8006884:	4413      	add	r3, r2
 8006886:	3384      	adds	r3, #132	@ 0x84
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	01db      	lsls	r3, r3, #7
 8006894:	4413      	add	r3, r2
 8006896:	3384      	adds	r3, #132	@ 0x84
 8006898:	461a      	mov	r2, r3
 800689a:	2300      	movs	r3, #0
 800689c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80068a4:	461a      	mov	r2, r3
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	431a      	orrs	r2, r3
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	431a      	orrs	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4619      	mov	r1, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	01db      	lsls	r3, r3, #7
 80068b8:	440b      	add	r3, r1
 80068ba:	3384      	adds	r3, #132	@ 0x84
 80068bc:	4619      	mov	r1, r3
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	461a      	mov	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	01db      	lsls	r3, r3, #7
 80068ce:	4413      	add	r3, r2
 80068d0:	3384      	adds	r3, #132	@ 0x84
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	6812      	ldr	r2, [r2, #0]
 80068d8:	4611      	mov	r1, r2
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	01d2      	lsls	r2, r2, #7
 80068de:	440a      	add	r2, r1
 80068e0:	3284      	adds	r2, #132	@ 0x84
 80068e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80068e6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	461a      	mov	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	01db      	lsls	r3, r3, #7
 80068f2:	4413      	add	r3, r2
 80068f4:	3384      	adds	r3, #132	@ 0x84
 80068f6:	461a      	mov	r2, r3
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	01db      	lsls	r3, r3, #7
 8006908:	4413      	add	r3, r2
 800690a:	3384      	adds	r3, #132	@ 0x84
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	6812      	ldr	r2, [r2, #0]
 8006912:	4611      	mov	r1, r2
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	01d2      	lsls	r2, r2, #7
 8006918:	440a      	add	r2, r1
 800691a:	3284      	adds	r2, #132	@ 0x84
 800691c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006920:	f023 0307 	bic.w	r3, r3, #7
 8006924:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	69da      	ldr	r2, [r3, #28]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	68f9      	ldr	r1, [r7, #12]
 8006930:	6809      	ldr	r1, [r1, #0]
 8006932:	4608      	mov	r0, r1
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	01c9      	lsls	r1, r1, #7
 8006938:	4401      	add	r1, r0
 800693a:	3184      	adds	r1, #132	@ 0x84
 800693c:	4313      	orrs	r3, r2
 800693e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	461a      	mov	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	01db      	lsls	r3, r3, #7
 800694a:	4413      	add	r3, r2
 800694c:	3384      	adds	r3, #132	@ 0x84
 800694e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	461a      	mov	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	01db      	lsls	r3, r3, #7
 800695a:	4413      	add	r3, r2
 800695c:	3384      	adds	r3, #132	@ 0x84
 800695e:	461a      	mov	r2, r3
 8006960:	2300      	movs	r3, #0
 8006962:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	461a      	mov	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	01db      	lsls	r3, r3, #7
 800696e:	4413      	add	r3, r2
 8006970:	3384      	adds	r3, #132	@ 0x84
 8006972:	461a      	mov	r2, r3
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006978:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d102      	bne.n	8006988 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006982:	2304      	movs	r3, #4
 8006984:	61fb      	str	r3, [r7, #28]
 8006986:	e01b      	b.n	80069c0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d102      	bne.n	8006996 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006990:	2303      	movs	r3, #3
 8006992:	61fb      	str	r3, [r7, #28]
 8006994:	e014      	b.n	80069c0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	2b04      	cmp	r3, #4
 800699c:	d00b      	beq.n	80069b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d007      	beq.n	80069b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80069aa:	2b03      	cmp	r3, #3
 80069ac:	d003      	beq.n	80069b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80069b2:	2b07      	cmp	r3, #7
 80069b4:	d102      	bne.n	80069bc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80069b6:	2302      	movs	r3, #2
 80069b8:	61fb      	str	r3, [r7, #28]
 80069ba:	e001      	b.n	80069c0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80069bc:	2301      	movs	r3, #1
 80069be:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	461a      	mov	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	01db      	lsls	r3, r3, #7
 80069ca:	4413      	add	r3, r2
 80069cc:	3384      	adds	r3, #132	@ 0x84
 80069ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	6812      	ldr	r2, [r2, #0]
 80069d4:	4611      	mov	r1, r2
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	01d2      	lsls	r2, r2, #7
 80069da:	440a      	add	r2, r1
 80069dc:	3284      	adds	r2, #132	@ 0x84
 80069de:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80069e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e8:	69fa      	ldr	r2, [r7, #28]
 80069ea:	fb02 f303 	mul.w	r3, r2, r3
 80069ee:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	6859      	ldr	r1, [r3, #4]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	1acb      	subs	r3, r1, r3
 80069fa:	69f9      	ldr	r1, [r7, #28]
 80069fc:	fb01 f303 	mul.w	r3, r1, r3
 8006a00:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006a02:	68f9      	ldr	r1, [r7, #12]
 8006a04:	6809      	ldr	r1, [r1, #0]
 8006a06:	4608      	mov	r0, r1
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	01c9      	lsls	r1, r1, #7
 8006a0c:	4401      	add	r1, r0
 8006a0e:	3184      	adds	r1, #132	@ 0x84
 8006a10:	4313      	orrs	r3, r2
 8006a12:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	01db      	lsls	r3, r3, #7
 8006a1e:	4413      	add	r3, r2
 8006a20:	3384      	adds	r3, #132	@ 0x84
 8006a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	6812      	ldr	r2, [r2, #0]
 8006a28:	4611      	mov	r1, r2
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	01d2      	lsls	r2, r2, #7
 8006a2e:	440a      	add	r2, r1
 8006a30:	3284      	adds	r2, #132	@ 0x84
 8006a32:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006a36:	f023 0307 	bic.w	r3, r3, #7
 8006a3a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	461a      	mov	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	01db      	lsls	r3, r3, #7
 8006a46:	4413      	add	r3, r2
 8006a48:	3384      	adds	r3, #132	@ 0x84
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a50:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	01db      	lsls	r3, r3, #7
 8006a5c:	4413      	add	r3, r2
 8006a5e:	3384      	adds	r3, #132	@ 0x84
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	6812      	ldr	r2, [r2, #0]
 8006a66:	4611      	mov	r1, r2
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	01d2      	lsls	r2, r2, #7
 8006a6c:	440a      	add	r2, r1
 8006a6e:	3284      	adds	r2, #132	@ 0x84
 8006a70:	f043 0301 	orr.w	r3, r3, #1
 8006a74:	6013      	str	r3, [r2, #0]
}
 8006a76:	bf00      	nop
 8006a78:	3724      	adds	r7, #36	@ 0x24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
	...

08006a84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e267      	b.n	8006f66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d075      	beq.n	8006b8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006aa2:	4b88      	ldr	r3, [pc, #544]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 030c 	and.w	r3, r3, #12
 8006aaa:	2b04      	cmp	r3, #4
 8006aac:	d00c      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aae:	4b85      	ldr	r3, [pc, #532]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006ab6:	2b08      	cmp	r3, #8
 8006ab8:	d112      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aba:	4b82      	ldr	r3, [pc, #520]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ac2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ac6:	d10b      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ac8:	4b7e      	ldr	r3, [pc, #504]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d05b      	beq.n	8006b8c <HAL_RCC_OscConfig+0x108>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d157      	bne.n	8006b8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e242      	b.n	8006f66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ae8:	d106      	bne.n	8006af8 <HAL_RCC_OscConfig+0x74>
 8006aea:	4b76      	ldr	r3, [pc, #472]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a75      	ldr	r2, [pc, #468]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	e01d      	b.n	8006b34 <HAL_RCC_OscConfig+0xb0>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b00:	d10c      	bne.n	8006b1c <HAL_RCC_OscConfig+0x98>
 8006b02:	4b70      	ldr	r3, [pc, #448]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a6f      	ldr	r2, [pc, #444]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	4b6d      	ldr	r3, [pc, #436]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a6c      	ldr	r2, [pc, #432]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	e00b      	b.n	8006b34 <HAL_RCC_OscConfig+0xb0>
 8006b1c:	4b69      	ldr	r3, [pc, #420]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a68      	ldr	r2, [pc, #416]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	4b66      	ldr	r3, [pc, #408]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a65      	ldr	r2, [pc, #404]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006b2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d013      	beq.n	8006b64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b3c:	f7fd ffd2 	bl	8004ae4 <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b44:	f7fd ffce 	bl	8004ae4 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b64      	cmp	r3, #100	@ 0x64
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e207      	b.n	8006f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b56:	4b5b      	ldr	r3, [pc, #364]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0f0      	beq.n	8006b44 <HAL_RCC_OscConfig+0xc0>
 8006b62:	e014      	b.n	8006b8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b64:	f7fd ffbe 	bl	8004ae4 <HAL_GetTick>
 8006b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b6c:	f7fd ffba 	bl	8004ae4 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b64      	cmp	r3, #100	@ 0x64
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e1f3      	b.n	8006f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b7e:	4b51      	ldr	r3, [pc, #324]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1f0      	bne.n	8006b6c <HAL_RCC_OscConfig+0xe8>
 8006b8a:	e000      	b.n	8006b8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d063      	beq.n	8006c62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f003 030c 	and.w	r3, r3, #12
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00b      	beq.n	8006bbe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ba6:	4b47      	ldr	r3, [pc, #284]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006bae:	2b08      	cmp	r3, #8
 8006bb0:	d11c      	bne.n	8006bec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bb2:	4b44      	ldr	r3, [pc, #272]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d116      	bne.n	8006bec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bbe:	4b41      	ldr	r3, [pc, #260]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x152>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d001      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e1c7      	b.n	8006f66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	4937      	ldr	r1, [pc, #220]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bea:	e03a      	b.n	8006c62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d020      	beq.n	8006c36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bf4:	4b34      	ldr	r3, [pc, #208]	@ (8006cc8 <HAL_RCC_OscConfig+0x244>)
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bfa:	f7fd ff73 	bl	8004ae4 <HAL_GetTick>
 8006bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c00:	e008      	b.n	8006c14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c02:	f7fd ff6f 	bl	8004ae4 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d901      	bls.n	8006c14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e1a8      	b.n	8006f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c14:	4b2b      	ldr	r3, [pc, #172]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0f0      	beq.n	8006c02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c20:	4b28      	ldr	r3, [pc, #160]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	00db      	lsls	r3, r3, #3
 8006c2e:	4925      	ldr	r1, [pc, #148]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	600b      	str	r3, [r1, #0]
 8006c34:	e015      	b.n	8006c62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c36:	4b24      	ldr	r3, [pc, #144]	@ (8006cc8 <HAL_RCC_OscConfig+0x244>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3c:	f7fd ff52 	bl	8004ae4 <HAL_GetTick>
 8006c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c44:	f7fd ff4e 	bl	8004ae4 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e187      	b.n	8006f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c56:	4b1b      	ldr	r3, [pc, #108]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1f0      	bne.n	8006c44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0308 	and.w	r3, r3, #8
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d036      	beq.n	8006cdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d016      	beq.n	8006ca4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c76:	4b15      	ldr	r3, [pc, #84]	@ (8006ccc <HAL_RCC_OscConfig+0x248>)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c7c:	f7fd ff32 	bl	8004ae4 <HAL_GetTick>
 8006c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c82:	e008      	b.n	8006c96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c84:	f7fd ff2e 	bl	8004ae4 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d901      	bls.n	8006c96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e167      	b.n	8006f66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c96:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc4 <HAL_RCC_OscConfig+0x240>)
 8006c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0f0      	beq.n	8006c84 <HAL_RCC_OscConfig+0x200>
 8006ca2:	e01b      	b.n	8006cdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ca4:	4b09      	ldr	r3, [pc, #36]	@ (8006ccc <HAL_RCC_OscConfig+0x248>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006caa:	f7fd ff1b 	bl	8004ae4 <HAL_GetTick>
 8006cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cb0:	e00e      	b.n	8006cd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cb2:	f7fd ff17 	bl	8004ae4 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d907      	bls.n	8006cd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e150      	b.n	8006f66 <HAL_RCC_OscConfig+0x4e2>
 8006cc4:	40023800 	.word	0x40023800
 8006cc8:	42470000 	.word	0x42470000
 8006ccc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cd0:	4b88      	ldr	r3, [pc, #544]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1ea      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 8097 	beq.w	8006e18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cea:	2300      	movs	r3, #0
 8006cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cee:	4b81      	ldr	r3, [pc, #516]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10f      	bne.n	8006d1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60bb      	str	r3, [r7, #8]
 8006cfe:	4b7d      	ldr	r3, [pc, #500]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d02:	4a7c      	ldr	r2, [pc, #496]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d0a:	4b7a      	ldr	r3, [pc, #488]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d12:	60bb      	str	r3, [r7, #8]
 8006d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d16:	2301      	movs	r3, #1
 8006d18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d1a:	4b77      	ldr	r3, [pc, #476]	@ (8006ef8 <HAL_RCC_OscConfig+0x474>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d118      	bne.n	8006d58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d26:	4b74      	ldr	r3, [pc, #464]	@ (8006ef8 <HAL_RCC_OscConfig+0x474>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a73      	ldr	r2, [pc, #460]	@ (8006ef8 <HAL_RCC_OscConfig+0x474>)
 8006d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d32:	f7fd fed7 	bl	8004ae4 <HAL_GetTick>
 8006d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d38:	e008      	b.n	8006d4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d3a:	f7fd fed3 	bl	8004ae4 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d901      	bls.n	8006d4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e10c      	b.n	8006f66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8006ef8 <HAL_RCC_OscConfig+0x474>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0f0      	beq.n	8006d3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d106      	bne.n	8006d6e <HAL_RCC_OscConfig+0x2ea>
 8006d60:	4b64      	ldr	r3, [pc, #400]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d64:	4a63      	ldr	r2, [pc, #396]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006d66:	f043 0301 	orr.w	r3, r3, #1
 8006d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d6c:	e01c      	b.n	8006da8 <HAL_RCC_OscConfig+0x324>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b05      	cmp	r3, #5
 8006d74:	d10c      	bne.n	8006d90 <HAL_RCC_OscConfig+0x30c>
 8006d76:	4b5f      	ldr	r3, [pc, #380]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d7a:	4a5e      	ldr	r2, [pc, #376]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006d7c:	f043 0304 	orr.w	r3, r3, #4
 8006d80:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d82:	4b5c      	ldr	r3, [pc, #368]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d86:	4a5b      	ldr	r2, [pc, #364]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006d88:	f043 0301 	orr.w	r3, r3, #1
 8006d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d8e:	e00b      	b.n	8006da8 <HAL_RCC_OscConfig+0x324>
 8006d90:	4b58      	ldr	r3, [pc, #352]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d94:	4a57      	ldr	r2, [pc, #348]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006d96:	f023 0301 	bic.w	r3, r3, #1
 8006d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d9c:	4b55      	ldr	r3, [pc, #340]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da0:	4a54      	ldr	r2, [pc, #336]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006da2:	f023 0304 	bic.w	r3, r3, #4
 8006da6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d015      	beq.n	8006ddc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db0:	f7fd fe98 	bl	8004ae4 <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db6:	e00a      	b.n	8006dce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006db8:	f7fd fe94 	bl	8004ae4 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e0cb      	b.n	8006f66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dce:	4b49      	ldr	r3, [pc, #292]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d0ee      	beq.n	8006db8 <HAL_RCC_OscConfig+0x334>
 8006dda:	e014      	b.n	8006e06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ddc:	f7fd fe82 	bl	8004ae4 <HAL_GetTick>
 8006de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006de2:	e00a      	b.n	8006dfa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006de4:	f7fd fe7e 	bl	8004ae4 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e0b5      	b.n	8006f66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1ee      	bne.n	8006de4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d105      	bne.n	8006e18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e0c:	4b39      	ldr	r3, [pc, #228]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e10:	4a38      	ldr	r2, [pc, #224]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006e12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f000 80a1 	beq.w	8006f64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e22:	4b34      	ldr	r3, [pc, #208]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f003 030c 	and.w	r3, r3, #12
 8006e2a:	2b08      	cmp	r3, #8
 8006e2c:	d05c      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d141      	bne.n	8006eba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e36:	4b31      	ldr	r3, [pc, #196]	@ (8006efc <HAL_RCC_OscConfig+0x478>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e3c:	f7fd fe52 	bl	8004ae4 <HAL_GetTick>
 8006e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e42:	e008      	b.n	8006e56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e44:	f7fd fe4e 	bl	8004ae4 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e087      	b.n	8006f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e56:	4b27      	ldr	r3, [pc, #156]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1f0      	bne.n	8006e44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	69da      	ldr	r2, [r3, #28]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e70:	019b      	lsls	r3, r3, #6
 8006e72:	431a      	orrs	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e78:	085b      	lsrs	r3, r3, #1
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	041b      	lsls	r3, r3, #16
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e84:	061b      	lsls	r3, r3, #24
 8006e86:	491b      	ldr	r1, [pc, #108]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006efc <HAL_RCC_OscConfig+0x478>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e92:	f7fd fe27 	bl	8004ae4 <HAL_GetTick>
 8006e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e98:	e008      	b.n	8006eac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e9a:	f7fd fe23 	bl	8004ae4 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d901      	bls.n	8006eac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e05c      	b.n	8006f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eac:	4b11      	ldr	r3, [pc, #68]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0f0      	beq.n	8006e9a <HAL_RCC_OscConfig+0x416>
 8006eb8:	e054      	b.n	8006f64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eba:	4b10      	ldr	r3, [pc, #64]	@ (8006efc <HAL_RCC_OscConfig+0x478>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ec0:	f7fd fe10 	bl	8004ae4 <HAL_GetTick>
 8006ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ec6:	e008      	b.n	8006eda <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ec8:	f7fd fe0c 	bl	8004ae4 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e045      	b.n	8006f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eda:	4b06      	ldr	r3, [pc, #24]	@ (8006ef4 <HAL_RCC_OscConfig+0x470>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1f0      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x444>
 8006ee6:	e03d      	b.n	8006f64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d107      	bne.n	8006f00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e038      	b.n	8006f66 <HAL_RCC_OscConfig+0x4e2>
 8006ef4:	40023800 	.word	0x40023800
 8006ef8:	40007000 	.word	0x40007000
 8006efc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f00:	4b1b      	ldr	r3, [pc, #108]	@ (8006f70 <HAL_RCC_OscConfig+0x4ec>)
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d028      	beq.n	8006f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d121      	bne.n	8006f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d11a      	bne.n	8006f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006f30:	4013      	ands	r3, r2
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d111      	bne.n	8006f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f46:	085b      	lsrs	r3, r3, #1
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d107      	bne.n	8006f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d001      	beq.n	8006f64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e000      	b.n	8006f66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	40023800 	.word	0x40023800

08006f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e0cc      	b.n	8007122 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f88:	4b68      	ldr	r3, [pc, #416]	@ (800712c <HAL_RCC_ClockConfig+0x1b8>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 030f 	and.w	r3, r3, #15
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d90c      	bls.n	8006fb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f96:	4b65      	ldr	r3, [pc, #404]	@ (800712c <HAL_RCC_ClockConfig+0x1b8>)
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f9e:	4b63      	ldr	r3, [pc, #396]	@ (800712c <HAL_RCC_ClockConfig+0x1b8>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d001      	beq.n	8006fb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e0b8      	b.n	8007122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0302 	and.w	r3, r3, #2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d020      	beq.n	8006ffe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0304 	and.w	r3, r3, #4
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d005      	beq.n	8006fd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fc8:	4b59      	ldr	r3, [pc, #356]	@ (8007130 <HAL_RCC_ClockConfig+0x1bc>)
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	4a58      	ldr	r2, [pc, #352]	@ (8007130 <HAL_RCC_ClockConfig+0x1bc>)
 8006fce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006fd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0308 	and.w	r3, r3, #8
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d005      	beq.n	8006fec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fe0:	4b53      	ldr	r3, [pc, #332]	@ (8007130 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	4a52      	ldr	r2, [pc, #328]	@ (8007130 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006fea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fec:	4b50      	ldr	r3, [pc, #320]	@ (8007130 <HAL_RCC_ClockConfig+0x1bc>)
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	494d      	ldr	r1, [pc, #308]	@ (8007130 <HAL_RCC_ClockConfig+0x1bc>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	d044      	beq.n	8007094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d107      	bne.n	8007022 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007012:	4b47      	ldr	r3, [pc, #284]	@ (8007130 <HAL_RCC_ClockConfig+0x1bc>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d119      	bne.n	8007052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e07f      	b.n	8007122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2b02      	cmp	r3, #2
 8007028:	d003      	beq.n	8007032 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800702e:	2b03      	cmp	r3, #3
 8007030:	d107      	bne.n	8007042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007032:	4b3f      	ldr	r3, [pc, #252]	@ (8007130 <HAL_RCC_ClockConfig+0x1bc>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d109      	bne.n	8007052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e06f      	b.n	8007122 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007042:	4b3b      	ldr	r3, [pc, #236]	@ (8007130 <HAL_RCC_ClockConfig+0x1bc>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e067      	b.n	8007122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007052:	4b37      	ldr	r3, [pc, #220]	@ (8007130 <HAL_RCC_ClockConfig+0x1bc>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f023 0203 	bic.w	r2, r3, #3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	4934      	ldr	r1, [pc, #208]	@ (8007130 <HAL_RCC_ClockConfig+0x1bc>)
 8007060:	4313      	orrs	r3, r2
 8007062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007064:	f7fd fd3e 	bl	8004ae4 <HAL_GetTick>
 8007068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800706a:	e00a      	b.n	8007082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800706c:	f7fd fd3a 	bl	8004ae4 <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800707a:	4293      	cmp	r3, r2
 800707c:	d901      	bls.n	8007082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e04f      	b.n	8007122 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007082:	4b2b      	ldr	r3, [pc, #172]	@ (8007130 <HAL_RCC_ClockConfig+0x1bc>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 020c 	and.w	r2, r3, #12
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	429a      	cmp	r2, r3
 8007092:	d1eb      	bne.n	800706c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007094:	4b25      	ldr	r3, [pc, #148]	@ (800712c <HAL_RCC_ClockConfig+0x1b8>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 030f 	and.w	r3, r3, #15
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d20c      	bcs.n	80070bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070a2:	4b22      	ldr	r3, [pc, #136]	@ (800712c <HAL_RCC_ClockConfig+0x1b8>)
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	b2d2      	uxtb	r2, r2
 80070a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070aa:	4b20      	ldr	r3, [pc, #128]	@ (800712c <HAL_RCC_ClockConfig+0x1b8>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d001      	beq.n	80070bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e032      	b.n	8007122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d008      	beq.n	80070da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070c8:	4b19      	ldr	r3, [pc, #100]	@ (8007130 <HAL_RCC_ClockConfig+0x1bc>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	4916      	ldr	r1, [pc, #88]	@ (8007130 <HAL_RCC_ClockConfig+0x1bc>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0308 	and.w	r3, r3, #8
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d009      	beq.n	80070fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070e6:	4b12      	ldr	r3, [pc, #72]	@ (8007130 <HAL_RCC_ClockConfig+0x1bc>)
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	490e      	ldr	r1, [pc, #56]	@ (8007130 <HAL_RCC_ClockConfig+0x1bc>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80070fa:	f000 f821 	bl	8007140 <HAL_RCC_GetSysClockFreq>
 80070fe:	4602      	mov	r2, r0
 8007100:	4b0b      	ldr	r3, [pc, #44]	@ (8007130 <HAL_RCC_ClockConfig+0x1bc>)
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	091b      	lsrs	r3, r3, #4
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	490a      	ldr	r1, [pc, #40]	@ (8007134 <HAL_RCC_ClockConfig+0x1c0>)
 800710c:	5ccb      	ldrb	r3, [r1, r3]
 800710e:	fa22 f303 	lsr.w	r3, r2, r3
 8007112:	4a09      	ldr	r2, [pc, #36]	@ (8007138 <HAL_RCC_ClockConfig+0x1c4>)
 8007114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007116:	4b09      	ldr	r3, [pc, #36]	@ (800713c <HAL_RCC_ClockConfig+0x1c8>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4618      	mov	r0, r3
 800711c:	f7fd fc9e 	bl	8004a5c <HAL_InitTick>

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	40023c00 	.word	0x40023c00
 8007130:	40023800 	.word	0x40023800
 8007134:	08009de4 	.word	0x08009de4
 8007138:	20000018 	.word	0x20000018
 800713c:	2000001c 	.word	0x2000001c

08007140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007144:	b094      	sub	sp, #80	@ 0x50
 8007146:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007148:	2300      	movs	r3, #0
 800714a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007150:	2300      	movs	r3, #0
 8007152:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007154:	2300      	movs	r3, #0
 8007156:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007158:	4b79      	ldr	r3, [pc, #484]	@ (8007340 <HAL_RCC_GetSysClockFreq+0x200>)
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f003 030c 	and.w	r3, r3, #12
 8007160:	2b08      	cmp	r3, #8
 8007162:	d00d      	beq.n	8007180 <HAL_RCC_GetSysClockFreq+0x40>
 8007164:	2b08      	cmp	r3, #8
 8007166:	f200 80e1 	bhi.w	800732c <HAL_RCC_GetSysClockFreq+0x1ec>
 800716a:	2b00      	cmp	r3, #0
 800716c:	d002      	beq.n	8007174 <HAL_RCC_GetSysClockFreq+0x34>
 800716e:	2b04      	cmp	r3, #4
 8007170:	d003      	beq.n	800717a <HAL_RCC_GetSysClockFreq+0x3a>
 8007172:	e0db      	b.n	800732c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007174:	4b73      	ldr	r3, [pc, #460]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x204>)
 8007176:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007178:	e0db      	b.n	8007332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800717a:	4b73      	ldr	r3, [pc, #460]	@ (8007348 <HAL_RCC_GetSysClockFreq+0x208>)
 800717c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800717e:	e0d8      	b.n	8007332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007180:	4b6f      	ldr	r3, [pc, #444]	@ (8007340 <HAL_RCC_GetSysClockFreq+0x200>)
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007188:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800718a:	4b6d      	ldr	r3, [pc, #436]	@ (8007340 <HAL_RCC_GetSysClockFreq+0x200>)
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d063      	beq.n	800725e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007196:	4b6a      	ldr	r3, [pc, #424]	@ (8007340 <HAL_RCC_GetSysClockFreq+0x200>)
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	099b      	lsrs	r3, r3, #6
 800719c:	2200      	movs	r2, #0
 800719e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80071a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80071aa:	2300      	movs	r3, #0
 80071ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80071b2:	4622      	mov	r2, r4
 80071b4:	462b      	mov	r3, r5
 80071b6:	f04f 0000 	mov.w	r0, #0
 80071ba:	f04f 0100 	mov.w	r1, #0
 80071be:	0159      	lsls	r1, r3, #5
 80071c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071c4:	0150      	lsls	r0, r2, #5
 80071c6:	4602      	mov	r2, r0
 80071c8:	460b      	mov	r3, r1
 80071ca:	4621      	mov	r1, r4
 80071cc:	1a51      	subs	r1, r2, r1
 80071ce:	6139      	str	r1, [r7, #16]
 80071d0:	4629      	mov	r1, r5
 80071d2:	eb63 0301 	sbc.w	r3, r3, r1
 80071d6:	617b      	str	r3, [r7, #20]
 80071d8:	f04f 0200 	mov.w	r2, #0
 80071dc:	f04f 0300 	mov.w	r3, #0
 80071e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071e4:	4659      	mov	r1, fp
 80071e6:	018b      	lsls	r3, r1, #6
 80071e8:	4651      	mov	r1, sl
 80071ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071ee:	4651      	mov	r1, sl
 80071f0:	018a      	lsls	r2, r1, #6
 80071f2:	4651      	mov	r1, sl
 80071f4:	ebb2 0801 	subs.w	r8, r2, r1
 80071f8:	4659      	mov	r1, fp
 80071fa:	eb63 0901 	sbc.w	r9, r3, r1
 80071fe:	f04f 0200 	mov.w	r2, #0
 8007202:	f04f 0300 	mov.w	r3, #0
 8007206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800720a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800720e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007212:	4690      	mov	r8, r2
 8007214:	4699      	mov	r9, r3
 8007216:	4623      	mov	r3, r4
 8007218:	eb18 0303 	adds.w	r3, r8, r3
 800721c:	60bb      	str	r3, [r7, #8]
 800721e:	462b      	mov	r3, r5
 8007220:	eb49 0303 	adc.w	r3, r9, r3
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	f04f 0200 	mov.w	r2, #0
 800722a:	f04f 0300 	mov.w	r3, #0
 800722e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007232:	4629      	mov	r1, r5
 8007234:	024b      	lsls	r3, r1, #9
 8007236:	4621      	mov	r1, r4
 8007238:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800723c:	4621      	mov	r1, r4
 800723e:	024a      	lsls	r2, r1, #9
 8007240:	4610      	mov	r0, r2
 8007242:	4619      	mov	r1, r3
 8007244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007246:	2200      	movs	r2, #0
 8007248:	62bb      	str	r3, [r7, #40]	@ 0x28
 800724a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800724c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007250:	f7f8 ffcc 	bl	80001ec <__aeabi_uldivmod>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4613      	mov	r3, r2
 800725a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800725c:	e058      	b.n	8007310 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800725e:	4b38      	ldr	r3, [pc, #224]	@ (8007340 <HAL_RCC_GetSysClockFreq+0x200>)
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	099b      	lsrs	r3, r3, #6
 8007264:	2200      	movs	r2, #0
 8007266:	4618      	mov	r0, r3
 8007268:	4611      	mov	r1, r2
 800726a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800726e:	623b      	str	r3, [r7, #32]
 8007270:	2300      	movs	r3, #0
 8007272:	627b      	str	r3, [r7, #36]	@ 0x24
 8007274:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007278:	4642      	mov	r2, r8
 800727a:	464b      	mov	r3, r9
 800727c:	f04f 0000 	mov.w	r0, #0
 8007280:	f04f 0100 	mov.w	r1, #0
 8007284:	0159      	lsls	r1, r3, #5
 8007286:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800728a:	0150      	lsls	r0, r2, #5
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	4641      	mov	r1, r8
 8007292:	ebb2 0a01 	subs.w	sl, r2, r1
 8007296:	4649      	mov	r1, r9
 8007298:	eb63 0b01 	sbc.w	fp, r3, r1
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	f04f 0300 	mov.w	r3, #0
 80072a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80072a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80072ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80072b0:	ebb2 040a 	subs.w	r4, r2, sl
 80072b4:	eb63 050b 	sbc.w	r5, r3, fp
 80072b8:	f04f 0200 	mov.w	r2, #0
 80072bc:	f04f 0300 	mov.w	r3, #0
 80072c0:	00eb      	lsls	r3, r5, #3
 80072c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072c6:	00e2      	lsls	r2, r4, #3
 80072c8:	4614      	mov	r4, r2
 80072ca:	461d      	mov	r5, r3
 80072cc:	4643      	mov	r3, r8
 80072ce:	18e3      	adds	r3, r4, r3
 80072d0:	603b      	str	r3, [r7, #0]
 80072d2:	464b      	mov	r3, r9
 80072d4:	eb45 0303 	adc.w	r3, r5, r3
 80072d8:	607b      	str	r3, [r7, #4]
 80072da:	f04f 0200 	mov.w	r2, #0
 80072de:	f04f 0300 	mov.w	r3, #0
 80072e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072e6:	4629      	mov	r1, r5
 80072e8:	028b      	lsls	r3, r1, #10
 80072ea:	4621      	mov	r1, r4
 80072ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072f0:	4621      	mov	r1, r4
 80072f2:	028a      	lsls	r2, r1, #10
 80072f4:	4610      	mov	r0, r2
 80072f6:	4619      	mov	r1, r3
 80072f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072fa:	2200      	movs	r2, #0
 80072fc:	61bb      	str	r3, [r7, #24]
 80072fe:	61fa      	str	r2, [r7, #28]
 8007300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007304:	f7f8 ff72 	bl	80001ec <__aeabi_uldivmod>
 8007308:	4602      	mov	r2, r0
 800730a:	460b      	mov	r3, r1
 800730c:	4613      	mov	r3, r2
 800730e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007310:	4b0b      	ldr	r3, [pc, #44]	@ (8007340 <HAL_RCC_GetSysClockFreq+0x200>)
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	0c1b      	lsrs	r3, r3, #16
 8007316:	f003 0303 	and.w	r3, r3, #3
 800731a:	3301      	adds	r3, #1
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007320:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007324:	fbb2 f3f3 	udiv	r3, r2, r3
 8007328:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800732a:	e002      	b.n	8007332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800732c:	4b05      	ldr	r3, [pc, #20]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x204>)
 800732e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007334:	4618      	mov	r0, r3
 8007336:	3750      	adds	r7, #80	@ 0x50
 8007338:	46bd      	mov	sp, r7
 800733a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800733e:	bf00      	nop
 8007340:	40023800 	.word	0x40023800
 8007344:	00f42400 	.word	0x00f42400
 8007348:	007a1200 	.word	0x007a1200

0800734c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007350:	4b03      	ldr	r3, [pc, #12]	@ (8007360 <HAL_RCC_GetHCLKFreq+0x14>)
 8007352:	681b      	ldr	r3, [r3, #0]
}
 8007354:	4618      	mov	r0, r3
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	20000018 	.word	0x20000018

08007364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007368:	f7ff fff0 	bl	800734c <HAL_RCC_GetHCLKFreq>
 800736c:	4602      	mov	r2, r0
 800736e:	4b05      	ldr	r3, [pc, #20]	@ (8007384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	0a9b      	lsrs	r3, r3, #10
 8007374:	f003 0307 	and.w	r3, r3, #7
 8007378:	4903      	ldr	r1, [pc, #12]	@ (8007388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800737a:	5ccb      	ldrb	r3, [r1, r3]
 800737c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007380:	4618      	mov	r0, r3
 8007382:	bd80      	pop	{r7, pc}
 8007384:	40023800 	.word	0x40023800
 8007388:	08009df4 	.word	0x08009df4

0800738c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007398:	2300      	movs	r3, #0
 800739a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10b      	bne.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d105      	bne.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d075      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073c0:	4b91      	ldr	r3, [pc, #580]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073c6:	f7fd fb8d 	bl	8004ae4 <HAL_GetTick>
 80073ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073cc:	e008      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80073ce:	f7fd fb89 	bl	8004ae4 <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d901      	bls.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e189      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073e0:	4b8a      	ldr	r3, [pc, #552]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1f0      	bne.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d009      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	019a      	lsls	r2, r3, #6
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	071b      	lsls	r3, r3, #28
 8007404:	4981      	ldr	r1, [pc, #516]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007406:	4313      	orrs	r3, r2
 8007408:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01f      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007418:	4b7c      	ldr	r3, [pc, #496]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800741a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800741e:	0f1b      	lsrs	r3, r3, #28
 8007420:	f003 0307 	and.w	r3, r3, #7
 8007424:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	019a      	lsls	r2, r3, #6
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	061b      	lsls	r3, r3, #24
 8007432:	431a      	orrs	r2, r3
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	071b      	lsls	r3, r3, #28
 8007438:	4974      	ldr	r1, [pc, #464]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800743a:	4313      	orrs	r3, r2
 800743c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007440:	4b72      	ldr	r3, [pc, #456]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007442:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007446:	f023 021f 	bic.w	r2, r3, #31
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	3b01      	subs	r3, #1
 8007450:	496e      	ldr	r1, [pc, #440]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007452:	4313      	orrs	r3, r2
 8007454:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00d      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	019a      	lsls	r2, r3, #6
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	061b      	lsls	r3, r3, #24
 8007470:	431a      	orrs	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	071b      	lsls	r3, r3, #28
 8007478:	4964      	ldr	r1, [pc, #400]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800747a:	4313      	orrs	r3, r2
 800747c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007480:	4b61      	ldr	r3, [pc, #388]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007482:	2201      	movs	r2, #1
 8007484:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007486:	f7fd fb2d 	bl	8004ae4 <HAL_GetTick>
 800748a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800748c:	e008      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800748e:	f7fd fb29 	bl	8004ae4 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d901      	bls.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e129      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074a0:	4b5a      	ldr	r3, [pc, #360]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d0f0      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0304 	and.w	r3, r3, #4
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d105      	bne.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d079      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80074c4:	4b52      	ldr	r3, [pc, #328]	@ (8007610 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074ca:	f7fd fb0b 	bl	8004ae4 <HAL_GetTick>
 80074ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074d0:	e008      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80074d2:	f7fd fb07 	bl	8004ae4 <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d901      	bls.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e107      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074e4:	4b49      	ldr	r3, [pc, #292]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074f0:	d0ef      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0304 	and.w	r3, r3, #4
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d020      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80074fe:	4b43      	ldr	r3, [pc, #268]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007504:	0f1b      	lsrs	r3, r3, #28
 8007506:	f003 0307 	and.w	r3, r3, #7
 800750a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	019a      	lsls	r2, r3, #6
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	061b      	lsls	r3, r3, #24
 8007518:	431a      	orrs	r2, r3
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	071b      	lsls	r3, r3, #28
 800751e:	493b      	ldr	r1, [pc, #236]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007520:	4313      	orrs	r3, r2
 8007522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007526:	4b39      	ldr	r3, [pc, #228]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007528:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800752c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a1b      	ldr	r3, [r3, #32]
 8007534:	3b01      	subs	r3, #1
 8007536:	021b      	lsls	r3, r3, #8
 8007538:	4934      	ldr	r1, [pc, #208]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800753a:	4313      	orrs	r3, r2
 800753c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0308 	and.w	r3, r3, #8
 8007548:	2b00      	cmp	r3, #0
 800754a:	d01e      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800754c:	4b2f      	ldr	r3, [pc, #188]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800754e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007552:	0e1b      	lsrs	r3, r3, #24
 8007554:	f003 030f 	and.w	r3, r3, #15
 8007558:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	019a      	lsls	r2, r3, #6
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	061b      	lsls	r3, r3, #24
 8007564:	431a      	orrs	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	071b      	lsls	r3, r3, #28
 800756c:	4927      	ldr	r1, [pc, #156]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800756e:	4313      	orrs	r3, r2
 8007570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007574:	4b25      	ldr	r3, [pc, #148]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007576:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800757a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007582:	4922      	ldr	r1, [pc, #136]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007584:	4313      	orrs	r3, r2
 8007586:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800758a:	4b21      	ldr	r3, [pc, #132]	@ (8007610 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800758c:	2201      	movs	r2, #1
 800758e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007590:	f7fd faa8 	bl	8004ae4 <HAL_GetTick>
 8007594:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007596:	e008      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007598:	f7fd faa4 	bl	8004ae4 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d901      	bls.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e0a4      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075aa:	4b18      	ldr	r3, [pc, #96]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075b6:	d1ef      	bne.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0320 	and.w	r3, r3, #32
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 808b 	beq.w	80076dc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80075c6:	2300      	movs	r3, #0
 80075c8:	60fb      	str	r3, [r7, #12]
 80075ca:	4b10      	ldr	r3, [pc, #64]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ce:	4a0f      	ldr	r2, [pc, #60]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80075d6:	4b0d      	ldr	r3, [pc, #52]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80075e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a0b      	ldr	r2, [pc, #44]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80075e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80075ee:	f7fd fa79 	bl	8004ae4 <HAL_GetTick>
 80075f2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80075f4:	e010      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075f6:	f7fd fa75 	bl	8004ae4 <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	2b02      	cmp	r3, #2
 8007602:	d909      	bls.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e075      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007608:	42470068 	.word	0x42470068
 800760c:	40023800 	.word	0x40023800
 8007610:	42470070 	.word	0x42470070
 8007614:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007618:	4b38      	ldr	r3, [pc, #224]	@ (80076fc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007620:	2b00      	cmp	r3, #0
 8007622:	d0e8      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007624:	4b36      	ldr	r3, [pc, #216]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007628:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800762c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d02f      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007638:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	429a      	cmp	r2, r3
 8007640:	d028      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007642:	4b2f      	ldr	r3, [pc, #188]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007646:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800764a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800764c:	4b2d      	ldr	r3, [pc, #180]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800764e:	2201      	movs	r2, #1
 8007650:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007652:	4b2c      	ldr	r3, [pc, #176]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007658:	4a29      	ldr	r2, [pc, #164]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800765e:	4b28      	ldr	r3, [pc, #160]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b01      	cmp	r3, #1
 8007668:	d114      	bne.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800766a:	f7fd fa3b 	bl	8004ae4 <HAL_GetTick>
 800766e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007670:	e00a      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007672:	f7fd fa37 	bl	8004ae4 <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007680:	4293      	cmp	r3, r2
 8007682:	d901      	bls.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e035      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007688:	4b1d      	ldr	r3, [pc, #116]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800768a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800768c:	f003 0302 	and.w	r3, r3, #2
 8007690:	2b00      	cmp	r3, #0
 8007692:	d0ee      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007698:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800769c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076a0:	d10d      	bne.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x332>
 80076a2:	4b17      	ldr	r3, [pc, #92]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80076b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076b6:	4912      	ldr	r1, [pc, #72]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	608b      	str	r3, [r1, #8]
 80076bc:	e005      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80076be:	4b10      	ldr	r3, [pc, #64]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	4a0f      	ldr	r2, [pc, #60]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076c4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80076c8:	6093      	str	r3, [r2, #8]
 80076ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076d6:	490a      	ldr	r1, [pc, #40]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0310 	and.w	r3, r3, #16
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d004      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80076ee:	4b06      	ldr	r3, [pc, #24]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80076f0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	40007000 	.word	0x40007000
 8007700:	40023800 	.word	0x40023800
 8007704:	42470e40 	.word	0x42470e40
 8007708:	424711e0 	.word	0x424711e0

0800770c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d101      	bne.n	800771e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e01c      	b.n	8007758 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	795b      	ldrb	r3, [r3, #5]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	d105      	bne.n	8007734 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7fc febe 	bl	80044b0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2202      	movs	r2, #2
 8007738:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f042 0204 	orr.w	r2, r2, #4
 8007748:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	791b      	ldrb	r3, [r3, #4]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d101      	bne.n	800777a <HAL_RNG_GenerateRandomNumber+0x1a>
 8007776:	2302      	movs	r3, #2
 8007778:	e044      	b.n	8007804 <HAL_RNG_GenerateRandomNumber+0xa4>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	795b      	ldrb	r3, [r3, #5]
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b01      	cmp	r3, #1
 8007788:	d133      	bne.n	80077f2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2202      	movs	r2, #2
 800778e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007790:	f7fd f9a8 	bl	8004ae4 <HAL_GetTick>
 8007794:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007796:	e018      	b.n	80077ca <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007798:	f7fd f9a4 	bl	8004ae4 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d911      	bls.n	80077ca <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f003 0301 	and.w	r3, r3, #1
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d00a      	beq.n	80077ca <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2202      	movs	r2, #2
 80077be:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e01c      	b.n	8007804 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d1df      	bne.n	8007798 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689a      	ldr	r2, [r3, #8]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	715a      	strb	r2, [r3, #5]
 80077f0:	e004      	b.n	80077fc <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2204      	movs	r2, #4
 80077f6:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	711a      	strb	r2, [r3, #4]

  return status;
 8007802:	7bfb      	ldrb	r3, [r7, #15]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e07b      	b.n	8007916 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007822:	2b00      	cmp	r3, #0
 8007824:	d108      	bne.n	8007838 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800782e:	d009      	beq.n	8007844 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	61da      	str	r2, [r3, #28]
 8007836:	e005      	b.n	8007844 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d106      	bne.n	8007864 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7fc fe48 	bl	80044f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800787a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	431a      	orrs	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	431a      	orrs	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078b4:	431a      	orrs	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078be:	431a      	orrs	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a1b      	ldr	r3, [r3, #32]
 80078c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078c8:	ea42 0103 	orr.w	r1, r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	0c1b      	lsrs	r3, r3, #16
 80078e2:	f003 0104 	and.w	r1, r3, #4
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ea:	f003 0210 	and.w	r2, r3, #16
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	430a      	orrs	r2, r1
 80078f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69da      	ldr	r2, [r3, #28]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007904:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b082      	sub	sp, #8
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e01a      	b.n	8007966 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007946:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7fc fe1b 	bl	8004584 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b088      	sub	sp, #32
 8007972:	af00      	add	r7, sp, #0
 8007974:	60f8      	str	r0, [r7, #12]
 8007976:	60b9      	str	r1, [r7, #8]
 8007978:	603b      	str	r3, [r7, #0]
 800797a:	4613      	mov	r3, r2
 800797c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800797e:	f7fd f8b1 	bl	8004ae4 <HAL_GetTick>
 8007982:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007984:	88fb      	ldrh	r3, [r7, #6]
 8007986:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b01      	cmp	r3, #1
 8007992:	d001      	beq.n	8007998 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007994:	2302      	movs	r3, #2
 8007996:	e12a      	b.n	8007bee <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <HAL_SPI_Transmit+0x36>
 800799e:	88fb      	ldrh	r3, [r7, #6]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e122      	b.n	8007bee <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <HAL_SPI_Transmit+0x48>
 80079b2:	2302      	movs	r3, #2
 80079b4:	e11b      	b.n	8007bee <HAL_SPI_Transmit+0x280>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2203      	movs	r2, #3
 80079c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	88fa      	ldrh	r2, [r7, #6]
 80079d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	88fa      	ldrh	r2, [r7, #6]
 80079dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a04:	d10f      	bne.n	8007a26 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a30:	2b40      	cmp	r3, #64	@ 0x40
 8007a32:	d007      	beq.n	8007a44 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a4c:	d152      	bne.n	8007af4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <HAL_SPI_Transmit+0xee>
 8007a56:	8b7b      	ldrh	r3, [r7, #26]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d145      	bne.n	8007ae8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a60:	881a      	ldrh	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a6c:	1c9a      	adds	r2, r3, #2
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a80:	e032      	b.n	8007ae8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d112      	bne.n	8007ab6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a94:	881a      	ldrh	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aa0:	1c9a      	adds	r2, r3, #2
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	3b01      	subs	r3, #1
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007ab4:	e018      	b.n	8007ae8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ab6:	f7fd f815 	bl	8004ae4 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d803      	bhi.n	8007ace <HAL_SPI_Transmit+0x160>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007acc:	d102      	bne.n	8007ad4 <HAL_SPI_Transmit+0x166>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d109      	bne.n	8007ae8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e082      	b.n	8007bee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1c7      	bne.n	8007a82 <HAL_SPI_Transmit+0x114>
 8007af2:	e053      	b.n	8007b9c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <HAL_SPI_Transmit+0x194>
 8007afc:	8b7b      	ldrh	r3, [r7, #26]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d147      	bne.n	8007b92 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	330c      	adds	r3, #12
 8007b0c:	7812      	ldrb	r2, [r2, #0]
 8007b0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	3b01      	subs	r3, #1
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007b28:	e033      	b.n	8007b92 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f003 0302 	and.w	r3, r3, #2
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d113      	bne.n	8007b60 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	330c      	adds	r3, #12
 8007b42:	7812      	ldrb	r2, [r2, #0]
 8007b44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	3b01      	subs	r3, #1
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007b5e:	e018      	b.n	8007b92 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b60:	f7fc ffc0 	bl	8004ae4 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d803      	bhi.n	8007b78 <HAL_SPI_Transmit+0x20a>
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b76:	d102      	bne.n	8007b7e <HAL_SPI_Transmit+0x210>
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d109      	bne.n	8007b92 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e02d      	b.n	8007bee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1c6      	bne.n	8007b2a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b9c:	69fa      	ldr	r2, [r7, #28]
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 f8bf 	bl	8007d24 <SPI_EndRxTxTransaction>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d002      	beq.n	8007bb2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10a      	bne.n	8007bd0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bba:	2300      	movs	r3, #0
 8007bbc:	617b      	str	r3, [r7, #20]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	617b      	str	r3, [r7, #20]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	617b      	str	r3, [r7, #20]
 8007bce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e000      	b.n	8007bee <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007bec:	2300      	movs	r3, #0
  }
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3720      	adds	r7, #32
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c04:	b2db      	uxtb	r3, r3
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
	...

08007c14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b088      	sub	sp, #32
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	603b      	str	r3, [r7, #0]
 8007c20:	4613      	mov	r3, r2
 8007c22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c24:	f7fc ff5e 	bl	8004ae4 <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2c:	1a9b      	subs	r3, r3, r2
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	4413      	add	r3, r2
 8007c32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c34:	f7fc ff56 	bl	8004ae4 <HAL_GetTick>
 8007c38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c3a:	4b39      	ldr	r3, [pc, #228]	@ (8007d20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	015b      	lsls	r3, r3, #5
 8007c40:	0d1b      	lsrs	r3, r3, #20
 8007c42:	69fa      	ldr	r2, [r7, #28]
 8007c44:	fb02 f303 	mul.w	r3, r2, r3
 8007c48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c4a:	e054      	b.n	8007cf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c52:	d050      	beq.n	8007cf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c54:	f7fc ff46 	bl	8004ae4 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	69fa      	ldr	r2, [r7, #28]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d902      	bls.n	8007c6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d13d      	bne.n	8007ce6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c82:	d111      	bne.n	8007ca8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c8c:	d004      	beq.n	8007c98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c96:	d107      	bne.n	8007ca8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ca6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cb0:	d10f      	bne.n	8007cd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007cd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e017      	b.n	8007d16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	4013      	ands	r3, r2
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	bf0c      	ite	eq
 8007d06:	2301      	moveq	r3, #1
 8007d08:	2300      	movne	r3, #0
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d19b      	bne.n	8007c4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3720      	adds	r7, #32
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	20000018 	.word	0x20000018

08007d24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b088      	sub	sp, #32
 8007d28:	af02      	add	r7, sp, #8
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2201      	movs	r2, #1
 8007d38:	2102      	movs	r1, #2
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f7ff ff6a 	bl	8007c14 <SPI_WaitFlagStateUntilTimeout>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d007      	beq.n	8007d56 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d4a:	f043 0220 	orr.w	r2, r3, #32
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e032      	b.n	8007dbc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d56:	4b1b      	ldr	r3, [pc, #108]	@ (8007dc4 <SPI_EndRxTxTransaction+0xa0>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8007dc8 <SPI_EndRxTxTransaction+0xa4>)
 8007d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d60:	0d5b      	lsrs	r3, r3, #21
 8007d62:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007d66:	fb02 f303 	mul.w	r3, r2, r3
 8007d6a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d74:	d112      	bne.n	8007d9c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2180      	movs	r1, #128	@ 0x80
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f7ff ff47 	bl	8007c14 <SPI_WaitFlagStateUntilTimeout>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d016      	beq.n	8007dba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d90:	f043 0220 	orr.w	r2, r3, #32
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e00f      	b.n	8007dbc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00a      	beq.n	8007db8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	3b01      	subs	r3, #1
 8007da6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007db2:	2b80      	cmp	r3, #128	@ 0x80
 8007db4:	d0f2      	beq.n	8007d9c <SPI_EndRxTxTransaction+0x78>
 8007db6:	e000      	b.n	8007dba <SPI_EndRxTxTransaction+0x96>
        break;
 8007db8:	bf00      	nop
  }

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3718      	adds	r7, #24
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	20000018 	.word	0x20000018
 8007dc8:	165e9f81 	.word	0x165e9f81

08007dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d101      	bne.n	8007dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e041      	b.n	8007e62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d106      	bne.n	8007df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7fc fbe4 	bl	80045c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3304      	adds	r3, #4
 8007e08:	4619      	mov	r1, r3
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	f000 f89e 	bl	8007f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
	...

08007e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d001      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e04e      	b.n	8007f22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68da      	ldr	r2, [r3, #12]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f042 0201 	orr.w	r2, r2, #1
 8007e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a23      	ldr	r2, [pc, #140]	@ (8007f30 <HAL_TIM_Base_Start_IT+0xc4>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d022      	beq.n	8007eec <HAL_TIM_Base_Start_IT+0x80>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eae:	d01d      	beq.n	8007eec <HAL_TIM_Base_Start_IT+0x80>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a1f      	ldr	r2, [pc, #124]	@ (8007f34 <HAL_TIM_Base_Start_IT+0xc8>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d018      	beq.n	8007eec <HAL_TIM_Base_Start_IT+0x80>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8007f38 <HAL_TIM_Base_Start_IT+0xcc>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d013      	beq.n	8007eec <HAL_TIM_Base_Start_IT+0x80>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a1c      	ldr	r2, [pc, #112]	@ (8007f3c <HAL_TIM_Base_Start_IT+0xd0>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d00e      	beq.n	8007eec <HAL_TIM_Base_Start_IT+0x80>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a1b      	ldr	r2, [pc, #108]	@ (8007f40 <HAL_TIM_Base_Start_IT+0xd4>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d009      	beq.n	8007eec <HAL_TIM_Base_Start_IT+0x80>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a19      	ldr	r2, [pc, #100]	@ (8007f44 <HAL_TIM_Base_Start_IT+0xd8>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d004      	beq.n	8007eec <HAL_TIM_Base_Start_IT+0x80>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a18      	ldr	r2, [pc, #96]	@ (8007f48 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d111      	bne.n	8007f10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f003 0307 	and.w	r3, r3, #7
 8007ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2b06      	cmp	r3, #6
 8007efc:	d010      	beq.n	8007f20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f042 0201 	orr.w	r2, r2, #1
 8007f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f0e:	e007      	b.n	8007f20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f042 0201 	orr.w	r2, r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	40010000 	.word	0x40010000
 8007f34:	40000400 	.word	0x40000400
 8007f38:	40000800 	.word	0x40000800
 8007f3c:	40000c00 	.word	0x40000c00
 8007f40:	40010400 	.word	0x40010400
 8007f44:	40014000 	.word	0x40014000
 8007f48:	40001800 	.word	0x40001800

08007f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a46      	ldr	r2, [pc, #280]	@ (8008078 <TIM_Base_SetConfig+0x12c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d013      	beq.n	8007f8c <TIM_Base_SetConfig+0x40>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f6a:	d00f      	beq.n	8007f8c <TIM_Base_SetConfig+0x40>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a43      	ldr	r2, [pc, #268]	@ (800807c <TIM_Base_SetConfig+0x130>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d00b      	beq.n	8007f8c <TIM_Base_SetConfig+0x40>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a42      	ldr	r2, [pc, #264]	@ (8008080 <TIM_Base_SetConfig+0x134>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d007      	beq.n	8007f8c <TIM_Base_SetConfig+0x40>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a41      	ldr	r2, [pc, #260]	@ (8008084 <TIM_Base_SetConfig+0x138>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d003      	beq.n	8007f8c <TIM_Base_SetConfig+0x40>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a40      	ldr	r2, [pc, #256]	@ (8008088 <TIM_Base_SetConfig+0x13c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d108      	bne.n	8007f9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a35      	ldr	r2, [pc, #212]	@ (8008078 <TIM_Base_SetConfig+0x12c>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d02b      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fac:	d027      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a32      	ldr	r2, [pc, #200]	@ (800807c <TIM_Base_SetConfig+0x130>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d023      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a31      	ldr	r2, [pc, #196]	@ (8008080 <TIM_Base_SetConfig+0x134>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d01f      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a30      	ldr	r2, [pc, #192]	@ (8008084 <TIM_Base_SetConfig+0x138>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d01b      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a2f      	ldr	r2, [pc, #188]	@ (8008088 <TIM_Base_SetConfig+0x13c>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d017      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a2e      	ldr	r2, [pc, #184]	@ (800808c <TIM_Base_SetConfig+0x140>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d013      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a2d      	ldr	r2, [pc, #180]	@ (8008090 <TIM_Base_SetConfig+0x144>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d00f      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a2c      	ldr	r2, [pc, #176]	@ (8008094 <TIM_Base_SetConfig+0x148>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d00b      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a2b      	ldr	r2, [pc, #172]	@ (8008098 <TIM_Base_SetConfig+0x14c>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d007      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a2a      	ldr	r2, [pc, #168]	@ (800809c <TIM_Base_SetConfig+0x150>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d003      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a29      	ldr	r2, [pc, #164]	@ (80080a0 <TIM_Base_SetConfig+0x154>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d108      	bne.n	8008010 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	4313      	orrs	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	4313      	orrs	r3, r2
 800801c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a10      	ldr	r2, [pc, #64]	@ (8008078 <TIM_Base_SetConfig+0x12c>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d003      	beq.n	8008044 <TIM_Base_SetConfig+0xf8>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a12      	ldr	r2, [pc, #72]	@ (8008088 <TIM_Base_SetConfig+0x13c>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d103      	bne.n	800804c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	691a      	ldr	r2, [r3, #16]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b01      	cmp	r3, #1
 800805c:	d105      	bne.n	800806a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f023 0201 	bic.w	r2, r3, #1
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	611a      	str	r2, [r3, #16]
  }
}
 800806a:	bf00      	nop
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	40010000 	.word	0x40010000
 800807c:	40000400 	.word	0x40000400
 8008080:	40000800 	.word	0x40000800
 8008084:	40000c00 	.word	0x40000c00
 8008088:	40010400 	.word	0x40010400
 800808c:	40014000 	.word	0x40014000
 8008090:	40014400 	.word	0x40014400
 8008094:	40014800 	.word	0x40014800
 8008098:	40001800 	.word	0x40001800
 800809c:	40001c00 	.word	0x40001c00
 80080a0:	40002000 	.word	0x40002000

080080a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d101      	bne.n	80080bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080b8:	2302      	movs	r3, #2
 80080ba:	e05a      	b.n	8008172 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2202      	movs	r2, #2
 80080c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a21      	ldr	r2, [pc, #132]	@ (8008180 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d022      	beq.n	8008146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008108:	d01d      	beq.n	8008146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a1d      	ldr	r2, [pc, #116]	@ (8008184 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d018      	beq.n	8008146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a1b      	ldr	r2, [pc, #108]	@ (8008188 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d013      	beq.n	8008146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a1a      	ldr	r2, [pc, #104]	@ (800818c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d00e      	beq.n	8008146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a18      	ldr	r2, [pc, #96]	@ (8008190 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d009      	beq.n	8008146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a17      	ldr	r2, [pc, #92]	@ (8008194 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d004      	beq.n	8008146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a15      	ldr	r2, [pc, #84]	@ (8008198 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d10c      	bne.n	8008160 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800814c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	4313      	orrs	r3, r2
 8008156:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	40010000 	.word	0x40010000
 8008184:	40000400 	.word	0x40000400
 8008188:	40000800 	.word	0x40000800
 800818c:	40000c00 	.word	0x40000c00
 8008190:	40010400 	.word	0x40010400
 8008194:	40014000 	.word	0x40014000
 8008198:	40001800 	.word	0x40001800

0800819c <memset>:
 800819c:	4402      	add	r2, r0
 800819e:	4603      	mov	r3, r0
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d100      	bne.n	80081a6 <memset+0xa>
 80081a4:	4770      	bx	lr
 80081a6:	f803 1b01 	strb.w	r1, [r3], #1
 80081aa:	e7f9      	b.n	80081a0 <memset+0x4>

080081ac <__libc_init_array>:
 80081ac:	b570      	push	{r4, r5, r6, lr}
 80081ae:	4d0d      	ldr	r5, [pc, #52]	@ (80081e4 <__libc_init_array+0x38>)
 80081b0:	4c0d      	ldr	r4, [pc, #52]	@ (80081e8 <__libc_init_array+0x3c>)
 80081b2:	1b64      	subs	r4, r4, r5
 80081b4:	10a4      	asrs	r4, r4, #2
 80081b6:	2600      	movs	r6, #0
 80081b8:	42a6      	cmp	r6, r4
 80081ba:	d109      	bne.n	80081d0 <__libc_init_array+0x24>
 80081bc:	4d0b      	ldr	r5, [pc, #44]	@ (80081ec <__libc_init_array+0x40>)
 80081be:	4c0c      	ldr	r4, [pc, #48]	@ (80081f0 <__libc_init_array+0x44>)
 80081c0:	f000 f826 	bl	8008210 <_init>
 80081c4:	1b64      	subs	r4, r4, r5
 80081c6:	10a4      	asrs	r4, r4, #2
 80081c8:	2600      	movs	r6, #0
 80081ca:	42a6      	cmp	r6, r4
 80081cc:	d105      	bne.n	80081da <__libc_init_array+0x2e>
 80081ce:	bd70      	pop	{r4, r5, r6, pc}
 80081d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80081d4:	4798      	blx	r3
 80081d6:	3601      	adds	r6, #1
 80081d8:	e7ee      	b.n	80081b8 <__libc_init_array+0xc>
 80081da:	f855 3b04 	ldr.w	r3, [r5], #4
 80081de:	4798      	blx	r3
 80081e0:	3601      	adds	r6, #1
 80081e2:	e7f2      	b.n	80081ca <__libc_init_array+0x1e>
 80081e4:	08009e04 	.word	0x08009e04
 80081e8:	08009e04 	.word	0x08009e04
 80081ec:	08009e04 	.word	0x08009e04
 80081f0:	08009e08 	.word	0x08009e08

080081f4 <memcpy>:
 80081f4:	440a      	add	r2, r1
 80081f6:	4291      	cmp	r1, r2
 80081f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80081fc:	d100      	bne.n	8008200 <memcpy+0xc>
 80081fe:	4770      	bx	lr
 8008200:	b510      	push	{r4, lr}
 8008202:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800820a:	4291      	cmp	r1, r2
 800820c:	d1f9      	bne.n	8008202 <memcpy+0xe>
 800820e:	bd10      	pop	{r4, pc}

08008210 <_init>:
 8008210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008212:	bf00      	nop
 8008214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008216:	bc08      	pop	{r3}
 8008218:	469e      	mov	lr, r3
 800821a:	4770      	bx	lr

0800821c <_fini>:
 800821c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821e:	bf00      	nop
 8008220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008222:	bc08      	pop	{r3}
 8008224:	469e      	mov	lr, r3
 8008226:	4770      	bx	lr
