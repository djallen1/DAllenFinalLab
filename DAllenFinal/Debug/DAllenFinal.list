
DAllenFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000804c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bd4  080081f8  080081f8  000091f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dcc  08009dcc  0000b024  2**0
                  CONTENTS
  4 .ARM          00000008  08009dcc  08009dcc  0000adcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dd4  08009dd4  0000b024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dd4  08009dd4  0000add4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009dd8  08009dd8  0000add8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08009ddc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b024  2**0
                  CONTENTS
 10 .bss          00025de0  20000024  20000024  0000b024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025e04  20025e04  0000b024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015cc3  00000000  00000000  0000b054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000390c  00000000  00000000  00020d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  00024628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001059  00000000  00000000  00025b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002787d  00000000  00000000  00026bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b878  00000000  00000000  0004e43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3032  00000000  00000000  00069cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014cce8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005898  00000000  00000000  0014cd2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001525c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080081e0 	.word	0x080081e0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	080081e0 	.word	0x080081e0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f004 fa3e 	bl	8004960 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f002 fabc 	bl	8002a60 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f002 fa79 	bl	80029e0 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f002 fb7f 	bl	8002bf4 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80004f6:	f002 fc55 	bl	8002da4 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80004fa:	4b05      	ldr	r3, [pc, #20]	@ (8000510 <ApplicationInit+0x34>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 8000500:	f000 f810 	bl	8000524 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED
	#endif // COMPILE_TOUCH_FUNCTIONS
	applicationButtonInit();
 8000504:	f000 f8c6 	bl	8000694 <applicationButtonInit>
	game_start_screen();
 8000508:	f002 fc8e 	bl	8002e28 <game_start_screen>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000088 	.word	0x20000088

08000514 <Application_game_inst>:

void Application_game_inst(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	game_init();
 8000518:	f002 fc94 	bl	8002e44 <game_init>
	start_timer();
 800051c:	f000 f924 	bl	8000768 <start_timer>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 8000538:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800053c:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 800053e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000542:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000548:	2302      	movs	r3, #2
 800054a:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	4b0d      	ldr	r3, [pc, #52]	@ (8000588 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000554:	4a0c      	ldr	r2, [pc, #48]	@ (8000588 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	6313      	str	r3, [r2, #48]	@ 0x30
 800055c:	4b0a      	ldr	r3, [pc, #40]	@ (8000588 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800055e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000560:	f003 0301 	and.w	r3, r3, #1
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	4619      	mov	r1, r3
 800056c:	4807      	ldr	r0, [pc, #28]	@ (800058c <LCDTouchScreenInterruptGPIOInit+0x68>)
 800056e:	f004 fc59 	bl	8004e24 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000572:	2028      	movs	r0, #40	@ 0x28
 8000574:	f004 fc07 	bl	8004d86 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000578:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 800057a:	4a06      	ldr	r2, [pc, #24]	@ (8000594 <LCDTouchScreenInterruptGPIOInit+0x70>)
 800057c:	601a      	str	r2, [r3, #0]

}
 800057e:	bf00      	nop
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40023800 	.word	0x40023800
 800058c:	40020000 	.word	0x40020000
 8000590:	20000090 	.word	0x20000090
 8000594:	0600000f 	.word	0x0600000f

08000598 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 800059e:	2028      	movs	r0, #40	@ 0x28
 80005a0:	f004 fbff 	bl	8004da2 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 80005a4:	2300      	movs	r3, #0
 80005a6:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 80005a8:	4b36      	ldr	r3, [pc, #216]	@ (8000684 <EXTI15_10_IRQHandler+0xec>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005ae:	e006      	b.n	80005be <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 80005b0:	204c      	movs	r0, #76	@ 0x4c
 80005b2:	f003 ff58 	bl	8004466 <STMPE811_Read>
 80005b6:	4603      	mov	r3, r0
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b32      	ldr	r3, [pc, #200]	@ (8000684 <EXTI15_10_IRQHandler+0xec>)
 80005bc:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005be:	4b31      	ldr	r3, [pc, #196]	@ (8000684 <EXTI15_10_IRQHandler+0xec>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f4      	beq.n	80005b0 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 80005c6:	200a      	movs	r0, #10
 80005c8:	f002 fc02 	bl	8002dd0 <ReadRegisterFromTouchModule>
 80005cc:	4603      	mov	r3, r0
 80005ce:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 80005d0:	2100      	movs	r1, #0
 80005d2:	200a      	movs	r0, #10
 80005d4:	f002 fc0a 	bl	8002dec <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 80005d8:	200b      	movs	r0, #11
 80005da:	f002 fbf9 	bl	8002dd0 <ReadRegisterFromTouchModule>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b29      	ldr	r3, [pc, #164]	@ (8000688 <EXTI15_10_IRQHandler+0xf0>)
 80005e4:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 80005e6:	4b28      	ldr	r3, [pc, #160]	@ (8000688 <EXTI15_10_IRQHandler+0xf0>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 80005f0:	797b      	ldrb	r3, [r7, #5]
 80005f2:	4619      	mov	r1, r3
 80005f4:	200b      	movs	r0, #11
 80005f6:	f002 fbf9 	bl	8002dec <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 80005fa:	2040      	movs	r0, #64	@ 0x40
 80005fc:	f002 fbe8 	bl	8002dd0 <ReadRegisterFromTouchModule>
 8000600:	4603      	mov	r3, r0
 8000602:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 8000604:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000608:	2b00      	cmp	r3, #0
 800060a:	da01      	bge.n	8000610 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 800060c:	2301      	movs	r3, #1
 800060e:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d015      	beq.n	8000642 <EXTI15_10_IRQHandler+0xaa>
	{
		if(is_start_screen())
 8000616:	f002 fbfb 	bl	8002e10 <is_start_screen>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <EXTI15_10_IRQHandler+0x8e>
		{
			Application_game_inst();
 8000620:	f7ff ff78 	bl	8000514 <Application_game_inst>
 8000624:	e00d      	b.n	8000642 <EXTI15_10_IRQHandler+0xaa>
		}
		else
		{
			DetermineTouchPosition(&StaticTouchData);
 8000626:	4819      	ldr	r0, [pc, #100]	@ (800068c <EXTI15_10_IRQHandler+0xf4>)
 8000628:	f002 fbc7 	bl	8002dba <DetermineTouchPosition>
			if(StaticTouchData.x > 120)
 800062c:	4b17      	ldr	r3, [pc, #92]	@ (800068c <EXTI15_10_IRQHandler+0xf4>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	2b78      	cmp	r3, #120	@ 0x78
 8000632:	d903      	bls.n	800063c <EXTI15_10_IRQHandler+0xa4>
			{
				game_move(RIGHT);
 8000634:	2001      	movs	r0, #1
 8000636:	f002 fd23 	bl	8003080 <game_move>
 800063a:	e002      	b.n	8000642 <EXTI15_10_IRQHandler+0xaa>
			}
			else
			{
				game_move(LEFT);
 800063c:	2000      	movs	r0, #0
 800063e:	f002 fd1f 	bl	8003080 <game_move>
			}
		}
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 8000642:	2101      	movs	r1, #1
 8000644:	204b      	movs	r0, #75	@ 0x4b
 8000646:	f003 ff1f 	bl	8004488 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 800064a:	2100      	movs	r1, #0
 800064c:	204b      	movs	r0, #75	@ 0x4b
 800064e:	f003 ff1b 	bl	8004488 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 8000652:	79bb      	ldrb	r3, [r7, #6]
 8000654:	4619      	mov	r1, r3
 8000656:	200a      	movs	r0, #10
 8000658:	f002 fbc8 	bl	8002dec <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 800065c:	2103      	movs	r1, #3
 800065e:	480c      	ldr	r0, [pc, #48]	@ (8000690 <EXTI15_10_IRQHandler+0xf8>)
 8000660:	f004 fbc8 	bl	8004df4 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000664:	2028      	movs	r0, #40	@ 0x28
 8000666:	f004 fbb6 	bl	8004dd6 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800066a:	2028      	movs	r0, #40	@ 0x28
 800066c:	f004 fb8b 	bl	8004d86 <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000670:	797b      	ldrb	r3, [r7, #5]
 8000672:	4619      	mov	r1, r3
 8000674:	200b      	movs	r0, #11
 8000676:	f002 fbb9 	bl	8002dec <WriteDataToTouchModule>

}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2000009c 	.word	0x2000009c
 8000688:	20000098 	.word	0x20000098
 800068c:	20000088 	.word	0x20000088
 8000690:	20000090 	.word	0x20000090

08000694 <applicationButtonInit>:
#endif // TOUCH_INTERRUPT_ENABLED

void applicationButtonInit()
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	ButtonInit();
 8000698:	f002 f898 	bl	80027cc <ButtonInit>
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}

080006a0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80006a4:	2006      	movs	r0, #6
 80006a6:	f004 fb7c 	bl	8004da2 <HAL_NVIC_DisableIRQ>
	//EXTI_HandleTypeDef* line = {0};
	HAL_EXTI_ClearPending(EXTI_GPIOA, EXTI_TRIGGER_RISING);
 80006aa:	2101      	movs	r1, #1
 80006ac:	2000      	movs	r0, #0
 80006ae:	f004 fba1 	bl	8004df4 <HAL_EXTI_ClearPending>
	//IRQ_enable(EXTI0_IRQ_NUMBER);
	game_rotate();
 80006b2:	f002 fca7 	bl	8003004 <game_rotate>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006b6:	2006      	movs	r0, #6
 80006b8:	f004 fb65 	bl	8004d86 <HAL_NVIC_EnableIRQ>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <MX_TIM7_Init>:

static void MX_TIM7_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80006ce:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <MX_TIM7_Init+0x68>)
 80006d0:	4a16      	ldr	r2, [pc, #88]	@ (800072c <MX_TIM7_Init+0x6c>)
 80006d2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = PRESCALAR_VAL;
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_TIM7_Init+0x68>)
 80006d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006da:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <MX_TIM7_Init+0x68>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = ARR_VAL;
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_TIM7_Init+0x68>)
 80006e4:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80006e8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_TIM7_Init+0x68>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80006f0:	480d      	ldr	r0, [pc, #52]	@ (8000728 <MX_TIM7_Init+0x68>)
 80006f2:	f007 fb53 	bl	8007d9c <HAL_TIM_Base_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d002      	beq.n	8000702 <MX_TIM7_Init+0x42>
  {
    APPLICATION_ASSERT(1);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f002 f895 	bl	800282c <APPLICATION_ASSERT>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	4619      	mov	r1, r3
 800070e:	4806      	ldr	r0, [pc, #24]	@ (8000728 <MX_TIM7_Init+0x68>)
 8000710:	f007 fcb0 	bl	8008074 <HAL_TIMEx_MasterConfigSynchronization>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <MX_TIM7_Init+0x60>
  {
	APPLICATION_ASSERT(1);
 800071a:	2001      	movs	r0, #1
 800071c:	f002 f886 	bl	800282c <APPLICATION_ASSERT>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000040 	.word	0x20000040
 800072c:	40001400 	.word	0x40001400

08000730 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(TIM7_IRQn);
 8000734:	2037      	movs	r0, #55	@ 0x37
 8000736:	f004 fb34 	bl	8004da2 <HAL_NVIC_DisableIRQ>
	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 800073a:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <TIM7_IRQHandler+0x34>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f06f 0201 	mvn.w	r2, #1
 8000742:	611a      	str	r2, [r3, #16]
	if(!game_finished())
 8000744:	f002 fcec 	bl	8003120 <game_finished>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d102      	bne.n	8000754 <TIM7_IRQHandler+0x24>
	{
		game_drop();
 800074e:	f002 fbc9 	bl	8002ee4 <game_drop>
 8000752:	e001      	b.n	8000758 <TIM7_IRQHandler+0x28>
	}
	else
	{
		game_over();
 8000754:	f002 fcf6 	bl	8003144 <game_over>
	}
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000758:	2037      	movs	r0, #55	@ 0x37
 800075a:	f004 fb14 	bl	8004d86 <HAL_NVIC_EnableIRQ>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000040 	.word	0x20000040

08000768 <start_timer>:

void start_timer()
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	MX_TIM7_Init();
 800076c:	f7ff ffa8 	bl	80006c0 <MX_TIM7_Init>
	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <start_timer+0x24>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f06f 0201 	mvn.w	r2, #1
 8000778:	611a      	str	r2, [r3, #16]
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800077a:	2037      	movs	r0, #55	@ 0x37
 800077c:	f004 fb03 	bl	8004d86 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim7);
 8000780:	4802      	ldr	r0, [pc, #8]	@ (800078c <start_timer+0x24>)
 8000782:	f007 fb5b 	bl	8007e3c <HAL_TIM_Base_Start_IT>
	//((&htim7)->Instance->SR) |= 0;
	//__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000040 	.word	0x20000040

08000790 <map_draw>:

static void MX_RNG_Init(void);
static void MX_RNG_Deinit(void);

void map_draw()
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
	//uint16_t y_len = LCD_PIXEL_HEIGHT;
	uint16_t x_len = LCD_PIXEL_WIDTH;
 8000796:	23f0      	movs	r3, #240	@ 0xf0
 8000798:	80fb      	strh	r3, [r7, #6]
	//edges of 5 pixels in width
	uint16_t x = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	80bb      	strh	r3, [r7, #4]

	//VERTICAL
	for(int i = 1; i<LCD_PIXEL_WIDTH; i+=BLOCK_WIDTH)
 800079e:	2301      	movs	r3, #1
 80007a0:	61fb      	str	r3, [r7, #28]
 80007a2:	e00d      	b.n	80007c0 <map_draw+0x30>
	{
		LCD_Draw_Vertical_Line(EDGE_WIDTH+i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	3304      	adds	r3, #4
 80007aa:	b298      	uxth	r0, r3
 80007ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b0:	f240 1235 	movw	r2, #309	@ 0x135
 80007b4:	210b      	movs	r1, #11
 80007b6:	f002 f9cf 	bl	8002b58 <LCD_Draw_Vertical_Line>
	for(int i = 1; i<LCD_PIXEL_WIDTH; i+=BLOCK_WIDTH)
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3317      	adds	r3, #23
 80007be:	61fb      	str	r3, [r7, #28]
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	2bef      	cmp	r3, #239	@ 0xef
 80007c4:	ddee      	ble.n	80007a4 <map_draw+0x14>
	}
	for(int i = 1; i<=EDGE_WIDTH; i++)
 80007c6:	2301      	movs	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	e00b      	b.n	80007e4 <map_draw+0x54>
	{
		LCD_Draw_Vertical_Line(i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	b298      	uxth	r0, r3
 80007d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007d4:	f240 1235 	movw	r2, #309	@ 0x135
 80007d8:	210b      	movs	r1, #11
 80007da:	f002 f9bd 	bl	8002b58 <LCD_Draw_Vertical_Line>
	for(int i = 1; i<=EDGE_WIDTH; i++)
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	3301      	adds	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	ddf0      	ble.n	80007cc <map_draw+0x3c>
	}
	for(int i = LCD_PIXEL_WIDTH-EDGE_WIDTH; i<=LCD_PIXEL_WIDTH; i++)
 80007ea:	23ec      	movs	r3, #236	@ 0xec
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	e00b      	b.n	8000808 <map_draw+0x78>
	{
		LCD_Draw_Vertical_Line(i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	b298      	uxth	r0, r3
 80007f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007f8:	f240 1235 	movw	r2, #309	@ 0x135
 80007fc:	210b      	movs	r1, #11
 80007fe:	f002 f9ab 	bl	8002b58 <LCD_Draw_Vertical_Line>
	for(int i = LCD_PIXEL_WIDTH-EDGE_WIDTH; i<=LCD_PIXEL_WIDTH; i++)
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	3301      	adds	r3, #1
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	2bf0      	cmp	r3, #240	@ 0xf0
 800080c:	ddf0      	ble.n	80007f0 <map_draw+0x60>
	}

	//HORIZONTAL
	for(int i = 1; i<MAP_HEIGHT; i+=BLOCK_WIDTH)
 800080e:	2301      	movs	r3, #1
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	e00c      	b.n	800082e <map_draw+0x9e>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+EDGE_WIDTH+i, x_len, LCD_COLOR_WHITE);
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	b29b      	uxth	r3, r3
 8000818:	330f      	adds	r3, #15
 800081a:	b299      	uxth	r1, r3
 800081c:	88fa      	ldrh	r2, [r7, #6]
 800081e:	88b8      	ldrh	r0, [r7, #4]
 8000820:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000824:	f002 f9bf 	bl	8002ba6 <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<MAP_HEIGHT; i+=BLOCK_WIDTH)
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	3317      	adds	r3, #23
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8000834:	ddee      	ble.n	8000814 <map_draw+0x84>
	}
	for(int i = 0; i<=EDGE_WIDTH; i++)
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	e00c      	b.n	8000856 <map_draw+0xc6>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+i, x_len, LCD_COLOR_WHITE);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	b29b      	uxth	r3, r3
 8000840:	330b      	adds	r3, #11
 8000842:	b299      	uxth	r1, r3
 8000844:	88fa      	ldrh	r2, [r7, #6]
 8000846:	88b8      	ldrh	r0, [r7, #4]
 8000848:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800084c:	f002 f9ab 	bl	8002ba6 <LCD_Draw_Horizontal_Line>
	for(int i = 0; i<=EDGE_WIDTH; i++)
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	3301      	adds	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2b04      	cmp	r3, #4
 800085a:	ddef      	ble.n	800083c <map_draw+0xac>
	}
	for(int i = MAP_HEIGHT-EDGE_WIDTH; i<=MAP_HEIGHT; i++)
 800085c:	f240 1331 	movw	r3, #305	@ 0x131
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	e00c      	b.n	800087e <map_draw+0xee>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+i, x_len, LCD_COLOR_WHITE);
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	b29b      	uxth	r3, r3
 8000868:	330b      	adds	r3, #11
 800086a:	b299      	uxth	r1, r3
 800086c:	88fa      	ldrh	r2, [r7, #6]
 800086e:	88b8      	ldrh	r0, [r7, #4]
 8000870:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000874:	f002 f997 	bl	8002ba6 <LCD_Draw_Horizontal_Line>
	for(int i = MAP_HEIGHT-EDGE_WIDTH; i<=MAP_HEIGHT; i++)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	3301      	adds	r3, #1
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 8000884:	dbee      	blt.n	8000864 <map_draw+0xd4>
	}
}
 8000886:	bf00      	nop
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <start_screen>:

void start_screen()
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
	//uint16_t play_x = 68; //to 172
	uint16_t play_y = 106; //to 184
 8000896:	236a      	movs	r3, #106	@ 0x6a
 8000898:	80fb      	strh	r3, [r7, #6]
	//uint16_t button_height = 48;
	uint16_t button_width = LCD_PIXEL_WIDTH/2;
 800089a:	2378      	movs	r3, #120	@ 0x78
 800089c:	80bb      	strh	r3, [r7, #4]

	for(int i = 1; i<button_width/2; i++)
 800089e:	2301      	movs	r3, #1
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	e014      	b.n	80008ce <start_screen+0x3e>
	{
		LCD_Draw_Horizontal_Line(120-i, play_y+i, 2*i, LCD_COLOR_WHITE);
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 80008ac:	b298      	uxth	r0, r3
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	4413      	add	r3, r2
 80008b6:	b299      	uxth	r1, r3
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	b29a      	uxth	r2, r3
 80008c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008c4:	f002 f96f 	bl	8002ba6 <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<button_width/2; i++)
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	3301      	adds	r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	88bb      	ldrh	r3, [r7, #4]
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	461a      	mov	r2, r3
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	4293      	cmp	r3, r2
 80008da:	dbe3      	blt.n	80008a4 <start_screen+0x14>
	}
	for(int i = button_width/2; i>0; i--)
 80008dc:	88bb      	ldrh	r3, [r7, #4]
 80008de:	085b      	lsrs	r3, r3, #1
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	e020      	b.n	8000928 <start_screen+0x98>
	{
		LCD_Draw_Horizontal_Line(i+button_width/2, play_y + i + (button_width/2) - 1, button_width-(2*i), LCD_COLOR_WHITE);
 80008e6:	88bb      	ldrh	r3, [r7, #4]
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	4413      	add	r3, r2
 80008f2:	b298      	uxth	r0, r3
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	88fb      	ldrh	r3, [r7, #6]
 80008fa:	4413      	add	r3, r2
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	88bb      	ldrh	r3, [r7, #4]
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	b29b      	uxth	r3, r3
 8000904:	4413      	add	r3, r2
 8000906:	b29b      	uxth	r3, r3
 8000908:	3b01      	subs	r3, #1
 800090a:	b299      	uxth	r1, r3
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	b29b      	uxth	r3, r3
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	b29b      	uxth	r3, r3
 8000914:	88ba      	ldrh	r2, [r7, #4]
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	b29a      	uxth	r2, r3
 800091a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800091e:	f002 f942 	bl	8002ba6 <LCD_Draw_Horizontal_Line>
	for(int i = button_width/2; i>0; i--)
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	3b01      	subs	r3, #1
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	2b00      	cmp	r3, #0
 800092c:	dcdb      	bgt.n	80008e6 <start_screen+0x56>
	}
	for(int i = 1; i<button_width/2 -2; i++)
 800092e:	2301      	movs	r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	e015      	b.n	8000960 <start_screen+0xd0>
	{
		LCD_Draw_Horizontal_Line(120-i, play_y+i +2 , 2*i, LCD_COLOR_BLACK);
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	b29b      	uxth	r3, r3
 8000938:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 800093c:	b298      	uxth	r0, r3
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	b29a      	uxth	r2, r3
 8000942:	88fb      	ldrh	r3, [r7, #6]
 8000944:	4413      	add	r3, r2
 8000946:	b29b      	uxth	r3, r3
 8000948:	3302      	adds	r3, #2
 800094a:	b299      	uxth	r1, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	b29b      	uxth	r3, r3
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	b29a      	uxth	r2, r3
 8000954:	2300      	movs	r3, #0
 8000956:	f002 f926 	bl	8002ba6 <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<button_width/2 -2; i++)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	3301      	adds	r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	88bb      	ldrh	r3, [r7, #4]
 8000962:	085b      	lsrs	r3, r3, #1
 8000964:	b29b      	uxth	r3, r3
 8000966:	3b02      	subs	r3, #2
 8000968:	68fa      	ldr	r2, [r7, #12]
 800096a:	429a      	cmp	r2, r3
 800096c:	dbe2      	blt.n	8000934 <start_screen+0xa4>
	}
	for(int i = button_width/2 -2; i>0; i--)
 800096e:	88bb      	ldrh	r3, [r7, #4]
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	b29b      	uxth	r3, r3
 8000974:	3b02      	subs	r3, #2
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	e023      	b.n	80009c2 <start_screen+0x132>
	{
		LCD_Draw_Horizontal_Line(i+button_width/2+1, play_y + i + (button_width/2) - 2, button_width-(2*i)-2, LCD_COLOR_BLACK);
 800097a:	88bb      	ldrh	r3, [r7, #4]
 800097c:	085b      	lsrs	r3, r3, #1
 800097e:	b29a      	uxth	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	b29b      	uxth	r3, r3
 8000984:	4413      	add	r3, r2
 8000986:	b29b      	uxth	r3, r3
 8000988:	3301      	adds	r3, #1
 800098a:	b298      	uxth	r0, r3
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	b29a      	uxth	r2, r3
 8000990:	88fb      	ldrh	r3, [r7, #6]
 8000992:	4413      	add	r3, r2
 8000994:	b29a      	uxth	r2, r3
 8000996:	88bb      	ldrh	r3, [r7, #4]
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	b29b      	uxth	r3, r3
 800099c:	4413      	add	r3, r2
 800099e:	b29b      	uxth	r3, r3
 80009a0:	3b02      	subs	r3, #2
 80009a2:	b299      	uxth	r1, r3
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	88ba      	ldrh	r2, [r7, #4]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	3b02      	subs	r3, #2
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	2300      	movs	r3, #0
 80009b8:	f002 f8f5 	bl	8002ba6 <LCD_Draw_Horizontal_Line>
	for(int i = button_width/2 -2; i>0; i--)
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	3b01      	subs	r3, #1
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	dcd8      	bgt.n	800097a <start_screen+0xea>
	}

	LCD_SetFont(&Font16x24);
 80009c8:	4815      	ldr	r0, [pc, #84]	@ (8000a20 <start_screen+0x190>)
 80009ca:	f002 f945 	bl	8002c58 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_RED);
 80009ce:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80009d2:	f002 f931 	bl	8002c38 <LCD_SetTextColor>
	LCD_DisplayChar(76, 154, 'P');
 80009d6:	2250      	movs	r2, #80	@ 0x50
 80009d8:	219a      	movs	r1, #154	@ 0x9a
 80009da:	204c      	movs	r0, #76	@ 0x4c
 80009dc:	f002 f9ba 	bl	8002d54 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_YELLOW);
 80009e0:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80009e4:	f002 f928 	bl	8002c38 <LCD_SetTextColor>
	LCD_DisplayChar(100, 154, 'L');
 80009e8:	224c      	movs	r2, #76	@ 0x4c
 80009ea:	219a      	movs	r1, #154	@ 0x9a
 80009ec:	2064      	movs	r0, #100	@ 0x64
 80009ee:	f002 f9b1 	bl	8002d54 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_BLUE2);
 80009f2:	f240 501f 	movw	r0, #1311	@ 0x51f
 80009f6:	f002 f91f 	bl	8002c38 <LCD_SetTextColor>
	LCD_DisplayChar(124, 154, 'A');
 80009fa:	2241      	movs	r2, #65	@ 0x41
 80009fc:	219a      	movs	r1, #154	@ 0x9a
 80009fe:	207c      	movs	r0, #124	@ 0x7c
 8000a00:	f002 f9a8 	bl	8002d54 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_GREEN);
 8000a04:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000a08:	f002 f916 	bl	8002c38 <LCD_SetTextColor>
	LCD_DisplayChar(148, 154, 'Y');
 8000a0c:	2259      	movs	r2, #89	@ 0x59
 8000a0e:	219a      	movs	r1, #154	@ 0x9a
 8000a10:	2094      	movs	r0, #148	@ 0x94
 8000a12:	f002 f99f 	bl	8002d54 <LCD_DisplayChar>
}
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000004 	.word	0x20000004

08000a24 <end_screen>:

void end_screen()
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLACK);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f002 f8e2 	bl	8002bf4 <LCD_Clear>
	LCD_SetFont(&Font16x24);
 8000a30:	4818      	ldr	r0, [pc, #96]	@ (8000a94 <end_screen+0x70>)
 8000a32:	f002 f911 	bl	8002c58 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a36:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000a3a:	f002 f8fd 	bl	8002c38 <LCD_SetTextColor>
	LCD_DisplayChar(80, 100, 'G');
 8000a3e:	2247      	movs	r2, #71	@ 0x47
 8000a40:	2164      	movs	r1, #100	@ 0x64
 8000a42:	2050      	movs	r0, #80	@ 0x50
 8000a44:	f002 f986 	bl	8002d54 <LCD_DisplayChar>
	LCD_DisplayChar(102, 100, 'A');
 8000a48:	2241      	movs	r2, #65	@ 0x41
 8000a4a:	2164      	movs	r1, #100	@ 0x64
 8000a4c:	2066      	movs	r0, #102	@ 0x66
 8000a4e:	f002 f981 	bl	8002d54 <LCD_DisplayChar>
	LCD_DisplayChar(122, 100, 'M');
 8000a52:	224d      	movs	r2, #77	@ 0x4d
 8000a54:	2164      	movs	r1, #100	@ 0x64
 8000a56:	207a      	movs	r0, #122	@ 0x7a
 8000a58:	f002 f97c 	bl	8002d54 <LCD_DisplayChar>
	LCD_DisplayChar(144, 100, 'E');
 8000a5c:	2245      	movs	r2, #69	@ 0x45
 8000a5e:	2164      	movs	r1, #100	@ 0x64
 8000a60:	2090      	movs	r0, #144	@ 0x90
 8000a62:	f002 f977 	bl	8002d54 <LCD_DisplayChar>
	LCD_DisplayChar(80, 130, 'O');
 8000a66:	224f      	movs	r2, #79	@ 0x4f
 8000a68:	2182      	movs	r1, #130	@ 0x82
 8000a6a:	2050      	movs	r0, #80	@ 0x50
 8000a6c:	f002 f972 	bl	8002d54 <LCD_DisplayChar>
	LCD_DisplayChar(102, 130, 'V');
 8000a70:	2256      	movs	r2, #86	@ 0x56
 8000a72:	2182      	movs	r1, #130	@ 0x82
 8000a74:	2066      	movs	r0, #102	@ 0x66
 8000a76:	f002 f96d 	bl	8002d54 <LCD_DisplayChar>
	LCD_DisplayChar(122, 130, 'E');
 8000a7a:	2245      	movs	r2, #69	@ 0x45
 8000a7c:	2182      	movs	r1, #130	@ 0x82
 8000a7e:	207a      	movs	r0, #122	@ 0x7a
 8000a80:	f002 f968 	bl	8002d54 <LCD_DisplayChar>
	LCD_DisplayChar(144, 130, 'R');
 8000a84:	2252      	movs	r2, #82	@ 0x52
 8000a86:	2182      	movs	r1, #130	@ 0x82
 8000a88:	2090      	movs	r0, #144	@ 0x90
 8000a8a:	f002 f963 	bl	8002d54 <LCD_DisplayChar>
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000004 	.word	0x20000004

08000a98 <disp_time>:

void disp_time(uint32_t time)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	uint32_t seconds = time / 1000;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a25      	ldr	r2, [pc, #148]	@ (8000b38 <disp_time+0xa0>)
 8000aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa8:	099b      	lsrs	r3, r3, #6
 8000aaa:	61fb      	str	r3, [r7, #28]
	uint32_t min = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
	uint32_t sec_tens = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
	while(seconds > 60)
 8000ab4:	e005      	b.n	8000ac2 <disp_time+0x2a>
	{
		seconds -= 60;
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b3c      	subs	r3, #60	@ 0x3c
 8000aba:	61fb      	str	r3, [r7, #28]
		min++;
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
	while(seconds > 60)
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	2b3c      	cmp	r3, #60	@ 0x3c
 8000ac6:	d8f6      	bhi.n	8000ab6 <disp_time+0x1e>
	}
	while(seconds > 10)
 8000ac8:	e005      	b.n	8000ad6 <disp_time+0x3e>
	{
		seconds -= 10;
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3b0a      	subs	r3, #10
 8000ace:	61fb      	str	r3, [r7, #28]
		sec_tens++;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	617b      	str	r3, [r7, #20]
	while(seconds > 10)
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	2b0a      	cmp	r3, #10
 8000ada:	d8f6      	bhi.n	8000aca <disp_time+0x32>
	}

	uint32_t sec_char = seconds + '0';
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	3330      	adds	r3, #48	@ 0x30
 8000ae0:	613b      	str	r3, [r7, #16]
	uint32_t sec_tens_char = sec_tens + '0';
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3330      	adds	r3, #48	@ 0x30
 8000ae6:	60fb      	str	r3, [r7, #12]
	uint32_t min_char = min + '0';
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	3330      	adds	r3, #48	@ 0x30
 8000aec:	60bb      	str	r3, [r7, #8]

	LCD_SetFont(&Font12x12);
 8000aee:	4813      	ldr	r0, [pc, #76]	@ (8000b3c <disp_time+0xa4>)
 8000af0:	f002 f8b2 	bl	8002c58 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000af4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000af8:	f002 f89e 	bl	8002c38 <LCD_SetTextColor>
	LCD_DisplayChar(100, 160, min_char);
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	461a      	mov	r2, r3
 8000b02:	21a0      	movs	r1, #160	@ 0xa0
 8000b04:	2064      	movs	r0, #100	@ 0x64
 8000b06:	f002 f925 	bl	8002d54 <LCD_DisplayChar>
	LCD_DisplayChar(114, 160, ':');
 8000b0a:	223a      	movs	r2, #58	@ 0x3a
 8000b0c:	21a0      	movs	r1, #160	@ 0xa0
 8000b0e:	2072      	movs	r0, #114	@ 0x72
 8000b10:	f002 f920 	bl	8002d54 <LCD_DisplayChar>
	LCD_DisplayChar(124, 160, sec_tens_char);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	21a0      	movs	r1, #160	@ 0xa0
 8000b1c:	207c      	movs	r0, #124	@ 0x7c
 8000b1e:	f002 f919 	bl	8002d54 <LCD_DisplayChar>
	LCD_DisplayChar(138, 160, sec_char);
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	461a      	mov	r2, r3
 8000b28:	21a0      	movs	r1, #160	@ 0xa0
 8000b2a:	208a      	movs	r0, #138	@ 0x8a
 8000b2c:	f002 f912 	bl	8002d54 <LCD_DisplayChar>

}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	10624dd3 	.word	0x10624dd3
 8000b3c:	2000000c 	.word	0x2000000c

08000b40 <block_drop>:

block_t block_drop(block_t *block)
{
 8000b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b42:	b091      	sub	sp, #68	@ 0x44
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
	//when timer reaches ARR and enters IRQ handler, call this function
	volatile block_t temp_tetromino = *block;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	461c      	mov	r4, r3
 8000b4e:	f107 0608 	add.w	r6, r7, #8
 8000b52:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8000b56:	4635      	mov	r5, r6
 8000b58:	4623      	mov	r3, r4
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	6859      	ldr	r1, [r3, #4]
 8000b5e:	689a      	ldr	r2, [r3, #8]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b64:	3410      	adds	r4, #16
 8000b66:	3610      	adds	r6, #16
 8000b68:	4564      	cmp	r4, ip
 8000b6a:	d1f4      	bne.n	8000b56 <block_drop+0x16>
 8000b6c:	4633      	mov	r3, r6
 8000b6e:	4622      	mov	r2, r4
 8000b70:	6810      	ldr	r0, [r2, #0]
 8000b72:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < 4; i++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b78:	e013      	b.n	8000ba2 <block_drop+0x62>
	{
		temp_tetromino.y[i] += BLOCK_WIDTH;
 8000b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b7c:	3314      	adds	r3, #20
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	3340      	adds	r3, #64	@ 0x40
 8000b82:	443b      	add	r3, r7
 8000b84:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	3317      	adds	r3, #23
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b90:	3314      	adds	r3, #20
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	3340      	adds	r3, #64	@ 0x40
 8000b96:	443b      	add	r3, r7
 8000b98:	f823 2c34 	strh.w	r2, [r3, #-52]
	for(int i = 0; i < 4; i++)
 8000b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	dde8      	ble.n	8000b7a <block_drop+0x3a>
	}
	//*block = temp_tetromino;
	return temp_tetromino;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f107 0408 	add.w	r4, r7, #8
 8000bae:	469c      	mov	ip, r3
 8000bb0:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8000bb4:	4665      	mov	r5, ip
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bba:	6028      	str	r0, [r5, #0]
 8000bbc:	6069      	str	r1, [r5, #4]
 8000bbe:	60aa      	str	r2, [r5, #8]
 8000bc0:	60eb      	str	r3, [r5, #12]
 8000bc2:	3410      	adds	r4, #16
 8000bc4:	f10c 0c10 	add.w	ip, ip, #16
 8000bc8:	4574      	cmp	r4, lr
 8000bca:	d1f3      	bne.n	8000bb4 <block_drop+0x74>
 8000bcc:	4663      	mov	r3, ip
 8000bce:	4622      	mov	r2, r4
 8000bd0:	6810      	ldr	r0, [r2, #0]
 8000bd2:	6018      	str	r0, [r3, #0]
}
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	3744      	adds	r7, #68	@ 0x44
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000bdc <block_create>:

block_t block_create()
{
 8000bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bde:	b0b1      	sub	sp, #196	@ 0xc4
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	MX_RNG_Init();
 8000be4:	f001 fdae 	bl	8002744 <MX_RNG_Init>
	volatile block_t block = {0};
 8000be8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bec:	2234      	movs	r2, #52	@ 0x34
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f007 fabb 	bl	800816c <memset>
	//evaluate rng for color
	//set pos_x, pos_y
	//return the block

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8000bf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	48cd      	ldr	r0, [pc, #820]	@ (8000f34 <block_create+0x358>)
 8000bfe:	f006 fd97 	bl	8007730 <HAL_RNG_GenerateRandomNumber>
	rand %= 7;
 8000c02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000c04:	4bcc      	ldr	r3, [pc, #816]	@ (8000f38 <block_create+0x35c>)
 8000c06:	fba3 2301 	umull	r2, r3, r3, r1
 8000c0a:	1aca      	subs	r2, r1, r3
 8000c0c:	0852      	lsrs	r2, r2, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	089a      	lsrs	r2, r3, #2
 8000c12:	4613      	mov	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	1aca      	subs	r2, r1, r3
 8000c1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
	MX_RNG_Deinit();
 8000c1c:	f001 fdba 	bl	8002794 <MX_RNG_Deinit>

	uint8_t name = rand;
 8000c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		block.name = name;
 8000c26:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000c2a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

	uint8_t color = rand;
 8000c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c30:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

	//COLOR
	if(color == BLUE)
 8000c34:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d102      	bne.n	8000c42 <block_create+0x66>
	{
		block.color = LCD_COLOR_BLUE2;
 8000c3c:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000c40:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == RED)
 8000c42:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	d102      	bne.n	8000c50 <block_create+0x74>
	{
		block.color = LCD_COLOR_RED;
 8000c4a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c4e:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == GREEN)
 8000c50:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c54:	2b03      	cmp	r3, #3
 8000c56:	d102      	bne.n	8000c5e <block_create+0x82>
	{
		block.color = LCD_COLOR_GREEN;
 8000c58:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000c5c:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == CYAN)
 8000c5e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d102      	bne.n	8000c6c <block_create+0x90>
	{
		block.color = LCD_COLOR_CYAN;
 8000c66:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000c6a:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == YELLOW)
 8000c6c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <block_create+0x9e>
	{
		block.color = LCD_COLOR_YELLOW;
 8000c74:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000c78:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == ORANGE)
 8000c7a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d102      	bne.n	8000c88 <block_create+0xac>
	{
		block.color = LCD_COLOR_ORANGE;
 8000c82:	f64f 33c1 	movw	r3, #64449	@ 0xfbc1
 8000c86:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	if(color == PURPLE)
 8000c88:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000c8c:	2b05      	cmp	r3, #5
 8000c8e:	d102      	bne.n	8000c96 <block_create+0xba>
	{
		block.color = LCD_COLOR_PURPLE;
 8000c90:	f64b 0318 	movw	r3, #47128	@ 0xb818
 8000c94:	867b      	strh	r3, [r7, #50]	@ 0x32
	}
	//COORDINATES
	for(int i = 0; i < 4; i++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000c9c:	e017      	b.n	8000cce <block_create+0xf2>
	{
		block.x[i] = BLOCK_START_X + i*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000c9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	0052      	lsls	r2, r2, #1
 8000ca8:	441a      	add	r2, r3
 8000caa:	00d2      	lsls	r2, r2, #3
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	334b      	adds	r3, #75	@ 0x4b
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000cb8:	3310      	adds	r3, #16
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	33c0      	adds	r3, #192	@ 0xc0
 8000cbe:	443b      	add	r3, r7
 8000cc0:	f823 2c8c 	strh.w	r2, [r3, #-140]
	for(int i = 0; i < 4; i++)
 8000cc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000cc8:	3301      	adds	r3, #1
 8000cca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000cce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	dde3      	ble.n	8000c9e <block_create+0xc2>
	}

	//BLOCK MATRICES
	if(block.name == O)
 8000cd6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d16f      	bne.n	8000dc0 <block_create+0x1e4>
	{
		uint16_t temp[4][4] =
 8000ce0:	4b96      	ldr	r3, [pc, #600]	@ (8000f3c <block_create+0x360>)
 8000ce2:	f107 040c 	add.w	r4, r7, #12
 8000ce6:	461d      	mov	r5, r3
 8000ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000cf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,1},
			{0,0,1,1}};

		for(int i = 0; i < 4; i++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000cfa:	e028      	b.n	8000d4e <block_create+0x172>
		{
			for(int j = 0; j < 4; j++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000d02:	e01b      	b.n	8000d3c <block_create+0x160>
			{
				block.mat[i][j] = temp[j][i];
 8000d04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d08:	009a      	lsls	r2, r3, #2
 8000d0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d0e:	4413      	add	r3, r2
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	33c0      	adds	r3, #192	@ 0xc0
 8000d14:	443b      	add	r3, r7
 8000d16:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8000d1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d1e:	009a      	lsls	r2, r3, #2
 8000d20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d24:	4413      	add	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	33c0      	adds	r3, #192	@ 0xc0
 8000d2a:	443b      	add	r3, r7
 8000d2c:	460a      	mov	r2, r1
 8000d2e:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8000d32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d36:	3301      	adds	r3, #1
 8000d38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000d3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	dddf      	ble.n	8000d04 <block_create+0x128>
		for(int i = 0; i < 4; i++)
 8000d44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d48:	3301      	adds	r3, #1
 8000d4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000d4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	ddd2      	ble.n	8000cfc <block_create+0x120>
			}
		}
		for(int i = 0; i < 4; i++)
 8000d56:	2300      	movs	r3, #0
 8000d58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000d5c:	e02c      	b.n	8000db8 <block_create+0x1dc>
		{
			block.x[i] = BLOCK_START_X + (i-1)*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000d5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d62:	3b01      	subs	r3, #1
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	0052      	lsls	r2, r2, #1
 8000d6a:	441a      	add	r2, r3
 8000d6c:	00d2      	lsls	r2, r2, #3
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	334b      	adds	r3, #75	@ 0x4b
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d7a:	3310      	adds	r3, #16
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	33c0      	adds	r3, #192	@ 0xc0
 8000d80:	443b      	add	r3, r7
 8000d82:	f823 2c8c 	strh.w	r2, [r3, #-140]
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000d86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d8a:	3b02      	subs	r3, #2
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	461a      	mov	r2, r3
 8000d90:	0052      	lsls	r2, r2, #1
 8000d92:	441a      	add	r2, r3
 8000d94:	00d2      	lsls	r2, r2, #3
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	3311      	adds	r3, #17
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000da2:	3314      	adds	r3, #20
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	33c0      	adds	r3, #192	@ 0xc0
 8000da8:	443b      	add	r3, r7
 8000daa:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 8000dae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000db2:	3301      	adds	r3, #1
 8000db4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000db8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	ddce      	ble.n	8000d5e <block_create+0x182>
		}
	}
	if(block.name == L)
 8000dc0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d16f      	bne.n	8000eaa <block_create+0x2ce>
	{
		uint16_t temp[4][4] =
 8000dca:	4b5d      	ldr	r3, [pc, #372]	@ (8000f40 <block_create+0x364>)
 8000dcc:	f107 040c 	add.w	r4, r7, #12
 8000dd0:	461d      	mov	r5, r3
 8000dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,1,0},
			{0,0,1,0},
			{0,0,1,1}};
		for(int i = 0; i < 4; i++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000de4:	e028      	b.n	8000e38 <block_create+0x25c>
		{
			for(int j = 0; j < 4; j++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000dec:	e01b      	b.n	8000e26 <block_create+0x24a>
			{
				block.mat[i][j] = temp[j][i];
 8000dee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000df2:	009a      	lsls	r2, r3, #2
 8000df4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000df8:	4413      	add	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	33c0      	adds	r3, #192	@ 0xc0
 8000dfe:	443b      	add	r3, r7
 8000e00:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8000e04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e08:	009a      	lsls	r2, r3, #2
 8000e0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e0e:	4413      	add	r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	33c0      	adds	r3, #192	@ 0xc0
 8000e14:	443b      	add	r3, r7
 8000e16:	460a      	mov	r2, r1
 8000e18:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8000e1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e20:	3301      	adds	r3, #1
 8000e22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000e26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	dddf      	ble.n	8000dee <block_create+0x212>
		for(int i = 0; i < 4; i++)
 8000e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e32:	3301      	adds	r3, #1
 8000e34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000e38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	ddd2      	ble.n	8000de6 <block_create+0x20a>
			}
		}
		for(int i = 0; i < 4; i++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000e46:	e02c      	b.n	8000ea2 <block_create+0x2c6>
		{
			block.x[i] = BLOCK_START_X + (i-1)*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000e48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	0052      	lsls	r2, r2, #1
 8000e54:	441a      	add	r2, r3
 8000e56:	00d2      	lsls	r2, r2, #3
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	334b      	adds	r3, #75	@ 0x4b
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e64:	3310      	adds	r3, #16
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	33c0      	adds	r3, #192	@ 0xc0
 8000e6a:	443b      	add	r3, r7
 8000e6c:	f823 2c8c 	strh.w	r2, [r3, #-140]
			block.y[i] = BLOCK_START_Y + (i-1)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000e70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e74:	3b01      	subs	r3, #1
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	461a      	mov	r2, r3
 8000e7a:	0052      	lsls	r2, r2, #1
 8000e7c:	441a      	add	r2, r3
 8000e7e:	00d2      	lsls	r2, r2, #3
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	3311      	adds	r3, #17
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e8c:	3314      	adds	r3, #20
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	33c0      	adds	r3, #192	@ 0xc0
 8000e92:	443b      	add	r3, r7
 8000e94:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 8000e98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000ea2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	ddce      	ble.n	8000e48 <block_create+0x26c>
		}
	}
	if(block.name == J)
 8000eaa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d179      	bne.n	8000fa8 <block_create+0x3cc>
	{
		uint16_t temp[4][4] =
 8000eb4:	4b23      	ldr	r3, [pc, #140]	@ (8000f44 <block_create+0x368>)
 8000eb6:	f107 040c 	add.w	r4, r7, #12
 8000eba:	461d      	mov	r5, r3
 8000ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ec0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ec4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,1,0},
			{0,0,1,0},
			{0,1,1,0}};
		for(int i = 0; i < 4; i++)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000ece:	e028      	b.n	8000f22 <block_create+0x346>
		{
			for(int j = 0; j < 4; j++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000ed6:	e01b      	b.n	8000f10 <block_create+0x334>
			{
				block.mat[i][j] = temp[j][i];
 8000ed8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000edc:	009a      	lsls	r2, r3, #2
 8000ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000ee2:	4413      	add	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	33c0      	adds	r3, #192	@ 0xc0
 8000ee8:	443b      	add	r3, r7
 8000eea:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8000eee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000ef2:	009a      	lsls	r2, r3, #2
 8000ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ef8:	4413      	add	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	33c0      	adds	r3, #192	@ 0xc0
 8000efe:	443b      	add	r3, r7
 8000f00:	460a      	mov	r2, r1
 8000f02:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8000f06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000f10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	dddf      	ble.n	8000ed8 <block_create+0x2fc>
		for(int i = 0; i < 4; i++)
 8000f18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	ddd2      	ble.n	8000ed0 <block_create+0x2f4>
			}
		}
		for(int i = 0; i < 4; i++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000f30:	e036      	b.n	8000fa0 <block_create+0x3c4>
 8000f32:	bf00      	nop
 8000f34:	200000a0 	.word	0x200000a0
 8000f38:	24924925 	.word	0x24924925
 8000f3c:	080081f8 	.word	0x080081f8
 8000f40:	08008218 	.word	0x08008218
 8000f44:	08008238 	.word	0x08008238
		{
			block.x[i] = BLOCK_START_X + i*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	461a      	mov	r2, r3
 8000f50:	0052      	lsls	r2, r2, #1
 8000f52:	441a      	add	r2, r3
 8000f54:	00d2      	lsls	r2, r2, #3
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	334b      	adds	r3, #75	@ 0x4b
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f62:	3310      	adds	r3, #16
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	33c0      	adds	r3, #192	@ 0xc0
 8000f68:	443b      	add	r3, r7
 8000f6a:	f823 2c8c 	strh.w	r2, [r3, #-140]
			block.y[i] = BLOCK_START_Y + (i-1)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000f6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f72:	3b01      	subs	r3, #1
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	461a      	mov	r2, r3
 8000f78:	0052      	lsls	r2, r2, #1
 8000f7a:	441a      	add	r2, r3
 8000f7c:	00d2      	lsls	r2, r2, #3
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	3311      	adds	r3, #17
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f8a:	3314      	adds	r3, #20
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	33c0      	adds	r3, #192	@ 0xc0
 8000f90:	443b      	add	r3, r7
 8000f92:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 8000f96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	ddcf      	ble.n	8000f48 <block_create+0x36c>
		}
	}
	if(block.name == S)
 8000fa8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	d15b      	bne.n	800106a <block_create+0x48e>
	{
		uint16_t temp[4][4] =
 8000fb2:	4bba      	ldr	r3, [pc, #744]	@ (800129c <block_create+0x6c0>)
 8000fb4:	f107 040c 	add.w	r4, r7, #12
 8000fb8:	461d      	mov	r5, r3
 8000fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,1},
			{0,1,1,0}};
		for(int i = 0; i < 4; i++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000fcc:	e028      	b.n	8001020 <block_create+0x444>
		{
			for(int j = 0; j < 4; j++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000fd4:	e01b      	b.n	800100e <block_create+0x432>
			{
				block.mat[i][j] = temp[j][i];
 8000fd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000fda:	009a      	lsls	r2, r3, #2
 8000fdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000fe0:	4413      	add	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	33c0      	adds	r3, #192	@ 0xc0
 8000fe6:	443b      	add	r3, r7
 8000fe8:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8000fec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ff0:	009a      	lsls	r2, r3, #2
 8000ff2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000ff6:	4413      	add	r3, r2
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	33c0      	adds	r3, #192	@ 0xc0
 8000ffc:	443b      	add	r3, r7
 8000ffe:	460a      	mov	r2, r1
 8001000:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 8001004:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001008:	3301      	adds	r3, #1
 800100a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800100e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001012:	2b03      	cmp	r3, #3
 8001014:	dddf      	ble.n	8000fd6 <block_create+0x3fa>
		for(int i = 0; i < 4; i++)
 8001016:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800101a:	3301      	adds	r3, #1
 800101c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001020:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001024:	2b03      	cmp	r3, #3
 8001026:	ddd2      	ble.n	8000fce <block_create+0x3f2>
			}
		}
		for(int i = 0; i < 4; i++)
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800102e:	e018      	b.n	8001062 <block_create+0x486>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8001030:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001034:	3b02      	subs	r3, #2
 8001036:	b29b      	uxth	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	0052      	lsls	r2, r2, #1
 800103c:	441a      	add	r2, r3
 800103e:	00d2      	lsls	r2, r2, #3
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	b29b      	uxth	r3, r3
 8001044:	3311      	adds	r3, #17
 8001046:	b29a      	uxth	r2, r3
 8001048:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800104c:	3314      	adds	r3, #20
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	33c0      	adds	r3, #192	@ 0xc0
 8001052:	443b      	add	r3, r7
 8001054:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 8001058:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800105c:	3301      	adds	r3, #1
 800105e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001062:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001066:	2b03      	cmp	r3, #3
 8001068:	dde2      	ble.n	8001030 <block_create+0x454>
		}
	}
	if(block.name == Z)
 800106a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b04      	cmp	r3, #4
 8001072:	d15b      	bne.n	800112c <block_create+0x550>
	{
		uint16_t temp[4][4] =
 8001074:	4b8a      	ldr	r3, [pc, #552]	@ (80012a0 <block_create+0x6c4>)
 8001076:	f107 040c 	add.w	r4, r7, #12
 800107a:	461d      	mov	r5, r3
 800107c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001080:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001084:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,1,1,0},
			{0,0,1,1}};
		for(int i = 0; i < 4; i++)
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800108e:	e028      	b.n	80010e2 <block_create+0x506>
		{
			for(int j = 0; j < 4; j++)
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001096:	e01b      	b.n	80010d0 <block_create+0x4f4>
			{
				block.mat[i][j] = temp[j][i];
 8001098:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800109c:	009a      	lsls	r2, r3, #2
 800109e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010a2:	4413      	add	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	33c0      	adds	r3, #192	@ 0xc0
 80010a8:	443b      	add	r3, r7
 80010aa:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 80010ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010b2:	009a      	lsls	r2, r3, #2
 80010b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010b8:	4413      	add	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	33c0      	adds	r3, #192	@ 0xc0
 80010be:	443b      	add	r3, r7
 80010c0:	460a      	mov	r2, r1
 80010c2:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 80010c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010ca:	3301      	adds	r3, #1
 80010cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80010d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	dddf      	ble.n	8001098 <block_create+0x4bc>
		for(int i = 0; i < 4; i++)
 80010d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010dc:	3301      	adds	r3, #1
 80010de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80010e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	ddd2      	ble.n	8001090 <block_create+0x4b4>
			}
		}
		for(int i = 0; i < 4; i++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80010f0:	e018      	b.n	8001124 <block_create+0x548>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 80010f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80010f6:	3b02      	subs	r3, #2
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	461a      	mov	r2, r3
 80010fc:	0052      	lsls	r2, r2, #1
 80010fe:	441a      	add	r2, r3
 8001100:	00d2      	lsls	r2, r2, #3
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	b29b      	uxth	r3, r3
 8001106:	3311      	adds	r3, #17
 8001108:	b29a      	uxth	r2, r3
 800110a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800110e:	3314      	adds	r3, #20
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	33c0      	adds	r3, #192	@ 0xc0
 8001114:	443b      	add	r3, r7
 8001116:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 800111a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800111e:	3301      	adds	r3, #1
 8001120:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001124:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001128:	2b03      	cmp	r3, #3
 800112a:	dde2      	ble.n	80010f2 <block_create+0x516>
		}
	}
	if(block.name == T)
 800112c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b05      	cmp	r3, #5
 8001134:	d149      	bne.n	80011ca <block_create+0x5ee>
	{
		uint16_t temp[4][4] =
 8001136:	4b5b      	ldr	r3, [pc, #364]	@ (80012a4 <block_create+0x6c8>)
 8001138:	f107 040c 	add.w	r4, r7, #12
 800113c:	461d      	mov	r5, r3
 800113e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001142:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001146:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,0},
			{0,1,1,1}};
		for(int i = 0; i < 4; i++)
 800114a:	2300      	movs	r3, #0
 800114c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800114e:	e01e      	b.n	800118e <block_create+0x5b2>
		{
			for(int j = 0; j < 4; j++)
 8001150:	2300      	movs	r3, #0
 8001152:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001154:	e015      	b.n	8001182 <block_create+0x5a6>
			{
				block.mat[i][j] = temp[j][i];
 8001156:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001158:	009a      	lsls	r2, r3, #2
 800115a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800115c:	4413      	add	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	33c0      	adds	r3, #192	@ 0xc0
 8001162:	443b      	add	r3, r7
 8001164:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8001168:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800116a:	009a      	lsls	r2, r3, #2
 800116c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800116e:	4413      	add	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	33c0      	adds	r3, #192	@ 0xc0
 8001174:	443b      	add	r3, r7
 8001176:	460a      	mov	r2, r1
 8001178:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 800117c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800117e:	3301      	adds	r3, #1
 8001180:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001182:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001184:	2b03      	cmp	r3, #3
 8001186:	dde6      	ble.n	8001156 <block_create+0x57a>
		for(int i = 0; i < 4; i++)
 8001188:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800118a:	3301      	adds	r3, #1
 800118c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800118e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001190:	2b03      	cmp	r3, #3
 8001192:	dddd      	ble.n	8001150 <block_create+0x574>
			}
		}
		for(int i = 0; i < 4; i++)
 8001194:	2300      	movs	r3, #0
 8001196:	677b      	str	r3, [r7, #116]	@ 0x74
 8001198:	e014      	b.n	80011c4 <block_create+0x5e8>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 800119a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800119c:	3b02      	subs	r3, #2
 800119e:	b29b      	uxth	r3, r3
 80011a0:	461a      	mov	r2, r3
 80011a2:	0052      	lsls	r2, r2, #1
 80011a4:	441a      	add	r2, r3
 80011a6:	00d2      	lsls	r2, r2, #3
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	3311      	adds	r3, #17
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011b2:	3314      	adds	r3, #20
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	33c0      	adds	r3, #192	@ 0xc0
 80011b8:	443b      	add	r3, r7
 80011ba:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 80011be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011c0:	3301      	adds	r3, #1
 80011c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80011c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	dde7      	ble.n	800119a <block_create+0x5be>
		}
	}
	if(block.name == I)
 80011ca:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b06      	cmp	r3, #6
 80011d2:	d149      	bne.n	8001268 <block_create+0x68c>
	{
		uint16_t temp[4][4] =
 80011d4:	4b34      	ldr	r3, [pc, #208]	@ (80012a8 <block_create+0x6cc>)
 80011d6:	f107 040c 	add.w	r4, r7, #12
 80011da:	461d      	mov	r5, r3
 80011dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0},
			{1,1,1,1}};
		for(int i = 0; i < 4; i++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80011ec:	e01e      	b.n	800122c <block_create+0x650>
		{
			for(int j = 0; j < 4; j++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80011f2:	e015      	b.n	8001220 <block_create+0x644>
			{
				block.mat[i][j] = temp[j][i];
 80011f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011f6:	009a      	lsls	r2, r3, #2
 80011f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011fa:	4413      	add	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	33c0      	adds	r3, #192	@ 0xc0
 8001200:	443b      	add	r3, r7
 8001202:	f833 1cb4 	ldrh.w	r1, [r3, #-180]
 8001206:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001208:	009a      	lsls	r2, r3, #2
 800120a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800120c:	4413      	add	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	33c0      	adds	r3, #192	@ 0xc0
 8001212:	443b      	add	r3, r7
 8001214:	460a      	mov	r2, r1
 8001216:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for(int j = 0; j < 4; j++)
 800121a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800121c:	3301      	adds	r3, #1
 800121e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001220:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001222:	2b03      	cmp	r3, #3
 8001224:	dde6      	ble.n	80011f4 <block_create+0x618>
		for(int i = 0; i < 4; i++)
 8001226:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001228:	3301      	adds	r3, #1
 800122a:	673b      	str	r3, [r7, #112]	@ 0x70
 800122c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800122e:	2b03      	cmp	r3, #3
 8001230:	dddd      	ble.n	80011ee <block_create+0x612>
			}
		}
		for(int i = 0; i < 4; i++)
 8001232:	2300      	movs	r3, #0
 8001234:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001236:	e014      	b.n	8001262 <block_create+0x686>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8001238:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800123a:	3b02      	subs	r3, #2
 800123c:	b29b      	uxth	r3, r3
 800123e:	461a      	mov	r2, r3
 8001240:	0052      	lsls	r2, r2, #1
 8001242:	441a      	add	r2, r3
 8001244:	00d2      	lsls	r2, r2, #3
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	b29b      	uxth	r3, r3
 800124a:	3311      	adds	r3, #17
 800124c:	b29a      	uxth	r2, r3
 800124e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001250:	3314      	adds	r3, #20
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	33c0      	adds	r3, #192	@ 0xc0
 8001256:	443b      	add	r3, r7
 8001258:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for(int i = 0; i < 4; i++)
 800125c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800125e:	3301      	adds	r3, #1
 8001260:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001262:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001264:	2b03      	cmp	r3, #3
 8001266:	dde7      	ble.n	8001238 <block_create+0x65c>
		}
	}
	return block;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800126e:	469c      	mov	ip, r3
 8001270:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001274:	4665      	mov	r5, ip
 8001276:	4626      	mov	r6, r4
 8001278:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800127a:	6028      	str	r0, [r5, #0]
 800127c:	6069      	str	r1, [r5, #4]
 800127e:	60aa      	str	r2, [r5, #8]
 8001280:	60eb      	str	r3, [r5, #12]
 8001282:	3410      	adds	r4, #16
 8001284:	f10c 0c10 	add.w	ip, ip, #16
 8001288:	4574      	cmp	r4, lr
 800128a:	d1f3      	bne.n	8001274 <block_create+0x698>
 800128c:	4663      	mov	r3, ip
 800128e:	4622      	mov	r2, r4
 8001290:	6810      	ldr	r0, [r2, #0]
 8001292:	6018      	str	r0, [r3, #0]
}
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	37c4      	adds	r7, #196	@ 0xc4
 8001298:	46bd      	mov	sp, r7
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129c:	08008258 	.word	0x08008258
 80012a0:	08008278 	.word	0x08008278
 80012a4:	08008298 	.word	0x08008298
 80012a8:	080082b8 	.word	0x080082b8

080012ac <map_init>:

map_t map_init()
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80012b8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80012bc:	6018      	str	r0, [r3, #0]
	volatile map_t map = {0};
 80012be:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80012c2:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80012c6:	4618      	mov	r0, r3
 80012c8:	f240 2336 	movw	r3, #566	@ 0x236
 80012cc:	461a      	mov	r2, r3
 80012ce:	2100      	movs	r1, #0
 80012d0:	f006 ff4c 	bl	800816c <memset>
	for(int i = 0; i < 10; i++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 80012da:	e019      	b.n	8001310 <map_init+0x64>
	{
		map.x[i] = LEFT_EDGE + i*BLOCK_WIDTH;
 80012dc:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	0052      	lsls	r2, r2, #1
 80012e6:	441a      	add	r2, r3
 80012e8:	00d2      	lsls	r2, r2, #3
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	3306      	adds	r3, #6
 80012f0:	b299      	uxth	r1, r3
 80012f2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80012f6:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80012fa:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 80012fe:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001302:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 10; i++)
 8001306:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800130a:	3301      	adds	r3, #1
 800130c:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8001310:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8001314:	2b09      	cmp	r3, #9
 8001316:	dde1      	ble.n	80012dc <map_init+0x30>
	}
	for(int i = 0; i < 13; i++)
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 800131e:	e01b      	b.n	8001358 <map_init+0xac>
	{
		map.y[i] = MAP_DIFFERENCE + EDGE_WIDTH + i*BLOCK_WIDTH + 2;
 8001320:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001324:	b29b      	uxth	r3, r3
 8001326:	461a      	mov	r2, r3
 8001328:	0052      	lsls	r2, r2, #1
 800132a:	441a      	add	r2, r3
 800132c:	00d2      	lsls	r2, r2, #3
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	b29b      	uxth	r3, r3
 8001332:	3311      	adds	r3, #17
 8001334:	b299      	uxth	r1, r3
 8001336:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800133a:	f5a3 7210 	sub.w	r2, r3, #576	@ 0x240
 800133e:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001342:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	460a      	mov	r2, r1
 800134c:	809a      	strh	r2, [r3, #4]
	for(int i = 0; i < 13; i++)
 800134e:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001352:	3301      	adds	r3, #1
 8001354:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8001358:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800135c:	2b0c      	cmp	r3, #12
 800135e:	dddf      	ble.n	8001320 <map_init+0x74>
	}
	return map;
 8001360:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001364:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800136e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f240 2336 	movw	r3, #566	@ 0x236
 800137a:	461a      	mov	r2, r3
 800137c:	f006 ff22 	bl	80081c4 <memcpy>
}
 8001380:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001384:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001388:	6818      	ldr	r0, [r3, #0]
 800138a:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <collision>:

uint8_t collision(block_t *block, map_t* map, uint8_t dir)
{
 8001392:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001394:	f5ad 7d2d 	sub.w	sp, sp, #692	@ 0x2b4
 8001398:	af00      	add	r7, sp, #0
 800139a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800139e:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80013a2:	6018      	str	r0, [r3, #0]
 80013a4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80013a8:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80013ac:	6019      	str	r1, [r3, #0]
 80013ae:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80013b2:	f2a3 23a9 	subw	r3, r3, #681	@ 0x2a9
 80013b6:	701a      	strb	r2, [r3, #0]
	volatile block_t temp_tetromino = *block;
 80013b8:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80013bc:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	461c      	mov	r4, r3
 80013c4:	f507 7616 	add.w	r6, r7, #600	@ 0x258
 80013c8:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80013cc:	4635      	mov	r5, r6
 80013ce:	4623      	mov	r3, r4
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	6859      	ldr	r1, [r3, #4]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013da:	3410      	adds	r4, #16
 80013dc:	3610      	adds	r6, #16
 80013de:	4564      	cmp	r4, ip
 80013e0:	d1f4      	bne.n	80013cc <collision+0x3a>
 80013e2:	4633      	mov	r3, r6
 80013e4:	4622      	mov	r2, r4
 80013e6:	6810      	ldr	r0, [r2, #0]
 80013e8:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 80013ea:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80013ee:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 80013f2:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80013f6:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	f240 2336 	movw	r3, #566	@ 0x236
 8001404:	461a      	mov	r2, r3
 8001406:	f006 fedd 	bl	80081c4 <memcpy>

	uint16_t y_coor[4];
	uint16_t x_coor[4];
	uint8_t ind = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	f887 32af 	strb.w	r3, [r7, #687]	@ 0x2af

	for(int i = 0; i < 4; i++)
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8001416:	e049      	b.n	80014ac <collision+0x11a>
	{
		for(int j = 0; j < 4; j++)
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 800141e:	e03c      	b.n	800149a <collision+0x108>
		{
			if(temp_tetromino.mat[i][j])
 8001420:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8001424:	009a      	lsls	r2, r3, #2
 8001426:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800142a:	4413      	add	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8001432:	443b      	add	r3, r7
 8001434:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8001438:	b29b      	uxth	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d028      	beq.n	8001490 <collision+0xfe>
			{
				x_coor[ind] = temp_tetromino.x[i];
 800143e:	f897 22af 	ldrb.w	r2, [r7, #687]	@ 0x2af
 8001442:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8001446:	3310      	adds	r3, #16
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800144e:	443b      	add	r3, r7
 8001450:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8001454:	b299      	uxth	r1, r3
 8001456:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800145a:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800145e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				y_coor[ind] = temp_tetromino.y[j];
 8001462:	f897 22af 	ldrb.w	r2, [r7, #687]	@ 0x2af
 8001466:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800146a:	3314      	adds	r3, #20
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8001472:	443b      	add	r3, r7
 8001474:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8001478:	b299      	uxth	r1, r3
 800147a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800147e:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001482:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				ind++;
 8001486:	f897 32af 	ldrb.w	r3, [r7, #687]	@ 0x2af
 800148a:	3301      	adds	r3, #1
 800148c:	f887 32af 	strb.w	r3, [r7, #687]	@ 0x2af
		for(int j = 0; j < 4; j++)
 8001490:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8001494:	3301      	adds	r3, #1
 8001496:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 800149a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800149e:	2b03      	cmp	r3, #3
 80014a0:	ddbe      	ble.n	8001420 <collision+0x8e>
	for(int i = 0; i < 4; i++)
 80014a2:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 80014a6:	3301      	adds	r3, #1
 80014a8:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 80014ac:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	ddb1      	ble.n	8001418 <collision+0x86>
			}
		}
	}

	if(dir == LEFT)
 80014b4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80014b8:	f2a3 23a9 	subw	r3, r3, #681	@ 0x2a9
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f040 80f4 	bne.w	80016ac <collision+0x31a>
	{
		for(int i = 0; i < 10; i++)
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 80014ca:	e0cc      	b.n	8001666 <collision+0x2d4>
		{
			for(int j = 0; j < 13; j++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 80014d2:	e0be      	b.n	8001652 <collision+0x2c0>
			{
				if(temp_map.map_mat[i][j])
 80014d4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80014d8:	f5a3 7124 	sub.w	r1, r3, #656	@ 0x290
 80014dc:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80014e0:	4613      	mov	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 80014ee:	4413      	add	r3, r2
 80014f0:	3380      	adds	r3, #128	@ 0x80
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	440b      	add	r3, r1
 80014f6:	889b      	ldrh	r3, [r3, #4]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 80a4 	beq.w	8001648 <collision+0x2b6>
				{
					if(temp_map.x[i] == x_coor[0] - BLOCK_WIDTH && temp_map.y[j] == y_coor[0])
 8001500:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001504:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001508:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 800150c:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001510:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001514:	b29b      	uxth	r3, r3
 8001516:	461a      	mov	r2, r3
 8001518:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800151c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	3b17      	subs	r3, #23
 8001524:	429a      	cmp	r2, r3
 8001526:	d114      	bne.n	8001552 <collision+0x1c0>
 8001528:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800152c:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001530:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001534:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	889b      	ldrh	r3, [r3, #4]
 800153e:	b29a      	uxth	r2, r3
 8001540:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001544:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d101      	bne.n	8001552 <collision+0x1c0>
					{
						return 1;
 800154e:	2301      	movs	r3, #1
 8001550:	e2ad      	b.n	8001aae <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[1] - BLOCK_WIDTH && temp_map.y[j] == y_coor[1])
 8001552:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001556:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 800155a:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 800155e:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001562:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001566:	b29b      	uxth	r3, r3
 8001568:	461a      	mov	r2, r3
 800156a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800156e:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001572:	885b      	ldrh	r3, [r3, #2]
 8001574:	3b17      	subs	r3, #23
 8001576:	429a      	cmp	r2, r3
 8001578:	d114      	bne.n	80015a4 <collision+0x212>
 800157a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800157e:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001582:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001586:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4413      	add	r3, r2
 800158e:	889b      	ldrh	r3, [r3, #4]
 8001590:	b29a      	uxth	r2, r3
 8001592:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001596:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 800159a:	885b      	ldrh	r3, [r3, #2]
 800159c:	429a      	cmp	r2, r3
 800159e:	d101      	bne.n	80015a4 <collision+0x212>
					{
						return 1;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e284      	b.n	8001aae <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[2] - BLOCK_WIDTH && temp_map.y[j] == y_coor[2])
 80015a4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80015a8:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80015ac:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80015b0:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80015b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80015c0:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80015c4:	889b      	ldrh	r3, [r3, #4]
 80015c6:	3b17      	subs	r3, #23
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d114      	bne.n	80015f6 <collision+0x264>
 80015cc:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80015d0:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 80015d4:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80015d8:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	889b      	ldrh	r3, [r3, #4]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80015e8:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80015ec:	889b      	ldrh	r3, [r3, #4]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d101      	bne.n	80015f6 <collision+0x264>
					{
						return 1;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e25b      	b.n	8001aae <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[3] - BLOCK_WIDTH && temp_map.y[j] == y_coor[3])
 80015f6:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80015fa:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80015fe:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 8001602:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001606:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800160a:	b29b      	uxth	r3, r3
 800160c:	461a      	mov	r2, r3
 800160e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001612:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001616:	88db      	ldrh	r3, [r3, #6]
 8001618:	3b17      	subs	r3, #23
 800161a:	429a      	cmp	r2, r3
 800161c:	d114      	bne.n	8001648 <collision+0x2b6>
 800161e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001622:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001626:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 800162a:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4413      	add	r3, r2
 8001632:	889b      	ldrh	r3, [r3, #4]
 8001634:	b29a      	uxth	r2, r3
 8001636:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800163a:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 800163e:	88db      	ldrh	r3, [r3, #6]
 8001640:	429a      	cmp	r2, r3
 8001642:	d101      	bne.n	8001648 <collision+0x2b6>
					{
						return 1;
 8001644:	2301      	movs	r3, #1
 8001646:	e232      	b.n	8001aae <collision+0x71c>
			for(int j = 0; j < 13; j++)
 8001648:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 800164c:	3301      	adds	r3, #1
 800164e:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8001652:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001656:	2b0c      	cmp	r3, #12
 8001658:	f77f af3c 	ble.w	80014d4 <collision+0x142>
		for(int i = 0; i < 10; i++)
 800165c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001660:	3301      	adds	r3, #1
 8001662:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8001666:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800166a:	2b09      	cmp	r3, #9
 800166c:	f77f af2e 	ble.w	80014cc <collision+0x13a>
					}
				}
			}
		}
		if(x_coor[0] == LEFT_EDGE || x_coor[1] == LEFT_EDGE || x_coor[2] == LEFT_EDGE || x_coor[3] == LEFT_EDGE)
 8001670:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001674:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	2b06      	cmp	r3, #6
 800167c:	d014      	beq.n	80016a8 <collision+0x316>
 800167e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001682:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001686:	885b      	ldrh	r3, [r3, #2]
 8001688:	2b06      	cmp	r3, #6
 800168a:	d00d      	beq.n	80016a8 <collision+0x316>
 800168c:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001690:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001694:	889b      	ldrh	r3, [r3, #4]
 8001696:	2b06      	cmp	r3, #6
 8001698:	d006      	beq.n	80016a8 <collision+0x316>
 800169a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800169e:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80016a2:	88db      	ldrh	r3, [r3, #6]
 80016a4:	2b06      	cmp	r3, #6
 80016a6:	d101      	bne.n	80016ac <collision+0x31a>
		{
			return 1;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e200      	b.n	8001aae <collision+0x71c>
		}
	}

	if(dir == RIGHT)
 80016ac:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80016b0:	f2a3 23a9 	subw	r3, r3, #681	@ 0x2a9
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	f040 80f4 	bne.w	80018a4 <collision+0x512>
	{
		for(int i = 0; i < 10; i++)
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 80016c2:	e0cc      	b.n	800185e <collision+0x4cc>
		{
			for(int j = 0; j < 13; j++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 80016ca:	e0be      	b.n	800184a <collision+0x4b8>
			{
				if(temp_map.map_mat[i][j])
 80016cc:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80016d0:	f5a3 7124 	sub.w	r1, r3, #656	@ 0x290
 80016d4:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 80016e6:	4413      	add	r3, r2
 80016e8:	3380      	adds	r3, #128	@ 0x80
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	440b      	add	r3, r1
 80016ee:	889b      	ldrh	r3, [r3, #4]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 80a4 	beq.w	8001840 <collision+0x4ae>
				{
					if(temp_map.x[i] == x_coor[0] + BLOCK_WIDTH && temp_map.y[j] == y_coor[0])
 80016f8:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80016fc:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001700:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001704:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001708:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800170c:	b29b      	uxth	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001714:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	3317      	adds	r3, #23
 800171c:	429a      	cmp	r2, r3
 800171e:	d114      	bne.n	800174a <collision+0x3b8>
 8001720:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001724:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001728:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 800172c:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	889b      	ldrh	r3, [r3, #4]
 8001736:	b29a      	uxth	r2, r3
 8001738:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800173c:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d101      	bne.n	800174a <collision+0x3b8>
					{
						return 1;
 8001746:	2301      	movs	r3, #1
 8001748:	e1b1      	b.n	8001aae <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[1] + BLOCK_WIDTH && temp_map.y[j] == y_coor[1])
 800174a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800174e:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001752:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001756:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 800175a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800175e:	b29b      	uxth	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001766:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800176a:	885b      	ldrh	r3, [r3, #2]
 800176c:	3317      	adds	r3, #23
 800176e:	429a      	cmp	r2, r3
 8001770:	d114      	bne.n	800179c <collision+0x40a>
 8001772:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001776:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 800177a:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 800177e:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	889b      	ldrh	r3, [r3, #4]
 8001788:	b29a      	uxth	r2, r3
 800178a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800178e:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001792:	885b      	ldrh	r3, [r3, #2]
 8001794:	429a      	cmp	r2, r3
 8001796:	d101      	bne.n	800179c <collision+0x40a>
					{
						return 1;
 8001798:	2301      	movs	r3, #1
 800179a:	e188      	b.n	8001aae <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[2] + BLOCK_WIDTH && temp_map.y[j] == y_coor[2])
 800179c:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80017a0:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80017a4:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 80017a8:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80017ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	461a      	mov	r2, r3
 80017b4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80017b8:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80017bc:	889b      	ldrh	r3, [r3, #4]
 80017be:	3317      	adds	r3, #23
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d114      	bne.n	80017ee <collision+0x45c>
 80017c4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80017c8:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 80017cc:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 80017d0:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	889b      	ldrh	r3, [r3, #4]
 80017da:	b29a      	uxth	r2, r3
 80017dc:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80017e0:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80017e4:	889b      	ldrh	r3, [r3, #4]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d101      	bne.n	80017ee <collision+0x45c>
					{
						return 1;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e15f      	b.n	8001aae <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[3] + BLOCK_WIDTH && temp_map.y[j] == y_coor[3])
 80017ee:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80017f2:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80017f6:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 80017fa:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80017fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001802:	b29b      	uxth	r3, r3
 8001804:	461a      	mov	r2, r3
 8001806:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800180a:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800180e:	88db      	ldrh	r3, [r3, #6]
 8001810:	3317      	adds	r3, #23
 8001812:	429a      	cmp	r2, r3
 8001814:	d114      	bne.n	8001840 <collision+0x4ae>
 8001816:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800181a:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 800181e:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001822:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	889b      	ldrh	r3, [r3, #4]
 800182c:	b29a      	uxth	r2, r3
 800182e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001832:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001836:	88db      	ldrh	r3, [r3, #6]
 8001838:	429a      	cmp	r2, r3
 800183a:	d101      	bne.n	8001840 <collision+0x4ae>
					{
						return 1;
 800183c:	2301      	movs	r3, #1
 800183e:	e136      	b.n	8001aae <collision+0x71c>
			for(int j = 0; j < 13; j++)
 8001840:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001844:	3301      	adds	r3, #1
 8001846:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 800184a:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 800184e:	2b0c      	cmp	r3, #12
 8001850:	f77f af3c 	ble.w	80016cc <collision+0x33a>
		for(int i = 0; i < 10; i++)
 8001854:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8001858:	3301      	adds	r3, #1
 800185a:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 800185e:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8001862:	2b09      	cmp	r3, #9
 8001864:	f77f af2e 	ble.w	80016c4 <collision+0x332>
					}
				}
			}
		}
		if(x_coor[0] == RIGHT_EDGE || x_coor[1] == RIGHT_EDGE || x_coor[2] == RIGHT_EDGE || x_coor[3] == RIGHT_EDGE)
 8001868:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800186c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	2bd5      	cmp	r3, #213	@ 0xd5
 8001874:	d014      	beq.n	80018a0 <collision+0x50e>
 8001876:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800187a:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800187e:	885b      	ldrh	r3, [r3, #2]
 8001880:	2bd5      	cmp	r3, #213	@ 0xd5
 8001882:	d00d      	beq.n	80018a0 <collision+0x50e>
 8001884:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001888:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800188c:	889b      	ldrh	r3, [r3, #4]
 800188e:	2bd5      	cmp	r3, #213	@ 0xd5
 8001890:	d006      	beq.n	80018a0 <collision+0x50e>
 8001892:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001896:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800189a:	88db      	ldrh	r3, [r3, #6]
 800189c:	2bd5      	cmp	r3, #213	@ 0xd5
 800189e:	d101      	bne.n	80018a4 <collision+0x512>
		{
			return 1;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e104      	b.n	8001aae <collision+0x71c>
		}
	}

	if(dir == DOWN)
 80018a4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018a8:	f2a3 23a9 	subw	r3, r3, #681	@ 0x2a9
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	f040 80fc 	bne.w	8001aac <collision+0x71a>
	{
		for(int i = 0; i < 10; i++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 80018ba:	e0cc      	b.n	8001a56 <collision+0x6c4>
		{
			for(int j = 0; j < 13; j++)
 80018bc:	2300      	movs	r3, #0
 80018be:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 80018c2:	e0be      	b.n	8001a42 <collision+0x6b0>
			{
				if(temp_map.map_mat[i][j])
 80018c4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018c8:	f5a3 7124 	sub.w	r1, r3, #656	@ 0x290
 80018cc:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	f8d7 228c 	ldr.w	r2, [r7, #652]	@ 0x28c
 80018de:	4413      	add	r3, r2
 80018e0:	3380      	adds	r3, #128	@ 0x80
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	440b      	add	r3, r1
 80018e6:	889b      	ldrh	r3, [r3, #4]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 80a4 	beq.w	8001a38 <collision+0x6a6>
				{
					if(temp_map.x[i] == x_coor[0] && temp_map.y[j] == y_coor[0] + BLOCK_WIDTH)
 80018f0:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80018f4:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80018f8:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 80018fc:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001900:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001904:	b29a      	uxth	r2, r3
 8001906:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800190a:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d116      	bne.n	8001942 <collision+0x5b0>
 8001914:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001918:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 800191c:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8001920:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	889b      	ldrh	r3, [r3, #4]
 800192a:	b29b      	uxth	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001932:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	3317      	adds	r3, #23
 800193a:	429a      	cmp	r2, r3
 800193c:	d101      	bne.n	8001942 <collision+0x5b0>
					{
						return 1;
 800193e:	2301      	movs	r3, #1
 8001940:	e0b5      	b.n	8001aae <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[1] && temp_map.y[j] == y_coor[1] + BLOCK_WIDTH)
 8001942:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001946:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 800194a:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 800194e:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001952:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001956:	b29a      	uxth	r2, r3
 8001958:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800195c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001960:	885b      	ldrh	r3, [r3, #2]
 8001962:	429a      	cmp	r2, r3
 8001964:	d116      	bne.n	8001994 <collision+0x602>
 8001966:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800196a:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 800196e:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8001972:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	889b      	ldrh	r3, [r3, #4]
 800197c:	b29b      	uxth	r3, r3
 800197e:	461a      	mov	r2, r3
 8001980:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001984:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001988:	885b      	ldrh	r3, [r3, #2]
 800198a:	3317      	adds	r3, #23
 800198c:	429a      	cmp	r2, r3
 800198e:	d101      	bne.n	8001994 <collision+0x602>
					{
						return 1;
 8001990:	2301      	movs	r3, #1
 8001992:	e08c      	b.n	8001aae <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[2] && temp_map.y[j] == y_coor[2] + BLOCK_WIDTH)
 8001994:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001998:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 800199c:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 80019a0:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80019a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80019ae:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80019b2:	889b      	ldrh	r3, [r3, #4]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d116      	bne.n	80019e6 <collision+0x654>
 80019b8:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80019bc:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 80019c0:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 80019c4:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	889b      	ldrh	r3, [r3, #4]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	461a      	mov	r2, r3
 80019d2:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80019d6:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80019da:	889b      	ldrh	r3, [r3, #4]
 80019dc:	3317      	adds	r3, #23
 80019de:	429a      	cmp	r2, r3
 80019e0:	d101      	bne.n	80019e6 <collision+0x654>
					{
						return 1;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e063      	b.n	8001aae <collision+0x71c>
					}
					else if(temp_map.x[i] == x_coor[3] && temp_map.y[j] == y_coor[3] + BLOCK_WIDTH)
 80019e6:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80019ea:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80019ee:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 80019f2:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80019f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a00:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001a04:	88db      	ldrh	r3, [r3, #6]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d116      	bne.n	8001a38 <collision+0x6a6>
 8001a0a:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a0e:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8001a12:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8001a16:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	889b      	ldrh	r3, [r3, #4]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a28:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001a2c:	88db      	ldrh	r3, [r3, #6]
 8001a2e:	3317      	adds	r3, #23
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d101      	bne.n	8001a38 <collision+0x6a6>
					{
						return 1;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e03a      	b.n	8001aae <collision+0x71c>
			for(int j = 0; j < 13; j++)
 8001a38:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8001a42:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8001a46:	2b0c      	cmp	r3, #12
 8001a48:	f77f af3c 	ble.w	80018c4 <collision+0x532>
		for(int i = 0; i < 10; i++)
 8001a4c:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001a50:	3301      	adds	r3, #1
 8001a52:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001a56:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001a5a:	2b09      	cmp	r3, #9
 8001a5c:	f77f af2e 	ble.w	80018bc <collision+0x52a>
					}
				}
			}
		}
		if(y_coor[0] == BOTTOM_ROW || y_coor[1] == BOTTOM_ROW || y_coor[2] == BOTTOM_ROW || y_coor[3] == BOTTOM_ROW)
 8001a60:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a64:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	f240 1225 	movw	r2, #293	@ 0x125
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d01a      	beq.n	8001aa8 <collision+0x716>
 8001a72:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a76:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001a7a:	885b      	ldrh	r3, [r3, #2]
 8001a7c:	f240 1225 	movw	r2, #293	@ 0x125
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d011      	beq.n	8001aa8 <collision+0x716>
 8001a84:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a88:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001a8c:	889b      	ldrh	r3, [r3, #4]
 8001a8e:	f240 1225 	movw	r2, #293	@ 0x125
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d008      	beq.n	8001aa8 <collision+0x716>
 8001a96:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8001a9a:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001a9e:	88db      	ldrh	r3, [r3, #6]
 8001aa0:	f240 1225 	movw	r2, #293	@ 0x125
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d101      	bne.n	8001aac <collision+0x71a>
		{
			return 1;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <collision+0x71c>
		}
	}
	return 0;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ab8 <map_update>:

map_t map_update(block_t *block, map_t* map)
{
 8001ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aba:	f5ad 7d2b 	sub.w	sp, sp, #684	@ 0x2ac
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001ac4:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001ac8:	6018      	str	r0, [r3, #0]
 8001aca:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001ace:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001ad2:	6019      	str	r1, [r3, #0]
 8001ad4:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001ad8:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001adc:	601a      	str	r2, [r3, #0]
	//append the map array with the new blocks in their respective coordinates
	//create new block
	volatile block_t temp_tetromino = *block;
 8001ade:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001ae2:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	461c      	mov	r4, r3
 8001aea:	f507 7617 	add.w	r6, r7, #604	@ 0x25c
 8001aee:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8001af2:	4635      	mov	r5, r6
 8001af4:	4623      	mov	r3, r4
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	6859      	ldr	r1, [r3, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b00:	3410      	adds	r4, #16
 8001b02:	3610      	adds	r6, #16
 8001b04:	4564      	cmp	r4, ip
 8001b06:	d1f4      	bne.n	8001af2 <map_update+0x3a>
 8001b08:	4633      	mov	r3, r6
 8001b0a:	4622      	mov	r2, r4
 8001b0c:	6810      	ldr	r0, [r2, #0]
 8001b0e:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 8001b10:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001b14:	f5a3 7221 	sub.w	r2, r3, #644	@ 0x284
 8001b18:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001b1c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4610      	mov	r0, r2
 8001b24:	4619      	mov	r1, r3
 8001b26:	f240 2336 	movw	r3, #566	@ 0x236
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f006 fb4a 	bl	80081c4 <memcpy>

	uint16_t y_coor[4];
	uint16_t x_coor[4];
	uint8_t ind = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7

	for(int i = 0; i < 4; i++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8001b3c:	e049      	b.n	8001bd2 <map_update+0x11a>
	{
		for(int j = 0; j < 4; j++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8001b44:	e03c      	b.n	8001bc0 <map_update+0x108>
		{
			if(temp_tetromino.mat[i][j])
 8001b46:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001b4a:	009a      	lsls	r2, r3, #2
 8001b4c:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001b50:	4413      	add	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8001b58:	443b      	add	r3, r7
 8001b5a:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d028      	beq.n	8001bb6 <map_update+0xfe>
			{
				x_coor[ind] = temp_tetromino.x[i];
 8001b64:	f897 22a7 	ldrb.w	r2, [r7, #679]	@ 0x2a7
 8001b68:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001b6c:	3310      	adds	r3, #16
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8001b74:	443b      	add	r3, r7
 8001b76:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8001b7a:	b299      	uxth	r1, r3
 8001b7c:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001b80:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8001b84:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				y_coor[ind] = temp_tetromino.y[j];
 8001b88:	f897 22a7 	ldrb.w	r2, [r7, #679]	@ 0x2a7
 8001b8c:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001b90:	3314      	adds	r3, #20
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8001b98:	443b      	add	r3, r7
 8001b9a:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001ba4:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001ba8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				ind++;
 8001bac:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		for(int j = 0; j < 4; j++)
 8001bb6:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8001bc0:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	ddbe      	ble.n	8001b46 <map_update+0x8e>
	for(int i = 0; i < 4; i++)
 8001bc8:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001bcc:	3301      	adds	r3, #1
 8001bce:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8001bd2:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	ddb1      	ble.n	8001b3e <map_update+0x86>
		}
	}

	//get indices for the map coordinates corresponding to the block coordinates
	//set the map logical matrix, and the color
	uint8_t index = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 329b 	strb.w	r3, [r7, #667]	@ 0x29b
	for(int i = 0; i < 10; i++)
 8001be0:	2300      	movs	r3, #0
 8001be2:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8001be6:	e068      	b.n	8001cba <map_update+0x202>
	{
		for(int j = 0; j < 13; j++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001bee:	e05b      	b.n	8001ca8 <map_update+0x1f0>
		{
			if(temp_map.x[i] == x_coor[index] && temp_map.y[j] == y_coor[index])
 8001bf0:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001bf4:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001bf8:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8001bfc:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001c00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	f897 129b 	ldrb.w	r1, [r7, #667]	@ 0x29b
 8001c0a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001c0e:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8001c12:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d141      	bne.n	8001c9e <map_update+0x1e6>
 8001c1a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001c1e:	f5a3 7221 	sub.w	r2, r3, #644	@ 0x284
 8001c22:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001c26:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	889b      	ldrh	r3, [r3, #4]
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	f897 129b 	ldrb.w	r1, [r7, #667]	@ 0x29b
 8001c36:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001c3a:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001c3e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d12b      	bne.n	8001c9e <map_update+0x1e6>
			{
				temp_map.map_mat[i][j] = ON;
 8001c46:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001c4a:	f5a3 7121 	sub.w	r1, r3, #644	@ 0x284
 8001c4e:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 8001c60:	4413      	add	r3, r2
 8001c62:	3380      	adds	r3, #128	@ 0x80
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	440b      	add	r3, r1
 8001c68:	2201      	movs	r2, #1
 8001c6a:	809a      	strh	r2, [r3, #4]
				temp_map.map_color[i][j] = temp_tetromino.color;
 8001c6c:	f8b7 325e 	ldrh.w	r3, [r7, #606]	@ 0x25e
 8001c70:	b298      	uxth	r0, r3
 8001c72:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001c76:	f5a3 7121 	sub.w	r1, r3, #644	@ 0x284
 8001c7a:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 8001c8c:	4413      	add	r3, r2
 8001c8e:	4602      	mov	r2, r0
 8001c90:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				index++;
 8001c94:	f897 329b 	ldrb.w	r3, [r7, #667]	@ 0x29b
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f887 329b 	strb.w	r3, [r7, #667]	@ 0x29b
		for(int j = 0; j < 13; j++)
 8001c9e:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001ca8:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001cac:	2b0c      	cmp	r3, #12
 8001cae:	dd9f      	ble.n	8001bf0 <map_update+0x138>
	for(int i = 0; i < 10; i++)
 8001cb0:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8001cba:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001cbe:	2b09      	cmp	r3, #9
 8001cc0:	dd92      	ble.n	8001be8 <map_update+0x130>
			}
		}
	}

	return temp_map;
 8001cc2:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001cc6:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001cd0:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f240 2336 	movw	r3, #566	@ 0x236
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f006 fa71 	bl	80081c4 <memcpy>
}
 8001ce2:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001ce6:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	f507 772b 	add.w	r7, r7, #684	@ 0x2ac
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cf4 <block_rotate>:

block_t block_rotate(block_t *block)
{
 8001cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf6:	b0a9      	sub	sp, #164	@ 0xa4
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
	block_t temp_block = *block;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	461c      	mov	r4, r3
 8001d02:	f107 0640 	add.w	r6, r7, #64	@ 0x40
 8001d06:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8001d0a:	4635      	mov	r5, r6
 8001d0c:	4623      	mov	r3, r4
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	6859      	ldr	r1, [r3, #4]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d18:	3410      	adds	r4, #16
 8001d1a:	3610      	adds	r6, #16
 8001d1c:	4564      	cmp	r4, ip
 8001d1e:	d1f4      	bne.n	8001d0a <block_rotate+0x16>
 8001d20:	4633      	mov	r3, r6
 8001d22:	4622      	mov	r2, r4
 8001d24:	6810      	ldr	r0, [r2, #0]
 8001d26:	6018      	str	r0, [r3, #0]
	if(temp_block.name == O)
 8001d28:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d116      	bne.n	8001d60 <block_rotate+0x6c>
	{
		return temp_block;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001d38:	469c      	mov	ip, r3
 8001d3a:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001d3e:	4665      	mov	r5, ip
 8001d40:	4626      	mov	r6, r4
 8001d42:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d44:	6028      	str	r0, [r5, #0]
 8001d46:	6069      	str	r1, [r5, #4]
 8001d48:	60aa      	str	r2, [r5, #8]
 8001d4a:	60eb      	str	r3, [r5, #12]
 8001d4c:	3410      	adds	r4, #16
 8001d4e:	f10c 0c10 	add.w	ip, ip, #16
 8001d52:	4574      	cmp	r4, lr
 8001d54:	d1f3      	bne.n	8001d3e <block_rotate+0x4a>
 8001d56:	4663      	mov	r3, ip
 8001d58:	4622      	mov	r2, r4
 8001d5a:	6810      	ldr	r0, [r2, #0]
 8001d5c:	6018      	str	r0, [r3, #0]
 8001d5e:	e15e      	b.n	800201e <block_rotate+0x32a>
	}

	if(temp_block.name == I)
 8001d60:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d163      	bne.n	8001e32 <block_rotate+0x13e>
	{
		uint8_t transpose[4][4];
		for(int i = 0; i < 4; i++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001d70:	e029      	b.n	8001dc6 <block_rotate+0xd2>
		{
			for(int j = 0; j < 4; j++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001d78:	e01c      	b.n	8001db4 <block_rotate+0xc0>
			{
				transpose[i][j] = temp_block.mat[j][i];
 8001d7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d7e:	009a      	lsls	r2, r3, #2
 8001d80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d84:	4413      	add	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	33a0      	adds	r3, #160	@ 0xa0
 8001d8a:	443b      	add	r3, r7
 8001d8c:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	b2d9      	uxtb	r1, r3
 8001d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	33a0      	adds	r3, #160	@ 0xa0
 8001d9c:	19da      	adds	r2, r3, r7
 8001d9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001da2:	4413      	add	r3, r2
 8001da4:	3b70      	subs	r3, #112	@ 0x70
 8001da6:	460a      	mov	r2, r1
 8001da8:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 4; j++)
 8001daa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001dae:	3301      	adds	r3, #1
 8001db0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001db4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	ddde      	ble.n	8001d7a <block_rotate+0x86>
		for(int i = 0; i < 4; i++)
 8001dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001dc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	ddd1      	ble.n	8001d72 <block_rotate+0x7e>
			}
		}
		for(int i = 0; i < 4; i++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001dd4:	e028      	b.n	8001e28 <block_rotate+0x134>
		{
			for(int j = 0; j < 4; j++)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001ddc:	e01b      	b.n	8001e16 <block_rotate+0x122>
			{
				temp_block.mat[i][j] = transpose[i][j];
 8001dde:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	33a0      	adds	r3, #160	@ 0xa0
 8001de6:	19da      	adds	r2, r3, r7
 8001de8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001dec:	4413      	add	r3, r2
 8001dee:	3b70      	subs	r3, #112	@ 0x70
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	4619      	mov	r1, r3
 8001df4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001df8:	009a      	lsls	r2, r3, #2
 8001dfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001dfe:	4413      	add	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	33a0      	adds	r3, #160	@ 0xa0
 8001e04:	443b      	add	r3, r7
 8001e06:	460a      	mov	r2, r1
 8001e08:	f823 2c5c 	strh.w	r2, [r3, #-92]
			for(int j = 0; j < 4; j++)
 8001e0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e10:	3301      	adds	r3, #1
 8001e12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	dddf      	ble.n	8001dde <block_rotate+0xea>
		for(int i = 0; i < 4; i++)
 8001e1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e22:	3301      	adds	r3, #1
 8001e24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001e28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	ddd2      	ble.n	8001dd6 <block_rotate+0xe2>
 8001e30:	e0df      	b.n	8001ff2 <block_rotate+0x2fe>
			}
		}
	}


	else if(temp_block.name != O)
 8001e32:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80da 	beq.w	8001ff2 <block_rotate+0x2fe>
	{
		uint8_t transpose_3x3[3][3];
		uint8_t transform[3][3];
		uint8_t mirror_identity[3][3] =
 8001e3e:	4a7a      	ldr	r2, [pc, #488]	@ (8002028 <block_rotate+0x334>)
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e46:	c303      	stmia	r3!, {r0, r1}
 8001e48:	701a      	strb	r2, [r3, #0]
		{{0, 0, 1},
		{0, 1, 0},
		{1, 0, 0}};

		for(int i = 1; i < 4; i++)
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001e50:	e02d      	b.n	8001eae <block_rotate+0x1ba>
		{
			for(int j = 1; j < 4; j++)
 8001e52:	2301      	movs	r3, #1
 8001e54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001e58:	e020      	b.n	8001e9c <block_rotate+0x1a8>
			{
				transpose_3x3[i-1][j-1] = temp_block.mat[j][i];
 8001e5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e5e:	009a      	lsls	r2, r3, #2
 8001e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e64:	4413      	add	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	33a0      	adds	r3, #160	@ 0xa0
 8001e6a:	443b      	add	r3, r7
 8001e6c:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8001e70:	b298      	uxth	r0, r3
 8001e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e76:	1e5a      	subs	r2, r3, #1
 8001e78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e7c:	1e59      	subs	r1, r3, #1
 8001e7e:	b2c0      	uxtb	r0, r0
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	33a0      	adds	r3, #160	@ 0xa0
 8001e88:	443b      	add	r3, r7
 8001e8a:	440b      	add	r3, r1
 8001e8c:	3b7c      	subs	r3, #124	@ 0x7c
 8001e8e:	4602      	mov	r2, r0
 8001e90:	701a      	strb	r2, [r3, #0]
			for(int j = 1; j < 4; j++)
 8001e92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e96:	3301      	adds	r3, #1
 8001e98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001e9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	ddda      	ble.n	8001e5a <block_rotate+0x166>
		for(int i = 1; i < 4; i++)
 8001ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	ddcd      	ble.n	8001e52 <block_rotate+0x15e>
			}
		}

		for(int k = 0; k < 3; k++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001ebc:	e05b      	b.n	8001f76 <block_rotate+0x282>
		{
			for(int i = 0; i < 3; i++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001ec4:	e04e      	b.n	8001f64 <block_rotate+0x270>
			{
				transform[k][i] = 0;
 8001ec6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	33a0      	adds	r3, #160	@ 0xa0
 8001ed2:	19da      	adds	r2, r3, r7
 8001ed4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ed8:	4413      	add	r3, r2
 8001eda:	3b88      	subs	r3, #136	@ 0x88
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
				for(int j = 0; j < 3; j++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001ee4:	e036      	b.n	8001f54 <block_rotate+0x260>
				{
					transform[k][i] += (transpose_3x3[k][j] * mirror_identity[j][i]);
 8001ee6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	33a0      	adds	r3, #160	@ 0xa0
 8001ef2:	19da      	adds	r2, r3, r7
 8001ef4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ef8:	4413      	add	r3, r2
 8001efa:	3b88      	subs	r3, #136	@ 0x88
 8001efc:	7819      	ldrb	r1, [r3, #0]
 8001efe:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	33a0      	adds	r3, #160	@ 0xa0
 8001f0a:	19da      	adds	r2, r3, r7
 8001f0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f0e:	4413      	add	r3, r2
 8001f10:	3b7c      	subs	r3, #124	@ 0x7c
 8001f12:	7818      	ldrb	r0, [r3, #0]
 8001f14:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	33a0      	adds	r3, #160	@ 0xa0
 8001f1e:	19da      	adds	r2, r3, r7
 8001f20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f24:	4413      	add	r3, r2
 8001f26:	3b94      	subs	r3, #148	@ 0x94
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	fb10 f303 	smulbb	r3, r0, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	440b      	add	r3, r1
 8001f32:	b2d9      	uxtb	r1, r3
 8001f34:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	33a0      	adds	r3, #160	@ 0xa0
 8001f40:	19da      	adds	r2, r3, r7
 8001f42:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f46:	4413      	add	r3, r2
 8001f48:	3b88      	subs	r3, #136	@ 0x88
 8001f4a:	460a      	mov	r2, r1
 8001f4c:	701a      	strb	r2, [r3, #0]
				for(int j = 0; j < 3; j++)
 8001f4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f50:	3301      	adds	r3, #1
 8001f52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	ddc5      	ble.n	8001ee6 <block_rotate+0x1f2>
			for(int i = 0; i < 3; i++)
 8001f5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	ddac      	ble.n	8001ec6 <block_rotate+0x1d2>
		for(int k = 0; k < 3; k++)
 8001f6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f70:	3301      	adds	r3, #1
 8001f72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001f76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	dd9f      	ble.n	8001ebe <block_rotate+0x1ca>
				}
			}
		}

		for(int i = 0; i < 4; i++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f82:	e033      	b.n	8001fec <block_rotate+0x2f8>
		{
			for(int j = 0; j < 4; j++)
 8001f84:	2300      	movs	r3, #0
 8001f86:	677b      	str	r3, [r7, #116]	@ 0x74
 8001f88:	e02a      	b.n	8001fe0 <block_rotate+0x2ec>
			{
				if(i == 0 || j == 0)
 8001f8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <block_rotate+0x2a2>
 8001f90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10a      	bne.n	8001fac <block_rotate+0x2b8>
				{
					temp_block.mat[i][j] = 0;
 8001f96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f98:	009a      	lsls	r2, r3, #2
 8001f9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f9c:	4413      	add	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	33a0      	adds	r3, #160	@ 0xa0
 8001fa2:	443b      	add	r3, r7
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f823 2c5c 	strh.w	r2, [r3, #-92]
 8001faa:	e016      	b.n	8001fda <block_rotate+0x2e6>
				}
				else
				{
					temp_block.mat[i][j] = transform[i-1][j-1];
 8001fac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fae:	1e5a      	subs	r2, r3, #1
 8001fb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fb2:	1e59      	subs	r1, r3, #1
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	33a0      	adds	r3, #160	@ 0xa0
 8001fbc:	443b      	add	r3, r7
 8001fbe:	440b      	add	r3, r1
 8001fc0:	3b88      	subs	r3, #136	@ 0x88
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fc8:	009a      	lsls	r2, r3, #2
 8001fca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fcc:	4413      	add	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	33a0      	adds	r3, #160	@ 0xa0
 8001fd2:	443b      	add	r3, r7
 8001fd4:	460a      	mov	r2, r1
 8001fd6:	f823 2c5c 	strh.w	r2, [r3, #-92]
			for(int j = 0; j < 4; j++)
 8001fda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fdc:	3301      	adds	r3, #1
 8001fde:	677b      	str	r3, [r7, #116]	@ 0x74
 8001fe0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	ddd1      	ble.n	8001f8a <block_rotate+0x296>
		for(int i = 0; i < 4; i++)
 8001fe6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fe8:	3301      	adds	r3, #1
 8001fea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001fec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	ddc8      	ble.n	8001f84 <block_rotate+0x290>
				}
			}
		}
	}
	return temp_block;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001ffe:	4665      	mov	r5, ip
 8002000:	4626      	mov	r6, r4
 8002002:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002004:	6028      	str	r0, [r5, #0]
 8002006:	6069      	str	r1, [r5, #4]
 8002008:	60aa      	str	r2, [r5, #8]
 800200a:	60eb      	str	r3, [r5, #12]
 800200c:	3410      	adds	r4, #16
 800200e:	f10c 0c10 	add.w	ip, ip, #16
 8002012:	4574      	cmp	r4, lr
 8002014:	d1f3      	bne.n	8001ffe <block_rotate+0x30a>
 8002016:	4663      	mov	r3, ip
 8002018:	4622      	mov	r2, r4
 800201a:	6810      	ldr	r0, [r2, #0]
 800201c:	6018      	str	r0, [r3, #0]
}
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	37a4      	adds	r7, #164	@ 0xa4
 8002022:	46bd      	mov	sp, r7
 8002024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002026:	bf00      	nop
 8002028:	080082d8 	.word	0x080082d8

0800202c <block_move>:

block_t block_move(block_t *block, map_t *map, uint8_t dir)
{
 800202c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202e:	b095      	sub	sp, #84	@ 0x54
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	70fb      	strb	r3, [r7, #3]
	//when timer reaches ARR and enters IRQ handler, call this function
	//erase current and draw new tetromino
	volatile block_t temp_tetromino = *block;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	461c      	mov	r4, r3
 800203e:	f107 0614 	add.w	r6, r7, #20
 8002042:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002046:	4635      	mov	r5, r6
 8002048:	4623      	mov	r3, r4
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	6859      	ldr	r1, [r3, #4]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002054:	3410      	adds	r4, #16
 8002056:	3610      	adds	r6, #16
 8002058:	4564      	cmp	r4, ip
 800205a:	d1f4      	bne.n	8002046 <block_move+0x1a>
 800205c:	4633      	mov	r3, r6
 800205e:	4622      	mov	r2, r4
 8002060:	6810      	ldr	r0, [r2, #0]
 8002062:	6018      	str	r0, [r3, #0]
	if(dir)
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d01a      	beq.n	80020a0 <block_move+0x74>
	{
		for(int i = 0; i < 4; i++)
 800206a:	2300      	movs	r3, #0
 800206c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800206e:	e013      	b.n	8002098 <block_move+0x6c>
		{
			temp_tetromino.x[i] += BLOCK_WIDTH;
 8002070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002072:	3310      	adds	r3, #16
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	3350      	adds	r3, #80	@ 0x50
 8002078:	443b      	add	r3, r7
 800207a:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 800207e:	b29b      	uxth	r3, r3
 8002080:	3317      	adds	r3, #23
 8002082:	b29a      	uxth	r2, r3
 8002084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002086:	3310      	adds	r3, #16
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	3350      	adds	r3, #80	@ 0x50
 800208c:	443b      	add	r3, r7
 800208e:	f823 2c38 	strh.w	r2, [r3, #-56]
		for(int i = 0; i < 4; i++)
 8002092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002094:	3301      	adds	r3, #1
 8002096:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002098:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800209a:	2b03      	cmp	r3, #3
 800209c:	dde8      	ble.n	8002070 <block_move+0x44>
 800209e:	e019      	b.n	80020d4 <block_move+0xa8>
		}
	}
	else
	{
		for(int i = 0; i < 4; i++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020a4:	e013      	b.n	80020ce <block_move+0xa2>
		{
			temp_tetromino.x[i] -= BLOCK_WIDTH;
 80020a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020a8:	3310      	adds	r3, #16
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	3350      	adds	r3, #80	@ 0x50
 80020ae:	443b      	add	r3, r7
 80020b0:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	3b17      	subs	r3, #23
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020bc:	3310      	adds	r3, #16
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	3350      	adds	r3, #80	@ 0x50
 80020c2:	443b      	add	r3, r7
 80020c4:	f823 2c38 	strh.w	r2, [r3, #-56]
		for(int i = 0; i < 4; i++)
 80020c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020ca:	3301      	adds	r3, #1
 80020cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	dde8      	ble.n	80020a6 <block_move+0x7a>
		}
	}
	return temp_tetromino;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f107 0414 	add.w	r4, r7, #20
 80020da:	469c      	mov	ip, r3
 80020dc:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80020e0:	4665      	mov	r5, ip
 80020e2:	4626      	mov	r6, r4
 80020e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80020e6:	6028      	str	r0, [r5, #0]
 80020e8:	6069      	str	r1, [r5, #4]
 80020ea:	60aa      	str	r2, [r5, #8]
 80020ec:	60eb      	str	r3, [r5, #12]
 80020ee:	3410      	adds	r4, #16
 80020f0:	f10c 0c10 	add.w	ip, ip, #16
 80020f4:	4574      	cmp	r4, lr
 80020f6:	d1f3      	bne.n	80020e0 <block_move+0xb4>
 80020f8:	4663      	mov	r3, ip
 80020fa:	4622      	mov	r2, r4
 80020fc:	6810      	ldr	r0, [r2, #0]
 80020fe:	6018      	str	r0, [r3, #0]
}
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	3754      	adds	r7, #84	@ 0x54
 8002104:	46bd      	mov	sp, r7
 8002106:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002108 <draw_block>:

void draw_block(uint16_t x, uint16_t y, uint16_t color)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	80fb      	strh	r3, [r7, #6]
 8002112:	460b      	mov	r3, r1
 8002114:	80bb      	strh	r3, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	807b      	strh	r3, [r7, #2]
	for(int i = 0; i < BLOCK_WIDTH-1; i++)
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	e00c      	b.n	800213a <draw_block+0x32>
	{
		LCD_Draw_Horizontal_Line(x, y+i, BLOCK_WIDTH-1, color);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	b29a      	uxth	r2, r3
 8002124:	88bb      	ldrh	r3, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	b299      	uxth	r1, r3
 800212a:	887b      	ldrh	r3, [r7, #2]
 800212c:	88f8      	ldrh	r0, [r7, #6]
 800212e:	2216      	movs	r2, #22
 8002130:	f000 fd39 	bl	8002ba6 <LCD_Draw_Horizontal_Line>
	for(int i = 0; i < BLOCK_WIDTH-1; i++)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3301      	adds	r3, #1
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b15      	cmp	r3, #21
 800213e:	ddef      	ble.n	8002120 <draw_block+0x18>
	}
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <draw_shapes>:

void draw_shapes()
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b088      	sub	sp, #32
 800214e:	af00      	add	r7, sp, #0
	uint16_t x_offset = (LCD_PIXEL_WIDTH - (7 * (BLOCK_WIDTH * 4 + 15))) / 2;
 8002150:	f64f 7302 	movw	r3, #65282	@ 0xff02
 8002154:	80fb      	strh	r3, [r7, #6]

	// I tetromino (cyan)
	for (int i = 0; i < 4; i++)
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	e012      	b.n	8002182 <draw_shapes+0x38>
	{
	   	draw_block(6, 224 + i*BLOCK_WIDTH, LCD_COLOR_CYAN);
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	b29b      	uxth	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	0052      	lsls	r2, r2, #1
 8002164:	441a      	add	r2, r3
 8002166:	00d2      	lsls	r2, r2, #3
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	b29b      	uxth	r3, r3
 800216c:	33e0      	adds	r3, #224	@ 0xe0
 800216e:	b29b      	uxth	r3, r3
 8002170:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002174:	4619      	mov	r1, r3
 8002176:	2006      	movs	r0, #6
 8002178:	f7ff ffc6 	bl	8002108 <draw_block>
	for (int i = 0; i < 4; i++)
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	3301      	adds	r3, #1
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	2b03      	cmp	r3, #3
 8002186:	dde9      	ble.n	800215c <draw_shapes+0x12>
	}

	// L tetromino (orange)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	336b      	adds	r3, #107	@ 0x6b
 800218c:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++)
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
 8002192:	e012      	b.n	80021ba <draw_shapes+0x70>
	{
	   	draw_block(i*BLOCK_WIDTH + 144, 224 + BLOCK_WIDTH, LCD_COLOR_ORANGE);
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	b29b      	uxth	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	0052      	lsls	r2, r2, #1
 800219c:	441a      	add	r2, r3
 800219e:	00d2      	lsls	r2, r2, #3
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3390      	adds	r3, #144	@ 0x90
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	f64f 32c1 	movw	r2, #64449	@ 0xfbc1
 80021ac:	21f7      	movs	r1, #247	@ 0xf7
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ffaa 	bl	8002108 <draw_block>
	for (int i = 0; i < 3; i++)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	3301      	adds	r3, #1
 80021b8:	61bb      	str	r3, [r7, #24]
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	dde9      	ble.n	8002194 <draw_shapes+0x4a>
	}
	draw_block(190, 224, LCD_COLOR_ORANGE);
 80021c0:	f64f 32c1 	movw	r2, #64449	@ 0xfbc1
 80021c4:	21e0      	movs	r1, #224	@ 0xe0
 80021c6:	20be      	movs	r0, #190	@ 0xbe
 80021c8:	f7ff ff9e 	bl	8002108 <draw_block>

	// J tetromino (blue2)
	x_offset += BLOCK_WIDTH * 4 + 15;
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	336b      	adds	r3, #107	@ 0x6b
 80021d0:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	e013      	b.n	8002200 <draw_shapes+0xb6>
	{
	   	draw_block(75 + (i-2)*BLOCK_WIDTH, 224 + BLOCK_WIDTH, LCD_COLOR_BLUE2);
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	3b02      	subs	r3, #2
 80021dc:	b29b      	uxth	r3, r3
 80021de:	461a      	mov	r2, r3
 80021e0:	0052      	lsls	r2, r2, #1
 80021e2:	441a      	add	r2, r3
 80021e4:	00d2      	lsls	r2, r2, #3
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	334b      	adds	r3, #75	@ 0x4b
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	f240 521f 	movw	r2, #1311	@ 0x51f
 80021f2:	21f7      	movs	r1, #247	@ 0xf7
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff87 	bl	8002108 <draw_block>
	for (int i = 0; i < 3; i++)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	3301      	adds	r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2b02      	cmp	r3, #2
 8002204:	dde8      	ble.n	80021d8 <draw_shapes+0x8e>
	}
	draw_block(52 + BLOCK_WIDTH, 224 + 2*BLOCK_WIDTH, LCD_COLOR_BLUE2);
 8002206:	f240 521f 	movw	r2, #1311	@ 0x51f
 800220a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800220e:	204b      	movs	r0, #75	@ 0x4b
 8002210:	f7ff ff7a 	bl	8002108 <draw_block>

	// O tetromino (yellow)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	336b      	adds	r3, #107	@ 0x6b
 8002218:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 2; i++) {
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	e025      	b.n	800226c <draw_shapes+0x122>
	    for (int j = 0; j < 2; j++) {
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e01c      	b.n	8002260 <draw_shapes+0x116>
	       	draw_block(67 + i*BLOCK_WIDTH - 38, 270 + j*BLOCK_WIDTH, LCD_COLOR_YELLOW);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	b29b      	uxth	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	0052      	lsls	r2, r2, #1
 800222e:	441a      	add	r2, r3
 8002230:	00d2      	lsls	r2, r2, #3
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	b29b      	uxth	r3, r3
 8002236:	331d      	adds	r3, #29
 8002238:	b298      	uxth	r0, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	b29b      	uxth	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	0052      	lsls	r2, r2, #1
 8002242:	441a      	add	r2, r3
 8002244:	00d2      	lsls	r2, r2, #3
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	b29b      	uxth	r3, r3
 800224a:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 800224e:	b29b      	uxth	r3, r3
 8002250:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002254:	4619      	mov	r1, r3
 8002256:	f7ff ff57 	bl	8002108 <draw_block>
	    for (int j = 0; j < 2; j++) {
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3301      	adds	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b01      	cmp	r3, #1
 8002264:	dddf      	ble.n	8002226 <draw_shapes+0xdc>
	for (int i = 0; i < 2; i++) {
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	3301      	adds	r3, #1
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	2b01      	cmp	r3, #1
 8002270:	ddd6      	ble.n	8002220 <draw_shapes+0xd6>
	    }
	}

	// S tetromino (magenta)
	x_offset += BLOCK_WIDTH * 4 + 15;
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	336b      	adds	r3, #107	@ 0x6b
 8002276:	80fb      	strh	r3, [r7, #6]
	draw_block(144, 270 + BLOCK_WIDTH, LCD_COLOR_GREEN);
 8002278:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800227c:	f240 1125 	movw	r1, #293	@ 0x125
 8002280:	2090      	movs	r0, #144	@ 0x90
 8002282:	f7ff ff41 	bl	8002108 <draw_block>
	draw_block(144 + BLOCK_WIDTH, 270 + BLOCK_WIDTH, LCD_COLOR_GREEN);
 8002286:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800228a:	f240 1125 	movw	r1, #293	@ 0x125
 800228e:	20a7      	movs	r0, #167	@ 0xa7
 8002290:	f7ff ff3a 	bl	8002108 <draw_block>
	draw_block(144 + BLOCK_WIDTH, 270, LCD_COLOR_GREEN);
 8002294:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002298:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800229c:	20a7      	movs	r0, #167	@ 0xa7
 800229e:	f7ff ff33 	bl	8002108 <draw_block>
	draw_block(144 + BLOCK_WIDTH * 2, 270, LCD_COLOR_GREEN);
 80022a2:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80022a6:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80022aa:	20be      	movs	r0, #190	@ 0xbe
 80022ac:	f7ff ff2c 	bl	8002108 <draw_block>

	// T tetromino (purple)
	x_offset += BLOCK_WIDTH * 4 + 15;
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	336b      	adds	r3, #107	@ 0x6b
 80022b4:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 3; i++) {
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	e014      	b.n	80022e6 <draw_shapes+0x19c>
	   	draw_block(LEFT_EDGE + (i+3) * BLOCK_WIDTH, 293, LCD_COLOR_PURPLE);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	3303      	adds	r3, #3
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	0052      	lsls	r2, r2, #1
 80022c6:	441a      	add	r2, r3
 80022c8:	00d2      	lsls	r2, r2, #3
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3306      	adds	r3, #6
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	f64b 0218 	movw	r2, #47128	@ 0xb818
 80022d6:	f240 1125 	movw	r1, #293	@ 0x125
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ff14 	bl	8002108 <draw_block>
	for (int i = 0; i < 3; i++) {
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	3301      	adds	r3, #1
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	dde7      	ble.n	80022bc <draw_shapes+0x172>
	}
	draw_block(LEFT_EDGE + 4*BLOCK_WIDTH, 293 - BLOCK_WIDTH, LCD_COLOR_PURPLE);
 80022ec:	f64b 0218 	movw	r2, #47128	@ 0xb818
 80022f0:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80022f4:	2062      	movs	r0, #98	@ 0x62
 80022f6:	f7ff ff07 	bl	8002108 <draw_block>

	// Z tetromino (strawberry)
	x_offset += BLOCK_WIDTH * 4 + 15;
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	336b      	adds	r3, #107	@ 0x6b
 80022fe:	80fb      	strh	r3, [r7, #6]
	draw_block(LEFT_EDGE + 4*BLOCK_WIDTH, 247, LCD_COLOR_STRAWBERRY);
 8002300:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8002304:	21f7      	movs	r1, #247	@ 0xf7
 8002306:	2062      	movs	r0, #98	@ 0x62
 8002308:	f7ff fefe 	bl	8002108 <draw_block>
	draw_block(LEFT_EDGE + 5*BLOCK_WIDTH, 247, LCD_COLOR_STRAWBERRY);
 800230c:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8002310:	21f7      	movs	r1, #247	@ 0xf7
 8002312:	2079      	movs	r0, #121	@ 0x79
 8002314:	f7ff fef8 	bl	8002108 <draw_block>
	draw_block(LEFT_EDGE + 5*BLOCK_WIDTH, 247 + BLOCK_WIDTH, LCD_COLOR_STRAWBERRY);
 8002318:	f64f 1287 	movw	r2, #63879	@ 0xf987
 800231c:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002320:	2079      	movs	r0, #121	@ 0x79
 8002322:	f7ff fef1 	bl	8002108 <draw_block>
	draw_block(LEFT_EDGE + 6*BLOCK_WIDTH, 247 + BLOCK_WIDTH, LCD_COLOR_STRAWBERRY);
 8002326:	f64f 1287 	movw	r2, #63879	@ 0xf987
 800232a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800232e:	2090      	movs	r0, #144	@ 0x90
 8002330:	f7ff feea 	bl	8002108 <draw_block>

	// "O" shape (yellow)
	draw_block(x_offset - 50 + BLOCK_WIDTH, 246 - 9*BLOCK_WIDTH, LCD_COLOR_YELLOW);
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	3b1b      	subs	r3, #27
 8002338:	b29b      	uxth	r3, r3
 800233a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800233e:	2127      	movs	r1, #39	@ 0x27
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fee1 	bl	8002108 <draw_block>
	draw_block(x_offset - 50 , 246 - 9*BLOCK_WIDTH, LCD_COLOR_YELLOW);
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	3b32      	subs	r3, #50	@ 0x32
 800234a:	b29b      	uxth	r3, r3
 800234c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002350:	2127      	movs	r1, #39	@ 0x27
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fed8 	bl	8002108 <draw_block>
	draw_block(x_offset - 50 , 246 - 8*BLOCK_WIDTH, LCD_COLOR_YELLOW);
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	3b32      	subs	r3, #50	@ 0x32
 800235c:	b29b      	uxth	r3, r3
 800235e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002362:	213e      	movs	r1, #62	@ 0x3e
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fecf 	bl	8002108 <draw_block>
	draw_block(x_offset - 50 + BLOCK_WIDTH, 246 - 8*BLOCK_WIDTH, LCD_COLOR_YELLOW);
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	3b1b      	subs	r3, #27
 800236e:	b29b      	uxth	r3, r3
 8002370:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002374:	213e      	movs	r1, #62	@ 0x3e
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fec6 	bl	8002108 <draw_block>
}
 800237c:	bf00      	nop
 800237e:	3720      	adds	r7, #32
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <draw_tetromino>:

void draw_tetromino(block_t block)
{
 8002384:	b084      	sub	sp, #16
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	f107 0c10 	add.w	ip, r7, #16
 8002390:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i < 4; i++)
 8002394:	2300      	movs	r3, #0
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	e029      	b.n	80023ee <draw_tetromino+0x6a>
	{
		for(int j = 0; j < 4; j++)
 800239a:	2300      	movs	r3, #0
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	e020      	b.n	80023e2 <draw_tetromino+0x5e>
		{
			if(block.mat[i][j])
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	009a      	lsls	r2, r3, #2
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	4413      	add	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	3310      	adds	r3, #16
 80023ac:	443b      	add	r3, r7
 80023ae:	889b      	ldrh	r3, [r3, #4]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d012      	beq.n	80023dc <draw_tetromino+0x58>
			{
				draw_block(block.x[i], block.y[j], block.color);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3310      	adds	r3, #16
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	3310      	adds	r3, #16
 80023be:	443b      	add	r3, r7
 80023c0:	889b      	ldrh	r3, [r3, #4]
 80023c2:	b298      	uxth	r0, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	3314      	adds	r3, #20
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	3310      	adds	r3, #16
 80023cc:	443b      	add	r3, r7
 80023ce:	889b      	ldrh	r3, [r3, #4]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	8a7a      	ldrh	r2, [r7, #18]
 80023d4:	b292      	uxth	r2, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	f7ff fe96 	bl	8002108 <draw_block>
		for(int j = 0; j < 4; j++)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	3301      	adds	r3, #1
 80023e0:	603b      	str	r3, [r7, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	dddb      	ble.n	80023a0 <draw_tetromino+0x1c>
	for(int i = 0; i < 4; i++)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3301      	adds	r3, #1
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	ddd2      	ble.n	800239a <draw_tetromino+0x16>
			}
		}
	}
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002400:	b004      	add	sp, #16
 8002402:	4770      	bx	lr

08002404 <clear_tetromino>:

void clear_tetromino(block_t block)
{
 8002404:	b084      	sub	sp, #16
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	f107 0c10 	add.w	ip, r7, #16
 8002410:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i < 4; i++)
 8002414:	2300      	movs	r3, #0
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	e028      	b.n	800246c <clear_tetromino+0x68>
	{
		for(int j = 0; j < 4; j++)
 800241a:	2300      	movs	r3, #0
 800241c:	603b      	str	r3, [r7, #0]
 800241e:	e01f      	b.n	8002460 <clear_tetromino+0x5c>
		{
			if(block.mat[i][j])
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	009a      	lsls	r2, r3, #2
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4413      	add	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	3310      	adds	r3, #16
 800242c:	443b      	add	r3, r7
 800242e:	889b      	ldrh	r3, [r3, #4]
 8002430:	b29b      	uxth	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d011      	beq.n	800245a <clear_tetromino+0x56>
			{
				draw_block(block.x[i], block.y[j], LCD_COLOR_BLACK);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3310      	adds	r3, #16
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	3310      	adds	r3, #16
 800243e:	443b      	add	r3, r7
 8002440:	889b      	ldrh	r3, [r3, #4]
 8002442:	b298      	uxth	r0, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	3314      	adds	r3, #20
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	3310      	adds	r3, #16
 800244c:	443b      	add	r3, r7
 800244e:	889b      	ldrh	r3, [r3, #4]
 8002450:	b29b      	uxth	r3, r3
 8002452:	2200      	movs	r2, #0
 8002454:	4619      	mov	r1, r3
 8002456:	f7ff fe57 	bl	8002108 <draw_block>
		for(int j = 0; j < 4; j++)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	3301      	adds	r3, #1
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2b03      	cmp	r3, #3
 8002464:	dddc      	ble.n	8002420 <clear_tetromino+0x1c>
	for(int i = 0; i < 4; i++)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3301      	adds	r3, #1
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b03      	cmp	r3, #3
 8002470:	ddd3      	ble.n	800241a <clear_tetromino+0x16>
			}
		}
	}
}
 8002472:	bf00      	nop
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800247e:	b004      	add	sp, #16
 8002480:	4770      	bx	lr

08002482 <can_spawn>:

uint8_t can_spawn(block_t *block, map_t *map)
{
 8002482:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002484:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 8002488:	af00      	add	r7, sp, #0
 800248a:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800248e:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8002492:	6018      	str	r0, [r3, #0]
 8002494:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002498:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 800249c:	6019      	str	r1, [r3, #0]
	volatile block_t temp_tetromino = *block;
 800249e:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80024a2:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	461c      	mov	r4, r3
 80024aa:	f507 7614 	add.w	r6, r7, #592	@ 0x250
 80024ae:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80024b2:	4635      	mov	r5, r6
 80024b4:	4623      	mov	r3, r4
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	6859      	ldr	r1, [r3, #4]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c0:	3410      	adds	r4, #16
 80024c2:	3610      	adds	r6, #16
 80024c4:	4564      	cmp	r4, ip
 80024c6:	d1f4      	bne.n	80024b2 <can_spawn+0x30>
 80024c8:	4633      	mov	r3, r6
 80024ca:	4622      	mov	r2, r4
 80024cc:	6810      	ldr	r0, [r2, #0]
 80024ce:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 80024d0:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80024d4:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 80024d8:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80024dc:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4610      	mov	r0, r2
 80024e4:	4619      	mov	r1, r3
 80024e6:	f240 2336 	movw	r3, #566	@ 0x236
 80024ea:	461a      	mov	r2, r3
 80024ec:	f005 fe6a 	bl	80081c4 <memcpy>

	uint16_t block_x[4];
	uint16_t block_y[4];
	uint8_t ind = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297

	for(int i = 0; i < 4; i++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 80024fc:	e049      	b.n	8002592 <can_spawn+0x110>
	{
		for(int j = 0; j < 4; j++)
 80024fe:	2300      	movs	r3, #0
 8002500:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8002504:	e03c      	b.n	8002580 <can_spawn+0xfe>
		{
			if(temp_tetromino.mat[i][j])
 8002506:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800250a:	009a      	lsls	r2, r3, #2
 800250c:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8002510:	4413      	add	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002518:	443b      	add	r3, r7
 800251a:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d028      	beq.n	8002576 <can_spawn+0xf4>
			{
				block_x[ind] = temp_tetromino.x[i];
 8002524:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 8002528:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800252c:	3310      	adds	r3, #16
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002534:	443b      	add	r3, r7
 8002536:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 800253a:	b299      	uxth	r1, r3
 800253c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002540:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8002544:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				block_y[ind] = temp_tetromino.y[j];
 8002548:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 800254c:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8002550:	3314      	adds	r3, #20
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002558:	443b      	add	r3, r7
 800255a:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 800255e:	b299      	uxth	r1, r3
 8002560:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002564:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002568:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				ind++;
 800256c:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8002570:	3301      	adds	r3, #1
 8002572:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
		for(int j = 0; j < 4; j++)
 8002576:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 800257a:	3301      	adds	r3, #1
 800257c:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8002580:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8002584:	2b03      	cmp	r3, #3
 8002586:	ddbe      	ble.n	8002506 <can_spawn+0x84>
	for(int i = 0; i < 4; i++)
 8002588:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800258c:	3301      	adds	r3, #1
 800258e:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8002592:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8002596:	2b03      	cmp	r3, #3
 8002598:	ddb1      	ble.n	80024fe <can_spawn+0x7c>
			}
		}
	}

	//iterate through the columns in the first 3 rows of the map, and if overlap, return 0
	for(int i = 3; i < 7; i++)
 800259a:	2303      	movs	r3, #3
 800259c:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 80025a0:	e0c4      	b.n	800272c <can_spawn+0x2aa>
	{
		for(int j = 0; j < 3; j++)
 80025a2:	2300      	movs	r3, #0
 80025a4:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 80025a8:	e0b6      	b.n	8002718 <can_spawn+0x296>
		{
			if(temp_map.map_mat[i][j])
 80025aa:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80025ae:	f5a3 7120 	sub.w	r1, r3, #640	@ 0x280
 80025b2:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 80025b6:	4613      	mov	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 80025c4:	4413      	add	r3, r2
 80025c6:	3380      	adds	r3, #128	@ 0x80
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	440b      	add	r3, r1
 80025cc:	889b      	ldrh	r3, [r3, #4]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 809c 	beq.w	800270e <can_spawn+0x28c>
			{
				if(temp_map.x[i] == block_x[0] && temp_map.y[j] == block_y[0])
 80025d6:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80025da:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80025de:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 80025e2:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80025e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80025f0:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d114      	bne.n	8002624 <can_spawn+0x1a2>
 80025fa:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80025fe:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 8002602:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002606:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	889b      	ldrh	r3, [r3, #4]
 8002610:	b29a      	uxth	r2, r3
 8002612:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002616:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d101      	bne.n	8002624 <can_spawn+0x1a2>
				{
					return 0;
 8002620:	2300      	movs	r3, #0
 8002622:	e089      	b.n	8002738 <can_spawn+0x2b6>
				}
				else if(temp_map.x[i] == block_x[1] && temp_map.y[j] == block_y[1])
 8002624:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002628:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800262c:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8002630:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8002634:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002638:	b29a      	uxth	r2, r3
 800263a:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800263e:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8002642:	885b      	ldrh	r3, [r3, #2]
 8002644:	429a      	cmp	r2, r3
 8002646:	d114      	bne.n	8002672 <can_spawn+0x1f0>
 8002648:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800264c:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 8002650:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002654:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	889b      	ldrh	r3, [r3, #4]
 800265e:	b29a      	uxth	r2, r3
 8002660:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002664:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002668:	885b      	ldrh	r3, [r3, #2]
 800266a:	429a      	cmp	r2, r3
 800266c:	d101      	bne.n	8002672 <can_spawn+0x1f0>
				{
					return 0;
 800266e:	2300      	movs	r3, #0
 8002670:	e062      	b.n	8002738 <can_spawn+0x2b6>
				}
				else if(temp_map.x[i] == block_x[2] && temp_map.y[j] == block_y[2])
 8002672:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002676:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800267a:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 800267e:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8002682:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002686:	b29a      	uxth	r2, r3
 8002688:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800268c:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8002690:	889b      	ldrh	r3, [r3, #4]
 8002692:	429a      	cmp	r2, r3
 8002694:	d114      	bne.n	80026c0 <can_spawn+0x23e>
 8002696:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800269a:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 800269e:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80026a2:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	889b      	ldrh	r3, [r3, #4]
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80026b2:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80026b6:	889b      	ldrh	r3, [r3, #4]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d101      	bne.n	80026c0 <can_spawn+0x23e>
				{
					return 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	e03b      	b.n	8002738 <can_spawn+0x2b6>
				}
				else if(temp_map.x[i] == block_x[3] && temp_map.y[j] == block_y[3])
 80026c0:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80026c4:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80026c8:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 80026cc:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80026d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80026da:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 80026de:	88db      	ldrh	r3, [r3, #6]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d114      	bne.n	800270e <can_spawn+0x28c>
 80026e4:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80026e8:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 80026ec:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80026f0:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4413      	add	r3, r2
 80026f8:	889b      	ldrh	r3, [r3, #4]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8002700:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002704:	88db      	ldrh	r3, [r3, #6]
 8002706:	429a      	cmp	r2, r3
 8002708:	d101      	bne.n	800270e <can_spawn+0x28c>
				{
					return 0;
 800270a:	2300      	movs	r3, #0
 800270c:	e014      	b.n	8002738 <can_spawn+0x2b6>
		for(int j = 0; j < 3; j++)
 800270e:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8002712:	3301      	adds	r3, #1
 8002714:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8002718:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800271c:	2b02      	cmp	r3, #2
 800271e:	f77f af44 	ble.w	80025aa <can_spawn+0x128>
	for(int i = 3; i < 7; i++)
 8002722:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8002726:	3301      	adds	r3, #1
 8002728:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 800272c:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8002730:	2b06      	cmp	r3, #6
 8002732:	f77f af36 	ble.w	80025a2 <can_spawn+0x120>
				}
			}
		}
	}
	return 1;
 8002736:	2301      	movs	r3, #1
}
 8002738:	4618      	mov	r0, r3
 800273a:	f507 7727 	add.w	r7, r7, #668	@ 0x29c
 800273e:	46bd      	mov	sp, r7
 8002740:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002744 <MX_RNG_Init>:

static void MX_RNG_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
  __HAL_RCC_RNG_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	4b0e      	ldr	r3, [pc, #56]	@ (8002788 <MX_RNG_Init+0x44>)
 8002750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002752:	4a0d      	ldr	r2, [pc, #52]	@ (8002788 <MX_RNG_Init+0x44>)
 8002754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002758:	6353      	str	r3, [r2, #52]	@ 0x34
 800275a:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <MX_RNG_Init+0x44>)
 800275c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800275e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
  hrng.Instance = RNG;
 8002766:	4b09      	ldr	r3, [pc, #36]	@ (800278c <MX_RNG_Init+0x48>)
 8002768:	4a09      	ldr	r2, [pc, #36]	@ (8002790 <MX_RNG_Init+0x4c>)
 800276a:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800276c:	4807      	ldr	r0, [pc, #28]	@ (800278c <MX_RNG_Init+0x48>)
 800276e:	f004 ffb5 	bl	80076dc <HAL_RNG_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <MX_RNG_Init+0x3a>
  {
	  APPLICATION_ASSERT(1);
 8002778:	2001      	movs	r0, #1
 800277a:	f000 f857 	bl	800282c <APPLICATION_ASSERT>
  }
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	200000a0 	.word	0x200000a0
 8002790:	50060800 	.word	0x50060800

08002794 <MX_RNG_Deinit>:

static void MX_RNG_Deinit(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  __HAL_RCC_RNG_CLK_DISABLE();
 8002798:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <MX_RNG_Deinit+0x2c>)
 800279a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800279c:	4a08      	ldr	r2, [pc, #32]	@ (80027c0 <MX_RNG_Deinit+0x2c>)
 800279e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027a2:	6353      	str	r3, [r2, #52]	@ 0x34
  hrng.Instance = RNG;
 80027a4:	4b07      	ldr	r3, [pc, #28]	@ (80027c4 <MX_RNG_Deinit+0x30>)
 80027a6:	4a08      	ldr	r2, [pc, #32]	@ (80027c8 <MX_RNG_Deinit+0x34>)
 80027a8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80027aa:	4806      	ldr	r0, [pc, #24]	@ (80027c4 <MX_RNG_Deinit+0x30>)
 80027ac:	f004 ff96 	bl	80076dc <HAL_RNG_Init>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <MX_RNG_Deinit+0x28>
  {
	  APPLICATION_ASSERT(1);
 80027b6:	2001      	movs	r0, #1
 80027b8:	f000 f838 	bl	800282c <APPLICATION_ASSERT>
  }
}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40023800 	.word	0x40023800
 80027c4:	200000a0 	.word	0x200000a0
 80027c8:	50060800 	.word	0x50060800

080027cc <ButtonInit>:
 *      Author: 17202
 */
#include "Button_Driver.h"

void ButtonInit()
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef config = {0};
 80027d2:	1d3b      	adds	r3, r7, #4
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]

	config.Pin = GPIO_PIN_0;
 80027e0:	2301      	movs	r3, #1
 80027e2:	607b      	str	r3, [r7, #4]
	config.Mode = GPIO_MODE_IT_RISING;
 80027e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027e8:	60bb      	str	r3, [r7, #8]
	config.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ea:	2302      	movs	r3, #2
 80027ec:	613b      	str	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	603b      	str	r3, [r7, #0]
 80027f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <ButtonInit+0x58>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002824 <ButtonInit+0x58>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027fe:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <ButtonInit+0x58>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &config);
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	4619      	mov	r1, r3
 800280e:	4806      	ldr	r0, [pc, #24]	@ (8002828 <ButtonInit+0x5c>)
 8002810:	f002 fb08 	bl	8004e24 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002814:	2006      	movs	r0, #6
 8002816:	f002 fab6 	bl	8004d86 <HAL_NVIC_EnableIRQ>
	//GPIO_Init(BUTTON_PORT_VALUE, config, BUTTON_PIN_NUMBER);
}
 800281a:	bf00      	nop
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	40020000 	.word	0x40020000

0800282c <APPLICATION_ASSERT>:
 */
#include "ErrorHandling.h"


void APPLICATION_ASSERT(bool tf)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002836:	b672      	cpsid	i
}
 8002838:	bf00      	nop
	__disable_irq();
	while(tf!=HAL_OK)
 800283a:	bf00      	nop
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1fc      	bne.n	800283c <APPLICATION_ASSERT+0x10>
	{}		//loop forever
}
 8002842:	bf00      	nop
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08c      	sub	sp, #48	@ 0x30
 8002854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	4b5a      	ldr	r3, [pc, #360]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	4a59      	ldr	r2, [pc, #356]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 8002860:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002864:	6453      	str	r3, [r2, #68]	@ 0x44
 8002866:	4b57      	ldr	r3, [pc, #348]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800286e:	61bb      	str	r3, [r7, #24]
 8002870:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	4b53      	ldr	r3, [pc, #332]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	4a52      	ldr	r2, [pc, #328]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6313      	str	r3, [r2, #48]	@ 0x30
 8002882:	4b50      	ldr	r3, [pc, #320]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	4b4c      	ldr	r3, [pc, #304]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	4a4b      	ldr	r2, [pc, #300]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	6313      	str	r3, [r2, #48]	@ 0x30
 800289e:	4b49      	ldr	r3, [pc, #292]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b45      	ldr	r3, [pc, #276]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	4a44      	ldr	r2, [pc, #272]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 80028b4:	f043 0304 	orr.w	r3, r3, #4
 80028b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ba:	4b42      	ldr	r3, [pc, #264]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	4b3e      	ldr	r3, [pc, #248]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	4a3d      	ldr	r2, [pc, #244]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 80028d0:	f043 0308 	orr.w	r3, r3, #8
 80028d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028d6:	4b3b      	ldr	r3, [pc, #236]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	4b37      	ldr	r3, [pc, #220]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	4a36      	ldr	r2, [pc, #216]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 80028ec:	f043 0320 	orr.w	r3, r3, #32
 80028f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f2:	4b34      	ldr	r3, [pc, #208]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	f003 0320 	and.w	r3, r3, #32
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	4b30      	ldr	r3, [pc, #192]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	4a2f      	ldr	r2, [pc, #188]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 8002908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800290c:	6313      	str	r3, [r2, #48]	@ 0x30
 800290e:	4b2d      	ldr	r3, [pc, #180]	@ (80029c4 <LCD_GPIO_Init+0x174>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800291a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800291e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002928:	2302      	movs	r3, #2
 800292a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800292c:	230e      	movs	r3, #14
 800292e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002930:	f107 031c 	add.w	r3, r7, #28
 8002934:	4619      	mov	r1, r3
 8002936:	4824      	ldr	r0, [pc, #144]	@ (80029c8 <LCD_GPIO_Init+0x178>)
 8002938:	f002 fa74 	bl	8004e24 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800293c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002940:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002942:	f107 031c 	add.w	r3, r7, #28
 8002946:	4619      	mov	r1, r3
 8002948:	4820      	ldr	r0, [pc, #128]	@ (80029cc <LCD_GPIO_Init+0x17c>)
 800294a:	f002 fa6b 	bl	8004e24 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800294e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002952:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002954:	f107 031c 	add.w	r3, r7, #28
 8002958:	4619      	mov	r1, r3
 800295a:	481d      	ldr	r0, [pc, #116]	@ (80029d0 <LCD_GPIO_Init+0x180>)
 800295c:	f002 fa62 	bl	8004e24 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002960:	2348      	movs	r3, #72	@ 0x48
 8002962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002964:	f107 031c 	add.w	r3, r7, #28
 8002968:	4619      	mov	r1, r3
 800296a:	481a      	ldr	r0, [pc, #104]	@ (80029d4 <LCD_GPIO_Init+0x184>)
 800296c:	f002 fa5a 	bl	8004e24 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002974:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002976:	f107 031c 	add.w	r3, r7, #28
 800297a:	4619      	mov	r1, r3
 800297c:	4816      	ldr	r0, [pc, #88]	@ (80029d8 <LCD_GPIO_Init+0x188>)
 800297e:	f002 fa51 	bl	8004e24 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002982:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002986:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002988:	f107 031c 	add.w	r3, r7, #28
 800298c:	4619      	mov	r1, r3
 800298e:	4813      	ldr	r0, [pc, #76]	@ (80029dc <LCD_GPIO_Init+0x18c>)
 8002990:	f002 fa48 	bl	8004e24 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002994:	2303      	movs	r3, #3
 8002996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002998:	2309      	movs	r3, #9
 800299a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800299c:	f107 031c 	add.w	r3, r7, #28
 80029a0:	4619      	mov	r1, r3
 80029a2:	480a      	ldr	r0, [pc, #40]	@ (80029cc <LCD_GPIO_Init+0x17c>)
 80029a4:	f002 fa3e 	bl	8004e24 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80029a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80029ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80029ae:	f107 031c 	add.w	r3, r7, #28
 80029b2:	4619      	mov	r1, r3
 80029b4:	4809      	ldr	r0, [pc, #36]	@ (80029dc <LCD_GPIO_Init+0x18c>)
 80029b6:	f002 fa35 	bl	8004e24 <HAL_GPIO_Init>
}
 80029ba:	bf00      	nop
 80029bc:	3730      	adds	r7, #48	@ 0x30
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40020000 	.word	0x40020000
 80029cc:	40020400 	.word	0x40020400
 80029d0:	40020800 	.word	0x40020800
 80029d4:	40020c00 	.word	0x40020c00
 80029d8:	40021400 	.word	0x40021400
 80029dc:	40021800 	.word	0x40021800

080029e0 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b090      	sub	sp, #64	@ 0x40
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80029ee:	23f0      	movs	r3, #240	@ 0xf0
 80029f0:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80029f6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80029fa:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80029fc:	2302      	movs	r3, #2
 80029fe:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8002a00:	23ff      	movs	r3, #255	@ 0xff
 8002a02:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002a08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002a0e:	2305      	movs	r3, #5
 8002a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8002a18:	4b0f      	ldr	r3, [pc, #60]	@ (8002a58 <LTCD_Layer_Init+0x78>)
 8002a1a:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8002a1c:	23f0      	movs	r3, #240	@ 0xf0
 8002a1e:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8002a20:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002a24:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8002a38:	79fa      	ldrb	r2, [r7, #7]
 8002a3a:	f107 030c 	add.w	r3, r7, #12
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4806      	ldr	r0, [pc, #24]	@ (8002a5c <LTCD_Layer_Init+0x7c>)
 8002a42:	f003 fe31 	bl	80066a8 <HAL_LTDC_ConfigLayer>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8002a4c:	f000 f9a4 	bl	8002d98 <LCD_Error_Handler>
	}
}
 8002a50:	bf00      	nop
 8002a52:	3740      	adds	r7, #64	@ 0x40
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	2000018c 	.word	0x2000018c
 8002a5c:	200000b0 	.word	0x200000b0

08002a60 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8002a64:	4b2a      	ldr	r3, [pc, #168]	@ (8002b10 <LTCD__Init+0xb0>)
 8002a66:	4a2b      	ldr	r2, [pc, #172]	@ (8002b14 <LTCD__Init+0xb4>)
 8002a68:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8002a6a:	4b29      	ldr	r3, [pc, #164]	@ (8002b10 <LTCD__Init+0xb0>)
 8002a6c:	2209      	movs	r2, #9
 8002a6e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8002a70:	4b27      	ldr	r3, [pc, #156]	@ (8002b10 <LTCD__Init+0xb0>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8002a76:	4b26      	ldr	r3, [pc, #152]	@ (8002b10 <LTCD__Init+0xb0>)
 8002a78:	221d      	movs	r2, #29
 8002a7a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8002a7c:	4b24      	ldr	r3, [pc, #144]	@ (8002b10 <LTCD__Init+0xb0>)
 8002a7e:	2203      	movs	r2, #3
 8002a80:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8002a82:	4b23      	ldr	r3, [pc, #140]	@ (8002b10 <LTCD__Init+0xb0>)
 8002a84:	f240 120d 	movw	r2, #269	@ 0x10d
 8002a88:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8002a8a:	4b21      	ldr	r3, [pc, #132]	@ (8002b10 <LTCD__Init+0xb0>)
 8002a8c:	f240 1243 	movw	r2, #323	@ 0x143
 8002a90:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8002a92:	4b1f      	ldr	r3, [pc, #124]	@ (8002b10 <LTCD__Init+0xb0>)
 8002a94:	f240 1217 	movw	r2, #279	@ 0x117
 8002a98:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8002a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002b10 <LTCD__Init+0xb0>)
 8002a9c:	f240 1247 	movw	r2, #327	@ 0x147
 8002aa0:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8002aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b10 <LTCD__Init+0xb0>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8002aaa:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <LTCD__Init+0xb0>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8002ab2:	4b17      	ldr	r3, [pc, #92]	@ (8002b10 <LTCD__Init+0xb0>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002aba:	4b17      	ldr	r3, [pc, #92]	@ (8002b18 <LTCD__Init+0xb8>)
 8002abc:	2208      	movs	r2, #8
 8002abe:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002ac0:	4b15      	ldr	r3, [pc, #84]	@ (8002b18 <LTCD__Init+0xb8>)
 8002ac2:	22c0      	movs	r2, #192	@ 0xc0
 8002ac4:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002ac6:	4b14      	ldr	r3, [pc, #80]	@ (8002b18 <LTCD__Init+0xb8>)
 8002ac8:	2204      	movs	r2, #4
 8002aca:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002acc:	4b12      	ldr	r3, [pc, #72]	@ (8002b18 <LTCD__Init+0xb8>)
 8002ace:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ad2:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002ad4:	4810      	ldr	r0, [pc, #64]	@ (8002b18 <LTCD__Init+0xb8>)
 8002ad6:	f004 fc41 	bl	800735c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002ada:	4b0d      	ldr	r3, [pc, #52]	@ (8002b10 <LTCD__Init+0xb0>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <LTCD__Init+0xb0>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <LTCD__Init+0xb0>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002aec:	4b08      	ldr	r3, [pc, #32]	@ (8002b10 <LTCD__Init+0xb0>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8002af2:	f7ff fead 	bl	8002850 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002af6:	4806      	ldr	r0, [pc, #24]	@ (8002b10 <LTCD__Init+0xb0>)
 8002af8:	f003 fd06 	bl	8006508 <HAL_LTDC_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8002b02:	f000 f949 	bl	8002d98 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8002b06:	f000 fb2a 	bl	800315e <ili9341_Init>
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200000b0 	.word	0x200000b0
 8002b14:	40016800 	.word	0x40016800
 8002b18:	20000158 	.word	0x20000158

08002b1c <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	80fb      	strh	r3, [r7, #6]
 8002b26:	460b      	mov	r3, r1
 8002b28:	80bb      	strh	r3, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8002b2e:	88ba      	ldrh	r2, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	461a      	mov	r2, r3
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	4905      	ldr	r1, [pc, #20]	@ (8002b54 <LCD_Draw_Pixel+0x38>)
 8002b40:	887a      	ldrh	r2, [r7, #2]
 8002b42:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	2000018c 	.word	0x2000018c

08002b58 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4604      	mov	r4, r0
 8002b60:	4608      	mov	r0, r1
 8002b62:	4611      	mov	r1, r2
 8002b64:	461a      	mov	r2, r3
 8002b66:	4623      	mov	r3, r4
 8002b68:	80fb      	strh	r3, [r7, #6]
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	80bb      	strh	r3, [r7, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	807b      	strh	r3, [r7, #2]
 8002b72:	4613      	mov	r3, r2
 8002b74:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	81fb      	strh	r3, [r7, #14]
 8002b7a:	e00b      	b.n	8002b94 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8002b7c:	89fa      	ldrh	r2, [r7, #14]
 8002b7e:	88bb      	ldrh	r3, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	b299      	uxth	r1, r3
 8002b84:	883a      	ldrh	r2, [r7, #0]
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ffc7 	bl	8002b1c <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8002b8e:	89fb      	ldrh	r3, [r7, #14]
 8002b90:	3301      	adds	r3, #1
 8002b92:	81fb      	strh	r3, [r7, #14]
 8002b94:	89fa      	ldrh	r2, [r7, #14]
 8002b96:	887b      	ldrh	r3, [r7, #2]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d3ef      	bcc.n	8002b7c <LCD_Draw_Vertical_Line+0x24>
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd90      	pop	{r4, r7, pc}

08002ba6 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8002ba6:	b590      	push	{r4, r7, lr}
 8002ba8:	b085      	sub	sp, #20
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	4604      	mov	r4, r0
 8002bae:	4608      	mov	r0, r1
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4623      	mov	r3, r4
 8002bb6:	80fb      	strh	r3, [r7, #6]
 8002bb8:	4603      	mov	r3, r0
 8002bba:	80bb      	strh	r3, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	81fb      	strh	r3, [r7, #14]
 8002bc8:	e00b      	b.n	8002be2 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8002bca:	89fa      	ldrh	r2, [r7, #14]
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	4413      	add	r3, r2
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	883a      	ldrh	r2, [r7, #0]
 8002bd4:	88b9      	ldrh	r1, [r7, #4]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ffa0 	bl	8002b1c <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8002bdc:	89fb      	ldrh	r3, [r7, #14]
 8002bde:	3301      	adds	r3, #1
 8002be0:	81fb      	strh	r3, [r7, #14]
 8002be2:	89fa      	ldrh	r2, [r7, #14]
 8002be4:	887b      	ldrh	r3, [r7, #2]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d3ef      	bcc.n	8002bca <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8002bea:	bf00      	nop
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd90      	pop	{r4, r7, pc}

08002bf4 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	460a      	mov	r2, r1
 8002bfe:	71fb      	strb	r3, [r7, #7]
 8002c00:	4613      	mov	r3, r2
 8002c02:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10e      	bne.n	8002c28 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	e007      	b.n	8002c20 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8002c10:	4908      	ldr	r1, [pc, #32]	@ (8002c34 <LCD_Clear+0x40>)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	88ba      	ldrh	r2, [r7, #4]
 8002c16:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8002c26:	d3f3      	bcc.n	8002c10 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	2000018c 	.word	0x2000018c

08002c38 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8002c42:	4a04      	ldr	r2, [pc, #16]	@ (8002c54 <LCD_SetTextColor+0x1c>)
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	8013      	strh	r3, [r2, #0]
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	20000000 	.word	0x20000000

08002c58 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8002c60:	4a04      	ldr	r2, [pc, #16]	@ (8002c74 <LCD_SetFont+0x1c>)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6013      	str	r3, [r2, #0]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	20000188 	.word	0x20000188

08002c78 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	603a      	str	r2, [r7, #0]
 8002c82:	80fb      	strh	r3, [r7, #6]
 8002c84:	460b      	mov	r3, r1
 8002c86:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	e04c      	b.n	8002d30 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	e03f      	b.n	8002d1c <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4b27      	ldr	r3, [pc, #156]	@ (8002d48 <LCD_Draw_Char+0xd0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	889b      	ldrh	r3, [r3, #4]
 8002cae:	4a27      	ldr	r2, [pc, #156]	@ (8002d4c <LCD_Draw_Char+0xd4>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	08db      	lsrs	r3, r3, #3
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	2280      	movs	r2, #128	@ 0x80
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	fa42 f303 	asr.w	r3, r2, r3
 8002cc4:	400b      	ands	r3, r1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d104      	bne.n	8002cd4 <LCD_Draw_Char+0x5c>
 8002cca:	4b1f      	ldr	r3, [pc, #124]	@ (8002d48 <LCD_Draw_Char+0xd0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	889b      	ldrh	r3, [r3, #4]
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	d920      	bls.n	8002d16 <LCD_Draw_Char+0x9e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	4413      	add	r3, r2
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	fa42 f303 	asr.w	r3, r2, r3
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d104      	bne.n	8002cf8 <LCD_Draw_Char+0x80>
 8002cee:	4b16      	ldr	r3, [pc, #88]	@ (8002d48 <LCD_Draw_Char+0xd0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	889b      	ldrh	r3, [r3, #4]
 8002cf4:	2b0c      	cmp	r3, #12
 8002cf6:	d80e      	bhi.n	8002d16 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	4413      	add	r3, r2
 8002d00:	b298      	uxth	r0, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	88bb      	ldrh	r3, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	4a10      	ldr	r2, [pc, #64]	@ (8002d50 <LCD_Draw_Char+0xd8>)
 8002d0e:	8812      	ldrh	r2, [r2, #0]
 8002d10:	4619      	mov	r1, r3
 8002d12:	f7ff ff03 	bl	8002b1c <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d48 <LCD_Draw_Char+0xd0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	889b      	ldrh	r3, [r3, #4]
 8002d22:	461a      	mov	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d3b8      	bcc.n	8002c9c <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	4b05      	ldr	r3, [pc, #20]	@ (8002d48 <LCD_Draw_Char+0xd0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	88db      	ldrh	r3, [r3, #6]
 8002d36:	461a      	mov	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d3ab      	bcc.n	8002c96 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8002d3e:	bf00      	nop
 8002d40:	bf00      	nop
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20000188 	.word	0x20000188
 8002d4c:	aaaaaaab 	.word	0xaaaaaaab
 8002d50:	20000000 	.word	0x20000000

08002d54 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	80fb      	strh	r3, [r7, #6]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	80bb      	strh	r3, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	3b20      	subs	r3, #32
 8002d6a:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8002d6c:	4b09      	ldr	r3, [pc, #36]	@ (8002d94 <LCD_DisplayChar+0x40>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	4907      	ldr	r1, [pc, #28]	@ (8002d94 <LCD_DisplayChar+0x40>)
 8002d76:	6809      	ldr	r1, [r1, #0]
 8002d78:	88c9      	ldrh	r1, [r1, #6]
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	441a      	add	r2, r3
 8002d82:	88b9      	ldrh	r1, [r7, #4]
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff ff76 	bl	8002c78 <LCD_Draw_Char>
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20000188 	.word	0x20000188

08002d98 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d9c:	b672      	cpsid	i
}
 8002d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002da0:	bf00      	nop
 8002da2:	e7fd      	b.n	8002da0 <LCD_Error_Handler+0x8>

08002da4 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8002da8:	f001 fa96 	bl	80042d8 <STMPE811_Init>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d001      	beq.n	8002db6 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8002db2:	bf00      	nop
 8002db4:	e7fd      	b.n	8002db2 <InitializeLCDTouch+0xe>
  }
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}

08002dba <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f001 fb72 	bl	80044ac <STMPE811_DetermineTouchPosition>
}
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f001 fb42 	bl	8004466 <STMPE811_Read>
 8002de2:	4603      	mov	r3, r0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	460a      	mov	r2, r1
 8002df6:	71fb      	strb	r3, [r7, #7]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8002dfc:	79ba      	ldrb	r2, [r7, #6]
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	4611      	mov	r1, r2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f001 fb40 	bl	8004488 <STMPE811_Write>
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <is_start_screen>:
static block_t block;
static map_t map;
static uint8_t game_started;

uint8_t is_start_screen()
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
	return game_started;
 8002e14:	4b03      	ldr	r3, [pc, #12]	@ (8002e24 <is_start_screen+0x14>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20025bf6 	.word	0x20025bf6

08002e28 <game_start_screen>:

void game_start_screen()
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
	game_started = NOT_STARTED;
 8002e2c:	4b04      	ldr	r3, [pc, #16]	@ (8002e40 <game_start_screen+0x18>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	701a      	strb	r2, [r3, #0]
	draw_shapes();
 8002e32:	f7ff f98a 	bl	800214a <draw_shapes>
	start_screen();
 8002e36:	f7fd fd2b 	bl	8000890 <start_screen>
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20025bf6 	.word	0x20025bf6

08002e44 <game_init>:

void game_init()
{
 8002e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e46:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 8002e4a:	af0a      	add	r7, sp, #40	@ 0x28
	game_started = STARTED;
 8002e4c:	4b22      	ldr	r3, [pc, #136]	@ (8002ed8 <game_init+0x94>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
	LCD_Clear(0,LCD_COLOR_BLACK);
 8002e52:	2100      	movs	r1, #0
 8002e54:	2000      	movs	r0, #0
 8002e56:	f7ff fecd 	bl	8002bf4 <LCD_Clear>

	map_draw();
 8002e5a:	f7fd fc99 	bl	8000790 <map_draw>
	block = block_create();
 8002e5e:	4d1f      	ldr	r5, [pc, #124]	@ (8002edc <game_init+0x98>)
 8002e60:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd feb9 	bl	8000bdc <block_create>
 8002e6a:	f507 740e 	add.w	r4, r7, #568	@ 0x238
 8002e6e:	462e      	mov	r6, r5
 8002e70:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002e74:	4635      	mov	r5, r6
 8002e76:	4623      	mov	r3, r4
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e82:	3410      	adds	r4, #16
 8002e84:	3610      	adds	r6, #16
 8002e86:	4564      	cmp	r4, ip
 8002e88:	d1f4      	bne.n	8002e74 <game_init+0x30>
 8002e8a:	4633      	mov	r3, r6
 8002e8c:	4622      	mov	r2, r4
 8002e8e:	6810      	ldr	r0, [r2, #0]
 8002e90:	6018      	str	r0, [r3, #0]
	draw_tetromino(block);
 8002e92:	4e12      	ldr	r6, [pc, #72]	@ (8002edc <game_init+0x98>)
 8002e94:	466d      	mov	r5, sp
 8002e96:	f106 0410 	add.w	r4, r6, #16
 8002e9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ea0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	602b      	str	r3, [r5, #0]
 8002ea6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002eaa:	f7ff fa6b 	bl	8002384 <draw_tetromino>
	map = map_init();
 8002eae:	4c0c      	ldr	r4, [pc, #48]	@ (8002ee0 <game_init+0x9c>)
 8002eb0:	463b      	mov	r3, r7
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe f9fa 	bl	80012ac <map_init>
 8002eb8:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8002ebc:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	f240 2336 	movw	r3, #566	@ 0x236
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f005 f97b 	bl	80081c4 <memcpy>
}
 8002ece:	bf00      	nop
 8002ed0:	f507 771d 	add.w	r7, r7, #628	@ 0x274
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ed8:	20025bf6 	.word	0x20025bf6
 8002edc:	2002598c 	.word	0x2002598c
 8002ee0:	200259c0 	.word	0x200259c0

08002ee4 <game_drop>:

void game_drop()
{
 8002ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee6:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 8002eea:	af0a      	add	r7, sp, #40	@ 0x28
	if(!collision(&block, &map, DOWN))
 8002eec:	2202      	movs	r2, #2
 8002eee:	4943      	ldr	r1, [pc, #268]	@ (8002ffc <game_drop+0x118>)
 8002ef0:	4843      	ldr	r0, [pc, #268]	@ (8003000 <game_drop+0x11c>)
 8002ef2:	f7fe fa4e 	bl	8001392 <collision>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d137      	bne.n	8002f6c <game_drop+0x88>
	{
		//HAL_Delay(500);
		clear_tetromino(block);
 8002efc:	4e40      	ldr	r6, [pc, #256]	@ (8003000 <game_drop+0x11c>)
 8002efe:	466d      	mov	r5, sp
 8002f00:	f106 0410 	add.w	r4, r6, #16
 8002f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	602b      	str	r3, [r5, #0]
 8002f10:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002f14:	f7ff fa76 	bl	8002404 <clear_tetromino>
		block = block_drop(&block);
 8002f18:	4d39      	ldr	r5, [pc, #228]	@ (8003000 <game_drop+0x11c>)
 8002f1a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8002f1e:	4938      	ldr	r1, [pc, #224]	@ (8003000 <game_drop+0x11c>)
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd fe0d 	bl	8000b40 <block_drop>
 8002f26:	f507 740e 	add.w	r4, r7, #568	@ 0x238
 8002f2a:	462e      	mov	r6, r5
 8002f2c:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002f30:	4635      	mov	r5, r6
 8002f32:	4623      	mov	r3, r4
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f3e:	3410      	adds	r4, #16
 8002f40:	3610      	adds	r6, #16
 8002f42:	4564      	cmp	r4, ip
 8002f44:	d1f4      	bne.n	8002f30 <game_drop+0x4c>
 8002f46:	4633      	mov	r3, r6
 8002f48:	4622      	mov	r2, r4
 8002f4a:	6810      	ldr	r0, [r2, #0]
 8002f4c:	6018      	str	r0, [r3, #0]
		draw_tetromino(block);
 8002f4e:	4e2c      	ldr	r6, [pc, #176]	@ (8003000 <game_drop+0x11c>)
 8002f50:	466d      	mov	r5, sp
 8002f52:	f106 0410 	add.w	r4, r6, #16
 8002f56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	602b      	str	r3, [r5, #0]
 8002f62:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002f66:	f7ff fa0d 	bl	8002384 <draw_tetromino>
		if(can_spawn(&block, &map))
		{
			draw_tetromino(block);
		}
	}
}
 8002f6a:	e042      	b.n	8002ff2 <game_drop+0x10e>
		map = map_update(&block, &map);
 8002f6c:	4c23      	ldr	r4, [pc, #140]	@ (8002ffc <game_drop+0x118>)
 8002f6e:	463b      	mov	r3, r7
 8002f70:	4a22      	ldr	r2, [pc, #136]	@ (8002ffc <game_drop+0x118>)
 8002f72:	4923      	ldr	r1, [pc, #140]	@ (8003000 <game_drop+0x11c>)
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe fd9f 	bl	8001ab8 <map_update>
 8002f7a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8002f7e:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8002f82:	4620      	mov	r0, r4
 8002f84:	4619      	mov	r1, r3
 8002f86:	f240 2336 	movw	r3, #566	@ 0x236
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f005 f91a 	bl	80081c4 <memcpy>
		block = block_create();
 8002f90:	4d1b      	ldr	r5, [pc, #108]	@ (8003000 <game_drop+0x11c>)
 8002f92:	463b      	mov	r3, r7
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fd fe21 	bl	8000bdc <block_create>
 8002f9a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8002f9e:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8002fa2:	461c      	mov	r4, r3
 8002fa4:	462e      	mov	r6, r5
 8002fa6:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002faa:	4635      	mov	r5, r6
 8002fac:	4623      	mov	r3, r4
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	6859      	ldr	r1, [r3, #4]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb8:	3410      	adds	r4, #16
 8002fba:	3610      	adds	r6, #16
 8002fbc:	4564      	cmp	r4, ip
 8002fbe:	d1f4      	bne.n	8002faa <game_drop+0xc6>
 8002fc0:	4633      	mov	r3, r6
 8002fc2:	4622      	mov	r2, r4
 8002fc4:	6810      	ldr	r0, [r2, #0]
 8002fc6:	6018      	str	r0, [r3, #0]
		if(can_spawn(&block, &map))
 8002fc8:	490c      	ldr	r1, [pc, #48]	@ (8002ffc <game_drop+0x118>)
 8002fca:	480d      	ldr	r0, [pc, #52]	@ (8003000 <game_drop+0x11c>)
 8002fcc:	f7ff fa59 	bl	8002482 <can_spawn>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00d      	beq.n	8002ff2 <game_drop+0x10e>
			draw_tetromino(block);
 8002fd6:	4e0a      	ldr	r6, [pc, #40]	@ (8003000 <game_drop+0x11c>)
 8002fd8:	466d      	mov	r5, sp
 8002fda:	f106 0410 	add.w	r4, r6, #16
 8002fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fe6:	6823      	ldr	r3, [r4, #0]
 8002fe8:	602b      	str	r3, [r5, #0]
 8002fea:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002fee:	f7ff f9c9 	bl	8002384 <draw_tetromino>
}
 8002ff2:	bf00      	nop
 8002ff4:	f507 771d 	add.w	r7, r7, #628	@ 0x274
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ffc:	200259c0 	.word	0x200259c0
 8003000:	2002598c 	.word	0x2002598c

08003004 <game_rotate>:

void game_rotate()
{
 8003004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003006:	b099      	sub	sp, #100	@ 0x64
 8003008:	af0a      	add	r7, sp, #40	@ 0x28
	clear_tetromino(block);
 800300a:	4e1c      	ldr	r6, [pc, #112]	@ (800307c <game_rotate+0x78>)
 800300c:	466d      	mov	r5, sp
 800300e:	f106 0410 	add.w	r4, r6, #16
 8003012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003018:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800301a:	6823      	ldr	r3, [r4, #0]
 800301c:	602b      	str	r3, [r5, #0]
 800301e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003022:	f7ff f9ef 	bl	8002404 <clear_tetromino>
	block = block_rotate(&block);
 8003026:	4d15      	ldr	r5, [pc, #84]	@ (800307c <game_rotate+0x78>)
 8003028:	463b      	mov	r3, r7
 800302a:	4914      	ldr	r1, [pc, #80]	@ (800307c <game_rotate+0x78>)
 800302c:	4618      	mov	r0, r3
 800302e:	f7fe fe61 	bl	8001cf4 <block_rotate>
 8003032:	463c      	mov	r4, r7
 8003034:	462e      	mov	r6, r5
 8003036:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800303a:	4635      	mov	r5, r6
 800303c:	4623      	mov	r3, r4
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	6859      	ldr	r1, [r3, #4]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003048:	3410      	adds	r4, #16
 800304a:	3610      	adds	r6, #16
 800304c:	4564      	cmp	r4, ip
 800304e:	d1f4      	bne.n	800303a <game_rotate+0x36>
 8003050:	4633      	mov	r3, r6
 8003052:	4622      	mov	r2, r4
 8003054:	6810      	ldr	r0, [r2, #0]
 8003056:	6018      	str	r0, [r3, #0]
	draw_tetromino(block);
 8003058:	4e08      	ldr	r6, [pc, #32]	@ (800307c <game_rotate+0x78>)
 800305a:	466d      	mov	r5, sp
 800305c:	f106 0410 	add.w	r4, r6, #16
 8003060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	602b      	str	r3, [r5, #0]
 800306c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003070:	f7ff f988 	bl	8002384 <draw_tetromino>
}
 8003074:	bf00      	nop
 8003076:	373c      	adds	r7, #60	@ 0x3c
 8003078:	46bd      	mov	sp, r7
 800307a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800307c:	2002598c 	.word	0x2002598c

08003080 <game_move>:

void game_move(uint8_t dir)
{
 8003080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003082:	b09b      	sub	sp, #108	@ 0x6c
 8003084:	af0a      	add	r7, sp, #40	@ 0x28
 8003086:	4603      	mov	r3, r0
 8003088:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if(!collision(&block, &map, dir))
 800308c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003090:	461a      	mov	r2, r3
 8003092:	4921      	ldr	r1, [pc, #132]	@ (8003118 <game_move+0x98>)
 8003094:	4821      	ldr	r0, [pc, #132]	@ (800311c <game_move+0x9c>)
 8003096:	f7fe f97c 	bl	8001392 <collision>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d136      	bne.n	800310e <game_move+0x8e>
	{
		clear_tetromino(block);
 80030a0:	4e1e      	ldr	r6, [pc, #120]	@ (800311c <game_move+0x9c>)
 80030a2:	466d      	mov	r5, sp
 80030a4:	f106 0410 	add.w	r4, r6, #16
 80030a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	602b      	str	r3, [r5, #0]
 80030b4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80030b8:	f7ff f9a4 	bl	8002404 <clear_tetromino>
		block = block_move(&block, &map, dir);
 80030bc:	4d17      	ldr	r5, [pc, #92]	@ (800311c <game_move+0x9c>)
 80030be:	4638      	mov	r0, r7
 80030c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80030c4:	4a14      	ldr	r2, [pc, #80]	@ (8003118 <game_move+0x98>)
 80030c6:	4915      	ldr	r1, [pc, #84]	@ (800311c <game_move+0x9c>)
 80030c8:	f7fe ffb0 	bl	800202c <block_move>
 80030cc:	463c      	mov	r4, r7
 80030ce:	462e      	mov	r6, r5
 80030d0:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80030d4:	4635      	mov	r5, r6
 80030d6:	4623      	mov	r3, r4
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e2:	3410      	adds	r4, #16
 80030e4:	3610      	adds	r6, #16
 80030e6:	4564      	cmp	r4, ip
 80030e8:	d1f4      	bne.n	80030d4 <game_move+0x54>
 80030ea:	4633      	mov	r3, r6
 80030ec:	4622      	mov	r2, r4
 80030ee:	6810      	ldr	r0, [r2, #0]
 80030f0:	6018      	str	r0, [r3, #0]
		draw_tetromino(block);
 80030f2:	4e0a      	ldr	r6, [pc, #40]	@ (800311c <game_move+0x9c>)
 80030f4:	466d      	mov	r5, sp
 80030f6:	f106 0410 	add.w	r4, r6, #16
 80030fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	602b      	str	r3, [r5, #0]
 8003106:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800310a:	f7ff f93b 	bl	8002384 <draw_tetromino>
	}
}
 800310e:	bf00      	nop
 8003110:	3744      	adds	r7, #68	@ 0x44
 8003112:	46bd      	mov	sp, r7
 8003114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003116:	bf00      	nop
 8003118:	200259c0 	.word	0x200259c0
 800311c:	2002598c 	.word	0x2002598c

08003120 <game_finished>:

uint8_t game_finished()
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
	if(can_spawn(&block, &map))
 8003124:	4905      	ldr	r1, [pc, #20]	@ (800313c <game_finished+0x1c>)
 8003126:	4806      	ldr	r0, [pc, #24]	@ (8003140 <game_finished+0x20>)
 8003128:	f7ff f9ab 	bl	8002482 <can_spawn>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <game_finished+0x16>
	{
		return 0;
 8003132:	2300      	movs	r3, #0
 8003134:	e000      	b.n	8003138 <game_finished+0x18>
	}
	return 1;
 8003136:	2301      	movs	r3, #1
}
 8003138:	4618      	mov	r0, r3
 800313a:	bd80      	pop	{r7, pc}
 800313c:	200259c0 	.word	0x200259c0
 8003140:	2002598c 	.word	0x2002598c

08003144 <game_over>:

void game_over()
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
	end_screen();
 800314a:	f7fd fc6b 	bl	8000a24 <end_screen>
	uint32_t time = HAL_GetTick();
 800314e:	f001 fcb1 	bl	8004ab4 <HAL_GetTick>
 8003152:	6078      	str	r0, [r7, #4]
	disp_time(time);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7fd fc9f 	bl	8000a98 <disp_time>
	while(1){}
 800315a:	bf00      	nop
 800315c:	e7fd      	b.n	800315a <game_over+0x16>

0800315e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003162:	f000 f9ff 	bl	8003564 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8003166:	20ca      	movs	r0, #202	@ 0xca
 8003168:	f000 f943 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 800316c:	20c3      	movs	r0, #195	@ 0xc3
 800316e:	f000 f94d 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8003172:	2008      	movs	r0, #8
 8003174:	f000 f94a 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8003178:	2050      	movs	r0, #80	@ 0x50
 800317a:	f000 f947 	bl	800340c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 800317e:	20cf      	movs	r0, #207	@ 0xcf
 8003180:	f000 f937 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8003184:	2000      	movs	r0, #0
 8003186:	f000 f941 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 800318a:	20c1      	movs	r0, #193	@ 0xc1
 800318c:	f000 f93e 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8003190:	2030      	movs	r0, #48	@ 0x30
 8003192:	f000 f93b 	bl	800340c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8003196:	20ed      	movs	r0, #237	@ 0xed
 8003198:	f000 f92b 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 800319c:	2064      	movs	r0, #100	@ 0x64
 800319e:	f000 f935 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80031a2:	2003      	movs	r0, #3
 80031a4:	f000 f932 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80031a8:	2012      	movs	r0, #18
 80031aa:	f000 f92f 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80031ae:	2081      	movs	r0, #129	@ 0x81
 80031b0:	f000 f92c 	bl	800340c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80031b4:	20e8      	movs	r0, #232	@ 0xe8
 80031b6:	f000 f91c 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80031ba:	2085      	movs	r0, #133	@ 0x85
 80031bc:	f000 f926 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80031c0:	2000      	movs	r0, #0
 80031c2:	f000 f923 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80031c6:	2078      	movs	r0, #120	@ 0x78
 80031c8:	f000 f920 	bl	800340c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80031cc:	20cb      	movs	r0, #203	@ 0xcb
 80031ce:	f000 f910 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80031d2:	2039      	movs	r0, #57	@ 0x39
 80031d4:	f000 f91a 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80031d8:	202c      	movs	r0, #44	@ 0x2c
 80031da:	f000 f917 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80031de:	2000      	movs	r0, #0
 80031e0:	f000 f914 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80031e4:	2034      	movs	r0, #52	@ 0x34
 80031e6:	f000 f911 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80031ea:	2002      	movs	r0, #2
 80031ec:	f000 f90e 	bl	800340c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80031f0:	20f7      	movs	r0, #247	@ 0xf7
 80031f2:	f000 f8fe 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80031f6:	2020      	movs	r0, #32
 80031f8:	f000 f908 	bl	800340c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80031fc:	20ea      	movs	r0, #234	@ 0xea
 80031fe:	f000 f8f8 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003202:	2000      	movs	r0, #0
 8003204:	f000 f902 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003208:	2000      	movs	r0, #0
 800320a:	f000 f8ff 	bl	800340c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 800320e:	20b1      	movs	r0, #177	@ 0xb1
 8003210:	f000 f8ef 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003214:	2000      	movs	r0, #0
 8003216:	f000 f8f9 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800321a:	201b      	movs	r0, #27
 800321c:	f000 f8f6 	bl	800340c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8003220:	20b6      	movs	r0, #182	@ 0xb6
 8003222:	f000 f8e6 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003226:	200a      	movs	r0, #10
 8003228:	f000 f8f0 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 800322c:	20a2      	movs	r0, #162	@ 0xa2
 800322e:	f000 f8ed 	bl	800340c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8003232:	20c0      	movs	r0, #192	@ 0xc0
 8003234:	f000 f8dd 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8003238:	2010      	movs	r0, #16
 800323a:	f000 f8e7 	bl	800340c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 800323e:	20c1      	movs	r0, #193	@ 0xc1
 8003240:	f000 f8d7 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8003244:	2010      	movs	r0, #16
 8003246:	f000 f8e1 	bl	800340c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 800324a:	20c5      	movs	r0, #197	@ 0xc5
 800324c:	f000 f8d1 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8003250:	2045      	movs	r0, #69	@ 0x45
 8003252:	f000 f8db 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8003256:	2015      	movs	r0, #21
 8003258:	f000 f8d8 	bl	800340c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 800325c:	20c7      	movs	r0, #199	@ 0xc7
 800325e:	f000 f8c8 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8003262:	2090      	movs	r0, #144	@ 0x90
 8003264:	f000 f8d2 	bl	800340c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8003268:	2036      	movs	r0, #54	@ 0x36
 800326a:	f000 f8c2 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 800326e:	20c8      	movs	r0, #200	@ 0xc8
 8003270:	f000 f8cc 	bl	800340c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8003274:	20f2      	movs	r0, #242	@ 0xf2
 8003276:	f000 f8bc 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800327a:	2000      	movs	r0, #0
 800327c:	f000 f8c6 	bl	800340c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8003280:	20b0      	movs	r0, #176	@ 0xb0
 8003282:	f000 f8b6 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8003286:	20c2      	movs	r0, #194	@ 0xc2
 8003288:	f000 f8c0 	bl	800340c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800328c:	20b6      	movs	r0, #182	@ 0xb6
 800328e:	f000 f8b0 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003292:	200a      	movs	r0, #10
 8003294:	f000 f8ba 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8003298:	20a7      	movs	r0, #167	@ 0xa7
 800329a:	f000 f8b7 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 800329e:	2027      	movs	r0, #39	@ 0x27
 80032a0:	f000 f8b4 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80032a4:	2004      	movs	r0, #4
 80032a6:	f000 f8b1 	bl	800340c <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80032aa:	202a      	movs	r0, #42	@ 0x2a
 80032ac:	f000 f8a1 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80032b0:	2000      	movs	r0, #0
 80032b2:	f000 f8ab 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80032b6:	2000      	movs	r0, #0
 80032b8:	f000 f8a8 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80032bc:	2000      	movs	r0, #0
 80032be:	f000 f8a5 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80032c2:	20ef      	movs	r0, #239	@ 0xef
 80032c4:	f000 f8a2 	bl	800340c <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80032c8:	202b      	movs	r0, #43	@ 0x2b
 80032ca:	f000 f892 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80032ce:	2000      	movs	r0, #0
 80032d0:	f000 f89c 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80032d4:	2000      	movs	r0, #0
 80032d6:	f000 f899 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80032da:	2001      	movs	r0, #1
 80032dc:	f000 f896 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80032e0:	203f      	movs	r0, #63	@ 0x3f
 80032e2:	f000 f893 	bl	800340c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80032e6:	20f6      	movs	r0, #246	@ 0xf6
 80032e8:	f000 f883 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80032ec:	2001      	movs	r0, #1
 80032ee:	f000 f88d 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80032f2:	2000      	movs	r0, #0
 80032f4:	f000 f88a 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80032f8:	2006      	movs	r0, #6
 80032fa:	f000 f887 	bl	800340c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80032fe:	202c      	movs	r0, #44	@ 0x2c
 8003300:	f000 f877 	bl	80033f2 <ili9341_Write_Reg>
  LCD_Delay(200);
 8003304:	20c8      	movs	r0, #200	@ 0xc8
 8003306:	f000 f9e9 	bl	80036dc <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 800330a:	2026      	movs	r0, #38	@ 0x26
 800330c:	f000 f871 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8003310:	2001      	movs	r0, #1
 8003312:	f000 f87b 	bl	800340c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8003316:	20e0      	movs	r0, #224	@ 0xe0
 8003318:	f000 f86b 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 800331c:	200f      	movs	r0, #15
 800331e:	f000 f875 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8003322:	2029      	movs	r0, #41	@ 0x29
 8003324:	f000 f872 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8003328:	2024      	movs	r0, #36	@ 0x24
 800332a:	f000 f86f 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800332e:	200c      	movs	r0, #12
 8003330:	f000 f86c 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8003334:	200e      	movs	r0, #14
 8003336:	f000 f869 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800333a:	2009      	movs	r0, #9
 800333c:	f000 f866 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8003340:	204e      	movs	r0, #78	@ 0x4e
 8003342:	f000 f863 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8003346:	2078      	movs	r0, #120	@ 0x78
 8003348:	f000 f860 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 800334c:	203c      	movs	r0, #60	@ 0x3c
 800334e:	f000 f85d 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003352:	2009      	movs	r0, #9
 8003354:	f000 f85a 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8003358:	2013      	movs	r0, #19
 800335a:	f000 f857 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800335e:	2005      	movs	r0, #5
 8003360:	f000 f854 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8003364:	2017      	movs	r0, #23
 8003366:	f000 f851 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800336a:	2011      	movs	r0, #17
 800336c:	f000 f84e 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003370:	2000      	movs	r0, #0
 8003372:	f000 f84b 	bl	800340c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8003376:	20e1      	movs	r0, #225	@ 0xe1
 8003378:	f000 f83b 	bl	80033f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800337c:	2000      	movs	r0, #0
 800337e:	f000 f845 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8003382:	2016      	movs	r0, #22
 8003384:	f000 f842 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8003388:	201b      	movs	r0, #27
 800338a:	f000 f83f 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800338e:	2004      	movs	r0, #4
 8003390:	f000 f83c 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8003394:	2011      	movs	r0, #17
 8003396:	f000 f839 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 800339a:	2007      	movs	r0, #7
 800339c:	f000 f836 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80033a0:	2031      	movs	r0, #49	@ 0x31
 80033a2:	f000 f833 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80033a6:	2033      	movs	r0, #51	@ 0x33
 80033a8:	f000 f830 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80033ac:	2042      	movs	r0, #66	@ 0x42
 80033ae:	f000 f82d 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80033b2:	2005      	movs	r0, #5
 80033b4:	f000 f82a 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80033b8:	200c      	movs	r0, #12
 80033ba:	f000 f827 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80033be:	200a      	movs	r0, #10
 80033c0:	f000 f824 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80033c4:	2028      	movs	r0, #40	@ 0x28
 80033c6:	f000 f821 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80033ca:	202f      	movs	r0, #47	@ 0x2f
 80033cc:	f000 f81e 	bl	800340c <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80033d0:	200f      	movs	r0, #15
 80033d2:	f000 f81b 	bl	800340c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80033d6:	2011      	movs	r0, #17
 80033d8:	f000 f80b 	bl	80033f2 <ili9341_Write_Reg>
  LCD_Delay(200);
 80033dc:	20c8      	movs	r0, #200	@ 0xc8
 80033de:	f000 f97d 	bl	80036dc <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80033e2:	2029      	movs	r0, #41	@ 0x29
 80033e4:	f000 f805 	bl	80033f2 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80033e8:	202c      	movs	r0, #44	@ 0x2c
 80033ea:	f000 f802 	bl	80033f2 <ili9341_Write_Reg>
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	4603      	mov	r3, r0
 80033fa:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f94a 	bl	8003698 <LCD_IO_WriteReg>
}
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	4618      	mov	r0, r3
 800341a:	f000 f91b 	bl	8003654 <LCD_IO_WriteData>
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800342c:	4819      	ldr	r0, [pc, #100]	@ (8003494 <SPI_Init+0x6c>)
 800342e:	f004 fbca 	bl	8007bc6 <HAL_SPI_GetState>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d12b      	bne.n	8003490 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8003438:	4b16      	ldr	r3, [pc, #88]	@ (8003494 <SPI_Init+0x6c>)
 800343a:	4a17      	ldr	r2, [pc, #92]	@ (8003498 <SPI_Init+0x70>)
 800343c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800343e:	4b15      	ldr	r3, [pc, #84]	@ (8003494 <SPI_Init+0x6c>)
 8003440:	2218      	movs	r2, #24
 8003442:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003444:	4b13      	ldr	r3, [pc, #76]	@ (8003494 <SPI_Init+0x6c>)
 8003446:	2200      	movs	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800344a:	4b12      	ldr	r3, [pc, #72]	@ (8003494 <SPI_Init+0x6c>)
 800344c:	2200      	movs	r2, #0
 800344e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003450:	4b10      	ldr	r3, [pc, #64]	@ (8003494 <SPI_Init+0x6c>)
 8003452:	2200      	movs	r2, #0
 8003454:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003456:	4b0f      	ldr	r3, [pc, #60]	@ (8003494 <SPI_Init+0x6c>)
 8003458:	2200      	movs	r2, #0
 800345a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800345c:	4b0d      	ldr	r3, [pc, #52]	@ (8003494 <SPI_Init+0x6c>)
 800345e:	2207      	movs	r2, #7
 8003460:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003462:	4b0c      	ldr	r3, [pc, #48]	@ (8003494 <SPI_Init+0x6c>)
 8003464:	2200      	movs	r2, #0
 8003466:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003468:	4b0a      	ldr	r3, [pc, #40]	@ (8003494 <SPI_Init+0x6c>)
 800346a:	2200      	movs	r2, #0
 800346c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800346e:	4b09      	ldr	r3, [pc, #36]	@ (8003494 <SPI_Init+0x6c>)
 8003470:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003474:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003476:	4b07      	ldr	r3, [pc, #28]	@ (8003494 <SPI_Init+0x6c>)
 8003478:	2200      	movs	r2, #0
 800347a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800347c:	4b05      	ldr	r3, [pc, #20]	@ (8003494 <SPI_Init+0x6c>)
 800347e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003482:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8003484:	4803      	ldr	r0, [pc, #12]	@ (8003494 <SPI_Init+0x6c>)
 8003486:	f000 f833 	bl	80034f0 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800348a:	4802      	ldr	r0, [pc, #8]	@ (8003494 <SPI_Init+0x6c>)
 800348c:	f004 f9a6 	bl	80077dc <HAL_SPI_Init>
  }
}
 8003490:	bf00      	nop
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20025bf8 	.word	0x20025bf8
 8003498:	40015000 	.word	0x40015000

0800349c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80034aa:	4b09      	ldr	r3, [pc, #36]	@ (80034d0 <SPI_Write+0x34>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	1db9      	adds	r1, r7, #6
 80034b0:	2201      	movs	r2, #1
 80034b2:	4808      	ldr	r0, [pc, #32]	@ (80034d4 <SPI_Write+0x38>)
 80034b4:	f004 fa43 	bl	800793e <HAL_SPI_Transmit>
 80034b8:	4603      	mov	r3, r0
 80034ba:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80034c2:	f000 f809 	bl	80034d8 <SPI_Error>
  }
}
 80034c6:	bf00      	nop
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000014 	.word	0x20000014
 80034d4:	20025bf8 	.word	0x20025bf8

080034d8 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80034dc:	4803      	ldr	r0, [pc, #12]	@ (80034ec <SPI_Error+0x14>)
 80034de:	f004 fa06 	bl	80078ee <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80034e2:	f7ff ffa1 	bl	8003428 <SPI_Init>
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20025bf8 	.word	0x20025bf8

080034f0 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	@ 0x28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80034f8:	2300      	movs	r3, #0
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	4b17      	ldr	r3, [pc, #92]	@ (800355c <SPI_MspInit+0x6c>)
 80034fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003500:	4a16      	ldr	r2, [pc, #88]	@ (800355c <SPI_MspInit+0x6c>)
 8003502:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003506:	6453      	str	r3, [r2, #68]	@ 0x44
 8003508:	4b14      	ldr	r3, [pc, #80]	@ (800355c <SPI_MspInit+0x6c>)
 800350a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	4b10      	ldr	r3, [pc, #64]	@ (800355c <SPI_MspInit+0x6c>)
 800351a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351c:	4a0f      	ldr	r2, [pc, #60]	@ (800355c <SPI_MspInit+0x6c>)
 800351e:	f043 0320 	orr.w	r3, r3, #32
 8003522:	6313      	str	r3, [r2, #48]	@ 0x30
 8003524:	4b0d      	ldr	r3, [pc, #52]	@ (800355c <SPI_MspInit+0x6c>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8003530:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003534:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003536:	2302      	movs	r3, #2
 8003538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800353a:	2302      	movs	r3, #2
 800353c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800353e:	2301      	movs	r3, #1
 8003540:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8003542:	2305      	movs	r3, #5
 8003544:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8003546:	f107 0314 	add.w	r3, r7, #20
 800354a:	4619      	mov	r1, r3
 800354c:	4804      	ldr	r0, [pc, #16]	@ (8003560 <SPI_MspInit+0x70>)
 800354e:	f001 fc69 	bl	8004e24 <HAL_GPIO_Init>
}
 8003552:	bf00      	nop
 8003554:	3728      	adds	r7, #40	@ 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	40021400 	.word	0x40021400

08003564 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800356a:	4b36      	ldr	r3, [pc, #216]	@ (8003644 <LCD_IO_Init+0xe0>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d164      	bne.n	800363c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8003572:	4b34      	ldr	r3, [pc, #208]	@ (8003644 <LCD_IO_Init+0xe0>)
 8003574:	2201      	movs	r2, #1
 8003576:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003578:	2300      	movs	r3, #0
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	4b32      	ldr	r3, [pc, #200]	@ (8003648 <LCD_IO_Init+0xe4>)
 800357e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003580:	4a31      	ldr	r2, [pc, #196]	@ (8003648 <LCD_IO_Init+0xe4>)
 8003582:	f043 0308 	orr.w	r3, r3, #8
 8003586:	6313      	str	r3, [r2, #48]	@ 0x30
 8003588:	4b2f      	ldr	r3, [pc, #188]	@ (8003648 <LCD_IO_Init+0xe4>)
 800358a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003594:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003598:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800359a:	2301      	movs	r3, #1
 800359c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80035a2:	2302      	movs	r3, #2
 80035a4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80035a6:	f107 030c 	add.w	r3, r7, #12
 80035aa:	4619      	mov	r1, r3
 80035ac:	4827      	ldr	r0, [pc, #156]	@ (800364c <LCD_IO_Init+0xe8>)
 80035ae:	f001 fc39 	bl	8004e24 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	607b      	str	r3, [r7, #4]
 80035b6:	4b24      	ldr	r3, [pc, #144]	@ (8003648 <LCD_IO_Init+0xe4>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ba:	4a23      	ldr	r2, [pc, #140]	@ (8003648 <LCD_IO_Init+0xe4>)
 80035bc:	f043 0308 	orr.w	r3, r3, #8
 80035c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035c2:	4b21      	ldr	r3, [pc, #132]	@ (8003648 <LCD_IO_Init+0xe4>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	607b      	str	r3, [r7, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80035ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80035d4:	2301      	movs	r3, #1
 80035d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80035dc:	2302      	movs	r3, #2
 80035de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80035e0:	f107 030c 	add.w	r3, r7, #12
 80035e4:	4619      	mov	r1, r3
 80035e6:	4819      	ldr	r0, [pc, #100]	@ (800364c <LCD_IO_Init+0xe8>)
 80035e8:	f001 fc1c 	bl	8004e24 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80035ec:	2300      	movs	r3, #0
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	4b15      	ldr	r3, [pc, #84]	@ (8003648 <LCD_IO_Init+0xe4>)
 80035f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f4:	4a14      	ldr	r2, [pc, #80]	@ (8003648 <LCD_IO_Init+0xe4>)
 80035f6:	f043 0304 	orr.w	r3, r3, #4
 80035fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80035fc:	4b12      	ldr	r3, [pc, #72]	@ (8003648 <LCD_IO_Init+0xe4>)
 80035fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003608:	2304      	movs	r3, #4
 800360a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800360c:	2301      	movs	r3, #1
 800360e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003614:	2302      	movs	r3, #2
 8003616:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003618:	f107 030c 	add.w	r3, r7, #12
 800361c:	4619      	mov	r1, r3
 800361e:	480c      	ldr	r0, [pc, #48]	@ (8003650 <LCD_IO_Init+0xec>)
 8003620:	f001 fc00 	bl	8004e24 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003624:	2200      	movs	r2, #0
 8003626:	2104      	movs	r1, #4
 8003628:	4809      	ldr	r0, [pc, #36]	@ (8003650 <LCD_IO_Init+0xec>)
 800362a:	f001 feb3 	bl	8005394 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800362e:	2201      	movs	r2, #1
 8003630:	2104      	movs	r1, #4
 8003632:	4807      	ldr	r0, [pc, #28]	@ (8003650 <LCD_IO_Init+0xec>)
 8003634:	f001 feae 	bl	8005394 <HAL_GPIO_WritePin>

    SPI_Init();
 8003638:	f7ff fef6 	bl	8003428 <SPI_Init>
  }
}
 800363c:	bf00      	nop
 800363e:	3720      	adds	r7, #32
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20025c50 	.word	0x20025c50
 8003648:	40023800 	.word	0x40023800
 800364c:	40020c00 	.word	0x40020c00
 8003650:	40020800 	.word	0x40020800

08003654 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800365e:	2201      	movs	r2, #1
 8003660:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003664:	480a      	ldr	r0, [pc, #40]	@ (8003690 <LCD_IO_WriteData+0x3c>)
 8003666:	f001 fe95 	bl	8005394 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800366a:	2200      	movs	r2, #0
 800366c:	2104      	movs	r1, #4
 800366e:	4809      	ldr	r0, [pc, #36]	@ (8003694 <LCD_IO_WriteData+0x40>)
 8003670:	f001 fe90 	bl	8005394 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff ff10 	bl	800349c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800367c:	2201      	movs	r2, #1
 800367e:	2104      	movs	r1, #4
 8003680:	4804      	ldr	r0, [pc, #16]	@ (8003694 <LCD_IO_WriteData+0x40>)
 8003682:	f001 fe87 	bl	8005394 <HAL_GPIO_WritePin>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40020c00 	.word	0x40020c00
 8003694:	40020800 	.word	0x40020800

08003698 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80036a2:	2200      	movs	r2, #0
 80036a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80036a8:	480a      	ldr	r0, [pc, #40]	@ (80036d4 <LCD_IO_WriteReg+0x3c>)
 80036aa:	f001 fe73 	bl	8005394 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80036ae:	2200      	movs	r2, #0
 80036b0:	2104      	movs	r1, #4
 80036b2:	4809      	ldr	r0, [pc, #36]	@ (80036d8 <LCD_IO_WriteReg+0x40>)
 80036b4:	f001 fe6e 	bl	8005394 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff feed 	bl	800349c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80036c2:	2201      	movs	r2, #1
 80036c4:	2104      	movs	r1, #4
 80036c6:	4804      	ldr	r0, [pc, #16]	@ (80036d8 <LCD_IO_WriteReg+0x40>)
 80036c8:	f001 fe64 	bl	8005394 <HAL_GPIO_WritePin>
}
 80036cc:	bf00      	nop
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40020c00 	.word	0x40020c00
 80036d8:	40020800 	.word	0x40020800

080036dc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f001 f9f1 	bl	8004acc <HAL_Delay>
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036f6:	f001 f977 	bl	80049e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClockOverride();
 80036fa:	f000 f80d 	bl	8003718 <SystemClockOverride>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036fe:	f000 f985 	bl	8003a0c <MX_GPIO_Init>
  MX_I2C3_Init();
 8003702:	f000 f85b 	bl	80037bc <MX_I2C3_Init>
  MX_LTDC_Init();
 8003706:	f000 f899 	bl	800383c <MX_LTDC_Init>
  MX_SPI5_Init();
 800370a:	f000 f949 	bl	80039a0 <MX_SPI5_Init>

  /* USER CODE BEGIN 2 */
  ApplicationInit();
 800370e:	f7fc fee5 	bl	80004dc <ApplicationInit>
  //HAL_Delay(5000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003712:	bf00      	nop
 8003714:	e7fd      	b.n	8003712 <main+0x20>
	...

08003718 <SystemClockOverride>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClockOverride(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b094      	sub	sp, #80	@ 0x50
 800371c:	af00      	add	r7, sp, #0
 RCC_ClkInitTypeDef RCC_ClkInitStruct;
 RCC_OscInitTypeDef RCC_OscInitStruct;
 __HAL_RCC_PWR_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	4b24      	ldr	r3, [pc, #144]	@ (80037b4 <SystemClockOverride+0x9c>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	4a23      	ldr	r2, [pc, #140]	@ (80037b4 <SystemClockOverride+0x9c>)
 8003728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800372c:	6413      	str	r3, [r2, #64]	@ 0x40
 800372e:	4b21      	ldr	r3, [pc, #132]	@ (80037b4 <SystemClockOverride+0x9c>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	68bb      	ldr	r3, [r7, #8]
 __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.
 800373a:	2300      	movs	r3, #0
 800373c:	607b      	str	r3, [r7, #4]
 800373e:	4b1e      	ldr	r3, [pc, #120]	@ (80037b8 <SystemClockOverride+0xa0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a1d      	ldr	r2, [pc, #116]	@ (80037b8 <SystemClockOverride+0xa0>)
 8003744:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	4b1b      	ldr	r3, [pc, #108]	@ (80037b8 <SystemClockOverride+0xa0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003752:	607b      	str	r3, [r7, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 /* Enable HSE Osc and activate PLL with HSE source */
 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003756:	2301      	movs	r3, #1
 8003758:	60fb      	str	r3, [r7, #12]
 RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800375a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800375e:	613b      	str	r3, [r7, #16]
 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003760:	2302      	movs	r3, #2
 8003762:	627b      	str	r3, [r7, #36]	@ 0x24
 RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003764:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003768:	62bb      	str	r3, [r7, #40]	@ 0x28
 RCC_OscInitStruct.PLL.PLLM = 8;
 800376a:	2308      	movs	r3, #8
 800376c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 RCC_OscInitStruct.PLL.PLLN = 336;
 800376e:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003772:	633b      	str	r3, [r7, #48]	@ 0x30
 RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003774:	2302      	movs	r3, #2
 8003776:	637b      	str	r3, [r7, #52]	@ 0x34
 RCC_OscInitStruct.PLL.PLLQ = 7;
 8003778:	2307      	movs	r3, #7
 800377a:	63bb      	str	r3, [r7, #56]	@ 0x38
 HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800377c:	f107 030c 	add.w	r3, r7, #12
 8003780:	4618      	mov	r0, r3
 8003782:	f003 f967 	bl	8006a54 <HAL_RCC_OscConfig>
 /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
 RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003786:	230f      	movs	r3, #15
 8003788:	63fb      	str	r3, [r7, #60]	@ 0x3c
 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800378a:	2302      	movs	r3, #2
 800378c:	643b      	str	r3, [r7, #64]	@ 0x40
 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800378e:	2300      	movs	r3, #0
 8003790:	647b      	str	r3, [r7, #68]	@ 0x44
 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003792:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003796:	64bb      	str	r3, [r7, #72]	@ 0x48
 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800379c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800379e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80037a2:	2105      	movs	r1, #5
 80037a4:	4618      	mov	r0, r3
 80037a6:	f003 fbcd 	bl	8006f44 <HAL_RCC_ClockConfig>
}
 80037aa:	bf00      	nop
 80037ac:	3750      	adds	r7, #80	@ 0x50
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800
 80037b8:	40007000 	.word	0x40007000

080037bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80037c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003830 <MX_I2C3_Init+0x74>)
 80037c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003834 <MX_I2C3_Init+0x78>)
 80037c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80037c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003830 <MX_I2C3_Init+0x74>)
 80037c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003838 <MX_I2C3_Init+0x7c>)
 80037ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80037cc:	4b18      	ldr	r3, [pc, #96]	@ (8003830 <MX_I2C3_Init+0x74>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80037d2:	4b17      	ldr	r3, [pc, #92]	@ (8003830 <MX_I2C3_Init+0x74>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037d8:	4b15      	ldr	r3, [pc, #84]	@ (8003830 <MX_I2C3_Init+0x74>)
 80037da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80037de:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037e0:	4b13      	ldr	r3, [pc, #76]	@ (8003830 <MX_I2C3_Init+0x74>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80037e6:	4b12      	ldr	r3, [pc, #72]	@ (8003830 <MX_I2C3_Init+0x74>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037ec:	4b10      	ldr	r3, [pc, #64]	@ (8003830 <MX_I2C3_Init+0x74>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003830 <MX_I2C3_Init+0x74>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80037f8:	480d      	ldr	r0, [pc, #52]	@ (8003830 <MX_I2C3_Init+0x74>)
 80037fa:	f001 fde5 	bl	80053c8 <HAL_I2C_Init>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003804:	f000 fab0 	bl	8003d68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003808:	2100      	movs	r1, #0
 800380a:	4809      	ldr	r0, [pc, #36]	@ (8003830 <MX_I2C3_Init+0x74>)
 800380c:	f002 fe00 	bl	8006410 <HAL_I2CEx_ConfigAnalogFilter>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8003816:	f000 faa7 	bl	8003d68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800381a:	2100      	movs	r1, #0
 800381c:	4804      	ldr	r0, [pc, #16]	@ (8003830 <MX_I2C3_Init+0x74>)
 800381e:	f002 fe33 	bl	8006488 <HAL_I2CEx_ConfigDigitalFilter>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8003828:	f000 fa9e 	bl	8003d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800382c:	bf00      	nop
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20025c54 	.word	0x20025c54
 8003834:	40005c00 	.word	0x40005c00
 8003838:	000186a0 	.word	0x000186a0

0800383c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b09a      	sub	sp, #104	@ 0x68
 8003840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003842:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003846:	2234      	movs	r2, #52	@ 0x34
 8003848:	2100      	movs	r1, #0
 800384a:	4618      	mov	r0, r3
 800384c:	f004 fc8e 	bl	800816c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8003850:	463b      	mov	r3, r7
 8003852:	2234      	movs	r2, #52	@ 0x34
 8003854:	2100      	movs	r1, #0
 8003856:	4618      	mov	r0, r3
 8003858:	f004 fc88 	bl	800816c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800385c:	4b4e      	ldr	r3, [pc, #312]	@ (8003998 <MX_LTDC_Init+0x15c>)
 800385e:	4a4f      	ldr	r2, [pc, #316]	@ (800399c <MX_LTDC_Init+0x160>)
 8003860:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003862:	4b4d      	ldr	r3, [pc, #308]	@ (8003998 <MX_LTDC_Init+0x15c>)
 8003864:	2200      	movs	r2, #0
 8003866:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003868:	4b4b      	ldr	r3, [pc, #300]	@ (8003998 <MX_LTDC_Init+0x15c>)
 800386a:	2200      	movs	r2, #0
 800386c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800386e:	4b4a      	ldr	r3, [pc, #296]	@ (8003998 <MX_LTDC_Init+0x15c>)
 8003870:	2200      	movs	r2, #0
 8003872:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003874:	4b48      	ldr	r3, [pc, #288]	@ (8003998 <MX_LTDC_Init+0x15c>)
 8003876:	2200      	movs	r2, #0
 8003878:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800387a:	4b47      	ldr	r3, [pc, #284]	@ (8003998 <MX_LTDC_Init+0x15c>)
 800387c:	2207      	movs	r2, #7
 800387e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8003880:	4b45      	ldr	r3, [pc, #276]	@ (8003998 <MX_LTDC_Init+0x15c>)
 8003882:	2203      	movs	r2, #3
 8003884:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8003886:	4b44      	ldr	r3, [pc, #272]	@ (8003998 <MX_LTDC_Init+0x15c>)
 8003888:	220e      	movs	r2, #14
 800388a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800388c:	4b42      	ldr	r3, [pc, #264]	@ (8003998 <MX_LTDC_Init+0x15c>)
 800388e:	2205      	movs	r2, #5
 8003890:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8003892:	4b41      	ldr	r3, [pc, #260]	@ (8003998 <MX_LTDC_Init+0x15c>)
 8003894:	f240 228e 	movw	r2, #654	@ 0x28e
 8003898:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800389a:	4b3f      	ldr	r3, [pc, #252]	@ (8003998 <MX_LTDC_Init+0x15c>)
 800389c:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80038a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80038a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003998 <MX_LTDC_Init+0x15c>)
 80038a4:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80038a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80038aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003998 <MX_LTDC_Init+0x15c>)
 80038ac:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80038b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80038b2:	4b39      	ldr	r3, [pc, #228]	@ (8003998 <MX_LTDC_Init+0x15c>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80038ba:	4b37      	ldr	r3, [pc, #220]	@ (8003998 <MX_LTDC_Init+0x15c>)
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80038c2:	4b35      	ldr	r3, [pc, #212]	@ (8003998 <MX_LTDC_Init+0x15c>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80038ca:	4833      	ldr	r0, [pc, #204]	@ (8003998 <MX_LTDC_Init+0x15c>)
 80038cc:	f002 fe1c 	bl	8006508 <HAL_LTDC_Init>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80038d6:	f000 fa47 	bl	8003d68 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80038da:	2300      	movs	r3, #0
 80038dc:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80038ea:	2300      	movs	r3, #0
 80038ec:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80038f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038fa:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80038fc:	2305      	movs	r3, #5
 80038fe:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8003908:	2300      	movs	r3, #0
 800390a:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800391e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003922:	2200      	movs	r2, #0
 8003924:	4619      	mov	r1, r3
 8003926:	481c      	ldr	r0, [pc, #112]	@ (8003998 <MX_LTDC_Init+0x15c>)
 8003928:	f002 febe 	bl	80066a8 <HAL_LTDC_ConfigLayer>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8003932:	f000 fa19 	bl	8003d68 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8003936:	2300      	movs	r3, #0
 8003938:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003956:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003958:	2305      	movs	r3, #5
 800395a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800396e:	2300      	movs	r3, #0
 8003970:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800397a:	463b      	mov	r3, r7
 800397c:	2201      	movs	r2, #1
 800397e:	4619      	mov	r1, r3
 8003980:	4805      	ldr	r0, [pc, #20]	@ (8003998 <MX_LTDC_Init+0x15c>)
 8003982:	f002 fe91 	bl	80066a8 <HAL_LTDC_ConfigLayer>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800398c:	f000 f9ec 	bl	8003d68 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003990:	bf00      	nop
 8003992:	3768      	adds	r7, #104	@ 0x68
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20025ca8 	.word	0x20025ca8
 800399c:	40016800 	.word	0x40016800

080039a0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80039a4:	4b17      	ldr	r3, [pc, #92]	@ (8003a04 <MX_SPI5_Init+0x64>)
 80039a6:	4a18      	ldr	r2, [pc, #96]	@ (8003a08 <MX_SPI5_Init+0x68>)
 80039a8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80039aa:	4b16      	ldr	r3, [pc, #88]	@ (8003a04 <MX_SPI5_Init+0x64>)
 80039ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80039b0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80039b2:	4b14      	ldr	r3, [pc, #80]	@ (8003a04 <MX_SPI5_Init+0x64>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80039b8:	4b12      	ldr	r3, [pc, #72]	@ (8003a04 <MX_SPI5_Init+0x64>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039be:	4b11      	ldr	r3, [pc, #68]	@ (8003a04 <MX_SPI5_Init+0x64>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003a04 <MX_SPI5_Init+0x64>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80039ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003a04 <MX_SPI5_Init+0x64>)
 80039cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039d0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003a04 <MX_SPI5_Init+0x64>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a04 <MX_SPI5_Init+0x64>)
 80039da:	2200      	movs	r2, #0
 80039dc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80039de:	4b09      	ldr	r3, [pc, #36]	@ (8003a04 <MX_SPI5_Init+0x64>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039e4:	4b07      	ldr	r3, [pc, #28]	@ (8003a04 <MX_SPI5_Init+0x64>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80039ea:	4b06      	ldr	r3, [pc, #24]	@ (8003a04 <MX_SPI5_Init+0x64>)
 80039ec:	220a      	movs	r2, #10
 80039ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80039f0:	4804      	ldr	r0, [pc, #16]	@ (8003a04 <MX_SPI5_Init+0x64>)
 80039f2:	f003 fef3 	bl	80077dc <HAL_SPI_Init>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80039fc:	f000 f9b4 	bl	8003d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003a00:	bf00      	nop
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20025d50 	.word	0x20025d50
 8003a08:	40015000 	.word	0x40015000

08003a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08e      	sub	sp, #56	@ 0x38
 8003a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	605a      	str	r2, [r3, #4]
 8003a1c:	609a      	str	r2, [r3, #8]
 8003a1e:	60da      	str	r2, [r3, #12]
 8003a20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	623b      	str	r3, [r7, #32]
 8003a26:	4bb2      	ldr	r3, [pc, #712]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2a:	4ab1      	ldr	r2, [pc, #708]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003a2c:	f043 0304 	orr.w	r3, r3, #4
 8003a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a32:	4baf      	ldr	r3, [pc, #700]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	623b      	str	r3, [r7, #32]
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
 8003a42:	4bab      	ldr	r3, [pc, #684]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a46:	4aaa      	ldr	r2, [pc, #680]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003a48:	f043 0320 	orr.w	r3, r3, #32
 8003a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a4e:	4ba8      	ldr	r3, [pc, #672]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	61fb      	str	r3, [r7, #28]
 8003a58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	4ba4      	ldr	r3, [pc, #656]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a62:	4aa3      	ldr	r2, [pc, #652]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a6a:	4ba1      	ldr	r3, [pc, #644]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	4b9d      	ldr	r3, [pc, #628]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7e:	4a9c      	ldr	r2, [pc, #624]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a86:	4b9a      	ldr	r3, [pc, #616]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	4b96      	ldr	r3, [pc, #600]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9a:	4a95      	ldr	r2, [pc, #596]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003a9c:	f043 0302 	orr.w	r3, r3, #2
 8003aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aa2:	4b93      	ldr	r3, [pc, #588]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	4b8f      	ldr	r3, [pc, #572]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab6:	4a8e      	ldr	r2, [pc, #568]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003ab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003abe:	4b8c      	ldr	r3, [pc, #560]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	4b88      	ldr	r3, [pc, #544]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad2:	4a87      	ldr	r2, [pc, #540]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003ad4:	f043 0310 	orr.w	r3, r3, #16
 8003ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ada:	4b85      	ldr	r3, [pc, #532]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ade:	f003 0310 	and.w	r3, r3, #16
 8003ae2:	60bb      	str	r3, [r7, #8]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	607b      	str	r3, [r7, #4]
 8003aea:	4b81      	ldr	r3, [pc, #516]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aee:	4a80      	ldr	r2, [pc, #512]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003af0:	f043 0308 	orr.w	r3, r3, #8
 8003af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003af6:	4b7e      	ldr	r3, [pc, #504]	@ (8003cf0 <MX_GPIO_Init+0x2e4>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	607b      	str	r3, [r7, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8003b02:	2200      	movs	r2, #0
 8003b04:	2116      	movs	r1, #22
 8003b06:	487b      	ldr	r0, [pc, #492]	@ (8003cf4 <MX_GPIO_Init+0x2e8>)
 8003b08:	f001 fc44 	bl	8005394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2180      	movs	r1, #128	@ 0x80
 8003b10:	4879      	ldr	r0, [pc, #484]	@ (8003cf8 <MX_GPIO_Init+0x2ec>)
 8003b12:	f001 fc3f 	bl	8005394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8003b16:	2200      	movs	r2, #0
 8003b18:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8003b1c:	4877      	ldr	r0, [pc, #476]	@ (8003cfc <MX_GPIO_Init+0x2f0>)
 8003b1e:	f001 fc39 	bl	8005394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8003b22:	2200      	movs	r2, #0
 8003b24:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8003b28:	4875      	ldr	r0, [pc, #468]	@ (8003d00 <MX_GPIO_Init+0x2f4>)
 8003b2a:	f001 fc33 	bl	8005394 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8003b2e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003b32:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b34:	2302      	movs	r3, #2
 8003b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b40:	230c      	movs	r3, #12
 8003b42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b48:	4619      	mov	r1, r3
 8003b4a:	486e      	ldr	r0, [pc, #440]	@ (8003d04 <MX_GPIO_Init+0x2f8>)
 8003b4c:	f001 f96a 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8003b50:	2301      	movs	r3, #1
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b54:	2302      	movs	r3, #2
 8003b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b60:	230c      	movs	r3, #12
 8003b62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8003b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4862      	ldr	r0, [pc, #392]	@ (8003cf4 <MX_GPIO_Init+0x2e8>)
 8003b6c:	f001 f95a 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8003b70:	2316      	movs	r3, #22
 8003b72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b74:	2301      	movs	r3, #1
 8003b76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b84:	4619      	mov	r1, r3
 8003b86:	485b      	ldr	r0, [pc, #364]	@ (8003cf4 <MX_GPIO_Init+0x2e8>)
 8003b88:	f001 f94c 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8003b8c:	f248 0307 	movw	r3, #32775	@ 0x8007
 8003b90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003b92:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003b96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4855      	ldr	r0, [pc, #340]	@ (8003cf8 <MX_GPIO_Init+0x2ec>)
 8003ba4:	f001 f93e 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8003ba8:	2380      	movs	r3, #128	@ 0x80
 8003baa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bac:	2301      	movs	r3, #1
 8003bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8003bb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	484e      	ldr	r0, [pc, #312]	@ (8003cf8 <MX_GPIO_Init+0x2ec>)
 8003bc0:	f001 f930 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8003bc4:	2320      	movs	r3, #32
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003bc8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8003bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4846      	ldr	r0, [pc, #280]	@ (8003cf4 <MX_GPIO_Init+0x2e8>)
 8003bda:	f001 f923 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003bde:	2304      	movs	r3, #4
 8003be0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003be2:	2300      	movs	r3, #0
 8003be4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003bea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4845      	ldr	r0, [pc, #276]	@ (8003d08 <MX_GPIO_Init+0x2fc>)
 8003bf2:	f001 f917 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8003bf6:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003bfa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c04:	2303      	movs	r3, #3
 8003c06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c08:	230c      	movs	r3, #12
 8003c0a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c10:	4619      	mov	r1, r3
 8003c12:	483b      	ldr	r0, [pc, #236]	@ (8003d00 <MX_GPIO_Init+0x2f4>)
 8003c14:	f001 f906 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8003c18:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003c1c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1e:	2302      	movs	r3, #2
 8003c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c26:	2303      	movs	r3, #3
 8003c28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c2a:	230c      	movs	r3, #12
 8003c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c32:	4619      	mov	r1, r3
 8003c34:	4835      	ldr	r0, [pc, #212]	@ (8003d0c <MX_GPIO_Init+0x300>)
 8003c36:	f001 f8f5 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8003c3a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8003c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c40:	2302      	movs	r3, #2
 8003c42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8003c4c:	230c      	movs	r3, #12
 8003c4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c54:	4619      	mov	r1, r3
 8003c56:	482c      	ldr	r0, [pc, #176]	@ (8003d08 <MX_GPIO_Init+0x2fc>)
 8003c58:	f001 f8e4 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8003c5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c62:	2300      	movs	r3, #0
 8003c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8003c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4825      	ldr	r0, [pc, #148]	@ (8003d08 <MX_GPIO_Init+0x2fc>)
 8003c72:	f001 f8d7 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8003c76:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c84:	2303      	movs	r3, #3
 8003c86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c88:	230c      	movs	r3, #12
 8003c8a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c90:	4619      	mov	r1, r3
 8003c92:	481a      	ldr	r0, [pc, #104]	@ (8003cfc <MX_GPIO_Init+0x2f0>)
 8003c94:	f001 f8c6 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8003c98:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8003ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003caa:	4619      	mov	r1, r3
 8003cac:	4813      	ldr	r0, [pc, #76]	@ (8003cfc <MX_GPIO_Init+0x2f0>)
 8003cae:	f001 f8b9 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8003cb2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cc8:	4619      	mov	r1, r3
 8003cca:	480c      	ldr	r0, [pc, #48]	@ (8003cfc <MX_GPIO_Init+0x2f0>)
 8003ccc:	f001 f8aa 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003cd0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ce2:	2307      	movs	r3, #7
 8003ce4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cea:	4619      	mov	r1, r3
 8003cec:	e010      	b.n	8003d10 <MX_GPIO_Init+0x304>
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	40020800 	.word	0x40020800
 8003cf8:	40020000 	.word	0x40020000
 8003cfc:	40020c00 	.word	0x40020c00
 8003d00:	40021800 	.word	0x40021800
 8003d04:	40021400 	.word	0x40021400
 8003d08:	40020400 	.word	0x40020400
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	4812      	ldr	r0, [pc, #72]	@ (8003d5c <MX_GPIO_Init+0x350>)
 8003d12:	f001 f887 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8003d16:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d24:	2300      	movs	r3, #0
 8003d26:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	480c      	ldr	r0, [pc, #48]	@ (8003d60 <MX_GPIO_Init+0x354>)
 8003d30:	f001 f878 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8003d34:	2360      	movs	r3, #96	@ 0x60
 8003d36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d40:	2303      	movs	r3, #3
 8003d42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003d44:	230c      	movs	r3, #12
 8003d46:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4805      	ldr	r0, [pc, #20]	@ (8003d64 <MX_GPIO_Init+0x358>)
 8003d50:	f001 f868 	bl	8004e24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d54:	bf00      	nop
 8003d56:	3738      	adds	r7, #56	@ 0x38
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40020000 	.word	0x40020000
 8003d60:	40021800 	.word	0x40021800
 8003d64:	40020400 	.word	0x40020400

08003d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003d6c:	b672      	cpsid	i
}
 8003d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d70:	bf00      	nop
 8003d72:	e7fd      	b.n	8003d70 <Error_Handler+0x8>

08003d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	4b10      	ldr	r3, [pc, #64]	@ (8003dc0 <HAL_MspInit+0x4c>)
 8003d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d82:	4a0f      	ldr	r2, [pc, #60]	@ (8003dc0 <HAL_MspInit+0x4c>)
 8003d84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d88:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc0 <HAL_MspInit+0x4c>)
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d92:	607b      	str	r3, [r7, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	603b      	str	r3, [r7, #0]
 8003d9a:	4b09      	ldr	r3, [pc, #36]	@ (8003dc0 <HAL_MspInit+0x4c>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	4a08      	ldr	r2, [pc, #32]	@ (8003dc0 <HAL_MspInit+0x4c>)
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003da6:	4b06      	ldr	r3, [pc, #24]	@ (8003dc0 <HAL_MspInit+0x4c>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003db2:	2007      	movs	r0, #7
 8003db4:	f000 ffc0 	bl	8004d38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003db8:	bf00      	nop
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40023800 	.word	0x40023800

08003dc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08a      	sub	sp, #40	@ 0x28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dcc:	f107 0314 	add.w	r3, r7, #20
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	605a      	str	r2, [r3, #4]
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	60da      	str	r2, [r3, #12]
 8003dda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a29      	ldr	r2, [pc, #164]	@ (8003e88 <HAL_I2C_MspInit+0xc4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d14b      	bne.n	8003e7e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	613b      	str	r3, [r7, #16]
 8003dea:	4b28      	ldr	r3, [pc, #160]	@ (8003e8c <HAL_I2C_MspInit+0xc8>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	4a27      	ldr	r2, [pc, #156]	@ (8003e8c <HAL_I2C_MspInit+0xc8>)
 8003df0:	f043 0304 	orr.w	r3, r3, #4
 8003df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003df6:	4b25      	ldr	r3, [pc, #148]	@ (8003e8c <HAL_I2C_MspInit+0xc8>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	4b21      	ldr	r3, [pc, #132]	@ (8003e8c <HAL_I2C_MspInit+0xc8>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0a:	4a20      	ldr	r2, [pc, #128]	@ (8003e8c <HAL_I2C_MspInit+0xc8>)
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e12:	4b1e      	ldr	r3, [pc, #120]	@ (8003e8c <HAL_I2C_MspInit+0xc8>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003e1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e24:	2312      	movs	r3, #18
 8003e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003e30:	2304      	movs	r3, #4
 8003e32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4815      	ldr	r0, [pc, #84]	@ (8003e90 <HAL_I2C_MspInit+0xcc>)
 8003e3c:	f000 fff2 	bl	8004e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003e40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e46:	2312      	movs	r3, #18
 8003e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003e52:	2304      	movs	r3, #4
 8003e54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003e56:	f107 0314 	add.w	r3, r7, #20
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	480d      	ldr	r0, [pc, #52]	@ (8003e94 <HAL_I2C_MspInit+0xd0>)
 8003e5e:	f000 ffe1 	bl	8004e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003e62:	2300      	movs	r3, #0
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	4b09      	ldr	r3, [pc, #36]	@ (8003e8c <HAL_I2C_MspInit+0xc8>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6a:	4a08      	ldr	r2, [pc, #32]	@ (8003e8c <HAL_I2C_MspInit+0xc8>)
 8003e6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e72:	4b06      	ldr	r3, [pc, #24]	@ (8003e8c <HAL_I2C_MspInit+0xc8>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e7a:	60bb      	str	r3, [r7, #8]
 8003e7c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003e7e:	bf00      	nop
 8003e80:	3728      	adds	r7, #40	@ 0x28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40005c00 	.word	0x40005c00
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	40020800 	.word	0x40020800
 8003e94:	40020000 	.word	0x40020000

08003e98 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b09a      	sub	sp, #104	@ 0x68
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	609a      	str	r2, [r3, #8]
 8003eac:	60da      	str	r2, [r3, #12]
 8003eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003eb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003eb4:	2230      	movs	r2, #48	@ 0x30
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f004 f957 	bl	800816c <memset>
  if(hltdc->Instance==LTDC)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a81      	ldr	r2, [pc, #516]	@ (80040c8 <HAL_LTDC_MspInit+0x230>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	f040 80fa 	bne.w	80040be <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003eca:	2308      	movs	r3, #8
 8003ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8003ece:	2332      	movs	r3, #50	@ 0x32
 8003ed0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f003 fa3c 	bl	800735c <HAL_RCCEx_PeriphCLKConfig>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8003eea:	f7ff ff3d 	bl	8003d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	623b      	str	r3, [r7, #32]
 8003ef2:	4b76      	ldr	r3, [pc, #472]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef6:	4a75      	ldr	r2, [pc, #468]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003ef8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003efe:	4b73      	ldr	r3, [pc, #460]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f06:	623b      	str	r3, [r7, #32]
 8003f08:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	4b6f      	ldr	r3, [pc, #444]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f12:	4a6e      	ldr	r2, [pc, #440]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f14:	f043 0320 	orr.w	r3, r3, #32
 8003f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f1a:	4b6c      	ldr	r3, [pc, #432]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	61bb      	str	r3, [r7, #24]
 8003f2a:	4b68      	ldr	r3, [pc, #416]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2e:	4a67      	ldr	r2, [pc, #412]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f36:	4b65      	ldr	r3, [pc, #404]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	61bb      	str	r3, [r7, #24]
 8003f40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	4b61      	ldr	r3, [pc, #388]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4a:	4a60      	ldr	r2, [pc, #384]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f4c:	f043 0302 	orr.w	r3, r3, #2
 8003f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f52:	4b5e      	ldr	r3, [pc, #376]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	4b5a      	ldr	r3, [pc, #360]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f66:	4a59      	ldr	r2, [pc, #356]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f6e:	4b57      	ldr	r3, [pc, #348]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	4b53      	ldr	r3, [pc, #332]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f82:	4a52      	ldr	r2, [pc, #328]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f84:	f043 0304 	orr.w	r3, r3, #4
 8003f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f8a:	4b50      	ldr	r3, [pc, #320]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	4a4b      	ldr	r2, [pc, #300]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003fa0:	f043 0308 	orr.w	r3, r3, #8
 8003fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fa6:	4b49      	ldr	r3, [pc, #292]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	60bb      	str	r3, [r7, #8]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003fb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fb6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb8:	2302      	movs	r3, #2
 8003fba:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003fc4:	230e      	movs	r3, #14
 8003fc6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003fc8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4840      	ldr	r0, [pc, #256]	@ (80040d0 <HAL_LTDC_MspInit+0x238>)
 8003fd0:	f000 ff28 	bl	8004e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003fd4:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003fd8:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003fe6:	230e      	movs	r3, #14
 8003fe8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4838      	ldr	r0, [pc, #224]	@ (80040d4 <HAL_LTDC_MspInit+0x23c>)
 8003ff2:	f000 ff17 	bl	8004e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004002:	2300      	movs	r3, #0
 8004004:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004006:	2309      	movs	r3, #9
 8004008:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800400a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800400e:	4619      	mov	r1, r3
 8004010:	4831      	ldr	r0, [pc, #196]	@ (80040d8 <HAL_LTDC_MspInit+0x240>)
 8004012:	f000 ff07 	bl	8004e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8004016:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800401a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401c:	2302      	movs	r3, #2
 800401e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004020:	2300      	movs	r3, #0
 8004022:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004024:	2300      	movs	r3, #0
 8004026:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004028:	230e      	movs	r3, #14
 800402a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800402c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004030:	4619      	mov	r1, r3
 8004032:	4829      	ldr	r0, [pc, #164]	@ (80040d8 <HAL_LTDC_MspInit+0x240>)
 8004034:	f000 fef6 	bl	8004e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8004038:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800403c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800403e:	2302      	movs	r3, #2
 8004040:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004042:	2300      	movs	r3, #0
 8004044:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004046:	2300      	movs	r3, #0
 8004048:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800404a:	230e      	movs	r3, #14
 800404c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800404e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004052:	4619      	mov	r1, r3
 8004054:	4821      	ldr	r0, [pc, #132]	@ (80040dc <HAL_LTDC_MspInit+0x244>)
 8004056:	f000 fee5 	bl	8004e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800405a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800405e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004060:	2302      	movs	r3, #2
 8004062:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004064:	2300      	movs	r3, #0
 8004066:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004068:	2300      	movs	r3, #0
 800406a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800406c:	230e      	movs	r3, #14
 800406e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004070:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004074:	4619      	mov	r1, r3
 8004076:	481a      	ldr	r0, [pc, #104]	@ (80040e0 <HAL_LTDC_MspInit+0x248>)
 8004078:	f000 fed4 	bl	8004e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800407c:	2348      	movs	r3, #72	@ 0x48
 800407e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004080:	2302      	movs	r3, #2
 8004082:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004084:	2300      	movs	r3, #0
 8004086:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004088:	2300      	movs	r3, #0
 800408a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800408c:	230e      	movs	r3, #14
 800408e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004090:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004094:	4619      	mov	r1, r3
 8004096:	4813      	ldr	r0, [pc, #76]	@ (80040e4 <HAL_LTDC_MspInit+0x24c>)
 8004098:	f000 fec4 	bl	8004e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800409c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80040a0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a2:	2302      	movs	r3, #2
 80040a4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040aa:	2300      	movs	r3, #0
 80040ac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80040ae:	2309      	movs	r3, #9
 80040b0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040b2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80040b6:	4619      	mov	r1, r3
 80040b8:	4808      	ldr	r0, [pc, #32]	@ (80040dc <HAL_LTDC_MspInit+0x244>)
 80040ba:	f000 feb3 	bl	8004e24 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80040be:	bf00      	nop
 80040c0:	3768      	adds	r7, #104	@ 0x68
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40016800 	.word	0x40016800
 80040cc:	40023800 	.word	0x40023800
 80040d0:	40021400 	.word	0x40021400
 80040d4:	40020000 	.word	0x40020000
 80040d8:	40020400 	.word	0x40020400
 80040dc:	40021800 	.word	0x40021800
 80040e0:	40020800 	.word	0x40020800
 80040e4:	40020c00 	.word	0x40020c00

080040e8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004124 <HAL_RNG_MspInit+0x3c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d10d      	bne.n	8004116 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <HAL_RNG_MspInit+0x40>)
 8004100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004102:	4a09      	ldr	r2, [pc, #36]	@ (8004128 <HAL_RNG_MspInit+0x40>)
 8004104:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004108:	6353      	str	r3, [r2, #52]	@ 0x34
 800410a:	4b07      	ldr	r3, [pc, #28]	@ (8004128 <HAL_RNG_MspInit+0x40>)
 800410c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800410e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	50060800 	.word	0x50060800
 8004128:	40023800 	.word	0x40023800

0800412c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08a      	sub	sp, #40	@ 0x28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004134:	f107 0314 	add.w	r3, r7, #20
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	60da      	str	r2, [r3, #12]
 8004142:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a19      	ldr	r2, [pc, #100]	@ (80041b0 <HAL_SPI_MspInit+0x84>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d12c      	bne.n	80041a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	4b18      	ldr	r3, [pc, #96]	@ (80041b4 <HAL_SPI_MspInit+0x88>)
 8004154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004156:	4a17      	ldr	r2, [pc, #92]	@ (80041b4 <HAL_SPI_MspInit+0x88>)
 8004158:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800415c:	6453      	str	r3, [r2, #68]	@ 0x44
 800415e:	4b15      	ldr	r3, [pc, #84]	@ (80041b4 <HAL_SPI_MspInit+0x88>)
 8004160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004162:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	4b11      	ldr	r3, [pc, #68]	@ (80041b4 <HAL_SPI_MspInit+0x88>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	4a10      	ldr	r2, [pc, #64]	@ (80041b4 <HAL_SPI_MspInit+0x88>)
 8004174:	f043 0320 	orr.w	r3, r3, #32
 8004178:	6313      	str	r3, [r2, #48]	@ 0x30
 800417a:	4b0e      	ldr	r3, [pc, #56]	@ (80041b4 <HAL_SPI_MspInit+0x88>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8004186:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800418a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418c:	2302      	movs	r3, #2
 800418e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004190:	2300      	movs	r3, #0
 8004192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004194:	2300      	movs	r3, #0
 8004196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004198:	2305      	movs	r3, #5
 800419a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800419c:	f107 0314 	add.w	r3, r7, #20
 80041a0:	4619      	mov	r1, r3
 80041a2:	4805      	ldr	r0, [pc, #20]	@ (80041b8 <HAL_SPI_MspInit+0x8c>)
 80041a4:	f000 fe3e 	bl	8004e24 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80041a8:	bf00      	nop
 80041aa:	3728      	adds	r7, #40	@ 0x28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40015000 	.word	0x40015000
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40021400 	.word	0x40021400

080041bc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a08      	ldr	r2, [pc, #32]	@ (80041ec <HAL_SPI_MspDeInit+0x30>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d10a      	bne.n	80041e4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80041ce:	4b08      	ldr	r3, [pc, #32]	@ (80041f0 <HAL_SPI_MspDeInit+0x34>)
 80041d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d2:	4a07      	ldr	r2, [pc, #28]	@ (80041f0 <HAL_SPI_MspDeInit+0x34>)
 80041d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80041d8:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80041da:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80041de:	4805      	ldr	r0, [pc, #20]	@ (80041f4 <HAL_SPI_MspDeInit+0x38>)
 80041e0:	f000 ffcc 	bl	800517c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80041e4:	bf00      	nop
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40015000 	.word	0x40015000
 80041f0:	40023800 	.word	0x40023800
 80041f4:	40021400 	.word	0x40021400

080041f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a0b      	ldr	r2, [pc, #44]	@ (8004234 <HAL_TIM_Base_MspInit+0x3c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d10d      	bne.n	8004226 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	4b0a      	ldr	r3, [pc, #40]	@ (8004238 <HAL_TIM_Base_MspInit+0x40>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004212:	4a09      	ldr	r2, [pc, #36]	@ (8004238 <HAL_TIM_Base_MspInit+0x40>)
 8004214:	f043 0320 	orr.w	r3, r3, #32
 8004218:	6413      	str	r3, [r2, #64]	@ 0x40
 800421a:	4b07      	ldr	r3, [pc, #28]	@ (8004238 <HAL_TIM_Base_MspInit+0x40>)
 800421c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8004226:	bf00      	nop
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40001400 	.word	0x40001400
 8004238:	40023800 	.word	0x40023800

0800423c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004240:	bf00      	nop
 8004242:	e7fd      	b.n	8004240 <NMI_Handler+0x4>

08004244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004248:	bf00      	nop
 800424a:	e7fd      	b.n	8004248 <HardFault_Handler+0x4>

0800424c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004250:	bf00      	nop
 8004252:	e7fd      	b.n	8004250 <MemManage_Handler+0x4>

08004254 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004258:	bf00      	nop
 800425a:	e7fd      	b.n	8004258 <BusFault_Handler+0x4>

0800425c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004260:	bf00      	nop
 8004262:	e7fd      	b.n	8004260 <UsageFault_Handler+0x4>

08004264 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004268:	bf00      	nop
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004272:	b480      	push	{r7}
 8004274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004276:	bf00      	nop
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004284:	bf00      	nop
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004292:	f000 fbfb 	bl	8004a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004296:	bf00      	nop
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	db0b      	blt.n	80042c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ae:	79fb      	ldrb	r3, [r7, #7]
 80042b0:	f003 021f 	and.w	r2, r3, #31
 80042b4:	4907      	ldr	r1, [pc, #28]	@ (80042d4 <__NVIC_EnableIRQ+0x38>)
 80042b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	2001      	movs	r0, #1
 80042be:	fa00 f202 	lsl.w	r2, r0, r2
 80042c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	e000e100 	.word	0xe000e100

080042d8 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80042de:	f000 f9cd 	bl	800467c <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80042e2:	f000 f98d 	bl	8004600 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80042e6:	2202      	movs	r2, #2
 80042e8:	2103      	movs	r1, #3
 80042ea:	2082      	movs	r0, #130	@ 0x82
 80042ec:	f000 fa1a 	bl	8004724 <I2C3_Write>
    HAL_Delay(5);
 80042f0:	2005      	movs	r0, #5
 80042f2:	f000 fbeb 	bl	8004acc <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80042f6:	2200      	movs	r2, #0
 80042f8:	2103      	movs	r1, #3
 80042fa:	2082      	movs	r0, #130	@ 0x82
 80042fc:	f000 fa12 	bl	8004724 <I2C3_Write>
    HAL_Delay(2);
 8004300:	2002      	movs	r0, #2
 8004302:	f000 fbe3 	bl	8004acc <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8004306:	1cba      	adds	r2, r7, #2
 8004308:	2302      	movs	r3, #2
 800430a:	2100      	movs	r1, #0
 800430c:	2082      	movs	r0, #130	@ 0x82
 800430e:	f000 fa55 	bl	80047bc <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8004312:	887b      	ldrh	r3, [r7, #2]
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8004318:	887b      	ldrh	r3, [r7, #2]
 800431a:	0a1b      	lsrs	r3, r3, #8
 800431c:	b29a      	uxth	r2, r3
 800431e:	88fb      	ldrh	r3, [r7, #6]
 8004320:	4313      	orrs	r3, r2
 8004322:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8004324:	88fb      	ldrh	r3, [r7, #6]
 8004326:	f640 0211 	movw	r2, #2065	@ 0x811
 800432a:	4293      	cmp	r3, r2
 800432c:	d001      	beq.n	8004332 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 800432e:	2303      	movs	r3, #3
 8004330:	e095      	b.n	800445e <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8004332:	2202      	movs	r2, #2
 8004334:	2103      	movs	r1, #3
 8004336:	2082      	movs	r0, #130	@ 0x82
 8004338:	f000 f9f4 	bl	8004724 <I2C3_Write>
    HAL_Delay(5);
 800433c:	2005      	movs	r0, #5
 800433e:	f000 fbc5 	bl	8004acc <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8004342:	2200      	movs	r2, #0
 8004344:	2103      	movs	r1, #3
 8004346:	2082      	movs	r0, #130	@ 0x82
 8004348:	f000 f9ec 	bl	8004724 <I2C3_Write>
    HAL_Delay(2);
 800434c:	2002      	movs	r0, #2
 800434e:	f000 fbbd 	bl	8004acc <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8004352:	2004      	movs	r0, #4
 8004354:	f000 f887 	bl	8004466 <STMPE811_Read>
 8004358:	4603      	mov	r3, r0
 800435a:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 800435c:	797b      	ldrb	r3, [r7, #5]
 800435e:	f023 0301 	bic.w	r3, r3, #1
 8004362:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8004364:	797b      	ldrb	r3, [r7, #5]
 8004366:	461a      	mov	r2, r3
 8004368:	2104      	movs	r1, #4
 800436a:	2082      	movs	r0, #130	@ 0x82
 800436c:	f000 f9da 	bl	8004724 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8004370:	2004      	movs	r0, #4
 8004372:	f000 f878 	bl	8004466 <STMPE811_Read>
 8004376:	4603      	mov	r3, r0
 8004378:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 800437a:	797b      	ldrb	r3, [r7, #5]
 800437c:	f023 0302 	bic.w	r3, r3, #2
 8004380:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8004382:	797b      	ldrb	r3, [r7, #5]
 8004384:	461a      	mov	r2, r3
 8004386:	2104      	movs	r1, #4
 8004388:	2082      	movs	r0, #130	@ 0x82
 800438a:	f000 f9cb 	bl	8004724 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 800438e:	2249      	movs	r2, #73	@ 0x49
 8004390:	2120      	movs	r1, #32
 8004392:	2082      	movs	r0, #130	@ 0x82
 8004394:	f000 f9c6 	bl	8004724 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8004398:	2002      	movs	r0, #2
 800439a:	f000 fb97 	bl	8004acc <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 800439e:	2201      	movs	r2, #1
 80043a0:	2121      	movs	r1, #33	@ 0x21
 80043a2:	2082      	movs	r0, #130	@ 0x82
 80043a4:	f000 f9be 	bl	8004724 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80043a8:	2017      	movs	r0, #23
 80043aa:	f000 f85c 	bl	8004466 <STMPE811_Read>
 80043ae:	4603      	mov	r3, r0
 80043b0:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80043b2:	797b      	ldrb	r3, [r7, #5]
 80043b4:	f043 031e 	orr.w	r3, r3, #30
 80043b8:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80043ba:	797b      	ldrb	r3, [r7, #5]
 80043bc:	461a      	mov	r2, r3
 80043be:	2117      	movs	r1, #23
 80043c0:	2082      	movs	r0, #130	@ 0x82
 80043c2:	f000 f9af 	bl	8004724 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80043c6:	229a      	movs	r2, #154	@ 0x9a
 80043c8:	2141      	movs	r1, #65	@ 0x41
 80043ca:	2082      	movs	r0, #130	@ 0x82
 80043cc:	f000 f9aa 	bl	8004724 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80043d0:	2201      	movs	r2, #1
 80043d2:	214a      	movs	r1, #74	@ 0x4a
 80043d4:	2082      	movs	r0, #130	@ 0x82
 80043d6:	f000 f9a5 	bl	8004724 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80043da:	2201      	movs	r2, #1
 80043dc:	214b      	movs	r1, #75	@ 0x4b
 80043de:	2082      	movs	r0, #130	@ 0x82
 80043e0:	f000 f9a0 	bl	8004724 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80043e4:	2200      	movs	r2, #0
 80043e6:	214b      	movs	r1, #75	@ 0x4b
 80043e8:	2082      	movs	r0, #130	@ 0x82
 80043ea:	f000 f99b 	bl	8004724 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80043ee:	2201      	movs	r2, #1
 80043f0:	2156      	movs	r1, #86	@ 0x56
 80043f2:	2082      	movs	r0, #130	@ 0x82
 80043f4:	f000 f996 	bl	8004724 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80043f8:	2201      	movs	r2, #1
 80043fa:	2158      	movs	r1, #88	@ 0x58
 80043fc:	2082      	movs	r0, #130	@ 0x82
 80043fe:	f000 f991 	bl	8004724 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8004402:	2203      	movs	r2, #3
 8004404:	2140      	movs	r1, #64	@ 0x40
 8004406:	2082      	movs	r0, #130	@ 0x82
 8004408:	f000 f98c 	bl	8004724 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 800440c:	22ff      	movs	r2, #255	@ 0xff
 800440e:	210b      	movs	r1, #11
 8004410:	2082      	movs	r0, #130	@ 0x82
 8004412:	f000 f987 	bl	8004724 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8004416:	f000 f8c1 	bl	800459c <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 800441a:	2009      	movs	r0, #9
 800441c:	f000 f823 	bl	8004466 <STMPE811_Read>
 8004420:	4603      	mov	r3, r0
 8004422:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8004424:	797b      	ldrb	r3, [r7, #5]
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 800442c:	797b      	ldrb	r3, [r7, #5]
 800442e:	461a      	mov	r2, r3
 8004430:	2109      	movs	r1, #9
 8004432:	2082      	movs	r0, #130	@ 0x82
 8004434:	f000 f976 	bl	8004724 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8004438:	200a      	movs	r0, #10
 800443a:	f000 f814 	bl	8004466 <STMPE811_Read>
 800443e:	4603      	mov	r3, r0
 8004440:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8004442:	797b      	ldrb	r3, [r7, #5]
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 800444a:	797b      	ldrb	r3, [r7, #5]
 800444c:	461a      	mov	r2, r3
 800444e:	210a      	movs	r1, #10
 8004450:	2082      	movs	r0, #130	@ 0x82
 8004452:	f000 f967 	bl	8004724 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8004456:	20c8      	movs	r0, #200	@ 0xc8
 8004458:	f000 fb38 	bl	8004acc <HAL_Delay>

    return STMPE811_State_Ok;
 800445c:	2302      	movs	r3, #2

}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	4603      	mov	r3, r0
 800446e:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8004470:	f107 020f 	add.w	r2, r7, #15
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	4619      	mov	r1, r3
 8004478:	2082      	movs	r0, #130	@ 0x82
 800447a:	f000 f97b 	bl	8004774 <I2C3_Read>

    return readData;
 800447e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	4603      	mov	r3, r0
 8004490:	460a      	mov	r2, r1
 8004492:	71fb      	strb	r3, [r7, #7]
 8004494:	4613      	mov	r3, r2
 8004496:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8004498:	79ba      	ldrb	r2, [r7, #6]
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	4619      	mov	r1, r3
 800449e:	2082      	movs	r0, #130	@ 0x82
 80044a0:	f000 f940 	bl	8004724 <I2C3_Write>
}
 80044a4:	bf00      	nop
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	799b      	ldrb	r3, [r3, #6]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d117      	bne.n	80044ec <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 f99d 	bl	8004800 <TM_STMPE811_ReadX>
 80044c6:	4603      	mov	r3, r0
 80044c8:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	885b      	ldrh	r3, [r3, #2]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 f9f0 	bl	80048bc <TM_STMPE811_ReadY>
 80044dc:	4603      	mov	r3, r0
 80044de:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80044e2:	3301      	adds	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	805a      	strh	r2, [r3, #2]
 80044ea:	e048      	b.n	800457e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	799b      	ldrb	r3, [r3, #6]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d112      	bne.n	800451a <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 f981 	bl	8004800 <TM_STMPE811_ReadX>
 80044fe:	4603      	mov	r3, r0
 8004500:	461a      	mov	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	885b      	ldrh	r3, [r3, #2]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 f9d6 	bl	80048bc <TM_STMPE811_ReadY>
 8004510:	4603      	mov	r3, r0
 8004512:	461a      	mov	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	805a      	strh	r2, [r3, #2]
 8004518:	e031      	b.n	800457e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	799b      	ldrb	r3, [r3, #6]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d115      	bne.n	800454e <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	885b      	ldrh	r3, [r3, #2]
 8004526:	4618      	mov	r0, r3
 8004528:	f000 f96a 	bl	8004800 <TM_STMPE811_ReadX>
 800452c:	4603      	mov	r3, r0
 800452e:	461a      	mov	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f000 f9bf 	bl	80048bc <TM_STMPE811_ReadY>
 800453e:	4603      	mov	r3, r0
 8004540:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8004544:	3301      	adds	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	801a      	strh	r2, [r3, #0]
 800454c:	e017      	b.n	800457e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	799b      	ldrb	r3, [r3, #6]
 8004552:	2b03      	cmp	r3, #3
 8004554:	d113      	bne.n	800457e <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f000 f950 	bl	8004800 <TM_STMPE811_ReadX>
 8004560:	4603      	mov	r3, r0
 8004562:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8004566:	b29a      	uxth	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f000 f9a3 	bl	80048bc <TM_STMPE811_ReadY>
 8004576:	4603      	mov	r3, r0
 8004578:	461a      	mov	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800457e:	2201      	movs	r2, #1
 8004580:	214b      	movs	r1, #75	@ 0x4b
 8004582:	2082      	movs	r0, #130	@ 0x82
 8004584:	f000 f8ce 	bl	8004724 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8004588:	2200      	movs	r2, #0
 800458a:	214b      	movs	r1, #75	@ 0x4b
 800458c:	2082      	movs	r0, #130	@ 0x82
 800458e:	f000 f8c9 	bl	8004724 <I2C3_Write>
}
 8004592:	bf00      	nop
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045a2:	2300      	movs	r3, #0
 80045a4:	603b      	str	r3, [r7, #0]
 80045a6:	4b14      	ldr	r3, [pc, #80]	@ (80045f8 <enableInterruptSupportForTouch+0x5c>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045aa:	4a13      	ldr	r2, [pc, #76]	@ (80045f8 <enableInterruptSupportForTouch+0x5c>)
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80045b2:	4b11      	ldr	r3, [pc, #68]	@ (80045f8 <enableInterruptSupportForTouch+0x5c>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045be:	1d3b      	adds	r3, r7, #4
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	605a      	str	r2, [r3, #4]
 80045c6:	609a      	str	r2, [r3, #8]
 80045c8:	60da      	str	r2, [r3, #12]
 80045ca:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80045cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045d0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80045d2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80045d6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045dc:	2302      	movs	r3, #2
 80045de:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e0:	1d3b      	adds	r3, r7, #4
 80045e2:	4619      	mov	r1, r3
 80045e4:	4805      	ldr	r0, [pc, #20]	@ (80045fc <enableInterruptSupportForTouch+0x60>)
 80045e6:	f000 fc1d 	bl	8004e24 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80045ea:	2028      	movs	r0, #40	@ 0x28
 80045ec:	f7ff fe56 	bl	800429c <__NVIC_EnableIRQ>

}
 80045f0:	bf00      	nop
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40023800 	.word	0x40023800
 80045fc:	40020000 	.word	0x40020000

08004600 <I2C3_Init>:
        while(1);
    }
}

static void I2C3_Init()
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	603b      	str	r3, [r7, #0]
 800460a:	4b18      	ldr	r3, [pc, #96]	@ (800466c <I2C3_Init+0x6c>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460e:	4a17      	ldr	r2, [pc, #92]	@ (800466c <I2C3_Init+0x6c>)
 8004610:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004614:	6413      	str	r3, [r2, #64]	@ 0x40
 8004616:	4b15      	ldr	r3, [pc, #84]	@ (800466c <I2C3_Init+0x6c>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800461e:	603b      	str	r3, [r7, #0]
 8004620:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8004622:	4b13      	ldr	r3, [pc, #76]	@ (8004670 <I2C3_Init+0x70>)
 8004624:	4a13      	ldr	r2, [pc, #76]	@ (8004674 <I2C3_Init+0x74>)
 8004626:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8004628:	4b11      	ldr	r3, [pc, #68]	@ (8004670 <I2C3_Init+0x70>)
 800462a:	4a13      	ldr	r2, [pc, #76]	@ (8004678 <I2C3_Init+0x78>)
 800462c:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800462e:	4b10      	ldr	r3, [pc, #64]	@ (8004670 <I2C3_Init+0x70>)
 8004630:	2200      	movs	r2, #0
 8004632:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8004634:	4b0e      	ldr	r3, [pc, #56]	@ (8004670 <I2C3_Init+0x70>)
 8004636:	2200      	movs	r2, #0
 8004638:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800463a:	4b0d      	ldr	r3, [pc, #52]	@ (8004670 <I2C3_Init+0x70>)
 800463c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004640:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8004642:	4b0b      	ldr	r3, [pc, #44]	@ (8004670 <I2C3_Init+0x70>)
 8004644:	2200      	movs	r2, #0
 8004646:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004648:	4b09      	ldr	r3, [pc, #36]	@ (8004670 <I2C3_Init+0x70>)
 800464a:	2200      	movs	r2, #0
 800464c:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800464e:	4808      	ldr	r0, [pc, #32]	@ (8004670 <I2C3_Init+0x70>)
 8004650:	f000 feba 	bl	80053c8 <HAL_I2C_Init>
 8004654:	4603      	mov	r3, r0
 8004656:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800465e:	bf00      	nop
 8004660:	e7fd      	b.n	800465e <I2C3_Init+0x5e>
    }
    return;
 8004662:	bf00      	nop
}
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800
 8004670:	20025da8 	.word	0x20025da8
 8004674:	40005c00 	.word	0x40005c00
 8004678:	000186a0 	.word	0x000186a0

0800467c <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004682:	f107 030c 	add.w	r3, r7, #12
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	605a      	str	r2, [r3, #4]
 800468c:	609a      	str	r2, [r3, #8]
 800468e:	60da      	str	r2, [r3, #12]
 8004690:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004692:	2300      	movs	r3, #0
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	4b20      	ldr	r3, [pc, #128]	@ (8004718 <I2C3_MspInit+0x9c>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469a:	4a1f      	ldr	r2, [pc, #124]	@ (8004718 <I2C3_MspInit+0x9c>)
 800469c:	f043 0304 	orr.w	r3, r3, #4
 80046a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80046a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004718 <I2C3_MspInit+0x9c>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	60bb      	str	r3, [r7, #8]
 80046ac:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ae:	2300      	movs	r3, #0
 80046b0:	607b      	str	r3, [r7, #4]
 80046b2:	4b19      	ldr	r3, [pc, #100]	@ (8004718 <I2C3_MspInit+0x9c>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b6:	4a18      	ldr	r2, [pc, #96]	@ (8004718 <I2C3_MspInit+0x9c>)
 80046b8:	f043 0301 	orr.w	r3, r3, #1
 80046bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80046be:	4b16      	ldr	r3, [pc, #88]	@ (8004718 <I2C3_MspInit+0x9c>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	607b      	str	r3, [r7, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80046ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046d0:	2312      	movs	r3, #18
 80046d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d8:	2300      	movs	r3, #0
 80046da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80046dc:	2304      	movs	r3, #4
 80046de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80046e0:	f107 030c 	add.w	r3, r7, #12
 80046e4:	4619      	mov	r1, r3
 80046e6:	480d      	ldr	r0, [pc, #52]	@ (800471c <I2C3_MspInit+0xa0>)
 80046e8:	f000 fb9c 	bl	8004e24 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80046ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046f2:	2312      	movs	r3, #18
 80046f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046fa:	2300      	movs	r3, #0
 80046fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80046fe:	2304      	movs	r3, #4
 8004700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8004702:	f107 030c 	add.w	r3, r7, #12
 8004706:	4619      	mov	r1, r3
 8004708:	4805      	ldr	r0, [pc, #20]	@ (8004720 <I2C3_MspInit+0xa4>)
 800470a:	f000 fb8b 	bl	8004e24 <HAL_GPIO_Init>
    
}
 800470e:	bf00      	nop
 8004710:	3720      	adds	r7, #32
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40023800 	.word	0x40023800
 800471c:	40020800 	.word	0x40020800
 8004720:	40020000 	.word	0x40020000

08004724 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af04      	add	r7, sp, #16
 800472a:	4603      	mov	r3, r0
 800472c:	80fb      	strh	r3, [r7, #6]
 800472e:	460b      	mov	r3, r1
 8004730:	717b      	strb	r3, [r7, #5]
 8004732:	4613      	mov	r3, r2
 8004734:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8004736:	793b      	ldrb	r3, [r7, #4]
 8004738:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800473a:	797b      	ldrb	r3, [r7, #5]
 800473c:	b29a      	uxth	r2, r3
 800473e:	88f9      	ldrh	r1, [r7, #6]
 8004740:	4b09      	ldr	r3, [pc, #36]	@ (8004768 <I2C3_Write+0x44>)
 8004742:	9302      	str	r3, [sp, #8]
 8004744:	2301      	movs	r3, #1
 8004746:	9301      	str	r3, [sp, #4]
 8004748:	f107 030f 	add.w	r3, r7, #15
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	2301      	movs	r3, #1
 8004750:	4806      	ldr	r0, [pc, #24]	@ (800476c <I2C3_Write+0x48>)
 8004752:	f000 ff7d 	bl	8005650 <HAL_I2C_Mem_Write>
 8004756:	4603      	mov	r3, r0
 8004758:	461a      	mov	r2, r3
 800475a:	4b05      	ldr	r3, [pc, #20]	@ (8004770 <I2C3_Write+0x4c>)
 800475c:	701a      	strb	r2, [r3, #0]
    //verifyHAL_I2C_IS_OKAY();
}
 800475e:	bf00      	nop
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	0003d090 	.word	0x0003d090
 800476c:	20025da8 	.word	0x20025da8
 8004770:	20025dfc 	.word	0x20025dfc

08004774 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af04      	add	r7, sp, #16
 800477a:	4603      	mov	r3, r0
 800477c:	603a      	str	r2, [r7, #0]
 800477e:	71fb      	strb	r3, [r7, #7]
 8004780:	460b      	mov	r3, r1
 8004782:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	b299      	uxth	r1, r3
 8004788:	79bb      	ldrb	r3, [r7, #6]
 800478a:	b29a      	uxth	r2, r3
 800478c:	4b08      	ldr	r3, [pc, #32]	@ (80047b0 <I2C3_Read+0x3c>)
 800478e:	9302      	str	r3, [sp, #8]
 8004790:	2301      	movs	r3, #1
 8004792:	9301      	str	r3, [sp, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	2301      	movs	r3, #1
 800479a:	4806      	ldr	r0, [pc, #24]	@ (80047b4 <I2C3_Read+0x40>)
 800479c:	f001 f852 	bl	8005844 <HAL_I2C_Mem_Read>
 80047a0:	4603      	mov	r3, r0
 80047a2:	461a      	mov	r2, r3
 80047a4:	4b04      	ldr	r3, [pc, #16]	@ (80047b8 <I2C3_Read+0x44>)
 80047a6:	701a      	strb	r2, [r3, #0]
    //verifyHAL_I2C_IS_OKAY();
}
 80047a8:	bf00      	nop
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	0003d090 	.word	0x0003d090
 80047b4:	20025da8 	.word	0x20025da8
 80047b8:	20025dfc 	.word	0x20025dfc

080047bc <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af04      	add	r7, sp, #16
 80047c2:	603a      	str	r2, [r7, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	4603      	mov	r3, r0
 80047c8:	71fb      	strb	r3, [r7, #7]
 80047ca:	460b      	mov	r3, r1
 80047cc:	71bb      	strb	r3, [r7, #6]
 80047ce:	4613      	mov	r3, r2
 80047d0:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	b299      	uxth	r1, r3
 80047d6:	79bb      	ldrb	r3, [r7, #6]
 80047d8:	b29a      	uxth	r2, r3
 80047da:	4b07      	ldr	r3, [pc, #28]	@ (80047f8 <I2C3_MulitByteRead+0x3c>)
 80047dc:	9302      	str	r3, [sp, #8]
 80047de:	88bb      	ldrh	r3, [r7, #4]
 80047e0:	9301      	str	r3, [sp, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	2301      	movs	r3, #1
 80047e8:	4804      	ldr	r0, [pc, #16]	@ (80047fc <I2C3_MulitByteRead+0x40>)
 80047ea:	f001 f82b 	bl	8005844 <HAL_I2C_Mem_Read>
}
 80047ee:	bf00      	nop
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	0003d090 	.word	0x0003d090
 80047fc:	20025da8 	.word	0x20025da8

08004800 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	4603      	mov	r3, r0
 8004808:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800480a:	204d      	movs	r0, #77	@ 0x4d
 800480c:	f7ff fe2b 	bl	8004466 <STMPE811_Read>
 8004810:	4603      	mov	r3, r0
 8004812:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8004814:	204e      	movs	r0, #78	@ 0x4e
 8004816:	f7ff fe26 	bl	8004466 <STMPE811_Read>
 800481a:	4603      	mov	r3, r0
 800481c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800481e:	7a7b      	ldrb	r3, [r7, #9]
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	b21a      	sxth	r2, r3
 8004824:	7a3b      	ldrb	r3, [r7, #8]
 8004826:	b21b      	sxth	r3, r3
 8004828:	4313      	orrs	r3, r2
 800482a:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 800482c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004830:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004834:	4293      	cmp	r3, r2
 8004836:	dc06      	bgt.n	8004846 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8004838:	89fb      	ldrh	r3, [r7, #14]
 800483a:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800483e:	330c      	adds	r3, #12
 8004840:	b29b      	uxth	r3, r3
 8004842:	81fb      	strh	r3, [r7, #14]
 8004844:	e005      	b.n	8004852 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8004846:	89fb      	ldrh	r3, [r7, #14]
 8004848:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800484c:	3308      	adds	r3, #8
 800484e:	b29b      	uxth	r3, r3
 8004850:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8004852:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004856:	4a18      	ldr	r2, [pc, #96]	@ (80048b8 <TM_STMPE811_ReadX+0xb8>)
 8004858:	fb82 1203 	smull	r1, r2, r2, r3
 800485c:	441a      	add	r2, r3
 800485e:	10d2      	asrs	r2, r2, #3
 8004860:	17db      	asrs	r3, r3, #31
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8004866:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800486a:	2bef      	cmp	r3, #239	@ 0xef
 800486c:	dd02      	ble.n	8004874 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800486e:	23ef      	movs	r3, #239	@ 0xef
 8004870:	81fb      	strh	r3, [r7, #14]
 8004872:	e005      	b.n	8004880 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8004874:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004878:	2b00      	cmp	r3, #0
 800487a:	da01      	bge.n	8004880 <TM_STMPE811_ReadX+0x80>
        val = 0;
 800487c:	2300      	movs	r3, #0
 800487e:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8004880:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004884:	88fb      	ldrh	r3, [r7, #6]
 8004886:	429a      	cmp	r2, r3
 8004888:	dd05      	ble.n	8004896 <TM_STMPE811_ReadX+0x96>
 800488a:	89fa      	ldrh	r2, [r7, #14]
 800488c:	88fb      	ldrh	r3, [r7, #6]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	b29b      	uxth	r3, r3
 8004892:	b21b      	sxth	r3, r3
 8004894:	e004      	b.n	80048a0 <TM_STMPE811_ReadX+0xa0>
 8004896:	89fb      	ldrh	r3, [r7, #14]
 8004898:	88fa      	ldrh	r2, [r7, #6]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	b29b      	uxth	r3, r3
 800489e:	b21b      	sxth	r3, r3
 80048a0:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80048a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	dd01      	ble.n	80048ae <TM_STMPE811_ReadX+0xae>
        return val;
 80048aa:	89fb      	ldrh	r3, [r7, #14]
 80048ac:	e000      	b.n	80048b0 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 80048ae:	88fb      	ldrh	r3, [r7, #6]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	88888889 	.word	0x88888889

080048bc <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	4603      	mov	r3, r0
 80048c4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80048c6:	204f      	movs	r0, #79	@ 0x4f
 80048c8:	f7ff fdcd 	bl	8004466 <STMPE811_Read>
 80048cc:	4603      	mov	r3, r0
 80048ce:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80048d0:	2050      	movs	r0, #80	@ 0x50
 80048d2:	f7ff fdc8 	bl	8004466 <STMPE811_Read>
 80048d6:	4603      	mov	r3, r0
 80048d8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80048da:	7a7b      	ldrb	r3, [r7, #9]
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	b21a      	sxth	r2, r3
 80048e0:	7a3b      	ldrb	r3, [r7, #8]
 80048e2:	b21b      	sxth	r3, r3
 80048e4:	4313      	orrs	r3, r2
 80048e6:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80048e8:	89fb      	ldrh	r3, [r7, #14]
 80048ea:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80048f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048f6:	4a19      	ldr	r2, [pc, #100]	@ (800495c <TM_STMPE811_ReadY+0xa0>)
 80048f8:	fb82 1203 	smull	r1, r2, r2, r3
 80048fc:	1052      	asrs	r2, r2, #1
 80048fe:	17db      	asrs	r3, r3, #31
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8004904:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004908:	2b00      	cmp	r3, #0
 800490a:	dc02      	bgt.n	8004912 <TM_STMPE811_ReadY+0x56>
        val = 0;
 800490c:	2300      	movs	r3, #0
 800490e:	81fb      	strh	r3, [r7, #14]
 8004910:	e007      	b.n	8004922 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8004912:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004916:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800491a:	db02      	blt.n	8004922 <TM_STMPE811_ReadY+0x66>
        val = 319;
 800491c:	f240 133f 	movw	r3, #319	@ 0x13f
 8004920:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8004922:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004926:	88fb      	ldrh	r3, [r7, #6]
 8004928:	429a      	cmp	r2, r3
 800492a:	dd05      	ble.n	8004938 <TM_STMPE811_ReadY+0x7c>
 800492c:	89fa      	ldrh	r2, [r7, #14]
 800492e:	88fb      	ldrh	r3, [r7, #6]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	b29b      	uxth	r3, r3
 8004934:	b21b      	sxth	r3, r3
 8004936:	e004      	b.n	8004942 <TM_STMPE811_ReadY+0x86>
 8004938:	89fb      	ldrh	r3, [r7, #14]
 800493a:	88fa      	ldrh	r2, [r7, #6]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	b29b      	uxth	r3, r3
 8004940:	b21b      	sxth	r3, r3
 8004942:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8004944:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004948:	2b04      	cmp	r3, #4
 800494a:	dd01      	ble.n	8004950 <TM_STMPE811_ReadY+0x94>
        return val;
 800494c:	89fb      	ldrh	r3, [r7, #14]
 800494e:	e000      	b.n	8004952 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8004950:	88fb      	ldrh	r3, [r7, #6]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	2e8ba2e9 	.word	0x2e8ba2e9

08004960 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
}
 8004964:	bf00      	nop
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
	...

08004970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004974:	4b06      	ldr	r3, [pc, #24]	@ (8004990 <SystemInit+0x20>)
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800497a:	4a05      	ldr	r2, [pc, #20]	@ (8004990 <SystemInit+0x20>)
 800497c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	e000ed00 	.word	0xe000ed00

08004994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004994:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80049cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004998:	f7ff ffea 	bl	8004970 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800499c:	480c      	ldr	r0, [pc, #48]	@ (80049d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800499e:	490d      	ldr	r1, [pc, #52]	@ (80049d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80049a0:	4a0d      	ldr	r2, [pc, #52]	@ (80049d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80049a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049a4:	e002      	b.n	80049ac <LoopCopyDataInit>

080049a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049aa:	3304      	adds	r3, #4

080049ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049b0:	d3f9      	bcc.n	80049a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049b2:	4a0a      	ldr	r2, [pc, #40]	@ (80049dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80049b4:	4c0a      	ldr	r4, [pc, #40]	@ (80049e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80049b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049b8:	e001      	b.n	80049be <LoopFillZerobss>

080049ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049bc:	3204      	adds	r2, #4

080049be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049c0:	d3fb      	bcc.n	80049ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80049c2:	f003 fbdb 	bl	800817c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049c6:	f7fe fe94 	bl	80036f2 <main>
  bx  lr    
 80049ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80049cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80049d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049d4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80049d8:	08009ddc 	.word	0x08009ddc
  ldr r2, =_sbss
 80049dc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80049e0:	20025e04 	.word	0x20025e04

080049e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049e4:	e7fe      	b.n	80049e4 <ADC_IRQHandler>
	...

080049e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004a28 <HAL_Init+0x40>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004a28 <HAL_Init+0x40>)
 80049f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004a28 <HAL_Init+0x40>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a0a      	ldr	r2, [pc, #40]	@ (8004a28 <HAL_Init+0x40>)
 80049fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a04:	4b08      	ldr	r3, [pc, #32]	@ (8004a28 <HAL_Init+0x40>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a07      	ldr	r2, [pc, #28]	@ (8004a28 <HAL_Init+0x40>)
 8004a0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a10:	2003      	movs	r0, #3
 8004a12:	f000 f991 	bl	8004d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a16:	2000      	movs	r0, #0
 8004a18:	f000 f808 	bl	8004a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a1c:	f7ff f9aa 	bl	8003d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40023c00 	.word	0x40023c00

08004a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a34:	4b12      	ldr	r3, [pc, #72]	@ (8004a80 <HAL_InitTick+0x54>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	4b12      	ldr	r3, [pc, #72]	@ (8004a84 <HAL_InitTick+0x58>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 f9b7 	bl	8004dbe <HAL_SYSTICK_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e00e      	b.n	8004a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b0f      	cmp	r3, #15
 8004a5e:	d80a      	bhi.n	8004a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a60:	2200      	movs	r2, #0
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	f04f 30ff 	mov.w	r0, #4294967295
 8004a68:	f000 f971 	bl	8004d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a6c:	4a06      	ldr	r2, [pc, #24]	@ (8004a88 <HAL_InitTick+0x5c>)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	e000      	b.n	8004a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20000018 	.word	0x20000018
 8004a84:	20000020 	.word	0x20000020
 8004a88:	2000001c 	.word	0x2000001c

08004a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a90:	4b06      	ldr	r3, [pc, #24]	@ (8004aac <HAL_IncTick+0x20>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	4b06      	ldr	r3, [pc, #24]	@ (8004ab0 <HAL_IncTick+0x24>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	4a04      	ldr	r2, [pc, #16]	@ (8004ab0 <HAL_IncTick+0x24>)
 8004a9e:	6013      	str	r3, [r2, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	20000020 	.word	0x20000020
 8004ab0:	20025e00 	.word	0x20025e00

08004ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ab8:	4b03      	ldr	r3, [pc, #12]	@ (8004ac8 <HAL_GetTick+0x14>)
 8004aba:	681b      	ldr	r3, [r3, #0]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20025e00 	.word	0x20025e00

08004acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ad4:	f7ff ffee 	bl	8004ab4 <HAL_GetTick>
 8004ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae4:	d005      	beq.n	8004af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8004b10 <HAL_Delay+0x44>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	461a      	mov	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004af2:	bf00      	nop
 8004af4:	f7ff ffde 	bl	8004ab4 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d8f7      	bhi.n	8004af4 <HAL_Delay+0x28>
  {
  }
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000020 	.word	0x20000020

08004b14 <__NVIC_SetPriorityGrouping>:
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b24:	4b0c      	ldr	r3, [pc, #48]	@ (8004b58 <__NVIC_SetPriorityGrouping+0x44>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b30:	4013      	ands	r3, r2
 8004b32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b46:	4a04      	ldr	r2, [pc, #16]	@ (8004b58 <__NVIC_SetPriorityGrouping+0x44>)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	60d3      	str	r3, [r2, #12]
}
 8004b4c:	bf00      	nop
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	e000ed00 	.word	0xe000ed00

08004b5c <__NVIC_GetPriorityGrouping>:
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b60:	4b04      	ldr	r3, [pc, #16]	@ (8004b74 <__NVIC_GetPriorityGrouping+0x18>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	0a1b      	lsrs	r3, r3, #8
 8004b66:	f003 0307 	and.w	r3, r3, #7
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	e000ed00 	.word	0xe000ed00

08004b78 <__NVIC_EnableIRQ>:
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	db0b      	blt.n	8004ba2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	f003 021f 	and.w	r2, r3, #31
 8004b90:	4907      	ldr	r1, [pc, #28]	@ (8004bb0 <__NVIC_EnableIRQ+0x38>)
 8004b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b96:	095b      	lsrs	r3, r3, #5
 8004b98:	2001      	movs	r0, #1
 8004b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	e000e100 	.word	0xe000e100

08004bb4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	db12      	blt.n	8004bec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	f003 021f 	and.w	r2, r3, #31
 8004bcc:	490a      	ldr	r1, [pc, #40]	@ (8004bf8 <__NVIC_DisableIRQ+0x44>)
 8004bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8004bda:	3320      	adds	r3, #32
 8004bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004be0:	f3bf 8f4f 	dsb	sy
}
 8004be4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004be6:	f3bf 8f6f 	isb	sy
}
 8004bea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	e000e100 	.word	0xe000e100

08004bfc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	4603      	mov	r3, r0
 8004c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	db0c      	blt.n	8004c28 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	f003 021f 	and.w	r2, r3, #31
 8004c14:	4907      	ldr	r1, [pc, #28]	@ (8004c34 <__NVIC_ClearPendingIRQ+0x38>)
 8004c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	2001      	movs	r0, #1
 8004c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c22:	3360      	adds	r3, #96	@ 0x60
 8004c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	e000e100 	.word	0xe000e100

08004c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	4603      	mov	r3, r0
 8004c40:	6039      	str	r1, [r7, #0]
 8004c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	db0a      	blt.n	8004c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	490c      	ldr	r1, [pc, #48]	@ (8004c84 <__NVIC_SetPriority+0x4c>)
 8004c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c56:	0112      	lsls	r2, r2, #4
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c60:	e00a      	b.n	8004c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	4908      	ldr	r1, [pc, #32]	@ (8004c88 <__NVIC_SetPriority+0x50>)
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	3b04      	subs	r3, #4
 8004c70:	0112      	lsls	r2, r2, #4
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	440b      	add	r3, r1
 8004c76:	761a      	strb	r2, [r3, #24]
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	e000e100 	.word	0xe000e100
 8004c88:	e000ed00 	.word	0xe000ed00

08004c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b089      	sub	sp, #36	@ 0x24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f1c3 0307 	rsb	r3, r3, #7
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	bf28      	it	cs
 8004caa:	2304      	movcs	r3, #4
 8004cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	2b06      	cmp	r3, #6
 8004cb4:	d902      	bls.n	8004cbc <NVIC_EncodePriority+0x30>
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	3b03      	subs	r3, #3
 8004cba:	e000      	b.n	8004cbe <NVIC_EncodePriority+0x32>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	43da      	mvns	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	401a      	ands	r2, r3
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	fa01 f303 	lsl.w	r3, r1, r3
 8004cde:	43d9      	mvns	r1, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ce4:	4313      	orrs	r3, r2
         );
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3724      	adds	r7, #36	@ 0x24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d04:	d301      	bcc.n	8004d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d06:	2301      	movs	r3, #1
 8004d08:	e00f      	b.n	8004d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d34 <SysTick_Config+0x40>)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d12:	210f      	movs	r1, #15
 8004d14:	f04f 30ff 	mov.w	r0, #4294967295
 8004d18:	f7ff ff8e 	bl	8004c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d1c:	4b05      	ldr	r3, [pc, #20]	@ (8004d34 <SysTick_Config+0x40>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d22:	4b04      	ldr	r3, [pc, #16]	@ (8004d34 <SysTick_Config+0x40>)
 8004d24:	2207      	movs	r2, #7
 8004d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	e000e010 	.word	0xe000e010

08004d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff fee7 	bl	8004b14 <__NVIC_SetPriorityGrouping>
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b086      	sub	sp, #24
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	4603      	mov	r3, r0
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	607a      	str	r2, [r7, #4]
 8004d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d60:	f7ff fefc 	bl	8004b5c <__NVIC_GetPriorityGrouping>
 8004d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	68b9      	ldr	r1, [r7, #8]
 8004d6a:	6978      	ldr	r0, [r7, #20]
 8004d6c:	f7ff ff8e 	bl	8004c8c <NVIC_EncodePriority>
 8004d70:	4602      	mov	r2, r0
 8004d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d76:	4611      	mov	r1, r2
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff ff5d 	bl	8004c38 <__NVIC_SetPriority>
}
 8004d7e:	bf00      	nop
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff feef 	bl	8004b78 <__NVIC_EnableIRQ>
}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	4603      	mov	r3, r0
 8004daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff feff 	bl	8004bb4 <__NVIC_DisableIRQ>
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7ff ff94 	bl	8004cf4 <SysTick_Config>
 8004dcc:	4603      	mov	r3, r0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b082      	sub	sp, #8
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	4603      	mov	r3, r0
 8004dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff ff09 	bl	8004bfc <__NVIC_ClearPendingIRQ>
}
 8004dea:	bf00      	nop
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	2201      	movs	r2, #1
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8004e0e:	4a04      	ldr	r2, [pc, #16]	@ (8004e20 <HAL_EXTI_ClearPending+0x2c>)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6153      	str	r3, [r2, #20]
}
 8004e14:	bf00      	nop
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	40013c00 	.word	0x40013c00

08004e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b089      	sub	sp, #36	@ 0x24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61fb      	str	r3, [r7, #28]
 8004e3e:	e177      	b.n	8005130 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e40:	2201      	movs	r2, #1
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4013      	ands	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	f040 8166 	bne.w	800512a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d005      	beq.n	8004e76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d130      	bne.n	8004ed8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	2203      	movs	r2, #3
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	43db      	mvns	r3, r3
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004eac:	2201      	movs	r2, #1
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	091b      	lsrs	r3, r3, #4
 8004ec2:	f003 0201 	and.w	r2, r3, #1
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f003 0303 	and.w	r3, r3, #3
 8004ee0:	2b03      	cmp	r3, #3
 8004ee2:	d017      	beq.n	8004f14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	2203      	movs	r2, #3
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f003 0303 	and.w	r3, r3, #3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d123      	bne.n	8004f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	08da      	lsrs	r2, r3, #3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3208      	adds	r2, #8
 8004f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	220f      	movs	r2, #15
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4013      	ands	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	fa02 f303 	lsl.w	r3, r2, r3
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	08da      	lsrs	r2, r3, #3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3208      	adds	r2, #8
 8004f62:	69b9      	ldr	r1, [r7, #24]
 8004f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	2203      	movs	r2, #3
 8004f74:	fa02 f303 	lsl.w	r3, r2, r3
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f003 0203 	and.w	r2, r3, #3
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 80c0 	beq.w	800512a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	4b66      	ldr	r3, [pc, #408]	@ (8005148 <HAL_GPIO_Init+0x324>)
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb2:	4a65      	ldr	r2, [pc, #404]	@ (8005148 <HAL_GPIO_Init+0x324>)
 8004fb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004fba:	4b63      	ldr	r3, [pc, #396]	@ (8005148 <HAL_GPIO_Init+0x324>)
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fc6:	4a61      	ldr	r2, [pc, #388]	@ (800514c <HAL_GPIO_Init+0x328>)
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	089b      	lsrs	r3, r3, #2
 8004fcc:	3302      	adds	r3, #2
 8004fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	220f      	movs	r2, #15
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a58      	ldr	r2, [pc, #352]	@ (8005150 <HAL_GPIO_Init+0x32c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d037      	beq.n	8005062 <HAL_GPIO_Init+0x23e>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a57      	ldr	r2, [pc, #348]	@ (8005154 <HAL_GPIO_Init+0x330>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d031      	beq.n	800505e <HAL_GPIO_Init+0x23a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a56      	ldr	r2, [pc, #344]	@ (8005158 <HAL_GPIO_Init+0x334>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d02b      	beq.n	800505a <HAL_GPIO_Init+0x236>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a55      	ldr	r2, [pc, #340]	@ (800515c <HAL_GPIO_Init+0x338>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d025      	beq.n	8005056 <HAL_GPIO_Init+0x232>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a54      	ldr	r2, [pc, #336]	@ (8005160 <HAL_GPIO_Init+0x33c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d01f      	beq.n	8005052 <HAL_GPIO_Init+0x22e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a53      	ldr	r2, [pc, #332]	@ (8005164 <HAL_GPIO_Init+0x340>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d019      	beq.n	800504e <HAL_GPIO_Init+0x22a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a52      	ldr	r2, [pc, #328]	@ (8005168 <HAL_GPIO_Init+0x344>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d013      	beq.n	800504a <HAL_GPIO_Init+0x226>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a51      	ldr	r2, [pc, #324]	@ (800516c <HAL_GPIO_Init+0x348>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00d      	beq.n	8005046 <HAL_GPIO_Init+0x222>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a50      	ldr	r2, [pc, #320]	@ (8005170 <HAL_GPIO_Init+0x34c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d007      	beq.n	8005042 <HAL_GPIO_Init+0x21e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a4f      	ldr	r2, [pc, #316]	@ (8005174 <HAL_GPIO_Init+0x350>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d101      	bne.n	800503e <HAL_GPIO_Init+0x21a>
 800503a:	2309      	movs	r3, #9
 800503c:	e012      	b.n	8005064 <HAL_GPIO_Init+0x240>
 800503e:	230a      	movs	r3, #10
 8005040:	e010      	b.n	8005064 <HAL_GPIO_Init+0x240>
 8005042:	2308      	movs	r3, #8
 8005044:	e00e      	b.n	8005064 <HAL_GPIO_Init+0x240>
 8005046:	2307      	movs	r3, #7
 8005048:	e00c      	b.n	8005064 <HAL_GPIO_Init+0x240>
 800504a:	2306      	movs	r3, #6
 800504c:	e00a      	b.n	8005064 <HAL_GPIO_Init+0x240>
 800504e:	2305      	movs	r3, #5
 8005050:	e008      	b.n	8005064 <HAL_GPIO_Init+0x240>
 8005052:	2304      	movs	r3, #4
 8005054:	e006      	b.n	8005064 <HAL_GPIO_Init+0x240>
 8005056:	2303      	movs	r3, #3
 8005058:	e004      	b.n	8005064 <HAL_GPIO_Init+0x240>
 800505a:	2302      	movs	r3, #2
 800505c:	e002      	b.n	8005064 <HAL_GPIO_Init+0x240>
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <HAL_GPIO_Init+0x240>
 8005062:	2300      	movs	r3, #0
 8005064:	69fa      	ldr	r2, [r7, #28]
 8005066:	f002 0203 	and.w	r2, r2, #3
 800506a:	0092      	lsls	r2, r2, #2
 800506c:	4093      	lsls	r3, r2
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	4313      	orrs	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005074:	4935      	ldr	r1, [pc, #212]	@ (800514c <HAL_GPIO_Init+0x328>)
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	089b      	lsrs	r3, r3, #2
 800507a:	3302      	adds	r3, #2
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005082:	4b3d      	ldr	r3, [pc, #244]	@ (8005178 <HAL_GPIO_Init+0x354>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	43db      	mvns	r3, r3
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	4013      	ands	r3, r2
 8005090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050a6:	4a34      	ldr	r2, [pc, #208]	@ (8005178 <HAL_GPIO_Init+0x354>)
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050ac:	4b32      	ldr	r3, [pc, #200]	@ (8005178 <HAL_GPIO_Init+0x354>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	43db      	mvns	r3, r3
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	4013      	ands	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050d0:	4a29      	ldr	r2, [pc, #164]	@ (8005178 <HAL_GPIO_Init+0x354>)
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80050d6:	4b28      	ldr	r3, [pc, #160]	@ (8005178 <HAL_GPIO_Init+0x354>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	43db      	mvns	r3, r3
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	4013      	ands	r3, r2
 80050e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005178 <HAL_GPIO_Init+0x354>)
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005100:	4b1d      	ldr	r3, [pc, #116]	@ (8005178 <HAL_GPIO_Init+0x354>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	43db      	mvns	r3, r3
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4013      	ands	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005124:	4a14      	ldr	r2, [pc, #80]	@ (8005178 <HAL_GPIO_Init+0x354>)
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	3301      	adds	r3, #1
 800512e:	61fb      	str	r3, [r7, #28]
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	2b0f      	cmp	r3, #15
 8005134:	f67f ae84 	bls.w	8004e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	3724      	adds	r7, #36	@ 0x24
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40023800 	.word	0x40023800
 800514c:	40013800 	.word	0x40013800
 8005150:	40020000 	.word	0x40020000
 8005154:	40020400 	.word	0x40020400
 8005158:	40020800 	.word	0x40020800
 800515c:	40020c00 	.word	0x40020c00
 8005160:	40021000 	.word	0x40021000
 8005164:	40021400 	.word	0x40021400
 8005168:	40021800 	.word	0x40021800
 800516c:	40021c00 	.word	0x40021c00
 8005170:	40022000 	.word	0x40022000
 8005174:	40022400 	.word	0x40022400
 8005178:	40013c00 	.word	0x40013c00

0800517c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005186:	2300      	movs	r3, #0
 8005188:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800518a:	2300      	movs	r3, #0
 800518c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800518e:	2300      	movs	r3, #0
 8005190:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	e0d9      	b.n	800534c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005198:	2201      	movs	r2, #1
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4013      	ands	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	f040 80c9 	bne.w	8005346 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80051b4:	4a6b      	ldr	r2, [pc, #428]	@ (8005364 <HAL_GPIO_DeInit+0x1e8>)
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	089b      	lsrs	r3, r3, #2
 80051ba:	3302      	adds	r3, #2
 80051bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f003 0303 	and.w	r3, r3, #3
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	220f      	movs	r2, #15
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	4013      	ands	r3, r2
 80051d4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a63      	ldr	r2, [pc, #396]	@ (8005368 <HAL_GPIO_DeInit+0x1ec>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d037      	beq.n	800524e <HAL_GPIO_DeInit+0xd2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a62      	ldr	r2, [pc, #392]	@ (800536c <HAL_GPIO_DeInit+0x1f0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d031      	beq.n	800524a <HAL_GPIO_DeInit+0xce>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a61      	ldr	r2, [pc, #388]	@ (8005370 <HAL_GPIO_DeInit+0x1f4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d02b      	beq.n	8005246 <HAL_GPIO_DeInit+0xca>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a60      	ldr	r2, [pc, #384]	@ (8005374 <HAL_GPIO_DeInit+0x1f8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d025      	beq.n	8005242 <HAL_GPIO_DeInit+0xc6>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a5f      	ldr	r2, [pc, #380]	@ (8005378 <HAL_GPIO_DeInit+0x1fc>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d01f      	beq.n	800523e <HAL_GPIO_DeInit+0xc2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a5e      	ldr	r2, [pc, #376]	@ (800537c <HAL_GPIO_DeInit+0x200>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d019      	beq.n	800523a <HAL_GPIO_DeInit+0xbe>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a5d      	ldr	r2, [pc, #372]	@ (8005380 <HAL_GPIO_DeInit+0x204>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d013      	beq.n	8005236 <HAL_GPIO_DeInit+0xba>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a5c      	ldr	r2, [pc, #368]	@ (8005384 <HAL_GPIO_DeInit+0x208>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d00d      	beq.n	8005232 <HAL_GPIO_DeInit+0xb6>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a5b      	ldr	r2, [pc, #364]	@ (8005388 <HAL_GPIO_DeInit+0x20c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d007      	beq.n	800522e <HAL_GPIO_DeInit+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a5a      	ldr	r2, [pc, #360]	@ (800538c <HAL_GPIO_DeInit+0x210>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d101      	bne.n	800522a <HAL_GPIO_DeInit+0xae>
 8005226:	2309      	movs	r3, #9
 8005228:	e012      	b.n	8005250 <HAL_GPIO_DeInit+0xd4>
 800522a:	230a      	movs	r3, #10
 800522c:	e010      	b.n	8005250 <HAL_GPIO_DeInit+0xd4>
 800522e:	2308      	movs	r3, #8
 8005230:	e00e      	b.n	8005250 <HAL_GPIO_DeInit+0xd4>
 8005232:	2307      	movs	r3, #7
 8005234:	e00c      	b.n	8005250 <HAL_GPIO_DeInit+0xd4>
 8005236:	2306      	movs	r3, #6
 8005238:	e00a      	b.n	8005250 <HAL_GPIO_DeInit+0xd4>
 800523a:	2305      	movs	r3, #5
 800523c:	e008      	b.n	8005250 <HAL_GPIO_DeInit+0xd4>
 800523e:	2304      	movs	r3, #4
 8005240:	e006      	b.n	8005250 <HAL_GPIO_DeInit+0xd4>
 8005242:	2303      	movs	r3, #3
 8005244:	e004      	b.n	8005250 <HAL_GPIO_DeInit+0xd4>
 8005246:	2302      	movs	r3, #2
 8005248:	e002      	b.n	8005250 <HAL_GPIO_DeInit+0xd4>
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <HAL_GPIO_DeInit+0xd4>
 800524e:	2300      	movs	r3, #0
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	f002 0203 	and.w	r2, r2, #3
 8005256:	0092      	lsls	r2, r2, #2
 8005258:	4093      	lsls	r3, r2
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	429a      	cmp	r2, r3
 800525e:	d132      	bne.n	80052c6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005260:	4b4b      	ldr	r3, [pc, #300]	@ (8005390 <HAL_GPIO_DeInit+0x214>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	43db      	mvns	r3, r3
 8005268:	4949      	ldr	r1, [pc, #292]	@ (8005390 <HAL_GPIO_DeInit+0x214>)
 800526a:	4013      	ands	r3, r2
 800526c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800526e:	4b48      	ldr	r3, [pc, #288]	@ (8005390 <HAL_GPIO_DeInit+0x214>)
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	43db      	mvns	r3, r3
 8005276:	4946      	ldr	r1, [pc, #280]	@ (8005390 <HAL_GPIO_DeInit+0x214>)
 8005278:	4013      	ands	r3, r2
 800527a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800527c:	4b44      	ldr	r3, [pc, #272]	@ (8005390 <HAL_GPIO_DeInit+0x214>)
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	43db      	mvns	r3, r3
 8005284:	4942      	ldr	r1, [pc, #264]	@ (8005390 <HAL_GPIO_DeInit+0x214>)
 8005286:	4013      	ands	r3, r2
 8005288:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800528a:	4b41      	ldr	r3, [pc, #260]	@ (8005390 <HAL_GPIO_DeInit+0x214>)
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	43db      	mvns	r3, r3
 8005292:	493f      	ldr	r1, [pc, #252]	@ (8005390 <HAL_GPIO_DeInit+0x214>)
 8005294:	4013      	ands	r3, r2
 8005296:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	220f      	movs	r2, #15
 80052a2:	fa02 f303 	lsl.w	r3, r2, r3
 80052a6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80052a8:	4a2e      	ldr	r2, [pc, #184]	@ (8005364 <HAL_GPIO_DeInit+0x1e8>)
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	089b      	lsrs	r3, r3, #2
 80052ae:	3302      	adds	r3, #2
 80052b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	43da      	mvns	r2, r3
 80052b8:	482a      	ldr	r0, [pc, #168]	@ (8005364 <HAL_GPIO_DeInit+0x1e8>)
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	089b      	lsrs	r3, r3, #2
 80052be:	400a      	ands	r2, r1
 80052c0:	3302      	adds	r3, #2
 80052c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	2103      	movs	r1, #3
 80052d0:	fa01 f303 	lsl.w	r3, r1, r3
 80052d4:	43db      	mvns	r3, r3
 80052d6:	401a      	ands	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	08da      	lsrs	r2, r3, #3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3208      	adds	r2, #8
 80052e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	220f      	movs	r2, #15
 80052f2:	fa02 f303 	lsl.w	r3, r2, r3
 80052f6:	43db      	mvns	r3, r3
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	08d2      	lsrs	r2, r2, #3
 80052fc:	4019      	ands	r1, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3208      	adds	r2, #8
 8005302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	2103      	movs	r1, #3
 8005310:	fa01 f303 	lsl.w	r3, r1, r3
 8005314:	43db      	mvns	r3, r3
 8005316:	401a      	ands	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	2101      	movs	r1, #1
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	fa01 f303 	lsl.w	r3, r1, r3
 8005328:	43db      	mvns	r3, r3
 800532a:	401a      	ands	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	2103      	movs	r1, #3
 800533a:	fa01 f303 	lsl.w	r3, r1, r3
 800533e:	43db      	mvns	r3, r3
 8005340:	401a      	ands	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	3301      	adds	r3, #1
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2b0f      	cmp	r3, #15
 8005350:	f67f af22 	bls.w	8005198 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40013800 	.word	0x40013800
 8005368:	40020000 	.word	0x40020000
 800536c:	40020400 	.word	0x40020400
 8005370:	40020800 	.word	0x40020800
 8005374:	40020c00 	.word	0x40020c00
 8005378:	40021000 	.word	0x40021000
 800537c:	40021400 	.word	0x40021400
 8005380:	40021800 	.word	0x40021800
 8005384:	40021c00 	.word	0x40021c00
 8005388:	40022000 	.word	0x40022000
 800538c:	40022400 	.word	0x40022400
 8005390:	40013c00 	.word	0x40013c00

08005394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	807b      	strh	r3, [r7, #2]
 80053a0:	4613      	mov	r3, r2
 80053a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053a4:	787b      	ldrb	r3, [r7, #1]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053aa:	887a      	ldrh	r2, [r7, #2]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053b0:	e003      	b.n	80053ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053b2:	887b      	ldrh	r3, [r7, #2]
 80053b4:	041a      	lsls	r2, r3, #16
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	619a      	str	r2, [r3, #24]
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
	...

080053c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e12b      	b.n	8005632 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d106      	bne.n	80053f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fe fce8 	bl	8003dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2224      	movs	r2, #36	@ 0x24
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0201 	bic.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800541a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800542a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800542c:	f001 ff82 	bl	8007334 <HAL_RCC_GetPCLK1Freq>
 8005430:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4a81      	ldr	r2, [pc, #516]	@ (800563c <HAL_I2C_Init+0x274>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d807      	bhi.n	800544c <HAL_I2C_Init+0x84>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4a80      	ldr	r2, [pc, #512]	@ (8005640 <HAL_I2C_Init+0x278>)
 8005440:	4293      	cmp	r3, r2
 8005442:	bf94      	ite	ls
 8005444:	2301      	movls	r3, #1
 8005446:	2300      	movhi	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	e006      	b.n	800545a <HAL_I2C_Init+0x92>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4a7d      	ldr	r2, [pc, #500]	@ (8005644 <HAL_I2C_Init+0x27c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	bf94      	ite	ls
 8005454:	2301      	movls	r3, #1
 8005456:	2300      	movhi	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e0e7      	b.n	8005632 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4a78      	ldr	r2, [pc, #480]	@ (8005648 <HAL_I2C_Init+0x280>)
 8005466:	fba2 2303 	umull	r2, r3, r2, r3
 800546a:	0c9b      	lsrs	r3, r3, #18
 800546c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	430a      	orrs	r2, r1
 8005480:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	4a6a      	ldr	r2, [pc, #424]	@ (800563c <HAL_I2C_Init+0x274>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d802      	bhi.n	800549c <HAL_I2C_Init+0xd4>
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	3301      	adds	r3, #1
 800549a:	e009      	b.n	80054b0 <HAL_I2C_Init+0xe8>
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80054a2:	fb02 f303 	mul.w	r3, r2, r3
 80054a6:	4a69      	ldr	r2, [pc, #420]	@ (800564c <HAL_I2C_Init+0x284>)
 80054a8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ac:	099b      	lsrs	r3, r3, #6
 80054ae:	3301      	adds	r3, #1
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6812      	ldr	r2, [r2, #0]
 80054b4:	430b      	orrs	r3, r1
 80054b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80054c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	495c      	ldr	r1, [pc, #368]	@ (800563c <HAL_I2C_Init+0x274>)
 80054cc:	428b      	cmp	r3, r1
 80054ce:	d819      	bhi.n	8005504 <HAL_I2C_Init+0x13c>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	1e59      	subs	r1, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	fbb1 f3f3 	udiv	r3, r1, r3
 80054de:	1c59      	adds	r1, r3, #1
 80054e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80054e4:	400b      	ands	r3, r1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <HAL_I2C_Init+0x138>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	1e59      	subs	r1, r3, #1
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80054f8:	3301      	adds	r3, #1
 80054fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054fe:	e051      	b.n	80055a4 <HAL_I2C_Init+0x1dc>
 8005500:	2304      	movs	r3, #4
 8005502:	e04f      	b.n	80055a4 <HAL_I2C_Init+0x1dc>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d111      	bne.n	8005530 <HAL_I2C_Init+0x168>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	1e58      	subs	r0, r3, #1
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6859      	ldr	r1, [r3, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	440b      	add	r3, r1
 800551a:	fbb0 f3f3 	udiv	r3, r0, r3
 800551e:	3301      	adds	r3, #1
 8005520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005524:	2b00      	cmp	r3, #0
 8005526:	bf0c      	ite	eq
 8005528:	2301      	moveq	r3, #1
 800552a:	2300      	movne	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	e012      	b.n	8005556 <HAL_I2C_Init+0x18e>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	1e58      	subs	r0, r3, #1
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6859      	ldr	r1, [r3, #4]
 8005538:	460b      	mov	r3, r1
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	0099      	lsls	r1, r3, #2
 8005540:	440b      	add	r3, r1
 8005542:	fbb0 f3f3 	udiv	r3, r0, r3
 8005546:	3301      	adds	r3, #1
 8005548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800554c:	2b00      	cmp	r3, #0
 800554e:	bf0c      	ite	eq
 8005550:	2301      	moveq	r3, #1
 8005552:	2300      	movne	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <HAL_I2C_Init+0x196>
 800555a:	2301      	movs	r3, #1
 800555c:	e022      	b.n	80055a4 <HAL_I2C_Init+0x1dc>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10e      	bne.n	8005584 <HAL_I2C_Init+0x1bc>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1e58      	subs	r0, r3, #1
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6859      	ldr	r1, [r3, #4]
 800556e:	460b      	mov	r3, r1
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	440b      	add	r3, r1
 8005574:	fbb0 f3f3 	udiv	r3, r0, r3
 8005578:	3301      	adds	r3, #1
 800557a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800557e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005582:	e00f      	b.n	80055a4 <HAL_I2C_Init+0x1dc>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	1e58      	subs	r0, r3, #1
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6859      	ldr	r1, [r3, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	0099      	lsls	r1, r3, #2
 8005594:	440b      	add	r3, r1
 8005596:	fbb0 f3f3 	udiv	r3, r0, r3
 800559a:	3301      	adds	r3, #1
 800559c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	6809      	ldr	r1, [r1, #0]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69da      	ldr	r2, [r3, #28]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80055d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6911      	ldr	r1, [r2, #16]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	68d2      	ldr	r2, [r2, #12]
 80055de:	4311      	orrs	r1, r2
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	430b      	orrs	r3, r1
 80055e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	695a      	ldr	r2, [r3, #20]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	000186a0 	.word	0x000186a0
 8005640:	001e847f 	.word	0x001e847f
 8005644:	003d08ff 	.word	0x003d08ff
 8005648:	431bde83 	.word	0x431bde83
 800564c:	10624dd3 	.word	0x10624dd3

08005650 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af02      	add	r7, sp, #8
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	4608      	mov	r0, r1
 800565a:	4611      	mov	r1, r2
 800565c:	461a      	mov	r2, r3
 800565e:	4603      	mov	r3, r0
 8005660:	817b      	strh	r3, [r7, #10]
 8005662:	460b      	mov	r3, r1
 8005664:	813b      	strh	r3, [r7, #8]
 8005666:	4613      	mov	r3, r2
 8005668:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800566a:	f7ff fa23 	bl	8004ab4 <HAL_GetTick>
 800566e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b20      	cmp	r3, #32
 800567a:	f040 80d9 	bne.w	8005830 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	2319      	movs	r3, #25
 8005684:	2201      	movs	r2, #1
 8005686:	496d      	ldr	r1, [pc, #436]	@ (800583c <HAL_I2C_Mem_Write+0x1ec>)
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 fc8b 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005694:	2302      	movs	r3, #2
 8005696:	e0cc      	b.n	8005832 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <HAL_I2C_Mem_Write+0x56>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e0c5      	b.n	8005832 <HAL_I2C_Mem_Write+0x1e2>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d007      	beq.n	80056cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0201 	orr.w	r2, r2, #1
 80056ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2221      	movs	r2, #33	@ 0x21
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2240      	movs	r2, #64	@ 0x40
 80056e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a3a      	ldr	r2, [r7, #32]
 80056f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80056fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4a4d      	ldr	r2, [pc, #308]	@ (8005840 <HAL_I2C_Mem_Write+0x1f0>)
 800570c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800570e:	88f8      	ldrh	r0, [r7, #6]
 8005710:	893a      	ldrh	r2, [r7, #8]
 8005712:	8979      	ldrh	r1, [r7, #10]
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	9301      	str	r3, [sp, #4]
 8005718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	4603      	mov	r3, r0
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 fac2 	bl	8005ca8 <I2C_RequestMemoryWrite>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d052      	beq.n	80057d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e081      	b.n	8005832 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 fd50 	bl	80061d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00d      	beq.n	800575a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005742:	2b04      	cmp	r3, #4
 8005744:	d107      	bne.n	8005756 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005754:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e06b      	b.n	8005832 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575e:	781a      	ldrb	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005774:	3b01      	subs	r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005780:	b29b      	uxth	r3, r3
 8005782:	3b01      	subs	r3, #1
 8005784:	b29a      	uxth	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b04      	cmp	r3, #4
 8005796:	d11b      	bne.n	80057d0 <HAL_I2C_Mem_Write+0x180>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800579c:	2b00      	cmp	r3, #0
 800579e:	d017      	beq.n	80057d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a4:	781a      	ldrb	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1aa      	bne.n	800572e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 fd43 	bl	8006268 <I2C_WaitOnBTFFlagUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00d      	beq.n	8005804 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d107      	bne.n	8005800 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e016      	b.n	8005832 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800582c:	2300      	movs	r3, #0
 800582e:	e000      	b.n	8005832 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005830:	2302      	movs	r3, #2
  }
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	00100002 	.word	0x00100002
 8005840:	ffff0000 	.word	0xffff0000

08005844 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b08c      	sub	sp, #48	@ 0x30
 8005848:	af02      	add	r7, sp, #8
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	4608      	mov	r0, r1
 800584e:	4611      	mov	r1, r2
 8005850:	461a      	mov	r2, r3
 8005852:	4603      	mov	r3, r0
 8005854:	817b      	strh	r3, [r7, #10]
 8005856:	460b      	mov	r3, r1
 8005858:	813b      	strh	r3, [r7, #8]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800585e:	f7ff f929 	bl	8004ab4 <HAL_GetTick>
 8005862:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b20      	cmp	r3, #32
 800586e:	f040 8214 	bne.w	8005c9a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	2319      	movs	r3, #25
 8005878:	2201      	movs	r2, #1
 800587a:	497b      	ldr	r1, [pc, #492]	@ (8005a68 <HAL_I2C_Mem_Read+0x224>)
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 fb91 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005888:	2302      	movs	r3, #2
 800588a:	e207      	b.n	8005c9c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005892:	2b01      	cmp	r3, #1
 8005894:	d101      	bne.n	800589a <HAL_I2C_Mem_Read+0x56>
 8005896:	2302      	movs	r3, #2
 8005898:	e200      	b.n	8005c9c <HAL_I2C_Mem_Read+0x458>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d007      	beq.n	80058c0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2222      	movs	r2, #34	@ 0x22
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2240      	movs	r2, #64	@ 0x40
 80058dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80058f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4a5b      	ldr	r2, [pc, #364]	@ (8005a6c <HAL_I2C_Mem_Read+0x228>)
 8005900:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005902:	88f8      	ldrh	r0, [r7, #6]
 8005904:	893a      	ldrh	r2, [r7, #8]
 8005906:	8979      	ldrh	r1, [r7, #10]
 8005908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590a:	9301      	str	r3, [sp, #4]
 800590c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	4603      	mov	r3, r0
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 fa5e 	bl	8005dd4 <I2C_RequestMemoryRead>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e1bc      	b.n	8005c9c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005926:	2b00      	cmp	r3, #0
 8005928:	d113      	bne.n	8005952 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800592a:	2300      	movs	r3, #0
 800592c:	623b      	str	r3, [r7, #32]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	623b      	str	r3, [r7, #32]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	623b      	str	r3, [r7, #32]
 800593e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	e190      	b.n	8005c74 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005956:	2b01      	cmp	r3, #1
 8005958:	d11b      	bne.n	8005992 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005968:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800596a:	2300      	movs	r3, #0
 800596c:	61fb      	str	r3, [r7, #28]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	61fb      	str	r3, [r7, #28]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	61fb      	str	r3, [r7, #28]
 800597e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	e170      	b.n	8005c74 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005996:	2b02      	cmp	r3, #2
 8005998:	d11b      	bne.n	80059d2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ba:	2300      	movs	r3, #0
 80059bc:	61bb      	str	r3, [r7, #24]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	61bb      	str	r3, [r7, #24]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	e150      	b.n	8005c74 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059d2:	2300      	movs	r3, #0
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80059e8:	e144      	b.n	8005c74 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	f200 80f1 	bhi.w	8005bd6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d123      	bne.n	8005a44 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 fc79 	bl	80062f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e145      	b.n	8005c9c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a42:	e117      	b.n	8005c74 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d14e      	bne.n	8005aea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a52:	2200      	movs	r2, #0
 8005a54:	4906      	ldr	r1, [pc, #24]	@ (8005a70 <HAL_I2C_Mem_Read+0x22c>)
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 faa4 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d008      	beq.n	8005a74 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e11a      	b.n	8005c9c <HAL_I2C_Mem_Read+0x458>
 8005a66:	bf00      	nop
 8005a68:	00100002 	.word	0x00100002
 8005a6c:	ffff0000 	.word	0xffff0000
 8005a70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691a      	ldr	r2, [r3, #16]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ae8:	e0c4      	b.n	8005c74 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af0:	2200      	movs	r2, #0
 8005af2:	496c      	ldr	r1, [pc, #432]	@ (8005ca4 <HAL_I2C_Mem_Read+0x460>)
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 fa55 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e0cb      	b.n	8005c9c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691a      	ldr	r2, [r3, #16]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b30:	3b01      	subs	r3, #1
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	4955      	ldr	r1, [pc, #340]	@ (8005ca4 <HAL_I2C_Mem_Read+0x460>)
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 fa27 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e09d      	b.n	8005c9c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691a      	ldr	r2, [r3, #16]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691a      	ldr	r2, [r3, #16]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005bd4:	e04e      	b.n	8005c74 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bd8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 fb8c 	bl	80062f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e058      	b.n	8005c9c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	691a      	ldr	r2, [r3, #16]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf4:	b2d2      	uxtb	r2, r2
 8005bf6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c06:	3b01      	subs	r3, #1
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	f003 0304 	and.w	r3, r3, #4
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d124      	bne.n	8005c74 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	d107      	bne.n	8005c42 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c40:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	691a      	ldr	r2, [r3, #16]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f47f aeb6 	bne.w	80059ea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	e000      	b.n	8005c9c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005c9a:	2302      	movs	r3, #2
  }
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3728      	adds	r7, #40	@ 0x28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	00010004 	.word	0x00010004

08005ca8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	4608      	mov	r0, r1
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	817b      	strh	r3, [r7, #10]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	813b      	strh	r3, [r7, #8]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 f960 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00d      	beq.n	8005d06 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cf8:	d103      	bne.n	8005d02 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e05f      	b.n	8005dc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d06:	897b      	ldrh	r3, [r7, #10]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	6a3a      	ldr	r2, [r7, #32]
 8005d1a:	492d      	ldr	r1, [pc, #180]	@ (8005dd0 <I2C_RequestMemoryWrite+0x128>)
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 f9bb 	bl	8006098 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e04c      	b.n	8005dc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	617b      	str	r3, [r7, #20]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	617b      	str	r3, [r7, #20]
 8005d40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d44:	6a39      	ldr	r1, [r7, #32]
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fa46 	bl	80061d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00d      	beq.n	8005d6e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d107      	bne.n	8005d6a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e02b      	b.n	8005dc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d6e:	88fb      	ldrh	r3, [r7, #6]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d105      	bne.n	8005d80 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d74:	893b      	ldrh	r3, [r7, #8]
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	611a      	str	r2, [r3, #16]
 8005d7e:	e021      	b.n	8005dc4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d80:	893b      	ldrh	r3, [r7, #8]
 8005d82:	0a1b      	lsrs	r3, r3, #8
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d90:	6a39      	ldr	r1, [r7, #32]
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 fa20 	bl	80061d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00d      	beq.n	8005dba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d107      	bne.n	8005db6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005db4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e005      	b.n	8005dc6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dba:	893b      	ldrh	r3, [r7, #8]
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	00010002 	.word	0x00010002

08005dd4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	4608      	mov	r0, r1
 8005dde:	4611      	mov	r1, r2
 8005de0:	461a      	mov	r2, r3
 8005de2:	4603      	mov	r3, r0
 8005de4:	817b      	strh	r3, [r7, #10]
 8005de6:	460b      	mov	r3, r1
 8005de8:	813b      	strh	r3, [r7, #8]
 8005dea:	4613      	mov	r3, r2
 8005dec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005dfc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 f8c2 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00d      	beq.n	8005e42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e34:	d103      	bne.n	8005e3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e0aa      	b.n	8005f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e42:	897b      	ldrh	r3, [r7, #10]
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e54:	6a3a      	ldr	r2, [r7, #32]
 8005e56:	4952      	ldr	r1, [pc, #328]	@ (8005fa0 <I2C_RequestMemoryRead+0x1cc>)
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 f91d 	bl	8006098 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e097      	b.n	8005f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	617b      	str	r3, [r7, #20]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e80:	6a39      	ldr	r1, [r7, #32]
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 f9a8 	bl	80061d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00d      	beq.n	8005eaa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	d107      	bne.n	8005ea6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ea4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e076      	b.n	8005f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005eaa:	88fb      	ldrh	r3, [r7, #6]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d105      	bne.n	8005ebc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005eb0:	893b      	ldrh	r3, [r7, #8]
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	611a      	str	r2, [r3, #16]
 8005eba:	e021      	b.n	8005f00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ebc:	893b      	ldrh	r3, [r7, #8]
 8005ebe:	0a1b      	lsrs	r3, r3, #8
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ecc:	6a39      	ldr	r1, [r7, #32]
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 f982 	bl	80061d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00d      	beq.n	8005ef6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d107      	bne.n	8005ef2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ef0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e050      	b.n	8005f98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ef6:	893b      	ldrh	r3, [r7, #8]
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f02:	6a39      	ldr	r1, [r7, #32]
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 f967 	bl	80061d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00d      	beq.n	8005f2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	d107      	bne.n	8005f28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e035      	b.n	8005f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 f82b 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00d      	beq.n	8005f70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f62:	d103      	bne.n	8005f6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e013      	b.n	8005f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f70:	897b      	ldrh	r3, [r7, #10]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	f043 0301 	orr.w	r3, r3, #1
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f82:	6a3a      	ldr	r2, [r7, #32]
 8005f84:	4906      	ldr	r1, [pc, #24]	@ (8005fa0 <I2C_RequestMemoryRead+0x1cc>)
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f000 f886 	bl	8006098 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e000      	b.n	8005f98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3718      	adds	r7, #24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	00010002 	.word	0x00010002

08005fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fb4:	e048      	b.n	8006048 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d044      	beq.n	8006048 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fbe:	f7fe fd79 	bl	8004ab4 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d302      	bcc.n	8005fd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d139      	bne.n	8006048 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	0c1b      	lsrs	r3, r3, #16
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d10d      	bne.n	8005ffa <I2C_WaitOnFlagUntilTimeout+0x56>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	43da      	mvns	r2, r3
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	4013      	ands	r3, r2
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	bf0c      	ite	eq
 8005ff0:	2301      	moveq	r3, #1
 8005ff2:	2300      	movne	r3, #0
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	e00c      	b.n	8006014 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	43da      	mvns	r2, r3
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	4013      	ands	r3, r2
 8006006:	b29b      	uxth	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	bf0c      	ite	eq
 800600c:	2301      	moveq	r3, #1
 800600e:	2300      	movne	r3, #0
 8006010:	b2db      	uxtb	r3, r3
 8006012:	461a      	mov	r2, r3
 8006014:	79fb      	ldrb	r3, [r7, #7]
 8006016:	429a      	cmp	r2, r3
 8006018:	d116      	bne.n	8006048 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006034:	f043 0220 	orr.w	r2, r3, #32
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e023      	b.n	8006090 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	0c1b      	lsrs	r3, r3, #16
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b01      	cmp	r3, #1
 8006050:	d10d      	bne.n	800606e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	43da      	mvns	r2, r3
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	4013      	ands	r3, r2
 800605e:	b29b      	uxth	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	bf0c      	ite	eq
 8006064:	2301      	moveq	r3, #1
 8006066:	2300      	movne	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	461a      	mov	r2, r3
 800606c:	e00c      	b.n	8006088 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	43da      	mvns	r2, r3
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	4013      	ands	r3, r2
 800607a:	b29b      	uxth	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	bf0c      	ite	eq
 8006080:	2301      	moveq	r3, #1
 8006082:	2300      	movne	r3, #0
 8006084:	b2db      	uxtb	r3, r3
 8006086:	461a      	mov	r2, r3
 8006088:	79fb      	ldrb	r3, [r7, #7]
 800608a:	429a      	cmp	r2, r3
 800608c:	d093      	beq.n	8005fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
 80060a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060a6:	e071      	b.n	800618c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060b6:	d123      	bne.n	8006100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80060d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2220      	movs	r2, #32
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ec:	f043 0204 	orr.w	r2, r3, #4
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e067      	b.n	80061d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006106:	d041      	beq.n	800618c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006108:	f7fe fcd4 	bl	8004ab4 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	429a      	cmp	r2, r3
 8006116:	d302      	bcc.n	800611e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d136      	bne.n	800618c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	0c1b      	lsrs	r3, r3, #16
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b01      	cmp	r3, #1
 8006126:	d10c      	bne.n	8006142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	43da      	mvns	r2, r3
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4013      	ands	r3, r2
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	bf14      	ite	ne
 800613a:	2301      	movne	r3, #1
 800613c:	2300      	moveq	r3, #0
 800613e:	b2db      	uxtb	r3, r3
 8006140:	e00b      	b.n	800615a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	43da      	mvns	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	4013      	ands	r3, r2
 800614e:	b29b      	uxth	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	bf14      	ite	ne
 8006154:	2301      	movne	r3, #1
 8006156:	2300      	moveq	r3, #0
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d016      	beq.n	800618c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2220      	movs	r2, #32
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006178:	f043 0220 	orr.w	r2, r3, #32
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e021      	b.n	80061d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	0c1b      	lsrs	r3, r3, #16
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b01      	cmp	r3, #1
 8006194:	d10c      	bne.n	80061b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	43da      	mvns	r2, r3
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	4013      	ands	r3, r2
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	bf14      	ite	ne
 80061a8:	2301      	movne	r3, #1
 80061aa:	2300      	moveq	r3, #0
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	e00b      	b.n	80061c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	43da      	mvns	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4013      	ands	r3, r2
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	bf14      	ite	ne
 80061c2:	2301      	movne	r3, #1
 80061c4:	2300      	moveq	r3, #0
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f47f af6d 	bne.w	80060a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061e4:	e034      	b.n	8006250 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 f8e3 	bl	80063b2 <I2C_IsAcknowledgeFailed>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e034      	b.n	8006260 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fc:	d028      	beq.n	8006250 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061fe:	f7fe fc59 	bl	8004ab4 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	429a      	cmp	r2, r3
 800620c:	d302      	bcc.n	8006214 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d11d      	bne.n	8006250 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800621e:	2b80      	cmp	r3, #128	@ 0x80
 8006220:	d016      	beq.n	8006250 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623c:	f043 0220 	orr.w	r2, r3, #32
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e007      	b.n	8006260 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800625a:	2b80      	cmp	r3, #128	@ 0x80
 800625c:	d1c3      	bne.n	80061e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006274:	e034      	b.n	80062e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 f89b 	bl	80063b2 <I2C_IsAcknowledgeFailed>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e034      	b.n	80062f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628c:	d028      	beq.n	80062e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628e:	f7fe fc11 	bl	8004ab4 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	429a      	cmp	r2, r3
 800629c:	d302      	bcc.n	80062a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d11d      	bne.n	80062e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	2b04      	cmp	r3, #4
 80062b0:	d016      	beq.n	80062e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062cc:	f043 0220 	orr.w	r2, r3, #32
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e007      	b.n	80062f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	f003 0304 	and.w	r3, r3, #4
 80062ea:	2b04      	cmp	r3, #4
 80062ec:	d1c3      	bne.n	8006276 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006304:	e049      	b.n	800639a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	f003 0310 	and.w	r3, r3, #16
 8006310:	2b10      	cmp	r3, #16
 8006312:	d119      	bne.n	8006348 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f06f 0210 	mvn.w	r2, #16
 800631c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2220      	movs	r2, #32
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e030      	b.n	80063aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006348:	f7fe fbb4 	bl	8004ab4 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	429a      	cmp	r2, r3
 8006356:	d302      	bcc.n	800635e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d11d      	bne.n	800639a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006368:	2b40      	cmp	r3, #64	@ 0x40
 800636a:	d016      	beq.n	800639a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2220      	movs	r2, #32
 8006376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006386:	f043 0220 	orr.w	r2, r3, #32
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e007      	b.n	80063aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a4:	2b40      	cmp	r3, #64	@ 0x40
 80063a6:	d1ae      	bne.n	8006306 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063c8:	d11b      	bne.n	8006402 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80063d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2220      	movs	r2, #32
 80063de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ee:	f043 0204 	orr.w	r2, r3, #4
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b20      	cmp	r3, #32
 8006424:	d129      	bne.n	800647a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2224      	movs	r2, #36	@ 0x24
 800642a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0201 	bic.w	r2, r2, #1
 800643c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0210 	bic.w	r2, r2, #16
 800644c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f042 0201 	orr.w	r2, r2, #1
 800646c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2220      	movs	r2, #32
 8006472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	e000      	b.n	800647c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800647a:	2302      	movs	r3, #2
  }
}
 800647c:	4618      	mov	r0, r3
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006492:	2300      	movs	r3, #0
 8006494:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b20      	cmp	r3, #32
 80064a0:	d12a      	bne.n	80064f8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2224      	movs	r2, #36	@ 0x24
 80064a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 0201 	bic.w	r2, r2, #1
 80064b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80064c2:	89fb      	ldrh	r3, [r7, #14]
 80064c4:	f023 030f 	bic.w	r3, r3, #15
 80064c8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	89fb      	ldrh	r3, [r7, #14]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	89fa      	ldrh	r2, [r7, #14]
 80064da:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0201 	orr.w	r2, r2, #1
 80064ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	e000      	b.n	80064fa <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80064f8:	2302      	movs	r3, #2
  }
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
	...

08006508 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e0bf      	b.n	800669a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d106      	bne.n	8006534 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7fd fcb2 	bl	8003e98 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699a      	ldr	r2, [r3, #24]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800654a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6999      	ldr	r1, [r3, #24]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006560:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6899      	ldr	r1, [r3, #8]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	4b4a      	ldr	r3, [pc, #296]	@ (80066a4 <HAL_LTDC_Init+0x19c>)
 800657c:	400b      	ands	r3, r1
 800657e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	041b      	lsls	r3, r3, #16
 8006586:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6899      	ldr	r1, [r3, #8]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68d9      	ldr	r1, [r3, #12]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	4b3e      	ldr	r3, [pc, #248]	@ (80066a4 <HAL_LTDC_Init+0x19c>)
 80065aa:	400b      	ands	r3, r1
 80065ac:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	041b      	lsls	r3, r3, #16
 80065b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68d9      	ldr	r1, [r3, #12]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a1a      	ldr	r2, [r3, #32]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6919      	ldr	r1, [r3, #16]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	4b33      	ldr	r3, [pc, #204]	@ (80066a4 <HAL_LTDC_Init+0x19c>)
 80065d8:	400b      	ands	r3, r1
 80065da:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e0:	041b      	lsls	r3, r3, #16
 80065e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6919      	ldr	r1, [r3, #16]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	431a      	orrs	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6959      	ldr	r1, [r3, #20]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	4b27      	ldr	r3, [pc, #156]	@ (80066a4 <HAL_LTDC_Init+0x19c>)
 8006606:	400b      	ands	r3, r1
 8006608:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800660e:	041b      	lsls	r3, r3, #16
 8006610:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6959      	ldr	r1, [r3, #20]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	431a      	orrs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006638:	041b      	lsls	r3, r3, #16
 800663a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800664a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4313      	orrs	r3, r2
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f042 0206 	orr.w	r2, r2, #6
 8006676:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	699a      	ldr	r2, [r3, #24]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0201 	orr.w	r2, r2, #1
 8006686:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	f000f800 	.word	0xf000f800

080066a8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80066a8:	b5b0      	push	{r4, r5, r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d101      	bne.n	80066c2 <HAL_LTDC_ConfigLayer+0x1a>
 80066be:	2302      	movs	r3, #2
 80066c0:	e02c      	b.n	800671c <HAL_LTDC_ConfigLayer+0x74>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2202      	movs	r2, #2
 80066ce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2134      	movs	r1, #52	@ 0x34
 80066d8:	fb01 f303 	mul.w	r3, r1, r3
 80066dc:	4413      	add	r3, r2
 80066de:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	4614      	mov	r4, r2
 80066e6:	461d      	mov	r5, r3
 80066e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066f4:	682b      	ldr	r3, [r5, #0]
 80066f6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	68b9      	ldr	r1, [r7, #8]
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 f811 	bl	8006724 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2201      	movs	r2, #1
 8006708:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bdb0      	pop	{r4, r5, r7, pc}

08006724 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006724:	b480      	push	{r7}
 8006726:	b089      	sub	sp, #36	@ 0x24
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	0c1b      	lsrs	r3, r3, #16
 800673c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006740:	4413      	add	r3, r2
 8006742:	041b      	lsls	r3, r3, #16
 8006744:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	01db      	lsls	r3, r3, #7
 8006750:	4413      	add	r3, r2
 8006752:	3384      	adds	r3, #132	@ 0x84
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	6812      	ldr	r2, [r2, #0]
 800675a:	4611      	mov	r1, r2
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	01d2      	lsls	r2, r2, #7
 8006760:	440a      	add	r2, r1
 8006762:	3284      	adds	r2, #132	@ 0x84
 8006764:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006768:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	0c1b      	lsrs	r3, r3, #16
 8006776:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800677a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800677c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4619      	mov	r1, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	01db      	lsls	r3, r3, #7
 8006788:	440b      	add	r3, r1
 800678a:	3384      	adds	r3, #132	@ 0x84
 800678c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006792:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067a2:	4413      	add	r3, r2
 80067a4:	041b      	lsls	r3, r3, #16
 80067a6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	461a      	mov	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	01db      	lsls	r3, r3, #7
 80067b2:	4413      	add	r3, r2
 80067b4:	3384      	adds	r3, #132	@ 0x84
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	6812      	ldr	r2, [r2, #0]
 80067bc:	4611      	mov	r1, r2
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	01d2      	lsls	r2, r2, #7
 80067c2:	440a      	add	r2, r1
 80067c4:	3284      	adds	r2, #132	@ 0x84
 80067c6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80067ca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067da:	4413      	add	r3, r2
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4619      	mov	r1, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	01db      	lsls	r3, r3, #7
 80067e8:	440b      	add	r3, r1
 80067ea:	3384      	adds	r3, #132	@ 0x84
 80067ec:	4619      	mov	r1, r3
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	461a      	mov	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	01db      	lsls	r3, r3, #7
 80067fe:	4413      	add	r3, r2
 8006800:	3384      	adds	r3, #132	@ 0x84
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	6812      	ldr	r2, [r2, #0]
 8006808:	4611      	mov	r1, r2
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	01d2      	lsls	r2, r2, #7
 800680e:	440a      	add	r2, r1
 8006810:	3284      	adds	r2, #132	@ 0x84
 8006812:	f023 0307 	bic.w	r3, r3, #7
 8006816:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	461a      	mov	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	01db      	lsls	r3, r3, #7
 8006822:	4413      	add	r3, r2
 8006824:	3384      	adds	r3, #132	@ 0x84
 8006826:	461a      	mov	r2, r3
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006834:	021b      	lsls	r3, r3, #8
 8006836:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800683e:	041b      	lsls	r3, r3, #16
 8006840:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	061b      	lsls	r3, r3, #24
 8006848:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	01db      	lsls	r3, r3, #7
 8006854:	4413      	add	r3, r2
 8006856:	3384      	adds	r3, #132	@ 0x84
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	01db      	lsls	r3, r3, #7
 8006864:	4413      	add	r3, r2
 8006866:	3384      	adds	r3, #132	@ 0x84
 8006868:	461a      	mov	r2, r3
 800686a:	2300      	movs	r3, #0
 800686c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006874:	461a      	mov	r2, r3
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	431a      	orrs	r2, r3
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	431a      	orrs	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4619      	mov	r1, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	01db      	lsls	r3, r3, #7
 8006888:	440b      	add	r3, r1
 800688a:	3384      	adds	r3, #132	@ 0x84
 800688c:	4619      	mov	r1, r3
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	4313      	orrs	r3, r2
 8006892:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	461a      	mov	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	01db      	lsls	r3, r3, #7
 800689e:	4413      	add	r3, r2
 80068a0:	3384      	adds	r3, #132	@ 0x84
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	6812      	ldr	r2, [r2, #0]
 80068a8:	4611      	mov	r1, r2
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	01d2      	lsls	r2, r2, #7
 80068ae:	440a      	add	r2, r1
 80068b0:	3284      	adds	r2, #132	@ 0x84
 80068b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80068b6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	01db      	lsls	r3, r3, #7
 80068c2:	4413      	add	r3, r2
 80068c4:	3384      	adds	r3, #132	@ 0x84
 80068c6:	461a      	mov	r2, r3
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	461a      	mov	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	01db      	lsls	r3, r3, #7
 80068d8:	4413      	add	r3, r2
 80068da:	3384      	adds	r3, #132	@ 0x84
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	6812      	ldr	r2, [r2, #0]
 80068e2:	4611      	mov	r1, r2
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	01d2      	lsls	r2, r2, #7
 80068e8:	440a      	add	r2, r1
 80068ea:	3284      	adds	r2, #132	@ 0x84
 80068ec:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80068f0:	f023 0307 	bic.w	r3, r3, #7
 80068f4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	69da      	ldr	r2, [r3, #28]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	68f9      	ldr	r1, [r7, #12]
 8006900:	6809      	ldr	r1, [r1, #0]
 8006902:	4608      	mov	r0, r1
 8006904:	6879      	ldr	r1, [r7, #4]
 8006906:	01c9      	lsls	r1, r1, #7
 8006908:	4401      	add	r1, r0
 800690a:	3184      	adds	r1, #132	@ 0x84
 800690c:	4313      	orrs	r3, r2
 800690e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	461a      	mov	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	01db      	lsls	r3, r3, #7
 800691a:	4413      	add	r3, r2
 800691c:	3384      	adds	r3, #132	@ 0x84
 800691e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	461a      	mov	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	01db      	lsls	r3, r3, #7
 800692a:	4413      	add	r3, r2
 800692c:	3384      	adds	r3, #132	@ 0x84
 800692e:	461a      	mov	r2, r3
 8006930:	2300      	movs	r3, #0
 8006932:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	461a      	mov	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	01db      	lsls	r3, r3, #7
 800693e:	4413      	add	r3, r2
 8006940:	3384      	adds	r3, #132	@ 0x84
 8006942:	461a      	mov	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006948:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d102      	bne.n	8006958 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006952:	2304      	movs	r3, #4
 8006954:	61fb      	str	r3, [r7, #28]
 8006956:	e01b      	b.n	8006990 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d102      	bne.n	8006966 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006960:	2303      	movs	r3, #3
 8006962:	61fb      	str	r3, [r7, #28]
 8006964:	e014      	b.n	8006990 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	2b04      	cmp	r3, #4
 800696c:	d00b      	beq.n	8006986 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006972:	2b02      	cmp	r3, #2
 8006974:	d007      	beq.n	8006986 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800697a:	2b03      	cmp	r3, #3
 800697c:	d003      	beq.n	8006986 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006982:	2b07      	cmp	r3, #7
 8006984:	d102      	bne.n	800698c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006986:	2302      	movs	r3, #2
 8006988:	61fb      	str	r3, [r7, #28]
 800698a:	e001      	b.n	8006990 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800698c:	2301      	movs	r3, #1
 800698e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	01db      	lsls	r3, r3, #7
 800699a:	4413      	add	r3, r2
 800699c:	3384      	adds	r3, #132	@ 0x84
 800699e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	6812      	ldr	r2, [r2, #0]
 80069a4:	4611      	mov	r1, r2
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	01d2      	lsls	r2, r2, #7
 80069aa:	440a      	add	r2, r1
 80069ac:	3284      	adds	r2, #132	@ 0x84
 80069ae:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80069b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b8:	69fa      	ldr	r2, [r7, #28]
 80069ba:	fb02 f303 	mul.w	r3, r2, r3
 80069be:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	6859      	ldr	r1, [r3, #4]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	1acb      	subs	r3, r1, r3
 80069ca:	69f9      	ldr	r1, [r7, #28]
 80069cc:	fb01 f303 	mul.w	r3, r1, r3
 80069d0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80069d2:	68f9      	ldr	r1, [r7, #12]
 80069d4:	6809      	ldr	r1, [r1, #0]
 80069d6:	4608      	mov	r0, r1
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	01c9      	lsls	r1, r1, #7
 80069dc:	4401      	add	r1, r0
 80069de:	3184      	adds	r1, #132	@ 0x84
 80069e0:	4313      	orrs	r3, r2
 80069e2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	461a      	mov	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	01db      	lsls	r3, r3, #7
 80069ee:	4413      	add	r3, r2
 80069f0:	3384      	adds	r3, #132	@ 0x84
 80069f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	6812      	ldr	r2, [r2, #0]
 80069f8:	4611      	mov	r1, r2
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	01d2      	lsls	r2, r2, #7
 80069fe:	440a      	add	r2, r1
 8006a00:	3284      	adds	r2, #132	@ 0x84
 8006a02:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006a06:	f023 0307 	bic.w	r3, r3, #7
 8006a0a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	01db      	lsls	r3, r3, #7
 8006a16:	4413      	add	r3, r2
 8006a18:	3384      	adds	r3, #132	@ 0x84
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a20:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	01db      	lsls	r3, r3, #7
 8006a2c:	4413      	add	r3, r2
 8006a2e:	3384      	adds	r3, #132	@ 0x84
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	6812      	ldr	r2, [r2, #0]
 8006a36:	4611      	mov	r1, r2
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	01d2      	lsls	r2, r2, #7
 8006a3c:	440a      	add	r2, r1
 8006a3e:	3284      	adds	r2, #132	@ 0x84
 8006a40:	f043 0301 	orr.w	r3, r3, #1
 8006a44:	6013      	str	r3, [r2, #0]
}
 8006a46:	bf00      	nop
 8006a48:	3724      	adds	r7, #36	@ 0x24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
	...

08006a54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e267      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d075      	beq.n	8006b5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a72:	4b88      	ldr	r3, [pc, #544]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f003 030c 	and.w	r3, r3, #12
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	d00c      	beq.n	8006a98 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a7e:	4b85      	ldr	r3, [pc, #532]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a86:	2b08      	cmp	r3, #8
 8006a88:	d112      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a8a:	4b82      	ldr	r3, [pc, #520]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a96:	d10b      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a98:	4b7e      	ldr	r3, [pc, #504]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d05b      	beq.n	8006b5c <HAL_RCC_OscConfig+0x108>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d157      	bne.n	8006b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e242      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ab8:	d106      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x74>
 8006aba:	4b76      	ldr	r3, [pc, #472]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a75      	ldr	r2, [pc, #468]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	e01d      	b.n	8006b04 <HAL_RCC_OscConfig+0xb0>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ad0:	d10c      	bne.n	8006aec <HAL_RCC_OscConfig+0x98>
 8006ad2:	4b70      	ldr	r3, [pc, #448]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a6f      	ldr	r2, [pc, #444]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ad8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	4b6d      	ldr	r3, [pc, #436]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a6c      	ldr	r2, [pc, #432]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	e00b      	b.n	8006b04 <HAL_RCC_OscConfig+0xb0>
 8006aec:	4b69      	ldr	r3, [pc, #420]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a68      	ldr	r2, [pc, #416]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006af2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006af6:	6013      	str	r3, [r2, #0]
 8006af8:	4b66      	ldr	r3, [pc, #408]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a65      	ldr	r2, [pc, #404]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006afe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d013      	beq.n	8006b34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b0c:	f7fd ffd2 	bl	8004ab4 <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b14:	f7fd ffce 	bl	8004ab4 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b64      	cmp	r3, #100	@ 0x64
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e207      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b26:	4b5b      	ldr	r3, [pc, #364]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0f0      	beq.n	8006b14 <HAL_RCC_OscConfig+0xc0>
 8006b32:	e014      	b.n	8006b5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b34:	f7fd ffbe 	bl	8004ab4 <HAL_GetTick>
 8006b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b3c:	f7fd ffba 	bl	8004ab4 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b64      	cmp	r3, #100	@ 0x64
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e1f3      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b4e:	4b51      	ldr	r3, [pc, #324]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1f0      	bne.n	8006b3c <HAL_RCC_OscConfig+0xe8>
 8006b5a:	e000      	b.n	8006b5e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d063      	beq.n	8006c32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006b6a:	4b4a      	ldr	r3, [pc, #296]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f003 030c 	and.w	r3, r3, #12
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00b      	beq.n	8006b8e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b76:	4b47      	ldr	r3, [pc, #284]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006b7e:	2b08      	cmp	r3, #8
 8006b80:	d11c      	bne.n	8006bbc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b82:	4b44      	ldr	r3, [pc, #272]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d116      	bne.n	8006bbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b8e:	4b41      	ldr	r3, [pc, #260]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d005      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x152>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d001      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e1c7      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ba6:	4b3b      	ldr	r3, [pc, #236]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	4937      	ldr	r1, [pc, #220]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bba:	e03a      	b.n	8006c32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d020      	beq.n	8006c06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bc4:	4b34      	ldr	r3, [pc, #208]	@ (8006c98 <HAL_RCC_OscConfig+0x244>)
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bca:	f7fd ff73 	bl	8004ab4 <HAL_GetTick>
 8006bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bd0:	e008      	b.n	8006be4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bd2:	f7fd ff6f 	bl	8004ab4 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d901      	bls.n	8006be4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e1a8      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006be4:	4b2b      	ldr	r3, [pc, #172]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d0f0      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bf0:	4b28      	ldr	r3, [pc, #160]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	4925      	ldr	r1, [pc, #148]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	600b      	str	r3, [r1, #0]
 8006c04:	e015      	b.n	8006c32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c06:	4b24      	ldr	r3, [pc, #144]	@ (8006c98 <HAL_RCC_OscConfig+0x244>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0c:	f7fd ff52 	bl	8004ab4 <HAL_GetTick>
 8006c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c12:	e008      	b.n	8006c26 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c14:	f7fd ff4e 	bl	8004ab4 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e187      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c26:	4b1b      	ldr	r3, [pc, #108]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1f0      	bne.n	8006c14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0308 	and.w	r3, r3, #8
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d036      	beq.n	8006cac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d016      	beq.n	8006c74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c46:	4b15      	ldr	r3, [pc, #84]	@ (8006c9c <HAL_RCC_OscConfig+0x248>)
 8006c48:	2201      	movs	r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c4c:	f7fd ff32 	bl	8004ab4 <HAL_GetTick>
 8006c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c54:	f7fd ff2e 	bl	8004ab4 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e167      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c66:	4b0b      	ldr	r3, [pc, #44]	@ (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0f0      	beq.n	8006c54 <HAL_RCC_OscConfig+0x200>
 8006c72:	e01b      	b.n	8006cac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c74:	4b09      	ldr	r3, [pc, #36]	@ (8006c9c <HAL_RCC_OscConfig+0x248>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c7a:	f7fd ff1b 	bl	8004ab4 <HAL_GetTick>
 8006c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c80:	e00e      	b.n	8006ca0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c82:	f7fd ff17 	bl	8004ab4 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d907      	bls.n	8006ca0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e150      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
 8006c94:	40023800 	.word	0x40023800
 8006c98:	42470000 	.word	0x42470000
 8006c9c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ca0:	4b88      	ldr	r3, [pc, #544]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006ca2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1ea      	bne.n	8006c82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 8097 	beq.w	8006de8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cbe:	4b81      	ldr	r3, [pc, #516]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10f      	bne.n	8006cea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60bb      	str	r3, [r7, #8]
 8006cce:	4b7d      	ldr	r3, [pc, #500]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd2:	4a7c      	ldr	r2, [pc, #496]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006cda:	4b7a      	ldr	r3, [pc, #488]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ce2:	60bb      	str	r3, [r7, #8]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cea:	4b77      	ldr	r3, [pc, #476]	@ (8006ec8 <HAL_RCC_OscConfig+0x474>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d118      	bne.n	8006d28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cf6:	4b74      	ldr	r3, [pc, #464]	@ (8006ec8 <HAL_RCC_OscConfig+0x474>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a73      	ldr	r2, [pc, #460]	@ (8006ec8 <HAL_RCC_OscConfig+0x474>)
 8006cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d02:	f7fd fed7 	bl	8004ab4 <HAL_GetTick>
 8006d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d08:	e008      	b.n	8006d1c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d0a:	f7fd fed3 	bl	8004ab4 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d901      	bls.n	8006d1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e10c      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d1c:	4b6a      	ldr	r3, [pc, #424]	@ (8006ec8 <HAL_RCC_OscConfig+0x474>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0f0      	beq.n	8006d0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d106      	bne.n	8006d3e <HAL_RCC_OscConfig+0x2ea>
 8006d30:	4b64      	ldr	r3, [pc, #400]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d34:	4a63      	ldr	r2, [pc, #396]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d36:	f043 0301 	orr.w	r3, r3, #1
 8006d3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d3c:	e01c      	b.n	8006d78 <HAL_RCC_OscConfig+0x324>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	2b05      	cmp	r3, #5
 8006d44:	d10c      	bne.n	8006d60 <HAL_RCC_OscConfig+0x30c>
 8006d46:	4b5f      	ldr	r3, [pc, #380]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d4a:	4a5e      	ldr	r2, [pc, #376]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d4c:	f043 0304 	orr.w	r3, r3, #4
 8006d50:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d52:	4b5c      	ldr	r3, [pc, #368]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d56:	4a5b      	ldr	r2, [pc, #364]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d58:	f043 0301 	orr.w	r3, r3, #1
 8006d5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d5e:	e00b      	b.n	8006d78 <HAL_RCC_OscConfig+0x324>
 8006d60:	4b58      	ldr	r3, [pc, #352]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d64:	4a57      	ldr	r2, [pc, #348]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d66:	f023 0301 	bic.w	r3, r3, #1
 8006d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d6c:	4b55      	ldr	r3, [pc, #340]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d70:	4a54      	ldr	r2, [pc, #336]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d72:	f023 0304 	bic.w	r3, r3, #4
 8006d76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d015      	beq.n	8006dac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d80:	f7fd fe98 	bl	8004ab4 <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d86:	e00a      	b.n	8006d9e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d88:	f7fd fe94 	bl	8004ab4 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e0cb      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d9e:	4b49      	ldr	r3, [pc, #292]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0ee      	beq.n	8006d88 <HAL_RCC_OscConfig+0x334>
 8006daa:	e014      	b.n	8006dd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dac:	f7fd fe82 	bl	8004ab4 <HAL_GetTick>
 8006db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006db2:	e00a      	b.n	8006dca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006db4:	f7fd fe7e 	bl	8004ab4 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e0b5      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dca:	4b3e      	ldr	r3, [pc, #248]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1ee      	bne.n	8006db4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d105      	bne.n	8006de8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ddc:	4b39      	ldr	r3, [pc, #228]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de0:	4a38      	ldr	r2, [pc, #224]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006de2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006de6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 80a1 	beq.w	8006f34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006df2:	4b34      	ldr	r3, [pc, #208]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f003 030c 	and.w	r3, r3, #12
 8006dfa:	2b08      	cmp	r3, #8
 8006dfc:	d05c      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d141      	bne.n	8006e8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e06:	4b31      	ldr	r3, [pc, #196]	@ (8006ecc <HAL_RCC_OscConfig+0x478>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e0c:	f7fd fe52 	bl	8004ab4 <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e14:	f7fd fe4e 	bl	8004ab4 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e087      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e26:	4b27      	ldr	r3, [pc, #156]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1f0      	bne.n	8006e14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	69da      	ldr	r2, [r3, #28]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e40:	019b      	lsls	r3, r3, #6
 8006e42:	431a      	orrs	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e48:	085b      	lsrs	r3, r3, #1
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	041b      	lsls	r3, r3, #16
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e54:	061b      	lsls	r3, r3, #24
 8006e56:	491b      	ldr	r1, [pc, #108]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8006ecc <HAL_RCC_OscConfig+0x478>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e62:	f7fd fe27 	bl	8004ab4 <HAL_GetTick>
 8006e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e68:	e008      	b.n	8006e7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e6a:	f7fd fe23 	bl	8004ab4 <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d901      	bls.n	8006e7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e05c      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e7c:	4b11      	ldr	r3, [pc, #68]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d0f0      	beq.n	8006e6a <HAL_RCC_OscConfig+0x416>
 8006e88:	e054      	b.n	8006f34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e8a:	4b10      	ldr	r3, [pc, #64]	@ (8006ecc <HAL_RCC_OscConfig+0x478>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e90:	f7fd fe10 	bl	8004ab4 <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e96:	e008      	b.n	8006eaa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e98:	f7fd fe0c 	bl	8004ab4 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e045      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eaa:	4b06      	ldr	r3, [pc, #24]	@ (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1f0      	bne.n	8006e98 <HAL_RCC_OscConfig+0x444>
 8006eb6:	e03d      	b.n	8006f34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d107      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e038      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	40007000 	.word	0x40007000
 8006ecc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8006f40 <HAL_RCC_OscConfig+0x4ec>)
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d028      	beq.n	8006f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d121      	bne.n	8006f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d11a      	bne.n	8006f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006f00:	4013      	ands	r3, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d111      	bne.n	8006f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f16:	085b      	lsrs	r3, r3, #1
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d107      	bne.n	8006f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d001      	beq.n	8006f34 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e000      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3718      	adds	r7, #24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	40023800 	.word	0x40023800

08006f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e0cc      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f58:	4b68      	ldr	r3, [pc, #416]	@ (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 030f 	and.w	r3, r3, #15
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d90c      	bls.n	8006f80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f66:	4b65      	ldr	r3, [pc, #404]	@ (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f6e:	4b63      	ldr	r3, [pc, #396]	@ (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 030f 	and.w	r3, r3, #15
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d001      	beq.n	8006f80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e0b8      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d020      	beq.n	8006fce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d005      	beq.n	8006fa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f98:	4b59      	ldr	r3, [pc, #356]	@ (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	4a58      	ldr	r2, [pc, #352]	@ (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006fa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0308 	and.w	r3, r3, #8
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d005      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fb0:	4b53      	ldr	r3, [pc, #332]	@ (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	4a52      	ldr	r2, [pc, #328]	@ (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006fba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fbc:	4b50      	ldr	r3, [pc, #320]	@ (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	494d      	ldr	r1, [pc, #308]	@ (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d044      	beq.n	8007064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d107      	bne.n	8006ff2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fe2:	4b47      	ldr	r3, [pc, #284]	@ (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d119      	bne.n	8007022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e07f      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d003      	beq.n	8007002 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d107      	bne.n	8007012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007002:	4b3f      	ldr	r3, [pc, #252]	@ (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e06f      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007012:	4b3b      	ldr	r3, [pc, #236]	@ (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e067      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007022:	4b37      	ldr	r3, [pc, #220]	@ (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f023 0203 	bic.w	r2, r3, #3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	4934      	ldr	r1, [pc, #208]	@ (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007030:	4313      	orrs	r3, r2
 8007032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007034:	f7fd fd3e 	bl	8004ab4 <HAL_GetTick>
 8007038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800703a:	e00a      	b.n	8007052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800703c:	f7fd fd3a 	bl	8004ab4 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800704a:	4293      	cmp	r3, r2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e04f      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007052:	4b2b      	ldr	r3, [pc, #172]	@ (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f003 020c 	and.w	r2, r3, #12
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	429a      	cmp	r2, r3
 8007062:	d1eb      	bne.n	800703c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007064:	4b25      	ldr	r3, [pc, #148]	@ (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 030f 	and.w	r3, r3, #15
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d20c      	bcs.n	800708c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007072:	4b22      	ldr	r3, [pc, #136]	@ (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	b2d2      	uxtb	r2, r2
 8007078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800707a:	4b20      	ldr	r3, [pc, #128]	@ (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d001      	beq.n	800708c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e032      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	d008      	beq.n	80070aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007098:	4b19      	ldr	r3, [pc, #100]	@ (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	4916      	ldr	r1, [pc, #88]	@ (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0308 	and.w	r3, r3, #8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d009      	beq.n	80070ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070b6:	4b12      	ldr	r3, [pc, #72]	@ (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	490e      	ldr	r1, [pc, #56]	@ (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80070ca:	f000 f821 	bl	8007110 <HAL_RCC_GetSysClockFreq>
 80070ce:	4602      	mov	r2, r0
 80070d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	091b      	lsrs	r3, r3, #4
 80070d6:	f003 030f 	and.w	r3, r3, #15
 80070da:	490a      	ldr	r1, [pc, #40]	@ (8007104 <HAL_RCC_ClockConfig+0x1c0>)
 80070dc:	5ccb      	ldrb	r3, [r1, r3]
 80070de:	fa22 f303 	lsr.w	r3, r2, r3
 80070e2:	4a09      	ldr	r2, [pc, #36]	@ (8007108 <HAL_RCC_ClockConfig+0x1c4>)
 80070e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80070e6:	4b09      	ldr	r3, [pc, #36]	@ (800710c <HAL_RCC_ClockConfig+0x1c8>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fd fc9e 	bl	8004a2c <HAL_InitTick>

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	40023c00 	.word	0x40023c00
 8007100:	40023800 	.word	0x40023800
 8007104:	08009db4 	.word	0x08009db4
 8007108:	20000018 	.word	0x20000018
 800710c:	2000001c 	.word	0x2000001c

08007110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007114:	b094      	sub	sp, #80	@ 0x50
 8007116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007128:	4b79      	ldr	r3, [pc, #484]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x200>)
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 030c 	and.w	r3, r3, #12
 8007130:	2b08      	cmp	r3, #8
 8007132:	d00d      	beq.n	8007150 <HAL_RCC_GetSysClockFreq+0x40>
 8007134:	2b08      	cmp	r3, #8
 8007136:	f200 80e1 	bhi.w	80072fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d002      	beq.n	8007144 <HAL_RCC_GetSysClockFreq+0x34>
 800713e:	2b04      	cmp	r3, #4
 8007140:	d003      	beq.n	800714a <HAL_RCC_GetSysClockFreq+0x3a>
 8007142:	e0db      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007144:	4b73      	ldr	r3, [pc, #460]	@ (8007314 <HAL_RCC_GetSysClockFreq+0x204>)
 8007146:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007148:	e0db      	b.n	8007302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800714a:	4b73      	ldr	r3, [pc, #460]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x208>)
 800714c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800714e:	e0d8      	b.n	8007302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007150:	4b6f      	ldr	r3, [pc, #444]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x200>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007158:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800715a:	4b6d      	ldr	r3, [pc, #436]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x200>)
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d063      	beq.n	800722e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007166:	4b6a      	ldr	r3, [pc, #424]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x200>)
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	099b      	lsrs	r3, r3, #6
 800716c:	2200      	movs	r2, #0
 800716e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007170:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007178:	633b      	str	r3, [r7, #48]	@ 0x30
 800717a:	2300      	movs	r3, #0
 800717c:	637b      	str	r3, [r7, #52]	@ 0x34
 800717e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007182:	4622      	mov	r2, r4
 8007184:	462b      	mov	r3, r5
 8007186:	f04f 0000 	mov.w	r0, #0
 800718a:	f04f 0100 	mov.w	r1, #0
 800718e:	0159      	lsls	r1, r3, #5
 8007190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007194:	0150      	lsls	r0, r2, #5
 8007196:	4602      	mov	r2, r0
 8007198:	460b      	mov	r3, r1
 800719a:	4621      	mov	r1, r4
 800719c:	1a51      	subs	r1, r2, r1
 800719e:	6139      	str	r1, [r7, #16]
 80071a0:	4629      	mov	r1, r5
 80071a2:	eb63 0301 	sbc.w	r3, r3, r1
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	f04f 0200 	mov.w	r2, #0
 80071ac:	f04f 0300 	mov.w	r3, #0
 80071b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071b4:	4659      	mov	r1, fp
 80071b6:	018b      	lsls	r3, r1, #6
 80071b8:	4651      	mov	r1, sl
 80071ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071be:	4651      	mov	r1, sl
 80071c0:	018a      	lsls	r2, r1, #6
 80071c2:	4651      	mov	r1, sl
 80071c4:	ebb2 0801 	subs.w	r8, r2, r1
 80071c8:	4659      	mov	r1, fp
 80071ca:	eb63 0901 	sbc.w	r9, r3, r1
 80071ce:	f04f 0200 	mov.w	r2, #0
 80071d2:	f04f 0300 	mov.w	r3, #0
 80071d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071e2:	4690      	mov	r8, r2
 80071e4:	4699      	mov	r9, r3
 80071e6:	4623      	mov	r3, r4
 80071e8:	eb18 0303 	adds.w	r3, r8, r3
 80071ec:	60bb      	str	r3, [r7, #8]
 80071ee:	462b      	mov	r3, r5
 80071f0:	eb49 0303 	adc.w	r3, r9, r3
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	f04f 0200 	mov.w	r2, #0
 80071fa:	f04f 0300 	mov.w	r3, #0
 80071fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007202:	4629      	mov	r1, r5
 8007204:	024b      	lsls	r3, r1, #9
 8007206:	4621      	mov	r1, r4
 8007208:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800720c:	4621      	mov	r1, r4
 800720e:	024a      	lsls	r2, r1, #9
 8007210:	4610      	mov	r0, r2
 8007212:	4619      	mov	r1, r3
 8007214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007216:	2200      	movs	r2, #0
 8007218:	62bb      	str	r3, [r7, #40]	@ 0x28
 800721a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800721c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007220:	f7f8 ffe4 	bl	80001ec <__aeabi_uldivmod>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	4613      	mov	r3, r2
 800722a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800722c:	e058      	b.n	80072e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800722e:	4b38      	ldr	r3, [pc, #224]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x200>)
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	099b      	lsrs	r3, r3, #6
 8007234:	2200      	movs	r2, #0
 8007236:	4618      	mov	r0, r3
 8007238:	4611      	mov	r1, r2
 800723a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800723e:	623b      	str	r3, [r7, #32]
 8007240:	2300      	movs	r3, #0
 8007242:	627b      	str	r3, [r7, #36]	@ 0x24
 8007244:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007248:	4642      	mov	r2, r8
 800724a:	464b      	mov	r3, r9
 800724c:	f04f 0000 	mov.w	r0, #0
 8007250:	f04f 0100 	mov.w	r1, #0
 8007254:	0159      	lsls	r1, r3, #5
 8007256:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800725a:	0150      	lsls	r0, r2, #5
 800725c:	4602      	mov	r2, r0
 800725e:	460b      	mov	r3, r1
 8007260:	4641      	mov	r1, r8
 8007262:	ebb2 0a01 	subs.w	sl, r2, r1
 8007266:	4649      	mov	r1, r9
 8007268:	eb63 0b01 	sbc.w	fp, r3, r1
 800726c:	f04f 0200 	mov.w	r2, #0
 8007270:	f04f 0300 	mov.w	r3, #0
 8007274:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007278:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800727c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007280:	ebb2 040a 	subs.w	r4, r2, sl
 8007284:	eb63 050b 	sbc.w	r5, r3, fp
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	f04f 0300 	mov.w	r3, #0
 8007290:	00eb      	lsls	r3, r5, #3
 8007292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007296:	00e2      	lsls	r2, r4, #3
 8007298:	4614      	mov	r4, r2
 800729a:	461d      	mov	r5, r3
 800729c:	4643      	mov	r3, r8
 800729e:	18e3      	adds	r3, r4, r3
 80072a0:	603b      	str	r3, [r7, #0]
 80072a2:	464b      	mov	r3, r9
 80072a4:	eb45 0303 	adc.w	r3, r5, r3
 80072a8:	607b      	str	r3, [r7, #4]
 80072aa:	f04f 0200 	mov.w	r2, #0
 80072ae:	f04f 0300 	mov.w	r3, #0
 80072b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072b6:	4629      	mov	r1, r5
 80072b8:	028b      	lsls	r3, r1, #10
 80072ba:	4621      	mov	r1, r4
 80072bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072c0:	4621      	mov	r1, r4
 80072c2:	028a      	lsls	r2, r1, #10
 80072c4:	4610      	mov	r0, r2
 80072c6:	4619      	mov	r1, r3
 80072c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072ca:	2200      	movs	r2, #0
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	61fa      	str	r2, [r7, #28]
 80072d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072d4:	f7f8 ff8a 	bl	80001ec <__aeabi_uldivmod>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4613      	mov	r3, r2
 80072de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80072e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x200>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	0c1b      	lsrs	r3, r3, #16
 80072e6:	f003 0303 	and.w	r3, r3, #3
 80072ea:	3301      	adds	r3, #1
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80072f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80072fa:	e002      	b.n	8007302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072fc:	4b05      	ldr	r3, [pc, #20]	@ (8007314 <HAL_RCC_GetSysClockFreq+0x204>)
 80072fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007304:	4618      	mov	r0, r3
 8007306:	3750      	adds	r7, #80	@ 0x50
 8007308:	46bd      	mov	sp, r7
 800730a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800730e:	bf00      	nop
 8007310:	40023800 	.word	0x40023800
 8007314:	00f42400 	.word	0x00f42400
 8007318:	007a1200 	.word	0x007a1200

0800731c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800731c:	b480      	push	{r7}
 800731e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007320:	4b03      	ldr	r3, [pc, #12]	@ (8007330 <HAL_RCC_GetHCLKFreq+0x14>)
 8007322:	681b      	ldr	r3, [r3, #0]
}
 8007324:	4618      	mov	r0, r3
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	20000018 	.word	0x20000018

08007334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007338:	f7ff fff0 	bl	800731c <HAL_RCC_GetHCLKFreq>
 800733c:	4602      	mov	r2, r0
 800733e:	4b05      	ldr	r3, [pc, #20]	@ (8007354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	0a9b      	lsrs	r3, r3, #10
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	4903      	ldr	r1, [pc, #12]	@ (8007358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800734a:	5ccb      	ldrb	r3, [r1, r3]
 800734c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007350:	4618      	mov	r0, r3
 8007352:	bd80      	pop	{r7, pc}
 8007354:	40023800 	.word	0x40023800
 8007358:	08009dc4 	.word	0x08009dc4

0800735c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10b      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007380:	2b00      	cmp	r3, #0
 8007382:	d105      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800738c:	2b00      	cmp	r3, #0
 800738e:	d075      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007390:	4b91      	ldr	r3, [pc, #580]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007396:	f7fd fb8d 	bl	8004ab4 <HAL_GetTick>
 800739a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800739c:	e008      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800739e:	f7fd fb89 	bl	8004ab4 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d901      	bls.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e189      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073b0:	4b8a      	ldr	r3, [pc, #552]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1f0      	bne.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d009      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	019a      	lsls	r2, r3, #6
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	071b      	lsls	r3, r3, #28
 80073d4:	4981      	ldr	r1, [pc, #516]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0302 	and.w	r3, r3, #2
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01f      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073e8:	4b7c      	ldr	r3, [pc, #496]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073ee:	0f1b      	lsrs	r3, r3, #28
 80073f0:	f003 0307 	and.w	r3, r3, #7
 80073f4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	019a      	lsls	r2, r3, #6
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	061b      	lsls	r3, r3, #24
 8007402:	431a      	orrs	r2, r3
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	071b      	lsls	r3, r3, #28
 8007408:	4974      	ldr	r1, [pc, #464]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800740a:	4313      	orrs	r3, r2
 800740c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007410:	4b72      	ldr	r3, [pc, #456]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007412:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007416:	f023 021f 	bic.w	r2, r3, #31
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	3b01      	subs	r3, #1
 8007420:	496e      	ldr	r1, [pc, #440]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007422:	4313      	orrs	r3, r2
 8007424:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00d      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	019a      	lsls	r2, r3, #6
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	061b      	lsls	r3, r3, #24
 8007440:	431a      	orrs	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	071b      	lsls	r3, r3, #28
 8007448:	4964      	ldr	r1, [pc, #400]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800744a:	4313      	orrs	r3, r2
 800744c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007450:	4b61      	ldr	r3, [pc, #388]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007452:	2201      	movs	r2, #1
 8007454:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007456:	f7fd fb2d 	bl	8004ab4 <HAL_GetTick>
 800745a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800745c:	e008      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800745e:	f7fd fb29 	bl	8004ab4 <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	2b02      	cmp	r3, #2
 800746a:	d901      	bls.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e129      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007470:	4b5a      	ldr	r3, [pc, #360]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d0f0      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0304 	and.w	r3, r3, #4
 8007484:	2b00      	cmp	r3, #0
 8007486:	d105      	bne.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007490:	2b00      	cmp	r3, #0
 8007492:	d079      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007494:	4b52      	ldr	r3, [pc, #328]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007496:	2200      	movs	r2, #0
 8007498:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800749a:	f7fd fb0b 	bl	8004ab4 <HAL_GetTick>
 800749e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074a0:	e008      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80074a2:	f7fd fb07 	bl	8004ab4 <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d901      	bls.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e107      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074b4:	4b49      	ldr	r3, [pc, #292]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074c0:	d0ef      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0304 	and.w	r3, r3, #4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d020      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80074ce:	4b43      	ldr	r3, [pc, #268]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d4:	0f1b      	lsrs	r3, r3, #28
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	019a      	lsls	r2, r3, #6
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	061b      	lsls	r3, r3, #24
 80074e8:	431a      	orrs	r2, r3
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	071b      	lsls	r3, r3, #28
 80074ee:	493b      	ldr	r1, [pc, #236]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80074f6:	4b39      	ldr	r3, [pc, #228]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074fc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a1b      	ldr	r3, [r3, #32]
 8007504:	3b01      	subs	r3, #1
 8007506:	021b      	lsls	r3, r3, #8
 8007508:	4934      	ldr	r1, [pc, #208]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800750a:	4313      	orrs	r3, r2
 800750c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0308 	and.w	r3, r3, #8
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01e      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800751c:	4b2f      	ldr	r3, [pc, #188]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800751e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007522:	0e1b      	lsrs	r3, r3, #24
 8007524:	f003 030f 	and.w	r3, r3, #15
 8007528:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	019a      	lsls	r2, r3, #6
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	061b      	lsls	r3, r3, #24
 8007534:	431a      	orrs	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	071b      	lsls	r3, r3, #28
 800753c:	4927      	ldr	r1, [pc, #156]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800753e:	4313      	orrs	r3, r2
 8007540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007544:	4b25      	ldr	r3, [pc, #148]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007546:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800754a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007552:	4922      	ldr	r1, [pc, #136]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007554:	4313      	orrs	r3, r2
 8007556:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800755a:	4b21      	ldr	r3, [pc, #132]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800755c:	2201      	movs	r2, #1
 800755e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007560:	f7fd faa8 	bl	8004ab4 <HAL_GetTick>
 8007564:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007566:	e008      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007568:	f7fd faa4 	bl	8004ab4 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	2b02      	cmp	r3, #2
 8007574:	d901      	bls.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e0a4      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800757a:	4b18      	ldr	r3, [pc, #96]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007582:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007586:	d1ef      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0320 	and.w	r3, r3, #32
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 808b 	beq.w	80076ac <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007596:	2300      	movs	r3, #0
 8007598:	60fb      	str	r3, [r7, #12]
 800759a:	4b10      	ldr	r3, [pc, #64]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800759c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800759e:	4a0f      	ldr	r2, [pc, #60]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80075a6:	4b0d      	ldr	r3, [pc, #52]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075ae:	60fb      	str	r3, [r7, #12]
 80075b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80075b2:	4b0c      	ldr	r3, [pc, #48]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a0b      	ldr	r2, [pc, #44]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80075b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80075be:	f7fd fa79 	bl	8004ab4 <HAL_GetTick>
 80075c2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80075c4:	e010      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075c6:	f7fd fa75 	bl	8004ab4 <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d909      	bls.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e075      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80075d8:	42470068 	.word	0x42470068
 80075dc:	40023800 	.word	0x40023800
 80075e0:	42470070 	.word	0x42470070
 80075e4:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80075e8:	4b38      	ldr	r3, [pc, #224]	@ (80076cc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d0e8      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80075f4:	4b36      	ldr	r3, [pc, #216]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80075f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075fc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d02f      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007608:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	429a      	cmp	r2, r3
 8007610:	d028      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007612:	4b2f      	ldr	r3, [pc, #188]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800761a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800761c:	4b2d      	ldr	r3, [pc, #180]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800761e:	2201      	movs	r2, #1
 8007620:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007622:	4b2c      	ldr	r3, [pc, #176]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007624:	2200      	movs	r2, #0
 8007626:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007628:	4a29      	ldr	r2, [pc, #164]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800762e:	4b28      	ldr	r3, [pc, #160]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	2b01      	cmp	r3, #1
 8007638:	d114      	bne.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800763a:	f7fd fa3b 	bl	8004ab4 <HAL_GetTick>
 800763e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007640:	e00a      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007642:	f7fd fa37 	bl	8004ab4 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007650:	4293      	cmp	r3, r2
 8007652:	d901      	bls.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e035      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007658:	4b1d      	ldr	r3, [pc, #116]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800765a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800765c:	f003 0302 	and.w	r3, r3, #2
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0ee      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007668:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800766c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007670:	d10d      	bne.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007672:	4b17      	ldr	r3, [pc, #92]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800767e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007686:	4912      	ldr	r1, [pc, #72]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007688:	4313      	orrs	r3, r2
 800768a:	608b      	str	r3, [r1, #8]
 800768c:	e005      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800768e:	4b10      	ldr	r3, [pc, #64]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	4a0f      	ldr	r2, [pc, #60]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007694:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007698:	6093      	str	r3, [r2, #8]
 800769a:	4b0d      	ldr	r3, [pc, #52]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800769c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076a6:	490a      	ldr	r1, [pc, #40]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0310 	and.w	r3, r3, #16
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d004      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80076be:	4b06      	ldr	r3, [pc, #24]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80076c0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3718      	adds	r7, #24
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	40007000 	.word	0x40007000
 80076d0:	40023800 	.word	0x40023800
 80076d4:	42470e40 	.word	0x42470e40
 80076d8:	424711e0 	.word	0x424711e0

080076dc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e01c      	b.n	8007728 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	795b      	ldrb	r3, [r3, #5]
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d105      	bne.n	8007704 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7fc fcf2 	bl	80040e8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2202      	movs	r2, #2
 8007708:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f042 0204 	orr.w	r2, r2, #4
 8007718:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	791b      	ldrb	r3, [r3, #4]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d101      	bne.n	800774a <HAL_RNG_GenerateRandomNumber+0x1a>
 8007746:	2302      	movs	r3, #2
 8007748:	e044      	b.n	80077d4 <HAL_RNG_GenerateRandomNumber+0xa4>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	795b      	ldrb	r3, [r3, #5]
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b01      	cmp	r3, #1
 8007758:	d133      	bne.n	80077c2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2202      	movs	r2, #2
 800775e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007760:	f7fd f9a8 	bl	8004ab4 <HAL_GetTick>
 8007764:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007766:	e018      	b.n	800779a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007768:	f7fd f9a4 	bl	8004ab4 <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	2b02      	cmp	r3, #2
 8007774:	d911      	bls.n	800779a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	2b01      	cmp	r3, #1
 8007782:	d00a      	beq.n	800779a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2202      	movs	r2, #2
 800778e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e01c      	b.n	80077d4 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d1df      	bne.n	8007768 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68da      	ldr	r2, [r3, #12]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	715a      	strb	r2, [r3, #5]
 80077c0:	e004      	b.n	80077cc <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2204      	movs	r2, #4
 80077c6:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	711a      	strb	r2, [r3, #4]

  return status;
 80077d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e07b      	b.n	80078e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d108      	bne.n	8007808 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077fe:	d009      	beq.n	8007814 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	61da      	str	r2, [r3, #28]
 8007806:	e005      	b.n	8007814 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7fc fc7c 	bl	800412c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800784a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800785c:	431a      	orrs	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007866:	431a      	orrs	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	f003 0302 	and.w	r3, r3, #2
 8007870:	431a      	orrs	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	431a      	orrs	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007884:	431a      	orrs	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a1b      	ldr	r3, [r3, #32]
 8007894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007898:	ea42 0103 	orr.w	r1, r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	0c1b      	lsrs	r3, r3, #16
 80078b2:	f003 0104 	and.w	r1, r3, #4
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ba:	f003 0210 	and.w	r2, r3, #16
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	69da      	ldr	r2, [r3, #28]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b082      	sub	sp, #8
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e01a      	b.n	8007936 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007916:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7fc fc4f 	bl	80041bc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b088      	sub	sp, #32
 8007942:	af00      	add	r7, sp, #0
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	60b9      	str	r1, [r7, #8]
 8007948:	603b      	str	r3, [r7, #0]
 800794a:	4613      	mov	r3, r2
 800794c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800794e:	f7fd f8b1 	bl	8004ab4 <HAL_GetTick>
 8007952:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007954:	88fb      	ldrh	r3, [r7, #6]
 8007956:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800795e:	b2db      	uxtb	r3, r3
 8007960:	2b01      	cmp	r3, #1
 8007962:	d001      	beq.n	8007968 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007964:	2302      	movs	r3, #2
 8007966:	e12a      	b.n	8007bbe <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d002      	beq.n	8007974 <HAL_SPI_Transmit+0x36>
 800796e:	88fb      	ldrh	r3, [r7, #6]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e122      	b.n	8007bbe <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800797e:	2b01      	cmp	r3, #1
 8007980:	d101      	bne.n	8007986 <HAL_SPI_Transmit+0x48>
 8007982:	2302      	movs	r3, #2
 8007984:	e11b      	b.n	8007bbe <HAL_SPI_Transmit+0x280>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2203      	movs	r2, #3
 8007992:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	88fa      	ldrh	r2, [r7, #6]
 80079a6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	88fa      	ldrh	r2, [r7, #6]
 80079ac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079d4:	d10f      	bne.n	80079f6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a00:	2b40      	cmp	r3, #64	@ 0x40
 8007a02:	d007      	beq.n	8007a14 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a1c:	d152      	bne.n	8007ac4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d002      	beq.n	8007a2c <HAL_SPI_Transmit+0xee>
 8007a26:	8b7b      	ldrh	r3, [r7, #26]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d145      	bne.n	8007ab8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a30:	881a      	ldrh	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a3c:	1c9a      	adds	r2, r3, #2
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a50:	e032      	b.n	8007ab8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f003 0302 	and.w	r3, r3, #2
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d112      	bne.n	8007a86 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a64:	881a      	ldrh	r2, [r3, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a70:	1c9a      	adds	r2, r3, #2
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007a84:	e018      	b.n	8007ab8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a86:	f7fd f815 	bl	8004ab4 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d803      	bhi.n	8007a9e <HAL_SPI_Transmit+0x160>
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9c:	d102      	bne.n	8007aa4 <HAL_SPI_Transmit+0x166>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d109      	bne.n	8007ab8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e082      	b.n	8007bbe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1c7      	bne.n	8007a52 <HAL_SPI_Transmit+0x114>
 8007ac2:	e053      	b.n	8007b6c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d002      	beq.n	8007ad2 <HAL_SPI_Transmit+0x194>
 8007acc:	8b7b      	ldrh	r3, [r7, #26]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d147      	bne.n	8007b62 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	330c      	adds	r3, #12
 8007adc:	7812      	ldrb	r2, [r2, #0]
 8007ade:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae4:	1c5a      	adds	r2, r3, #1
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	3b01      	subs	r3, #1
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007af8:	e033      	b.n	8007b62 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d113      	bne.n	8007b30 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	330c      	adds	r3, #12
 8007b12:	7812      	ldrb	r2, [r2, #0]
 8007b14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	3b01      	subs	r3, #1
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007b2e:	e018      	b.n	8007b62 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b30:	f7fc ffc0 	bl	8004ab4 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d803      	bhi.n	8007b48 <HAL_SPI_Transmit+0x20a>
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b46:	d102      	bne.n	8007b4e <HAL_SPI_Transmit+0x210>
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d109      	bne.n	8007b62 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e02d      	b.n	8007bbe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1c6      	bne.n	8007afa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b6c:	69fa      	ldr	r2, [r7, #28]
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f000 f8bf 	bl	8007cf4 <SPI_EndRxTxTransaction>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2220      	movs	r2, #32
 8007b80:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10a      	bne.n	8007ba0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	617b      	str	r3, [r7, #20]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	617b      	str	r3, [r7, #20]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	617b      	str	r3, [r7, #20]
 8007b9e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e000      	b.n	8007bbe <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
  }
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3720      	adds	r7, #32
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b083      	sub	sp, #12
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007bd4:	b2db      	uxtb	r3, r3
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
	...

08007be4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b088      	sub	sp, #32
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	603b      	str	r3, [r7, #0]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007bf4:	f7fc ff5e 	bl	8004ab4 <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bfc:	1a9b      	subs	r3, r3, r2
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	4413      	add	r3, r2
 8007c02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c04:	f7fc ff56 	bl	8004ab4 <HAL_GetTick>
 8007c08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c0a:	4b39      	ldr	r3, [pc, #228]	@ (8007cf0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	015b      	lsls	r3, r3, #5
 8007c10:	0d1b      	lsrs	r3, r3, #20
 8007c12:	69fa      	ldr	r2, [r7, #28]
 8007c14:	fb02 f303 	mul.w	r3, r2, r3
 8007c18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c1a:	e054      	b.n	8007cc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c22:	d050      	beq.n	8007cc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c24:	f7fc ff46 	bl	8004ab4 <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	69fa      	ldr	r2, [r7, #28]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d902      	bls.n	8007c3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d13d      	bne.n	8007cb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c52:	d111      	bne.n	8007c78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c5c:	d004      	beq.n	8007c68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c66:	d107      	bne.n	8007c78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c80:	d10f      	bne.n	8007ca2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c90:	601a      	str	r2, [r3, #0]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ca0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e017      	b.n	8007ce6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	689a      	ldr	r2, [r3, #8]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	4013      	ands	r3, r2
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	bf0c      	ite	eq
 8007cd6:	2301      	moveq	r3, #1
 8007cd8:	2300      	movne	r3, #0
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	461a      	mov	r2, r3
 8007cde:	79fb      	ldrb	r3, [r7, #7]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d19b      	bne.n	8007c1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3720      	adds	r7, #32
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	20000018 	.word	0x20000018

08007cf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b088      	sub	sp, #32
 8007cf8:	af02      	add	r7, sp, #8
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2201      	movs	r2, #1
 8007d08:	2102      	movs	r1, #2
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f7ff ff6a 	bl	8007be4 <SPI_WaitFlagStateUntilTimeout>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d007      	beq.n	8007d26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d1a:	f043 0220 	orr.w	r2, r3, #32
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e032      	b.n	8007d8c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d26:	4b1b      	ldr	r3, [pc, #108]	@ (8007d94 <SPI_EndRxTxTransaction+0xa0>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8007d98 <SPI_EndRxTxTransaction+0xa4>)
 8007d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d30:	0d5b      	lsrs	r3, r3, #21
 8007d32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007d36:	fb02 f303 	mul.w	r3, r2, r3
 8007d3a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d44:	d112      	bne.n	8007d6c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	2180      	movs	r1, #128	@ 0x80
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f7ff ff47 	bl	8007be4 <SPI_WaitFlagStateUntilTimeout>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d016      	beq.n	8007d8a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d60:	f043 0220 	orr.w	r2, r3, #32
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e00f      	b.n	8007d8c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	3b01      	subs	r3, #1
 8007d76:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d82:	2b80      	cmp	r3, #128	@ 0x80
 8007d84:	d0f2      	beq.n	8007d6c <SPI_EndRxTxTransaction+0x78>
 8007d86:	e000      	b.n	8007d8a <SPI_EndRxTxTransaction+0x96>
        break;
 8007d88:	bf00      	nop
  }

  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	20000018 	.word	0x20000018
 8007d98:	165e9f81 	.word	0x165e9f81

08007d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e041      	b.n	8007e32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d106      	bne.n	8007dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7fc fa18 	bl	80041f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4610      	mov	r0, r2
 8007ddc:	f000 f89e 	bl	8007f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
	...

08007e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d001      	beq.n	8007e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e04e      	b.n	8007ef2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68da      	ldr	r2, [r3, #12]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f042 0201 	orr.w	r2, r2, #1
 8007e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a23      	ldr	r2, [pc, #140]	@ (8007f00 <HAL_TIM_Base_Start_IT+0xc4>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d022      	beq.n	8007ebc <HAL_TIM_Base_Start_IT+0x80>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e7e:	d01d      	beq.n	8007ebc <HAL_TIM_Base_Start_IT+0x80>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a1f      	ldr	r2, [pc, #124]	@ (8007f04 <HAL_TIM_Base_Start_IT+0xc8>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d018      	beq.n	8007ebc <HAL_TIM_Base_Start_IT+0x80>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8007f08 <HAL_TIM_Base_Start_IT+0xcc>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d013      	beq.n	8007ebc <HAL_TIM_Base_Start_IT+0x80>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a1c      	ldr	r2, [pc, #112]	@ (8007f0c <HAL_TIM_Base_Start_IT+0xd0>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d00e      	beq.n	8007ebc <HAL_TIM_Base_Start_IT+0x80>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8007f10 <HAL_TIM_Base_Start_IT+0xd4>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d009      	beq.n	8007ebc <HAL_TIM_Base_Start_IT+0x80>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a19      	ldr	r2, [pc, #100]	@ (8007f14 <HAL_TIM_Base_Start_IT+0xd8>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d004      	beq.n	8007ebc <HAL_TIM_Base_Start_IT+0x80>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a18      	ldr	r2, [pc, #96]	@ (8007f18 <HAL_TIM_Base_Start_IT+0xdc>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d111      	bne.n	8007ee0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f003 0307 	and.w	r3, r3, #7
 8007ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b06      	cmp	r3, #6
 8007ecc:	d010      	beq.n	8007ef0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f042 0201 	orr.w	r2, r2, #1
 8007edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ede:	e007      	b.n	8007ef0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f042 0201 	orr.w	r2, r2, #1
 8007eee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	40010000 	.word	0x40010000
 8007f04:	40000400 	.word	0x40000400
 8007f08:	40000800 	.word	0x40000800
 8007f0c:	40000c00 	.word	0x40000c00
 8007f10:	40010400 	.word	0x40010400
 8007f14:	40014000 	.word	0x40014000
 8007f18:	40001800 	.word	0x40001800

08007f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a46      	ldr	r2, [pc, #280]	@ (8008048 <TIM_Base_SetConfig+0x12c>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d013      	beq.n	8007f5c <TIM_Base_SetConfig+0x40>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f3a:	d00f      	beq.n	8007f5c <TIM_Base_SetConfig+0x40>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a43      	ldr	r2, [pc, #268]	@ (800804c <TIM_Base_SetConfig+0x130>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d00b      	beq.n	8007f5c <TIM_Base_SetConfig+0x40>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a42      	ldr	r2, [pc, #264]	@ (8008050 <TIM_Base_SetConfig+0x134>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d007      	beq.n	8007f5c <TIM_Base_SetConfig+0x40>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a41      	ldr	r2, [pc, #260]	@ (8008054 <TIM_Base_SetConfig+0x138>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d003      	beq.n	8007f5c <TIM_Base_SetConfig+0x40>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a40      	ldr	r2, [pc, #256]	@ (8008058 <TIM_Base_SetConfig+0x13c>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d108      	bne.n	8007f6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a35      	ldr	r2, [pc, #212]	@ (8008048 <TIM_Base_SetConfig+0x12c>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d02b      	beq.n	8007fce <TIM_Base_SetConfig+0xb2>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f7c:	d027      	beq.n	8007fce <TIM_Base_SetConfig+0xb2>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a32      	ldr	r2, [pc, #200]	@ (800804c <TIM_Base_SetConfig+0x130>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d023      	beq.n	8007fce <TIM_Base_SetConfig+0xb2>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a31      	ldr	r2, [pc, #196]	@ (8008050 <TIM_Base_SetConfig+0x134>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d01f      	beq.n	8007fce <TIM_Base_SetConfig+0xb2>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a30      	ldr	r2, [pc, #192]	@ (8008054 <TIM_Base_SetConfig+0x138>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d01b      	beq.n	8007fce <TIM_Base_SetConfig+0xb2>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a2f      	ldr	r2, [pc, #188]	@ (8008058 <TIM_Base_SetConfig+0x13c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d017      	beq.n	8007fce <TIM_Base_SetConfig+0xb2>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a2e      	ldr	r2, [pc, #184]	@ (800805c <TIM_Base_SetConfig+0x140>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d013      	beq.n	8007fce <TIM_Base_SetConfig+0xb2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a2d      	ldr	r2, [pc, #180]	@ (8008060 <TIM_Base_SetConfig+0x144>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d00f      	beq.n	8007fce <TIM_Base_SetConfig+0xb2>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a2c      	ldr	r2, [pc, #176]	@ (8008064 <TIM_Base_SetConfig+0x148>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d00b      	beq.n	8007fce <TIM_Base_SetConfig+0xb2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8008068 <TIM_Base_SetConfig+0x14c>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d007      	beq.n	8007fce <TIM_Base_SetConfig+0xb2>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a2a      	ldr	r2, [pc, #168]	@ (800806c <TIM_Base_SetConfig+0x150>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d003      	beq.n	8007fce <TIM_Base_SetConfig+0xb2>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a29      	ldr	r2, [pc, #164]	@ (8008070 <TIM_Base_SetConfig+0x154>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d108      	bne.n	8007fe0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	689a      	ldr	r2, [r3, #8]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a10      	ldr	r2, [pc, #64]	@ (8008048 <TIM_Base_SetConfig+0x12c>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d003      	beq.n	8008014 <TIM_Base_SetConfig+0xf8>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a12      	ldr	r2, [pc, #72]	@ (8008058 <TIM_Base_SetConfig+0x13c>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d103      	bne.n	800801c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	691a      	ldr	r2, [r3, #16]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b01      	cmp	r3, #1
 800802c:	d105      	bne.n	800803a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	f023 0201 	bic.w	r2, r3, #1
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	611a      	str	r2, [r3, #16]
  }
}
 800803a:	bf00      	nop
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	40010000 	.word	0x40010000
 800804c:	40000400 	.word	0x40000400
 8008050:	40000800 	.word	0x40000800
 8008054:	40000c00 	.word	0x40000c00
 8008058:	40010400 	.word	0x40010400
 800805c:	40014000 	.word	0x40014000
 8008060:	40014400 	.word	0x40014400
 8008064:	40014800 	.word	0x40014800
 8008068:	40001800 	.word	0x40001800
 800806c:	40001c00 	.word	0x40001c00
 8008070:	40002000 	.word	0x40002000

08008074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008084:	2b01      	cmp	r3, #1
 8008086:	d101      	bne.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008088:	2302      	movs	r3, #2
 800808a:	e05a      	b.n	8008142 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2202      	movs	r2, #2
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a21      	ldr	r2, [pc, #132]	@ (8008150 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d022      	beq.n	8008116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080d8:	d01d      	beq.n	8008116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a1d      	ldr	r2, [pc, #116]	@ (8008154 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d018      	beq.n	8008116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a1b      	ldr	r2, [pc, #108]	@ (8008158 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d013      	beq.n	8008116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a1a      	ldr	r2, [pc, #104]	@ (800815c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d00e      	beq.n	8008116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a18      	ldr	r2, [pc, #96]	@ (8008160 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d009      	beq.n	8008116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a17      	ldr	r2, [pc, #92]	@ (8008164 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d004      	beq.n	8008116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a15      	ldr	r2, [pc, #84]	@ (8008168 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d10c      	bne.n	8008130 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800811c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	4313      	orrs	r3, r2
 8008126:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	40010000 	.word	0x40010000
 8008154:	40000400 	.word	0x40000400
 8008158:	40000800 	.word	0x40000800
 800815c:	40000c00 	.word	0x40000c00
 8008160:	40010400 	.word	0x40010400
 8008164:	40014000 	.word	0x40014000
 8008168:	40001800 	.word	0x40001800

0800816c <memset>:
 800816c:	4402      	add	r2, r0
 800816e:	4603      	mov	r3, r0
 8008170:	4293      	cmp	r3, r2
 8008172:	d100      	bne.n	8008176 <memset+0xa>
 8008174:	4770      	bx	lr
 8008176:	f803 1b01 	strb.w	r1, [r3], #1
 800817a:	e7f9      	b.n	8008170 <memset+0x4>

0800817c <__libc_init_array>:
 800817c:	b570      	push	{r4, r5, r6, lr}
 800817e:	4d0d      	ldr	r5, [pc, #52]	@ (80081b4 <__libc_init_array+0x38>)
 8008180:	4c0d      	ldr	r4, [pc, #52]	@ (80081b8 <__libc_init_array+0x3c>)
 8008182:	1b64      	subs	r4, r4, r5
 8008184:	10a4      	asrs	r4, r4, #2
 8008186:	2600      	movs	r6, #0
 8008188:	42a6      	cmp	r6, r4
 800818a:	d109      	bne.n	80081a0 <__libc_init_array+0x24>
 800818c:	4d0b      	ldr	r5, [pc, #44]	@ (80081bc <__libc_init_array+0x40>)
 800818e:	4c0c      	ldr	r4, [pc, #48]	@ (80081c0 <__libc_init_array+0x44>)
 8008190:	f000 f826 	bl	80081e0 <_init>
 8008194:	1b64      	subs	r4, r4, r5
 8008196:	10a4      	asrs	r4, r4, #2
 8008198:	2600      	movs	r6, #0
 800819a:	42a6      	cmp	r6, r4
 800819c:	d105      	bne.n	80081aa <__libc_init_array+0x2e>
 800819e:	bd70      	pop	{r4, r5, r6, pc}
 80081a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80081a4:	4798      	blx	r3
 80081a6:	3601      	adds	r6, #1
 80081a8:	e7ee      	b.n	8008188 <__libc_init_array+0xc>
 80081aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ae:	4798      	blx	r3
 80081b0:	3601      	adds	r6, #1
 80081b2:	e7f2      	b.n	800819a <__libc_init_array+0x1e>
 80081b4:	08009dd4 	.word	0x08009dd4
 80081b8:	08009dd4 	.word	0x08009dd4
 80081bc:	08009dd4 	.word	0x08009dd4
 80081c0:	08009dd8 	.word	0x08009dd8

080081c4 <memcpy>:
 80081c4:	440a      	add	r2, r1
 80081c6:	4291      	cmp	r1, r2
 80081c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80081cc:	d100      	bne.n	80081d0 <memcpy+0xc>
 80081ce:	4770      	bx	lr
 80081d0:	b510      	push	{r4, lr}
 80081d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081da:	4291      	cmp	r1, r2
 80081dc:	d1f9      	bne.n	80081d2 <memcpy+0xe>
 80081de:	bd10      	pop	{r4, pc}

080081e0 <_init>:
 80081e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e2:	bf00      	nop
 80081e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e6:	bc08      	pop	{r3}
 80081e8:	469e      	mov	lr, r3
 80081ea:	4770      	bx	lr

080081ec <_fini>:
 80081ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ee:	bf00      	nop
 80081f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f2:	bc08      	pop	{r3}
 80081f4:	469e      	mov	lr, r3
 80081f6:	4770      	bx	lr
