
DAllenFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f2c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012c8  080060d8  080060d8  000070d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073a0  080073a0  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  080073a0  080073a0  000083a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073a8  080073a8  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073a8  080073a8  000083a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073ac  080073ac  000083ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080073b0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000901c  2**0
                  CONTENTS
 10 .bss          00025dec  2000001c  2000001c  0000901c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025e08  20025e08  0000901c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f6a  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fba  00000000  00000000  0001bfb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001388  00000000  00000000  0001ef70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f17  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026f50  00000000  00000000  0002120f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c75  00000000  00000000  0004815f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e294c  00000000  00000000  00060dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00143720  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005248  00000000  00000000  00143764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001489ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080060c0 	.word	0x080060c0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	080060c0 	.word	0x080060c0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f003 f897 	bl	8003612 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f001 fcd4 	bl	8001e90 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f001 fc91 	bl	8001e10 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f001 fd97 	bl	8002024 <LCD_Clear>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}

080004fa <Application_game_inst>:
{
	//visualDemo();
}

void Application_game_inst(void)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	af00      	add	r7, sp, #0
	game_init();
 80004fe:	f001 fe69 	bl	80021d4 <game_init>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}

08000506 <map_draw>:
#include "BlockDriver.h"

static RNG_HandleTypeDef *hrng;

void map_draw()
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b088      	sub	sp, #32
 800050a:	af00      	add	r7, sp, #0
	//uint16_t y_len = LCD_PIXEL_HEIGHT;
	uint16_t x_len = LCD_PIXEL_WIDTH;
 800050c:	23f0      	movs	r3, #240	@ 0xf0
 800050e:	80fb      	strh	r3, [r7, #6]
	//edges of 5 pixels in width
	//lines at 0-5, 26, 47, 68, 89, 110, 131, 152, 173, 194, 215, 236-240
	uint16_t x = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	80bb      	strh	r3, [r7, #4]
	//uint16_t y = 0;
	//VERTICAL
	for(int i = 1; i<LCD_PIXEL_WIDTH; i+=BLOCK_WIDTH)
 8000514:	2301      	movs	r3, #1
 8000516:	61fb      	str	r3, [r7, #28]
 8000518:	e00d      	b.n	8000536 <map_draw+0x30>
	{
		LCD_Draw_Vertical_Line(EDGE_WIDTH+i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 800051a:	69fb      	ldr	r3, [r7, #28]
 800051c:	b29b      	uxth	r3, r3
 800051e:	3304      	adds	r3, #4
 8000520:	b298      	uxth	r0, r3
 8000522:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000526:	f240 1235 	movw	r2, #309	@ 0x135
 800052a:	210b      	movs	r1, #11
 800052c:	f001 fd2c 	bl	8001f88 <LCD_Draw_Vertical_Line>
	for(int i = 1; i<LCD_PIXEL_WIDTH; i+=BLOCK_WIDTH)
 8000530:	69fb      	ldr	r3, [r7, #28]
 8000532:	3317      	adds	r3, #23
 8000534:	61fb      	str	r3, [r7, #28]
 8000536:	69fb      	ldr	r3, [r7, #28]
 8000538:	2bef      	cmp	r3, #239	@ 0xef
 800053a:	ddee      	ble.n	800051a <map_draw+0x14>
	}
	for(int i = 1; i<=EDGE_WIDTH; i++)
 800053c:	2301      	movs	r3, #1
 800053e:	61bb      	str	r3, [r7, #24]
 8000540:	e00b      	b.n	800055a <map_draw+0x54>
	{
		LCD_Draw_Vertical_Line(i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 8000542:	69bb      	ldr	r3, [r7, #24]
 8000544:	b298      	uxth	r0, r3
 8000546:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800054a:	f240 1235 	movw	r2, #309	@ 0x135
 800054e:	210b      	movs	r1, #11
 8000550:	f001 fd1a 	bl	8001f88 <LCD_Draw_Vertical_Line>
	for(int i = 1; i<=EDGE_WIDTH; i++)
 8000554:	69bb      	ldr	r3, [r7, #24]
 8000556:	3301      	adds	r3, #1
 8000558:	61bb      	str	r3, [r7, #24]
 800055a:	69bb      	ldr	r3, [r7, #24]
 800055c:	2b04      	cmp	r3, #4
 800055e:	ddf0      	ble.n	8000542 <map_draw+0x3c>
	}
	for(int i = LCD_PIXEL_WIDTH-EDGE_WIDTH; i<=LCD_PIXEL_WIDTH; i++)
 8000560:	23ec      	movs	r3, #236	@ 0xec
 8000562:	617b      	str	r3, [r7, #20]
 8000564:	e00b      	b.n	800057e <map_draw+0x78>
	{
		LCD_Draw_Vertical_Line(i, MAP_DIFFERENCE, MAP_HEIGHT, LCD_COLOR_WHITE);
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	b298      	uxth	r0, r3
 800056a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800056e:	f240 1235 	movw	r2, #309	@ 0x135
 8000572:	210b      	movs	r1, #11
 8000574:	f001 fd08 	bl	8001f88 <LCD_Draw_Vertical_Line>
	for(int i = LCD_PIXEL_WIDTH-EDGE_WIDTH; i<=LCD_PIXEL_WIDTH; i++)
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	3301      	adds	r3, #1
 800057c:	617b      	str	r3, [r7, #20]
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	2bf0      	cmp	r3, #240	@ 0xf0
 8000582:	ddf0      	ble.n	8000566 <map_draw+0x60>
	}

	//HORIZONTAL
	for(int i = 1; i<MAP_HEIGHT; i+=BLOCK_WIDTH)
 8000584:	2301      	movs	r3, #1
 8000586:	613b      	str	r3, [r7, #16]
 8000588:	e00c      	b.n	80005a4 <map_draw+0x9e>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+EDGE_WIDTH+i, x_len, LCD_COLOR_WHITE);
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	b29b      	uxth	r3, r3
 800058e:	330f      	adds	r3, #15
 8000590:	b299      	uxth	r1, r3
 8000592:	88fa      	ldrh	r2, [r7, #6]
 8000594:	88b8      	ldrh	r0, [r7, #4]
 8000596:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800059a:	f001 fd1c 	bl	8001fd6 <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<MAP_HEIGHT; i+=BLOCK_WIDTH)
 800059e:	693b      	ldr	r3, [r7, #16]
 80005a0:	3317      	adds	r3, #23
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80005aa:	ddee      	ble.n	800058a <map_draw+0x84>
	}
	for(int i = 0; i<=EDGE_WIDTH; i++)
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	e00c      	b.n	80005cc <map_draw+0xc6>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+i, x_len, LCD_COLOR_WHITE);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	330b      	adds	r3, #11
 80005b8:	b299      	uxth	r1, r3
 80005ba:	88fa      	ldrh	r2, [r7, #6]
 80005bc:	88b8      	ldrh	r0, [r7, #4]
 80005be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005c2:	f001 fd08 	bl	8001fd6 <LCD_Draw_Horizontal_Line>
	for(int i = 0; i<=EDGE_WIDTH; i++)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	3301      	adds	r3, #1
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	2b04      	cmp	r3, #4
 80005d0:	ddef      	ble.n	80005b2 <map_draw+0xac>
	}
	for(int i = MAP_HEIGHT-EDGE_WIDTH; i<=MAP_HEIGHT; i++)
 80005d2:	f240 1331 	movw	r3, #305	@ 0x131
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	e00c      	b.n	80005f4 <map_draw+0xee>
	{
		LCD_Draw_Horizontal_Line(x, MAP_DIFFERENCE+i, x_len, LCD_COLOR_WHITE);
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	b29b      	uxth	r3, r3
 80005de:	330b      	adds	r3, #11
 80005e0:	b299      	uxth	r1, r3
 80005e2:	88fa      	ldrh	r2, [r7, #6]
 80005e4:	88b8      	ldrh	r0, [r7, #4]
 80005e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005ea:	f001 fcf4 	bl	8001fd6 <LCD_Draw_Horizontal_Line>
	for(int i = MAP_HEIGHT-EDGE_WIDTH; i<=MAP_HEIGHT; i++)
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	3301      	adds	r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 80005fa:	dbee      	blt.n	80005da <map_draw+0xd4>
	}
}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <start_screen>:

void start_screen()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
	//uint16_t play_x = 68; //to 172
	uint16_t play_y = 106; //to 184
 800060e:	236a      	movs	r3, #106	@ 0x6a
 8000610:	80fb      	strh	r3, [r7, #6]
	//uint16_t button_height = 48;
	uint16_t button_width = 120;
 8000612:	2378      	movs	r3, #120	@ 0x78
 8000614:	80bb      	strh	r3, [r7, #4]

	for(int i = 1; i<button_width/2; i++)
 8000616:	2301      	movs	r3, #1
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	e014      	b.n	8000646 <start_screen+0x3e>
	{
		LCD_Draw_Horizontal_Line(120-i, play_y+i, 2*i, LCD_COLOR_WHITE);
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	b29b      	uxth	r3, r3
 8000620:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 8000624:	b298      	uxth	r0, r3
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	b29a      	uxth	r2, r3
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	4413      	add	r3, r2
 800062e:	b299      	uxth	r1, r3
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	b29b      	uxth	r3, r3
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	b29a      	uxth	r2, r3
 8000638:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800063c:	f001 fccb 	bl	8001fd6 <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<button_width/2; i++)
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	3301      	adds	r3, #1
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	88bb      	ldrh	r3, [r7, #4]
 8000648:	085b      	lsrs	r3, r3, #1
 800064a:	b29b      	uxth	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	4293      	cmp	r3, r2
 8000652:	dbe3      	blt.n	800061c <start_screen+0x14>
	}
	for(int i = button_width/2; i>0; i--)
 8000654:	88bb      	ldrh	r3, [r7, #4]
 8000656:	085b      	lsrs	r3, r3, #1
 8000658:	b29b      	uxth	r3, r3
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	e020      	b.n	80006a0 <start_screen+0x98>
	{
		LCD_Draw_Horizontal_Line(i+button_width/2, play_y + i + (button_width/2) - 1, button_width-(2*i), LCD_COLOR_WHITE);
 800065e:	88bb      	ldrh	r3, [r7, #4]
 8000660:	085b      	lsrs	r3, r3, #1
 8000662:	b29a      	uxth	r2, r3
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	b29b      	uxth	r3, r3
 8000668:	4413      	add	r3, r2
 800066a:	b298      	uxth	r0, r3
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	b29a      	uxth	r2, r3
 8000670:	88fb      	ldrh	r3, [r7, #6]
 8000672:	4413      	add	r3, r2
 8000674:	b29a      	uxth	r2, r3
 8000676:	88bb      	ldrh	r3, [r7, #4]
 8000678:	085b      	lsrs	r3, r3, #1
 800067a:	b29b      	uxth	r3, r3
 800067c:	4413      	add	r3, r2
 800067e:	b29b      	uxth	r3, r3
 8000680:	3b01      	subs	r3, #1
 8000682:	b299      	uxth	r1, r3
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	b29b      	uxth	r3, r3
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	b29b      	uxth	r3, r3
 800068c:	88ba      	ldrh	r2, [r7, #4]
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	b29a      	uxth	r2, r3
 8000692:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000696:	f001 fc9e 	bl	8001fd6 <LCD_Draw_Horizontal_Line>
	for(int i = button_width/2; i>0; i--)
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	3b01      	subs	r3, #1
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	dcdb      	bgt.n	800065e <start_screen+0x56>
	}
	for(int i = 1; i<button_width/2 -2; i++)
 80006a6:	2301      	movs	r3, #1
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e015      	b.n	80006d8 <start_screen+0xd0>
	{
		LCD_Draw_Horizontal_Line(120-i, play_y+i +2 , 2*i, LCD_COLOR_BLACK);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 80006b4:	b298      	uxth	r0, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	4413      	add	r3, r2
 80006be:	b29b      	uxth	r3, r3
 80006c0:	3302      	adds	r3, #2
 80006c2:	b299      	uxth	r1, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	2300      	movs	r3, #0
 80006ce:	f001 fc82 	bl	8001fd6 <LCD_Draw_Horizontal_Line>
	for(int i = 1; i<button_width/2 -2; i++)
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	88bb      	ldrh	r3, [r7, #4]
 80006da:	085b      	lsrs	r3, r3, #1
 80006dc:	b29b      	uxth	r3, r3
 80006de:	3b02      	subs	r3, #2
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	dbe2      	blt.n	80006ac <start_screen+0xa4>
	}
	for(int i = button_width/2 -2; i>0; i--)
 80006e6:	88bb      	ldrh	r3, [r7, #4]
 80006e8:	085b      	lsrs	r3, r3, #1
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	3b02      	subs	r3, #2
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	e023      	b.n	800073a <start_screen+0x132>
	{
		LCD_Draw_Horizontal_Line(i+button_width/2+1, play_y + i + (button_width/2) - 2, button_width-(2*i)-2, LCD_COLOR_BLACK);
 80006f2:	88bb      	ldrh	r3, [r7, #4]
 80006f4:	085b      	lsrs	r3, r3, #1
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	4413      	add	r3, r2
 80006fe:	b29b      	uxth	r3, r3
 8000700:	3301      	adds	r3, #1
 8000702:	b298      	uxth	r0, r3
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	b29a      	uxth	r2, r3
 8000708:	88fb      	ldrh	r3, [r7, #6]
 800070a:	4413      	add	r3, r2
 800070c:	b29a      	uxth	r2, r3
 800070e:	88bb      	ldrh	r3, [r7, #4]
 8000710:	085b      	lsrs	r3, r3, #1
 8000712:	b29b      	uxth	r3, r3
 8000714:	4413      	add	r3, r2
 8000716:	b29b      	uxth	r3, r3
 8000718:	3b02      	subs	r3, #2
 800071a:	b299      	uxth	r1, r3
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	b29b      	uxth	r3, r3
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	b29b      	uxth	r3, r3
 8000724:	88ba      	ldrh	r2, [r7, #4]
 8000726:	1ad3      	subs	r3, r2, r3
 8000728:	b29b      	uxth	r3, r3
 800072a:	3b02      	subs	r3, #2
 800072c:	b29a      	uxth	r2, r3
 800072e:	2300      	movs	r3, #0
 8000730:	f001 fc51 	bl	8001fd6 <LCD_Draw_Horizontal_Line>
	for(int i = button_width/2 -2; i>0; i--)
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	3b01      	subs	r3, #1
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	2b00      	cmp	r3, #0
 800073e:	dcd8      	bgt.n	80006f2 <start_screen+0xea>
	}

	LCD_SetFont(&Font16x24);
 8000740:	4815      	ldr	r0, [pc, #84]	@ (8000798 <start_screen+0x190>)
 8000742:	f001 fca1 	bl	8002088 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_RED);
 8000746:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800074a:	f001 fc8d 	bl	8002068 <LCD_SetTextColor>
	LCD_DisplayChar(76, 154, 0x50); //0x4c 0x41 0x59
 800074e:	2250      	movs	r2, #80	@ 0x50
 8000750:	219a      	movs	r1, #154	@ 0x9a
 8000752:	204c      	movs	r0, #76	@ 0x4c
 8000754:	f001 fd16 	bl	8002184 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000758:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 800075c:	f001 fc84 	bl	8002068 <LCD_SetTextColor>
	LCD_DisplayChar(100, 154, 0x4c); //0x4c 0x41 0x59
 8000760:	224c      	movs	r2, #76	@ 0x4c
 8000762:	219a      	movs	r1, #154	@ 0x9a
 8000764:	2064      	movs	r0, #100	@ 0x64
 8000766:	f001 fd0d 	bl	8002184 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_BLUE2);
 800076a:	f240 501f 	movw	r0, #1311	@ 0x51f
 800076e:	f001 fc7b 	bl	8002068 <LCD_SetTextColor>
	LCD_DisplayChar(124, 154, 0x41); //0x4c 0x41 0x59
 8000772:	2241      	movs	r2, #65	@ 0x41
 8000774:	219a      	movs	r1, #154	@ 0x9a
 8000776:	207c      	movs	r0, #124	@ 0x7c
 8000778:	f001 fd04 	bl	8002184 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_GREEN);
 800077c:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000780:	f001 fc72 	bl	8002068 <LCD_SetTextColor>
	LCD_DisplayChar(148, 154, 0x59); //0x4c 0x41 0x59
 8000784:	2259      	movs	r2, #89	@ 0x59
 8000786:	219a      	movs	r1, #154	@ 0x9a
 8000788:	2094      	movs	r0, #148	@ 0x94
 800078a:	f001 fcfb 	bl	8002184 <LCD_DisplayChar>
}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000004 	.word	0x20000004

0800079c <block_drop>:
		APPLICATION_ASSERT(1);
	}
}

void block_drop(block_t *block, map_t *map)
{
 800079c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007a0:	b09a      	sub	sp, #104	@ 0x68
 80007a2:	af0a      	add	r7, sp, #40	@ 0x28
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	6039      	str	r1, [r7, #0]
	//when timer reaches ARR and enters IRQ handler, call this function
	//erase current and draw new tetromino

	if(!rest(block, map))
 80007a8:	6839      	ldr	r1, [r7, #0]
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f000 fc79 	bl	80010a2 <rest>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 808c 	bne.w	80008d0 <block_drop+0x134>
	{
		clear_tetromino(*block);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4692      	mov	sl, r2
 80007be:	685a      	ldr	r2, [r3, #4]
 80007c0:	4691      	mov	r9, r2
 80007c2:	689a      	ldr	r2, [r3, #8]
 80007c4:	4690      	mov	r8, r2
 80007c6:	68da      	ldr	r2, [r3, #12]
 80007c8:	4696      	mov	lr, r2
 80007ca:	f103 0410 	add.w	r4, r3, #16
 80007ce:	466e      	mov	r6, sp
 80007d0:	f104 0c20 	add.w	ip, r4, #32
 80007d4:	4635      	mov	r5, r6
 80007d6:	4623      	mov	r3, r4
 80007d8:	6818      	ldr	r0, [r3, #0]
 80007da:	6859      	ldr	r1, [r3, #4]
 80007dc:	689a      	ldr	r2, [r3, #8]
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007e2:	3410      	adds	r4, #16
 80007e4:	3610      	adds	r6, #16
 80007e6:	4564      	cmp	r4, ip
 80007e8:	d1f4      	bne.n	80007d4 <block_drop+0x38>
 80007ea:	4633      	mov	r3, r6
 80007ec:	4622      	mov	r2, r4
 80007ee:	6810      	ldr	r0, [r2, #0]
 80007f0:	6018      	str	r0, [r3, #0]
 80007f2:	4650      	mov	r0, sl
 80007f4:	4649      	mov	r1, r9
 80007f6:	4642      	mov	r2, r8
 80007f8:	4673      	mov	r3, lr
 80007fa:	f001 fa01 	bl	8001c00 <clear_tetromino>
		volatile block_t temp_tetromino = *block;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	461c      	mov	r4, r3
 8000802:	f107 0608 	add.w	r6, r7, #8
 8000806:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800080a:	4635      	mov	r5, r6
 800080c:	4623      	mov	r3, r4
 800080e:	6818      	ldr	r0, [r3, #0]
 8000810:	6859      	ldr	r1, [r3, #4]
 8000812:	689a      	ldr	r2, [r3, #8]
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000818:	3410      	adds	r4, #16
 800081a:	3610      	adds	r6, #16
 800081c:	4564      	cmp	r4, ip
 800081e:	d1f4      	bne.n	800080a <block_drop+0x6e>
 8000820:	4633      	mov	r3, r6
 8000822:	4622      	mov	r2, r4
 8000824:	6810      	ldr	r0, [r2, #0]
 8000826:	6018      	str	r0, [r3, #0]
		for(int i = 0; i < 4; i++)
 8000828:	2300      	movs	r3, #0
 800082a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800082c:	e013      	b.n	8000856 <block_drop+0xba>
		{
			temp_tetromino.y[i] += BLOCK_WIDTH;
 800082e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000830:	3314      	adds	r3, #20
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	3340      	adds	r3, #64	@ 0x40
 8000836:	443b      	add	r3, r7
 8000838:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 800083c:	b29b      	uxth	r3, r3
 800083e:	3317      	adds	r3, #23
 8000840:	b29a      	uxth	r2, r3
 8000842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000844:	3314      	adds	r3, #20
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	3340      	adds	r3, #64	@ 0x40
 800084a:	443b      	add	r3, r7
 800084c:	f823 2c34 	strh.w	r2, [r3, #-52]
		for(int i = 0; i < 4; i++)
 8000850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000852:	3301      	adds	r3, #1
 8000854:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000858:	2b03      	cmp	r3, #3
 800085a:	dde8      	ble.n	800082e <block_drop+0x92>
		}
		*block = temp_tetromino;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f107 0408 	add.w	r4, r7, #8
 8000862:	469c      	mov	ip, r3
 8000864:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8000868:	4665      	mov	r5, ip
 800086a:	4626      	mov	r6, r4
 800086c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800086e:	6028      	str	r0, [r5, #0]
 8000870:	6069      	str	r1, [r5, #4]
 8000872:	60aa      	str	r2, [r5, #8]
 8000874:	60eb      	str	r3, [r5, #12]
 8000876:	3410      	adds	r4, #16
 8000878:	f10c 0c10 	add.w	ip, ip, #16
 800087c:	4574      	cmp	r4, lr
 800087e:	d1f3      	bne.n	8000868 <block_drop+0xcc>
 8000880:	4663      	mov	r3, ip
 8000882:	4622      	mov	r2, r4
 8000884:	6810      	ldr	r0, [r2, #0]
 8000886:	6018      	str	r0, [r3, #0]
		draw_tetromino(*block);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4692      	mov	sl, r2
 800088e:	685a      	ldr	r2, [r3, #4]
 8000890:	4691      	mov	r9, r2
 8000892:	689a      	ldr	r2, [r3, #8]
 8000894:	4690      	mov	r8, r2
 8000896:	68da      	ldr	r2, [r3, #12]
 8000898:	4696      	mov	lr, r2
 800089a:	f103 0410 	add.w	r4, r3, #16
 800089e:	466e      	mov	r6, sp
 80008a0:	f104 0c20 	add.w	ip, r4, #32
 80008a4:	4635      	mov	r5, r6
 80008a6:	4623      	mov	r3, r4
 80008a8:	6818      	ldr	r0, [r3, #0]
 80008aa:	6859      	ldr	r1, [r3, #4]
 80008ac:	689a      	ldr	r2, [r3, #8]
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008b2:	3410      	adds	r4, #16
 80008b4:	3610      	adds	r6, #16
 80008b6:	4564      	cmp	r4, ip
 80008b8:	d1f4      	bne.n	80008a4 <block_drop+0x108>
 80008ba:	4633      	mov	r3, r6
 80008bc:	4622      	mov	r2, r4
 80008be:	6810      	ldr	r0, [r2, #0]
 80008c0:	6018      	str	r0, [r3, #0]
 80008c2:	4650      	mov	r0, sl
 80008c4:	4649      	mov	r1, r9
 80008c6:	4642      	mov	r2, r8
 80008c8:	4673      	mov	r3, lr
 80008ca:	f001 f959 	bl	8001b80 <draw_tetromino>
	}
	else
	{
		block_rest(block, map);
	}
}
 80008ce:	e003      	b.n	80008d8 <block_drop+0x13c>
		block_rest(block, map);
 80008d0:	6839      	ldr	r1, [r7, #0]
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f000 fe15 	bl	8001502 <block_rest>
}
 80008d8:	bf00      	nop
 80008da:	3740      	adds	r7, #64	@ 0x40
 80008dc:	46bd      	mov	sp, r7
 80008de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080008e4 <block_create>:

block_t block_create(uint8_t num)
{
 80008e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008e6:	b0b3      	sub	sp, #204	@ 0xcc
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	70fb      	strb	r3, [r7, #3]
	volatile block_t block = {0};
 80008f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008f4:	2234      	movs	r2, #52	@ 0x34
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f005 fba7 	bl	800604c <memset>
	//evaluate rng for color
	//set pos_x, pos_y
	//return the block

	//uint32_t rand = HAL_RNG_GetRandomNumber(hrng);
	uint32_t rand = num;
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	66fb      	str	r3, [r7, #108]	@ 0x6c
	uint8_t name = rand & 0b111;
 8000902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000904:	b2db      	uxtb	r3, r3
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
		block.name = name;
 800090e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000912:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	//uint32_t rando = HAL_RNG_GetRandomNumber(hrng);
	uint32_t rando = rand;
 8000916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000918:	667b      	str	r3, [r7, #100]	@ 0x64
	uint8_t color = rando & 0b111;
 800091a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800091c:	b2db      	uxtb	r3, r3
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	//COLOR
	if(color == BLUE)
 8000926:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800092a:	2b00      	cmp	r3, #0
 800092c:	d101      	bne.n	8000932 <block_create+0x4e>
	{
		block.color = LCD_COLOR_BLUE;
 800092e:	231f      	movs	r3, #31
 8000930:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == RED)
 8000932:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000936:	2b01      	cmp	r3, #1
 8000938:	d102      	bne.n	8000940 <block_create+0x5c>
	{
		block.color = LCD_COLOR_RED;
 800093a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800093e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == MAGENTA)
 8000940:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000944:	2b02      	cmp	r3, #2
 8000946:	d102      	bne.n	800094e <block_create+0x6a>
	{
		block.color = LCD_COLOR_MAGENTA;
 8000948:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800094c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == GREEN)
 800094e:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000952:	2b03      	cmp	r3, #3
 8000954:	d102      	bne.n	800095c <block_create+0x78>
	{
		block.color = LCD_COLOR_GREEN;
 8000956:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800095a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == CYAN)
 800095c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000960:	2b04      	cmp	r3, #4
 8000962:	d102      	bne.n	800096a <block_create+0x86>
	{
		block.color = LCD_COLOR_CYAN;
 8000964:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000968:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == YELLOW)
 800096a:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800096e:	2b05      	cmp	r3, #5
 8000970:	d102      	bne.n	8000978 <block_create+0x94>
	{
		block.color = LCD_COLOR_YELLOW;
 8000972:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000976:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == ORANGE)
 8000978:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800097c:	2b06      	cmp	r3, #6
 800097e:	d102      	bne.n	8000986 <block_create+0xa2>
	{
		block.color = LCD_COLOR_ORANGE;
 8000980:	f64f 33c1 	movw	r3, #64449	@ 0xfbc1
 8000984:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	if(color == PURPLE)
 8000986:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800098a:	2b07      	cmp	r3, #7
 800098c:	d102      	bne.n	8000994 <block_create+0xb0>
	{
		block.color = LCD_COLOR_PURPLE;
 800098e:	f647 0318 	movw	r3, #30744	@ 0x7818
 8000992:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}
	//COORDINATES
	for(int i = 0; i < 4; i++)
 8000994:	2300      	movs	r3, #0
 8000996:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800099a:	e017      	b.n	80009cc <block_create+0xe8>
	{
		block.x[i] = BLOCK_START_X + i*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 800099c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	461a      	mov	r2, r3
 80009a4:	0052      	lsls	r2, r2, #1
 80009a6:	441a      	add	r2, r3
 80009a8:	00d2      	lsls	r2, r2, #3
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	334b      	adds	r3, #75	@ 0x4b
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80009b6:	3310      	adds	r3, #16
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	33c8      	adds	r3, #200	@ 0xc8
 80009bc:	443b      	add	r3, r7
 80009be:	f823 2c98 	strh.w	r2, [r3, #-152]
	for(int i = 0; i < 4; i++)
 80009c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80009c6:	3301      	adds	r3, #1
 80009c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80009cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80009d0:	2b03      	cmp	r3, #3
 80009d2:	dde3      	ble.n	800099c <block_create+0xb8>
	}

	//BLOCK MATRICES
	if(block.name == O)
 80009d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d16f      	bne.n	8000abe <block_create+0x1da>
	{
		uint16_t temp[4][4] =
 80009de:	4bcf      	ldr	r3, [pc, #828]	@ (8000d1c <block_create+0x438>)
 80009e0:	f107 040c 	add.w	r4, r7, #12
 80009e4:	461d      	mov	r5, r3
 80009e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,1},
			{0,0,1,1}};

		for(int i = 0; i < 4; i++)
 80009f2:	2300      	movs	r3, #0
 80009f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80009f8:	e028      	b.n	8000a4c <block_create+0x168>
		{
			for(int j = 0; j < 4; j++)
 80009fa:	2300      	movs	r3, #0
 80009fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000a00:	e01b      	b.n	8000a3a <block_create+0x156>
			{
				block.mat[i][j] = temp[j][i];
 8000a02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000a06:	009a      	lsls	r2, r3, #2
 8000a08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000a0c:	4413      	add	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	33c8      	adds	r3, #200	@ 0xc8
 8000a12:	443b      	add	r3, r7
 8000a14:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000a18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000a1c:	009a      	lsls	r2, r3, #2
 8000a1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000a22:	4413      	add	r3, r2
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	33c8      	adds	r3, #200	@ 0xc8
 8000a28:	443b      	add	r3, r7
 8000a2a:	460a      	mov	r2, r1
 8000a2c:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000a30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000a34:	3301      	adds	r3, #1
 8000a36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000a3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000a3e:	2b03      	cmp	r3, #3
 8000a40:	dddf      	ble.n	8000a02 <block_create+0x11e>
		for(int i = 0; i < 4; i++)
 8000a42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000a46:	3301      	adds	r3, #1
 8000a48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000a4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000a50:	2b03      	cmp	r3, #3
 8000a52:	ddd2      	ble.n	80009fa <block_create+0x116>
			}
		}
		for(int i = 0; i < 4; i++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a5a:	e02c      	b.n	8000ab6 <block_create+0x1d2>
		{
			block.x[i] = BLOCK_START_X + (i-1)*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000a5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000a60:	3b01      	subs	r3, #1
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	461a      	mov	r2, r3
 8000a66:	0052      	lsls	r2, r2, #1
 8000a68:	441a      	add	r2, r3
 8000a6a:	00d2      	lsls	r2, r2, #3
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	334b      	adds	r3, #75	@ 0x4b
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000a78:	3310      	adds	r3, #16
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	33c8      	adds	r3, #200	@ 0xc8
 8000a7e:	443b      	add	r3, r7
 8000a80:	f823 2c98 	strh.w	r2, [r3, #-152]
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000a84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000a88:	3b02      	subs	r3, #2
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	0052      	lsls	r2, r2, #1
 8000a90:	441a      	add	r2, r3
 8000a92:	00d2      	lsls	r2, r2, #3
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	3311      	adds	r3, #17
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000aa0:	3314      	adds	r3, #20
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	33c8      	adds	r3, #200	@ 0xc8
 8000aa6:	443b      	add	r3, r7
 8000aa8:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000aac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000ab6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	ddce      	ble.n	8000a5c <block_create+0x178>
		}
	}
	if(block.name == L)
 8000abe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d16f      	bne.n	8000ba8 <block_create+0x2c4>
	{
		uint16_t temp[4][4] =
 8000ac8:	4b95      	ldr	r3, [pc, #596]	@ (8000d20 <block_create+0x43c>)
 8000aca:	f107 040c 	add.w	r4, r7, #12
 8000ace:	461d      	mov	r5, r3
 8000ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ad8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,1,0},
			{0,0,1,0},
			{0,0,1,1}};
		for(int i = 0; i < 4; i++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000ae2:	e028      	b.n	8000b36 <block_create+0x252>
		{
			for(int j = 0; j < 4; j++)
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000aea:	e01b      	b.n	8000b24 <block_create+0x240>
			{
				block.mat[i][j] = temp[j][i];
 8000aec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000af0:	009a      	lsls	r2, r3, #2
 8000af2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000af6:	4413      	add	r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	33c8      	adds	r3, #200	@ 0xc8
 8000afc:	443b      	add	r3, r7
 8000afe:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000b02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000b06:	009a      	lsls	r2, r3, #2
 8000b08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000b0c:	4413      	add	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	33c8      	adds	r3, #200	@ 0xc8
 8000b12:	443b      	add	r3, r7
 8000b14:	460a      	mov	r2, r1
 8000b16:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000b1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000b1e:	3301      	adds	r3, #1
 8000b20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000b24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000b28:	2b03      	cmp	r3, #3
 8000b2a:	dddf      	ble.n	8000aec <block_create+0x208>
		for(int i = 0; i < 4; i++)
 8000b2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000b30:	3301      	adds	r3, #1
 8000b32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000b36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	ddd2      	ble.n	8000ae4 <block_create+0x200>
			}
		}
		for(int i = 0; i < 4; i++)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000b44:	e02c      	b.n	8000ba0 <block_create+0x2bc>
		{
			block.x[i] = BLOCK_START_X + (i-1)*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000b46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	0052      	lsls	r2, r2, #1
 8000b52:	441a      	add	r2, r3
 8000b54:	00d2      	lsls	r2, r2, #3
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	334b      	adds	r3, #75	@ 0x4b
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000b62:	3310      	adds	r3, #16
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	33c8      	adds	r3, #200	@ 0xc8
 8000b68:	443b      	add	r3, r7
 8000b6a:	f823 2c98 	strh.w	r2, [r3, #-152]
			block.y[i] = BLOCK_START_Y + (i-1)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000b6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000b72:	3b01      	subs	r3, #1
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	461a      	mov	r2, r3
 8000b78:	0052      	lsls	r2, r2, #1
 8000b7a:	441a      	add	r2, r3
 8000b7c:	00d2      	lsls	r2, r2, #3
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	3311      	adds	r3, #17
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000b8a:	3314      	adds	r3, #20
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	33c8      	adds	r3, #200	@ 0xc8
 8000b90:	443b      	add	r3, r7
 8000b92:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000b96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	ddce      	ble.n	8000b46 <block_create+0x262>
		}
	}
	if(block.name == J)
 8000ba8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d16f      	bne.n	8000c92 <block_create+0x3ae>
	{
		uint16_t temp[4][4] =
 8000bb2:	4b5c      	ldr	r3, [pc, #368]	@ (8000d24 <block_create+0x440>)
 8000bb4:	f107 040c 	add.w	r4, r7, #12
 8000bb8:	461d      	mov	r5, r3
 8000bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bbe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000bc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,1},
			{0,0,0,1},
			{0,0,1,1}};
		for(int i = 0; i < 4; i++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000bcc:	e028      	b.n	8000c20 <block_create+0x33c>
		{
			for(int j = 0; j < 4; j++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000bd4:	e01b      	b.n	8000c0e <block_create+0x32a>
			{
				block.mat[i][j] = temp[j][i];
 8000bd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000bda:	009a      	lsls	r2, r3, #2
 8000bdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000be0:	4413      	add	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	33c8      	adds	r3, #200	@ 0xc8
 8000be6:	443b      	add	r3, r7
 8000be8:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000bec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000bf0:	009a      	lsls	r2, r3, #2
 8000bf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000bf6:	4413      	add	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	33c8      	adds	r3, #200	@ 0xc8
 8000bfc:	443b      	add	r3, r7
 8000bfe:	460a      	mov	r2, r1
 8000c00:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000c04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c08:	3301      	adds	r3, #1
 8000c0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000c0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	dddf      	ble.n	8000bd6 <block_create+0x2f2>
		for(int i = 0; i < 4; i++)
 8000c16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000c20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	ddd2      	ble.n	8000bce <block_create+0x2ea>
			}
		}
		for(int i = 0; i < 4; i++)
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000c2e:	e02c      	b.n	8000c8a <block_create+0x3a6>
		{
			block.x[i] = BLOCK_START_X + (i-1)*BLOCK_WIDTH; //BLOCK_START_X is first coordinate in X
 8000c30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000c34:	3b01      	subs	r3, #1
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	461a      	mov	r2, r3
 8000c3a:	0052      	lsls	r2, r2, #1
 8000c3c:	441a      	add	r2, r3
 8000c3e:	00d2      	lsls	r2, r2, #3
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	334b      	adds	r3, #75	@ 0x4b
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000c4c:	3310      	adds	r3, #16
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	33c8      	adds	r3, #200	@ 0xc8
 8000c52:	443b      	add	r3, r7
 8000c54:	f823 2c98 	strh.w	r2, [r3, #-152]
			block.y[i] = BLOCK_START_Y + (i-1)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000c58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	461a      	mov	r2, r3
 8000c62:	0052      	lsls	r2, r2, #1
 8000c64:	441a      	add	r2, r3
 8000c66:	00d2      	lsls	r2, r2, #3
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	3311      	adds	r3, #17
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000c74:	3314      	adds	r3, #20
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	33c8      	adds	r3, #200	@ 0xc8
 8000c7a:	443b      	add	r3, r7
 8000c7c:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000c80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000c84:	3301      	adds	r3, #1
 8000c86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	ddce      	ble.n	8000c30 <block_create+0x34c>
		}
	}
	if(block.name == S)
 8000c92:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b03      	cmp	r3, #3
 8000c9a:	d164      	bne.n	8000d66 <block_create+0x482>
	{
		uint16_t temp[4][4] =
 8000c9c:	4b22      	ldr	r3, [pc, #136]	@ (8000d28 <block_create+0x444>)
 8000c9e:	f107 040c 	add.w	r4, r7, #12
 8000ca2:	461d      	mov	r5, r3
 8000ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000cac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,1,1},
			{0,1,1,0}};
		for(int i = 0; i < 4; i++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000cb6:	e028      	b.n	8000d0a <block_create+0x426>
		{
			for(int j = 0; j < 4; j++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000cbe:	e01b      	b.n	8000cf8 <block_create+0x414>
			{
				block.mat[i][j] = temp[j][i];
 8000cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000cc4:	009a      	lsls	r2, r3, #2
 8000cc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000cca:	4413      	add	r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	33c8      	adds	r3, #200	@ 0xc8
 8000cd0:	443b      	add	r3, r7
 8000cd2:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000cd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000cda:	009a      	lsls	r2, r3, #2
 8000cdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000ce0:	4413      	add	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	33c8      	adds	r3, #200	@ 0xc8
 8000ce6:	443b      	add	r3, r7
 8000ce8:	460a      	mov	r2, r1
 8000cea:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000cee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000cf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000cfc:	2b03      	cmp	r3, #3
 8000cfe:	dddf      	ble.n	8000cc0 <block_create+0x3dc>
		for(int i = 0; i < 4; i++)
 8000d00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000d04:	3301      	adds	r3, #1
 8000d06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000d0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	ddd2      	ble.n	8000cb8 <block_create+0x3d4>
			}
		}
		for(int i = 0; i < 4; i++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000d18:	e021      	b.n	8000d5e <block_create+0x47a>
 8000d1a:	bf00      	nop
 8000d1c:	080060d8 	.word	0x080060d8
 8000d20:	080060f8 	.word	0x080060f8
 8000d24:	08006118 	.word	0x08006118
 8000d28:	08006138 	.word	0x08006138
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000d2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d30:	3b02      	subs	r3, #2
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	461a      	mov	r2, r3
 8000d36:	0052      	lsls	r2, r2, #1
 8000d38:	441a      	add	r2, r3
 8000d3a:	00d2      	lsls	r2, r2, #3
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	3311      	adds	r3, #17
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d48:	3314      	adds	r3, #20
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	33c8      	adds	r3, #200	@ 0xc8
 8000d4e:	443b      	add	r3, r7
 8000d50:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000d54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d58:	3301      	adds	r3, #1
 8000d5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000d5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	dde2      	ble.n	8000d2c <block_create+0x448>
		}
	}
	if(block.name == Z)
 8000d66:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d15b      	bne.n	8000e28 <block_create+0x544>
	{
		uint16_t temp[4][4] =
 8000d70:	4b8f      	ldr	r3, [pc, #572]	@ (8000fb0 <block_create+0x6cc>)
 8000d72:	f107 040c 	add.w	r4, r7, #12
 8000d76:	461d      	mov	r5, r3
 8000d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,1,1,0},
			{0,0,1,1}};
		for(int i = 0; i < 4; i++)
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000d8a:	e028      	b.n	8000dde <block_create+0x4fa>
		{
			for(int j = 0; j < 4; j++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000d92:	e01b      	b.n	8000dcc <block_create+0x4e8>
			{
				block.mat[i][j] = temp[j][i];
 8000d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d98:	009a      	lsls	r2, r3, #2
 8000d9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d9e:	4413      	add	r3, r2
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	33c8      	adds	r3, #200	@ 0xc8
 8000da4:	443b      	add	r3, r7
 8000da6:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000daa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000dae:	009a      	lsls	r2, r3, #2
 8000db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000db4:	4413      	add	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	33c8      	adds	r3, #200	@ 0xc8
 8000dba:	443b      	add	r3, r7
 8000dbc:	460a      	mov	r2, r1
 8000dbe:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000dcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	dddf      	ble.n	8000d94 <block_create+0x4b0>
		for(int i = 0; i < 4; i++)
 8000dd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000dd8:	3301      	adds	r3, #1
 8000dda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000dde:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	ddd2      	ble.n	8000d8c <block_create+0x4a8>
			}
		}
		for(int i = 0; i < 4; i++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000dec:	e018      	b.n	8000e20 <block_create+0x53c>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000dee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000df2:	3b02      	subs	r3, #2
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	461a      	mov	r2, r3
 8000df8:	0052      	lsls	r2, r2, #1
 8000dfa:	441a      	add	r2, r3
 8000dfc:	00d2      	lsls	r2, r2, #3
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	3311      	adds	r3, #17
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000e0a:	3314      	adds	r3, #20
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	33c8      	adds	r3, #200	@ 0xc8
 8000e10:	443b      	add	r3, r7
 8000e12:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000e16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000e20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	dde2      	ble.n	8000dee <block_create+0x50a>
		}
	}
	if(block.name == T)
 8000e28:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b05      	cmp	r3, #5
 8000e30:	d155      	bne.n	8000ede <block_create+0x5fa>
	{
		uint16_t temp[4][4] =
 8000e32:	4b60      	ldr	r3, [pc, #384]	@ (8000fb4 <block_create+0x6d0>)
 8000e34:	f107 040c 	add.w	r4, r7, #12
 8000e38:	461d      	mov	r5, r3
 8000e3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,1,1,1},
			{0,0,1,0}};
		for(int i = 0; i < 4; i++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000e4c:	e028      	b.n	8000ea0 <block_create+0x5bc>
		{
			for(int j = 0; j < 4; j++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000e54:	e01b      	b.n	8000e8e <block_create+0x5aa>
			{
				block.mat[i][j] = temp[j][i];
 8000e56:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000e5a:	009a      	lsls	r2, r3, #2
 8000e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e60:	4413      	add	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	33c8      	adds	r3, #200	@ 0xc8
 8000e66:	443b      	add	r3, r7
 8000e68:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e70:	009a      	lsls	r2, r3, #2
 8000e72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000e76:	4413      	add	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	33c8      	adds	r3, #200	@ 0xc8
 8000e7c:	443b      	add	r3, r7
 8000e7e:	460a      	mov	r2, r1
 8000e80:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000e84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000e88:	3301      	adds	r3, #1
 8000e8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000e8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	dddf      	ble.n	8000e56 <block_create+0x572>
		for(int i = 0; i < 4; i++)
 8000e96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	ddd2      	ble.n	8000e4e <block_create+0x56a>
			}
		}
		for(int i = 0; i < 4; i++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000eac:	e014      	b.n	8000ed8 <block_create+0x5f4>
		{
			block.y[i] = BLOCK_START_Y + (i-2)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000eae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000eb0:	3b02      	subs	r3, #2
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	0052      	lsls	r2, r2, #1
 8000eb8:	441a      	add	r2, r3
 8000eba:	00d2      	lsls	r2, r2, #3
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	3311      	adds	r3, #17
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ec6:	3314      	adds	r3, #20
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	33c8      	adds	r3, #200	@ 0xc8
 8000ecc:	443b      	add	r3, r7
 8000ece:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000ed2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000ed8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	dde7      	ble.n	8000eae <block_create+0x5ca>
		}
	}
	if(block.name == I)
 8000ede:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b06      	cmp	r3, #6
 8000ee6:	d149      	bne.n	8000f7c <block_create+0x698>
	{
		uint16_t temp[4][4] =
 8000ee8:	4b33      	ldr	r3, [pc, #204]	@ (8000fb8 <block_create+0x6d4>)
 8000eea:	f107 040c 	add.w	r4, r7, #12
 8000eee:	461d      	mov	r5, r3
 8000ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ef8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0},
			{1,1,1,1}};
		for(int i = 0; i < 4; i++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000f00:	e01e      	b.n	8000f40 <block_create+0x65c>
		{
			for(int j = 0; j < 4; j++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	677b      	str	r3, [r7, #116]	@ 0x74
 8000f06:	e015      	b.n	8000f34 <block_create+0x650>
			{
				block.mat[i][j] = temp[j][i];
 8000f08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f0a:	009a      	lsls	r2, r3, #2
 8000f0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f0e:	4413      	add	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	33c8      	adds	r3, #200	@ 0xc8
 8000f14:	443b      	add	r3, r7
 8000f16:	f833 1cbc 	ldrh.w	r1, [r3, #-188]
 8000f1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f1c:	009a      	lsls	r2, r3, #2
 8000f1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f20:	4413      	add	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	33c8      	adds	r3, #200	@ 0xc8
 8000f26:	443b      	add	r3, r7
 8000f28:	460a      	mov	r2, r1
 8000f2a:	f823 2c98 	strh.w	r2, [r3, #-152]
			for(int j = 0; j < 4; j++)
 8000f2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f30:	3301      	adds	r3, #1
 8000f32:	677b      	str	r3, [r7, #116]	@ 0x74
 8000f34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	dde6      	ble.n	8000f08 <block_create+0x624>
		for(int i = 0; i < 4; i++)
 8000f3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000f40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	dddd      	ble.n	8000f02 <block_create+0x61e>
			}
		}
		for(int i = 0; i < 4; i++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	673b      	str	r3, [r7, #112]	@ 0x70
 8000f4a:	e014      	b.n	8000f76 <block_create+0x692>
		{
			block.y[i] = BLOCK_START_Y + (i-3)*BLOCK_WIDTH; //BLOCK_START_Y is first coordinate in Y
 8000f4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f4e:	3b03      	subs	r3, #3
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	461a      	mov	r2, r3
 8000f54:	0052      	lsls	r2, r2, #1
 8000f56:	441a      	add	r2, r3
 8000f58:	00d2      	lsls	r2, r2, #3
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	3311      	adds	r3, #17
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f64:	3314      	adds	r3, #20
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	33c8      	adds	r3, #200	@ 0xc8
 8000f6a:	443b      	add	r3, r7
 8000f6c:	f823 2c98 	strh.w	r2, [r3, #-152]
		for(int i = 0; i < 4; i++)
 8000f70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f72:	3301      	adds	r3, #1
 8000f74:	673b      	str	r3, [r7, #112]	@ 0x70
 8000f76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	dde7      	ble.n	8000f4c <block_create+0x668>
		}
	}
	return block;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000f82:	469c      	mov	ip, r3
 8000f84:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8000f88:	4665      	mov	r5, ip
 8000f8a:	4626      	mov	r6, r4
 8000f8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f8e:	6028      	str	r0, [r5, #0]
 8000f90:	6069      	str	r1, [r5, #4]
 8000f92:	60aa      	str	r2, [r5, #8]
 8000f94:	60eb      	str	r3, [r5, #12]
 8000f96:	3410      	adds	r4, #16
 8000f98:	f10c 0c10 	add.w	ip, ip, #16
 8000f9c:	4574      	cmp	r4, lr
 8000f9e:	d1f3      	bne.n	8000f88 <block_create+0x6a4>
 8000fa0:	4663      	mov	r3, ip
 8000fa2:	4622      	mov	r2, r4
 8000fa4:	6810      	ldr	r0, [r2, #0]
 8000fa6:	6018      	str	r0, [r3, #0]
}
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	37cc      	adds	r7, #204	@ 0xcc
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb0:	08006158 	.word	0x08006158
 8000fb4:	08006178 	.word	0x08006178
 8000fb8:	08006198 	.word	0x08006198

08000fbc <map_init>:

map_t map_init()
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000fc8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000fcc:	6018      	str	r0, [r3, #0]
	volatile map_t map = {0};
 8000fce:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000fd2:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f240 2336 	movw	r3, #566	@ 0x236
 8000fdc:	461a      	mov	r2, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	f005 f834 	bl	800604c <memset>
	for(int i = 0; i < 10; i++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8000fea:	e019      	b.n	8001020 <map_init+0x64>
	{
		map.x[i] = EDGE_WIDTH + i*BLOCK_WIDTH;
 8000fec:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	0052      	lsls	r2, r2, #1
 8000ff6:	441a      	add	r2, r3
 8000ff8:	00d2      	lsls	r2, r2, #3
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	3304      	adds	r3, #4
 8001000:	b299      	uxth	r1, r3
 8001002:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001006:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800100a:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 800100e:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001012:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 10; i++)
 8001016:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800101a:	3301      	adds	r3, #1
 800101c:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8001020:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8001024:	2b09      	cmp	r3, #9
 8001026:	dde1      	ble.n	8000fec <map_init+0x30>
	}
	for(int i = 0; i < 13; i++)
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 800102e:	e01b      	b.n	8001068 <map_init+0xac>
	{
		map.y[i] = MAP_DIFFERENCE + EDGE_WIDTH + i*BLOCK_WIDTH;
 8001030:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001034:	b29b      	uxth	r3, r3
 8001036:	461a      	mov	r2, r3
 8001038:	0052      	lsls	r2, r2, #1
 800103a:	441a      	add	r2, r3
 800103c:	00d2      	lsls	r2, r2, #3
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	b29b      	uxth	r3, r3
 8001042:	330f      	adds	r3, #15
 8001044:	b299      	uxth	r1, r3
 8001046:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800104a:	f5a3 7210 	sub.w	r2, r3, #576	@ 0x240
 800104e:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001052:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	460a      	mov	r2, r1
 800105c:	809a      	strh	r2, [r3, #4]
	for(int i = 0; i < 13; i++)
 800105e:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001062:	3301      	adds	r3, #1
 8001064:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8001068:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800106c:	2b0c      	cmp	r3, #12
 800106e:	dddf      	ble.n	8001030 <map_init+0x74>
	}
	return map;
 8001070:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001074:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800107e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	f240 2336 	movw	r3, #566	@ 0x236
 800108a:	461a      	mov	r2, r3
 800108c:	f005 f80a 	bl	80060a4 <memcpy>
}
 8001090:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001094:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <rest>:

uint8_t rest(block_t *block, map_t *map)
{
 80010a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010a4:	f5ad 7d35 	sub.w	sp, sp, #724	@ 0x2d4
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80010ae:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 80010b2:	6018      	str	r0, [r3, #0]
 80010b4:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80010b8:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 80010bc:	6019      	str	r1, [r3, #0]
	volatile block_t temp_tetromino = *block;
 80010be:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80010c2:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	461c      	mov	r4, r3
 80010ca:	f507 761e 	add.w	r6, r7, #632	@ 0x278
 80010ce:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80010d2:	4635      	mov	r5, r6
 80010d4:	4623      	mov	r3, r4
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	6859      	ldr	r1, [r3, #4]
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e0:	3410      	adds	r4, #16
 80010e2:	3610      	adds	r6, #16
 80010e4:	4564      	cmp	r4, ip
 80010e6:	d1f4      	bne.n	80010d2 <rest+0x30>
 80010e8:	4633      	mov	r3, r6
 80010ea:	4622      	mov	r2, r4
 80010ec:	6810      	ldr	r0, [r2, #0]
 80010ee:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 80010f0:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80010f4:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 80010f8:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80010fc:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	f240 2336 	movw	r3, #566	@ 0x236
 800110a:	461a      	mov	r2, r3
 800110c:	f004 ffca 	bl	80060a4 <memcpy>

	//evaluate the logical AND between the true blocks in block_t and
	//the next row of map_t (block y_pos + block size)
	uint8_t y_max_index[4] = {0};
 8001110:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001114:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
	uint8_t x_max_index[4] = {0};
 800111c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001120:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
	uint16_t y_max[4] = {0};
 8001128:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800112c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001130:	461a      	mov	r2, r3
 8001132:	2300      	movs	r3, #0
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	6053      	str	r3, [r2, #4]
	uint16_t x_max[4] = {0};
 8001138:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800113c:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8001140:	461a      	mov	r2, r3
 8001142:	2300      	movs	r3, #0
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	6053      	str	r3, [r2, #4]
	for(int i = 0; i < 4; i++)
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 800114e:	e04f      	b.n	80011f0 <rest+0x14e>
	{
		for(int j = 0; j < 4; j++)
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 8001156:	e036      	b.n	80011c6 <rest+0x124>
		{
			if(temp_tetromino.mat[i][j])
 8001158:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 800115c:	009a      	lsls	r2, r3, #2
 800115e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 8001162:	4413      	add	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 800116a:	443b      	add	r3, r7
 800116c:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8001170:	b29b      	uxth	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d019      	beq.n	80011aa <rest+0x108>
			{
				if(j > y_max_index[i])
 8001176:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800117a:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 800117e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8001182:	4413      	add	r3, r2
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 800118c:	4293      	cmp	r3, r2
 800118e:	dd15      	ble.n	80011bc <rest+0x11a>
				{
					y_max_index[i] = j;
 8001190:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 8001194:	b2d9      	uxtb	r1, r3
 8001196:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800119a:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 800119e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 80011a2:	4413      	add	r3, r2
 80011a4:	460a      	mov	r2, r1
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	e008      	b.n	80011bc <rest+0x11a>
				}
			}
			else
			{
				y_max_index[i] = NO_BLOCK;
 80011aa:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80011ae:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 80011b2:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 80011b6:	4413      	add	r3, r2
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++)
 80011bc:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 80011c0:	3301      	adds	r3, #1
 80011c2:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 80011c6:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	ddc4      	ble.n	8001158 <rest+0xb6>
			}
		}
		x_max_index[i] = i;
 80011ce:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 80011d2:	b2d9      	uxtb	r1, r3
 80011d4:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80011d8:	f5a3 7226 	sub.w	r2, r3, #664	@ 0x298
 80011dc:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 80011e0:	4413      	add	r3, r2
 80011e2:	460a      	mov	r2, r1
 80011e4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i++)
 80011e6:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 80011ea:	3301      	adds	r3, #1
 80011ec:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 80011f0:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	ddab      	ble.n	8001150 <rest+0xae>
	}
	for(int i = 0; i < 4; i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 80011fe:	e048      	b.n	8001292 <rest+0x1f0>
	{
		if(y_max_index[i] == NO_BLOCK)
 8001200:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001204:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 8001208:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 800120c:	4413      	add	r3, r2
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d109      	bne.n	8001228 <rest+0x186>
		{
			y_max[i] = NO_BLOCK;
 8001214:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001218:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800121c:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 8001220:	2100      	movs	r1, #0
 8001222:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001226:	e02f      	b.n	8001288 <rest+0x1e6>
		}
		else
		{
			y_max[i] = temp_tetromino.y[y_max_index[i]];
 8001228:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800122c:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 8001230:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	3314      	adds	r3, #20
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 8001240:	443b      	add	r3, r7
 8001242:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8001246:	b299      	uxth	r1, r3
 8001248:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800124c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001250:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 8001254:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			x_max[i] = temp_tetromino.x[x_max_index[i]];
 8001258:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800125c:	f5a3 7226 	sub.w	r2, r3, #664	@ 0x298
 8001260:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	3310      	adds	r3, #16
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 8001270:	443b      	add	r3, r7
 8001272:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8001276:	b299      	uxth	r1, r3
 8001278:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800127c:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8001280:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 8001284:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 4; i++)
 8001288:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 800128c:	3301      	adds	r3, #1
 800128e:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 8001292:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 8001296:	2b03      	cmp	r3, #3
 8001298:	ddb2      	ble.n	8001200 <rest+0x15e>
		}
	}

	uint8_t map_y_min_index[4] = {UINT8_MAX};
 800129a:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800129e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80012a2:	22ff      	movs	r2, #255	@ 0xff
 80012a4:	601a      	str	r2, [r3, #0]
	uint8_t map_x_min_index[4] = {UINT8_MAX};
 80012a6:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80012aa:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80012ae:	22ff      	movs	r2, #255	@ 0xff
 80012b0:	601a      	str	r2, [r3, #0]
	uint16_t map_y_min[4];
	uint16_t map_x_min[4];
	for(int i = 0; i < 10; i++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 80012b8:	e054      	b.n	8001364 <rest+0x2c2>
	{
		for(int j = 0; j < 13; j++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 80012c0:	e03b      	b.n	800133a <rest+0x298>
		{
			if(temp_map.map_mat[i][j])
 80012c2:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80012c6:	f5a3 7124 	sub.w	r1, r3, #656	@ 0x290
 80012ca:	f8d7 22c0 	ldr.w	r2, [r7, #704]	@ 0x2c0
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	f8d7 22bc 	ldr.w	r2, [r7, #700]	@ 0x2bc
 80012da:	4413      	add	r3, r2
 80012dc:	3380      	adds	r3, #128	@ 0x80
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	440b      	add	r3, r1
 80012e2:	889b      	ldrh	r3, [r3, #4]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d022      	beq.n	8001330 <rest+0x28e>
			{
				if(j < y_max_index[i])
 80012ea:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80012ee:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 80012f2:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 80012f6:	4413      	add	r3, r2
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8001300:	4293      	cmp	r3, r2
 8001302:	da0c      	bge.n	800131e <rest+0x27c>
				{
					map_y_min_index[i] = j;
 8001304:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8001308:	b2d9      	uxtb	r1, r3
 800130a:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800130e:	f5a3 722b 	sub.w	r2, r3, #684	@ 0x2ac
 8001312:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 8001316:	4413      	add	r3, r2
 8001318:	460a      	mov	r2, r1
 800131a:	701a      	strb	r2, [r3, #0]
 800131c:	e008      	b.n	8001330 <rest+0x28e>
				}
				else
				{
					map_y_min_index[i] = NO_BLOCK;
 800131e:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001322:	f5a3 722b 	sub.w	r2, r3, #684	@ 0x2ac
 8001326:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 800132a:	4413      	add	r3, r2
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 13; j++)
 8001330:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8001334:	3301      	adds	r3, #1
 8001336:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 800133a:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800133e:	2b0c      	cmp	r3, #12
 8001340:	ddbf      	ble.n	80012c2 <rest+0x220>
				}
			}
		}
		map_x_min_index[i] = i;
 8001342:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 8001346:	b2d9      	uxtb	r1, r3
 8001348:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800134c:	f5a3 722c 	sub.w	r2, r3, #688	@ 0x2b0
 8001350:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 8001354:	4413      	add	r3, r2
 8001356:	460a      	mov	r2, r1
 8001358:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++)
 800135a:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 800135e:	3301      	adds	r3, #1
 8001360:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 8001364:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 8001368:	2b09      	cmp	r3, #9
 800136a:	dda6      	ble.n	80012ba <rest+0x218>
	}
	for(int i = 0; i < 10; i++)
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8001372:	e04e      	b.n	8001412 <rest+0x370>
	{
		if(map_y_min[i] == NO_BLOCK)
 8001374:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001378:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 800137c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 8001380:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10a      	bne.n	800139e <rest+0x2fc>
		{
			y_max[i] = LCD_PIXEL_HEIGHT;
 8001388:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800138c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001390:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 8001394:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8001398:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800139c:	e034      	b.n	8001408 <rest+0x366>
		}
		else
		{
			map_y_min[i] = temp_map.y[map_y_min_index[i]];
 800139e:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80013a2:	f5a3 722b 	sub.w	r2, r3, #684	@ 0x2ac
 80013a6:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 80013aa:	4413      	add	r3, r2
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	4619      	mov	r1, r3
 80013b0:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80013b4:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 80013b8:	f501 7386 	add.w	r3, r1, #268	@ 0x10c
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4413      	add	r3, r2
 80013c0:	889b      	ldrh	r3, [r3, #4]
 80013c2:	b299      	uxth	r1, r3
 80013c4:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80013c8:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 80013cc:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 80013d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			map_x_min[i] = temp_map.x[map_x_min_index[i]];
 80013d4:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80013d8:	f5a3 722c 	sub.w	r2, r3, #688	@ 0x2b0
 80013dc:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 80013e0:	4413      	add	r3, r2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80013ea:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80013ee:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80013f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80013f6:	b299      	uxth	r1, r3
 80013f8:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80013fc:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8001400:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 8001404:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 10; i++)
 8001408:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 800140c:	3301      	adds	r3, #1
 800140e:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8001412:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 8001416:	2b09      	cmp	r3, #9
 8001418:	ddac      	ble.n	8001374 <rest+0x2d2>
		}
	}

	uint8_t overlap_map_x_index[4];
	for(int i = 0; i < 4; i++)
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8001420:	e02f      	b.n	8001482 <rest+0x3e0>
	{
		for(int j = 0; j < 10; j++)
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8001428:	e022      	b.n	8001470 <rest+0x3ce>
		{
			if(x_max[i] == map_x_min[j])
 800142a:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800142e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8001432:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8001436:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800143a:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800143e:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8001442:	f8d7 12b0 	ldr.w	r1, [r7, #688]	@ 0x2b0
 8001446:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800144a:	429a      	cmp	r2, r3
 800144c:	d10b      	bne.n	8001466 <rest+0x3c4>
			{
				overlap_map_x_index[i] = j;
 800144e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8001452:	b2d9      	uxtb	r1, r3
 8001454:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001458:	f5a3 7231 	sub.w	r2, r3, #708	@ 0x2c4
 800145c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8001460:	4413      	add	r3, r2
 8001462:	460a      	mov	r2, r1
 8001464:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 10; j++)
 8001466:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 800146a:	3301      	adds	r3, #1
 800146c:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8001470:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8001474:	2b09      	cmp	r3, #9
 8001476:	ddd8      	ble.n	800142a <rest+0x388>
	for(int i = 0; i < 4; i++)
 8001478:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 800147c:	3301      	adds	r3, #1
 800147e:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8001482:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8001486:	2b03      	cmp	r3, #3
 8001488:	ddcb      	ble.n	8001422 <rest+0x380>
			}
		}
	}

	for(int i = 0; i < 4; i++)
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8001490:	e02d      	b.n	80014ee <rest+0x44c>
	{
		if(map_y_min[overlap_map_x_index[i]] == y_max[i] + BLOCK_WIDTH || y_max[i] == BOTTOM_ROW)
 8001492:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001496:	f5a3 7231 	sub.w	r2, r3, #708	@ 0x2c4
 800149a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 800149e:	4413      	add	r3, r2
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80014a8:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 80014ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80014b0:	4619      	mov	r1, r3
 80014b2:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80014b6:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80014ba:	f8d7 22ac 	ldr.w	r2, [r7, #684]	@ 0x2ac
 80014be:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80014c2:	3317      	adds	r3, #23
 80014c4:	4299      	cmp	r1, r3
 80014c6:	d00b      	beq.n	80014e0 <rest+0x43e>
 80014c8:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80014cc:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80014d0:	f8d7 22ac 	ldr.w	r2, [r7, #684]	@ 0x2ac
 80014d4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80014d8:	f240 1225 	movw	r2, #293	@ 0x125
 80014dc:	4293      	cmp	r3, r2
 80014de:	d101      	bne.n	80014e4 <rest+0x442>
		{
			return 1;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e009      	b.n	80014f8 <rest+0x456>
	for(int i = 0; i < 4; i++)
 80014e4:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80014e8:	3301      	adds	r3, #1
 80014ea:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80014ee:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	ddcd      	ble.n	8001492 <rest+0x3f0>
		}
	}
	return 0;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	f507 7735 	add.w	r7, r7, #724	@ 0x2d4
 80014fe:	46bd      	mov	sp, r7
 8001500:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001502 <block_rest>:

void block_rest(block_t *block, map_t *map)
{
 8001502:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001504:	f5ad 7d2b 	sub.w	sp, sp, #684	@ 0x2ac
 8001508:	af00      	add	r7, sp, #0
 800150a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800150e:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001512:	6018      	str	r0, [r3, #0]
 8001514:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001518:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800151c:	6019      	str	r1, [r3, #0]
	//append the map array with the new blocks in their respective coordinates
	//create new block
	volatile block_t temp_tetromino = *block;
 800151e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001522:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	461c      	mov	r4, r3
 800152a:	f507 7617 	add.w	r6, r7, #604	@ 0x25c
 800152e:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8001532:	4635      	mov	r5, r6
 8001534:	4623      	mov	r3, r4
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	6859      	ldr	r1, [r3, #4]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001540:	3410      	adds	r4, #16
 8001542:	3610      	adds	r6, #16
 8001544:	4564      	cmp	r4, ip
 8001546:	d1f4      	bne.n	8001532 <block_rest+0x30>
 8001548:	4633      	mov	r3, r6
 800154a:	4622      	mov	r2, r4
 800154c:	6810      	ldr	r0, [r2, #0]
 800154e:	6018      	str	r0, [r3, #0]
	volatile map_t temp_map = *map;
 8001550:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001554:	f5a3 7221 	sub.w	r2, r3, #644	@ 0x284
 8001558:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800155c:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f240 2336 	movw	r3, #566	@ 0x236
 800156a:	461a      	mov	r2, r3
 800156c:	f004 fd9a 	bl	80060a4 <memcpy>

	uint8_t y_index[4];
	uint8_t x_index[4];
	uint16_t y_coor[4];
	uint16_t x_coor[4];
	for(int i = 0; i < 4; i++)
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8001576:	e038      	b.n	80015ea <block_rest+0xe8>
	{
		for(int j = 0; j < 4; j++)
 8001578:	2300      	movs	r3, #0
 800157a:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 800157e:	e02b      	b.n	80015d8 <block_rest+0xd6>
		{
			if(temp_tetromino.mat[i][j])
 8001580:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8001584:	009a      	lsls	r2, r3, #2
 8001586:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800158a:	4413      	add	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8001592:	443b      	add	r3, r7
 8001594:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8001598:	b29b      	uxth	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d017      	beq.n	80015ce <block_rest+0xcc>
			{
				x_index[i] = i;
 800159e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80015a2:	b2d9      	uxtb	r1, r3
 80015a4:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80015a8:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 80015ac:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80015b0:	4413      	add	r3, r2
 80015b2:	460a      	mov	r2, r1
 80015b4:	701a      	strb	r2, [r3, #0]
				y_index[j] = j;
 80015b6:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80015ba:	b2d9      	uxtb	r1, r3
 80015bc:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80015c0:	f5a3 7222 	sub.w	r2, r3, #648	@ 0x288
 80015c4:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80015c8:	4413      	add	r3, r2
 80015ca:	460a      	mov	r2, r1
 80015cc:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++)
 80015ce:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80015d2:	3301      	adds	r3, #1
 80015d4:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 80015d8:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80015dc:	2b03      	cmp	r3, #3
 80015de:	ddcf      	ble.n	8001580 <block_rest+0x7e>
	for(int i = 0; i < 4; i++)
 80015e0:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80015e4:	3301      	adds	r3, #1
 80015e6:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 80015ea:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	ddc2      	ble.n	8001578 <block_rest+0x76>
			}
		}
	}
	for(int i = 0; i < 4; i++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 80015f8:	e034      	b.n	8001664 <block_rest+0x162>
	{
		x_coor[i] = temp_tetromino.x[x_index[i]];
 80015fa:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80015fe:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 8001602:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001606:	4413      	add	r3, r2
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	3310      	adds	r3, #16
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8001612:	443b      	add	r3, r7
 8001614:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8001618:	b299      	uxth	r1, r3
 800161a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800161e:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001622:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 8001626:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		y_coor[i] = temp_tetromino.y[y_index[i]];
 800162a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800162e:	f5a3 7222 	sub.w	r2, r3, #648	@ 0x288
 8001632:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001636:	4413      	add	r3, r2
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	3314      	adds	r3, #20
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8001642:	443b      	add	r3, r7
 8001644:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8001648:	b299      	uxth	r1, r3
 800164a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800164e:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8001652:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 8001656:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 4; i++)
 800165a:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 800165e:	3301      	adds	r3, #1
 8001660:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8001664:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001668:	2b03      	cmp	r3, #3
 800166a:	ddc6      	ble.n	80015fa <block_rest+0xf8>
	}

	//get indices for the map coordinates corresponding to the block coordinates
	//set the map logical matrix, and the color
	for(int k = 0; k < 4; k++)
 800166c:	2300      	movs	r3, #0
 800166e:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 8001672:	e092      	b.n	800179a <block_rest+0x298>
	{
		for(int i = 0; i < 10; i++)
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 800167a:	e084      	b.n	8001786 <block_rest+0x284>
		{
			for(int j = 0; j < 13; j++)
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001682:	e077      	b.n	8001774 <block_rest+0x272>
			{
				if(temp_map.x[i] == x_coor[k] && temp_map.y[j] == y_coor[k])
 8001684:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001688:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800168c:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8001690:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8001694:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001698:	b29a      	uxth	r2, r3
 800169a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800169e:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80016a2:	f8d7 1298 	ldr.w	r1, [r7, #664]	@ 0x298
 80016a6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d13b      	bne.n	8001726 <block_rest+0x224>
 80016ae:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80016b2:	f5a3 7221 	sub.w	r2, r3, #644	@ 0x284
 80016b6:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80016ba:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4413      	add	r3, r2
 80016c2:	889b      	ldrh	r3, [r3, #4]
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80016ca:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80016ce:	f8d7 1298 	ldr.w	r1, [r7, #664]	@ 0x298
 80016d2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d125      	bne.n	8001726 <block_rest+0x224>
				{
					temp_map.map_mat[j][i] = ON;
 80016da:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80016de:	f5a3 7121 	sub.w	r1, r3, #644	@ 0x284
 80016e2:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 80016f2:	4413      	add	r3, r2
 80016f4:	3380      	adds	r3, #128	@ 0x80
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	440b      	add	r3, r1
 80016fa:	2201      	movs	r2, #1
 80016fc:	809a      	strh	r2, [r3, #4]
					temp_map.map_color[j][i] = temp_tetromino.color;
 80016fe:	f8b7 325e 	ldrh.w	r3, [r7, #606]	@ 0x25e
 8001702:	b298      	uxth	r0, r3
 8001704:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001708:	f5a3 7121 	sub.w	r1, r3, #644	@ 0x284
 800170c:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 800171c:	4413      	add	r3, r2
 800171e:	4602      	mov	r2, r0
 8001720:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8001724:	e021      	b.n	800176a <block_rest+0x268>

				}
				else
				{
					temp_map.map_mat[j][i] = OFF;
 8001726:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800172a:	f5a3 7121 	sub.w	r1, r3, #644	@ 0x284
 800172e:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 800173e:	4413      	add	r3, r2
 8001740:	3380      	adds	r3, #128	@ 0x80
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	440b      	add	r3, r1
 8001746:	2200      	movs	r2, #0
 8001748:	809a      	strh	r2, [r3, #4]
					temp_map.map_color[j][i] = LCD_COLOR_BLACK;
 800174a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800174e:	f5a3 7121 	sub.w	r1, r3, #644	@ 0x284
 8001752:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8001762:	4413      	add	r3, r2
 8001764:	2200      	movs	r2, #0
 8001766:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for(int j = 0; j < 13; j++)
 800176a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800176e:	3301      	adds	r3, #1
 8001770:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001774:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001778:	2b0c      	cmp	r3, #12
 800177a:	dd83      	ble.n	8001684 <block_rest+0x182>
		for(int i = 0; i < 10; i++)
 800177c:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001780:	3301      	adds	r3, #1
 8001782:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8001786:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 800178a:	2b09      	cmp	r3, #9
 800178c:	f77f af76 	ble.w	800167c <block_rest+0x17a>
	for(int k = 0; k < 4; k++)
 8001790:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8001794:	3301      	adds	r3, #1
 8001796:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 800179a:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 800179e:	2b03      	cmp	r3, #3
 80017a0:	f77f af68 	ble.w	8001674 <block_rest+0x172>
				}
			}
		}
	}
	//create new block
	*map = temp_map;
 80017a4:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80017a8:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80017b2:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f240 2336 	movw	r3, #566	@ 0x236
 80017be:	461a      	mov	r2, r3
 80017c0:	f004 fc70 	bl	80060a4 <memcpy>

	//block_t new = block_create();
	//draw_tetromino(new);
}
 80017c4:	bf00      	nop
 80017c6:	f507 772b 	add.w	r7, r7, #684	@ 0x2ac
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017ce <draw_block>:
	*block = temp_tetromino;
	draw_tetromino(*block);
}

void draw_block(uint16_t x, uint16_t y, uint16_t color)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b084      	sub	sp, #16
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	80fb      	strh	r3, [r7, #6]
 80017d8:	460b      	mov	r3, r1
 80017da:	80bb      	strh	r3, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	807b      	strh	r3, [r7, #2]
	for(int i = 0; i < BLOCK_WIDTH-1; i++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	e00c      	b.n	8001800 <draw_block+0x32>
	{
		LCD_Draw_Horizontal_Line(x, y+i, BLOCK_WIDTH-1, color);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	88bb      	ldrh	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	b299      	uxth	r1, r3
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	88f8      	ldrh	r0, [r7, #6]
 80017f4:	2216      	movs	r2, #22
 80017f6:	f000 fbee 	bl	8001fd6 <LCD_Draw_Horizontal_Line>
	for(int i = 0; i < BLOCK_WIDTH-1; i++)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	3301      	adds	r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b15      	cmp	r3, #21
 8001804:	ddef      	ble.n	80017e6 <draw_block+0x18>
	}
}
 8001806:	bf00      	nop
 8001808:	bf00      	nop
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <draw_shapes>:

void draw_shapes()
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
	uint16_t block_size = 23;
 8001816:	2317      	movs	r3, #23
 8001818:	80fb      	strh	r3, [r7, #6]
	uint16_t spacing = 15;
 800181a:	230f      	movs	r3, #15
 800181c:	80bb      	strh	r3, [r7, #4]
	uint16_t x_offset = (LCD_PIXEL_WIDTH - (7 * (block_size * 4 + spacing))) / 2;
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	009a      	lsls	r2, r3, #2
 8001822:	88bb      	ldrh	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	461a      	mov	r2, r3
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	33f0      	adds	r3, #240	@ 0xf0
 800182e:	0fda      	lsrs	r2, r3, #31
 8001830:	4413      	add	r3, r2
 8001832:	105b      	asrs	r3, r3, #1
 8001834:	807b      	strh	r3, [r7, #2]
	//uint16_t y_offset = 50;

	// "I" shape (cyan) //fb3
	for (int i = 0; i < 4; i++)
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
 800183a:	e012      	b.n	8001862 <draw_shapes+0x52>
	{
	   	draw_block(6, 193 + 31 + i*BLOCK_WIDTH, LCD_COLOR_CYAN);
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	b29b      	uxth	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	0052      	lsls	r2, r2, #1
 8001844:	441a      	add	r2, r3
 8001846:	00d2      	lsls	r2, r2, #3
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	b29b      	uxth	r3, r3
 800184c:	33e0      	adds	r3, #224	@ 0xe0
 800184e:	b29b      	uxth	r3, r3
 8001850:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001854:	4619      	mov	r1, r3
 8001856:	2006      	movs	r0, #6
 8001858:	f7ff ffb9 	bl	80017ce <draw_block>
	for (int i = 0; i < 4; i++)
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	3301      	adds	r3, #1
 8001860:	61fb      	str	r3, [r7, #28]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	2b03      	cmp	r3, #3
 8001866:	dde9      	ble.n	800183c <draw_shapes+0x2c>
	}


	// "L" shape (blue)
	x_offset += block_size * 4 + spacing;
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	b29a      	uxth	r2, r3
 800186e:	88bb      	ldrh	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	b29a      	uxth	r2, r3
 8001874:	887b      	ldrh	r3, [r7, #2]
 8001876:	4413      	add	r3, r2
 8001878:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < 3; i++)
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	e014      	b.n	80018aa <draw_shapes+0x9a>
	{
	   	draw_block(80 + i * BLOCK_WIDTH + 88 + 4 - 28, 193 + 31 + block_size, LCD_COLOR_GREEN);
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	b29b      	uxth	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	0052      	lsls	r2, r2, #1
 8001888:	441a      	add	r2, r3
 800188a:	00d2      	lsls	r2, r2, #3
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	b29b      	uxth	r3, r3
 8001890:	3390      	adds	r3, #144	@ 0x90
 8001892:	b298      	uxth	r0, r3
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	33e0      	adds	r3, #224	@ 0xe0
 8001898:	b29b      	uxth	r3, r3
 800189a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800189e:	4619      	mov	r1, r3
 80018a0:	f7ff ff95 	bl	80017ce <draw_block>
	for (int i = 0; i < 3; i++)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	3301      	adds	r3, #1
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	dde7      	ble.n	8001880 <draw_shapes+0x70>
	}
	draw_block(216 - 26, 193 + 31, LCD_COLOR_GREEN);
 80018b0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80018b4:	21e0      	movs	r1, #224	@ 0xe0
 80018b6:	20be      	movs	r0, #190	@ 0xbe
 80018b8:	f7ff ff89 	bl	80017ce <draw_block>

	// "J" shape (yellow)
	x_offset += block_size * 4 + spacing;
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	88bb      	ldrh	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	887b      	ldrh	r3, [r7, #2]
 80018ca:	4413      	add	r3, r2
 80018cc:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < 3; i++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	e019      	b.n	8001908 <draw_shapes+0xf8>
	{
	   	draw_block(145 + i * BLOCK_WIDTH - 39 - block_size*2 - 18 -13, 193 + 31 + block_size, LCD_COLOR_YELLOW);
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	461a      	mov	r2, r3
 80018da:	0052      	lsls	r2, r2, #1
 80018dc:	441a      	add	r2, r3
 80018de:	00d2      	lsls	r2, r2, #3
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	334b      	adds	r3, #75	@ 0x4b
 80018f0:	b298      	uxth	r0, r3
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	33e0      	adds	r3, #224	@ 0xe0
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80018fc:	4619      	mov	r1, r3
 80018fe:	f7ff ff66 	bl	80017ce <draw_block>
	for (int i = 0; i < 3; i++)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	3301      	adds	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	2b02      	cmp	r3, #2
 800190c:	dde2      	ble.n	80018d4 <draw_shapes+0xc4>
	}
	draw_block(123 + block_size - 39 - 18 -14, 193 + 31 + 2* block_size, LCD_COLOR_YELLOW);
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	3334      	adds	r3, #52	@ 0x34
 8001912:	b298      	uxth	r0, r3
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	3370      	adds	r3, #112	@ 0x70
 8001918:	b29b      	uxth	r3, r3
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	b29b      	uxth	r3, r3
 800191e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001922:	4619      	mov	r1, r3
 8001924:	f7ff ff53 	bl	80017ce <draw_block>

	// "O" shape (grn)
	x_offset += block_size * 4 + spacing;
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	b29a      	uxth	r2, r3
 800192e:	88bb      	ldrh	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	b29a      	uxth	r2, r3
 8001934:	887b      	ldrh	r3, [r7, #2]
 8001936:	4413      	add	r3, r2
 8001938:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < 2; i++) {
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	e026      	b.n	800198e <draw_shapes+0x17e>
	    for (int j = 0; j < 2; j++) {
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	e01d      	b.n	8001982 <draw_shapes+0x172>
	       	draw_block(x_offset + i * BLOCK_WIDTH - 7 - 18 -13, 195+75 + j * block_size, LCD_COLOR_ORANGE);
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	b29b      	uxth	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	0052      	lsls	r2, r2, #1
 800194e:	441a      	add	r2, r3
 8001950:	00d2      	lsls	r2, r2, #3
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	b29a      	uxth	r2, r3
 8001956:	887b      	ldrh	r3, [r7, #2]
 8001958:	4413      	add	r3, r2
 800195a:	b29b      	uxth	r3, r3
 800195c:	3b26      	subs	r3, #38	@ 0x26
 800195e:	b298      	uxth	r0, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	b29b      	uxth	r3, r3
 8001964:	88fa      	ldrh	r2, [r7, #6]
 8001966:	fb12 f303 	smulbb	r3, r2, r3
 800196a:	b29b      	uxth	r3, r3
 800196c:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 8001970:	b29b      	uxth	r3, r3
 8001972:	f64f 32c1 	movw	r2, #64449	@ 0xfbc1
 8001976:	4619      	mov	r1, r3
 8001978:	f7ff ff29 	bl	80017ce <draw_block>
	    for (int j = 0; j < 2; j++) {
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3301      	adds	r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b01      	cmp	r3, #1
 8001986:	ddde      	ble.n	8001946 <draw_shapes+0x136>
	for (int i = 0; i < 2; i++) {
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	3301      	adds	r3, #1
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	2b01      	cmp	r3, #1
 8001992:	ddd5      	ble.n	8001940 <draw_shapes+0x130>
	    }
	}

	// "S" shape (green)
	x_offset += block_size * 4 + spacing;
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	b29a      	uxth	r2, r3
 800199a:	88bb      	ldrh	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	b29a      	uxth	r2, r3
 80019a0:	887b      	ldrh	r3, [r7, #2]
 80019a2:	4413      	add	r3, r2
 80019a4:	807b      	strh	r3, [r7, #2]
	draw_block(x_offset - 30, 195 + 75 + block_size, LCD_COLOR_MAGENTA);
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	3b1e      	subs	r3, #30
 80019aa:	b298      	uxth	r0, r3
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80019b8:	4619      	mov	r1, r3
 80019ba:	f7ff ff08 	bl	80017ce <draw_block>
	draw_block(x_offset - 30 + block_size, 195 + 75 + block_size, LCD_COLOR_MAGENTA);
 80019be:	887a      	ldrh	r2, [r7, #2]
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	4413      	add	r3, r2
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	3b1e      	subs	r3, #30
 80019c8:	b298      	uxth	r0, r3
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80019d6:	4619      	mov	r1, r3
 80019d8:	f7ff fef9 	bl	80017ce <draw_block>
	draw_block(x_offset - 30 + block_size, 195 + 75, LCD_COLOR_MAGENTA);
 80019dc:	887a      	ldrh	r2, [r7, #2]
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	4413      	add	r3, r2
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	3b1e      	subs	r3, #30
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80019ec:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff feec 	bl	80017ce <draw_block>
	draw_block(x_offset - 30 + block_size * 2, 195 + 75, LCD_COLOR_MAGENTA);
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	887b      	ldrh	r3, [r7, #2]
 80019fe:	4413      	add	r3, r2
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	3b1e      	subs	r3, #30
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001a0a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fedd 	bl	80017ce <draw_block>

	// "T" shape (purple)
	x_offset += block_size * 4 + spacing;
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	88bb      	ldrh	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	887b      	ldrh	r3, [r7, #2]
 8001a22:	4413      	add	r3, r2
 8001a24:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < 3; i++) {
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	e013      	b.n	8001a54 <draw_shapes+0x244>
	   	draw_block(98 + 8 + i * BLOCK_WIDTH - 18 -13, 196 + 97, LCD_COLOR_BLUE2);
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	0052      	lsls	r2, r2, #1
 8001a34:	441a      	add	r2, r3
 8001a36:	00d2      	lsls	r2, r2, #3
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	334b      	adds	r3, #75	@ 0x4b
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	f240 521f 	movw	r2, #1311	@ 0x51f
 8001a44:	f240 1125 	movw	r1, #293	@ 0x125
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fec0 	bl	80017ce <draw_block>
	for (int i = 0; i < 3; i++) {
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	3301      	adds	r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	dde8      	ble.n	8001a2c <draw_shapes+0x21c>
	}
	draw_block(98 - 18 + 8 + block_size -13, 194 + 53 + block_size, LCD_COLOR_BLUE2);
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	334b      	adds	r3, #75	@ 0x4b
 8001a5e:	b298      	uxth	r0, r3
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	33f7      	adds	r3, #247	@ 0xf7
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	f240 521f 	movw	r2, #1311	@ 0x51f
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f7ff feaf 	bl	80017ce <draw_block>

	// "Z" shape (red)
	x_offset += block_size * 4 + spacing;
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	88bb      	ldrh	r3, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	4413      	add	r3, r2
 8001a80:	807b      	strh	r3, [r7, #2]
	draw_block(x_offset - 50, 194 + 52, LCD_COLOR_STRAWBERRY);
 8001a82:	887b      	ldrh	r3, [r7, #2]
 8001a84:	3b32      	subs	r3, #50	@ 0x32
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8001a8c:	21f6      	movs	r1, #246	@ 0xf6
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fe9d 	bl	80017ce <draw_block>
	draw_block(x_offset - 50 + block_size, 194 + 52, LCD_COLOR_STRAWBERRY);
 8001a94:	887a      	ldrh	r2, [r7, #2]
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	4413      	add	r3, r2
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	3b32      	subs	r3, #50	@ 0x32
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8001aa4:	21f6      	movs	r1, #246	@ 0xf6
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fe91 	bl	80017ce <draw_block>
	draw_block(x_offset - 50 + block_size, 194 + 52 + block_size, LCD_COLOR_STRAWBERRY);
 8001aac:	887a      	ldrh	r2, [r7, #2]
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	3b32      	subs	r3, #50	@ 0x32
 8001ab6:	b298      	uxth	r0, r3
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	33f6      	adds	r3, #246	@ 0xf6
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f7ff fe83 	bl	80017ce <draw_block>
	draw_block(x_offset - 50 + block_size * 2, 194 + 52 + block_size, LCD_COLOR_STRAWBERRY);
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	887b      	ldrh	r3, [r7, #2]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	3b32      	subs	r3, #50	@ 0x32
 8001ad6:	b298      	uxth	r0, r3
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	33f6      	adds	r3, #246	@ 0xf6
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	f64f 1287 	movw	r2, #63879	@ 0xf987
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff fe73 	bl	80017ce <draw_block>

	// "O" shape (magenta)
	draw_block(x_offset - 50 + block_size, 194 + 52 -9*block_size, LCD_COLOR_MAGENTA);
 8001ae8:	887a      	ldrh	r2, [r7, #2]
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	4413      	add	r3, r2
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3b32      	subs	r3, #50	@ 0x32
 8001af2:	b298      	uxth	r0, r3
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	461a      	mov	r2, r3
 8001af8:	0352      	lsls	r2, r2, #13
 8001afa:	1ad2      	subs	r2, r2, r3
 8001afc:	00d2      	lsls	r2, r2, #3
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	33f6      	adds	r3, #246	@ 0xf6
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f7ff fe5f 	bl	80017ce <draw_block>
	draw_block(x_offset - 50 , 194 + 52 - 9*block_size, LCD_COLOR_MAGENTA);
 8001b10:	887b      	ldrh	r3, [r7, #2]
 8001b12:	3b32      	subs	r3, #50	@ 0x32
 8001b14:	b298      	uxth	r0, r3
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	0352      	lsls	r2, r2, #13
 8001b1c:	1ad2      	subs	r2, r2, r3
 8001b1e:	00d2      	lsls	r2, r2, #3
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	33f6      	adds	r3, #246	@ 0xf6
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f7ff fe4e 	bl	80017ce <draw_block>
	draw_block(x_offset - 50 , 194 + 52 + block_size - 9*block_size, LCD_COLOR_MAGENTA);
 8001b32:	887b      	ldrh	r3, [r7, #2]
 8001b34:	3b32      	subs	r3, #50	@ 0x32
 8001b36:	b298      	uxth	r0, r3
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	0352      	lsls	r2, r2, #13
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	33f6      	adds	r3, #246	@ 0xf6
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f7ff fe3e 	bl	80017ce <draw_block>
	draw_block(x_offset - 50 + block_size, 194 + 52 + block_size - 9*block_size, LCD_COLOR_MAGENTA);
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	4413      	add	r3, r2
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	3b32      	subs	r3, #50	@ 0x32
 8001b5c:	b298      	uxth	r0, r3
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	461a      	mov	r2, r3
 8001b62:	0352      	lsls	r2, r2, #13
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	33f6      	adds	r3, #246	@ 0xf6
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001b72:	4619      	mov	r1, r3
 8001b74:	f7ff fe2b 	bl	80017ce <draw_block>
}
 8001b78:	bf00      	nop
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <draw_tetromino>:

void draw_tetromino(block_t block)
{
 8001b80:	b084      	sub	sp, #16
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	f107 0c10 	add.w	ip, r7, #16
 8001b8c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i < 4; i++)
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	e029      	b.n	8001bea <draw_tetromino+0x6a>
	{
		for(int j = 0; j < 4; j++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	e020      	b.n	8001bde <draw_tetromino+0x5e>
		{
			if(block.mat[i][j])
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	009a      	lsls	r2, r3, #2
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	3310      	adds	r3, #16
 8001ba8:	443b      	add	r3, r7
 8001baa:	889b      	ldrh	r3, [r3, #4]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d012      	beq.n	8001bd8 <draw_tetromino+0x58>
			{
				draw_block(block.x[i], block.y[j], block.color);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3310      	adds	r3, #16
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	3310      	adds	r3, #16
 8001bba:	443b      	add	r3, r7
 8001bbc:	889b      	ldrh	r3, [r3, #4]
 8001bbe:	b298      	uxth	r0, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	3314      	adds	r3, #20
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	3310      	adds	r3, #16
 8001bc8:	443b      	add	r3, r7
 8001bca:	889b      	ldrh	r3, [r3, #4]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	8a7a      	ldrh	r2, [r7, #18]
 8001bd0:	b292      	uxth	r2, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f7ff fdfb 	bl	80017ce <draw_block>
		for(int j = 0; j < 4; j++)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	dddb      	ble.n	8001b9c <draw_tetromino+0x1c>
	for(int i = 0; i < 4; i++)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3301      	adds	r3, #1
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	ddd2      	ble.n	8001b96 <draw_tetromino+0x16>
			}
		}
	}
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bfc:	b004      	add	sp, #16
 8001bfe:	4770      	bx	lr

08001c00 <clear_tetromino>:

void clear_tetromino(block_t block)
{
 8001c00:	b084      	sub	sp, #16
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	f107 0c10 	add.w	ip, r7, #16
 8001c0c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i < 4; i++)
 8001c10:	2300      	movs	r3, #0
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	e028      	b.n	8001c68 <clear_tetromino+0x68>
	{
		for(int j = 0; j < 4; j++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	e01f      	b.n	8001c5c <clear_tetromino+0x5c>
		{
			if(block.mat[i][j])
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	009a      	lsls	r2, r3, #2
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	3310      	adds	r3, #16
 8001c28:	443b      	add	r3, r7
 8001c2a:	889b      	ldrh	r3, [r3, #4]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d011      	beq.n	8001c56 <clear_tetromino+0x56>
			{
				draw_block(block.x[i], block.y[j], LCD_COLOR_BLACK);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3310      	adds	r3, #16
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	3310      	adds	r3, #16
 8001c3a:	443b      	add	r3, r7
 8001c3c:	889b      	ldrh	r3, [r3, #4]
 8001c3e:	b298      	uxth	r0, r3
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	3314      	adds	r3, #20
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	3310      	adds	r3, #16
 8001c48:	443b      	add	r3, r7
 8001c4a:	889b      	ldrh	r3, [r3, #4]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	2200      	movs	r2, #0
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7ff fdbc 	bl	80017ce <draw_block>
		for(int j = 0; j < 4; j++)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	dddc      	ble.n	8001c1c <clear_tetromino+0x1c>
	for(int i = 0; i < 4; i++)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3301      	adds	r3, #1
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	ddd3      	ble.n	8001c16 <clear_tetromino+0x16>
			}
		}
	}
}
 8001c6e:	bf00      	nop
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c7a:	b004      	add	sp, #16
 8001c7c:	4770      	bx	lr
	...

08001c80 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08c      	sub	sp, #48	@ 0x30
 8001c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	4b5a      	ldr	r3, [pc, #360]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	4a59      	ldr	r2, [pc, #356]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001c90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c96:	4b57      	ldr	r3, [pc, #348]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c9e:	61bb      	str	r3, [r7, #24]
 8001ca0:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	4b53      	ldr	r3, [pc, #332]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	4a52      	ldr	r2, [pc, #328]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb2:	4b50      	ldr	r3, [pc, #320]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	4b4c      	ldr	r3, [pc, #304]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	4a4b      	ldr	r2, [pc, #300]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cce:	4b49      	ldr	r3, [pc, #292]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b45      	ldr	r3, [pc, #276]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	4a44      	ldr	r2, [pc, #272]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cea:	4b42      	ldr	r3, [pc, #264]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	4b3e      	ldr	r3, [pc, #248]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	4a3d      	ldr	r2, [pc, #244]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001d00:	f043 0308 	orr.w	r3, r3, #8
 8001d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d06:	4b3b      	ldr	r3, [pc, #236]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	4b37      	ldr	r3, [pc, #220]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	4a36      	ldr	r2, [pc, #216]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001d1c:	f043 0320 	orr.w	r3, r3, #32
 8001d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d22:	4b34      	ldr	r3, [pc, #208]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	f003 0320 	and.w	r3, r3, #32
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	603b      	str	r3, [r7, #0]
 8001d32:	4b30      	ldr	r3, [pc, #192]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	4a2f      	ldr	r2, [pc, #188]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001d38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001df4 <LCD_GPIO_Init+0x174>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001d4a:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001d4e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001d5c:	230e      	movs	r3, #14
 8001d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001d60:	f107 031c 	add.w	r3, r7, #28
 8001d64:	4619      	mov	r1, r3
 8001d66:	4824      	ldr	r0, [pc, #144]	@ (8001df8 <LCD_GPIO_Init+0x178>)
 8001d68:	f001 fe12 	bl	8003990 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001d6c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001d70:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001d72:	f107 031c 	add.w	r3, r7, #28
 8001d76:	4619      	mov	r1, r3
 8001d78:	4820      	ldr	r0, [pc, #128]	@ (8001dfc <LCD_GPIO_Init+0x17c>)
 8001d7a:	f001 fe09 	bl	8003990 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001d7e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001d82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001d84:	f107 031c 	add.w	r3, r7, #28
 8001d88:	4619      	mov	r1, r3
 8001d8a:	481d      	ldr	r0, [pc, #116]	@ (8001e00 <LCD_GPIO_Init+0x180>)
 8001d8c:	f001 fe00 	bl	8003990 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001d90:	2348      	movs	r3, #72	@ 0x48
 8001d92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	4619      	mov	r1, r3
 8001d9a:	481a      	ldr	r0, [pc, #104]	@ (8001e04 <LCD_GPIO_Init+0x184>)
 8001d9c:	f001 fdf8 	bl	8003990 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001da0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001da6:	f107 031c 	add.w	r3, r7, #28
 8001daa:	4619      	mov	r1, r3
 8001dac:	4816      	ldr	r0, [pc, #88]	@ (8001e08 <LCD_GPIO_Init+0x188>)
 8001dae:	f001 fdef 	bl	8003990 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001db2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001db6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4813      	ldr	r0, [pc, #76]	@ (8001e0c <LCD_GPIO_Init+0x18c>)
 8001dc0:	f001 fde6 	bl	8003990 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001dc8:	2309      	movs	r3, #9
 8001dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	480a      	ldr	r0, [pc, #40]	@ (8001dfc <LCD_GPIO_Init+0x17c>)
 8001dd4:	f001 fddc 	bl	8003990 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001dd8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ddc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001dde:	f107 031c 	add.w	r3, r7, #28
 8001de2:	4619      	mov	r1, r3
 8001de4:	4809      	ldr	r0, [pc, #36]	@ (8001e0c <LCD_GPIO_Init+0x18c>)
 8001de6:	f001 fdd3 	bl	8003990 <HAL_GPIO_Init>
}
 8001dea:	bf00      	nop
 8001dec:	3730      	adds	r7, #48	@ 0x30
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020000 	.word	0x40020000
 8001dfc:	40020400 	.word	0x40020400
 8001e00:	40020800 	.word	0x40020800
 8001e04:	40020c00 	.word	0x40020c00
 8001e08:	40021400 	.word	0x40021400
 8001e0c:	40021800 	.word	0x40021800

08001e10 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b090      	sub	sp, #64	@ 0x40
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8001e1e:	23f0      	movs	r3, #240	@ 0xf0
 8001e20:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8001e26:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001e2a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001e30:	23ff      	movs	r3, #255	@ 0xff
 8001e32:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001e38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001e3e:	2305      	movs	r3, #5
 8001e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	@ (8001e88 <LTCD_Layer_Init+0x78>)
 8001e4a:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001e4c:	23f0      	movs	r3, #240	@ 0xf0
 8001e4e:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001e50:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001e54:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001e68:	79fa      	ldrb	r2, [r7, #7]
 8001e6a:	f107 030c 	add.w	r3, r7, #12
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4806      	ldr	r0, [pc, #24]	@ (8001e8c <LTCD_Layer_Init+0x7c>)
 8001e72:	f002 faef 	bl	8004454 <HAL_LTDC_ConfigLayer>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001e7c:	f000 f9a4 	bl	80021c8 <LCD_Error_Handler>
	}
}
 8001e80:	bf00      	nop
 8001e82:	3740      	adds	r7, #64	@ 0x40
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000114 	.word	0x20000114
 8001e8c:	20000038 	.word	0x20000038

08001e90 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001e94:	4b2a      	ldr	r3, [pc, #168]	@ (8001f40 <LTCD__Init+0xb0>)
 8001e96:	4a2b      	ldr	r2, [pc, #172]	@ (8001f44 <LTCD__Init+0xb4>)
 8001e98:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001e9a:	4b29      	ldr	r3, [pc, #164]	@ (8001f40 <LTCD__Init+0xb0>)
 8001e9c:	2209      	movs	r2, #9
 8001e9e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001ea0:	4b27      	ldr	r3, [pc, #156]	@ (8001f40 <LTCD__Init+0xb0>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001ea6:	4b26      	ldr	r3, [pc, #152]	@ (8001f40 <LTCD__Init+0xb0>)
 8001ea8:	221d      	movs	r2, #29
 8001eaa:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001eac:	4b24      	ldr	r3, [pc, #144]	@ (8001f40 <LTCD__Init+0xb0>)
 8001eae:	2203      	movs	r2, #3
 8001eb0:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001eb2:	4b23      	ldr	r3, [pc, #140]	@ (8001f40 <LTCD__Init+0xb0>)
 8001eb4:	f240 120d 	movw	r2, #269	@ 0x10d
 8001eb8:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001eba:	4b21      	ldr	r3, [pc, #132]	@ (8001f40 <LTCD__Init+0xb0>)
 8001ebc:	f240 1243 	movw	r2, #323	@ 0x143
 8001ec0:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f40 <LTCD__Init+0xb0>)
 8001ec4:	f240 1217 	movw	r2, #279	@ 0x117
 8001ec8:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001eca:	4b1d      	ldr	r3, [pc, #116]	@ (8001f40 <LTCD__Init+0xb0>)
 8001ecc:	f240 1247 	movw	r2, #327	@ 0x147
 8001ed0:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f40 <LTCD__Init+0xb0>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8001eda:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <LTCD__Init+0xb0>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001ee2:	4b17      	ldr	r3, [pc, #92]	@ (8001f40 <LTCD__Init+0xb0>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001eea:	4b17      	ldr	r3, [pc, #92]	@ (8001f48 <LTCD__Init+0xb8>)
 8001eec:	2208      	movs	r2, #8
 8001eee:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001ef0:	4b15      	ldr	r3, [pc, #84]	@ (8001f48 <LTCD__Init+0xb8>)
 8001ef2:	22c0      	movs	r2, #192	@ 0xc0
 8001ef4:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001ef6:	4b14      	ldr	r3, [pc, #80]	@ (8001f48 <LTCD__Init+0xb8>)
 8001ef8:	2204      	movs	r2, #4
 8001efa:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001efc:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <LTCD__Init+0xb8>)
 8001efe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f02:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001f04:	4810      	ldr	r0, [pc, #64]	@ (8001f48 <LTCD__Init+0xb8>)
 8001f06:	f003 f8ff 	bl	8005108 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f40 <LTCD__Init+0xb0>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001f10:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <LTCD__Init+0xb0>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001f16:	4b0a      	ldr	r3, [pc, #40]	@ (8001f40 <LTCD__Init+0xb0>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001f1c:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <LTCD__Init+0xb0>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8001f22:	f7ff fead 	bl	8001c80 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001f26:	4806      	ldr	r0, [pc, #24]	@ (8001f40 <LTCD__Init+0xb0>)
 8001f28:	f002 f9c4 	bl	80042b4 <HAL_LTDC_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001f32:	f000 f949 	bl	80021c8 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8001f36:	f000 fa00 	bl	800233a <ili9341_Init>
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000038 	.word	0x20000038
 8001f44:	40016800 	.word	0x40016800
 8001f48:	200000e0 	.word	0x200000e0

08001f4c <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	80fb      	strh	r3, [r7, #6]
 8001f56:	460b      	mov	r3, r1
 8001f58:	80bb      	strh	r3, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001f5e:	88ba      	ldrh	r2, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	1a9b      	subs	r3, r3, r2
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	461a      	mov	r2, r3
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	4905      	ldr	r1, [pc, #20]	@ (8001f84 <LCD_Draw_Pixel+0x38>)
 8001f70:	887a      	ldrh	r2, [r7, #2]
 8001f72:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000114 	.word	0x20000114

08001f88 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4604      	mov	r4, r0
 8001f90:	4608      	mov	r0, r1
 8001f92:	4611      	mov	r1, r2
 8001f94:	461a      	mov	r2, r3
 8001f96:	4623      	mov	r3, r4
 8001f98:	80fb      	strh	r3, [r7, #6]
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	80bb      	strh	r3, [r7, #4]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	807b      	strh	r3, [r7, #2]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	81fb      	strh	r3, [r7, #14]
 8001faa:	e00b      	b.n	8001fc4 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8001fac:	89fa      	ldrh	r2, [r7, #14]
 8001fae:	88bb      	ldrh	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	b299      	uxth	r1, r3
 8001fb4:	883a      	ldrh	r2, [r7, #0]
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ffc7 	bl	8001f4c <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8001fbe:	89fb      	ldrh	r3, [r7, #14]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	81fb      	strh	r3, [r7, #14]
 8001fc4:	89fa      	ldrh	r2, [r7, #14]
 8001fc6:	887b      	ldrh	r3, [r7, #2]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d3ef      	bcc.n	8001fac <LCD_Draw_Vertical_Line+0x24>
  }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd90      	pop	{r4, r7, pc}

08001fd6 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001fd6:	b590      	push	{r4, r7, lr}
 8001fd8:	b085      	sub	sp, #20
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4604      	mov	r4, r0
 8001fde:	4608      	mov	r0, r1
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4623      	mov	r3, r4
 8001fe6:	80fb      	strh	r3, [r7, #6]
 8001fe8:	4603      	mov	r3, r0
 8001fea:	80bb      	strh	r3, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	81fb      	strh	r3, [r7, #14]
 8001ff8:	e00b      	b.n	8002012 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8001ffa:	89fa      	ldrh	r2, [r7, #14]
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	4413      	add	r3, r2
 8002000:	b29b      	uxth	r3, r3
 8002002:	883a      	ldrh	r2, [r7, #0]
 8002004:	88b9      	ldrh	r1, [r7, #4]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff ffa0 	bl	8001f4c <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 800200c:	89fb      	ldrh	r3, [r7, #14]
 800200e:	3301      	adds	r3, #1
 8002010:	81fb      	strh	r3, [r7, #14]
 8002012:	89fa      	ldrh	r2, [r7, #14]
 8002014:	887b      	ldrh	r3, [r7, #2]
 8002016:	429a      	cmp	r2, r3
 8002018:	d3ef      	bcc.n	8001ffa <LCD_Draw_Horizontal_Line+0x24>
  }
}
 800201a:	bf00      	nop
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	bd90      	pop	{r4, r7, pc}

08002024 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	460a      	mov	r2, r1
 800202e:	71fb      	strb	r3, [r7, #7]
 8002030:	4613      	mov	r3, r2
 8002032:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10e      	bne.n	8002058 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	e007      	b.n	8002050 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8002040:	4908      	ldr	r1, [pc, #32]	@ (8002064 <LCD_Clear+0x40>)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	88ba      	ldrh	r2, [r7, #4]
 8002046:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3301      	adds	r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8002056:	d3f3      	bcc.n	8002040 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	20000114 	.word	0x20000114

08002068 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8002072:	4a04      	ldr	r2, [pc, #16]	@ (8002084 <LCD_SetTextColor+0x1c>)
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	8013      	strh	r3, [r2, #0]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	20000000 	.word	0x20000000

08002088 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8002090:	4a04      	ldr	r2, [pc, #16]	@ (80020a4 <LCD_SetFont+0x1c>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6013      	str	r3, [r2, #0]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000110 	.word	0x20000110

080020a8 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	603a      	str	r2, [r7, #0]
 80020b2:	80fb      	strh	r3, [r7, #6]
 80020b4:	460b      	mov	r3, r1
 80020b6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	e04c      	b.n	8002160 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	e03f      	b.n	800214c <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	4619      	mov	r1, r3
 80020d8:	4b27      	ldr	r3, [pc, #156]	@ (8002178 <LCD_Draw_Char+0xd0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	889b      	ldrh	r3, [r3, #4]
 80020de:	4a27      	ldr	r2, [pc, #156]	@ (800217c <LCD_Draw_Char+0xd4>)
 80020e0:	fba2 2303 	umull	r2, r3, r2, r3
 80020e4:	08db      	lsrs	r3, r3, #3
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	2280      	movs	r2, #128	@ 0x80
 80020ec:	409a      	lsls	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	fa42 f303 	asr.w	r3, r2, r3
 80020f4:	400b      	ands	r3, r1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d104      	bne.n	8002104 <LCD_Draw_Char+0x5c>
 80020fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002178 <LCD_Draw_Char+0xd0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	889b      	ldrh	r3, [r3, #4]
 8002100:	2b0c      	cmp	r3, #12
 8002102:	d920      	bls.n	8002146 <LCD_Draw_Char+0x9e>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	4413      	add	r3, r2
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	fa42 f303 	asr.w	r3, r2, r3
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d104      	bne.n	8002128 <LCD_Draw_Char+0x80>
 800211e:	4b16      	ldr	r3, [pc, #88]	@ (8002178 <LCD_Draw_Char+0xd0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	889b      	ldrh	r3, [r3, #4]
 8002124:	2b0c      	cmp	r3, #12
 8002126:	d80e      	bhi.n	8002146 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	b29a      	uxth	r2, r3
 800212c:	88fb      	ldrh	r3, [r7, #6]
 800212e:	4413      	add	r3, r2
 8002130:	b298      	uxth	r0, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	b29a      	uxth	r2, r3
 8002136:	88bb      	ldrh	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	b29b      	uxth	r3, r3
 800213c:	4a10      	ldr	r2, [pc, #64]	@ (8002180 <LCD_Draw_Char+0xd8>)
 800213e:	8812      	ldrh	r2, [r2, #0]
 8002140:	4619      	mov	r1, r3
 8002142:	f7ff ff03 	bl	8001f4c <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	3301      	adds	r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <LCD_Draw_Char+0xd0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	889b      	ldrh	r3, [r3, #4]
 8002152:	461a      	mov	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4293      	cmp	r3, r2
 8002158:	d3b8      	bcc.n	80020cc <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	3301      	adds	r3, #1
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	4b05      	ldr	r3, [pc, #20]	@ (8002178 <LCD_Draw_Char+0xd0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	88db      	ldrh	r3, [r3, #6]
 8002166:	461a      	mov	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4293      	cmp	r3, r2
 800216c:	d3ab      	bcc.n	80020c6 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 800216e:	bf00      	nop
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000110 	.word	0x20000110
 800217c:	aaaaaaab 	.word	0xaaaaaaab
 8002180:	20000000 	.word	0x20000000

08002184 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	80fb      	strh	r3, [r7, #6]
 800218e:	460b      	mov	r3, r1
 8002190:	80bb      	strh	r3, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	3b20      	subs	r3, #32
 800219a:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 800219c:	4b09      	ldr	r3, [pc, #36]	@ (80021c4 <LCD_DisplayChar+0x40>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	4907      	ldr	r1, [pc, #28]	@ (80021c4 <LCD_DisplayChar+0x40>)
 80021a6:	6809      	ldr	r1, [r1, #0]
 80021a8:	88c9      	ldrh	r1, [r1, #6]
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	441a      	add	r2, r3
 80021b2:	88b9      	ldrh	r1, [r7, #4]
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ff76 	bl	80020a8 <LCD_Draw_Char>
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000110 	.word	0x20000110

080021c8 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021cc:	b672      	cpsid	i
}
 80021ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <LCD_Error_Handler+0x8>

080021d4 <game_init>:
 */
#include "game.h"
volatile block_t block1, block2;
volatile map_t map;
void game_init()
{
 80021d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d6:	f5ad 7d29 	sub.w	sp, sp, #676	@ 0x2a4
 80021da:	af0a      	add	r7, sp, #40	@ 0x28
	//STMPE811_t touch_data = {0};

	//while(STMPE811_ReadTouch(touch_data) != STMPE811_State_Pressed)
	//{
		//map_draw();
		draw_shapes();
 80021dc:	f7ff fb18 	bl	8001810 <draw_shapes>
		start_screen();
 80021e0:	f7fe fa12 	bl	8000608 <start_screen>
	//}

	HAL_Delay(2000);
 80021e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80021e8:	f001 fac8 	bl	800377c <HAL_Delay>
	LCD_Clear(0,LCD_COLOR_BLACK);
 80021ec:	2100      	movs	r1, #0
 80021ee:	2000      	movs	r0, #0
 80021f0:	f7ff ff18 	bl	8002024 <LCD_Clear>
	map_draw();
 80021f4:	f7fe f987 	bl	8000506 <map_draw>
	//rng_init();
	block1 = block_create(6);
 80021f8:	4d49      	ldr	r5, [pc, #292]	@ (8002320 <game_init+0x14c>)
 80021fa:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80021fe:	2106      	movs	r1, #6
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe fb6f 	bl	80008e4 <block_create>
 8002206:	f507 740e 	add.w	r4, r7, #568	@ 0x238
 800220a:	462e      	mov	r6, r5
 800220c:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002210:	4635      	mov	r5, r6
 8002212:	4623      	mov	r3, r4
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800221e:	3410      	adds	r4, #16
 8002220:	3610      	adds	r6, #16
 8002222:	4564      	cmp	r4, ip
 8002224:	d1f4      	bne.n	8002210 <game_init+0x3c>
 8002226:	4633      	mov	r3, r6
 8002228:	4622      	mov	r2, r4
 800222a:	6810      	ldr	r0, [r2, #0]
 800222c:	6018      	str	r0, [r3, #0]
	draw_tetromino(block1);
 800222e:	4e3c      	ldr	r6, [pc, #240]	@ (8002320 <game_init+0x14c>)
 8002230:	466d      	mov	r5, sp
 8002232:	f106 0410 	add.w	r4, r6, #16
 8002236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002238:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800223a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800223c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	602b      	str	r3, [r5, #0]
 8002242:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002246:	f7ff fc9b 	bl	8001b80 <draw_tetromino>

	map = map_init();
 800224a:	4c36      	ldr	r4, [pc, #216]	@ (8002324 <game_init+0x150>)
 800224c:	463b      	mov	r3, r7
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe feb4 	bl	8000fbc <map_init>
 8002254:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8002258:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800225c:	4620      	mov	r0, r4
 800225e:	4619      	mov	r1, r3
 8002260:	f240 2336 	movw	r3, #566	@ 0x236
 8002264:	461a      	mov	r2, r3
 8002266:	f003 ff1d 	bl	80060a4 <memcpy>
	//game_over(start_time);
	for(int i=0;i<12;i++)
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 8002270:	e00c      	b.n	800228c <game_init+0xb8>
	{
		HAL_Delay(1000);
 8002272:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002276:	f001 fa81 	bl	800377c <HAL_Delay>
		block_drop(&block1, &map);
 800227a:	492a      	ldr	r1, [pc, #168]	@ (8002324 <game_init+0x150>)
 800227c:	4828      	ldr	r0, [pc, #160]	@ (8002320 <game_init+0x14c>)
 800227e:	f7fe fa8d 	bl	800079c <block_drop>
	for(int i=0;i<12;i++)
 8002282:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8002286:	3301      	adds	r3, #1
 8002288:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 800228c:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8002290:	2b0b      	cmp	r3, #11
 8002292:	ddee      	ble.n	8002272 <game_init+0x9e>
	}
	block2 = block_create(3);
 8002294:	4d24      	ldr	r5, [pc, #144]	@ (8002328 <game_init+0x154>)
 8002296:	463b      	mov	r3, r7
 8002298:	2103      	movs	r1, #3
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fb22 	bl	80008e4 <block_create>
 80022a0:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 80022a4:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80022a8:	461c      	mov	r4, r3
 80022aa:	462e      	mov	r6, r5
 80022ac:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80022b0:	4635      	mov	r5, r6
 80022b2:	4623      	mov	r3, r4
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022be:	3410      	adds	r4, #16
 80022c0:	3610      	adds	r6, #16
 80022c2:	4564      	cmp	r4, ip
 80022c4:	d1f4      	bne.n	80022b0 <game_init+0xdc>
 80022c6:	4633      	mov	r3, r6
 80022c8:	4622      	mov	r2, r4
 80022ca:	6810      	ldr	r0, [r2, #0]
 80022cc:	6018      	str	r0, [r3, #0]
	draw_tetromino(block2);
 80022ce:	4e16      	ldr	r6, [pc, #88]	@ (8002328 <game_init+0x154>)
 80022d0:	466d      	mov	r5, sp
 80022d2:	f106 0410 	add.w	r4, r6, #16
 80022d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	602b      	str	r3, [r5, #0]
 80022e2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80022e6:	f7ff fc4b 	bl	8001b80 <draw_tetromino>
	for(int i=0;i<11;i++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 80022f0:	e00c      	b.n	800230c <game_init+0x138>
	{
		HAL_Delay(1000);
 80022f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022f6:	f001 fa41 	bl	800377c <HAL_Delay>
		block_drop(&block2, 0);
 80022fa:	2100      	movs	r1, #0
 80022fc:	480a      	ldr	r0, [pc, #40]	@ (8002328 <game_init+0x154>)
 80022fe:	f7fe fa4d 	bl	800079c <block_drop>
	for(int i=0;i<11;i++)
 8002302:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8002306:	3301      	adds	r3, #1
 8002308:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 800230c:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8002310:	2b0a      	cmp	r3, #10
 8002312:	ddee      	ble.n	80022f2 <game_init+0x11e>
	}
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	f507 771f 	add.w	r7, r7, #636	@ 0x27c
 800231c:	46bd      	mov	sp, r7
 800231e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002320:	20025914 	.word	0x20025914
 8002324:	2002597c 	.word	0x2002597c
 8002328:	20025948 	.word	0x20025948

0800232c <I2C3_EV_IRQHandler>:
	uint32_t time = end_time - start_time;
	return time;
}

void I2C3_EV_IRQHandler()
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
	//disable IRQ
	//lower flag
	//stuff
	//enable IRQ
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800233e:	f000 f9ff 	bl	8002740 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8002342:	20ca      	movs	r0, #202	@ 0xca
 8002344:	f000 f943 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8002348:	20c3      	movs	r0, #195	@ 0xc3
 800234a:	f000 f94d 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 800234e:	2008      	movs	r0, #8
 8002350:	f000 f94a 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8002354:	2050      	movs	r0, #80	@ 0x50
 8002356:	f000 f947 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 800235a:	20cf      	movs	r0, #207	@ 0xcf
 800235c:	f000 f937 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8002360:	2000      	movs	r0, #0
 8002362:	f000 f941 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8002366:	20c1      	movs	r0, #193	@ 0xc1
 8002368:	f000 f93e 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800236c:	2030      	movs	r0, #48	@ 0x30
 800236e:	f000 f93b 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8002372:	20ed      	movs	r0, #237	@ 0xed
 8002374:	f000 f92b 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8002378:	2064      	movs	r0, #100	@ 0x64
 800237a:	f000 f935 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 800237e:	2003      	movs	r0, #3
 8002380:	f000 f932 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8002384:	2012      	movs	r0, #18
 8002386:	f000 f92f 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 800238a:	2081      	movs	r0, #129	@ 0x81
 800238c:	f000 f92c 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8002390:	20e8      	movs	r0, #232	@ 0xe8
 8002392:	f000 f91c 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8002396:	2085      	movs	r0, #133	@ 0x85
 8002398:	f000 f926 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800239c:	2000      	movs	r0, #0
 800239e:	f000 f923 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80023a2:	2078      	movs	r0, #120	@ 0x78
 80023a4:	f000 f920 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80023a8:	20cb      	movs	r0, #203	@ 0xcb
 80023aa:	f000 f910 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80023ae:	2039      	movs	r0, #57	@ 0x39
 80023b0:	f000 f91a 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80023b4:	202c      	movs	r0, #44	@ 0x2c
 80023b6:	f000 f917 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80023ba:	2000      	movs	r0, #0
 80023bc:	f000 f914 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80023c0:	2034      	movs	r0, #52	@ 0x34
 80023c2:	f000 f911 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80023c6:	2002      	movs	r0, #2
 80023c8:	f000 f90e 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80023cc:	20f7      	movs	r0, #247	@ 0xf7
 80023ce:	f000 f8fe 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80023d2:	2020      	movs	r0, #32
 80023d4:	f000 f908 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80023d8:	20ea      	movs	r0, #234	@ 0xea
 80023da:	f000 f8f8 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80023de:	2000      	movs	r0, #0
 80023e0:	f000 f902 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80023e4:	2000      	movs	r0, #0
 80023e6:	f000 f8ff 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80023ea:	20b1      	movs	r0, #177	@ 0xb1
 80023ec:	f000 f8ef 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80023f0:	2000      	movs	r0, #0
 80023f2:	f000 f8f9 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80023f6:	201b      	movs	r0, #27
 80023f8:	f000 f8f6 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80023fc:	20b6      	movs	r0, #182	@ 0xb6
 80023fe:	f000 f8e6 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002402:	200a      	movs	r0, #10
 8002404:	f000 f8f0 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8002408:	20a2      	movs	r0, #162	@ 0xa2
 800240a:	f000 f8ed 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800240e:	20c0      	movs	r0, #192	@ 0xc0
 8002410:	f000 f8dd 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8002414:	2010      	movs	r0, #16
 8002416:	f000 f8e7 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 800241a:	20c1      	movs	r0, #193	@ 0xc1
 800241c:	f000 f8d7 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8002420:	2010      	movs	r0, #16
 8002422:	f000 f8e1 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8002426:	20c5      	movs	r0, #197	@ 0xc5
 8002428:	f000 f8d1 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800242c:	2045      	movs	r0, #69	@ 0x45
 800242e:	f000 f8db 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8002432:	2015      	movs	r0, #21
 8002434:	f000 f8d8 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8002438:	20c7      	movs	r0, #199	@ 0xc7
 800243a:	f000 f8c8 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 800243e:	2090      	movs	r0, #144	@ 0x90
 8002440:	f000 f8d2 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8002444:	2036      	movs	r0, #54	@ 0x36
 8002446:	f000 f8c2 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 800244a:	20c8      	movs	r0, #200	@ 0xc8
 800244c:	f000 f8cc 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8002450:	20f2      	movs	r0, #242	@ 0xf2
 8002452:	f000 f8bc 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002456:	2000      	movs	r0, #0
 8002458:	f000 f8c6 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800245c:	20b0      	movs	r0, #176	@ 0xb0
 800245e:	f000 f8b6 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8002462:	20c2      	movs	r0, #194	@ 0xc2
 8002464:	f000 f8c0 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002468:	20b6      	movs	r0, #182	@ 0xb6
 800246a:	f000 f8b0 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800246e:	200a      	movs	r0, #10
 8002470:	f000 f8ba 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8002474:	20a7      	movs	r0, #167	@ 0xa7
 8002476:	f000 f8b7 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 800247a:	2027      	movs	r0, #39	@ 0x27
 800247c:	f000 f8b4 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002480:	2004      	movs	r0, #4
 8002482:	f000 f8b1 	bl	80025e8 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8002486:	202a      	movs	r0, #42	@ 0x2a
 8002488:	f000 f8a1 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800248c:	2000      	movs	r0, #0
 800248e:	f000 f8ab 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002492:	2000      	movs	r0, #0
 8002494:	f000 f8a8 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002498:	2000      	movs	r0, #0
 800249a:	f000 f8a5 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800249e:	20ef      	movs	r0, #239	@ 0xef
 80024a0:	f000 f8a2 	bl	80025e8 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80024a4:	202b      	movs	r0, #43	@ 0x2b
 80024a6:	f000 f892 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80024aa:	2000      	movs	r0, #0
 80024ac:	f000 f89c 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80024b0:	2000      	movs	r0, #0
 80024b2:	f000 f899 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80024b6:	2001      	movs	r0, #1
 80024b8:	f000 f896 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80024bc:	203f      	movs	r0, #63	@ 0x3f
 80024be:	f000 f893 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80024c2:	20f6      	movs	r0, #246	@ 0xf6
 80024c4:	f000 f883 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80024c8:	2001      	movs	r0, #1
 80024ca:	f000 f88d 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80024ce:	2000      	movs	r0, #0
 80024d0:	f000 f88a 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80024d4:	2006      	movs	r0, #6
 80024d6:	f000 f887 	bl	80025e8 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80024da:	202c      	movs	r0, #44	@ 0x2c
 80024dc:	f000 f877 	bl	80025ce <ili9341_Write_Reg>
  LCD_Delay(200);
 80024e0:	20c8      	movs	r0, #200	@ 0xc8
 80024e2:	f000 f9e9 	bl	80028b8 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80024e6:	2026      	movs	r0, #38	@ 0x26
 80024e8:	f000 f871 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80024ec:	2001      	movs	r0, #1
 80024ee:	f000 f87b 	bl	80025e8 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80024f2:	20e0      	movs	r0, #224	@ 0xe0
 80024f4:	f000 f86b 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80024f8:	200f      	movs	r0, #15
 80024fa:	f000 f875 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80024fe:	2029      	movs	r0, #41	@ 0x29
 8002500:	f000 f872 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8002504:	2024      	movs	r0, #36	@ 0x24
 8002506:	f000 f86f 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800250a:	200c      	movs	r0, #12
 800250c:	f000 f86c 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8002510:	200e      	movs	r0, #14
 8002512:	f000 f869 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8002516:	2009      	movs	r0, #9
 8002518:	f000 f866 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800251c:	204e      	movs	r0, #78	@ 0x4e
 800251e:	f000 f863 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002522:	2078      	movs	r0, #120	@ 0x78
 8002524:	f000 f860 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8002528:	203c      	movs	r0, #60	@ 0x3c
 800252a:	f000 f85d 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800252e:	2009      	movs	r0, #9
 8002530:	f000 f85a 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8002534:	2013      	movs	r0, #19
 8002536:	f000 f857 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800253a:	2005      	movs	r0, #5
 800253c:	f000 f854 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8002540:	2017      	movs	r0, #23
 8002542:	f000 f851 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002546:	2011      	movs	r0, #17
 8002548:	f000 f84e 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800254c:	2000      	movs	r0, #0
 800254e:	f000 f84b 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8002552:	20e1      	movs	r0, #225	@ 0xe1
 8002554:	f000 f83b 	bl	80025ce <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002558:	2000      	movs	r0, #0
 800255a:	f000 f845 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800255e:	2016      	movs	r0, #22
 8002560:	f000 f842 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002564:	201b      	movs	r0, #27
 8002566:	f000 f83f 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800256a:	2004      	movs	r0, #4
 800256c:	f000 f83c 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002570:	2011      	movs	r0, #17
 8002572:	f000 f839 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8002576:	2007      	movs	r0, #7
 8002578:	f000 f836 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800257c:	2031      	movs	r0, #49	@ 0x31
 800257e:	f000 f833 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8002582:	2033      	movs	r0, #51	@ 0x33
 8002584:	f000 f830 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8002588:	2042      	movs	r0, #66	@ 0x42
 800258a:	f000 f82d 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800258e:	2005      	movs	r0, #5
 8002590:	f000 f82a 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002594:	200c      	movs	r0, #12
 8002596:	f000 f827 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 800259a:	200a      	movs	r0, #10
 800259c:	f000 f824 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80025a0:	2028      	movs	r0, #40	@ 0x28
 80025a2:	f000 f821 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80025a6:	202f      	movs	r0, #47	@ 0x2f
 80025a8:	f000 f81e 	bl	80025e8 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80025ac:	200f      	movs	r0, #15
 80025ae:	f000 f81b 	bl	80025e8 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80025b2:	2011      	movs	r0, #17
 80025b4:	f000 f80b 	bl	80025ce <ili9341_Write_Reg>
  LCD_Delay(200);
 80025b8:	20c8      	movs	r0, #200	@ 0xc8
 80025ba:	f000 f97d 	bl	80028b8 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80025be:	2029      	movs	r0, #41	@ 0x29
 80025c0:	f000 f805 	bl	80025ce <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80025c4:	202c      	movs	r0, #44	@ 0x2c
 80025c6:	f000 f802 	bl	80025ce <ili9341_Write_Reg>
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}

080025ce <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	4603      	mov	r3, r0
 80025d6:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f94a 	bl	8002874 <LCD_IO_WriteReg>
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 f91b 	bl	8002830 <LCD_IO_WriteData>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002608:	4819      	ldr	r0, [pc, #100]	@ (8002670 <SPI_Init+0x6c>)
 800260a:	f003 f95c 	bl	80058c6 <HAL_SPI_GetState>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d12b      	bne.n	800266c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8002614:	4b16      	ldr	r3, [pc, #88]	@ (8002670 <SPI_Init+0x6c>)
 8002616:	4a17      	ldr	r2, [pc, #92]	@ (8002674 <SPI_Init+0x70>)
 8002618:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800261a:	4b15      	ldr	r3, [pc, #84]	@ (8002670 <SPI_Init+0x6c>)
 800261c:	2218      	movs	r2, #24
 800261e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002620:	4b13      	ldr	r3, [pc, #76]	@ (8002670 <SPI_Init+0x6c>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002626:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <SPI_Init+0x6c>)
 8002628:	2200      	movs	r2, #0
 800262a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800262c:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <SPI_Init+0x6c>)
 800262e:	2200      	movs	r2, #0
 8002630:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002632:	4b0f      	ldr	r3, [pc, #60]	@ (8002670 <SPI_Init+0x6c>)
 8002634:	2200      	movs	r2, #0
 8002636:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002638:	4b0d      	ldr	r3, [pc, #52]	@ (8002670 <SPI_Init+0x6c>)
 800263a:	2207      	movs	r2, #7
 800263c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800263e:	4b0c      	ldr	r3, [pc, #48]	@ (8002670 <SPI_Init+0x6c>)
 8002640:	2200      	movs	r2, #0
 8002642:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002644:	4b0a      	ldr	r3, [pc, #40]	@ (8002670 <SPI_Init+0x6c>)
 8002646:	2200      	movs	r2, #0
 8002648:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800264a:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <SPI_Init+0x6c>)
 800264c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002650:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002652:	4b07      	ldr	r3, [pc, #28]	@ (8002670 <SPI_Init+0x6c>)
 8002654:	2200      	movs	r2, #0
 8002656:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002658:	4b05      	ldr	r3, [pc, #20]	@ (8002670 <SPI_Init+0x6c>)
 800265a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800265e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8002660:	4803      	ldr	r0, [pc, #12]	@ (8002670 <SPI_Init+0x6c>)
 8002662:	f000 f833 	bl	80026cc <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002666:	4802      	ldr	r0, [pc, #8]	@ (8002670 <SPI_Init+0x6c>)
 8002668:	f002 ff38 	bl	80054dc <HAL_SPI_Init>
  }
}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20025bb4 	.word	0x20025bb4
 8002674:	40015000 	.word	0x40015000

08002678 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8002686:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <SPI_Write+0x34>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	1db9      	adds	r1, r7, #6
 800268c:	2201      	movs	r2, #1
 800268e:	4808      	ldr	r0, [pc, #32]	@ (80026b0 <SPI_Write+0x38>)
 8002690:	f002 ffd5 	bl	800563e <HAL_SPI_Transmit>
 8002694:	4603      	mov	r3, r0
 8002696:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800269e:	f000 f809 	bl	80026b4 <SPI_Error>
  }
}
 80026a2:	bf00      	nop
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	2000000c 	.word	0x2000000c
 80026b0:	20025bb4 	.word	0x20025bb4

080026b4 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80026b8:	4803      	ldr	r0, [pc, #12]	@ (80026c8 <SPI_Error+0x14>)
 80026ba:	f002 ff98 	bl	80055ee <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80026be:	f7ff ffa1 	bl	8002604 <SPI_Init>
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20025bb4 	.word	0x20025bb4

080026cc <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	@ 0x28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80026d4:	2300      	movs	r3, #0
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	4b17      	ldr	r3, [pc, #92]	@ (8002738 <SPI_MspInit+0x6c>)
 80026da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026dc:	4a16      	ldr	r2, [pc, #88]	@ (8002738 <SPI_MspInit+0x6c>)
 80026de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80026e4:	4b14      	ldr	r3, [pc, #80]	@ (8002738 <SPI_MspInit+0x6c>)
 80026e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	4b10      	ldr	r3, [pc, #64]	@ (8002738 <SPI_MspInit+0x6c>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002738 <SPI_MspInit+0x6c>)
 80026fa:	f043 0320 	orr.w	r3, r3, #32
 80026fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002700:	4b0d      	ldr	r3, [pc, #52]	@ (8002738 <SPI_MspInit+0x6c>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 800270c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002710:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002716:	2302      	movs	r3, #2
 8002718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800271a:	2301      	movs	r3, #1
 800271c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800271e:	2305      	movs	r3, #5
 8002720:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8002722:	f107 0314 	add.w	r3, r7, #20
 8002726:	4619      	mov	r1, r3
 8002728:	4804      	ldr	r0, [pc, #16]	@ (800273c <SPI_MspInit+0x70>)
 800272a:	f001 f931 	bl	8003990 <HAL_GPIO_Init>
}
 800272e:	bf00      	nop
 8002730:	3728      	adds	r7, #40	@ 0x28
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800
 800273c:	40021400 	.word	0x40021400

08002740 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8002746:	4b36      	ldr	r3, [pc, #216]	@ (8002820 <LCD_IO_Init+0xe0>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d164      	bne.n	8002818 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800274e:	4b34      	ldr	r3, [pc, #208]	@ (8002820 <LCD_IO_Init+0xe0>)
 8002750:	2201      	movs	r2, #1
 8002752:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002754:	2300      	movs	r3, #0
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	4b32      	ldr	r3, [pc, #200]	@ (8002824 <LCD_IO_Init+0xe4>)
 800275a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275c:	4a31      	ldr	r2, [pc, #196]	@ (8002824 <LCD_IO_Init+0xe4>)
 800275e:	f043 0308 	orr.w	r3, r3, #8
 8002762:	6313      	str	r3, [r2, #48]	@ 0x30
 8002764:	4b2f      	ldr	r3, [pc, #188]	@ (8002824 <LCD_IO_Init+0xe4>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002770:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002774:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002776:	2301      	movs	r3, #1
 8002778:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800277e:	2302      	movs	r3, #2
 8002780:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002782:	f107 030c 	add.w	r3, r7, #12
 8002786:	4619      	mov	r1, r3
 8002788:	4827      	ldr	r0, [pc, #156]	@ (8002828 <LCD_IO_Init+0xe8>)
 800278a:	f001 f901 	bl	8003990 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	4b24      	ldr	r3, [pc, #144]	@ (8002824 <LCD_IO_Init+0xe4>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	4a23      	ldr	r2, [pc, #140]	@ (8002824 <LCD_IO_Init+0xe4>)
 8002798:	f043 0308 	orr.w	r3, r3, #8
 800279c:	6313      	str	r3, [r2, #48]	@ 0x30
 800279e:	4b21      	ldr	r3, [pc, #132]	@ (8002824 <LCD_IO_Init+0xe4>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80027aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80027b0:	2301      	movs	r3, #1
 80027b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80027b8:	2302      	movs	r3, #2
 80027ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80027bc:	f107 030c 	add.w	r3, r7, #12
 80027c0:	4619      	mov	r1, r3
 80027c2:	4819      	ldr	r0, [pc, #100]	@ (8002828 <LCD_IO_Init+0xe8>)
 80027c4:	f001 f8e4 	bl	8003990 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80027c8:	2300      	movs	r3, #0
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <LCD_IO_Init+0xe4>)
 80027ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d0:	4a14      	ldr	r2, [pc, #80]	@ (8002824 <LCD_IO_Init+0xe4>)
 80027d2:	f043 0304 	orr.w	r3, r3, #4
 80027d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d8:	4b12      	ldr	r3, [pc, #72]	@ (8002824 <LCD_IO_Init+0xe4>)
 80027da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80027e4:	2304      	movs	r3, #4
 80027e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80027e8:	2301      	movs	r3, #1
 80027ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80027f0:	2302      	movs	r3, #2
 80027f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	4619      	mov	r1, r3
 80027fa:	480c      	ldr	r0, [pc, #48]	@ (800282c <LCD_IO_Init+0xec>)
 80027fc:	f001 f8c8 	bl	8003990 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002800:	2200      	movs	r2, #0
 8002802:	2104      	movs	r1, #4
 8002804:	4809      	ldr	r0, [pc, #36]	@ (800282c <LCD_IO_Init+0xec>)
 8002806:	f001 fb7b 	bl	8003f00 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800280a:	2201      	movs	r2, #1
 800280c:	2104      	movs	r1, #4
 800280e:	4807      	ldr	r0, [pc, #28]	@ (800282c <LCD_IO_Init+0xec>)
 8002810:	f001 fb76 	bl	8003f00 <HAL_GPIO_WritePin>

    SPI_Init();
 8002814:	f7ff fef6 	bl	8002604 <SPI_Init>
  }
}
 8002818:	bf00      	nop
 800281a:	3720      	adds	r7, #32
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20025c0c 	.word	0x20025c0c
 8002824:	40023800 	.word	0x40023800
 8002828:	40020c00 	.word	0x40020c00
 800282c:	40020800 	.word	0x40020800

08002830 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800283a:	2201      	movs	r2, #1
 800283c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002840:	480a      	ldr	r0, [pc, #40]	@ (800286c <LCD_IO_WriteData+0x3c>)
 8002842:	f001 fb5d 	bl	8003f00 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8002846:	2200      	movs	r2, #0
 8002848:	2104      	movs	r1, #4
 800284a:	4809      	ldr	r0, [pc, #36]	@ (8002870 <LCD_IO_WriteData+0x40>)
 800284c:	f001 fb58 	bl	8003f00 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff ff10 	bl	8002678 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002858:	2201      	movs	r2, #1
 800285a:	2104      	movs	r1, #4
 800285c:	4804      	ldr	r0, [pc, #16]	@ (8002870 <LCD_IO_WriteData+0x40>)
 800285e:	f001 fb4f 	bl	8003f00 <HAL_GPIO_WritePin>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40020c00 	.word	0x40020c00
 8002870:	40020800 	.word	0x40020800

08002874 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800287e:	2200      	movs	r2, #0
 8002880:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002884:	480a      	ldr	r0, [pc, #40]	@ (80028b0 <LCD_IO_WriteReg+0x3c>)
 8002886:	f001 fb3b 	bl	8003f00 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800288a:	2200      	movs	r2, #0
 800288c:	2104      	movs	r1, #4
 800288e:	4809      	ldr	r0, [pc, #36]	@ (80028b4 <LCD_IO_WriteReg+0x40>)
 8002890:	f001 fb36 	bl	8003f00 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	b29b      	uxth	r3, r3
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff feed 	bl	8002678 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800289e:	2201      	movs	r2, #1
 80028a0:	2104      	movs	r1, #4
 80028a2:	4804      	ldr	r0, [pc, #16]	@ (80028b4 <LCD_IO_WriteReg+0x40>)
 80028a4:	f001 fb2c 	bl	8003f00 <HAL_GPIO_WritePin>
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40020c00 	.word	0x40020c00
 80028b4:	40020800 	.word	0x40020800

080028b8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 ff5b 	bl	800377c <HAL_Delay>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028d2:	f000 fee1 	bl	8003698 <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  //SystemClock_Config();
  SystemClockOverride();
 80028d6:	f000 fb9d 	bl	8003014 <SystemClockOverride>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028da:	f000 f9ed 	bl	8002cb8 <MX_GPIO_Init>
  MX_I2C3_Init();
 80028de:	f000 f815 	bl	800290c <MX_I2C3_Init>
  MX_LTDC_Init();
 80028e2:	f000 f853 	bl	800298c <MX_LTDC_Init>
  MX_SPI5_Init();
 80028e6:	f000 f917 	bl	8002b18 <MX_SPI5_Init>
  MX_RNG_Init();
 80028ea:	f000 f901 	bl	8002af0 <MX_RNG_Init>
  MX_TIM2_Init();
 80028ee:	f000 f949 	bl	8002b84 <MX_TIM2_Init>
  MX_TIM5_Init();
 80028f2:	f000 f993 	bl	8002c1c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit();
 80028f6:	f7fd fdf1 	bl	80004dc <ApplicationInit>
  Application_game_inst();
 80028fa:	f7fd fdfe 	bl	80004fa <Application_game_inst>
  HAL_Delay(5000);
 80028fe:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002902:	f000 ff3b 	bl	800377c <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002906:	bf00      	nop
 8002908:	e7fd      	b.n	8002906 <main+0x38>
	...

0800290c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002910:	4b1b      	ldr	r3, [pc, #108]	@ (8002980 <MX_I2C3_Init+0x74>)
 8002912:	4a1c      	ldr	r2, [pc, #112]	@ (8002984 <MX_I2C3_Init+0x78>)
 8002914:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002916:	4b1a      	ldr	r3, [pc, #104]	@ (8002980 <MX_I2C3_Init+0x74>)
 8002918:	4a1b      	ldr	r2, [pc, #108]	@ (8002988 <MX_I2C3_Init+0x7c>)
 800291a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800291c:	4b18      	ldr	r3, [pc, #96]	@ (8002980 <MX_I2C3_Init+0x74>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002922:	4b17      	ldr	r3, [pc, #92]	@ (8002980 <MX_I2C3_Init+0x74>)
 8002924:	2200      	movs	r2, #0
 8002926:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002928:	4b15      	ldr	r3, [pc, #84]	@ (8002980 <MX_I2C3_Init+0x74>)
 800292a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800292e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002930:	4b13      	ldr	r3, [pc, #76]	@ (8002980 <MX_I2C3_Init+0x74>)
 8002932:	2200      	movs	r2, #0
 8002934:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002936:	4b12      	ldr	r3, [pc, #72]	@ (8002980 <MX_I2C3_Init+0x74>)
 8002938:	2200      	movs	r2, #0
 800293a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800293c:	4b10      	ldr	r3, [pc, #64]	@ (8002980 <MX_I2C3_Init+0x74>)
 800293e:	2200      	movs	r2, #0
 8002940:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002942:	4b0f      	ldr	r3, [pc, #60]	@ (8002980 <MX_I2C3_Init+0x74>)
 8002944:	2200      	movs	r2, #0
 8002946:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002948:	480d      	ldr	r0, [pc, #52]	@ (8002980 <MX_I2C3_Init+0x74>)
 800294a:	f001 faf3 	bl	8003f34 <HAL_I2C_Init>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002954:	f000 fbb0 	bl	80030b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002958:	2100      	movs	r1, #0
 800295a:	4809      	ldr	r0, [pc, #36]	@ (8002980 <MX_I2C3_Init+0x74>)
 800295c:	f001 fc2e 	bl	80041bc <HAL_I2CEx_ConfigAnalogFilter>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002966:	f000 fba7 	bl	80030b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800296a:	2100      	movs	r1, #0
 800296c:	4804      	ldr	r0, [pc, #16]	@ (8002980 <MX_I2C3_Init+0x74>)
 800296e:	f001 fc61 	bl	8004234 <HAL_I2CEx_ConfigDigitalFilter>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002978:	f000 fb9e 	bl	80030b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800297c:	bf00      	nop
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20025c10 	.word	0x20025c10
 8002984:	40005c00 	.word	0x40005c00
 8002988:	000186a0 	.word	0x000186a0

0800298c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b09a      	sub	sp, #104	@ 0x68
 8002990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002992:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002996:	2234      	movs	r2, #52	@ 0x34
 8002998:	2100      	movs	r1, #0
 800299a:	4618      	mov	r0, r3
 800299c:	f003 fb56 	bl	800604c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80029a0:	463b      	mov	r3, r7
 80029a2:	2234      	movs	r2, #52	@ 0x34
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f003 fb50 	bl	800604c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80029ac:	4b4e      	ldr	r3, [pc, #312]	@ (8002ae8 <MX_LTDC_Init+0x15c>)
 80029ae:	4a4f      	ldr	r2, [pc, #316]	@ (8002aec <MX_LTDC_Init+0x160>)
 80029b0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80029b2:	4b4d      	ldr	r3, [pc, #308]	@ (8002ae8 <MX_LTDC_Init+0x15c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80029b8:	4b4b      	ldr	r3, [pc, #300]	@ (8002ae8 <MX_LTDC_Init+0x15c>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80029be:	4b4a      	ldr	r3, [pc, #296]	@ (8002ae8 <MX_LTDC_Init+0x15c>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80029c4:	4b48      	ldr	r3, [pc, #288]	@ (8002ae8 <MX_LTDC_Init+0x15c>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80029ca:	4b47      	ldr	r3, [pc, #284]	@ (8002ae8 <MX_LTDC_Init+0x15c>)
 80029cc:	2207      	movs	r2, #7
 80029ce:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80029d0:	4b45      	ldr	r3, [pc, #276]	@ (8002ae8 <MX_LTDC_Init+0x15c>)
 80029d2:	2203      	movs	r2, #3
 80029d4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80029d6:	4b44      	ldr	r3, [pc, #272]	@ (8002ae8 <MX_LTDC_Init+0x15c>)
 80029d8:	220e      	movs	r2, #14
 80029da:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80029dc:	4b42      	ldr	r3, [pc, #264]	@ (8002ae8 <MX_LTDC_Init+0x15c>)
 80029de:	2205      	movs	r2, #5
 80029e0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80029e2:	4b41      	ldr	r3, [pc, #260]	@ (8002ae8 <MX_LTDC_Init+0x15c>)
 80029e4:	f240 228e 	movw	r2, #654	@ 0x28e
 80029e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80029ea:	4b3f      	ldr	r3, [pc, #252]	@ (8002ae8 <MX_LTDC_Init+0x15c>)
 80029ec:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80029f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80029f2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ae8 <MX_LTDC_Init+0x15c>)
 80029f4:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80029f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80029fa:	4b3b      	ldr	r3, [pc, #236]	@ (8002ae8 <MX_LTDC_Init+0x15c>)
 80029fc:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8002a00:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002a02:	4b39      	ldr	r3, [pc, #228]	@ (8002ae8 <MX_LTDC_Init+0x15c>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002a0a:	4b37      	ldr	r3, [pc, #220]	@ (8002ae8 <MX_LTDC_Init+0x15c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002a12:	4b35      	ldr	r3, [pc, #212]	@ (8002ae8 <MX_LTDC_Init+0x15c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002a1a:	4833      	ldr	r0, [pc, #204]	@ (8002ae8 <MX_LTDC_Init+0x15c>)
 8002a1c:	f001 fc4a 	bl	80042b4 <HAL_LTDC_Init>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8002a26:	f000 fb47 	bl	80030b8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002a46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a4a:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002a4c:	2305      	movs	r3, #5
 8002a4e:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002a6e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a72:	2200      	movs	r2, #0
 8002a74:	4619      	mov	r1, r3
 8002a76:	481c      	ldr	r0, [pc, #112]	@ (8002ae8 <MX_LTDC_Init+0x15c>)
 8002a78:	f001 fcec 	bl	8004454 <HAL_LTDC_ConfigLayer>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8002a82:	f000 fb19 	bl	80030b8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002aa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002aa6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002aa8:	2305      	movs	r3, #5
 8002aaa:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002aca:	463b      	mov	r3, r7
 8002acc:	2201      	movs	r2, #1
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4805      	ldr	r0, [pc, #20]	@ (8002ae8 <MX_LTDC_Init+0x15c>)
 8002ad2:	f001 fcbf 	bl	8004454 <HAL_LTDC_ConfigLayer>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8002adc:	f000 faec 	bl	80030b8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002ae0:	bf00      	nop
 8002ae2:	3768      	adds	r7, #104	@ 0x68
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20025c64 	.word	0x20025c64
 8002aec:	40016800 	.word	0x40016800

08002af0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002af4:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <MX_RNG_Init+0x20>)
 8002af6:	4a07      	ldr	r2, [pc, #28]	@ (8002b14 <MX_RNG_Init+0x24>)
 8002af8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002afa:	4805      	ldr	r0, [pc, #20]	@ (8002b10 <MX_RNG_Init+0x20>)
 8002afc:	f002 fcc4 	bl	8005488 <HAL_RNG_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002b06:	f000 fad7 	bl	80030b8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20025d0c 	.word	0x20025d0c
 8002b14:	50060800 	.word	0x50060800

08002b18 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002b1c:	4b17      	ldr	r3, [pc, #92]	@ (8002b7c <MX_SPI5_Init+0x64>)
 8002b1e:	4a18      	ldr	r2, [pc, #96]	@ (8002b80 <MX_SPI5_Init+0x68>)
 8002b20:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002b22:	4b16      	ldr	r3, [pc, #88]	@ (8002b7c <MX_SPI5_Init+0x64>)
 8002b24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b28:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002b2a:	4b14      	ldr	r3, [pc, #80]	@ (8002b7c <MX_SPI5_Init+0x64>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b30:	4b12      	ldr	r3, [pc, #72]	@ (8002b7c <MX_SPI5_Init+0x64>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b36:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <MX_SPI5_Init+0x64>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b7c <MX_SPI5_Init+0x64>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002b42:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <MX_SPI5_Init+0x64>)
 8002b44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b48:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b7c <MX_SPI5_Init+0x64>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b50:	4b0a      	ldr	r3, [pc, #40]	@ (8002b7c <MX_SPI5_Init+0x64>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b56:	4b09      	ldr	r3, [pc, #36]	@ (8002b7c <MX_SPI5_Init+0x64>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5c:	4b07      	ldr	r3, [pc, #28]	@ (8002b7c <MX_SPI5_Init+0x64>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002b62:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <MX_SPI5_Init+0x64>)
 8002b64:	220a      	movs	r2, #10
 8002b66:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002b68:	4804      	ldr	r0, [pc, #16]	@ (8002b7c <MX_SPI5_Init+0x64>)
 8002b6a:	f002 fcb7 	bl	80054dc <HAL_SPI_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002b74:	f000 faa0 	bl	80030b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002b78:	bf00      	nop
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20025d1c 	.word	0x20025d1c
 8002b80:	40015000 	.word	0x40015000

08002b84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b8a:	f107 0308 	add.w	r3, r7, #8
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	605a      	str	r2, [r3, #4]
 8002b94:	609a      	str	r2, [r3, #8]
 8002b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b98:	463b      	mov	r3, r7
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c18 <MX_TIM2_Init+0x94>)
 8002ba2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ba6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c18 <MX_TIM2_Init+0x94>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bae:	4b1a      	ldr	r3, [pc, #104]	@ (8002c18 <MX_TIM2_Init+0x94>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002bb4:	4b18      	ldr	r3, [pc, #96]	@ (8002c18 <MX_TIM2_Init+0x94>)
 8002bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bbc:	4b16      	ldr	r3, [pc, #88]	@ (8002c18 <MX_TIM2_Init+0x94>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc2:	4b15      	ldr	r3, [pc, #84]	@ (8002c18 <MX_TIM2_Init+0x94>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bc8:	4813      	ldr	r0, [pc, #76]	@ (8002c18 <MX_TIM2_Init+0x94>)
 8002bca:	f002 ff67 	bl	8005a9c <HAL_TIM_Base_Init>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002bd4:	f000 fa70 	bl	80030b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bde:	f107 0308 	add.w	r3, r7, #8
 8002be2:	4619      	mov	r1, r3
 8002be4:	480c      	ldr	r0, [pc, #48]	@ (8002c18 <MX_TIM2_Init+0x94>)
 8002be6:	f002 ffa8 	bl	8005b3a <HAL_TIM_ConfigClockSource>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002bf0:	f000 fa62 	bl	80030b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bfc:	463b      	mov	r3, r7
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4805      	ldr	r0, [pc, #20]	@ (8002c18 <MX_TIM2_Init+0x94>)
 8002c02:	f003 f9a7 	bl	8005f54 <HAL_TIMEx_MasterConfigSynchronization>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002c0c:	f000 fa54 	bl	80030b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c10:	bf00      	nop
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20025d74 	.word	0x20025d74

08002c1c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c22:	f107 0308 	add.w	r3, r7, #8
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	609a      	str	r2, [r3, #8]
 8002c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c30:	463b      	mov	r3, r7
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002c38:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb0 <MX_TIM5_Init+0x94>)
 8002c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002cb4 <MX_TIM5_Init+0x98>)
 8002c3c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb0 <MX_TIM5_Init+0x94>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c44:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb0 <MX_TIM5_Init+0x94>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002c4a:	4b19      	ldr	r3, [pc, #100]	@ (8002cb0 <MX_TIM5_Init+0x94>)
 8002c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c50:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c52:	4b17      	ldr	r3, [pc, #92]	@ (8002cb0 <MX_TIM5_Init+0x94>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c58:	4b15      	ldr	r3, [pc, #84]	@ (8002cb0 <MX_TIM5_Init+0x94>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002c5e:	4814      	ldr	r0, [pc, #80]	@ (8002cb0 <MX_TIM5_Init+0x94>)
 8002c60:	f002 ff1c 	bl	8005a9c <HAL_TIM_Base_Init>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002c6a:	f000 fa25 	bl	80030b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002c74:	f107 0308 	add.w	r3, r7, #8
 8002c78:	4619      	mov	r1, r3
 8002c7a:	480d      	ldr	r0, [pc, #52]	@ (8002cb0 <MX_TIM5_Init+0x94>)
 8002c7c:	f002 ff5d 	bl	8005b3a <HAL_TIM_ConfigClockSource>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002c86:	f000 fa17 	bl	80030b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c92:	463b      	mov	r3, r7
 8002c94:	4619      	mov	r1, r3
 8002c96:	4806      	ldr	r0, [pc, #24]	@ (8002cb0 <MX_TIM5_Init+0x94>)
 8002c98:	f003 f95c 	bl	8005f54 <HAL_TIMEx_MasterConfigSynchronization>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002ca2:	f000 fa09 	bl	80030b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002ca6:	bf00      	nop
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20025dbc 	.word	0x20025dbc
 8002cb4:	40000c00 	.word	0x40000c00

08002cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08e      	sub	sp, #56	@ 0x38
 8002cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	609a      	str	r2, [r3, #8]
 8002cca:	60da      	str	r2, [r3, #12]
 8002ccc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	623b      	str	r3, [r7, #32]
 8002cd2:	4bb2      	ldr	r3, [pc, #712]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd6:	4ab1      	ldr	r2, [pc, #708]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002cd8:	f043 0304 	orr.w	r3, r3, #4
 8002cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cde:	4baf      	ldr	r3, [pc, #700]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	623b      	str	r3, [r7, #32]
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	4bab      	ldr	r3, [pc, #684]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	4aaa      	ldr	r2, [pc, #680]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002cf4:	f043 0320 	orr.w	r3, r3, #32
 8002cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfa:	4ba8      	ldr	r3, [pc, #672]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	f003 0320 	and.w	r3, r3, #32
 8002d02:	61fb      	str	r3, [r7, #28]
 8002d04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	4ba4      	ldr	r3, [pc, #656]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	4aa3      	ldr	r2, [pc, #652]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002d10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d16:	4ba1      	ldr	r3, [pc, #644]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	4b9d      	ldr	r3, [pc, #628]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2a:	4a9c      	ldr	r2, [pc, #624]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d32:	4b9a      	ldr	r3, [pc, #616]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	4b96      	ldr	r3, [pc, #600]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d46:	4a95      	ldr	r2, [pc, #596]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002d48:	f043 0302 	orr.w	r3, r3, #2
 8002d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d4e:	4b93      	ldr	r3, [pc, #588]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	4b8f      	ldr	r3, [pc, #572]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d62:	4a8e      	ldr	r2, [pc, #568]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002d64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d6a:	4b8c      	ldr	r3, [pc, #560]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	4b88      	ldr	r3, [pc, #544]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7e:	4a87      	ldr	r2, [pc, #540]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002d80:	f043 0310 	orr.w	r3, r3, #16
 8002d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d86:	4b85      	ldr	r3, [pc, #532]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	4b81      	ldr	r3, [pc, #516]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9a:	4a80      	ldr	r2, [pc, #512]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002d9c:	f043 0308 	orr.w	r3, r3, #8
 8002da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da2:	4b7e      	ldr	r3, [pc, #504]	@ (8002f9c <MX_GPIO_Init+0x2e4>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2116      	movs	r1, #22
 8002db2:	487b      	ldr	r0, [pc, #492]	@ (8002fa0 <MX_GPIO_Init+0x2e8>)
 8002db4:	f001 f8a4 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002db8:	2200      	movs	r2, #0
 8002dba:	2180      	movs	r1, #128	@ 0x80
 8002dbc:	4879      	ldr	r0, [pc, #484]	@ (8002fa4 <MX_GPIO_Init+0x2ec>)
 8002dbe:	f001 f89f 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002dc8:	4877      	ldr	r0, [pc, #476]	@ (8002fa8 <MX_GPIO_Init+0x2f0>)
 8002dca:	f001 f899 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002dd4:	4875      	ldr	r0, [pc, #468]	@ (8002fac <MX_GPIO_Init+0x2f4>)
 8002dd6:	f001 f893 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002dda:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002dde:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	2302      	movs	r3, #2
 8002de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de8:	2303      	movs	r3, #3
 8002dea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002dec:	230c      	movs	r3, #12
 8002dee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002df0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002df4:	4619      	mov	r1, r3
 8002df6:	486e      	ldr	r0, [pc, #440]	@ (8002fb0 <MX_GPIO_Init+0x2f8>)
 8002df8:	f000 fdca 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e00:	2302      	movs	r3, #2
 8002e02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e0c:	230c      	movs	r3, #12
 8002e0e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002e10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e14:	4619      	mov	r1, r3
 8002e16:	4862      	ldr	r0, [pc, #392]	@ (8002fa0 <MX_GPIO_Init+0x2e8>)
 8002e18:	f000 fdba 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002e1c:	2316      	movs	r3, #22
 8002e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e20:	2301      	movs	r3, #1
 8002e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e30:	4619      	mov	r1, r3
 8002e32:	485b      	ldr	r0, [pc, #364]	@ (8002fa0 <MX_GPIO_Init+0x2e8>)
 8002e34:	f000 fdac 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002e38:	f248 0307 	movw	r3, #32775	@ 0x8007
 8002e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002e3e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002e42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4855      	ldr	r0, [pc, #340]	@ (8002fa4 <MX_GPIO_Init+0x2ec>)
 8002e50:	f000 fd9e 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002e54:	2380      	movs	r3, #128	@ 0x80
 8002e56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e60:	2300      	movs	r3, #0
 8002e62:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002e64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e68:	4619      	mov	r1, r3
 8002e6a:	484e      	ldr	r0, [pc, #312]	@ (8002fa4 <MX_GPIO_Init+0x2ec>)
 8002e6c:	f000 fd90 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002e70:	2320      	movs	r3, #32
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002e74:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002e78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002e7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e82:	4619      	mov	r1, r3
 8002e84:	4846      	ldr	r0, [pc, #280]	@ (8002fa0 <MX_GPIO_Init+0x2e8>)
 8002e86:	f000 fd83 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002e96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4845      	ldr	r0, [pc, #276]	@ (8002fb4 <MX_GPIO_Init+0x2fc>)
 8002e9e:	f000 fd77 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002ea2:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002ea6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002eb4:	230c      	movs	r3, #12
 8002eb6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002eb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	483b      	ldr	r0, [pc, #236]	@ (8002fac <MX_GPIO_Init+0x2f4>)
 8002ec0:	f000 fd66 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002ec4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ed6:	230c      	movs	r3, #12
 8002ed8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4835      	ldr	r0, [pc, #212]	@ (8002fb8 <MX_GPIO_Init+0x300>)
 8002ee2:	f000 fd55 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002ee6:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002eea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eec:	2302      	movs	r3, #2
 8002eee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002ef8:	230c      	movs	r3, #12
 8002efa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f00:	4619      	mov	r1, r3
 8002f02:	482c      	ldr	r0, [pc, #176]	@ (8002fb4 <MX_GPIO_Init+0x2fc>)
 8002f04:	f000 fd44 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002f08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002f16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4825      	ldr	r0, [pc, #148]	@ (8002fb4 <MX_GPIO_Init+0x2fc>)
 8002f1e:	f000 fd37 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002f22:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002f26:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f30:	2303      	movs	r3, #3
 8002f32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f34:	230c      	movs	r3, #12
 8002f36:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	481a      	ldr	r0, [pc, #104]	@ (8002fa8 <MX_GPIO_Init+0x2f0>)
 8002f40:	f000 fd26 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002f44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002f52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f56:	4619      	mov	r1, r3
 8002f58:	4813      	ldr	r0, [pc, #76]	@ (8002fa8 <MX_GPIO_Init+0x2f0>)
 8002f5a:	f000 fd19 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002f5e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002f62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f64:	2301      	movs	r3, #1
 8002f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f74:	4619      	mov	r1, r3
 8002f76:	480c      	ldr	r0, [pc, #48]	@ (8002fa8 <MX_GPIO_Init+0x2f0>)
 8002f78:	f000 fd0a 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002f7c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002f80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f82:	2302      	movs	r3, #2
 8002f84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f8e:	2307      	movs	r3, #7
 8002f90:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f96:	4619      	mov	r1, r3
 8002f98:	e010      	b.n	8002fbc <MX_GPIO_Init+0x304>
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40020800 	.word	0x40020800
 8002fa4:	40020000 	.word	0x40020000
 8002fa8:	40020c00 	.word	0x40020c00
 8002fac:	40021800 	.word	0x40021800
 8002fb0:	40021400 	.word	0x40021400
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	4812      	ldr	r0, [pc, #72]	@ (8003008 <MX_GPIO_Init+0x350>)
 8002fbe:	f000 fce7 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002fc2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fd8:	4619      	mov	r1, r3
 8002fda:	480c      	ldr	r0, [pc, #48]	@ (800300c <MX_GPIO_Init+0x354>)
 8002fdc:	f000 fcd8 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002fe0:	2360      	movs	r3, #96	@ 0x60
 8002fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fec:	2303      	movs	r3, #3
 8002fee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ff0:	230c      	movs	r3, #12
 8002ff2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4805      	ldr	r0, [pc, #20]	@ (8003010 <MX_GPIO_Init+0x358>)
 8002ffc:	f000 fcc8 	bl	8003990 <HAL_GPIO_Init>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003000:	bf00      	nop
 8003002:	3738      	adds	r7, #56	@ 0x38
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40020000 	.word	0x40020000
 800300c:	40021800 	.word	0x40021800
 8003010:	40020400 	.word	0x40020400

08003014 <SystemClockOverride>:

/* USER CODE BEGIN 4 */
void SystemClockOverride(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b094      	sub	sp, #80	@ 0x50
 8003018:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	4b24      	ldr	r3, [pc, #144]	@ (80030b0 <SystemClockOverride+0x9c>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	4a23      	ldr	r2, [pc, #140]	@ (80030b0 <SystemClockOverride+0x9c>)
 8003024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003028:	6413      	str	r3, [r2, #64]	@ 0x40
 800302a:	4b21      	ldr	r3, [pc, #132]	@ (80030b0 <SystemClockOverride+0x9c>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.
 8003036:	2300      	movs	r3, #0
 8003038:	607b      	str	r3, [r7, #4]
 800303a:	4b1e      	ldr	r3, [pc, #120]	@ (80030b4 <SystemClockOverride+0xa0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1d      	ldr	r2, [pc, #116]	@ (80030b4 <SystemClockOverride+0xa0>)
 8003040:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	4b1b      	ldr	r3, [pc, #108]	@ (80030b4 <SystemClockOverride+0xa0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800304e:	607b      	str	r3, [r7, #4]
 8003050:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003052:	2301      	movs	r3, #1
 8003054:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003056:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800305a:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800305c:	2302      	movs	r3, #2
 800305e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003060:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003064:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003066:	2308      	movs	r3, #8
 8003068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800306a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800306e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003070:	2302      	movs	r3, #2
 8003072:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003074:	2307      	movs	r3, #7
 8003076:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003078:	f107 030c 	add.w	r3, r7, #12
 800307c:	4618      	mov	r0, r3
 800307e:	f001 fbbf 	bl	8004800 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003082:	230f      	movs	r3, #15
 8003084:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003086:	2302      	movs	r3, #2
 8003088:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800308a:	2300      	movs	r3, #0
 800308c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800308e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003092:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003094:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003098:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800309a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800309e:	2105      	movs	r1, #5
 80030a0:	4618      	mov	r0, r3
 80030a2:	f001 fe25 	bl	8004cf0 <HAL_RCC_ClockConfig>
}
 80030a6:	bf00      	nop
 80030a8:	3750      	adds	r7, #80	@ 0x50
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40007000 	.word	0x40007000

080030b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80030bc:	b672      	cpsid	i
}
 80030be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030c0:	bf00      	nop
 80030c2:	e7fd      	b.n	80030c0 <Error_Handler+0x8>

080030c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	4b10      	ldr	r3, [pc, #64]	@ (8003110 <HAL_MspInit+0x4c>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d2:	4a0f      	ldr	r2, [pc, #60]	@ (8003110 <HAL_MspInit+0x4c>)
 80030d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030da:	4b0d      	ldr	r3, [pc, #52]	@ (8003110 <HAL_MspInit+0x4c>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030e2:	607b      	str	r3, [r7, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	4b09      	ldr	r3, [pc, #36]	@ (8003110 <HAL_MspInit+0x4c>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	4a08      	ldr	r2, [pc, #32]	@ (8003110 <HAL_MspInit+0x4c>)
 80030f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030f6:	4b06      	ldr	r3, [pc, #24]	@ (8003110 <HAL_MspInit+0x4c>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003102:	2007      	movs	r0, #7
 8003104:	f000 fc10 	bl	8003928 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40023800 	.word	0x40023800

08003114 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	@ 0x28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	60da      	str	r2, [r3, #12]
 800312a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a29      	ldr	r2, [pc, #164]	@ (80031d8 <HAL_I2C_MspInit+0xc4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d14b      	bne.n	80031ce <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	4b28      	ldr	r3, [pc, #160]	@ (80031dc <HAL_I2C_MspInit+0xc8>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313e:	4a27      	ldr	r2, [pc, #156]	@ (80031dc <HAL_I2C_MspInit+0xc8>)
 8003140:	f043 0304 	orr.w	r3, r3, #4
 8003144:	6313      	str	r3, [r2, #48]	@ 0x30
 8003146:	4b25      	ldr	r3, [pc, #148]	@ (80031dc <HAL_I2C_MspInit+0xc8>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	4b21      	ldr	r3, [pc, #132]	@ (80031dc <HAL_I2C_MspInit+0xc8>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315a:	4a20      	ldr	r2, [pc, #128]	@ (80031dc <HAL_I2C_MspInit+0xc8>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6313      	str	r3, [r2, #48]	@ 0x30
 8003162:	4b1e      	ldr	r3, [pc, #120]	@ (80031dc <HAL_I2C_MspInit+0xc8>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800316e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003174:	2312      	movs	r3, #18
 8003176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003178:	2300      	movs	r3, #0
 800317a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317c:	2300      	movs	r3, #0
 800317e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003180:	2304      	movs	r3, #4
 8003182:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003184:	f107 0314 	add.w	r3, r7, #20
 8003188:	4619      	mov	r1, r3
 800318a:	4815      	ldr	r0, [pc, #84]	@ (80031e0 <HAL_I2C_MspInit+0xcc>)
 800318c:	f000 fc00 	bl	8003990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003190:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003196:	2312      	movs	r3, #18
 8003198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319e:	2300      	movs	r3, #0
 80031a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80031a2:	2304      	movs	r3, #4
 80031a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80031a6:	f107 0314 	add.w	r3, r7, #20
 80031aa:	4619      	mov	r1, r3
 80031ac:	480d      	ldr	r0, [pc, #52]	@ (80031e4 <HAL_I2C_MspInit+0xd0>)
 80031ae:	f000 fbef 	bl	8003990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	4b09      	ldr	r3, [pc, #36]	@ (80031dc <HAL_I2C_MspInit+0xc8>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ba:	4a08      	ldr	r2, [pc, #32]	@ (80031dc <HAL_I2C_MspInit+0xc8>)
 80031bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031c2:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <HAL_I2C_MspInit+0xc8>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80031ce:	bf00      	nop
 80031d0:	3728      	adds	r7, #40	@ 0x28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40005c00 	.word	0x40005c00
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40020800 	.word	0x40020800
 80031e4:	40020000 	.word	0x40020000

080031e8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b09a      	sub	sp, #104	@ 0x68
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003200:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003204:	2230      	movs	r2, #48	@ 0x30
 8003206:	2100      	movs	r1, #0
 8003208:	4618      	mov	r0, r3
 800320a:	f002 ff1f 	bl	800604c <memset>
  if(hltdc->Instance==LTDC)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a81      	ldr	r2, [pc, #516]	@ (8003418 <HAL_LTDC_MspInit+0x230>)
 8003214:	4293      	cmp	r3, r2
 8003216:	f040 80fa 	bne.w	800340e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800321a:	2308      	movs	r3, #8
 800321c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800321e:	2332      	movs	r3, #50	@ 0x32
 8003220:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003222:	2302      	movs	r3, #2
 8003224:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003226:	2300      	movs	r3, #0
 8003228:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800322a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800322e:	4618      	mov	r0, r3
 8003230:	f001 ff6a 	bl	8005108 <HAL_RCCEx_PeriphCLKConfig>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800323a:	f7ff ff3d 	bl	80030b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	623b      	str	r3, [r7, #32]
 8003242:	4b76      	ldr	r3, [pc, #472]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 8003244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003246:	4a75      	ldr	r2, [pc, #468]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 8003248:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800324c:	6453      	str	r3, [r2, #68]	@ 0x44
 800324e:	4b73      	ldr	r3, [pc, #460]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003252:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003256:	623b      	str	r3, [r7, #32]
 8003258:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	61fb      	str	r3, [r7, #28]
 800325e:	4b6f      	ldr	r3, [pc, #444]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003262:	4a6e      	ldr	r2, [pc, #440]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 8003264:	f043 0320 	orr.w	r3, r3, #32
 8003268:	6313      	str	r3, [r2, #48]	@ 0x30
 800326a:	4b6c      	ldr	r3, [pc, #432]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	4b68      	ldr	r3, [pc, #416]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	4a67      	ldr	r2, [pc, #412]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6313      	str	r3, [r2, #48]	@ 0x30
 8003286:	4b65      	ldr	r3, [pc, #404]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	4b61      	ldr	r3, [pc, #388]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	4a60      	ldr	r2, [pc, #384]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 800329c:	f043 0302 	orr.w	r3, r3, #2
 80032a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a2:	4b5e      	ldr	r3, [pc, #376]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	4b5a      	ldr	r3, [pc, #360]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	4a59      	ldr	r2, [pc, #356]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 80032b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032be:	4b57      	ldr	r3, [pc, #348]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	4b53      	ldr	r3, [pc, #332]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	4a52      	ldr	r2, [pc, #328]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 80032d4:	f043 0304 	orr.w	r3, r3, #4
 80032d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032da:	4b50      	ldr	r3, [pc, #320]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	4b4c      	ldr	r3, [pc, #304]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	4a4b      	ldr	r2, [pc, #300]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 80032f0:	f043 0308 	orr.w	r3, r3, #8
 80032f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f6:	4b49      	ldr	r3, [pc, #292]	@ (800341c <HAL_LTDC_MspInit+0x234>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003302:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003306:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003308:	2302      	movs	r3, #2
 800330a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003310:	2300      	movs	r3, #0
 8003312:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003314:	230e      	movs	r3, #14
 8003316:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003318:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800331c:	4619      	mov	r1, r3
 800331e:	4840      	ldr	r0, [pc, #256]	@ (8003420 <HAL_LTDC_MspInit+0x238>)
 8003320:	f000 fb36 	bl	8003990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003324:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003328:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332a:	2302      	movs	r3, #2
 800332c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	2300      	movs	r3, #0
 8003330:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003332:	2300      	movs	r3, #0
 8003334:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003336:	230e      	movs	r3, #14
 8003338:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800333e:	4619      	mov	r1, r3
 8003340:	4838      	ldr	r0, [pc, #224]	@ (8003424 <HAL_LTDC_MspInit+0x23c>)
 8003342:	f000 fb25 	bl	8003990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003346:	2303      	movs	r3, #3
 8003348:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334a:	2302      	movs	r3, #2
 800334c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334e:	2300      	movs	r3, #0
 8003350:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003352:	2300      	movs	r3, #0
 8003354:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003356:	2309      	movs	r3, #9
 8003358:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800335a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800335e:	4619      	mov	r1, r3
 8003360:	4831      	ldr	r0, [pc, #196]	@ (8003428 <HAL_LTDC_MspInit+0x240>)
 8003362:	f000 fb15 	bl	8003990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003366:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800336a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003374:	2300      	movs	r3, #0
 8003376:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003378:	230e      	movs	r3, #14
 800337a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800337c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003380:	4619      	mov	r1, r3
 8003382:	4829      	ldr	r0, [pc, #164]	@ (8003428 <HAL_LTDC_MspInit+0x240>)
 8003384:	f000 fb04 	bl	8003990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003388:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800338c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338e:	2302      	movs	r3, #2
 8003390:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	2300      	movs	r3, #0
 8003394:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003396:	2300      	movs	r3, #0
 8003398:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800339a:	230e      	movs	r3, #14
 800339c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800339e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80033a2:	4619      	mov	r1, r3
 80033a4:	4821      	ldr	r0, [pc, #132]	@ (800342c <HAL_LTDC_MspInit+0x244>)
 80033a6:	f000 faf3 	bl	8003990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80033aa:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80033ae:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b0:	2302      	movs	r3, #2
 80033b2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b8:	2300      	movs	r3, #0
 80033ba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033bc:	230e      	movs	r3, #14
 80033be:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80033c4:	4619      	mov	r1, r3
 80033c6:	481a      	ldr	r0, [pc, #104]	@ (8003430 <HAL_LTDC_MspInit+0x248>)
 80033c8:	f000 fae2 	bl	8003990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80033cc:	2348      	movs	r3, #72	@ 0x48
 80033ce:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d0:	2302      	movs	r3, #2
 80033d2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d8:	2300      	movs	r3, #0
 80033da:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033dc:	230e      	movs	r3, #14
 80033de:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80033e4:	4619      	mov	r1, r3
 80033e6:	4813      	ldr	r0, [pc, #76]	@ (8003434 <HAL_LTDC_MspInit+0x24c>)
 80033e8:	f000 fad2 	bl	8003990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80033ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80033f0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f2:	2302      	movs	r3, #2
 80033f4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fa:	2300      	movs	r3, #0
 80033fc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80033fe:	2309      	movs	r3, #9
 8003400:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003402:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003406:	4619      	mov	r1, r3
 8003408:	4808      	ldr	r0, [pc, #32]	@ (800342c <HAL_LTDC_MspInit+0x244>)
 800340a:	f000 fac1 	bl	8003990 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800340e:	bf00      	nop
 8003410:	3768      	adds	r7, #104	@ 0x68
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40016800 	.word	0x40016800
 800341c:	40023800 	.word	0x40023800
 8003420:	40021400 	.word	0x40021400
 8003424:	40020000 	.word	0x40020000
 8003428:	40020400 	.word	0x40020400
 800342c:	40021800 	.word	0x40021800
 8003430:	40020800 	.word	0x40020800
 8003434:	40020c00 	.word	0x40020c00

08003438 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a0b      	ldr	r2, [pc, #44]	@ (8003474 <HAL_RNG_MspInit+0x3c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d10d      	bne.n	8003466 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	4b0a      	ldr	r3, [pc, #40]	@ (8003478 <HAL_RNG_MspInit+0x40>)
 8003450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003452:	4a09      	ldr	r2, [pc, #36]	@ (8003478 <HAL_RNG_MspInit+0x40>)
 8003454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003458:	6353      	str	r3, [r2, #52]	@ 0x34
 800345a:	4b07      	ldr	r3, [pc, #28]	@ (8003478 <HAL_RNG_MspInit+0x40>)
 800345c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800345e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8003466:	bf00      	nop
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	50060800 	.word	0x50060800
 8003478:	40023800 	.word	0x40023800

0800347c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08a      	sub	sp, #40	@ 0x28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003484:	f107 0314 	add.w	r3, r7, #20
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a19      	ldr	r2, [pc, #100]	@ (8003500 <HAL_SPI_MspInit+0x84>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d12c      	bne.n	80034f8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	4b18      	ldr	r3, [pc, #96]	@ (8003504 <HAL_SPI_MspInit+0x88>)
 80034a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a6:	4a17      	ldr	r2, [pc, #92]	@ (8003504 <HAL_SPI_MspInit+0x88>)
 80034a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80034ae:	4b15      	ldr	r3, [pc, #84]	@ (8003504 <HAL_SPI_MspInit+0x88>)
 80034b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	4b11      	ldr	r3, [pc, #68]	@ (8003504 <HAL_SPI_MspInit+0x88>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	4a10      	ldr	r2, [pc, #64]	@ (8003504 <HAL_SPI_MspInit+0x88>)
 80034c4:	f043 0320 	orr.w	r3, r3, #32
 80034c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003504 <HAL_SPI_MspInit+0x88>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80034d6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80034da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034dc:	2302      	movs	r3, #2
 80034de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e4:	2300      	movs	r3, #0
 80034e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80034e8:	2305      	movs	r3, #5
 80034ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034ec:	f107 0314 	add.w	r3, r7, #20
 80034f0:	4619      	mov	r1, r3
 80034f2:	4805      	ldr	r0, [pc, #20]	@ (8003508 <HAL_SPI_MspInit+0x8c>)
 80034f4:	f000 fa4c 	bl	8003990 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80034f8:	bf00      	nop
 80034fa:	3728      	adds	r7, #40	@ 0x28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40015000 	.word	0x40015000
 8003504:	40023800 	.word	0x40023800
 8003508:	40021400 	.word	0x40021400

0800350c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a08      	ldr	r2, [pc, #32]	@ (800353c <HAL_SPI_MspDeInit+0x30>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d10a      	bne.n	8003534 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800351e:	4b08      	ldr	r3, [pc, #32]	@ (8003540 <HAL_SPI_MspDeInit+0x34>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003522:	4a07      	ldr	r2, [pc, #28]	@ (8003540 <HAL_SPI_MspDeInit+0x34>)
 8003524:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003528:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800352a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800352e:	4805      	ldr	r0, [pc, #20]	@ (8003544 <HAL_SPI_MspDeInit+0x38>)
 8003530:	f000 fbda 	bl	8003ce8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40015000 	.word	0x40015000
 8003540:	40023800 	.word	0x40023800
 8003544:	40021400 	.word	0x40021400

08003548 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003558:	d10e      	bne.n	8003578 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	4b13      	ldr	r3, [pc, #76]	@ (80035ac <HAL_TIM_Base_MspInit+0x64>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	4a12      	ldr	r2, [pc, #72]	@ (80035ac <HAL_TIM_Base_MspInit+0x64>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6413      	str	r3, [r2, #64]	@ 0x40
 800356a:	4b10      	ldr	r3, [pc, #64]	@ (80035ac <HAL_TIM_Base_MspInit+0x64>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003576:	e012      	b.n	800359e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a0c      	ldr	r2, [pc, #48]	@ (80035b0 <HAL_TIM_Base_MspInit+0x68>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d10d      	bne.n	800359e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	4b09      	ldr	r3, [pc, #36]	@ (80035ac <HAL_TIM_Base_MspInit+0x64>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	4a08      	ldr	r2, [pc, #32]	@ (80035ac <HAL_TIM_Base_MspInit+0x64>)
 800358c:	f043 0308 	orr.w	r3, r3, #8
 8003590:	6413      	str	r3, [r2, #64]	@ 0x40
 8003592:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <HAL_TIM_Base_MspInit+0x64>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
}
 800359e:	bf00      	nop
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40000c00 	.word	0x40000c00

080035b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035b8:	bf00      	nop
 80035ba:	e7fd      	b.n	80035b8 <NMI_Handler+0x4>

080035bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035c0:	bf00      	nop
 80035c2:	e7fd      	b.n	80035c0 <HardFault_Handler+0x4>

080035c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035c8:	bf00      	nop
 80035ca:	e7fd      	b.n	80035c8 <MemManage_Handler+0x4>

080035cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035d0:	bf00      	nop
 80035d2:	e7fd      	b.n	80035d0 <BusFault_Handler+0x4>

080035d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035d8:	bf00      	nop
 80035da:	e7fd      	b.n	80035d8 <UsageFault_Handler+0x4>

080035dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035ea:	b480      	push	{r7}
 80035ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035fc:	bf00      	nop
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800360a:	f000 f897 	bl	800373c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800360e:	bf00      	nop
 8003610:	bd80      	pop	{r7, pc}

08003612 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8003612:	b480      	push	{r7}
 8003614:	af00      	add	r7, sp, #0
}
 8003616:	bf00      	nop
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003624:	4b06      	ldr	r3, [pc, #24]	@ (8003640 <SystemInit+0x20>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362a:	4a05      	ldr	r2, [pc, #20]	@ (8003640 <SystemInit+0x20>)
 800362c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003630:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003634:	bf00      	nop
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	e000ed00 	.word	0xe000ed00

08003644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003644:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800367c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003648:	f7ff ffea 	bl	8003620 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800364c:	480c      	ldr	r0, [pc, #48]	@ (8003680 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800364e:	490d      	ldr	r1, [pc, #52]	@ (8003684 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003650:	4a0d      	ldr	r2, [pc, #52]	@ (8003688 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003654:	e002      	b.n	800365c <LoopCopyDataInit>

08003656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800365a:	3304      	adds	r3, #4

0800365c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800365c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800365e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003660:	d3f9      	bcc.n	8003656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003662:	4a0a      	ldr	r2, [pc, #40]	@ (800368c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003664:	4c0a      	ldr	r4, [pc, #40]	@ (8003690 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003668:	e001      	b.n	800366e <LoopFillZerobss>

0800366a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800366a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800366c:	3204      	adds	r2, #4

0800366e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800366e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003670:	d3fb      	bcc.n	800366a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003672:	f002 fcf3 	bl	800605c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003676:	f7ff f92a 	bl	80028ce <main>
  bx  lr    
 800367a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800367c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003684:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8003688:	080073b0 	.word	0x080073b0
  ldr r2, =_sbss
 800368c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8003690:	20025e08 	.word	0x20025e08

08003694 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003694:	e7fe      	b.n	8003694 <ADC_IRQHandler>
	...

08003698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800369c:	4b0e      	ldr	r3, [pc, #56]	@ (80036d8 <HAL_Init+0x40>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a0d      	ldr	r2, [pc, #52]	@ (80036d8 <HAL_Init+0x40>)
 80036a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036a8:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <HAL_Init+0x40>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0a      	ldr	r2, [pc, #40]	@ (80036d8 <HAL_Init+0x40>)
 80036ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036b4:	4b08      	ldr	r3, [pc, #32]	@ (80036d8 <HAL_Init+0x40>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a07      	ldr	r2, [pc, #28]	@ (80036d8 <HAL_Init+0x40>)
 80036ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036c0:	2003      	movs	r0, #3
 80036c2:	f000 f931 	bl	8003928 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036c6:	2000      	movs	r0, #0
 80036c8:	f000 f808 	bl	80036dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036cc:	f7ff fcfa 	bl	80030c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40023c00 	.word	0x40023c00

080036dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036e4:	4b12      	ldr	r3, [pc, #72]	@ (8003730 <HAL_InitTick+0x54>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4b12      	ldr	r3, [pc, #72]	@ (8003734 <HAL_InitTick+0x58>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	4619      	mov	r1, r3
 80036ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80036f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 f93b 	bl	8003976 <HAL_SYSTICK_Config>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e00e      	b.n	8003728 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b0f      	cmp	r3, #15
 800370e:	d80a      	bhi.n	8003726 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003710:	2200      	movs	r2, #0
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	f04f 30ff 	mov.w	r0, #4294967295
 8003718:	f000 f911 	bl	800393e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800371c:	4a06      	ldr	r2, [pc, #24]	@ (8003738 <HAL_InitTick+0x5c>)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	e000      	b.n	8003728 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20000010 	.word	0x20000010
 8003734:	20000018 	.word	0x20000018
 8003738:	20000014 	.word	0x20000014

0800373c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003740:	4b06      	ldr	r3, [pc, #24]	@ (800375c <HAL_IncTick+0x20>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	4b06      	ldr	r3, [pc, #24]	@ (8003760 <HAL_IncTick+0x24>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4413      	add	r3, r2
 800374c:	4a04      	ldr	r2, [pc, #16]	@ (8003760 <HAL_IncTick+0x24>)
 800374e:	6013      	str	r3, [r2, #0]
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000018 	.word	0x20000018
 8003760:	20025e04 	.word	0x20025e04

08003764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return uwTick;
 8003768:	4b03      	ldr	r3, [pc, #12]	@ (8003778 <HAL_GetTick+0x14>)
 800376a:	681b      	ldr	r3, [r3, #0]
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	20025e04 	.word	0x20025e04

0800377c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003784:	f7ff ffee 	bl	8003764 <HAL_GetTick>
 8003788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003794:	d005      	beq.n	80037a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003796:	4b0a      	ldr	r3, [pc, #40]	@ (80037c0 <HAL_Delay+0x44>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4413      	add	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037a2:	bf00      	nop
 80037a4:	f7ff ffde 	bl	8003764 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d8f7      	bhi.n	80037a4 <HAL_Delay+0x28>
  {
  }
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000018 	.word	0x20000018

080037c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003808 <__NVIC_SetPriorityGrouping+0x44>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037e0:	4013      	ands	r3, r2
 80037e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f6:	4a04      	ldr	r2, [pc, #16]	@ (8003808 <__NVIC_SetPriorityGrouping+0x44>)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	60d3      	str	r3, [r2, #12]
}
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003810:	4b04      	ldr	r3, [pc, #16]	@ (8003824 <__NVIC_GetPriorityGrouping+0x18>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	0a1b      	lsrs	r3, r3, #8
 8003816:	f003 0307 	and.w	r3, r3, #7
}
 800381a:	4618      	mov	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	6039      	str	r1, [r7, #0]
 8003832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003838:	2b00      	cmp	r3, #0
 800383a:	db0a      	blt.n	8003852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	b2da      	uxtb	r2, r3
 8003840:	490c      	ldr	r1, [pc, #48]	@ (8003874 <__NVIC_SetPriority+0x4c>)
 8003842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003846:	0112      	lsls	r2, r2, #4
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	440b      	add	r3, r1
 800384c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003850:	e00a      	b.n	8003868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	b2da      	uxtb	r2, r3
 8003856:	4908      	ldr	r1, [pc, #32]	@ (8003878 <__NVIC_SetPriority+0x50>)
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	3b04      	subs	r3, #4
 8003860:	0112      	lsls	r2, r2, #4
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	440b      	add	r3, r1
 8003866:	761a      	strb	r2, [r3, #24]
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	e000e100 	.word	0xe000e100
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800387c:	b480      	push	{r7}
 800387e:	b089      	sub	sp, #36	@ 0x24
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f1c3 0307 	rsb	r3, r3, #7
 8003896:	2b04      	cmp	r3, #4
 8003898:	bf28      	it	cs
 800389a:	2304      	movcs	r3, #4
 800389c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3304      	adds	r3, #4
 80038a2:	2b06      	cmp	r3, #6
 80038a4:	d902      	bls.n	80038ac <NVIC_EncodePriority+0x30>
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	3b03      	subs	r3, #3
 80038aa:	e000      	b.n	80038ae <NVIC_EncodePriority+0x32>
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b0:	f04f 32ff 	mov.w	r2, #4294967295
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43da      	mvns	r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	401a      	ands	r2, r3
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038c4:	f04f 31ff 	mov.w	r1, #4294967295
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	fa01 f303 	lsl.w	r3, r1, r3
 80038ce:	43d9      	mvns	r1, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d4:	4313      	orrs	r3, r2
         );
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3724      	adds	r7, #36	@ 0x24
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038f4:	d301      	bcc.n	80038fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038f6:	2301      	movs	r3, #1
 80038f8:	e00f      	b.n	800391a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003924 <SysTick_Config+0x40>)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3b01      	subs	r3, #1
 8003900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003902:	210f      	movs	r1, #15
 8003904:	f04f 30ff 	mov.w	r0, #4294967295
 8003908:	f7ff ff8e 	bl	8003828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800390c:	4b05      	ldr	r3, [pc, #20]	@ (8003924 <SysTick_Config+0x40>)
 800390e:	2200      	movs	r2, #0
 8003910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003912:	4b04      	ldr	r3, [pc, #16]	@ (8003924 <SysTick_Config+0x40>)
 8003914:	2207      	movs	r2, #7
 8003916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	e000e010 	.word	0xe000e010

08003928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff ff47 	bl	80037c4 <__NVIC_SetPriorityGrouping>
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800393e:	b580      	push	{r7, lr}
 8003940:	b086      	sub	sp, #24
 8003942:	af00      	add	r7, sp, #0
 8003944:	4603      	mov	r3, r0
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
 800394a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003950:	f7ff ff5c 	bl	800380c <__NVIC_GetPriorityGrouping>
 8003954:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	6978      	ldr	r0, [r7, #20]
 800395c:	f7ff ff8e 	bl	800387c <NVIC_EncodePriority>
 8003960:	4602      	mov	r2, r0
 8003962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003966:	4611      	mov	r1, r2
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff ff5d 	bl	8003828 <__NVIC_SetPriority>
}
 800396e:	bf00      	nop
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff ffb0 	bl	80038e4 <SysTick_Config>
 8003984:	4603      	mov	r3, r0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003990:	b480      	push	{r7}
 8003992:	b089      	sub	sp, #36	@ 0x24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039a6:	2300      	movs	r3, #0
 80039a8:	61fb      	str	r3, [r7, #28]
 80039aa:	e177      	b.n	8003c9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039ac:	2201      	movs	r2, #1
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4013      	ands	r3, r2
 80039be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	f040 8166 	bne.w	8003c96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d005      	beq.n	80039e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d130      	bne.n	8003a44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	2203      	movs	r2, #3
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4013      	ands	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a18:	2201      	movs	r2, #1
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	091b      	lsrs	r3, r3, #4
 8003a2e:	f003 0201 	and.w	r2, r3, #1
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d017      	beq.n	8003a80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d123      	bne.n	8003ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	08da      	lsrs	r2, r3, #3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3208      	adds	r2, #8
 8003a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	220f      	movs	r2, #15
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	08da      	lsrs	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3208      	adds	r2, #8
 8003ace:	69b9      	ldr	r1, [r7, #24]
 8003ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	2203      	movs	r2, #3
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f003 0203 	and.w	r2, r3, #3
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80c0 	beq.w	8003c96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	4b66      	ldr	r3, [pc, #408]	@ (8003cb4 <HAL_GPIO_Init+0x324>)
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1e:	4a65      	ldr	r2, [pc, #404]	@ (8003cb4 <HAL_GPIO_Init+0x324>)
 8003b20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b26:	4b63      	ldr	r3, [pc, #396]	@ (8003cb4 <HAL_GPIO_Init+0x324>)
 8003b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b32:	4a61      	ldr	r2, [pc, #388]	@ (8003cb8 <HAL_GPIO_Init+0x328>)
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	089b      	lsrs	r3, r3, #2
 8003b38:	3302      	adds	r3, #2
 8003b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	220f      	movs	r2, #15
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4013      	ands	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a58      	ldr	r2, [pc, #352]	@ (8003cbc <HAL_GPIO_Init+0x32c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d037      	beq.n	8003bce <HAL_GPIO_Init+0x23e>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a57      	ldr	r2, [pc, #348]	@ (8003cc0 <HAL_GPIO_Init+0x330>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d031      	beq.n	8003bca <HAL_GPIO_Init+0x23a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a56      	ldr	r2, [pc, #344]	@ (8003cc4 <HAL_GPIO_Init+0x334>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d02b      	beq.n	8003bc6 <HAL_GPIO_Init+0x236>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a55      	ldr	r2, [pc, #340]	@ (8003cc8 <HAL_GPIO_Init+0x338>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d025      	beq.n	8003bc2 <HAL_GPIO_Init+0x232>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a54      	ldr	r2, [pc, #336]	@ (8003ccc <HAL_GPIO_Init+0x33c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d01f      	beq.n	8003bbe <HAL_GPIO_Init+0x22e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a53      	ldr	r2, [pc, #332]	@ (8003cd0 <HAL_GPIO_Init+0x340>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d019      	beq.n	8003bba <HAL_GPIO_Init+0x22a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a52      	ldr	r2, [pc, #328]	@ (8003cd4 <HAL_GPIO_Init+0x344>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d013      	beq.n	8003bb6 <HAL_GPIO_Init+0x226>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a51      	ldr	r2, [pc, #324]	@ (8003cd8 <HAL_GPIO_Init+0x348>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00d      	beq.n	8003bb2 <HAL_GPIO_Init+0x222>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a50      	ldr	r2, [pc, #320]	@ (8003cdc <HAL_GPIO_Init+0x34c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d007      	beq.n	8003bae <HAL_GPIO_Init+0x21e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a4f      	ldr	r2, [pc, #316]	@ (8003ce0 <HAL_GPIO_Init+0x350>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d101      	bne.n	8003baa <HAL_GPIO_Init+0x21a>
 8003ba6:	2309      	movs	r3, #9
 8003ba8:	e012      	b.n	8003bd0 <HAL_GPIO_Init+0x240>
 8003baa:	230a      	movs	r3, #10
 8003bac:	e010      	b.n	8003bd0 <HAL_GPIO_Init+0x240>
 8003bae:	2308      	movs	r3, #8
 8003bb0:	e00e      	b.n	8003bd0 <HAL_GPIO_Init+0x240>
 8003bb2:	2307      	movs	r3, #7
 8003bb4:	e00c      	b.n	8003bd0 <HAL_GPIO_Init+0x240>
 8003bb6:	2306      	movs	r3, #6
 8003bb8:	e00a      	b.n	8003bd0 <HAL_GPIO_Init+0x240>
 8003bba:	2305      	movs	r3, #5
 8003bbc:	e008      	b.n	8003bd0 <HAL_GPIO_Init+0x240>
 8003bbe:	2304      	movs	r3, #4
 8003bc0:	e006      	b.n	8003bd0 <HAL_GPIO_Init+0x240>
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e004      	b.n	8003bd0 <HAL_GPIO_Init+0x240>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e002      	b.n	8003bd0 <HAL_GPIO_Init+0x240>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <HAL_GPIO_Init+0x240>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	69fa      	ldr	r2, [r7, #28]
 8003bd2:	f002 0203 	and.w	r2, r2, #3
 8003bd6:	0092      	lsls	r2, r2, #2
 8003bd8:	4093      	lsls	r3, r2
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003be0:	4935      	ldr	r1, [pc, #212]	@ (8003cb8 <HAL_GPIO_Init+0x328>)
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	089b      	lsrs	r3, r3, #2
 8003be6:	3302      	adds	r3, #2
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bee:	4b3d      	ldr	r3, [pc, #244]	@ (8003ce4 <HAL_GPIO_Init+0x354>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c12:	4a34      	ldr	r2, [pc, #208]	@ (8003ce4 <HAL_GPIO_Init+0x354>)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c18:	4b32      	ldr	r3, [pc, #200]	@ (8003ce4 <HAL_GPIO_Init+0x354>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	43db      	mvns	r3, r3
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4013      	ands	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c3c:	4a29      	ldr	r2, [pc, #164]	@ (8003ce4 <HAL_GPIO_Init+0x354>)
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c42:	4b28      	ldr	r3, [pc, #160]	@ (8003ce4 <HAL_GPIO_Init+0x354>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c66:	4a1f      	ldr	r2, [pc, #124]	@ (8003ce4 <HAL_GPIO_Init+0x354>)
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce4 <HAL_GPIO_Init+0x354>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c90:	4a14      	ldr	r2, [pc, #80]	@ (8003ce4 <HAL_GPIO_Init+0x354>)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2b0f      	cmp	r3, #15
 8003ca0:	f67f ae84 	bls.w	80039ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	3724      	adds	r7, #36	@ 0x24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	40013800 	.word	0x40013800
 8003cbc:	40020000 	.word	0x40020000
 8003cc0:	40020400 	.word	0x40020400
 8003cc4:	40020800 	.word	0x40020800
 8003cc8:	40020c00 	.word	0x40020c00
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40021400 	.word	0x40021400
 8003cd4:	40021800 	.word	0x40021800
 8003cd8:	40021c00 	.word	0x40021c00
 8003cdc:	40022000 	.word	0x40022000
 8003ce0:	40022400 	.word	0x40022400
 8003ce4:	40013c00 	.word	0x40013c00

08003ce8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	e0d9      	b.n	8003eb8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d04:	2201      	movs	r2, #1
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4013      	ands	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	f040 80c9 	bne.w	8003eb2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003d20:	4a6b      	ldr	r2, [pc, #428]	@ (8003ed0 <HAL_GPIO_DeInit+0x1e8>)
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	089b      	lsrs	r3, r3, #2
 8003d26:	3302      	adds	r3, #2
 8003d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	220f      	movs	r2, #15
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a63      	ldr	r2, [pc, #396]	@ (8003ed4 <HAL_GPIO_DeInit+0x1ec>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d037      	beq.n	8003dba <HAL_GPIO_DeInit+0xd2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a62      	ldr	r2, [pc, #392]	@ (8003ed8 <HAL_GPIO_DeInit+0x1f0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d031      	beq.n	8003db6 <HAL_GPIO_DeInit+0xce>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a61      	ldr	r2, [pc, #388]	@ (8003edc <HAL_GPIO_DeInit+0x1f4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d02b      	beq.n	8003db2 <HAL_GPIO_DeInit+0xca>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a60      	ldr	r2, [pc, #384]	@ (8003ee0 <HAL_GPIO_DeInit+0x1f8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d025      	beq.n	8003dae <HAL_GPIO_DeInit+0xc6>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a5f      	ldr	r2, [pc, #380]	@ (8003ee4 <HAL_GPIO_DeInit+0x1fc>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d01f      	beq.n	8003daa <HAL_GPIO_DeInit+0xc2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a5e      	ldr	r2, [pc, #376]	@ (8003ee8 <HAL_GPIO_DeInit+0x200>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d019      	beq.n	8003da6 <HAL_GPIO_DeInit+0xbe>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a5d      	ldr	r2, [pc, #372]	@ (8003eec <HAL_GPIO_DeInit+0x204>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <HAL_GPIO_DeInit+0xba>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a5c      	ldr	r2, [pc, #368]	@ (8003ef0 <HAL_GPIO_DeInit+0x208>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00d      	beq.n	8003d9e <HAL_GPIO_DeInit+0xb6>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a5b      	ldr	r2, [pc, #364]	@ (8003ef4 <HAL_GPIO_DeInit+0x20c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d007      	beq.n	8003d9a <HAL_GPIO_DeInit+0xb2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a5a      	ldr	r2, [pc, #360]	@ (8003ef8 <HAL_GPIO_DeInit+0x210>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d101      	bne.n	8003d96 <HAL_GPIO_DeInit+0xae>
 8003d92:	2309      	movs	r3, #9
 8003d94:	e012      	b.n	8003dbc <HAL_GPIO_DeInit+0xd4>
 8003d96:	230a      	movs	r3, #10
 8003d98:	e010      	b.n	8003dbc <HAL_GPIO_DeInit+0xd4>
 8003d9a:	2308      	movs	r3, #8
 8003d9c:	e00e      	b.n	8003dbc <HAL_GPIO_DeInit+0xd4>
 8003d9e:	2307      	movs	r3, #7
 8003da0:	e00c      	b.n	8003dbc <HAL_GPIO_DeInit+0xd4>
 8003da2:	2306      	movs	r3, #6
 8003da4:	e00a      	b.n	8003dbc <HAL_GPIO_DeInit+0xd4>
 8003da6:	2305      	movs	r3, #5
 8003da8:	e008      	b.n	8003dbc <HAL_GPIO_DeInit+0xd4>
 8003daa:	2304      	movs	r3, #4
 8003dac:	e006      	b.n	8003dbc <HAL_GPIO_DeInit+0xd4>
 8003dae:	2303      	movs	r3, #3
 8003db0:	e004      	b.n	8003dbc <HAL_GPIO_DeInit+0xd4>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e002      	b.n	8003dbc <HAL_GPIO_DeInit+0xd4>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <HAL_GPIO_DeInit+0xd4>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	f002 0203 	and.w	r2, r2, #3
 8003dc2:	0092      	lsls	r2, r2, #2
 8003dc4:	4093      	lsls	r3, r2
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d132      	bne.n	8003e32 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003dcc:	4b4b      	ldr	r3, [pc, #300]	@ (8003efc <HAL_GPIO_DeInit+0x214>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	4949      	ldr	r1, [pc, #292]	@ (8003efc <HAL_GPIO_DeInit+0x214>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003dda:	4b48      	ldr	r3, [pc, #288]	@ (8003efc <HAL_GPIO_DeInit+0x214>)
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	4946      	ldr	r1, [pc, #280]	@ (8003efc <HAL_GPIO_DeInit+0x214>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003de8:	4b44      	ldr	r3, [pc, #272]	@ (8003efc <HAL_GPIO_DeInit+0x214>)
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	43db      	mvns	r3, r3
 8003df0:	4942      	ldr	r1, [pc, #264]	@ (8003efc <HAL_GPIO_DeInit+0x214>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003df6:	4b41      	ldr	r3, [pc, #260]	@ (8003efc <HAL_GPIO_DeInit+0x214>)
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	493f      	ldr	r1, [pc, #252]	@ (8003efc <HAL_GPIO_DeInit+0x214>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	220f      	movs	r2, #15
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003e14:	4a2e      	ldr	r2, [pc, #184]	@ (8003ed0 <HAL_GPIO_DeInit+0x1e8>)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	089b      	lsrs	r3, r3, #2
 8003e1a:	3302      	adds	r3, #2
 8003e1c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	43da      	mvns	r2, r3
 8003e24:	482a      	ldr	r0, [pc, #168]	@ (8003ed0 <HAL_GPIO_DeInit+0x1e8>)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	089b      	lsrs	r3, r3, #2
 8003e2a:	400a      	ands	r2, r1
 8003e2c:	3302      	adds	r3, #2
 8003e2e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	2103      	movs	r1, #3
 8003e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	401a      	ands	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	08da      	lsrs	r2, r3, #3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3208      	adds	r2, #8
 8003e50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	220f      	movs	r2, #15
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	08d2      	lsrs	r2, r2, #3
 8003e68:	4019      	ands	r1, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3208      	adds	r2, #8
 8003e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	2103      	movs	r1, #3
 8003e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e80:	43db      	mvns	r3, r3
 8003e82:	401a      	ands	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	fa01 f303 	lsl.w	r3, r1, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	401a      	ands	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	2103      	movs	r1, #3
 8003ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	401a      	ands	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2b0f      	cmp	r3, #15
 8003ebc:	f67f af22 	bls.w	8003d04 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40013800 	.word	0x40013800
 8003ed4:	40020000 	.word	0x40020000
 8003ed8:	40020400 	.word	0x40020400
 8003edc:	40020800 	.word	0x40020800
 8003ee0:	40020c00 	.word	0x40020c00
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40021400 	.word	0x40021400
 8003eec:	40021800 	.word	0x40021800
 8003ef0:	40021c00 	.word	0x40021c00
 8003ef4:	40022000 	.word	0x40022000
 8003ef8:	40022400 	.word	0x40022400
 8003efc:	40013c00 	.word	0x40013c00

08003f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	807b      	strh	r3, [r7, #2]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f10:	787b      	ldrb	r3, [r7, #1]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f16:	887a      	ldrh	r2, [r7, #2]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f1c:	e003      	b.n	8003f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f1e:	887b      	ldrh	r3, [r7, #2]
 8003f20:	041a      	lsls	r2, r3, #16
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	619a      	str	r2, [r3, #24]
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
	...

08003f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e12b      	b.n	800419e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff f8da 	bl	8003114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2224      	movs	r2, #36	@ 0x24
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f98:	f001 f8a2 	bl	80050e0 <HAL_RCC_GetPCLK1Freq>
 8003f9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	4a81      	ldr	r2, [pc, #516]	@ (80041a8 <HAL_I2C_Init+0x274>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d807      	bhi.n	8003fb8 <HAL_I2C_Init+0x84>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4a80      	ldr	r2, [pc, #512]	@ (80041ac <HAL_I2C_Init+0x278>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	bf94      	ite	ls
 8003fb0:	2301      	movls	r3, #1
 8003fb2:	2300      	movhi	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	e006      	b.n	8003fc6 <HAL_I2C_Init+0x92>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4a7d      	ldr	r2, [pc, #500]	@ (80041b0 <HAL_I2C_Init+0x27c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	bf94      	ite	ls
 8003fc0:	2301      	movls	r3, #1
 8003fc2:	2300      	movhi	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e0e7      	b.n	800419e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4a78      	ldr	r2, [pc, #480]	@ (80041b4 <HAL_I2C_Init+0x280>)
 8003fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd6:	0c9b      	lsrs	r3, r3, #18
 8003fd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4a6a      	ldr	r2, [pc, #424]	@ (80041a8 <HAL_I2C_Init+0x274>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d802      	bhi.n	8004008 <HAL_I2C_Init+0xd4>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	3301      	adds	r3, #1
 8004006:	e009      	b.n	800401c <HAL_I2C_Init+0xe8>
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800400e:	fb02 f303 	mul.w	r3, r2, r3
 8004012:	4a69      	ldr	r2, [pc, #420]	@ (80041b8 <HAL_I2C_Init+0x284>)
 8004014:	fba2 2303 	umull	r2, r3, r2, r3
 8004018:	099b      	lsrs	r3, r3, #6
 800401a:	3301      	adds	r3, #1
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	430b      	orrs	r3, r1
 8004022:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800402e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	495c      	ldr	r1, [pc, #368]	@ (80041a8 <HAL_I2C_Init+0x274>)
 8004038:	428b      	cmp	r3, r1
 800403a:	d819      	bhi.n	8004070 <HAL_I2C_Init+0x13c>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	1e59      	subs	r1, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	fbb1 f3f3 	udiv	r3, r1, r3
 800404a:	1c59      	adds	r1, r3, #1
 800404c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004050:	400b      	ands	r3, r1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <HAL_I2C_Init+0x138>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1e59      	subs	r1, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	fbb1 f3f3 	udiv	r3, r1, r3
 8004064:	3301      	adds	r3, #1
 8004066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406a:	e051      	b.n	8004110 <HAL_I2C_Init+0x1dc>
 800406c:	2304      	movs	r3, #4
 800406e:	e04f      	b.n	8004110 <HAL_I2C_Init+0x1dc>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d111      	bne.n	800409c <HAL_I2C_Init+0x168>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	1e58      	subs	r0, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6859      	ldr	r1, [r3, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	440b      	add	r3, r1
 8004086:	fbb0 f3f3 	udiv	r3, r0, r3
 800408a:	3301      	adds	r3, #1
 800408c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004090:	2b00      	cmp	r3, #0
 8004092:	bf0c      	ite	eq
 8004094:	2301      	moveq	r3, #1
 8004096:	2300      	movne	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	e012      	b.n	80040c2 <HAL_I2C_Init+0x18e>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	1e58      	subs	r0, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6859      	ldr	r1, [r3, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	0099      	lsls	r1, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80040b2:	3301      	adds	r3, #1
 80040b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bf0c      	ite	eq
 80040bc:	2301      	moveq	r3, #1
 80040be:	2300      	movne	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <HAL_I2C_Init+0x196>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e022      	b.n	8004110 <HAL_I2C_Init+0x1dc>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10e      	bne.n	80040f0 <HAL_I2C_Init+0x1bc>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1e58      	subs	r0, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6859      	ldr	r1, [r3, #4]
 80040da:	460b      	mov	r3, r1
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	440b      	add	r3, r1
 80040e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e4:	3301      	adds	r3, #1
 80040e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040ee:	e00f      	b.n	8004110 <HAL_I2C_Init+0x1dc>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	1e58      	subs	r0, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6859      	ldr	r1, [r3, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	0099      	lsls	r1, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	fbb0 f3f3 	udiv	r3, r0, r3
 8004106:	3301      	adds	r3, #1
 8004108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800410c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	6809      	ldr	r1, [r1, #0]
 8004114:	4313      	orrs	r3, r2
 8004116:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69da      	ldr	r2, [r3, #28]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800413e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6911      	ldr	r1, [r2, #16]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68d2      	ldr	r2, [r2, #12]
 800414a:	4311      	orrs	r1, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6812      	ldr	r2, [r2, #0]
 8004150:	430b      	orrs	r3, r1
 8004152:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	000186a0 	.word	0x000186a0
 80041ac:	001e847f 	.word	0x001e847f
 80041b0:	003d08ff 	.word	0x003d08ff
 80041b4:	431bde83 	.word	0x431bde83
 80041b8:	10624dd3 	.word	0x10624dd3

080041bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b20      	cmp	r3, #32
 80041d0:	d129      	bne.n	8004226 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2224      	movs	r2, #36	@ 0x24
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0201 	bic.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0210 	bic.w	r2, r2, #16
 80041f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0201 	orr.w	r2, r2, #1
 8004218:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e000      	b.n	8004228 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004226:	2302      	movs	r3, #2
  }
}
 8004228:	4618      	mov	r0, r3
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b20      	cmp	r3, #32
 800424c:	d12a      	bne.n	80042a4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2224      	movs	r2, #36	@ 0x24
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800426e:	89fb      	ldrh	r3, [r7, #14]
 8004270:	f023 030f 	bic.w	r3, r3, #15
 8004274:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	b29a      	uxth	r2, r3
 800427a:	89fb      	ldrh	r3, [r7, #14]
 800427c:	4313      	orrs	r3, r2
 800427e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	89fa      	ldrh	r2, [r7, #14]
 8004286:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	e000      	b.n	80042a6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80042a4:	2302      	movs	r3, #2
  }
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
	...

080042b4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e0bf      	b.n	8004446 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7fe ff84 	bl	80031e8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80042f6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6999      	ldr	r1, [r3, #24]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800430c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6899      	ldr	r1, [r3, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	4b4a      	ldr	r3, [pc, #296]	@ (8004450 <HAL_LTDC_Init+0x19c>)
 8004328:	400b      	ands	r3, r1
 800432a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	041b      	lsls	r3, r3, #16
 8004332:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6899      	ldr	r1, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699a      	ldr	r2, [r3, #24]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68d9      	ldr	r1, [r3, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4b3e      	ldr	r3, [pc, #248]	@ (8004450 <HAL_LTDC_Init+0x19c>)
 8004356:	400b      	ands	r3, r1
 8004358:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	041b      	lsls	r3, r3, #16
 8004360:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68d9      	ldr	r1, [r3, #12]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1a      	ldr	r2, [r3, #32]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6919      	ldr	r1, [r3, #16]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b33      	ldr	r3, [pc, #204]	@ (8004450 <HAL_LTDC_Init+0x19c>)
 8004384:	400b      	ands	r3, r1
 8004386:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6919      	ldr	r1, [r3, #16]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6959      	ldr	r1, [r3, #20]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b27      	ldr	r3, [pc, #156]	@ (8004450 <HAL_LTDC_Init+0x19c>)
 80043b2:	400b      	ands	r3, r1
 80043b4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ba:	041b      	lsls	r3, r3, #16
 80043bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6959      	ldr	r1, [r3, #20]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80043e4:	041b      	lsls	r3, r3, #16
 80043e6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80043f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0206 	orr.w	r2, r2, #6
 8004422:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	f000f800 	.word	0xf000f800

08004454 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004454:	b5b0      	push	{r4, r5, r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_LTDC_ConfigLayer+0x1a>
 800446a:	2302      	movs	r3, #2
 800446c:	e02c      	b.n	80044c8 <HAL_LTDC_ConfigLayer+0x74>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2202      	movs	r2, #2
 800447a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2134      	movs	r1, #52	@ 0x34
 8004484:	fb01 f303 	mul.w	r3, r1, r3
 8004488:	4413      	add	r3, r2
 800448a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	4614      	mov	r4, r2
 8004492:	461d      	mov	r5, r3
 8004494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800449a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800449c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800449e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f811 	bl	80044d0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2201      	movs	r2, #1
 80044b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bdb0      	pop	{r4, r5, r7, pc}

080044d0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b089      	sub	sp, #36	@ 0x24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	0c1b      	lsrs	r3, r3, #16
 80044e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ec:	4413      	add	r3, r2
 80044ee:	041b      	lsls	r3, r3, #16
 80044f0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	01db      	lsls	r3, r3, #7
 80044fc:	4413      	add	r3, r2
 80044fe:	3384      	adds	r3, #132	@ 0x84
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	6812      	ldr	r2, [r2, #0]
 8004506:	4611      	mov	r1, r2
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	01d2      	lsls	r2, r2, #7
 800450c:	440a      	add	r2, r1
 800450e:	3284      	adds	r2, #132	@ 0x84
 8004510:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004514:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	0c1b      	lsrs	r3, r3, #16
 8004522:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004526:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004528:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4619      	mov	r1, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	01db      	lsls	r3, r3, #7
 8004534:	440b      	add	r3, r1
 8004536:	3384      	adds	r3, #132	@ 0x84
 8004538:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800453e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800454e:	4413      	add	r3, r2
 8004550:	041b      	lsls	r3, r3, #16
 8004552:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	01db      	lsls	r3, r3, #7
 800455e:	4413      	add	r3, r2
 8004560:	3384      	adds	r3, #132	@ 0x84
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	4611      	mov	r1, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	01d2      	lsls	r2, r2, #7
 800456e:	440a      	add	r2, r1
 8004570:	3284      	adds	r2, #132	@ 0x84
 8004572:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004576:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004586:	4413      	add	r3, r2
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4619      	mov	r1, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	01db      	lsls	r3, r3, #7
 8004594:	440b      	add	r3, r1
 8004596:	3384      	adds	r3, #132	@ 0x84
 8004598:	4619      	mov	r1, r3
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	4313      	orrs	r3, r2
 800459e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	461a      	mov	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	01db      	lsls	r3, r3, #7
 80045aa:	4413      	add	r3, r2
 80045ac:	3384      	adds	r3, #132	@ 0x84
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	6812      	ldr	r2, [r2, #0]
 80045b4:	4611      	mov	r1, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	01d2      	lsls	r2, r2, #7
 80045ba:	440a      	add	r2, r1
 80045bc:	3284      	adds	r2, #132	@ 0x84
 80045be:	f023 0307 	bic.w	r3, r3, #7
 80045c2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	01db      	lsls	r3, r3, #7
 80045ce:	4413      	add	r3, r2
 80045d0:	3384      	adds	r3, #132	@ 0x84
 80045d2:	461a      	mov	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80045e0:	021b      	lsls	r3, r3, #8
 80045e2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80045ea:	041b      	lsls	r3, r3, #16
 80045ec:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	061b      	lsls	r3, r3, #24
 80045f4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	01db      	lsls	r3, r3, #7
 8004600:	4413      	add	r3, r2
 8004602:	3384      	adds	r3, #132	@ 0x84
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	01db      	lsls	r3, r3, #7
 8004610:	4413      	add	r3, r2
 8004612:	3384      	adds	r3, #132	@ 0x84
 8004614:	461a      	mov	r2, r3
 8004616:	2300      	movs	r3, #0
 8004618:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004620:	461a      	mov	r2, r3
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	431a      	orrs	r2, r3
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	431a      	orrs	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4619      	mov	r1, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	01db      	lsls	r3, r3, #7
 8004634:	440b      	add	r3, r1
 8004636:	3384      	adds	r3, #132	@ 0x84
 8004638:	4619      	mov	r1, r3
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	01db      	lsls	r3, r3, #7
 800464a:	4413      	add	r3, r2
 800464c:	3384      	adds	r3, #132	@ 0x84
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	6812      	ldr	r2, [r2, #0]
 8004654:	4611      	mov	r1, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	01d2      	lsls	r2, r2, #7
 800465a:	440a      	add	r2, r1
 800465c:	3284      	adds	r2, #132	@ 0x84
 800465e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004662:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	01db      	lsls	r3, r3, #7
 800466e:	4413      	add	r3, r2
 8004670:	3384      	adds	r3, #132	@ 0x84
 8004672:	461a      	mov	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	01db      	lsls	r3, r3, #7
 8004684:	4413      	add	r3, r2
 8004686:	3384      	adds	r3, #132	@ 0x84
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	6812      	ldr	r2, [r2, #0]
 800468e:	4611      	mov	r1, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	01d2      	lsls	r2, r2, #7
 8004694:	440a      	add	r2, r1
 8004696:	3284      	adds	r2, #132	@ 0x84
 8004698:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800469c:	f023 0307 	bic.w	r3, r3, #7
 80046a0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	69da      	ldr	r2, [r3, #28]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	6809      	ldr	r1, [r1, #0]
 80046ae:	4608      	mov	r0, r1
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	01c9      	lsls	r1, r1, #7
 80046b4:	4401      	add	r1, r0
 80046b6:	3184      	adds	r1, #132	@ 0x84
 80046b8:	4313      	orrs	r3, r2
 80046ba:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	01db      	lsls	r3, r3, #7
 80046c6:	4413      	add	r3, r2
 80046c8:	3384      	adds	r3, #132	@ 0x84
 80046ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	461a      	mov	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	01db      	lsls	r3, r3, #7
 80046d6:	4413      	add	r3, r2
 80046d8:	3384      	adds	r3, #132	@ 0x84
 80046da:	461a      	mov	r2, r3
 80046dc:	2300      	movs	r3, #0
 80046de:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	01db      	lsls	r3, r3, #7
 80046ea:	4413      	add	r3, r2
 80046ec:	3384      	adds	r3, #132	@ 0x84
 80046ee:	461a      	mov	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d102      	bne.n	8004704 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80046fe:	2304      	movs	r3, #4
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	e01b      	b.n	800473c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d102      	bne.n	8004712 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800470c:	2303      	movs	r3, #3
 800470e:	61fb      	str	r3, [r7, #28]
 8004710:	e014      	b.n	800473c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b04      	cmp	r3, #4
 8004718:	d00b      	beq.n	8004732 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800471e:	2b02      	cmp	r3, #2
 8004720:	d007      	beq.n	8004732 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004726:	2b03      	cmp	r3, #3
 8004728:	d003      	beq.n	8004732 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800472e:	2b07      	cmp	r3, #7
 8004730:	d102      	bne.n	8004738 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004732:	2302      	movs	r3, #2
 8004734:	61fb      	str	r3, [r7, #28]
 8004736:	e001      	b.n	800473c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004738:	2301      	movs	r3, #1
 800473a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	01db      	lsls	r3, r3, #7
 8004746:	4413      	add	r3, r2
 8004748:	3384      	adds	r3, #132	@ 0x84
 800474a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	4611      	mov	r1, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	01d2      	lsls	r2, r2, #7
 8004756:	440a      	add	r2, r1
 8004758:	3284      	adds	r2, #132	@ 0x84
 800475a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800475e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	fb02 f303 	mul.w	r3, r2, r3
 800476a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	6859      	ldr	r1, [r3, #4]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	1acb      	subs	r3, r1, r3
 8004776:	69f9      	ldr	r1, [r7, #28]
 8004778:	fb01 f303 	mul.w	r3, r1, r3
 800477c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800477e:	68f9      	ldr	r1, [r7, #12]
 8004780:	6809      	ldr	r1, [r1, #0]
 8004782:	4608      	mov	r0, r1
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	01c9      	lsls	r1, r1, #7
 8004788:	4401      	add	r1, r0
 800478a:	3184      	adds	r1, #132	@ 0x84
 800478c:	4313      	orrs	r3, r2
 800478e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	461a      	mov	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	01db      	lsls	r3, r3, #7
 800479a:	4413      	add	r3, r2
 800479c:	3384      	adds	r3, #132	@ 0x84
 800479e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	4611      	mov	r1, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	01d2      	lsls	r2, r2, #7
 80047aa:	440a      	add	r2, r1
 80047ac:	3284      	adds	r2, #132	@ 0x84
 80047ae:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80047b2:	f023 0307 	bic.w	r3, r3, #7
 80047b6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	461a      	mov	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	01db      	lsls	r3, r3, #7
 80047c2:	4413      	add	r3, r2
 80047c4:	3384      	adds	r3, #132	@ 0x84
 80047c6:	461a      	mov	r2, r3
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047cc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	01db      	lsls	r3, r3, #7
 80047d8:	4413      	add	r3, r2
 80047da:	3384      	adds	r3, #132	@ 0x84
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	4611      	mov	r1, r2
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	01d2      	lsls	r2, r2, #7
 80047e8:	440a      	add	r2, r1
 80047ea:	3284      	adds	r2, #132	@ 0x84
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	6013      	str	r3, [r2, #0]
}
 80047f2:	bf00      	nop
 80047f4:	3724      	adds	r7, #36	@ 0x24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e267      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d075      	beq.n	800490a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800481e:	4b88      	ldr	r3, [pc, #544]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 030c 	and.w	r3, r3, #12
 8004826:	2b04      	cmp	r3, #4
 8004828:	d00c      	beq.n	8004844 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800482a:	4b85      	ldr	r3, [pc, #532]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004832:	2b08      	cmp	r3, #8
 8004834:	d112      	bne.n	800485c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004836:	4b82      	ldr	r3, [pc, #520]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800483e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004842:	d10b      	bne.n	800485c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004844:	4b7e      	ldr	r3, [pc, #504]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d05b      	beq.n	8004908 <HAL_RCC_OscConfig+0x108>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d157      	bne.n	8004908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e242      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004864:	d106      	bne.n	8004874 <HAL_RCC_OscConfig+0x74>
 8004866:	4b76      	ldr	r3, [pc, #472]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a75      	ldr	r2, [pc, #468]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 800486c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	e01d      	b.n	80048b0 <HAL_RCC_OscConfig+0xb0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800487c:	d10c      	bne.n	8004898 <HAL_RCC_OscConfig+0x98>
 800487e:	4b70      	ldr	r3, [pc, #448]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a6f      	ldr	r2, [pc, #444]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004884:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	4b6d      	ldr	r3, [pc, #436]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a6c      	ldr	r2, [pc, #432]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	e00b      	b.n	80048b0 <HAL_RCC_OscConfig+0xb0>
 8004898:	4b69      	ldr	r3, [pc, #420]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a68      	ldr	r2, [pc, #416]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 800489e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048a2:	6013      	str	r3, [r2, #0]
 80048a4:	4b66      	ldr	r3, [pc, #408]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a65      	ldr	r2, [pc, #404]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 80048aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d013      	beq.n	80048e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b8:	f7fe ff54 	bl	8003764 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048c0:	f7fe ff50 	bl	8003764 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b64      	cmp	r3, #100	@ 0x64
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e207      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d2:	4b5b      	ldr	r3, [pc, #364]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0f0      	beq.n	80048c0 <HAL_RCC_OscConfig+0xc0>
 80048de:	e014      	b.n	800490a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e0:	f7fe ff40 	bl	8003764 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048e8:	f7fe ff3c 	bl	8003764 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b64      	cmp	r3, #100	@ 0x64
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e1f3      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048fa:	4b51      	ldr	r3, [pc, #324]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0xe8>
 8004906:	e000      	b.n	800490a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d063      	beq.n	80049de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004916:	4b4a      	ldr	r3, [pc, #296]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 030c 	and.w	r3, r3, #12
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00b      	beq.n	800493a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004922:	4b47      	ldr	r3, [pc, #284]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800492a:	2b08      	cmp	r3, #8
 800492c:	d11c      	bne.n	8004968 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800492e:	4b44      	ldr	r3, [pc, #272]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d116      	bne.n	8004968 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800493a:	4b41      	ldr	r3, [pc, #260]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d005      	beq.n	8004952 <HAL_RCC_OscConfig+0x152>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d001      	beq.n	8004952 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e1c7      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004952:	4b3b      	ldr	r3, [pc, #236]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	4937      	ldr	r1, [pc, #220]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004962:	4313      	orrs	r3, r2
 8004964:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004966:	e03a      	b.n	80049de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d020      	beq.n	80049b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004970:	4b34      	ldr	r3, [pc, #208]	@ (8004a44 <HAL_RCC_OscConfig+0x244>)
 8004972:	2201      	movs	r2, #1
 8004974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004976:	f7fe fef5 	bl	8003764 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800497e:	f7fe fef1 	bl	8003764 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e1a8      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004990:	4b2b      	ldr	r3, [pc, #172]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0f0      	beq.n	800497e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800499c:	4b28      	ldr	r3, [pc, #160]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	4925      	ldr	r1, [pc, #148]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	600b      	str	r3, [r1, #0]
 80049b0:	e015      	b.n	80049de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049b2:	4b24      	ldr	r3, [pc, #144]	@ (8004a44 <HAL_RCC_OscConfig+0x244>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b8:	f7fe fed4 	bl	8003764 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049c0:	f7fe fed0 	bl	8003764 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e187      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1f0      	bne.n	80049c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d036      	beq.n	8004a58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d016      	beq.n	8004a20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049f2:	4b15      	ldr	r3, [pc, #84]	@ (8004a48 <HAL_RCC_OscConfig+0x248>)
 80049f4:	2201      	movs	r2, #1
 80049f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f8:	f7fe feb4 	bl	8003764 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a00:	f7fe feb0 	bl	8003764 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e167      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a12:	4b0b      	ldr	r3, [pc, #44]	@ (8004a40 <HAL_RCC_OscConfig+0x240>)
 8004a14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0f0      	beq.n	8004a00 <HAL_RCC_OscConfig+0x200>
 8004a1e:	e01b      	b.n	8004a58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a20:	4b09      	ldr	r3, [pc, #36]	@ (8004a48 <HAL_RCC_OscConfig+0x248>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a26:	f7fe fe9d 	bl	8003764 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a2c:	e00e      	b.n	8004a4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a2e:	f7fe fe99 	bl	8003764 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d907      	bls.n	8004a4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e150      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
 8004a40:	40023800 	.word	0x40023800
 8004a44:	42470000 	.word	0x42470000
 8004a48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a4c:	4b88      	ldr	r3, [pc, #544]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004a4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1ea      	bne.n	8004a2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 8097 	beq.w	8004b94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a66:	2300      	movs	r3, #0
 8004a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a6a:	4b81      	ldr	r3, [pc, #516]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10f      	bne.n	8004a96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	4b7d      	ldr	r3, [pc, #500]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7e:	4a7c      	ldr	r2, [pc, #496]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a86:	4b7a      	ldr	r3, [pc, #488]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a8e:	60bb      	str	r3, [r7, #8]
 8004a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a92:	2301      	movs	r3, #1
 8004a94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a96:	4b77      	ldr	r3, [pc, #476]	@ (8004c74 <HAL_RCC_OscConfig+0x474>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d118      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aa2:	4b74      	ldr	r3, [pc, #464]	@ (8004c74 <HAL_RCC_OscConfig+0x474>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a73      	ldr	r2, [pc, #460]	@ (8004c74 <HAL_RCC_OscConfig+0x474>)
 8004aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aae:	f7fe fe59 	bl	8003764 <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab6:	f7fe fe55 	bl	8003764 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e10c      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac8:	4b6a      	ldr	r3, [pc, #424]	@ (8004c74 <HAL_RCC_OscConfig+0x474>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0f0      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d106      	bne.n	8004aea <HAL_RCC_OscConfig+0x2ea>
 8004adc:	4b64      	ldr	r3, [pc, #400]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae0:	4a63      	ldr	r2, [pc, #396]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004ae2:	f043 0301 	orr.w	r3, r3, #1
 8004ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ae8:	e01c      	b.n	8004b24 <HAL_RCC_OscConfig+0x324>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	2b05      	cmp	r3, #5
 8004af0:	d10c      	bne.n	8004b0c <HAL_RCC_OscConfig+0x30c>
 8004af2:	4b5f      	ldr	r3, [pc, #380]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af6:	4a5e      	ldr	r2, [pc, #376]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004af8:	f043 0304 	orr.w	r3, r3, #4
 8004afc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004afe:	4b5c      	ldr	r3, [pc, #368]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b02:	4a5b      	ldr	r2, [pc, #364]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004b04:	f043 0301 	orr.w	r3, r3, #1
 8004b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b0a:	e00b      	b.n	8004b24 <HAL_RCC_OscConfig+0x324>
 8004b0c:	4b58      	ldr	r3, [pc, #352]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b10:	4a57      	ldr	r2, [pc, #348]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004b12:	f023 0301 	bic.w	r3, r3, #1
 8004b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b18:	4b55      	ldr	r3, [pc, #340]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b1c:	4a54      	ldr	r2, [pc, #336]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004b1e:	f023 0304 	bic.w	r3, r3, #4
 8004b22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d015      	beq.n	8004b58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2c:	f7fe fe1a 	bl	8003764 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b32:	e00a      	b.n	8004b4a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b34:	f7fe fe16 	bl	8003764 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e0cb      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4a:	4b49      	ldr	r3, [pc, #292]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0ee      	beq.n	8004b34 <HAL_RCC_OscConfig+0x334>
 8004b56:	e014      	b.n	8004b82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b58:	f7fe fe04 	bl	8003764 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b5e:	e00a      	b.n	8004b76 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b60:	f7fe fe00 	bl	8003764 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e0b5      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b76:	4b3e      	ldr	r3, [pc, #248]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1ee      	bne.n	8004b60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b82:	7dfb      	ldrb	r3, [r7, #23]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d105      	bne.n	8004b94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b88:	4b39      	ldr	r3, [pc, #228]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8c:	4a38      	ldr	r2, [pc, #224]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004b8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 80a1 	beq.w	8004ce0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b9e:	4b34      	ldr	r3, [pc, #208]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 030c 	and.w	r3, r3, #12
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d05c      	beq.n	8004c64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d141      	bne.n	8004c36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb2:	4b31      	ldr	r3, [pc, #196]	@ (8004c78 <HAL_RCC_OscConfig+0x478>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb8:	f7fe fdd4 	bl	8003764 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc0:	f7fe fdd0 	bl	8003764 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e087      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd2:	4b27      	ldr	r3, [pc, #156]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69da      	ldr	r2, [r3, #28]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bec:	019b      	lsls	r3, r3, #6
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf4:	085b      	lsrs	r3, r3, #1
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	041b      	lsls	r3, r3, #16
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c00:	061b      	lsls	r3, r3, #24
 8004c02:	491b      	ldr	r1, [pc, #108]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c08:	4b1b      	ldr	r3, [pc, #108]	@ (8004c78 <HAL_RCC_OscConfig+0x478>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0e:	f7fe fda9 	bl	8003764 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c16:	f7fe fda5 	bl	8003764 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e05c      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c28:	4b11      	ldr	r3, [pc, #68]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0f0      	beq.n	8004c16 <HAL_RCC_OscConfig+0x416>
 8004c34:	e054      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c36:	4b10      	ldr	r3, [pc, #64]	@ (8004c78 <HAL_RCC_OscConfig+0x478>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3c:	f7fe fd92 	bl	8003764 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c44:	f7fe fd8e 	bl	8003764 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e045      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c56:	4b06      	ldr	r3, [pc, #24]	@ (8004c70 <HAL_RCC_OscConfig+0x470>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCC_OscConfig+0x444>
 8004c62:	e03d      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d107      	bne.n	8004c7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e038      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
 8004c70:	40023800 	.word	0x40023800
 8004c74:	40007000 	.word	0x40007000
 8004c78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004cec <HAL_RCC_OscConfig+0x4ec>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d028      	beq.n	8004cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d121      	bne.n	8004cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d11a      	bne.n	8004cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004cac:	4013      	ands	r3, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d111      	bne.n	8004cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc2:	085b      	lsrs	r3, r3, #1
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d107      	bne.n	8004cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d001      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40023800 	.word	0x40023800

08004cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e0cc      	b.n	8004e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d04:	4b68      	ldr	r3, [pc, #416]	@ (8004ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 030f 	and.w	r3, r3, #15
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d90c      	bls.n	8004d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d12:	4b65      	ldr	r3, [pc, #404]	@ (8004ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1a:	4b63      	ldr	r3, [pc, #396]	@ (8004ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d001      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e0b8      	b.n	8004e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d020      	beq.n	8004d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d44:	4b59      	ldr	r3, [pc, #356]	@ (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	4a58      	ldr	r2, [pc, #352]	@ (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0308 	and.w	r3, r3, #8
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d005      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d5c:	4b53      	ldr	r3, [pc, #332]	@ (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	4a52      	ldr	r2, [pc, #328]	@ (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d68:	4b50      	ldr	r3, [pc, #320]	@ (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	494d      	ldr	r1, [pc, #308]	@ (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d044      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d107      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d8e:	4b47      	ldr	r3, [pc, #284]	@ (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d119      	bne.n	8004dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e07f      	b.n	8004e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d003      	beq.n	8004dae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d107      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dae:	4b3f      	ldr	r3, [pc, #252]	@ (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d109      	bne.n	8004dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e06f      	b.n	8004e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e067      	b.n	8004e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dce:	4b37      	ldr	r3, [pc, #220]	@ (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f023 0203 	bic.w	r2, r3, #3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	4934      	ldr	r1, [pc, #208]	@ (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004de0:	f7fe fcc0 	bl	8003764 <HAL_GetTick>
 8004de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de6:	e00a      	b.n	8004dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004de8:	f7fe fcbc 	bl	8003764 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e04f      	b.n	8004e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dfe:	4b2b      	ldr	r3, [pc, #172]	@ (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 020c 	and.w	r2, r3, #12
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d1eb      	bne.n	8004de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e10:	4b25      	ldr	r3, [pc, #148]	@ (8004ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 030f 	and.w	r3, r3, #15
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d20c      	bcs.n	8004e38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1e:	4b22      	ldr	r3, [pc, #136]	@ (8004ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e26:	4b20      	ldr	r3, [pc, #128]	@ (8004ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d001      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e032      	b.n	8004e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d008      	beq.n	8004e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e44:	4b19      	ldr	r3, [pc, #100]	@ (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	4916      	ldr	r1, [pc, #88]	@ (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0308 	and.w	r3, r3, #8
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d009      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e62:	4b12      	ldr	r3, [pc, #72]	@ (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	490e      	ldr	r1, [pc, #56]	@ (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e76:	f000 f821 	bl	8004ebc <HAL_RCC_GetSysClockFreq>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004eac <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	091b      	lsrs	r3, r3, #4
 8004e82:	f003 030f 	and.w	r3, r3, #15
 8004e86:	490a      	ldr	r1, [pc, #40]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e88:	5ccb      	ldrb	r3, [r1, r3]
 8004e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e8e:	4a09      	ldr	r2, [pc, #36]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e92:	4b09      	ldr	r3, [pc, #36]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fe fc20 	bl	80036dc <HAL_InitTick>

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40023c00 	.word	0x40023c00
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	08007388 	.word	0x08007388
 8004eb4:	20000010 	.word	0x20000010
 8004eb8:	20000014 	.word	0x20000014

08004ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ec0:	b094      	sub	sp, #80	@ 0x50
 8004ec2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ed4:	4b79      	ldr	r3, [pc, #484]	@ (80050bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f003 030c 	and.w	r3, r3, #12
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d00d      	beq.n	8004efc <HAL_RCC_GetSysClockFreq+0x40>
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	f200 80e1 	bhi.w	80050a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d003      	beq.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004eee:	e0db      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ef0:	4b73      	ldr	r3, [pc, #460]	@ (80050c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ef4:	e0db      	b.n	80050ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ef6:	4b73      	ldr	r3, [pc, #460]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004efa:	e0d8      	b.n	80050ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004efc:	4b6f      	ldr	r3, [pc, #444]	@ (80050bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f04:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f06:	4b6d      	ldr	r3, [pc, #436]	@ (80050bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d063      	beq.n	8004fda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f12:	4b6a      	ldr	r3, [pc, #424]	@ (80050bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	099b      	lsrs	r3, r3, #6
 8004f18:	2200      	movs	r2, #0
 8004f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f24:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f26:	2300      	movs	r3, #0
 8004f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004f2e:	4622      	mov	r2, r4
 8004f30:	462b      	mov	r3, r5
 8004f32:	f04f 0000 	mov.w	r0, #0
 8004f36:	f04f 0100 	mov.w	r1, #0
 8004f3a:	0159      	lsls	r1, r3, #5
 8004f3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f40:	0150      	lsls	r0, r2, #5
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	4621      	mov	r1, r4
 8004f48:	1a51      	subs	r1, r2, r1
 8004f4a:	6139      	str	r1, [r7, #16]
 8004f4c:	4629      	mov	r1, r5
 8004f4e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f60:	4659      	mov	r1, fp
 8004f62:	018b      	lsls	r3, r1, #6
 8004f64:	4651      	mov	r1, sl
 8004f66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f6a:	4651      	mov	r1, sl
 8004f6c:	018a      	lsls	r2, r1, #6
 8004f6e:	4651      	mov	r1, sl
 8004f70:	ebb2 0801 	subs.w	r8, r2, r1
 8004f74:	4659      	mov	r1, fp
 8004f76:	eb63 0901 	sbc.w	r9, r3, r1
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	f04f 0300 	mov.w	r3, #0
 8004f82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f8e:	4690      	mov	r8, r2
 8004f90:	4699      	mov	r9, r3
 8004f92:	4623      	mov	r3, r4
 8004f94:	eb18 0303 	adds.w	r3, r8, r3
 8004f98:	60bb      	str	r3, [r7, #8]
 8004f9a:	462b      	mov	r3, r5
 8004f9c:	eb49 0303 	adc.w	r3, r9, r3
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	f04f 0300 	mov.w	r3, #0
 8004faa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fae:	4629      	mov	r1, r5
 8004fb0:	024b      	lsls	r3, r1, #9
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fb8:	4621      	mov	r1, r4
 8004fba:	024a      	lsls	r2, r1, #9
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004fcc:	f7fb f90e 	bl	80001ec <__aeabi_uldivmod>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fd8:	e058      	b.n	800508c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fda:	4b38      	ldr	r3, [pc, #224]	@ (80050bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	099b      	lsrs	r3, r3, #6
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fea:	623b      	str	r3, [r7, #32]
 8004fec:	2300      	movs	r3, #0
 8004fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ff0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ff4:	4642      	mov	r2, r8
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	f04f 0000 	mov.w	r0, #0
 8004ffc:	f04f 0100 	mov.w	r1, #0
 8005000:	0159      	lsls	r1, r3, #5
 8005002:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005006:	0150      	lsls	r0, r2, #5
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	4641      	mov	r1, r8
 800500e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005012:	4649      	mov	r1, r9
 8005014:	eb63 0b01 	sbc.w	fp, r3, r1
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005024:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005028:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800502c:	ebb2 040a 	subs.w	r4, r2, sl
 8005030:	eb63 050b 	sbc.w	r5, r3, fp
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	00eb      	lsls	r3, r5, #3
 800503e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005042:	00e2      	lsls	r2, r4, #3
 8005044:	4614      	mov	r4, r2
 8005046:	461d      	mov	r5, r3
 8005048:	4643      	mov	r3, r8
 800504a:	18e3      	adds	r3, r4, r3
 800504c:	603b      	str	r3, [r7, #0]
 800504e:	464b      	mov	r3, r9
 8005050:	eb45 0303 	adc.w	r3, r5, r3
 8005054:	607b      	str	r3, [r7, #4]
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005062:	4629      	mov	r1, r5
 8005064:	028b      	lsls	r3, r1, #10
 8005066:	4621      	mov	r1, r4
 8005068:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800506c:	4621      	mov	r1, r4
 800506e:	028a      	lsls	r2, r1, #10
 8005070:	4610      	mov	r0, r2
 8005072:	4619      	mov	r1, r3
 8005074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005076:	2200      	movs	r2, #0
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	61fa      	str	r2, [r7, #28]
 800507c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005080:	f7fb f8b4 	bl	80001ec <__aeabi_uldivmod>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4613      	mov	r3, r2
 800508a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800508c:	4b0b      	ldr	r3, [pc, #44]	@ (80050bc <HAL_RCC_GetSysClockFreq+0x200>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	0c1b      	lsrs	r3, r3, #16
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	3301      	adds	r3, #1
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800509c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800509e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050a6:	e002      	b.n	80050ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050a8:	4b05      	ldr	r3, [pc, #20]	@ (80050c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80050aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3750      	adds	r7, #80	@ 0x50
 80050b4:	46bd      	mov	sp, r7
 80050b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ba:	bf00      	nop
 80050bc:	40023800 	.word	0x40023800
 80050c0:	00f42400 	.word	0x00f42400
 80050c4:	007a1200 	.word	0x007a1200

080050c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050cc:	4b03      	ldr	r3, [pc, #12]	@ (80050dc <HAL_RCC_GetHCLKFreq+0x14>)
 80050ce:	681b      	ldr	r3, [r3, #0]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	20000010 	.word	0x20000010

080050e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050e4:	f7ff fff0 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 80050e8:	4602      	mov	r2, r0
 80050ea:	4b05      	ldr	r3, [pc, #20]	@ (8005100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	0a9b      	lsrs	r3, r3, #10
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	4903      	ldr	r1, [pc, #12]	@ (8005104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050f6:	5ccb      	ldrb	r3, [r1, r3]
 80050f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40023800 	.word	0x40023800
 8005104:	08007398 	.word	0x08007398

08005108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10b      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800512c:	2b00      	cmp	r3, #0
 800512e:	d105      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005138:	2b00      	cmp	r3, #0
 800513a:	d075      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800513c:	4b91      	ldr	r3, [pc, #580]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005142:	f7fe fb0f 	bl	8003764 <HAL_GetTick>
 8005146:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005148:	e008      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800514a:	f7fe fb0b 	bl	8003764 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d901      	bls.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e189      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800515c:	4b8a      	ldr	r3, [pc, #552]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1f0      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d009      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	019a      	lsls	r2, r3, #6
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	071b      	lsls	r3, r3, #28
 8005180:	4981      	ldr	r1, [pc, #516]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005182:	4313      	orrs	r3, r2
 8005184:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01f      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005194:	4b7c      	ldr	r3, [pc, #496]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005196:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800519a:	0f1b      	lsrs	r3, r3, #28
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	019a      	lsls	r2, r3, #6
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	061b      	lsls	r3, r3, #24
 80051ae:	431a      	orrs	r2, r3
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	071b      	lsls	r3, r3, #28
 80051b4:	4974      	ldr	r1, [pc, #464]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80051bc:	4b72      	ldr	r3, [pc, #456]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051c2:	f023 021f 	bic.w	r2, r3, #31
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	496e      	ldr	r1, [pc, #440]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00d      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	019a      	lsls	r2, r3, #6
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	061b      	lsls	r3, r3, #24
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	071b      	lsls	r3, r3, #28
 80051f4:	4964      	ldr	r1, [pc, #400]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051fc:	4b61      	ldr	r3, [pc, #388]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80051fe:	2201      	movs	r2, #1
 8005200:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005202:	f7fe faaf 	bl	8003764 <HAL_GetTick>
 8005206:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005208:	e008      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800520a:	f7fe faab 	bl	8003764 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e129      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800521c:	4b5a      	ldr	r3, [pc, #360]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0f0      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	d105      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800523c:	2b00      	cmp	r3, #0
 800523e:	d079      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005240:	4b52      	ldr	r3, [pc, #328]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005246:	f7fe fa8d 	bl	8003764 <HAL_GetTick>
 800524a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800524c:	e008      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800524e:	f7fe fa89 	bl	8003764 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e107      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005260:	4b49      	ldr	r3, [pc, #292]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005268:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800526c:	d0ef      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	2b00      	cmp	r3, #0
 8005278:	d020      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800527a:	4b43      	ldr	r3, [pc, #268]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800527c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005280:	0f1b      	lsrs	r3, r3, #28
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	019a      	lsls	r2, r3, #6
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	061b      	lsls	r3, r3, #24
 8005294:	431a      	orrs	r2, r3
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	071b      	lsls	r3, r3, #28
 800529a:	493b      	ldr	r1, [pc, #236]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052a2:	4b39      	ldr	r3, [pc, #228]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052a8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	4934      	ldr	r1, [pc, #208]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01e      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052c8:	4b2f      	ldr	r3, [pc, #188]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ce:	0e1b      	lsrs	r3, r3, #24
 80052d0:	f003 030f 	and.w	r3, r3, #15
 80052d4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	019a      	lsls	r2, r3, #6
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	061b      	lsls	r3, r3, #24
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	071b      	lsls	r3, r3, #28
 80052e8:	4927      	ldr	r1, [pc, #156]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052f0:	4b25      	ldr	r3, [pc, #148]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052f6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fe:	4922      	ldr	r1, [pc, #136]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005306:	4b21      	ldr	r3, [pc, #132]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005308:	2201      	movs	r2, #1
 800530a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800530c:	f7fe fa2a 	bl	8003764 <HAL_GetTick>
 8005310:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005314:	f7fe fa26 	bl	8003764 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e0a4      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005326:	4b18      	ldr	r3, [pc, #96]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800532e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005332:	d1ef      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0320 	and.w	r3, r3, #32
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 808b 	beq.w	8005458 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	4b10      	ldr	r3, [pc, #64]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534a:	4a0f      	ldr	r2, [pc, #60]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800534c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005350:	6413      	str	r3, [r2, #64]	@ 0x40
 8005352:	4b0d      	ldr	r3, [pc, #52]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800535e:	4b0c      	ldr	r3, [pc, #48]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a0b      	ldr	r2, [pc, #44]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005368:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800536a:	f7fe f9fb 	bl	8003764 <HAL_GetTick>
 800536e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005370:	e010      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005372:	f7fe f9f7 	bl	8003764 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d909      	bls.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e075      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005384:	42470068 	.word	0x42470068
 8005388:	40023800 	.word	0x40023800
 800538c:	42470070 	.word	0x42470070
 8005390:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005394:	4b38      	ldr	r3, [pc, #224]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0e8      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053a0:	4b36      	ldr	r3, [pc, #216]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053a8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d02f      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d028      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053be:	4b2f      	ldr	r3, [pc, #188]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80053ca:	2201      	movs	r2, #1
 80053cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053ce:	4b2c      	ldr	r3, [pc, #176]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80053d4:	4a29      	ldr	r2, [pc, #164]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053da:	4b28      	ldr	r3, [pc, #160]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d114      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80053e6:	f7fe f9bd 	bl	8003764 <HAL_GetTick>
 80053ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ec:	e00a      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ee:	f7fe f9b9 	bl	8003764 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d901      	bls.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e035      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005404:	4b1d      	ldr	r3, [pc, #116]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0ee      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005414:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005418:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800541c:	d10d      	bne.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800541e:	4b17      	ldr	r3, [pc, #92]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800542e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005432:	4912      	ldr	r1, [pc, #72]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005434:	4313      	orrs	r3, r2
 8005436:	608b      	str	r3, [r1, #8]
 8005438:	e005      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800543a:	4b10      	ldr	r3, [pc, #64]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	4a0f      	ldr	r2, [pc, #60]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005440:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005444:	6093      	str	r3, [r2, #8]
 8005446:	4b0d      	ldr	r3, [pc, #52]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005448:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005452:	490a      	ldr	r1, [pc, #40]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005454:	4313      	orrs	r3, r2
 8005456:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	2b00      	cmp	r3, #0
 8005462:	d004      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800546a:	4b06      	ldr	r3, [pc, #24]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800546c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40007000 	.word	0x40007000
 800547c:	40023800 	.word	0x40023800
 8005480:	42470e40 	.word	0x42470e40
 8005484:	424711e0 	.word	0x424711e0

08005488 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e01c      	b.n	80054d4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	795b      	ldrb	r3, [r3, #5]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d105      	bne.n	80054b0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fd ffc4 	bl	8003438 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0204 	orr.w	r2, r2, #4
 80054c4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e07b      	b.n	80055e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d108      	bne.n	8005508 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054fe:	d009      	beq.n	8005514 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	61da      	str	r2, [r3, #28]
 8005506:	e005      	b.n	8005514 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fd ffa4 	bl	800347c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800554a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005566:	431a      	orrs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005598:	ea42 0103 	orr.w	r1, r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	0c1b      	lsrs	r3, r3, #16
 80055b2:	f003 0104 	and.w	r1, r3, #4
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ba:	f003 0210 	and.w	r2, r3, #16
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69da      	ldr	r2, [r3, #28]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b082      	sub	sp, #8
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e01a      	b.n	8005636 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005616:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7fd ff77 	bl	800350c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b088      	sub	sp, #32
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	603b      	str	r3, [r7, #0]
 800564a:	4613      	mov	r3, r2
 800564c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800564e:	f7fe f889 	bl	8003764 <HAL_GetTick>
 8005652:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005654:	88fb      	ldrh	r3, [r7, #6]
 8005656:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b01      	cmp	r3, #1
 8005662:	d001      	beq.n	8005668 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005664:	2302      	movs	r3, #2
 8005666:	e12a      	b.n	80058be <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <HAL_SPI_Transmit+0x36>
 800566e:	88fb      	ldrh	r3, [r7, #6]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e122      	b.n	80058be <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800567e:	2b01      	cmp	r3, #1
 8005680:	d101      	bne.n	8005686 <HAL_SPI_Transmit+0x48>
 8005682:	2302      	movs	r3, #2
 8005684:	e11b      	b.n	80058be <HAL_SPI_Transmit+0x280>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2203      	movs	r2, #3
 8005692:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	88fa      	ldrh	r2, [r7, #6]
 80056a6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	88fa      	ldrh	r2, [r7, #6]
 80056ac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056d4:	d10f      	bne.n	80056f6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005700:	2b40      	cmp	r3, #64	@ 0x40
 8005702:	d007      	beq.n	8005714 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005712:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800571c:	d152      	bne.n	80057c4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <HAL_SPI_Transmit+0xee>
 8005726:	8b7b      	ldrh	r3, [r7, #26]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d145      	bne.n	80057b8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005730:	881a      	ldrh	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573c:	1c9a      	adds	r2, r3, #2
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005750:	e032      	b.n	80057b8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b02      	cmp	r3, #2
 800575e:	d112      	bne.n	8005786 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005764:	881a      	ldrh	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005770:	1c9a      	adds	r2, r3, #2
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005784:	e018      	b.n	80057b8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005786:	f7fd ffed 	bl	8003764 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d803      	bhi.n	800579e <HAL_SPI_Transmit+0x160>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579c:	d102      	bne.n	80057a4 <HAL_SPI_Transmit+0x166>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d109      	bne.n	80057b8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e082      	b.n	80058be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1c7      	bne.n	8005752 <HAL_SPI_Transmit+0x114>
 80057c2:	e053      	b.n	800586c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <HAL_SPI_Transmit+0x194>
 80057cc:	8b7b      	ldrh	r3, [r7, #26]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d147      	bne.n	8005862 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	330c      	adds	r3, #12
 80057dc:	7812      	ldrb	r2, [r2, #0]
 80057de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057f8:	e033      	b.n	8005862 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b02      	cmp	r3, #2
 8005806:	d113      	bne.n	8005830 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	330c      	adds	r3, #12
 8005812:	7812      	ldrb	r2, [r2, #0]
 8005814:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005824:	b29b      	uxth	r3, r3
 8005826:	3b01      	subs	r3, #1
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800582e:	e018      	b.n	8005862 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005830:	f7fd ff98 	bl	8003764 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d803      	bhi.n	8005848 <HAL_SPI_Transmit+0x20a>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005846:	d102      	bne.n	800584e <HAL_SPI_Transmit+0x210>
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d109      	bne.n	8005862 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e02d      	b.n	80058be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1c6      	bne.n	80057fa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	6839      	ldr	r1, [r7, #0]
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 f8bf 	bl	80059f4 <SPI_EndRxTxTransaction>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2220      	movs	r2, #32
 8005880:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10a      	bne.n	80058a0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800588a:	2300      	movs	r3, #0
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80058bc:	2300      	movs	r3, #0
  }
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3720      	adds	r7, #32
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058d4:	b2db      	uxtb	r3, r3
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
	...

080058e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	603b      	str	r3, [r7, #0]
 80058f0:	4613      	mov	r3, r2
 80058f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058f4:	f7fd ff36 	bl	8003764 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fc:	1a9b      	subs	r3, r3, r2
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	4413      	add	r3, r2
 8005902:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005904:	f7fd ff2e 	bl	8003764 <HAL_GetTick>
 8005908:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800590a:	4b39      	ldr	r3, [pc, #228]	@ (80059f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	015b      	lsls	r3, r3, #5
 8005910:	0d1b      	lsrs	r3, r3, #20
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	fb02 f303 	mul.w	r3, r2, r3
 8005918:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800591a:	e054      	b.n	80059c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005922:	d050      	beq.n	80059c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005924:	f7fd ff1e 	bl	8003764 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	429a      	cmp	r2, r3
 8005932:	d902      	bls.n	800593a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d13d      	bne.n	80059b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005948:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005952:	d111      	bne.n	8005978 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800595c:	d004      	beq.n	8005968 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005966:	d107      	bne.n	8005978 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005976:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005980:	d10f      	bne.n	80059a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e017      	b.n	80059e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4013      	ands	r3, r2
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	bf0c      	ite	eq
 80059d6:	2301      	moveq	r3, #1
 80059d8:	2300      	movne	r3, #0
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	79fb      	ldrb	r3, [r7, #7]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d19b      	bne.n	800591c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3720      	adds	r7, #32
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20000010 	.word	0x20000010

080059f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2201      	movs	r2, #1
 8005a08:	2102      	movs	r1, #2
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f7ff ff6a 	bl	80058e4 <SPI_WaitFlagStateUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d007      	beq.n	8005a26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1a:	f043 0220 	orr.w	r2, r3, #32
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e032      	b.n	8005a8c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a26:	4b1b      	ldr	r3, [pc, #108]	@ (8005a94 <SPI_EndRxTxTransaction+0xa0>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8005a98 <SPI_EndRxTxTransaction+0xa4>)
 8005a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a30:	0d5b      	lsrs	r3, r3, #21
 8005a32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005a36:	fb02 f303 	mul.w	r3, r2, r3
 8005a3a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a44:	d112      	bne.n	8005a6c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2180      	movs	r1, #128	@ 0x80
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f7ff ff47 	bl	80058e4 <SPI_WaitFlagStateUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d016      	beq.n	8005a8a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a60:	f043 0220 	orr.w	r2, r3, #32
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e00f      	b.n	8005a8c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a82:	2b80      	cmp	r3, #128	@ 0x80
 8005a84:	d0f2      	beq.n	8005a6c <SPI_EndRxTxTransaction+0x78>
 8005a86:	e000      	b.n	8005a8a <SPI_EndRxTxTransaction+0x96>
        break;
 8005a88:	bf00      	nop
  }

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	20000010 	.word	0x20000010
 8005a98:	165e9f81 	.word	0x165e9f81

08005a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e041      	b.n	8005b32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fd fd40 	bl	8003548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4610      	mov	r0, r2
 8005adc:	f000 f8f4 	bl	8005cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d101      	bne.n	8005b56 <HAL_TIM_ConfigClockSource+0x1c>
 8005b52:	2302      	movs	r3, #2
 8005b54:	e0b4      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x186>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2202      	movs	r2, #2
 8005b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005b74:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b7c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b8e:	d03e      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0xd4>
 8005b90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b94:	f200 8087 	bhi.w	8005ca6 <HAL_TIM_ConfigClockSource+0x16c>
 8005b98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b9c:	f000 8086 	beq.w	8005cac <HAL_TIM_ConfigClockSource+0x172>
 8005ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ba4:	d87f      	bhi.n	8005ca6 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba6:	2b70      	cmp	r3, #112	@ 0x70
 8005ba8:	d01a      	beq.n	8005be0 <HAL_TIM_ConfigClockSource+0xa6>
 8005baa:	2b70      	cmp	r3, #112	@ 0x70
 8005bac:	d87b      	bhi.n	8005ca6 <HAL_TIM_ConfigClockSource+0x16c>
 8005bae:	2b60      	cmp	r3, #96	@ 0x60
 8005bb0:	d050      	beq.n	8005c54 <HAL_TIM_ConfigClockSource+0x11a>
 8005bb2:	2b60      	cmp	r3, #96	@ 0x60
 8005bb4:	d877      	bhi.n	8005ca6 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb6:	2b50      	cmp	r3, #80	@ 0x50
 8005bb8:	d03c      	beq.n	8005c34 <HAL_TIM_ConfigClockSource+0xfa>
 8005bba:	2b50      	cmp	r3, #80	@ 0x50
 8005bbc:	d873      	bhi.n	8005ca6 <HAL_TIM_ConfigClockSource+0x16c>
 8005bbe:	2b40      	cmp	r3, #64	@ 0x40
 8005bc0:	d058      	beq.n	8005c74 <HAL_TIM_ConfigClockSource+0x13a>
 8005bc2:	2b40      	cmp	r3, #64	@ 0x40
 8005bc4:	d86f      	bhi.n	8005ca6 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc6:	2b30      	cmp	r3, #48	@ 0x30
 8005bc8:	d064      	beq.n	8005c94 <HAL_TIM_ConfigClockSource+0x15a>
 8005bca:	2b30      	cmp	r3, #48	@ 0x30
 8005bcc:	d86b      	bhi.n	8005ca6 <HAL_TIM_ConfigClockSource+0x16c>
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	d060      	beq.n	8005c94 <HAL_TIM_ConfigClockSource+0x15a>
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	d867      	bhi.n	8005ca6 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d05c      	beq.n	8005c94 <HAL_TIM_ConfigClockSource+0x15a>
 8005bda:	2b10      	cmp	r3, #16
 8005bdc:	d05a      	beq.n	8005c94 <HAL_TIM_ConfigClockSource+0x15a>
 8005bde:	e062      	b.n	8005ca6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bf0:	f000 f990 	bl	8005f14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c02:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	609a      	str	r2, [r3, #8]
      break;
 8005c0c:	e04f      	b.n	8005cae <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c1e:	f000 f979 	bl	8005f14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c30:	609a      	str	r2, [r3, #8]
      break;
 8005c32:	e03c      	b.n	8005cae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c40:	461a      	mov	r2, r3
 8005c42:	f000 f8ed 	bl	8005e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2150      	movs	r1, #80	@ 0x50
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 f946 	bl	8005ede <TIM_ITRx_SetConfig>
      break;
 8005c52:	e02c      	b.n	8005cae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c60:	461a      	mov	r2, r3
 8005c62:	f000 f90c 	bl	8005e7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2160      	movs	r1, #96	@ 0x60
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 f936 	bl	8005ede <TIM_ITRx_SetConfig>
      break;
 8005c72:	e01c      	b.n	8005cae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c80:	461a      	mov	r2, r3
 8005c82:	f000 f8cd 	bl	8005e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2140      	movs	r1, #64	@ 0x40
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 f926 	bl	8005ede <TIM_ITRx_SetConfig>
      break;
 8005c92:	e00c      	b.n	8005cae <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	f000 f91d 	bl	8005ede <TIM_ITRx_SetConfig>
      break;
 8005ca4:	e003      	b.n	8005cae <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8005caa:	e000      	b.n	8005cae <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a46      	ldr	r2, [pc, #280]	@ (8005df4 <TIM_Base_SetConfig+0x12c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d013      	beq.n	8005d08 <TIM_Base_SetConfig+0x40>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ce6:	d00f      	beq.n	8005d08 <TIM_Base_SetConfig+0x40>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a43      	ldr	r2, [pc, #268]	@ (8005df8 <TIM_Base_SetConfig+0x130>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d00b      	beq.n	8005d08 <TIM_Base_SetConfig+0x40>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a42      	ldr	r2, [pc, #264]	@ (8005dfc <TIM_Base_SetConfig+0x134>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d007      	beq.n	8005d08 <TIM_Base_SetConfig+0x40>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a41      	ldr	r2, [pc, #260]	@ (8005e00 <TIM_Base_SetConfig+0x138>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d003      	beq.n	8005d08 <TIM_Base_SetConfig+0x40>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a40      	ldr	r2, [pc, #256]	@ (8005e04 <TIM_Base_SetConfig+0x13c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d108      	bne.n	8005d1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a35      	ldr	r2, [pc, #212]	@ (8005df4 <TIM_Base_SetConfig+0x12c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d02b      	beq.n	8005d7a <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d28:	d027      	beq.n	8005d7a <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a32      	ldr	r2, [pc, #200]	@ (8005df8 <TIM_Base_SetConfig+0x130>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d023      	beq.n	8005d7a <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a31      	ldr	r2, [pc, #196]	@ (8005dfc <TIM_Base_SetConfig+0x134>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d01f      	beq.n	8005d7a <TIM_Base_SetConfig+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a30      	ldr	r2, [pc, #192]	@ (8005e00 <TIM_Base_SetConfig+0x138>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01b      	beq.n	8005d7a <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a2f      	ldr	r2, [pc, #188]	@ (8005e04 <TIM_Base_SetConfig+0x13c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d017      	beq.n	8005d7a <TIM_Base_SetConfig+0xb2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a2e      	ldr	r2, [pc, #184]	@ (8005e08 <TIM_Base_SetConfig+0x140>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d013      	beq.n	8005d7a <TIM_Base_SetConfig+0xb2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a2d      	ldr	r2, [pc, #180]	@ (8005e0c <TIM_Base_SetConfig+0x144>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00f      	beq.n	8005d7a <TIM_Base_SetConfig+0xb2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a2c      	ldr	r2, [pc, #176]	@ (8005e10 <TIM_Base_SetConfig+0x148>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00b      	beq.n	8005d7a <TIM_Base_SetConfig+0xb2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a2b      	ldr	r2, [pc, #172]	@ (8005e14 <TIM_Base_SetConfig+0x14c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d007      	beq.n	8005d7a <TIM_Base_SetConfig+0xb2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a2a      	ldr	r2, [pc, #168]	@ (8005e18 <TIM_Base_SetConfig+0x150>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d003      	beq.n	8005d7a <TIM_Base_SetConfig+0xb2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a29      	ldr	r2, [pc, #164]	@ (8005e1c <TIM_Base_SetConfig+0x154>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d108      	bne.n	8005d8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a10      	ldr	r2, [pc, #64]	@ (8005df4 <TIM_Base_SetConfig+0x12c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d003      	beq.n	8005dc0 <TIM_Base_SetConfig+0xf8>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a12      	ldr	r2, [pc, #72]	@ (8005e04 <TIM_Base_SetConfig+0x13c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d103      	bne.n	8005dc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d105      	bne.n	8005de6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	f023 0201 	bic.w	r2, r3, #1
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	611a      	str	r2, [r3, #16]
  }
}
 8005de6:	bf00      	nop
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40010000 	.word	0x40010000
 8005df8:	40000400 	.word	0x40000400
 8005dfc:	40000800 	.word	0x40000800
 8005e00:	40000c00 	.word	0x40000c00
 8005e04:	40010400 	.word	0x40010400
 8005e08:	40014000 	.word	0x40014000
 8005e0c:	40014400 	.word	0x40014400
 8005e10:	40014800 	.word	0x40014800
 8005e14:	40001800 	.word	0x40001800
 8005e18:	40001c00 	.word	0x40001c00
 8005e1c:	40002000 	.word	0x40002000

08005e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	f023 0201 	bic.w	r2, r3, #1
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f023 030a 	bic.w	r3, r3, #10
 8005e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	621a      	str	r2, [r3, #32]
}
 8005e72:	bf00      	nop
 8005e74:	371c      	adds	r7, #28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b087      	sub	sp, #28
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	f023 0210 	bic.w	r2, r3, #16
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ea8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	031b      	lsls	r3, r3, #12
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005eba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ef4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f043 0307 	orr.w	r3, r3, #7
 8005f00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	609a      	str	r2, [r3, #8]
}
 8005f08:	bf00      	nop
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	021a      	lsls	r2, r3, #8
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	609a      	str	r2, [r3, #8]
}
 8005f48:	bf00      	nop
 8005f4a:	371c      	adds	r7, #28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d101      	bne.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f68:	2302      	movs	r3, #2
 8005f6a:	e05a      	b.n	8006022 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a21      	ldr	r2, [pc, #132]	@ (8006030 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d022      	beq.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fb8:	d01d      	beq.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1d      	ldr	r2, [pc, #116]	@ (8006034 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d018      	beq.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8006038 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d013      	beq.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800603c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00e      	beq.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a18      	ldr	r2, [pc, #96]	@ (8006040 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d009      	beq.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a17      	ldr	r2, [pc, #92]	@ (8006044 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d004      	beq.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a15      	ldr	r2, [pc, #84]	@ (8006048 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d10c      	bne.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ffc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	4313      	orrs	r3, r2
 8006006:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	40010000 	.word	0x40010000
 8006034:	40000400 	.word	0x40000400
 8006038:	40000800 	.word	0x40000800
 800603c:	40000c00 	.word	0x40000c00
 8006040:	40010400 	.word	0x40010400
 8006044:	40014000 	.word	0x40014000
 8006048:	40001800 	.word	0x40001800

0800604c <memset>:
 800604c:	4402      	add	r2, r0
 800604e:	4603      	mov	r3, r0
 8006050:	4293      	cmp	r3, r2
 8006052:	d100      	bne.n	8006056 <memset+0xa>
 8006054:	4770      	bx	lr
 8006056:	f803 1b01 	strb.w	r1, [r3], #1
 800605a:	e7f9      	b.n	8006050 <memset+0x4>

0800605c <__libc_init_array>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	4d0d      	ldr	r5, [pc, #52]	@ (8006094 <__libc_init_array+0x38>)
 8006060:	4c0d      	ldr	r4, [pc, #52]	@ (8006098 <__libc_init_array+0x3c>)
 8006062:	1b64      	subs	r4, r4, r5
 8006064:	10a4      	asrs	r4, r4, #2
 8006066:	2600      	movs	r6, #0
 8006068:	42a6      	cmp	r6, r4
 800606a:	d109      	bne.n	8006080 <__libc_init_array+0x24>
 800606c:	4d0b      	ldr	r5, [pc, #44]	@ (800609c <__libc_init_array+0x40>)
 800606e:	4c0c      	ldr	r4, [pc, #48]	@ (80060a0 <__libc_init_array+0x44>)
 8006070:	f000 f826 	bl	80060c0 <_init>
 8006074:	1b64      	subs	r4, r4, r5
 8006076:	10a4      	asrs	r4, r4, #2
 8006078:	2600      	movs	r6, #0
 800607a:	42a6      	cmp	r6, r4
 800607c:	d105      	bne.n	800608a <__libc_init_array+0x2e>
 800607e:	bd70      	pop	{r4, r5, r6, pc}
 8006080:	f855 3b04 	ldr.w	r3, [r5], #4
 8006084:	4798      	blx	r3
 8006086:	3601      	adds	r6, #1
 8006088:	e7ee      	b.n	8006068 <__libc_init_array+0xc>
 800608a:	f855 3b04 	ldr.w	r3, [r5], #4
 800608e:	4798      	blx	r3
 8006090:	3601      	adds	r6, #1
 8006092:	e7f2      	b.n	800607a <__libc_init_array+0x1e>
 8006094:	080073a8 	.word	0x080073a8
 8006098:	080073a8 	.word	0x080073a8
 800609c:	080073a8 	.word	0x080073a8
 80060a0:	080073ac 	.word	0x080073ac

080060a4 <memcpy>:
 80060a4:	440a      	add	r2, r1
 80060a6:	4291      	cmp	r1, r2
 80060a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80060ac:	d100      	bne.n	80060b0 <memcpy+0xc>
 80060ae:	4770      	bx	lr
 80060b0:	b510      	push	{r4, lr}
 80060b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060ba:	4291      	cmp	r1, r2
 80060bc:	d1f9      	bne.n	80060b2 <memcpy+0xe>
 80060be:	bd10      	pop	{r4, pc}

080060c0 <_init>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	bf00      	nop
 80060c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c6:	bc08      	pop	{r3}
 80060c8:	469e      	mov	lr, r3
 80060ca:	4770      	bx	lr

080060cc <_fini>:
 80060cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ce:	bf00      	nop
 80060d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060d2:	bc08      	pop	{r3}
 80060d4:	469e      	mov	lr, r3
 80060d6:	4770      	bx	lr
